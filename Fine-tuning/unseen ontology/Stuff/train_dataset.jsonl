{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CarnivorousPlant\nDescription: CarnivorousPlant is defined as a subclass of plant whose members are characterized by possessing the ability to consume animals; specifically, each member must eat at least some animals. This distinguishes CarnivorousPlant from other plants by its unique adaptation for animal consumption.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[eats some animal]']}\nGenerated CQs:", "output": "Is CarnivorousPlant classified under the broader category of plant? | Which types of plant include CarnivorousPlant as a more specific subclass? | What general plant categories encompass CarnivorousPlant? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phloem\nDescription: Phloem is defined as a subclass of PlantParts and is characterized by being a proper part of some Stem. This formalization specifies that every instance of Phloem must be a plant part that exists as a structural component within a stem, reflecting its biological role in the transport system of plants.\nAxiom: {'subClassOf': ['PlantParts'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is it required that every instance of Phloem is a proper part of some Stem? | Is the relationship ‘is-proper-part-of’ between Phloem and Stem necessarily present for each Phloem? | Can there exist a Phloem that is not a proper part of any Stem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: leaf\nDescription: leaf is defined as a subclass of PlantParts and is characterized by the property restriction that each leaf must be part of either a twig or a branch. This formalization specifies that leaves are plant structures specifically found as components of twigs or branches, aligning with the description that leaves are parts of branches.\nAxiom: {'subClassOf': ['PlantParts'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Must a leaf always be part of a twig or a branch according to the ontology? | Can a leaf exist without being part of either a twig or a branch? | Are twigs and branches the only structures to which a leaf may belong as a part? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: carnivore\nDescription: carnivore is defined as a subclass of animal and is disjoint with herbivore, meaning that no individual can be both a carnivore and a herbivore. It is equivalent to the class of animals whose diet consists exclusively of other animals or of parts derived from animals (i.e., they eat only animals or only things that are part of animals). This formalization captures the precise biological definition: carnivores are exactly those animals that eat only animals or animal parts.\nAxiom: {'subClassOf': ['animal'], 'disjointWith': [], 'equivalentClass': ['([eats only animal] or [eats only [is-part-of some animal]])']}\nGenerated CQs:", "output": "What logical separation is specified between carnivore and herbivore within the ontology? | Is it permissible for an entity to be classified as both a carnivore and a herbivore? | Which classes are formally identified as disjoint with carnivore? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: lion\nDescription: lion is defined as a subclass of animal, with dietary restrictions stating that it eats only herbivores, and among its possible prey, it is known to eat impalas. This means any individual classified as a lion is exclusively a consumer of herbivores, consistent with its role as a carnivorous predator in ecological systems. The description affirms that lions are animals that restrict their diet strictly to herbivorous species.\nAxiom: {'subClassOf': ['animal'], 'propertyRestrictions': ['[eats some Impala]']}\nGenerated CQs:", "output": "Is every entity that a lion eats required to be a herbivore within the ontology? | Can a lion consume anything other than a herbivore according to the defined restrictions? | Does the ontology restrict lion's diet exclusively to entities classified as herbivores? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Berry\nDescription: Berry is defined as a subclass of FruitingBody, meaning every berry is a type of fruiting body. The class Berry encompasses all fruit structures that meet this ontological classification; no further restrictions or distinguishing characteristics are specified beyond their membership in the FruitingBody category.\nAxiom: {'subClassOf': ['FruitingBody']}\nGenerated CQs:", "output": "What types are included under FruitingBody, such as Berry? | Which broader categories encompass Berry? | Is Berry classified as a specialized kind of FruitingBody? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Apple\nDescription: Apple is defined as a subclass of FruitingBody, indicating that every apple is a specific type of fruiting body. This classification positions apple within the broader category of organisms or structures that produce fruit, consistent with its botanical role as the edible fruit of certain plants.\nAxiom: {'subClassOf': ['FruitingBody']}\nGenerated CQs:", "output": "What higher-level classes does Apple belong to according to the ontology? | Is Apple categorized under FruitingBody in the ontology? | Which entities are specified as subclasses of FruitingBody, such as Apple? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Grass\nDescription: Grass is defined as a subclass of plant, meaning all instances of grass are considered plants. No additional disjointness or property restrictions are specified, so grass inherits all general properties of the plant class. This class encompasses all plant entities characterized as grass.\nAxiom: {'subClassOf': ['plant']}\nGenerated CQs:", "output": "What higher-level classes encompass Grass according to the ontology structure? | Is every Grass instance also categorized under plant in the ontology? | Which types of plant include Grass as a specialization? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tree\nDescription: tree is defined as a subclass of plant, specifically within the plant kingdom. Trees are characterized as a distinct type of plant, aligning taxonomically as members of the broader plant group.\nAxiom: {'subClassOf': ['plant']}\nGenerated CQs:", "output": "What are all the subclasses classified under plant, specifically including tree? | Which broader classes encompass tree within the ontology? | Is tree a specialized type of plant? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Elephant\nDescription: Elephant is defined as a subclass of herbivore, indicating that all elephants are herbivorous animals. This formalization ensures that any individual classified as an elephant is necessarily a herbivore. If further biological or behavioral characteristics are provided, they can be incorporated to enhance the class description.\nAxiom: {'subClassOf': ['herbivore']}\nGenerated CQs:", "output": "Is Elephant categorized under the class herbivore? | Which animal classes are direct specializations of herbivore? | What broader groups encompass Elephant within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FruitingBody\nDescription: FruitingBody is defined as a subclass of PlantParts, meaning it represents a specific type of plant part within the ontology. This class is intended to capture plant structures specialized for producing and containing reproductive structures, typically involved in fruit or spore formation.\nAxiom: {'subClassOf': ['PlantParts']}\nGenerated CQs:", "output": "Which more general groups encompass FruitingBody in the ontology? | What are the specific types categorized within PlantParts, such as FruitingBody? | Does FruitingBody fall under the broader classification of PlantParts? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Root\nDescription: Root is defined as a subclass of PlantParts, indicating that every root is considered a type of plant part. This classification situates roots within the broader structural components of plants.\nAxiom: {'subClassOf': ['PlantParts']}\nGenerated CQs:", "output": "Does Root belong to the class hierarchy defined by PlantParts? | Which broader classes encompass Root within the ontology? | Which subclasses are included under PlantParts, specifically referencing Root? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Stem\nDescription: Stem is defined as a subclass of PlantParts, indicating that every stem is categorized as a type of plant part. No further property restrictions or disjointness axioms are specified, so this class represents the general concept of a stem within the broader hierarchy of plant anatomical structures.\nAxiom: {'subClassOf': ['PlantParts']}\nGenerated CQs:", "output": "Which more general categories encompass Stem? | What plant part subclasses are present within PlantParts, such as Stem? | Is Stem classified as a type of PlantParts? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Twig\nDescription: Twig is formally defined as a subclass of PlantParts, indicating that every twig is considered a part of a plant. This classification ensures that only plant part entities can be recognized as twigs within the ontology.\nAxiom: {'subClassOf': ['PlantParts']}\nGenerated CQs:", "output": "To which higher-level classifications does Twig conceptually belong? | Which entities are classified as more specific forms of PlantParts, such as Twig? | Is Twig categorized under the broader group of PlantParts? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Impala\nDescription: Impala is defined as a subclass of animal. It is an African antelope, as described in external resources such as Wikipedia. This classification indicates that all individuals of the class impala are animals, specifically belonging to the group of antelopes native to Africa.\nAxiom: {'subClassOf': ['animal']}\nGenerated CQs:", "output": "Which broader classes include Impala as an instance or subclass? | Is Impala classified as a type of animal? | What are the subclasses found under animal, and is Impala among them? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RockDassie\nDescription: RockDassie is defined as a subclass of animal. Members of this class are characterized by their diet, which mainly consists of grasses and broad-leafed plants. Further information about RockDassie can be found at http://en.wikipedia.org/wiki/Rock_Hyrax.\nAxiom: {'subClassOf': ['animal']}\nGenerated CQs:", "output": "Is animal a broader classification that encompasses RockDassie? | To which higher-level groups does RockDassie pertain? | What instances fall under the category animal, specifically including RockDassie? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Parsnip\nDescription: Parsnip is defined as a subclass of Root, which means every parsnip is formally classified as a type of root. This class inherits all characteristics of roots, establishing parsnip as a specific instance within the broader root category.\nAxiom: {'subClassOf': ['Root']}\nGenerated CQs:", "output": "Which entities fall under the subclassification of Root? | What broader classes encompass Parsnip within the ontology? | Is Parsnip classified as a type of Root? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: animal\nDescription: animal is defined as a class that is explicitly disjoint with plant, meaning no individual can simultaneously be both an animal and a plant. This formalization ensures clear separation between instances of animals and plants within the ontology.\nAxiom: {'disjointWith': ['plant']}\nGenerated CQs:", "output": "Which other classes, aside from animal, are specified as disjoint with plant in AfricanWildlifeOntology1? | Is it allowed for an organism to be classified simultaneously as animal and plant within AfricanWildlifeOntology1? | What constraints prevent an entity from being both an animal and a plant in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tasty-plant\nDescription: tasty-plant is defined as a subclass of plant whose members are characterized by being consumed by at least one herbivore and at least one carnivore. This class formalizes the notion of plants that are eaten by both trophic groups, as indicated by the axiom ([eaten-by some carnivore] and [eaten-by some herbivore]). Consequently, any instance of tasty-plant must be a plant that serves as food for both a carnivore and a herbivore.\nAxiom: {'subClassOf': ['plant', '([eaten-by only carnivore] and [eaten-by some herbivore])']}\nGenerated CQs:", "output": "Which kinds of organisms eat tasty-plants, specifically distinguishing between carnivores and herbivores? | Is tasty-plant classified under things that are consumed by both carnivores and herbivores? | What plant subclasses are eaten by both members of carnivorous and herbivorous species? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: branch\nDescription: branch is defined as a subclass of PlantParts and must be part of some tree, according to the property restriction. The class is described as representing branches, which are components of trees. This formalization ensures that any individual classified as a branch is recognized as a type of plant part specifically serving as a structural component of a tree.\nAxiom: {'subClassOf': ['PlantParts'], 'propertyRestrictions': ['[is-part-of only tree]']}\nGenerated CQs:", "output": "Is it necessary for a branch to have the property 'is-part-of' with at least one tree? | Does every branch participate in the 'is-part-of' relationship with a tree in the ontology? | Must a branch always be included as part of a tree according to the property restriction? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Warthog\nDescription: Warthog is a subclass of animal, characterized by an omnivorous diet. Members of this class eat fruiting bodies (such as mushrooms), grass, roots, and other animals. This formalization reflects the warthog’s dietary flexibility as described in biological sources.\nAxiom: {'subClassOf': ['animal', '([eats only FruitingBody] and [eats only Grass] and [eats only Root] and [eats some animal])']}\nGenerated CQs:", "output": "Which kinds of food items are necessary to classify an animal as a Warthog in the ontology? | Is an individual that eats fruiting bodies, grass, roots, and animals a type of Warthog? | What dietary requirements define the Warthog subclass within the AfricanWildlifeOntology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: herbivore\nDescription: herbivore is defined as a subclass of animal, and is formally equivalent to those animals that eat only plants or only things that are part of plants. This class captures all animals whose diet consists exclusively of plants or plant parts, and explicitly excludes animals that consume any non-plant matter. This definition aligns with the description that herbivores are exactly those animals that eat only plants or parts of plants.\nAxiom: {'subClassOf': ['animal'], 'equivalentClass': ['([eats only plant] and [eats only [is-part-of some plant]])']}\nGenerated CQs:", "output": "Is every herbivore in the ontology necessarily restricted to eating only plants or only entities that are part of a plant? | Is a herbivore defined as a class whose diet consists exclusively of either plants or things that include some part of a plant? | Is herbivore logically equivalent to the union of animals that eat only plants and those that eat only things with at least one part being a plant? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Palmtree\nDescription: Palmtree is defined as a subclass of plant and is characterized by a structural restriction: every palmtree has at least one part that is not a branch. This axiom formally distinguishes palmtrees from other plants by specifying that some of their parts must differ from branches.\nAxiom: {'subClassOf': ['plant'], 'disjointWith': ['tree'], 'propertyRestrictions': ['[has-part some not branch]']}\nGenerated CQs:", "output": "Are Palmtree and tree considered mutually exclusive categories in the ontology? | Is it possible for an instance to be classified as both a Palmtree and a tree? | Which classes are specified as disjoint with Palmtree in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Xylem\nDescription: xylem is defined as a subclass of PlantParts. This means that every instance of xylem is considered a plant part, inheriting all characteristics common to plant parts. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['PlantParts'], 'propertyRestrictions': ['[is-proper-part-of some Stem]']}\nGenerated CQs:", "output": "Is it necessary for Xylem to be a proper part of some Stem? | Can Xylem exist without being a proper part of any Stem? | Does every instance of Xylem participate as a proper part in at least one Stem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Omnivore\nDescription: Omnivore is defined as a subclass of animal, and is explicitly disjoint from carnivore, meaning an individual cannot be both an omnivore and a carnivore. An individual is classified as an omnivore if and only if it consumes some animal matter, some plant matter, and some food that is a part of either an animal or a plant. This class captures organisms with a diet that includes both animal and plant sources, as well as foods derived from any part of animals or plants.\nAxiom: {'subClassOf': ['animal'], 'disjointWith': ['carnivore', 'herbivore'], 'equivalentClass': ['([eats some animal] and [eats some plant] and [eats some ([is-part-of some animal] or [is-part-of some plant])])']}\nGenerated CQs:", "output": "What logical separation is defined between Omnivore and herbivore in the ontology? | Is it allowed for an individual to be classified as both Omnivore and herbivore? | Which other animal dietary classes are explicitly stated to be disjoint with herbivore? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: giraffe\nDescription: giraffe is defined as a subclass of animal, where members of this class are characterized by a strict dietary restriction: they eat only twigs or leaves, with no other types of food permitted. This formalization ensures that any individual classified as a giraffe must have an exclusively twig- or leaf-based diet.\nAxiom: {'subClassOf': ['animal'], 'disjointWith': ['lion'], 'propertyRestrictions': ['[eats only (Twig or leaf)]']}\nGenerated CQs:", "output": "Are there any ontology restrictions preventing an individual from being classified as both a giraffe and a lion? | Which classes within the ontology are incompatible with the class giraffe? | Is there an exclusionary relationship defined between the concepts of giraffe and lion? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PlantParts\nDescription: PlantParts is a subclass of owl:Thing, representing entities that are considered parts of plants. There are no additional property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['owl:Thing'], 'propertyRestrictions': ['[is-proper-part-of some plant]']}\nGenerated CQs:", "output": "Is every instance of PlantParts required to be a proper part of some plant? | Can a PlantPart exist without being a proper part of any plant? | Does the ontology allow for PlantParts that are not associated by the 'is-proper-part-of' property to a plant? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is-proper-part-of\nDescription: The property \"is-proper-part-of\" is an irreflexive property, meaning no entity can be a proper part of itself. It does not have explicitly defined domain or range restrictions. This property is a subproperty of \"is-part-of,\" indicating a more specific parthood relation where the part is strictly contained within another entity. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['is-part-of'], 'inverseOf': []}\nGenerated CQs:", "output": "Is is-proper-part-of an irreflexive property, meaning that no entity in the ontology can be a proper part of itself? | Can an individual in the domain have is-proper-part-of relationship to itself according to the irreflexivity characteristic? | Does the irreflexive nature of is-proper-part-of prevent any class member from being related to itself through this property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is-part-of\nDescription: The property \"is-part-of\" is defined as both transitive and reflexive, meaning that if an entity is part of another, and that entity is part of a third, then the first is part of the third, and every entity is considered part of itself. There are no explicit domain or range restrictions, no super-properties, and no defined inverse property. This property is typically used to represent part-whole relationships within the ontology.\nAxiom: {'characteristics': ['Transitive'], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is is-part-of defined as a reflexive property, such that every entity in the ontology is related to itself via is-part-of? | Does the is-part-of relation ensure that all individuals are members of their own part structure? | Is it entailed that for any individual, the is-part-of property connects the individual to itself? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has-part\nDescription: The property \"has-part\" is defined as transitive, allowing relationships to propagate along chains of connections. It has no explicitly defined domain or range restrictions, indicating it can relate any entities. \"has-part\" has \"is-part-of\" as its inverse property, but it is not specified as a sub-property of any other property. This property is typically used to express part-whole relationships between entities.\nAxiom: {'characteristics': ['Transitive'], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': ['is-part-of']}\nGenerated CQs:", "output": "Can 'has-part' relate to any type of entity as its object? | Is it correct that the property 'has-part' does not have a specified range? | What types of entities are permitted to appear as subjects with the 'has-part' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: eats\nDescription: The property \"eats\" does not have explicitly defined characteristics, domain restrictions, super-properties, or an inverse property. Its range is restricted to individuals classified as animals, plants, or entities that are part of an animal or plant, indicating its use for relating an entity to what it consumes within these biological groups.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['(animal or plant or [is-part-of only animal] or [is-part-of only plant])'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'eats' relate to objects that are not an animal, plant, or a part of either within the AfricanWildlifeOntology1 domain? | Is there any entity within AfricanWildlifeOntology1 that is not allowed as the range of the property 'eats'? | What types of entities can serve as the range for the 'eats' property in AfricanWildlifeOntology1? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: eaten-by\nDescription: The property \"eaten-by\" has no specified characteristics, domain, range, super-properties, or inverse properties. This indicates that there are no explicit restrictions or relationships defined for this property in the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': ['eats']}\nGenerated CQs:", "output": "What is the logical connection between ‘eaten-by’ and ‘eats’ in the ontology? | If animal A is eaten by animal B, does the ontology entail that B eats A? | Which property is recognized as the inverse of ‘eaten-by’ in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Measurement\nDescription: Measurement is defined as a subclass of Event. Each instance of Measurement must refer to exactly one Entity and is related only to entities of the class Entity. It must also possess exactly one PhysicalQuality, and the hasQuality property can only reference members of PhysicalQuality. Additionally, every Measurement must have exactly one value, this value being a literal as specified by the rdfs:Literal datatype. These axioms ensure that each Measurement event precisely characterizes the act of quantifying a single quality of a single entity and recording this observation as a literal value.\nAxiom: {'subClassOf': ['Event'], 'propertyRestrictions': ['[hasQuality only PhysicalQuality]', '[refersTo exactly 1 Entity]', '[hasValue exactly 1]', '[hasQuality exactly 1 PhysicalQuality]', '[refersTo only Entity]']}\nGenerated CQs:", "output": "Is every Measurement associated with at least one value via the property hasValue? | Does the definition of Measurement require it to have the hasValue property linked to an rdfs:Literal? | Can a Measurement exist without specifying a hasValue relationship to any data value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PhoneRinging\nDescription: PhoneRinging is defined as a subclass of Ringing, describing events or states where ringing occurs specifically due to a telephone. Every instance of PhoneRinging is associated with at least one agent that is a telephone, as specified by the property restriction (hasAgent some Telephone). This ensures that PhoneRinging refers exclusively to ringing acts caused by telephones, distinguishing it from other types of ringing (such as an alarm or bell).\nAxiom: {'subClassOf': ['Ringing'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is it required that each PhoneRinging event involves at least one agent that is a Telephone? | Can a PhoneRinging event occur without being associated with a Telephone agent through the hasAgent property? | Does the occurrence of PhoneRinging always necessitate a Telephone participating as the agent via hasAgent? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InLocation\nDescription: InLocation is defined as a subclass of AtomicActivity, representing activities associated with a specific physical location. Every instance of InLocation must have at least one roomLocalisation relationship to a Room, ensuring that all activities of this class are explicitly linked to a room where they occur.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[roomLocalisation some Room]']}\nGenerated CQs:", "output": "Does every instance of InLocation represent a form of AtomicActivity? | What are the more specific activities classified under AtomicActivity, such as InLocation? | Which upper-level activity categories include InLocation as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HeartRate\nDescription: HeartRate is defined as a subclass of PhysiologicalMeasurement, representing a specific type of physiological measurement characterized by having exactly one associated rate value, which must be provided as a literal (numerical) value. This class ensures that every instance of HeartRate records precisely one measurement value through the hasRate property.\nAxiom: {'subClassOf': ['PhysiologicalMeasurement'], 'propertyRestrictions': ['[hasRate exactly 1]']}\nGenerated CQs:", "output": "Is every instance of HeartRate required to have at least one value assigned through the hasRate property? | Does the ontology specify that HeartRate always possesses a hasRate property linking to a literal value? | Is it necessary for HeartRate to be characterized by the presence of some hasRate relationship with a literal datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InRoom\nDescription: InRoom is defined as a subclass of InLocation, indicating that it represents a more specific type of location context. Every instance of InRoom must be associated with at least one Place through the roomLocalisation property. This formalization ensures that anything classified as InRoom is located within a specified Place, thereby refining its spatial characterization within a broader location hierarchy.\nAxiom: {'subClassOf': ['InLocation'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is every instance of InRoom associated with at least one Place via the roomLocalisation property? | Does the existence of the roomLocalisation property for InRoom necessarily indicate a connection to a Place? | Must an InRoom relation always specify a Place as its roomLocalisation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: KettleOn\nDescription: KettleOn is a subclass of On, representing states or events in which something is switched on. Specifically, KettleOn instances are characterized by having some agent that is a Kettle (i.e., a Kettle is responsible for or involved in the 'on' state). This ensures that only situations where a Kettle is turned on are included in this class.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[hasAgent some Kettle]']}\nGenerated CQs:", "output": "Does KettleOn represent a specific instance within the broader class On? | Which situations classified as On also include KettleOn as a specialized case? | What general categories encompass KettleOn within the hierarchy of On? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Lying\nDescription: Lying is defined as a subclass of Posture and is characterized by the requirement that it occurs in association with some piece of Furniture. Any instance of Lying must involve an object that is at least partially localized on furniture, distinguishing this posture from other postures that may occur in different contexts.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[objectLocalisation some Furniture]']}\nGenerated CQs:", "output": "Is Lying an instance of the general category Posture? | Which specific types of Posture include Lying as a subclass? | Under which broader classes within the ontology is Lying classified? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Active\nDescription: Active is defined as a subclass of State. This means that any instance of Active is also an instance of State, representing a particular condition or mode within the broader context of states. Active inherits all general properties and constraints of State, distinguishing itself as a specific form or type of state.\nAxiom: {'subClassOf': ['State']}\nGenerated CQs:", "output": "What broader groupings encompass the concept of Active in the ontology? | Which entities are recognized as specific forms of State, such as Active? | Does Active fall under the general classification of State? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Apnea\nDescription: Apnea is defined as a subclass of State, indicating that it represents a specific type of state or condition. Individuals classified as Apnea are instances where an organism is in a particular state, typically characterized by the temporary cessation of breathing. This classification ensures that Apnea is formally recognized as a distinct physiological state within the ontology.\nAxiom: {'subClassOf': ['State']}\nGenerated CQs:", "output": "What broader classes does Apnea fall under in the hierarchy? | Is Apnea categorized as a specific type of State? | Which conditions are subclasses under the State category, such as Apnea? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Arousal\nDescription: Arousal is defined as a subclass of State, representing a specific type of state within the ontology. Members of the Arousal class inherit all characteristics of State, indicating that arousal denotes a particular condition or status, although no further differentiating axioms or property restrictions are specified.\nAxiom: {'subClassOf': ['State']}\nGenerated CQs:", "output": "What subclasses are present within the concept of State, such as Arousal? | Is Arousal categorized under the broader class of State? | Which higher-level classes encompass Arousal as a more specific instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MoveLimb\nDescription: MoveLimb is defined as a subclass of State, indicating that it represents a specific type of state within the ontology. This class characterizes conditions or situations involving the movement of a limb, and inherits all general properties applicable to State. There are no additional restrictions or disjointness axioms specified for MoveLimb.\nAxiom: {'subClassOf': ['State']}\nGenerated CQs:", "output": "Which higher-level categories conceptually include MoveLimb? | Is MoveLimb a specific instance within the broader category of State? | What types of State include MoveLimb as a more specialized concept? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Posture\nDescription: Posture is defined as a subclass of State, meaning any instance of Posture is also an instance of State. This class represents the particular physical alignment or arrangement of an organism or object. The lack of disjointness or additional restrictions indicates Posture is broadly characterized within the hierarchy of states or conditions.\nAxiom: {'subClassOf': ['State']}\nGenerated CQs:", "output": "What are the different subclasses identified under State, including Posture? | Is Posture considered a more specific form within the broader category of State? | Which general classifications encompass Posture in this hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Rest\nDescription: Rest is defined as a subclass of State, indicating that it represents a specific type of state within the ontology. No further restrictions or properties are specified, and it is annotated with the comment \"DTI-2.\"\nAxiom: {'subClassOf': ['State']}\nGenerated CQs:", "output": "Which broader categories encompass the concept of Rest? | Is Rest classified as a type of State? | What more specific concepts fall under the category of State, such as Rest? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AlarmClock\nDescription: AlarmClock is defined as a subclass of Object. This classification indicates that every instance of AlarmClock is an Object, inheriting all associated characteristics. No additional properties or constraints are specified in the current axiom or description.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "What types are covered under the broader class Object, including AlarmClock? | Is AlarmClock classified as a type of Object? | Which more general classes encompass AlarmClock within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Appliance\nDescription: Appliance is defined as a subclass of Object, indicating that every appliance is an object within the domain. This class encompasses all physical objects designed to perform specific functions, typically in a household or industrial setting. No further restrictions or specializations are specified in the current axioms.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "Into which higher-level categories can Appliance be organized? | Which entities fall under the broader class of Object and include Appliance? | Is Appliance classified as a specialized form of Object? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Book\nDescription: Book is defined as a subclass of Object. This formalization states that every Book is an Object, inheriting all general characteristics of Objects. No further restrictions or distinguishing properties are specified in the current axiom or description.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "Is Book classified as a more specific type under the broader category of Object? | To which general types or categories does Book belong in the ontology? | Which entities are categorized as specializations of Object, including Book? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Bucket\nDescription: Bucket is defined as a subclass of Object. This means that every instance of Bucket is considered an Object, inheriting all the general properties and constraints associated with Objects. Since no additional restrictions or relations are specified, Bucket serves as a more specific type of Object without further distinguishing characteristics in this formalization.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "To which higher-level classes does Bucket belong? | Is Bucket categorized under the broader concept of Object? | What kinds of Objects include Bucket as a more specific type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cup\nDescription: Cup is defined as a subclass of Object. This means every cup is considered an object, inheriting all properties and characteristics associated with objects. No additional distinguishing characteristics or property restrictions are specified for the class at this level.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "Is Cup a specific type within the broader category of Object? | What are the parent categories that encompass Cup? | Which subclasses are classified under Object, including Cup? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cuttlery\nDescription: Cuttlery is defined as a subclass of Object, representing items that fall within the broader category of objects. At present, there are no additional restrictions or characteristics specified, so any individual member of Cuttlery must be an Object. Further distinctions or properties distinguishing Cuttlery from other Objects are not provided in the current axiom.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "What are the more specialized categories that fall under Object, such as Cuttlery? | To which higher-level groupings can Cuttlery be assigned? | Does Cuttlery belong to the broader class of Object? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Door\nDescription: Door is defined as a subclass of Object. This establishes that every Door is considered an Object within the ontology, inheriting all characteristics and properties assigned to Object. No additional restrictions or disjointness axioms are specified, so the class serves as a general categorization for any entity that can be considered a door.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "Is Door classified as a specific kind of Object? | What are the more encompassing categories to which Door belongs? | Which specialized types fall under the broader class of Object, including Door? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DoorBell\nDescription: DoorBell is defined as a subclass of Object, indicating it is a physical entity or artifact. This class encompasses all entities recognized as doorbells, but no further axiomatic constraints or distinguishing characteristics are specified. Members of this class inherit general properties of objects.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "Is DoorBell classified as a specific type of Object? | Which entities are defined as subcategories under Object, such as DoorBell? | What are the higher-level classes that DoorBell is associated with? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Furniture\nDescription: Furniture is defined as a subclass of Object, indicating that all pieces of furniture are considered objects. This classification positions furniture within a broader category of tangible entities that have physical presence, without specifying further characteristics or restrictions.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "Among the subclasses of Object, does Furniture appear as a member? | Which categories encompass Furniture as a more general class, including Object? | Is Furniture classified under the broader category of Object? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Glass\nDescription: Glass is defined as a subclass of Object, meaning it represents a specific kind of object within the ontology. No further restrictions or disjointness are specified, so any individual classified as Glass inherits all the properties of Object.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "What entities are classified as specializations of Object, such as Glass? | Can Glass be classified as a kind of Object? | Which higher-level categories include Glass within their hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: KitchenPress\nDescription: KitchenPress is defined as a subclass of Object, indicating that it represents a specific type of object within the ontology. No additional axioms or restrictions are specified, so individuals of this class inherit all properties of Object without further distinguishing characteristics.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "What higher-level groupings encompass KitchenPress within the ontology? | Is KitchenPress classified under the broader category of Object? | Which items fall under Object, specifically including KitchenPress? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Mop\nDescription: mop is defined as a subclass of Object. This means that every mop is considered to be an Object within the ontology, inheriting all characteristics associated with objects. There are currently no further restrictions or differentiating axioms specified for the mop class.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "What broader categories encompass the concept of Mop? | Which items are categorized more specifically than Object, including Mop? | Does Mop fall under the general classification of Object? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Plate\nDescription: Plate is defined as a subclass of Object. This means that every instance of Plate is also an instance of Object, inheriting all properties and characteristics associated with Object. No further restrictions or characteristics are specified for Plate beyond its classification as an Object.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "Which concepts fall under the category of Object, such as Plate? | Is Plate classified as a type of Object? | What broader classes include Plate as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RemoteControl\nDescription: RemoteControl is defined as a subclass of Object, indicating that all remote controls are considered objects within the ontology. This class captures entities that serve as physical devices used to control other systems or appliances remotely. There are currently no additional property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "To what higher-level classifications does RemoteControl belong? | Which entities are defined as more specific types within the Object category, including RemoteControl? | Is RemoteControl classified under the broader class of Object? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Telephone\nDescription: Telephone is defined as a subclass of Object, establishing it as a specific type of object. No further restrictions or relationships are specified, so any individual classified as a Telephone is understood to be an object according to the current ontology.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "Does Telephone fall under the broader classification of Object? | What are the immediate parent classes of Telephone in the ontology? | Which specific subclasses are encompassed within Object, such as Telephone? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: WaterCan\nDescription: WaterCan is defined as a subclass of Object. This means every water can is formally recognized as an Object within the ontology. No additional axioms or property restrictions are specified, so WaterCan inherits all general characteristics of Object, serving as a specialized type of Object.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "What items are considered more specific than Object, such as WaterCan? | Is Object a generalization that includes WaterCan as a specific instance? | To what broader categories does WaterCan belong within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Window\nDescription: Window is defined as a subclass of Object, indicating that every Window is an Object. No further distinguishing characteristics or constraints are specified beyond this general classification.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "What overarching categories does Window fit into? | Is Window classified within the broader group of Object? | Which entities fall under Object, including Window? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AnswerPhoneCall\nDescription: AnswerPhoneCall is defined as a subclass of TelephoneInteraction, indicating that it represents a specialized form of interaction involving telephones. Any individual classified as an AnswerPhoneCall inherently fulfills the characteristics and constraints of a TelephoneInteraction, but is specifically focused on the activity of answering a phone call.\nAxiom: {'subClassOf': ['TelephoneInteraction']}\nGenerated CQs:", "output": "Does AnswerPhoneCall fall under the general category of TelephoneInteraction? | Which specific types are encompassed by TelephoneInteraction, such as AnswerPhoneCall? | What are the direct parent categories of AnswerPhoneCall? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MakePhoneCall\nDescription: MakePhoneCall is defined as a subclass of TelephoneInteraction, indicating that it represents a specific type of interaction conducted via telephone. Any instance classified as MakePhoneCall necessarily inherits all characteristics of TelephoneInteraction, distinguishing itself as an interaction where a phone call is made.\nAxiom: {'subClassOf': ['TelephoneInteraction']}\nGenerated CQs:", "output": "Is every MakePhoneCall event classified under TelephoneInteraction? | What broader interaction types encompass MakePhoneCall within their classification? | Which specific interactions are categorized as subtypes of TelephoneInteraction, such as MakePhoneCall? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AtomicActivity\nDescription: AtomicActivity is defined as a subclass of Activity. This indicates that every AtomicActivity is an Activity, but it may possess more specific properties or constraints not captured at the Activity level. No additional axioms or restrictions are provided, so AtomicActivity serves as a specialized categorization within the broader class of activities.\nAxiom: {'subClassOf': ['Activity']}\nGenerated CQs:", "output": "Which types fall under Activity and encompass AtomicActivity as a subcategory? | What overarching types does AtomicActivity derive from within the ontology hierarchy? | Is AtomicActivity classified under the broader group of Activity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ComplexActivity\nDescription: ComplexActivity is defined as a subclass of Activity, meaning every ComplexActivity is an Activity. No additional property restrictions or disjointness axioms are specified, indicating that ComplexActivity inherits all characteristics of Activity but may represent more specialized or structured forms of activities.\nAxiom: {'subClassOf': ['Activity']}\nGenerated CQs:", "output": "Is ComplexActivity classified under the broader category of Activity? | Which subclasses are encompassed within Activity, specifically including ComplexActivity? | What are the general categories that ComplexActivity falls under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Bathroom\nDescription: Bathroom is defined as a subclass of Room, establishing that every bathroom is a specialized type of room. No additional axioms or property restrictions are specified, so its distinguishing characteristic is solely its classification within the broader category of rooms.\nAxiom: {'subClassOf': ['Room']}\nGenerated CQs:", "output": "What specific spaces are considered subclasses of Room, such as Bathroom? | Is Bathroom classified under the general category of Room? | Which broader categories include Bathroom as a more specific type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Bedroom\nDescription: Bedroom is defined as a subclass of Room, indicating that every instance of Bedroom is also an instance of Room. This classification structurally organizes Bedroom within the broader hierarchy of building spaces, emphasizing that a Bedroom inherits all general characteristics of a Room while potentially possessing more specific properties related to its intended use as a sleeping area.\nAxiom: {'subClassOf': ['Room']}\nGenerated CQs:", "output": "Is Bedroom classified as a specific type within the broader concept of Room? | Which subcategories are present under the class Room, including Bedroom? | What higher-level categories encompass Bedroom according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Kitchen\nDescription: Kitchen is defined as a subclass of Room, indicating that every kitchen is considered a type of room within an environment. No additional property restrictions or relationships are specified in the axiom, so the class primarily inherits general characteristics of rooms while denoting its specific use as a kitchen.\nAxiom: {'subClassOf': ['Room']}\nGenerated CQs:", "output": "What are the specific types that fall under Room, such as Kitchen? | Which general categories include Kitchen as a member? | Is Kitchen classified within the broader category of Room? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LivingRoom\nDescription: LivingRoom is defined as a subclass of Room, representing a specific type of room within a structure. This classification indicates that every instance of LivingRoom is necessarily an instance of Room, inheriting all properties and constraints that apply to Room. No further distinguishing axioms or restrictions are present beyond this subclass relationship.\nAxiom: {'subClassOf': ['Room']}\nGenerated CQs:", "output": "Is every LivingRoom classified as a kind of Room? | Which general categories encompass the concept of a LivingRoom? | What specific types fall under the broader category of Room, such as LivingRoom? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Bed\nDescription: Bed is formally defined as a subclass of Furniture, indicating that every instance of Bed is also an instance of Furniture. This classification situates Bed within the broader category of items intended for furnishing interior spaces. No additional axioms or restrictions are specified.\nAxiom: {'subClassOf': ['Furniture']}\nGenerated CQs:", "output": "Which items are classified as subtypes of Furniture, including Bed? | Does Bed fall under the category of Furniture? | What are the broader categories that the concept Bed is grouped under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Chair\nDescription: Chair is defined as a subclass of Furniture, indicating that every Chair is a type of Furniture. This formalization situates Chair within a broader hierarchy of household or office items intended for use and support. Without additional restrictions or properties, the class encompasses any object recognized as a Chair within the general category of Furniture.\nAxiom: {'subClassOf': ['Furniture']}\nGenerated CQs:", "output": "What general classes encompass Chair within their classification hierarchy? | Is Chair categorized under broader classes such as Furniture? | What items are classified as more specific types of Furniture, including Chair? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Couch\nDescription: Couch is defined as a subclass of Furniture, indicating that every couch is a type of furniture. No additional property, disjointness, or restriction axioms are specified, so the class inherits all general characteristics of furniture but is specifically dedicated to couches.\nAxiom: {'subClassOf': ['Furniture']}\nGenerated CQs:", "output": "Is Couch an instance within the general class of Furniture? | To which broader classification does Couch belong in the context of furnishings? | What are the direct subcategories of Furniture, including Couch? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Table\nDescription: Table is defined as a subclass of Furniture, meaning every instance of Table is also considered an instance of Furniture. No additional property restrictions or disjointness axioms are specified, so the class captures any furniture item that qualifies as a table within the ontology.\nAxiom: {'subClassOf': ['Furniture']}\nGenerated CQs:", "output": "Is Table classified under the broader category of Furniture? | Which types fall under the category Furniture, including Table? | What higher-level groups does Table belong to in the context of this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: BedExit\nDescription: BedExit is defined as a subclass of ComplexActivity, indicating that it represents a type of complex action or event. Individuals belonging to this class participate in multifaceted activities related to the process of exiting a bed. The classification ensures that any instance of BedExit is recognized specifically as a form of ComplexActivity.\nAxiom: {'subClassOf': ['ComplexActivity']}\nGenerated CQs:", "output": "Which activities are categorized as more specific forms of ComplexActivity, including BedExit? | What higher-level activity categories include BedExit as a specialized instance? | Does BedExit fall under the broader classification of ComplexActivity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Fall\nDescription: Fall is defined as a subclass of ComplexActivity, indicating it is categorized as a type of complex activity. The current description notes that a fall occurs \"if not supported by LCS\" (likely referring to 'Lowering Control System' or a similar support mechanism), implying the event is characterized by the absence of this support during the occurrence. No disjointness or specific property restrictions have been asserted for this class.\nAxiom: {'subClassOf': ['ComplexActivity']}\nGenerated CQs:", "output": "Is Fall classified under the broader type of ComplexActivity? | Of which more general categories is Fall a constituent member? | What specific activities are categorized as subclasses of ComplexActivity, including Fall? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FoodAndDrinkConsumption\nDescription: FoodAndDrinkConsumption is defined as a subclass of ComplexActivity. This class represents activities that involve the intake or consumption of food and/or drink, and it inherits all characteristics of ComplexActivity. No further property restrictions or disjointness axioms are specified, so its definition is based solely on its placement in the activity hierarchy.\nAxiom: {'subClassOf': ['ComplexActivity']}\nGenerated CQs:", "output": "Does FoodAndDrinkConsumption fall under the classification of ComplexActivity? | To which broader activity types is FoodAndDrinkConsumption related? | Which activities are encompassed by ComplexActivity, including FoodAndDrinkConsumption? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Nap\nDescription: Nap is defined as a subclass of ComplexActivity, indicating that it is a type of complex activity within the ontology. As a ComplexActivity, a nap is considered to involve multiple components or steps beyond a simple action, distinguishing it from more basic activities. No further restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['ComplexActivity']}\nGenerated CQs:", "output": "Which activities are considered subtypes under ComplexActivity, such as Nap? | Is Nap categorized as an instance of ComplexActivity? | What broader activities encompass Nap as a more specific subtype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NightSleep\nDescription: NightSleep is defined as a subclass of ComplexActivity, representing the entire sleep episode experienced during the night, including any relevant inferences or processes that occur throughout the sleep period. This class formalization associates NightSleep with complex activities and ensures its distinction by emphasizing the inclusion of all inferable events or activities occurring during sleep.\nAxiom: {'subClassOf': ['ComplexActivity']}\nGenerated CQs:", "output": "Is NightSleep categorized under the broader class of ComplexActivity? | What specific activities are classified as subclasses of ComplexActivity, including NightSleep? | Which overarching activity classes does NightSleep pertain to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PrepareDrink\nDescription: PrepareDrink is defined as a subclass of ComplexActivity, indicating that it represents a type of complex activity within the ontological model. Instances of PrepareDrink inherit all characteristics of ComplexActivity and specifically pertain to the processes and actions involved in preparing a drink. The class does not impose further restrictions or differentiators beyond its place in the activity hierarchy.\nAxiom: {'subClassOf': ['ComplexActivity']}\nGenerated CQs:", "output": "Is PrepareDrink classified as a more specific activity under the broader ComplexActivity category? | What general categories encompass the activity PrepareDrink? | Which activities are direct specializations of ComplexActivity, such as PrepareDrink? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PrepareMeal\nDescription: PrepareMeal is defined as a subclass of ComplexActivity, indicating that it represents a type of activity characterized by having multiple interrelated actions or steps. Any instance of PrepareMeal is therefore also an instance of ComplexActivity, situating meal preparation as a process that involves several coordinated activities.\nAxiom: {'subClassOf': ['ComplexActivity']}\nGenerated CQs:", "output": "Which activities are direct subtypes of ComplexActivity, including PrepareMeal? | Is PrepareMeal categorized as a type of ComplexActivity? | To which higher-level classes does PrepareMeal belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SocialInteraction\nDescription: SocialInteraction is defined as a subclass of ComplexActivity. This specifies that every instance of SocialInteraction is a type of ComplexActivity, indicating that social interactions are considered to involve multiple, coordinated actions or processes. No further restrictions or elaborations are provided, so the class is characterized primarily by its inherited properties from ComplexActivity.\nAxiom: {'subClassOf': ['ComplexActivity']}\nGenerated CQs:", "output": "What are the more inclusive activity categories that encompass SocialInteraction? | Which activities are specified as subtypes of ComplexActivity, including SocialInteraction? | Does SocialInteraction fall under the broader classification of ComplexActivity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TableExit\nDescription: TableExit is defined as a subclass of ComplexActivity, indicating that every TableExit is a specific type of ComplexActivity. No additional property restrictions, disjointness, or further subclass relations are specified, so individuals of the TableExit class inherit all the general characteristics and behaviors attributed to ComplexActivity. This class is currently characterized solely by its hierarchical relation within the ontology.\nAxiom: {'subClassOf': ['ComplexActivity']}\nGenerated CQs:", "output": "What general categories encompass TableExit as a specialized activity? | Is TableExit classified under the broader category of ComplexActivity? | Which activities are direct or indirect subclasses of ComplexActivity, including TableExit? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Carer\nDescription: Carer is defined as a subclass of Person, indicating that every Carer is also a Person. No further axioms or property restrictions are specified, so a Carer inherits all characteristics of Person without additional differentiating features in this definition.\nAxiom: {'subClassOf': ['Person']}\nGenerated CQs:", "output": "Are all Carers considered instances of the broader category Person? | Which specific roles fall under the classification of Person, such as Carer? | To which general classes does Carer belong within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Clinician\nDescription: Clinician is defined as a subclass of Person, indicating that every clinician is a person. No further axioms or property restrictions are specified, so the class currently serves as a specialization of Person without additional constraints.\nAxiom: {'subClassOf': ['Person']}\nGenerated CQs:", "output": "Is Clinician categorized under the broader class of Person? | To which higher-level classes does Clinician belong within the ontology? | Which subclasses fall under the category of Person, including Clinician? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Patient\nDescription: Patient is defined as a subclass of Person, representing individuals who are receiving or registered to receive medical care or treatment. Any individual designated as a Patient is inherently a Person.\nAxiom: {'subClassOf': ['Person']}\nGenerated CQs:", "output": "Does Patient fall under the general classification of Person? | What specific categories, such as Patient, are encompassed under the Person class? | Within which broader classes is Patient hierarchically included? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ChangeOrientation\nDescription: ChangeOrientation is defined as a subclass of AtomicActivity, indicating that it represents a specific, indivisible type of activity within the domain. While the current description provides a brief comment (\"WIMU\"), no detailed explanation is available. Based on its name and axiom, ChangeOrientation likely refers to an atomic activity where the orientation of an entity is altered.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Under which broader activity classification does ChangeOrientation fall? | Is ChangeOrientation categorized under AtomicActivity? | Which specific activities are considered subtypes of AtomicActivity, such as ChangeOrientation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ChangePosture\nDescription: ChangePosture is defined as a subclass of AtomicActivity, indicating it represents an elementary, indivisible activity within the ontology. While the current description only notes \"WIMU,\" this class structurally inherits all characteristics of AtomicActivity and is intended to capture specific activities related to posture changes.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "What specific activities are included within the category of AtomicActivity, such as ChangePosture? | Does ChangePosture fall under the broader classification of AtomicActivity? | Which higher-level categories encompass ChangePosture in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DialNumber\nDescription: DialNumber is defined as a subclass of AtomicActivity. This means that every instance of DialNumber is also an instance of AtomicActivity. There are no further restrictions or disjointness axioms specified, so DialNumber inherits all characteristics of AtomicActivity without additional distinguishing features. This class is intended to represent the fundamental activity of dialing a number, which is atomic in nature within the modeled domain.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "What broader activity classifications does DialNumber belong to? | Which activities fall under the category of AtomicActivity, including DialNumber? | Is DialNumber regarded as a specific kind of AtomicActivity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Drink\nDescription: Drink is defined as a subclass of AtomicActivity, indicating that it represents a fundamental activity that cannot be further decomposed into simpler actions. This class encompasses all actions entailing the act of consuming liquids, and inherits general properties and constraints from AtomicActivity.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Is Drink categorized under the broader class of AtomicActivity? | What specific activities are included within AtomicActivity, such as Drink? | Which general activity types encompass Drink? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Eat\nDescription: Eat is defined as a subclass of AtomicActivity, indicating that it represents a fundamental, indivisible activity within the ontology. Any instance of Eat must also be an instance of AtomicActivity. No further constraints or characteristics are specified.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Under which broader activity classes does Eat fall? | What other activities, alongside Eat, are classified as specializations of AtomicActivity? | Is Eat an instance of the more general class AtomicActivity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PhysicalActivity\nDescription: PhysicalActivity is defined as a subclass of AtomicActivity. This classification indicates that any instance of PhysicalActivity is also an instance of AtomicActivity, inheriting all its properties and constraints. PhysicalActivity, therefore, represents a specific kind of AtomicActivity, typically involving bodily movement or exertion. No other disjointness or additional property restrictions are specified for this class.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Is PhysicalActivity classified under the broader category of AtomicActivity? | To which higher-level categories does PhysicalActivity belong within the activity hierarchy? | Which activities are more specific than AtomicActivity, including PhysicalActivity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PickUpPhone\nDescription: PickUpPhone is defined as a subclass of AtomicActivity, indicating that it represents an indivisible, fundamental action within a larger process or workflow. This classification implies that PickUpPhone is treated as a single, non-decomposable activity in the ontology. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Which activities are specified as subclasses of AtomicActivity, including PickUpPhone? | Into what higher-level categories is PickUpPhone organized? | Is PickUpPhone classified under the broader group of AtomicActivity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sleep\nDescription: Sleep is defined as a subclass of AtomicActivity, indicating that it represents a fundamental, indivisible type of activity within the given ontology. The current description (\"Gear 4 / DTI-2\") provides domain-specific or contextual labeling but does not further characterize the nature of Sleep. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Is Sleep classified as a specific kind of AtomicActivity? | Which activities are categorized under AtomicActivity, such as Sleep? | What broader activity categories include Sleep as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Speak\nDescription: Speak is defined as a subclass of AtomicActivity, indicating that it represents a specific, indivisible action within the ontology. Any instance of Speak is necessarily an AtomicActivity, but not all AtomicActivities are instances of Speak. No additional property restrictions or class relationships are specified for Speak in the current axiom.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Is Speak classified as a specific kind of AtomicActivity? | What distinct activities fall under the category of AtomicActivity, including Speak? | Which broader categories encompass the activity Speak? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: State\nDescription: State is defined as a subclass of AtomicActivity, indicating that every State represents an atomic (indivisible) activity within a given framework. This classification positions State as a fundamental unit of activity, inheriting all characteristics and constraints of AtomicActivity.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Which activity types fall under the general class of AtomicActivity, including State? | What are the broader categories that encompass State? | Is State classified as a specialized form of AtomicActivity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: StepCounting\nDescription: StepCounting is defined as a subclass of AtomicActivity, indicating that it represents a specific, indivisible type of activity. The class is annotated with the comment \"WIMU,\" which may refer to its association with wearable inertial measurement unit systems, commonly used for tracking activity metrics such as steps. No further property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Is StepCounting a more specific form of AtomicActivity? | Which activities fall under the scope of AtomicActivity, such as StepCounting? | To what higher-level categories is StepCounting classified? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: UseObject\nDescription: UseObject is defined as a subclass of AtomicActivity, indicating that it represents a specific type of atomic activity within the ontology. By this axiom, all instances of UseObject inherit the general properties and constraints of AtomicActivity, situating UseObject as a more specialized activity focused on the usage of objects.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "To which broader activity classes does UseObject belong according to the ontology structure? | Is UseObject classified under AtomicActivity in the ontology? | Which specific activities are categorized as subtypes of AtomicActivity, such as UseObject? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Walk\nDescription: Walk is defined as a subclass of AtomicActivity, indicating that walking is considered a fundamental unit of activity within the ontology. No additional property restrictions or disjointness axioms are specified, so Walk inherits all characteristics of AtomicActivity, serving to represent the act of walking as a basic type of activity.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Which more general category does Walk directly belong to? | Is Walk classified under the broader group of AtomicActivity? | What are the specific activities that fall under AtomicActivity, such as Walk? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Closed\nDescription: Closed is defined as a subclass of ObjectEvent, indicating that it represents a specific type of event involving an object. Any individual belonging to the class Closed is inherently classified as an ObjectEvent, inheriting all of its characteristics. No additional distinguishing restrictions or properties are specified for Closed beyond its relationship to ObjectEvent.\nAxiom: {'subClassOf': ['ObjectEvent']}\nGenerated CQs:", "output": "What overarching categories encompass Closed within the ontology? | Is Closed classified under the broader category of ObjectEvent? | Which concepts are more specific instances of ObjectEvent, such as Closed? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Off\nDescription: Off is defined as a subclass of ObjectEvent. This means every instance of Off is also an instance of ObjectEvent, inheriting all its properties and restrictions. The class Off is used to represent events where an object is turned off or ceases to be active. There are no further property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['ObjectEvent']}\nGenerated CQs:", "output": "Which broader event categories encompass Off? | Is Off classified as a specialization of ObjectEvent? | What specific types are included under ObjectEvent, such as Off? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: On\nDescription: On is defined as a subclass of ObjectEvent, meaning that all instances of On are specific types of ObjectEvent. This classification indicates that On inherits all characteristics of ObjectEvent, serving as a more specialized concept within the event hierarchy. No additional property restrictions or disjointness axioms are specified for On.\nAxiom: {'subClassOf': ['ObjectEvent']}\nGenerated CQs:", "output": "What specific events are classified as subclasses of ObjectEvent, such as On? | Is On categorized under ObjectEvent as a more specialized concept? | Which broader event classes include On as a subtype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Open\nDescription: Open is defined as a subclass of ObjectEvent. This means that every instance of Open is also an instance of ObjectEvent, situating it within the broader context of events involving objects. No additional characteristics or constraints beyond its classification under ObjectEvent are specified.\nAxiom: {'subClassOf': ['ObjectEvent']}\nGenerated CQs:", "output": "What higher-level groupings include Open as a member? | Does Open fall under the wider class of ObjectEvent? | Which instances are classified as subtypes of ObjectEvent, such as Open? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ringing\nDescription: Ringing is defined as a subclass of ObjectEvent. This means that any instance of Ringing is also an instance of ObjectEvent, capturing events specifically characterized as ringing occurrences. No further restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['ObjectEvent']}\nGenerated CQs:", "output": "Does Ringing fall under the category of ObjectEvent? | Which events are considered more specific types within ObjectEvent, including Ringing? | What overarching categories is Ringing associated with? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cooker\nDescription: Cooker is defined as a subclass of Appliance. This class encompasses all appliances that are specifically designed for cooking functions, such as stoves, ovens, and similar equipment. Every instance of Cooker is, by definition, also an Appliance.\nAxiom: {'subClassOf': ['Appliance']}\nGenerated CQs:", "output": "What higher-level categories does Cooker belong to within the classification hierarchy? | Which types fall under the category of Appliance, specifically including Cooker? | Is Cooker classified under the broader group of Appliance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Fridge\nDescription: Fridge is defined as a subclass of Appliance, indicating that every instance of Fridge is also an Appliance. This formalization groups fridges within the broader category of appliances, without imposing additional constraints or property restrictions specific to fridges.\nAxiom: {'subClassOf': ['Appliance']}\nGenerated CQs:", "output": "Which specific appliances include Fridge as a type? | Does Fridge fall under the general classification of Appliance? | To which broader categories is Fridge hierarchically related? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Kettle\nDescription: Kettle is defined as a subclass of Appliance, indicating that every kettle is considered a type of appliance. Currently, there are no additional property restrictions or disjointness axioms specified for this class, so its definition is based solely on its classification as an appliance.\nAxiom: {'subClassOf': ['Appliance']}\nGenerated CQs:", "output": "Which higher-level classes does Kettle inherit from? | Does Kettle fall under the broader grouping of Appliance? | What specific types are categorized as subclasses of Appliance, such as Kettle? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TV\nDescription: TV is defined as a subclass of Appliance. This means that every instance of TV is also considered an Appliance, inheriting all general characteristics of Appliances. No further restrictions, disjointness, or property constraints are specified.\nAxiom: {'subClassOf': ['Appliance']}\nGenerated CQs:", "output": "To which broader classes does TV belong within the ontology hierarchy? | Is TV categorized as a more specific type under Appliance? | Which appliances include TV as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: WashingMachine\nDescription: WashingMachine is defined as a subclass of Appliance, indicating that all washing machines are considered a type of appliance. No further restrictions or relationships are specified in the current axioms. This class is used to represent devices designed for cleaning laundry.\nAxiom: {'subClassOf': ['Appliance']}\nGenerated CQs:", "output": "Is WashingMachine classified as a type of Appliance? | Which categories encompass WashingMachine as a more specialized instance, including Appliance? | What are the more general classes that WashingMachine is a member of? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cycling\nDescription: Cycling is defined as a subclass of OutdoorPhysicalActivity, meaning that it is classified as a type of physical activity that takes place outdoors. This formalization indicates that all instances of Cycling are also instances of OutdoorPhysicalActivity, inheriting its general characteristics.\nAxiom: {'subClassOf': ['OutdoorPhysicalActivity']}\nGenerated CQs:", "output": "Which specific activities fall under the category of OutdoorPhysicalActivity, such as Cycling? | What broader activity categories does Cycling fall under in this context? | Is Cycling classified as a specialized form of OutdoorPhysicalActivity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Running\nDescription: Running is defined as a subclass of OutdoorPhysicalActivity, indicating that all instances of Running are considered outdoor physical activities. This formalization situates Running within the broader context of activities performed outdoors that involve physical exertion.\nAxiom: {'subClassOf': ['OutdoorPhysicalActivity']}\nGenerated CQs:", "output": "Is Running classified under the broader category of OutdoorPhysicalActivity? | What specific types fall under OutdoorPhysicalActivity, such as Running? | Which higher-level activity classes does Running belong to within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DangerousBedExit\nDescription: DangerousBedExit is defined as a subclass of BedExit. This indicates that every instance of DangerousBedExit is also an instance of BedExit, but captures those bed exit events that are specifically characterized as dangerous or high-risk. No further distinguishing axioms or property restrictions are specified beyond its position in the class hierarchy.\nAxiom: {'subClassOf': ['BedExit']}\nGenerated CQs:", "output": "Is DangerousBedExit classified under the broader category of BedExit? | What are the direct parent classes for DangerousBedExit in the ontology? | Which specific types fall under BedExit, including DangerousBedExit? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LongBedExit\nDescription: LongBedExit is defined as a subclass of BedExit. This indicates that every instance of LongBedExit is also an instance of BedExit, inheriting all characteristics and restrictions that apply to BedExit, while potentially having additional distinguishing properties or constraints specific to LongBedExit.\nAxiom: {'subClassOf': ['BedExit']}\nGenerated CQs:", "output": "Does LongBedExit fall under the broader classification of BedExit? | What more specific types are included within BedExit, such as LongBedExit? | Which general categories encompass LongBedExit in the hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NightRoomVisit\nDescription: NightRoomVisit is defined as a subclass of BedExit, indicating that every instance of NightRoomVisit is also a kind of BedExit. This class represents events where an individual exits their bed specifically for a room visit during the night, inheriting all the characteristics and properties of BedExit while providing a more specific context for nighttime occurrences.\nAxiom: {'subClassOf': ['BedExit']}\nGenerated CQs:", "output": "Which specific activities are categorized under BedExit, such as NightRoomVisit? | Are all NightRoomVisit instances considered examples of BedExit? | What broader event types encompass NightRoomVisit? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FaceToFaceInteraction\nDescription: FaceToFaceInteraction is a subclass of SocialInteraction, representing social interactions that occur when participants are physically present with each other. Individuals in this class engage in direct, co-located communication, distinguishing them from remote or mediated interactions.\nAxiom: {'subClassOf': ['SocialInteraction']}\nGenerated CQs:", "output": "Which specific interactions fall under SocialInteraction, such as FaceToFaceInteraction? | Is every FaceToFaceInteraction categorized as a form of SocialInteraction? | In terms of broader classifications, what is the parent category for FaceToFaceInteraction? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TelephoneInteraction\nDescription: TelephoneInteraction is defined as a subclass of SocialInteraction, indicating that it represents a specific type of social exchange occurring via telephone communication. Members of this class participate in interactions where the primary medium is a telephone, distinguishing them from other forms of social interaction such as face-to-face conversations or electronic messaging.\nAxiom: {'subClassOf': ['SocialInteraction']}\nGenerated CQs:", "output": "Which specific interactions are classified as types of SocialInteraction, including TelephoneInteraction? | Is TelephoneInteraction categorized under the broader class of SocialInteraction? | What broader interaction categories encompass TelephoneInteraction within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HaveBreakfast\nDescription: HaveBreakfast is defined as a subclass of HaveMeal, indicating that every instance of HaveBreakfast is also an instance of HaveMeal. This class represents the specific act or event of having breakfast, distinguished from other types of meals by its subclass relationship. No additional constraints or disjointness axioms are specified.\nAxiom: {'subClassOf': ['HaveMeal']}\nGenerated CQs:", "output": "Under which broader activities does HaveBreakfast fall? | Is HaveMeal a more general class that includes HaveBreakfast? | Which actions are considered specific types of HaveMeal, such as HaveBreakfast? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HaveDinner\nDescription: HaveDinner is defined as a subclass of HaveMeal, meaning that every instance of HaveDinner is also an instance of HaveMeal. This class represents the specific type of meal event that occurs during dinner, distinguishing it from other meal occasions within the broader category of meals.\nAxiom: {'subClassOf': ['HaveMeal']}\nGenerated CQs:", "output": "Which specific activities are categorized under HaveMeal, such as HaveDinner? | Is HaveDinner classified as a type of HaveMeal? | What broader event types encompass HaveDinner? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HaveLunch\nDescription: HaveLunch is defined as a subclass of HaveMeal, indicating that every instance of HaveLunch is also an instance of HaveMeal. This class represents activities or events specifically related to having lunch, distinguishing them from other types of meals. No additional restrictions or properties are imposed beyond this hierarchical relationship.\nAxiom: {'subClassOf': ['HaveMeal']}\nGenerated CQs:", "output": "Does HaveLunch fall under the classification of HaveMeal? | Which meal-related activities are categorized as more specific types beneath HaveMeal, such as HaveLunch? | To what broader meal categories can HaveLunch be assigned? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HaveDrink\nDescription: HaveDrink is a subclass of FoodAndDrinkConsumption, representing events or actions where an individual consumes a beverage. Any instance of HaveDrink is, by definition, a specific type of food and drink consumption activity, emphasizing the act of drinking over eating.\nAxiom: {'subClassOf': ['FoodAndDrinkConsumption']}\nGenerated CQs:", "output": "Is HaveDrink categorized as a kind of FoodAndDrinkConsumption? | What broader classifications encompass HaveDrink? | Which specific actions fall under FoodAndDrinkConsumption, including HaveDrink? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HaveMeal\nDescription: HaveMeal is defined as a subclass of FoodAndDrinkConsumption, representing instances where an individual engages in the act of consuming food and drink. Members of this class inherit all characteristics and constraints attributed to food and drink consumption activities.\nAxiom: {'subClassOf': ['FoodAndDrinkConsumption']}\nGenerated CQs:", "output": "Which overarching groups does HaveMeal fall within in the ontology? | What specific activities are categorized as types of FoodAndDrinkConsumption, such as HaveMeal? | Is HaveMeal classified under the broader concept of FoodAndDrinkConsumption? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HaveSnack\nDescription: HaveSnack is defined as a subclass of FoodAndDrinkConsumption, meaning any instance of HaveSnack is also an instance of FoodAndDrinkConsumption. This class represents events or activities where snacks are consumed, distinguishing it from other forms of food and drink consumption.\nAxiom: {'subClassOf': ['FoodAndDrinkConsumption']}\nGenerated CQs:", "output": "Does HaveSnack fall under the category of FoodAndDrinkConsumption? | What types of activities are more specific instances of FoodAndDrinkConsumption, such as HaveSnack? | Which higher-level categories include HaveSnack within their classification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Outdoors\nDescription: Outdoors is defined as a subclass of InLocation, indicating that it represents a specific type of location. Any instance of Outdoors is by definition also an instance of InLocation, capturing places or areas that are external to buildings or structures. The class formalizes the concept of being in an open, outside environment.\nAxiom: {'subClassOf': ['InLocation']}\nGenerated CQs:", "output": "What broader location categories does Outdoors fall under? | Which locations are encompassed by InLocation, including Outdoors? | Is Outdoors a more specific instance within the scope of InLocation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IndoorPhysicalActivity\nDescription: IndoorPhysicalActivity is defined as a subclass of PhysicalActivity. This class encompasses physical activities that are specifically performed indoors, distinguishing them from outdoor or unspecified-location activities. Any individual classified as IndoorPhysicalActivity is, by definition, a type of PhysicalActivity but is further characterized by its occurrence within indoor environments.\nAxiom: {'subClassOf': ['PhysicalActivity']}\nGenerated CQs:", "output": "Which activities are classified as subtypes of PhysicalActivity, including IndoorPhysicalActivity? | Does IndoorPhysicalActivity fall under the classification of PhysicalActivity? | What broader categories does IndoorPhysicalActivity belong to within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: OutdoorPhysicalActivity\nDescription: OutdoorPhysicalActivity is defined as a subclass of PhysicalActivity. This class encompasses all forms of physical activity that take place outdoors, distinguishing it from indoor activities. Members of this class inherit all characteristics of PhysicalActivity, but are specifically constrained by their outdoor context.\nAxiom: {'subClassOf': ['PhysicalActivity']}\nGenerated CQs:", "output": "Does OutdoorPhysicalActivity fall under the category of PhysicalActivity? | Which subclasses classify under PhysicalActivity, such as OutdoorPhysicalActivity? | What broader activity classifications encompass OutdoorPhysicalActivity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LongNap\nDescription: LongNap is defined as a subclass of Nap, representing nap instances with a duration longer than 30 minutes. This class is used to categorize naps that exceed the typical short duration, allowing formal distinction within the Nap hierarchy based on temporal length.\nAxiom: {'subClassOf': ['Nap']}\nGenerated CQs:", "output": "Which variations of Nap include LongNap as a specific instance? | What broader groupings does LongNap fall under? | Is LongNap categorized as a type of Nap? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NapAfterLunch\nDescription: NapAfterLunch is defined as a subclass of Nap, indicating that every instance of NapAfterLunch is also an instance of Nap. This class specifies naps that occur specifically after lunch, distinguishing them from naps taken at other times.\nAxiom: {'subClassOf': ['Nap']}\nGenerated CQs:", "output": "What kinds of Naps are defined, including NapAfterLunch? | Is NapAfterLunch categorized as a specific type of Nap? | Which broader classes encompass NapAfterLunch? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LongTableExit\nDescription: LongTableExit is defined as a subclass of TableExit. This means that every LongTableExit is a kind of TableExit, inheriting all properties and constraints of TableExit, and can be used wherever a TableExit is required. No further distinguishing characteristics or restrictions are specified for LongTableExit beyond this subclass relationship.\nAxiom: {'subClassOf': ['TableExit']}\nGenerated CQs:", "output": "Which types are classified as subcategories of TableExit, such as LongTableExit? | To what broader categories does LongTableExit belong based on its classification? | Is LongTableExit classified as a more specific type under TableExit? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Moving\nDescription: Moving is defined as a subclass of Active, indicating that all instances of Moving are also considered Active. This classification captures entities or processes characterized by being in a state of action or motion, forming a specific subset within the broader category of Active phenomena.\nAxiom: {'subClassOf': ['Active']}\nGenerated CQs:", "output": "Which subclasses are defined within the class Active, such as Moving? | Is Moving a more specific category under the broader class of Active? | What are the higher-level classes that encompass Moving? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NightBathroomVisit\nDescription: NightBathroomVisit is defined as a subclass of NightRoomVisit. This means every instance of NightBathroomVisit is also considered an instance of NightRoomVisit, specifying that the visit occurs during the night and takes place specifically in a bathroom. No additional restrictions or properties are provided.\nAxiom: {'subClassOf': ['NightRoomVisit']}\nGenerated CQs:", "output": "Which visit types are defined as more specific forms of NightRoomVisit, such as NightBathroomVisit? | To which overarching categories does NightBathroomVisit belong within the context of night-time visits? | Is NightBathroomVisit classified under the broader group of NightRoomVisit? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NightKitchenVisit\nDescription: NightKitchenVisit is defined as a subclass of NightRoomVisit. This means every NightKitchenVisit is a type of NightRoomVisit, inheriting all characteristics associated with NightRoomVisit, but specifically refers to visits to the kitchen that occur at night. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['NightRoomVisit']}\nGenerated CQs:", "output": "Which visit types fall under the broader classification of NightRoomVisit? | What general categories encompass NightKitchenVisit? | Is NightKitchenVisit a more specific form of NightRoomVisit? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NightLivingRoomVisit\nDescription: NightLivingRoomVisit is defined as a subclass of NightRoomVisit. This denotes that every instance of a NightLivingRoomVisit is also an instance of NightRoomVisit, typically representing visits to a living room that occur specifically during nighttime. No further property or disjointness constraints are specified in the current axioms.\nAxiom: {'subClassOf': ['NightRoomVisit']}\nGenerated CQs:", "output": "What broader classes does NightLivingRoomVisit fall under? | Which specific instances or subclasses are encompassed by NightRoomVisit? | Is NightRoomVisit a more general category that includes NightLivingRoomVisit? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Object\nDescription: Object is defined as a subclass of Entity. This relationship indicates that every instance of Object is also considered an Entity, inheriting all general characteristics associated with Entity. No other constraints or differentiating axioms are specified for Object.\nAxiom: {'subClassOf': ['Entity']}\nGenerated CQs:", "output": "Which general groupings does Object fall under within the ontology? | Is Object a specialized form of Entity? | What are all the subclasses categorized under Entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Person\nDescription: Person is defined as a subclass of Entity, meaning every individual categorized as a Person is also considered an Entity. No additional property restrictions or disjointness axioms are specified, so the class Person serves as a general categorization for entities recognized as people.\nAxiom: {'subClassOf': ['Entity']}\nGenerated CQs:", "output": "What broader groupings encompass the Person class? | Which classes are direct specializations within the Entity category, such as Person? | Does the Person class fall under the more general Entity category? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Place\nDescription: Place is defined as a subclass of Entity, meaning every instance of Place is also an Entity. This class represents physical or conceptual locations or areas, but no further restrictions, relationships, or properties are currently specified.\nAxiom: {'subClassOf': ['Entity']}\nGenerated CQs:", "output": "Which subclasses are defined within the Entity category, such as Place? | Is every Place categorized under the broader class of Entity? | What general classes does the concept Place belong to in the ontology hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PrepareHotTea\nDescription: PrepareHotTea is defined as a subclass of PrepareDrink, indicating that it represents a specialized form of drink preparation activity. Any instance of PrepareHotTea is inherently an instance of PrepareDrink, specifically concerned with the preparation of hot tea. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['PrepareDrink']}\nGenerated CQs:", "output": "What more general activity categories encompass PrepareHotTea? | Does PrepareHotTea belong to the set of activities classified as PrepareDrink? | Which subclasses are defined under PrepareDrink, including PrepareHotTea? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Room\nDescription: Room is defined as a subclass of Place, indicating that every Room is a specific type of Place. This classification implies that all characteristics of Place are inherited by Room, allowing it to be used wherever a Place is referenced within the ontology. No additional restrictions or distinguishing axioms are specified for Room.\nAxiom: {'subClassOf': ['Place']}\nGenerated CQs:", "output": "Which higher-level categories encompass Room? | Is Room classified under the broader category of Place? | What are all subcategories defined within Place, such as Room? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SittingToStanding\nDescription: SittingToStanding is defined as a subclass of ChangePosture, representing the specific process or action in which an individual transitions from a sitting position to a standing position. As a more specialized posture change, every instance of SittingToStanding inherently qualifies as an instance of ChangePosture.\nAxiom: {'subClassOf': ['ChangePosture']}\nGenerated CQs:", "output": "Which posture change actions are categorized under ChangePosture, including SittingToStanding? | Does SittingToStanding belong within the broader classification of ChangePosture? | What general types or categories is SittingToStanding a more specific instance of? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: StandingToSitting\nDescription: StandingToSitting is defined as a subclass of ChangePosture. This class represents the action or process in which an individual moves from a standing position to a sitting position. All instances of StandingToSitting are, by definition, specific forms of posture change.\nAxiom: {'subClassOf': ['ChangePosture']}\nGenerated CQs:", "output": "What are the more specialized forms of ChangePosture, such as StandingToSitting? | Which general posture-changing categories include StandingToSitting as a member? | Is StandingToSitting an example of a specific type within the broader ChangePosture category? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Activity\nDescription: Activity is defined as a subclass of Event, representing occurrences or happenings that necessarily involve agents. Every instance of Activity must have at least one agent that is a Person and, in particular, must have exactly one Person as an agent. This ensures that any Activity is specifically characterized by the participation of one and only one Person as its agent.\nAxiom: {'subClassOf': ['Event'], 'propertyRestrictions': ['[hasAgent exactly 1 Person]', '[hasAgent only Person]']}\nGenerated CQs:", "output": "Must every Activity involve at least one Person as an agent? | Is it required for an Activity to have the property 'hasAgent' assigned to a Person? | Does the existence of an Activity necessarily imply the involvement of some Person through the 'hasAgent' relationship? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AlarmClockRinging\nDescription: AlarmClockRinging is defined as a subclass of Ringing, representing a specific ringing event. Its defining characteristic is that the agent responsible for the ringing must be an instance of AlarmClock. This ensures that any event classified as AlarmClockRinging involves an alarm clock as the source of the ringing.\nAxiom: {'subClassOf': ['Ringing'], 'propertyRestrictions': ['[hasAgent only AlarmClock]']}\nGenerated CQs:", "output": "Must every instance of AlarmClockRinging involve an agent that is an AlarmClock? | Is it required that AlarmClockRinging occurs with at least one AlarmClock as its agent? | Can there be an occurrence of AlarmClockRinging without the involvement of an AlarmClock as its agent? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PhysiologicalMeasurement\nDescription: PhysiologicalMeasurement is defined as a subclass of Measurement, representing a specialized form of measurement that pertains exclusively to patients. Any instance of PhysiologicalMeasurement must refer only to a patient, ensuring that this class captures measurements that specifically describe physiological characteristics or parameters observed in patient individuals.\nAxiom: {'subClassOf': ['Measurement'], 'propertyRestrictions': ['[refersTo some Patient]']}\nGenerated CQs:", "output": "Is every instance of PhysiologicalMeasurement required to refer exclusively to entities classified as Patient? | Can a PhysiologicalMeasurement ever refer to an entity that is not a Patient? | Does the property 'refersTo' on PhysiologicalMeasurement restrict its range to only those individuals categorized as Patient? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DoorOpen\nDescription: DoorOpen is defined as a subclass of Open, representing a specific type of open state. It is further characterized by the property restriction that it must have some agent which is a Door. This means that instances of DoorOpen denote situations or events where the entity being open is specifically a Door.\nAxiom: {'subClassOf': ['Open'], 'propertyRestrictions': ['[hasAgent only Door]']}\nGenerated CQs:", "output": "Must every instance of DoorOpen involve at least one Door as the agent? | Is it possible for DoorOpen to occur without a Door being the agent? | Does DoorOpen require that the property 'hasAgent' be associated with a Door? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SkinTemperature\nDescription: SkinTemperature is defined as a subclass of PhysiologicalMeasurement, representing a specific type of physiological measurement. Members of this class are constrained by the property restriction that they must have exactly one hasTemperature property value, which must be a literal (e.g., a numerical value). This formalization ensures that any instance of SkinTemperature uniquely and quantifiably indicates the temperature measured on the skin.\nAxiom: {'subClassOf': ['PhysiologicalMeasurement'], 'propertyRestrictions': ['[hasTemperature exactly 1]', '[hasTemperature only rdfs:Literal]']}\nGenerated CQs:", "output": "Is it necessary for SkinTemperature to have the property hasTemperature with a value of type Literal? | Does every instance of SkinTemperature possess at least one value for the hasTemperature property? | Can SkinTemperature exist without being linked to a value via the hasTemperature property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: KettleOff\nDescription: KettleOff is defined as a subclass of Off, representing situations or states where something is powered down or inactive. It is characterized by the additional property that its agent must be some instance of Kettle, indicating that only kettles can be agents in this context. This class ensures that any instance of KettleOff specifically refers to a kettle that is in the \"off\" state.\nAxiom: {'subClassOf': ['Off'], 'propertyRestrictions': ['[hasAgent only Kettle]']}\nGenerated CQs:", "output": "Must every instance of KettleOff involve at least one Kettle as the agent? | Is it possible for KettleOff to occur without any Kettle participating as the agent? | Does the occurrence of KettleOff require the presence of a Kettle playing the agent role? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NoiseLevel\nDescription: NoiseLevel is defined as a subclass of AmbientMeasurement, indicating that it represents a specific type of measurement related to environmental conditions. Every instance of NoiseLevel must have exactly one associated value via the hasNoiseLevel property, and this value must be a literal (e.g., a number or string representing the measured noise). This formalization ensures each NoiseLevel measurement uniquely records a single quantifiable noise value.\nAxiom: {'subClassOf': ['AmbientMeasurement'], 'propertyRestrictions': ['[hasNoiseLevel exactly 1]', '[hasNoiseLevel only rdfs:Literal]']}\nGenerated CQs:", "output": "Is every instance of NoiseLevel required to have at least one associated value for the property hasNoiseLevel? | Can a NoiseLevel exist without any hasNoiseLevel property value assigned to it? | Does the definition of NoiseLevel necessitate the existence of at least one hasNoiseLevel relationship with a literal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Event\nDescription: Event is a class characterized by property restrictions that enforce temporal precision. Each instance of Event must have exactly one startTime, which must be of type time:Instant, and exactly one duration, which must be of type time:DurationDescription. These constraints ensure that every Event is uniquely defined by both a specific starting instant and a specific duration, providing an unambiguous temporal identity for each Event.\nAxiom: {'propertyRestrictions': ['[duration only time:DurationDescription]', '[startTime exactly 1 time:Instant]', '[duration exactly 1 time:DurationDescription]', '[startTime some time:Instant]']}\nGenerated CQs:", "output": "Is every startTime value associated with an Event necessarily of type time:Instant? | Can an Event have a startTime that is not classified as time:Instant? | Are all instances of startTime for an Event restricted exclusively to the time:Instant class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ObjectEvent\nDescription: ObjectEvent is a subclass of Event, characterized by the restriction that it must have exactly one Object as its agent. This means every instance of ObjectEvent is an Event in which precisely one Object acts as the agent. This axiom ensures clear and unambiguous assignment of agency within such events.\nAxiom: {'subClassOf': ['Event'], 'propertyRestrictions': ['[hasAgent exactly 1 Object]', '[hasAgent some Object]']}\nGenerated CQs:", "output": "Is every ObjectEvent necessarily associated with at least one agent via the 'hasAgent' property? | Can an ObjectEvent exist without having some object linked as its agent through 'hasAgent'? | Does the occurrence of an ObjectEvent guarantee the involvement of an object as its agent? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AmbientMeasurement\nDescription: AmbientMeasurement is a class whose instances are characterized by the property that they only refer to Room; that is, any AmbientMeasurement must be associated exclusively with one or more Rooms. This restriction ensures that AmbientMeasurement data cannot pertain to entities outside the Room class.\nAxiom: {'subClassOf': ['Measurement'], 'propertyRestrictions': ['[refersTo only Room]']}\nGenerated CQs:", "output": "Does AmbientMeasurement fall under the broader category of Measurement? | What types of measurements encompass AmbientMeasurement as a more specific variant? | Which general measurement groups include AmbientMeasurement as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DoorClosed\nDescription: DoorClosed is defined as a subclass of Closed, meaning every DoorClosed instance is also a Closed instance. There are no additional property restrictions specified for this class. This formalization indicates that DoorClosed represents the specific state where a door is closed, inheriting all characteristics of the broader Closed class.\nAxiom: {'subClassOf': ['Closed'], 'propertyRestrictions': ['[hasAgent some Door]']}\nGenerated CQs:", "output": "Is it required that DoorClosed must have the hasAgent property associated with at least one Door? | Can DoorClosed occur without any Door being specified as an agent? | Does every instance of DoorClosed necessarily have a Door as its agent through the hasAgent property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SkinConductivity\nDescription: SkinConductivity is defined as a subclass of PhysiologicalMeasurement, representing measurements related to skin's electrical properties. Every instance of SkinConductivity is constrained such that its hasConductivity property can only take values of type rdfs:Literal, ensuring that conductivity data is recorded in a literal data format (e.g., numeric or text values).\nAxiom: {'subClassOf': ['PhysiologicalMeasurement'], 'propertyRestrictions': ['[hasConductivity only rdfs:Literal]', '[hasConductivity exactly 1]']}\nGenerated CQs:", "output": "Is an entity with SkinConductivity required to have exactly one value for the property hasConductivity? | Can SkinConductivity ever possess more than one or fewer than one hasConductivity assignment? | Does the definition of SkinConductivity restrict it to a single hasConductivity value exclusively? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NearObject\nDescription: NearObject is defined as a subclass of InLocation, meaning every NearObject is also considered to be located in a specific place or context. There are no additional property restrictions specified for this class.\nAxiom: {'subClassOf': ['InLocation'], 'propertyRestrictions': ['[objectLocalisation some Object]']}\nGenerated CQs:", "output": "Is it required that a NearObject must have at least one object localisation relating to an Object? | Can every NearObject be associated with some instance of Object via the objectLocalisation property? | Does the NearObject class necessitate the existence of the objectLocalisation property connecting it to an Object? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LightLevel\nDescription: LightLevel is defined as a subclass of AmbientMeasurement. Every instance of LightLevel must be associated with exactly one value via the property hasLightLevel, indicating that each measurement in this class represents a single, specific light level reading. This formalization ensures consistency in quantifying ambient light for each measurement instance.\nAxiom: {'subClassOf': ['AmbientMeasurement'], 'propertyRestrictions': ['[hasLightLevel exactly 1]', '[hasLightLevel some rdfs:Literal]']}\nGenerated CQs:", "output": "Is it necessary for a LightLevel to have at least one value for the property 'hasLightLevel'? | Does every instance of LightLevel require association with some literal value through 'hasLightLevel'? | Can a LightLevel exist without being linked to any literal value by the 'hasLightLevel' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sitting\nDescription: Sitting is defined as a subclass of Posture. This means that every instance of Sitting is also an instance of Posture, representing a specific type of body position or stance, but no additional property restrictions are specified for this class.\nAxiom: {'subClassOf': ['Posture'], 'propertyRestrictions': ['[objectLocalisation some Furniture]']}\nGenerated CQs:", "output": "Is it necessary for a Sitting instance to have the objectLocalisation property linked to some Furniture? | Does every Sitting require at least one associated Furniture through the objectLocalisation property? | Can a Sitting exist without any objectLocalisation relation to Furniture? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasLightLevel\nDescription: The property \"hasLightLevel\" has no explicitly defined domain, range, or logical characteristics. It is a sub-property of \"hasValue,\" indicating that it is used to relate entities to their light level values in a manner more specific than the general value association. No inverse property is defined.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is hasValue a superproperty of hasLightLevel? | Which properties are defined as subproperties of hasValue within the ontology? | Do all instances of hasLightLevel also satisfy the conditions of hasValue? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasConductivity\nDescription: The property \"hasConductivity\" currently lacks explicit domain and range constraints and does not have specified logical characteristics or an inverse property. It is defined as a sub-property of \"hasValue,\" indicating that it inherits the semantics of associating an entity with a value, specifically in the context of electrical or thermal conductivity.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Does the presence of the hasConductivity property guarantee the presence of the hasValue property? | Which properties are defined as subproperties under hasValue within the ontology? | Is hasValue a direct superproperty of hasConductivity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasTemperature\nDescription: The property \"hasTemperature\" inherits from the broader property \"hasValue\" but does not specify any domain or range restrictions, nor any specific logical characteristics. No inverse property is defined. This property is intended to associate an entity with its temperature, but its use is broadly unconstrained by the current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Does the use of hasTemperature always entail the use of hasValue? | Is hasValue considered a superproperty of hasTemperature in the ontology? | Which subproperties fall under hasValue, including hasTemperature? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasValue\nDescription: The property \"hasValue\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. As specified by its axioms, no constraints are currently imposed on its use, so its purpose and applicable contexts are not restricted within the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'hasValue' does not have any domain specified? | What entities can serve as the range for the 'hasValue' property? | Is it accurate that the property 'hasValue' does not specify any range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: roomLocalisation\nDescription: The property \"roomLocalisation\" has no explicitly defined characteristics, domain, or range constraints, and is not specified as a sub-property or inverse of any other property. Based on its name, it is likely intended to associate entities with their location within a room, but no further semantic or structural restrictions are currently defined.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What can be the range of the property 'roomLocalisation'? | Can 'roomLocalisation' link to entities of any type, given its range is undefined? | Is it correct that the property 'roomLocalisation' has no specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: objectLocalisation\nDescription: The property \"objectLocalisation\" has no explicitly defined domain or range restrictions and no formally specified characteristics. It is not declared as a sub-property of any other property nor does it have an inverse property. Its intended use is not further described by the available axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What entities can serve as the domain for the property 'objectLocalisation'? | Are there any classes that should not be used as the subject of 'objectLocalisation'? | Can entities of any type be related by 'objectLocalisation' as its range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: duration\nDescription: The property \"duration\" has no specified characteristics, domain, range, super-properties, or inverse property. It is a general property whose usage is not restricted to any particular class or value type in the current ontology specification.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What are the possible domains for the property 'duration'? | Is it correct that the property 'duration' does not have a specified range? | Should 'duration' be associated with any particular class as its domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: refersTo\nDescription: The property \"refersTo\" has no specified domain, range, characteristics, super-properties, or inverse properties. This indicates that it can be used to relate any two entities without formal restrictions. No additional description is provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'refersTo' be used with any subject, or is there an implicit domain restriction? | Is it correct that the property 'refersTo' does not have a specified domain? | Can anything serve as the range for the property 'refersTo', or should it be restricted? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasQuality\nDescription: The property \"hasQuality\" does not specify any explicit characteristics, domain, or range restrictions, nor does it define any super-properties or inverse properties. It is typically used to associate an entity with a quality, although no further constraints are currently imposed by its axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'hasQuality' does not have an explicitly defined range? | Is it correct that the property 'hasQuality' has no specified domain? | What kinds of entities can serve as the subject for the property 'hasQuality'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: startTime\nDescription: The property \"startTime\" has no explicitly defined characteristics, domain or range restrictions, super-properties, or inverse properties. Its usage context and intended meaning are not further specified by current axioms. This property may be intended to capture the starting time of an event or process, but no formal constraints are applied.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it appropriate for 'startTime' to have no domain specified? | What can be the range of the property 'startTime'? | Can 'startTime' be related to a value of any type, or is a specific type required? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasRate\nDescription: The property \"hasRate\" has no explicitly specified domain, range, characteristics, super-properties, or inverse properties. This indicates that it is a general-purpose property, with its usage and applicable types left unspecified by the current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasValue'], 'inverseOf': []}\nGenerated CQs:", "output": "Is hasValue a superproperty of hasRate? | Which subproperties are contained within hasValue? | Are all uses of hasRate implicitly instances of hasValue according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasAgent\nDescription: The property \"hasAgent\" is an object property without explicitly defined characteristics, domain, or range restrictions. It is specified as a subproperty of \"owl:topObjectProperty,\" indicating it inherits the broadest possible usage among object properties. No inverse property is defined.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': ['isAgentIn']}\nGenerated CQs:", "output": "What is the ontological connection between the ‘hasAgent’ and ‘isAgentIn’ properties? | If entity A has an agent B, does this entail in the ontology that B is an agent in A? | Which property acts as the inverse of ‘hasAgent’ in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasNoiseLevel\nDescription: The property \"hasNoiseLevel\" has no explicitly defined characteristics, domain, or range restrictions. It does not declare any super-properties or inverse properties. This indicates that the property can be used flexibly to relate entities to unspecified values representing noise levels, without ontological constraints on the types of subjects or objects.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasValue'], 'inverseOf': []}\nGenerated CQs:", "output": "Is hasNoiseLevel considered a subproperty of hasValue in the ontology? | Which properties are defined as subproperties under hasValue? | Does using hasNoiseLevel always entail the use of hasValue? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: isAgentIn\nDescription: The property \"isAgentIn\" has no explicitly defined characteristics, domain, or range restrictions, and it does not declare any super-properties or inverse properties. Its intended use should be clarified with additional axioms or documentation.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "Is isAgentIn categorized as a subproperty within the hierarchy of owl:topObjectProperty? | Which properties are considered superproperties of isAgentIn? | Does every use of isAgentIn also satisfy the owl:topObjectProperty relationship in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Datatype Specification Language Representation\nDescription: Datatype Specification Language Representation is a subclass of representation, characterized by the property that it represents at least one datatype. This class encompasses languages or symbolic forms specifically designed to define, describe, or model datatypes through a formal representation. Every individual in this class must be associated with the representation of some datatype, reflecting its role in specifying datatype structure or characteristics.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[represents some datatype]']}\nGenerated CQs:", "output": "Is Datatype Specification Language Representation categorized under the broader class of representation? | Which representation subclasses include Datatype Specification Language Representation? | What are the parent classes of Datatype Specification Language Representation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined generator parameter\nDescription: defined generator parameter is a subclass of specification, meaning it inherits all characteristics of the specification class. Additionally, any individual in this class must possess at least one identifier, specified through the property has_identifier and linked to a parameter identifier. This definition ensures that every defined generator parameter instance is uniquely identified in the context of specifications.\nAxiom: {'subClassOf': ['specification'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Must every defined generator parameter have at least one 'has_identifier' relationship with a parameter identifier? | Is it required that a defined generator parameter is associated, via the 'has_identifier' property, to some parameter identifier? | Can a defined generator parameter exist without any 'has_identifier' link to a parameter identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: extending subtype generator\nDescription: extending subtype generator is defined as a subclass of subtype generator. It is characterized by the property restriction that every instance must have at least one member from an extended-value-list. This ensures that individuals of this class are subtype generators specifically connected to one or more extended value lists, reflecting their extended generative capability.\nAxiom: {'subClassOf': ['subtype generator'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is every instance of extending subtype generator required to have at least one has_member relationship to an extended-value-list? | Does extending subtype generator always include some member specified within extended-value-list? | Can an extending subtype generator exist without any association to an extended-value-list through has_member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: size subtype generator\nDescription: size subtype generator is a subclass of subtype generator whose members are characterized by necessarily having at least one associated member of type size. This ensures that any instance of size subtype generator must be linked to one or more sizes, establishing its role in creating subtypes specifically based on size distinctions.\nAxiom: {'subClassOf': ['subtype generator'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is every instance of 'size subtype generator' required to have at least one 'has_member' relationship to a 'size'? | Does 'size subtype generator' always include at least one member classified as 'size'? | Can a 'size subtype generator' exist without linking to any entity of type 'size' via the 'has_member' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: array generator\nDescription: array generator is a subclass of homogenous aggregate generator and is explicitly disjoint with homogenous aggregate generator with variable size, ensuring that an instance cannot belong to both classes simultaneously. Members of the array generator class are characterized by possessing certain qualities: they are unordered aggregates, have a fixed size, can be multi-dimensional, allow index-based access, and may contain non-unique values. This combination of properties formally describes the essential characteristics of array generators, distinguishing them from other types of homogenous aggregate generators.\nAxiom: {'subClassOf': ['homogenous aggregate generator'], 'disjointWith': [], 'propertyRestrictions': ['[has_quality some unordered aggregate]', '[has_quality some fixed size]', '[has_quality some multi dimensional]', '[has_quality some index access]', '[has_quality some non-unique values]']}\nGenerated CQs:", "output": "Which generator classes are explicitly declared as mutually exclusive with homogenous aggregate generator with variable size? | Is there any circumstance under which a device can be considered both an array generator and a homogenous aggregate generator with variable size? | What disjointness constraints are specified for array generator within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set generator\nDescription: set generator is defined as a subclass of homogenous unordered aggregate generator with variable size. Members of this class are characterized by having the qualities of access by value and containing unique values. This means that each instance generates aggregates where elements are both accessed directly by their value (rather than by reference or position) and all elements within any generated aggregate are unique, with no duplicates permitted.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_quality some access by value]', '[has_quality some unique values]']}\nGenerated CQs:", "output": "Is every set generator classified under homogenous unordered aggregate generator with variable size? | Which specific generators fall under the category of homogenous unordered aggregate generator with variable size? | What broader categories include set generator as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: table generator\nDescription: table generator is defined as a subclass of heterogenous aggregate generator and is characterized by several property restrictions: it must possess the qualities of having non-unique values, variable size, being an unordered aggregate, and being two dimensional. These constraints specify that any instance of table generator produces or represents a two-dimensional collection of items where elements may repeat, the number of items can vary, the arrangement lacks a specific sequence, and multiple types of elements (heterogeneity) are permitted.\nAxiom: {'subClassOf': ['heterogenous aggregate generator'], 'propertyRestrictions': ['[has_quality some variable size]', '[has_quality some unordered aggregate]', '[has_quality some two dimensional]']}\nGenerated CQs:", "output": "Must a table generator possess at least one quality that is not unique among its values? | Can a table generator exhibit qualities where the same value is shared by more than one instance? | Is it required for a table generator to have the property 'has_quality' associated with values that are not unique? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: choice generator\nDescription: choice generator is defined as a subclass of non-aggregate generator. Members of this class are further characterized by the property that they are associated with at least one choice datatype, as expressed by the restriction [is_member_of some choice datatype]. This means any individual classified as a choice generator must participate in or be a member of a choice datatype, distinguishing them from other forms of non-aggregate generators.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[is_member_of some choice datatype]']}\nGenerated CQs:", "output": "Is every choice generator categorized under non-aggregate generator? | Which generator types fall under the broader class of non-aggregate generator? | What more general classes include choice generator as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: class datatype\nDescription: class datatype is a subclass of heterogenous aggregate datatype and is explicitly disjoint with record (tuple) datatype, ensuring that no individual can belong to both classes. Members of class datatype are characterized by the following property restrictions: they must have operations such as AttributeSelect, AttributeReplace, and Equal (each operating on class), must include members such as a class generator and an attribute-list, and must exhibit the qualities of being non-ordered and non-numeric. This formalization distinguishes class datatypes from other aggregates (like records) by their operations and inherent qualities.\nAxiom: {'subClassOf': ['heterogenous aggregate datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_operation some AttributeSelect:class]', '[has_operation some AttributeReplace:class]', '[has_operation some Equal:class]', '[has_member some class generator]', '[has_quality some non-ordered]', '[has_quality some non-numeric]', '[has_member some attribute-list]']}\nGenerated CQs:", "output": "What formal separation exists between class datatypes and record (tuple) datatypes in the ontology? | Can an entity simultaneously be classified as both a class datatype and a record (tuple) datatype? | Which datatypes are specified as being incompatible with class datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete-value identifier\nDescription: discrete-value identifier is a subclass of identifier whose instances are constrained to have at least one associated value specified as an rdfs:Literal. This means that every discrete-value identifier must be linked to some literal value (such as a string, number, or date), formalizing the notion of identifiers that represent or encode discrete, literal data.\nAxiom: {'subClassOf': ['identifier'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Does every discrete-value identifier necessarily have a value for the property 'propertyRestrictions' that is a literal? | Is it required that each discrete-value identifier possesses at least one propertyRestrictions value belonging to rdfs:Literal? | Can a discrete-value identifier exist without having propertyRestrictions set to any literal value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenity\nDescription: homogenity is defined as a subclass of aggregate generator property and is explicitly disjoint with the classes aggregate size, uniqueness, component mandatoriness, structurness, recursiveness, and access type, ensuring that no individual can simultaneously belong to these. It is also equivalent to the union of homogenous or heterogenous, indicating that any instance of homogenity must be categorized as either homogenous or heterogenous with respect to an aggregate generator property.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['agregate size', 'uniqueness', 'component mandatoriness', 'structurness', 'access type'], 'equivalentClass': ['(homogenous or heterogenous)']}\nGenerated CQs:", "output": "How are homogeneity and recursiveness formally related within the ontology? | Is there an instance that can possess both homogeneity and recursiveness? | Which classes are stated to be incompatible with homogeneity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: component mandatoriness\nDescription: component mandatoriness is defined as a subclass of aggregate generator property and is explicitly disjoint with structurness, recursiveness, and access type, ensuring no overlap among individuals of these classes. It is equivalent to the union of component mandatory and component non-mandatory, meaning every instance of component mandatoriness must be either component mandatory or component non-mandatory. This class categorizes aggregate generator properties by specifying whether a component is mandatory or not.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['recursiveness', 'access type'], 'equivalentClass': ['(component mandatory or component non-mandatory)']}\nGenerated CQs:", "output": "How does the ontology distinguish between component mandatoriness and structurness? | Is there any entity that can simultaneously possess both component mandatoriness and structurness? | Which concepts are defined as mutually exclusive with structurness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: access type\nDescription: access type is defined as a subclass of aggregate generator property and is equivalent to the union of direct access property and indirect access property. This means that any instance of access type must be either a direct access property or an indirect access property, and no other properties qualify as access types outside of this definition.\nAxiom: {'subClassOf': [], 'equivalentClass': ['(direct access property or indirect acess property)']}\nGenerated CQs:", "output": "Is access type categorized under aggregate generator property? | Which types are more specific than aggregate generator property, such as access type? | What broader property classes include access type as a specialized type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: generated datatype\nDescription: generated datatype is defined as a subclass of datatype and is explicitly disjoint with defined datatype, meaning no individual can be both a generated datatype and a defined datatype. Members of this class are further constrained by the property restriction that each generated datatype must have at least one member (has_member) that is a generated datatype generator. This formalization distinguishes generated datatypes from defined datatypes and ensures their association with specific generating mechanisms.\nAxiom: {'subClassOf': ['datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_member some generated datatype generator]']}\nGenerated CQs:", "output": "How does the ontology distinguish between generated datatype and defined datatype? | Is any entity allowed to be classified simultaneously as a generated datatype and a defined datatype? | Which datatypes are specified as being mutually exclusive with generated datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: field component\nDescription: field component is defined as a subclass of datatype role. It is further characterized by two property restrictions: every field component must participate in the role_of relationship with at least one datatype, and must have at least one identifier of type field identifier. This formalization ensures that field components are specifically associated with datatypes and are uniquely identifiable within the ontology.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[role_of some datatype]', '[has_identifier some field identifier]']}\nGenerated CQs:", "output": "Does field component fall under the category of datatype role? | What components are classified as more specific types within datatype role, including field component? | Which broader categories encompass field component as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: alternative component\nDescription: alternative component is defined as a subclass of datatype role, characterized by the requirement that it must have at least one member that is a tag-value list and at least one member that is an alternative-type. This means every instance of alternative component is associated with at least one tag-value list and one alternative-type via the has_member property, formalizing its structure as a composition of these elements.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some tag-value list]', '[has_member some alternative-type]']}\nGenerated CQs:", "output": "Which datatype roles include alternative components as their subclasses? | Is alternative component categorized under the superclass datatype role? | What general classes encompass alternative component within their hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index-type\nDescription: index-type is a subclass of datatype role, characterized by specific property restrictions. Any instance of index-type must have as members both an index upperbound and an index lowerbound, indicating the range of allowable index values. Additionally, index-type instances are members of an index-type list and are associated, via the role_of property, with some datatype. This formalization ensures that index-type serves as a role connecting data types to index value ranges, organized within relevant index-type lists.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[has_member some index upperbound]', '[is_member_of some index-type list]', '[has_member some index lowerbound]']}\nGenerated CQs:", "output": "Is it required that every index-type has at least one role_of relationship to a datatype? | Can an index-type exist without being associated through role_of to any datatype? | Does the presence of a role_of link with a datatype distinguish index-type from other classes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real field-list\nDescription: real field-list is defined as a subclass of field-list, explicitly disjoint from boolean field-list and discrete field-list, ensuring no overlap in membership between these types. Members of real field-list are characterized by the property that they contain at least one real field component as a member. This formalization guarantees that any real field-list includes real-valued field components and cannot simultaneously be considered a boolean or discrete field-list.\nAxiom: {'subClassOf': ['field-list'], 'disjointWith': ['boolean field-list'], 'propertyRestrictions': ['[has_member some real field component]']}\nGenerated CQs:", "output": "What is the logical separation between real field-list and discrete field-list according to the ontology? | Is any field-list instance permitted to belong to both real and discrete field-list classes? | Which entities are declared as mutually exclusive with discrete field-list within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: primitive field-list\nDescription: primitive field-list is defined as a subclass of field-list, with the restriction that it must have at least one member that is a primitive field component. This means that every instance of primitive field-list comprises a collection of fields where at least one member is a primitive field component.\nAxiom: {'subClassOf': ['field-list'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is every primitive field-list required to have at least one 'has_member' relationship with a primitive field component? | Can a primitive field-list exist if it does not include any primitive field component as a member? | Does the existence of a 'primitive field-list' imply the presence of a related 'primitive field component' via the 'has_member' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic operation\nDescription: dyadic operation is defined as a subclass of characterizing operation, and is disjoint with niladic operation, monadic operation, and n-adic operation, ensuring that no individual can be simultaneously classified as any of these mutually exclusive operation types. A dyadic operation is characterized by mapping a pair of values from a given datatype to either another value of the same datatype or to a Boolean value. This formalization supports the clear distinction and function of dyadic operations within the hierarchy of operation arities.\nAxiom: {'subClassOf': ['characterizing operation'], 'disjointWith': ['niladic operation', 'n-adic operation']}\nGenerated CQs:", "output": "How does the ontology differentiate dyadic operations from monadic operations? | Is it permissible for an operation to be classified as both dyadic and monadic according to the ontology? | Which operation types are defined as mutually exclusive with monadic operations in the knowledge model? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: monadic operation\nDescription: monadic operation is defined as a subclass of characterizing operation and is explicitly disjoint with n-adic operation, meaning an operation cannot be both monadic and n-adic. Monadic operations map a value of the given datatype to either another value of the same datatype or to a Boolean value, thus operating on a single input. This distinguishes monadic operations from n-adic operations, which take multiple inputs.\nAxiom: {'subClassOf': ['characterizing operation'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology formally distinguish between monadic operations and n-adic operations? | Is it permitted for an operation to be both monadic and n-adic simultaneously within the ontology framework? | Which types of operations are specified as being mutually exclusive with n-adic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: procedure-parameter-list\nDescription: procedure-parameter-list is defined as a subclass of list specification, restricted so that it must have at least one member which is a procedure-parameter declaration. This formalization ensures that any instance of procedure-parameter-list represents a list where each member is specifically a declaration pertaining to procedure parameters.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some procedure-paremeter declaration]']}\nGenerated CQs:", "output": "Is procedure-parameter-list categorized under list specification? | Which specific types fall under the category of list specification, and does procedure-parameter-list appear among them? | What broader classifications include procedure-parameter-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: extended-value-list\nDescription: extended-value-list is defined as a subclass of list specification, meaning it inherits the general characteristics of list specifications. Additionally, every member of this class must have at least one associated extended-value identifier, as specified by the property has_identifier. This ensures that all instances of extended-value-list are identifiable through one or more extended-value identifiers.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is every instance of an extended-value-list required to have at least one has_identifier relationship with an extended-value identifier? | Can an extended-value-list exist without being linked by has_identifier to an extended-value identifier? | Does the presence of the has_identifier property between an extended-value-list and an extended-value identifier define the membership of extended-value-list in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: field-list\nDescription: field-list is defined as a subclass of list specification, meaning it inherits all properties of a list specification. Additionally, it is characterized by a property restriction: every field-list must have at least one member that is a field component. This ensures that any instance of field-list specifically contains field components as its members.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Must every field-list include at least one field component as a member? | Is it required for the has_member property of a field-list to relate to a field component? | Can a field-list exist without having any field component as its member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous aggregate datatype with variable size\nDescription: homogenous aggregate datatype with variable size is a subclass of homogenous aggregate datatype. Each instance in this class is characterized by having at least one member that is a homogenous aggregate generator with variable size. This means members of this class are structured as aggregates comprised of homogeneous components, and the size or number of these components can vary, as generated by the associated generator.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some homogenous aggregate generator with variable size]']}\nGenerated CQs:", "output": "Can a homogenous aggregate datatype with variable size be classified under homogenous aggregate datatype? | What are the specific types categorized as homogenous aggregate datatype, including those with variable size? | Which general datatype categories include homogenous aggregate datatype with variable size as a specialization? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: integer datatype\nDescription: integer datatype is a subclass of numeric ordered primitive datatype, characterized by qualities such as being ordered, numeric, exact, and unbounded. It supports operations including addition, multiplication, negation, equality checking, and ordered comparison among integers, as well as ensuring the existence of non-negative integers. The class is explicitly disjoint with rational datatype, indicating that no individual can be both an integer and a rational that is not an integer. These axioms formalize the mathematical and operational properties unique to the integer datatype.\nAxiom: {'subClassOf': ['numeric ordered primitive datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_operation some NonNegative:integer]', '[has_quality some ordered]', '[has_operation some Equal:integer]', '[has_operation some InOrder:interger]', '[has_quality some numeric]', '[has_quality some exact]', '[has_operation some Add:integer]', '[has_quality some unbounded]', '[has_operation some Multiply:integer]', '[has_operation some Negate:integer]']}\nGenerated CQs:", "output": "What logical separation is established between integer datatype and rational datatype in the ontology? | Can a datatype simultaneously be classified as both integer and rational? | Which datatypes are explicitly specified as incompatible with rational datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate generator\nDescription: aggregate generator is defined as a subclass of generated datatype generator and is equivalent to any generator that is either an array generator, bag generator, class generator, record generator, sequence generator, set generator, or table generator. This class serves as a synonym for \"aggregate datatype constructor,\" reflecting its role in constructing aggregate or composite datatypes from collections of elements or records.\nAxiom: {'subClassOf': [], 'equivalentClass': ['(array generator or bag generator or class generator or record generator or sequence generator or set generator or table generator)']}\nGenerated CQs:", "output": "Does every aggregate generator fall under the category of generated datatype generator? | Which generator types are encompassed by the generated datatype generator class? | To which higher-level classes does aggregate generator pertain within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: cardinality\nDescription: cardinality is a subclass of datatype property and is disjoint from the classes order, boundedness, and equality, meaning no entity can simultaneously belong to both cardinality and any of these classes. It is formally equivalent to the union of countable, finite, and uncountable, reflecting that cardinality expresses the size or \"number of elements\" in a set, which may be countable, finite, or uncountable. This structure ensures clear differentiation from related set properties such as order, boundedness, and equality.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['order', 'equality'], 'equivalentClass': ['(countable or finite or uncountable)']}\nGenerated CQs:", "output": "How does the ontology distinguish between cardinality and boundedness as separate concepts? | Is any entity permitted to belong to both cardinality and boundedness categories simultaneously? | Which other classes, apart from boundedness, are defined as mutually exclusive with cardinality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: vector datatype\nDescription: vector datatype is defined as a subclass of array datatype. Every vector datatype must have at least one member that is generated by or corresponds to a vector generator, as specified by the property restriction [has_member some vector generator]. This formalizes vector datatypes as array datatypes with elements produced or related to a specific generation mechanism.\nAxiom: {'subClassOf': ['array datatype'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is every instance with a 'has_member' relation to a vector required to be associated with a vector generator? | Can an entity with the 'has_member' property pointing to a vector be something other than a vector generator? | Are all entities that have members of type vector necessarily linked to a vector generator through the 'has_member' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boolean field component\nDescription: boolean field component is defined as a subclass of primitive field component and is characterized by the restriction that it must have some relationship (role_of) to a boolean datatype. This means every boolean field component represents or is associated with a value that is strictly of boolean type (such as true or false), distinguishing it from other field components that may represent different primitive datatypes.\nAxiom: {'subClassOf': ['primitive field component'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is it required that the 'component' property of a boolean field always relates only to values of the boolean datatype? | Can a boolean field have a 'component' relationship to any entity that is not of boolean datatype? | Does every instance of a boolean field necessarily possess at least one 'component' that is a boolean datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: procedure datatype\nDescription: procedure datatype is defined as a subclass of non-aggregate datatype. Instances of this class represent atomic values that are operations (procedures) on values of designated parameter datatypes. A procedure datatype must possess non-numeric, exact, and non-ordered qualities, and it is composed of specific members: a procedure generator, a procedure-parameter list, and a return-parameter specification. It is also characterized by having at least the operations ‘Equal:procedure’ and ‘Invoke:procedure’. This formalization encapsulates all operations on a collection of datatypes, treating each procedure as an indivisible (atomic) value.\nAxiom: {'subClassOf': ['non-aggregate datatype'], 'propertyRestrictions': ['[has_quality some non-numeric]', '[has_member some procedure generator]', '[has_quality some exact]', '[has_member some procedure-parameter-list]', '[has_operation some Equal:procedure]', '[has_quality some non-ordered]', '[has_operation some Invoke:procedure]']}\nGenerated CQs:", "output": "Does every procedure necessarily have at least one return-parameter specified as a member? | Is it required for a procedure to have the property 'has_member' relating to a return-parameter specification? | Can there exist a procedure without an associated return-parameter specification via the 'has_member' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: upper bound\nDescription: upper bound is defined as a subclass of bound, representing a specific type of bound characterized by having exactly one value of type xsd:integer associated through the has-value property. This formalization ensures that every instance of upper bound uniquely specifies a single integer value as its bound.\nAxiom: {'subClassOf': ['bound'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is it required that an upper bound always has exactly one property restriction with a value of type integer? | Can an upper bound possess more than one property restriction assigned to integer values? | Are multiple xsd:integer values allowed for the property restriction in the context of an upper bound? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index upperbound\nDescription: index upperbound is defined as a subclass of bound, characterized by the property restriction that it must have exactly one value of type xsd:integer. This ensures that any instance of index upperbound represents a unique integer value serving as an upper bound within an indexing context.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has-value exactly 1 xsd:integer]']}\nGenerated CQs:", "output": "Is bound a superclass encompassing index upperbound? | Which subclasses does bound include, such as index upperbound? | To what broader categories does index upperbound belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boolean datatype\nDescription: boolean datatype is defined as a subclass of non-numeric unordered primitive datatype. It has qualities that are non-ordered, non-numeric, and exact, indicating that boolean values are discrete, precise, and lack inherent ordering or numeric magnitude. Instances of boolean datatype support specific logical operations, including Not, And, Or, and Equal, with all operations yielding boolean results. This formalization captures the core characteristics of the boolean datatype: a primitive type that represents values with two alternatives (typically true and false), distinct from numeric or ordered datatypes, and amenable to fundamental logic operations.\nAxiom: {'subClassOf': ['non-numeric unordered primitive datatype'], 'propertyRestrictions': ['[has_quality some non-ordered]', '[has_quality some non-numeric]', '[has_quality some exact]', '[has_operation some Not:boolean]', '[has_operation some Or:boolean]', '[has_operation some Equal:boolean]']}\nGenerated CQs:", "output": "Is it required that an entity with the has_operation property is associated with the boolean value 'And'? | Must every instance with a has_operation property necessarily involve the 'And' boolean operation? | Can an entity be considered valid if its has_operation property is linked to a boolean value other than 'And'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete base type\nDescription: discrete base type is defined as a subclass of base type, and is disjoint with real base type, ensuring that no individual can belong to both classes simultaneously. Members of this class participate in the role_of relationship with at least one discrete datatype, meaning that every discrete base type must be associated with some discrete datatype. This formalization distinguishes discrete base types from real base types and characterizes them by their association with discrete datatypes.\nAxiom: {'subClassOf': ['base type'], 'disjointWith': [], 'propertyRestrictions': ['[role_of some discrete datatype]']}\nGenerated CQs:", "output": "What is the logical separation between discrete base type and real base type in the ontology? | Can a data type be defined as both discrete and real simultaneously? | Which base types are explicitly declared as disjoint with real base type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record of boolean datatype\nDescription: record of boolean datatype is a subclass of record (tuple) datatype, disjoint from both record of real datatype and record of discrete datatype, ensuring that no individual can belong to any two of these classes simultaneously. Members of this class are characterized by having at least one member that is a boolean field-list, meaning each record must include at least one field of boolean type. This enforces that the records grouped under this class are distinguished by containing boolean data fields.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'disjointWith': ['record of real datatype'], 'propertyRestrictions': ['[has_member some boolean field-list]']}\nGenerated CQs:", "output": "What ontological separation exists between records of boolean datatype and records of discrete datatype? | Is it allowable for a single record to possess both boolean and discrete datatypes? | Which other record types are formally incompatible with records of discrete datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record of discrete datatype\nDescription: record of discrete datatype is a subclass of record (tuple) datatype, characterized by the requirement that it must have at least one member drawn from a discrete field-list. This ensures that instances of this class represent tuple datatypes whose components include one or more fields with discrete (distinct, countable) values.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Must every record of discrete datatype necessarily have at least one has_member relationship to an entity within discrete field-list? | Is it obligatory for a record of discrete datatype to include a member from the discrete field-list through the has_member property? | Can a record of discrete datatype exist without the has_member property linking it to some element of the discrete field-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set of discrete datatype\nDescription: set of discrete datatype is defined as a subclass of set datatype, representing collections where each member belongs to a discrete base type (such as integers or other countable values). This class is explicitly disjoint from set of real datatype, ensuring that no instance can simultaneously be a set of both discrete and real datatypes. The axiom requires that every member of a set of discrete datatype must be of a discrete base type, emphasizing its use for finite or countably infinite elements.\nAxiom: {'subClassOf': ['set datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_member some discrete base type]']}\nGenerated CQs:", "output": "What logical separation does the ontology specify between sets of discrete and sets of real datatypes? | Is any datatype set classified simultaneously as both discrete and real within the ontology? | Which other sets of datatypes are explicitly defined as disjoint with sets of real datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate datatype\nDescription: aggregate datatype is defined as a subclass of generated datatype and is explicitly disjoint with non-aggregate datatype, ensuring that no individual can be both an aggregate and a non-aggregate datatype. It is characterized by having at least one member that is an aggregate generator (has_member some aggregate generator). Commonly referred to as a \"structured datatype,\" this class captures datatypes that are composed of multiple components or members rather than being atomic.\nAxiom: {'subClassOf': ['generated datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_member some aggregate generator]']}\nGenerated CQs:", "output": "How does the ontology differentiate between aggregate datatypes and non-aggregate datatypes? | Is there any datatype that belongs to both aggregate and non-aggregate categories? | Which datatype categories are formally recognized as distinct from aggregate datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: date and time datatype\nDescription: date and time datatype is a subclass of non-numeric ordered primitive datatype, and is explicitly disjoint with ordinal datatype—meaning no instance can simultaneously belong to both classes. Members of this class possess qualities of being exact and potentially unbounded, and they necessarily have members such as date-time units, date-time radices, and date-time factors. The class supports specific operations, including extension, equality checking, ordering, difference calculation, and rounding of date and time values. This formalization ensures a precise and operation-rich definition of datatypes used for representing and manipulating combined date and time information, distinct from ordinal forms of data.\nAxiom: {'subClassOf': ['non-numeric ordered primitive datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_operation some Extend:time&date]', '[has_operation some Equal:time&date]', '[has_operation some InOrder:time&date]', '[has_member some date-time unit]', '[has_operation some Difference:time&date]', '[has_quality some unbounded]', '[has_member some date-time radix]', '[has_quality some exact]', '[has_operation some Round:time&date]', '[has_member some date-time factor]']}\nGenerated CQs:", "output": "How does the ontology differentiate between date and time datatypes and ordinal datatypes? | Is any datatype instance allowed to be classified as both date and time and ordinal at once? | Which datatypes are specified as mutually exclusive with ordinal datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: size\nDescription: size is defined as a subclass of value expression, representing a value-based concept within the ontology. Members of the size class are characterized by having exactly one associated value of type xsd:integer through the has-value property. This means each individual of size must specify a single integer value, reflecting the quantitative measurement that the class is intended to capture.\nAxiom: {'subClassOf': ['value expression'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Does an entity with the 'size' property have exactly one value of type integer? | Is it required that the 'size' attribute for each instance contains only a single integer value? | Can an instance be described as having more than one integer value for the 'size' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: complex datatype\nDescription: complex datatype is defined as a subclass of numeric primitive datatype and is disjoint with numeric ordered primitive datatype—meaning no individual can simultaneously belong to both classes. Members of this class are characterized as numeric, non-ordered, and approximate in nature. They support operations specific to complex numbers, such as reciprocal, negation, square root, multiplication, addition, promotion, and equality (all in the complex domain). Instances of complex datatype must include members such as complex radix and complex factor. This formalization captures the essential characteristics and operations associated with complex numbers in data representation, distinguishing them from ordered numeric primitive datatypes.\nAxiom: {'subClassOf': ['numeric primitive datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_operation some Reciprocal:complex]', '[has_operation some Negate:complex]', '[has_quality some non-ordered]', '[has_member some complex radix]', '[has_quality some numeric]', '[has_operation some SquareRoot:complex]', '[has_operation some Multiply:complex]', '[has_operation some Add:complex]', '[has_quality some approximate]', '[has_operation some Promote:complex]', '[has_member some complex factor]', '[has_operation some Equal:complex]']}\nGenerated CQs:", "output": "What entities are prevented from being both complex datatype and numeric ordered primitive datatype within the ontology? | Is there any overlap permitted between instances of complex datatype and numeric ordered primitive datatype? | Which datatype categories are expressly defined as disjoint with numeric ordered primitive datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence of real datatype\nDescription: sequence of real datatype is a subclass of sequence datatype, characterized by the restriction that its members must be of the real base type. This means every element within a sequence of this type is a real number, ensuring that the sequence contains no members of other datatypes.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some real base type]']}\nGenerated CQs:", "output": "Is sequence of real datatype a specialization of sequence datatype? | Which datatypes fall under the general class of sequence datatype, including sequence of real datatype? | What broader datatype categories encompass sequence of real datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bag datatype\nDescription: bag datatype is defined as a subclass of homogenous unordered aggregate datatype with variable size, and is explicitly disjoint with set datatype, ensuring that no instance can be both a bag and a set. Members of this class are characterized by containing elements (members) from a specified base type as well as from possible bag generators. Bags possess qualities of being non-ordered (element sequence is not significant), non-numeric, and \"exact\" (potentially referring to preserving element multiplicities). Bags support the following operations: Select, Insert, Delete, IsEmpty, Equal, and Serialize. This formalization models bags as flexible, unordered collections that can contain duplicate elements, are distinguished from sets by their handling of element multiplicity, and provide standard collection manipulation operations.\nAxiom: {'subClassOf': ['homogenous  unordered aggregate datatype with variable size'], 'disjointWith': [], 'propertyRestrictions': ['[has_quality some non-ordered]', '[has_operation some Select:bag]', '[has_operation some Insert:bag]', '[has_member some base type]', '[has_operation some Delete:bag]', '[has_operation some IsEmpty:bag]', '[has_operation some Equal:bag]', '[has_member some bag generator]', '[has_quality some non-numeric]', '[has_operation some Serialize:bag]', '[has_quality some exact]']}\nGenerated CQs:", "output": "How does the ontology formally distinguish between bag datatype and set datatype? | Is it allowed for a datatype to be classified as both a bag and a set within the ontology? | What other datatypes, besides set datatype, are declared as mutually exclusive with bag datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: node component\nDescription: node component is defined as a subclass of graph aggregate component and is explicitly disjoint with edge component, meaning an individual cannot simultaneously be a node component and an edge component. This class represents components within a graph structure that function as nodes, distinct from components serving as edges.\nAxiom: {'subClassOf': ['graph aggregate component'], 'disjointWith': []}\nGenerated CQs:", "output": "What is the formal distinction between node component and edge component within the ontology? | Is there any entity that can simultaneously be classified as both node component and edge component? | Which other classes are specified as disjoint with edge component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-numeric primitive datatype\nDescription: non-numeric primitive datatype is a subclass of primitive datatype and is explicitly disjoint with numeric primitive datatype, ensuring no individual can belong to both classes simultaneously. Members of this class must possess at least one quality that is non-numeric, as specified by the existential property restriction [has_quality some non-numeric]. This formalization captures primitive datatypes whose essential characteristics are not quantifiable numerically.\nAxiom: {'subClassOf': ['primitive datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_quality some non-numeric]']}\nGenerated CQs:", "output": "How are non-numeric primitive datatypes and numeric primitive datatypes differentiated within the ontology? | Is there any datatype in the ontology that qualifies as both numeric and non-numeric primitive datatype? | Which datatypes are asserted as disjoint with numeric primitive datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: heterogenous aggregate generator\nDescription: heterogenous aggregate generator is a subclass of aggregate generator and is equivalent to any class that is either a class generator, record generator, or table datatype. Members of this class possess the quality of being heterogenous, indicating that they generate or represent aggregates containing elements of diverse types or structures. This formalization ensures that any heterogenous aggregate generator is characterized by its structural diversity and can functionally align with multiple generator types.\nAxiom: {'subClassOf': [], 'equivalentClass': ['(class generator or record generator or table datatype)'], 'propertyRestrictions': ['[has_quality some heterogenous]']}\nGenerated CQs:", "output": "Is a heterogenous aggregate generator classified as a kind of aggregate generator? | Which aggregate generator types encompass heterogenous aggregate generators as subclasses? | What broader generator categories include heterogenous aggregate generator within their hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous aggregate datatype\nDescription: homogenous aggregate datatype is defined as a subclass of aggregate datatype, and is explicitly disjoint with heterogenous aggregate datatype, ensuring that no individual can belong to both classes simultaneously. Members of this class are characterized by the property that they must have at least one member that is a homogenous aggregate generator. This formalization captures collections whose elements are produced by uniform (homogeneous) mechanisms, distinguishing them from heterogeneous aggregates both in structure and membership requirements.\nAxiom: {'subClassOf': ['aggregate datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_member some homogenous aggregate generator]']}\nGenerated CQs:", "output": "How is the concept of homogenous aggregate datatype differentiated from heterogenous aggregate datatype within the ontology? | Could any datatype be classified simultaneously as both a homogenous aggregate and a heterogenous aggregate? | Which datatypes, in addition to heterogenous aggregate datatype, are specified as disjoint with homogenous aggregate datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: indirect acess property\nDescription: indirect access property is a subclass of access type, and is formally equivalent to any access performed either by value, in an implementation dependent manner, or by position. This means any instance of indirect access property is characterized by one or more of these access forms, distinguishing it from other access type subclasses.\nAxiom: {'subClassOf': ['access type'], 'equivalentClass': []}\nGenerated CQs:", "output": "Is an indirect access property necessarily either an access by value, an implementation dependent access, or a position access? | Is the class of indirect access property equivalent to the union of access by value, implementation dependent access, and position access? | Are there any types of access that are not covered by access by value, implementation dependent access, or position access when defining indirect access property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unbounded above\nDescription: unbounded above is defined as a subclass of unbounded, representing entities that do not have an upper bound. It is explicitly disjoint with unbounded below, ensuring that no individual can simultaneously be both unbounded above and unbounded below. This class characterizes those entities that lack an upper limit but may or may not have a lower bound.\nAxiom: {'subClassOf': ['unbounded'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology establish separation between unbounded above and unbounded below? | Is any entity classified as both unbounded above and unbounded below within the ontology? | Which classes are defined as mutually exclusive with unbounded above? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: approximate\nDescription: approximate is defined as a subclass of exactness, meaning it represents a kind or degree of exactness. It is explicitly disjoint with exact, so no individual can simultaneously be both approximate and exact. This class formalizes the notion of approximation as distinct from strict exactness within the ontology.\nAxiom: {'subClassOf': ['exactness'], 'disjointWith': []}\nGenerated CQs:", "output": "What logical separation is established between approximate and exact in the ontology? | Is it valid for an entity to be classified as both approximate and exact simultaneously? | Which classes are explicitly defined as incompatible with exact? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ordered\nDescription: ordered is defined as a subclass of order, indicating that all instances of ordered are also considered orders according to the ontology. It is explicitly disjoint with non-ordered, meaning that no individual can be simultaneously classified as both ordered and non-ordered. This formalization distinguishes entities that possess or exhibit ordering from those that do not.\nAxiom: {'subClassOf': ['order'], 'disjointWith': []}\nGenerated CQs:", "output": "What formal separation exists between ordered and non-ordered entities within the ontology? | Is any instance permitted to belong simultaneously to both ordered and non-ordered types? | Which classes are declared as disjoint with ordered in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Difference:set\nDescription: Difference:set is defined as a subclass of the difference operation, representing the set-theoretic difference between collections or sets. It is explicitly disjoint with Difference:time&date, so no instance can be both a set difference and a time/date difference. This class captures operations or results concerning the removal of elements from one set that exist in another, and is restricted to set-based contexts.\nAxiom: {'subClassOf': ['difference operation'], 'disjointWith': []}\nGenerated CQs:", "output": "What entities are considered mutually exclusive between Difference:set and Difference:time&date in the ontology? | Is there any instance that could simultaneously belong to both Difference:set and Difference:time&date? | Which classes does the ontology specify as being disjoint with Difference:set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Insert:bag\nDescription: Insert:bag is defined as a subclass of insert operation, signifying that it represents a specific type of insertion action. It is declared disjoint with Insert:table, which means that an instance of Insert:bag cannot simultaneously belong to the Insert:table class. This distinction enforces mutual exclusivity between these two types of insertion operations.\nAxiom: {'subClassOf': ['insert operation'], 'disjointWith': []}\nGenerated CQs:", "output": "What is the ontological distinction between Insert:bag and Insert:table? | Can an individual simultaneously be classified as both Insert:bag and Insert:table? | Which classes are explicitly declared as disjoint with Insert:bag? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NonNegative:integer\nDescription: NonNegative:integer is defined as a subclass of nonNegative operation, representing integers that are greater than or equal to zero. It is formally disjoint with NonNegative:rational, ensuring that no individual can be both a NonNegative:integer and a NonNegative:rational. This class captures the concept of all non-negative integer values, distinguishing them from non-negative rational numbers.\nAxiom: {'subClassOf': ['nonNegative operation'], 'disjointWith': []}\nGenerated CQs:", "output": "What logical separation is asserted between NonNegative:integer and NonNegative:rational within the ontology? | Is there any instance that could simultaneously belong to both NonNegative:integer and NonNegative:rational classes? | Which classes are declared as disjoint with NonNegative:rational in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Serialize:bag\nDescription: Serialize:bag is defined as a subclass of serialize operation, representing a specific type of serialization process. It is explicitly disjoint with Serialize:table, ensuring that no instance can be classified as both Serialize:bag and Serialize:table. This distinction enforces separation between bag-based and table-based serialization methods.\nAxiom: {'subClassOf': ['serialize operation'], 'disjointWith': []}\nGenerated CQs:", "output": "What distinguishes the classes Serialize:bag and Serialize:table within the ontology? | Is it allowed for an instance to be both a Serialize:bag and a Serialize:table? | Which classes are defined to be disjoint with Serialize:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index access\nDescription: index access is defined as a subclass of direct access property and is explicitly disjoint with key access, meaning an individual cannot be both an index access and a key access. This class represents mechanisms or operations that permit direct access to elements based on their positional index within a collection, distinctly separating it from access methods based on explicit keys.\nAxiom: {'subClassOf': ['direct access property'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology differentiate index access from key access? | Is there an entity that can be classified simultaneously as supporting both index access and key access? | Which access types are explicitly defined as incompatible with key access? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: identifier not unique\nDescription: identifier not unique is a subclass of aggregate-imposed identifier uniqueness and is disjoint with identifier unique, meaning no individual can simultaneously be both identifier not unique and identifier unique. This class represents identifiers within an aggregate context that are not required to be unique, distinguishing them from identifiers that have enforced uniqueness at the aggregate level.\nAxiom: {'subClassOf': ['aggregate-imposed identifier uniqueness'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology distinguish between 'identifier not unique' and 'identifier unique'? | Is any instance allowed to have both 'identifier not unique' and 'identifier unique' classifications? | Which classes are specified as mutually exclusive with 'identifier unique'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: component mandatory\nDescription: component mandatory is defined as a subclass of component mandatoriness and is explicitly disjoint with component non-mandatory, ensuring that no individual can simultaneously be both a component mandatory and component non-mandatory. This class characterizes components that are required or obligatory within a given context, distinguishing them from non-mandatory components.\nAxiom: {'subClassOf': ['component mandatoriness'], 'disjointWith': []}\nGenerated CQs:", "output": "What is the formal separation between component mandatory and component non-mandatory in the ontology? | Can an entity be classified as both a mandatory and a non-mandatory component simultaneously? | Which components are explicitly stated as disjoint with component non-mandatory? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: recursive\nDescription: recursive is defined as a subclass of recursiveness, signifying that every instance of recursive inherits properties from recursiveness. It is explicitly disjoint with non-recursive, ensuring that no individual can simultaneously belong to both recursive and non-recursive classes. This formalization distinguishes all recursive instances from those that are non-recursive.\nAxiom: {'subClassOf': ['recursiveness'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology distinguish between recursive and non-recursive classes? | Is any entity classified as both recursive and non-recursive in the ontology? | Which classes are formally specified as disjoint with non-recursive? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive field identifier\nDescription: descriptive field identifier is a subclass of field identifier, and is explicitly disjoint with target field identifier, meaning that no individual can simultaneously be both a descriptive field identifier and a target field identifier. This class represents identifiers that have descriptive purposes, distinguishing them from identifiers that serve as targets. The disjointness axiom enforces a clear conceptual separation between descriptive and target field identifiers within the ontology.\nAxiom: {'subClassOf': ['field identifier'], 'disjointWith': []}\nGenerated CQs:", "output": "Are there any instances that can belong to both descriptive field identifier and target field identifier? | Which classes are asserted to be mutually exclusive with target field identifier? | What formal constraint distinguishes descriptive field identifier from target field identifier in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive record of primitives field component\nDescription: descriptive record of primitives field component is a subclass of labeled dataset descriptive field component. Every instance of this class must be associated, via the property role_of, with at least one record of primitives datatype. This formalization indicates that members play a specific role in describing labeled datasets by being directly linked to data representations consisting of primitive types.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Does every descriptive record of primitives field component necessarily have a role_of relation with some record of primitives datatype? | Are all instances of descriptive record of primitives field component required to participate in at least one role_of relation with a record of primitives datatype? | Is it possible for a descriptive record of primitives field component not to be related via role_of to any record of primitives datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive record of discrete field component\nDescription: descriptive record of discrete field component is a subclass of labeled dataset descriptive field component. It is characterized by the property that it plays some role in relation to a record of discrete datatype, indicating its involvement in describing or annotating fields within a labeled dataset that take on discrete values. This class ensures that its instances are specifically linked to descriptive information about discrete data fields.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[role_of some record of discrete datatype]']}\nGenerated CQs:", "output": "Is every descriptive record of discrete field component classified under labeled dataset descriptive field component? | Which entities fall under the labeled dataset descriptive field component category, such as descriptive record of discrete field component? | What broader categories include descriptive record of discrete field component as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: list specification\nDescription: list specification is defined as a subclass of specification. This means all instances of list specification are also considered specifications. No additional disjointness, property restrictions, or further descriptive details are specified, so the class serves as a specialization of the general concept of specification for use cases where differentiation among specification types is needed.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "output": "Is list specification classified as a type of specification? | What categories of specifications include list specification as a more specific instance? | Which broader specification classes does list specification belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: value space\nDescription: value space is defined as a subclass of specification. This means that every value space is a type of specification, inheriting the general characteristics of specification while representing a distinct concept within that category. No additional distinguishing features or restrictions are asserted by the current axioms.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "output": "What higher-level categories does value space belong to? | Which specifications have value space as a specialized form? | Are all value spaces encompassed within the specification category? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tag-value list\nDescription: tag-value list is defined as a subclass of specification, indicating that it represents a specific kind of specification. This class formalizes entities that provide information or structure through a collection of tags and their corresponding values, typically used to encode attribute data in a structured format.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "output": "What more general categories does tag-value list fall under in the ontology? | Does every tag-value list represent a form of specification? | Which entities are classified as subtypes of specification, such as tag-value list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: direction\nDescription: direction is defined as a subclass of specification. This means that every direction is a specific type of specification, and it inherits all characteristics and properties applicable to specifications in the ontology. No further constraints or descriptions have been provided, so the class serves as a general categorization for directions under the broader concept of specifications.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "output": "What more specific subclasses exist under specification, such as direction? | Does the concept direction fall under the broader category of specification? | Which general categories include direction as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: select-item specification\nDescription: select-item specification is defined as a subclass of specification. This indicates that every select-item specification is a type of specification, inheriting all characteristics of the parent class, with no additional restrictions or distinctions provided in the current formalization. No further disjointness or property constraints are specified.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "output": "Which specific types of specification encompass select-item specification? | What broader specification categories include select-item specification as a subclass? | Is select-item specification categorized under the broader group of specification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: datatype generator\nDescription: datatype generator is defined as a subclass of directive information entity. This indicates that any datatype generator inherits all structural and semantic characteristics of directive information entities, typically representing an information construct that prescribes or instructs the generation of datatypes. No further property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['directive information entity']}\nGenerated CQs:", "output": "Which higher-level categories encompass datatype generator? | What entities are direct or indirect subclasses of directive information entity, specifically including datatype generator? | Is datatype generator included within the broader class of directive information entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: characterizing operation\nDescription: characterizing operation is a subclass of directive information entity. It refers to the set of operations that, either performed on or producing values of a datatype, distinguish that datatype from others with otherwise identical value spaces except potentially for symbol substitution. This class is used to formally capture the unique operational behaviors that define and differentiate datatypes in an information system.\nAxiom: {'subClassOf': ['directive information entity']}\nGenerated CQs:", "output": "Is characterizing operation a more specific kind of directive information entity? | Which broader classifications include characterizing operation as a subclass? | What entities are covered under directive information entity, such as characterizing operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: data representational model\nDescription: data representational model is defined as a subclass of directive information entity. This means any instance of a data representational model is also an instance of directive information entity, inheriting all its properties and characteristics. The class is intended to capture entities that provide structured directives on how data is to be represented or organized.\nAxiom: {'subClassOf': ['directive information entity']}\nGenerated CQs:", "output": "What overarching entity types include data representational model within their classification? | Which entities are categorized as more specific forms of directive information entity, such as data representational model? | Does a data representational model fall under the broader grouping of directive information entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: explicit subtype generator\nDescription: explicit subtype generator is defined as a subclass of subtype generator, meaning every explicit subtype generator is also a subtype generator. No further restrictions or characteristics are specified by the current axioms or descriptions.\nAxiom: {'subClassOf': ['subtype generator']}\nGenerated CQs:", "output": "Which subclasses fall within the category of subtype generator, including explicit subtype generator? | Is explicit subtype generator classified under subtype generator? | What broader classes encompass explicit subtype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: natural number\nDescription: natural number is defined as a subclass of defined datatype, indicating that it represents a specific kind of datatype with well-established properties. Natural numbers typically include non-negative integers (0, 1, 2, ...), and are formally distinguished from other datatypes by their discrete, countable nature. This classification ensures that any individual of the class natural number is treated as a clearly defined, foundational numeric datatype.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "What broader datatype classifications include natural number as a subclass? | Which datatypes encompass natural number as a specialized type? | Is natural number categorized under defined datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: modulo\nDescription: modulo is defined as a subclass of defined datatype, indicating that it represents a specifically characterized datatype within the ontology. No further domain-specific properties or restrictions are specified for this class based on the current axiom.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "What broader categories encompass modulo under defined datatype? | Is modulo classified as a kind of defined datatype? | Which defined datatypes have modulo as a specific subtype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bit\nDescription: bit is defined as a subclass of defined datatype, indicating that it represents a specific, well-defined data value within the ontology. As a data-oriented class, bit inherits all characteristics of defined datatypes but is further specialized for contexts where only binary or distinctly specified data values are relevant.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Is bit classified under the general group of defined datatype? | Which datatypes are more specific types within defined datatype, including bit? | To what broader datatype categories does bit belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bit string\nDescription: bit string is defined as a subclass of defined datatype, representing a specific type of datatype whose values consist of sequences of bits. This classification situates bit string within the hierarchy of datatypes and indicates its specialization for encoding data as ordered collections of binary digits.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "What higher-level datatypes does bit string fall under in the ontology? | Which datatypes are classified as specializations of defined datatype, including bit string? | Is bit string categorized under defined datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: character string\nDescription: character string is defined as a subclass of defined datatype. This means any instance of character string is also recognized as a defined datatype, typically representing a sequence of characters used to encode textual information.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Is character string classified as a subtype of defined datatype? | What general datatypes does character string fall under within the ontology? | Which datatypes are encompassed under defined datatype, including character string? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time interval\nDescription: time interval is defined as a subclass of defined datatype, indicating that it represents a structured data value within the ontology. As a specialized datatype, time interval refers to a span or duration of time, inheriting all properties and constraints applicable to defined datatypes.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Does time interval fall within the category defined by defined datatype? | What specific types are classified under defined datatype, including time interval? | Which broader categories encompass time interval as a specific instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: octet\nDescription: octet is defined as a subclass of defined datatype, establishing it as a specific type of datatype within the ontology. This formalization indicates that any instance of octet must satisfy all constraints applicable to defined datatype, but provides no further restrictions or additional properties beyond this classification.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Is octet a defined subtype within the category of defined datatype? | To which higher-level datatypes does octet belong according to the ontology hierarchy? | Which datatypes are specified as subclasses of defined datatype, including octet? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: octet string\nDescription: octet string is defined as a subclass of defined datatype. This means that octet string represents a specific type of datatype, though its precise structure and constraints are not further elaborated in the current axioms. Members of this class inherit all characteristics of defined datatype.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Which data types fall under the category of defined datatype, such as octet string? | What broader data categories include octet string as a member? | Is octet string classified as a specialized type of defined datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: private\nDescription: private is defined as a subclass of defined datatype, indicating that it represents a specific kind of datatype within the ontology. No additional restrictions or disjointness axioms are specified, so its primary characteristic is its hierarchical relationship as a more specialized form of defined datatype.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Which specific types are classified as defined datatype, such as private? | What broader classes does private belong to in this ontology? | Does private fall under the general category of defined datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: object identifier\nDescription: object identifier is defined as a subclass of defined datatype. This means that every object identifier is a specific type of defined datatype, typically used to uniquely distinguish individual entities or objects within a system or dataset.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Is every object identifier necessarily classified as a defined datatype? | To what broader datatype classes does object identifier belong? | Which defined datatypes have object identifier as a specific specialization? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: stack\nDescription: stack is defined as a subclass of defined generator. This means every stack is a type of defined generator, inheriting all characteristics associated with defined generators. No additional property restrictions, disjointness, or equivalence assertions are specified. This class is intended to capture entities that possess the structural or functional traits of defined generators, refined specifically as stacks.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "Which entities are identified as subclasses under defined generator, such as stack? | Is stack categorized as a specific type of defined generator? | What are the broader categories or superclasses to which stack belongs? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tree\nDescription: tree is defined as a subclass of defined generator. This indicates that any instance of tree is considered a type of defined generator, inheriting all properties and restrictions from that superclass. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "What entities are specified as subclasses of defined generator, such as tree? | Is tree classified as a type of defined generator? | Which broader classes does tree pertain to within the context of defined generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: optional\nDescription: optional is defined as a subclass of defined generator, indicating that every optional is a type of defined generator. This means all individuals classified as optional inherit the properties and restrictions of defined generator, but may have further distinguishing features or constraints specified elsewhere. There are no additional axioms or asserted properties currently restricting the class further.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "Which defined generator types encompass optional as a subclass? | Does optional fall under the defined generator category? | What broader classes include optional within the context of defined generator classifications? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: directed labeled graph datatype generator\nDescription: directed labeled graph datatype generator is a subclass of defined generator. This class represents generators that are specifically designed to produce directed labeled graph datatypes, inheriting the general properties of defined generators while specializing in the context of graph structures with directed edges and labeled nodes or connections.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "Is every directed labeled graph datatype generator inherently classified as a defined generator? | To what higher-level generator classes does directed labeled graph datatype generator belong? | Which specific generator types are categorized under defined generator, such as directed labeled graph datatype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-directed labeled graph generator\nDescription: non-directed labeled graph generator is defined as a subclass of defined generator. This means every non-directed labeled graph generator is a type of defined generator, inheriting its general properties. The class represents entities that produce non-directed graphs in which nodes and/or edges are assigned labels, but with no explicit directionality imposed on the connections.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "What broader generator classifications include non-directed labeled graph generator? | Which generator types are subclasses of defined generator? | Does a non-directed labeled graph generator fall under the category of defined generators? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: vector generator\nDescription: vector generator is a subclass of defined generator, indicating that every vector generator is also a defined generator. No additional constraints or unique characteristics have been specified beyond this hierarchical relationship. The purpose and specific properties of vector generator are inherited from defined generator.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "Which generators fall under the defined generator category, such as vector generator? | What hierarchical categories include vector generator as a member? | Is a vector generator classified as a type of defined generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: procedure generator\nDescription: procedure generator is defined as a subclass of non-aggregate generator. This means that every procedure generator is a specific type of non-aggregate generator, inheriting all properties and constraints applicable to non-aggregate generators. No further restrictions or characteristics are provided by the current axioms.\nAxiom: {'subClassOf': ['non-aggregate generator']}\nGenerated CQs:", "output": "Does a procedure generator fall under the classification of non-aggregate generator? | To which broader generator categories does procedure generator belong? | Which types of generators are specific forms of non-aggregate generator, such as procedure generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: attribute identifier\nDescription: attribute identifier is defined as a subclass of identifier, indicating that every attribute identifier is an identifier with a specific role in distinguishing or denoting attributes within a system. This class inherits all properties associated with identifiers, but specializes them for use in the identification of attributes. No further property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "output": "What higher-level classes is attribute identifier associated with? | Is attribute identifier classified under the broader group of identifier? | Which specific types are encompassed by the identifier category, including attribute identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: parameter identifier\nDescription: parameter identifier is a subclass of identifier. This means every parameter identifier is an identifier, inheriting all its properties and characteristics, but is specifically used to denote or reference parameters (such as in functions or methods). The axiom ensures that all parameter identifiers are included within the broader category of identifiers.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "output": "Is parameter identifier classified as a more specific instance within the category of identifier? | Which subclasses exist under identifier, and does parameter identifier appear among them? | What general categories encompass parameter identifier as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: extended-value identifier\nDescription: extended-value identifier is defined as a subclass of identifier. Members of this class inherit all characteristics of identifiers, serving the purpose of uniquely distinguishing entities, but are further specified as relating to extended-value contexts. No additional property restrictions or disjointness axioms are currently asserted for this class.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "output": "Is every extended-value identifier classified as an identifier? | What higher-level classes does extended-value identifier fall under within the identifier hierarchy? | Which subclasses of identifier encompass extended-value identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: character-set identifier\nDescription: character-set identifier is defined as a subclass of identifier. This means every character-set identifier is an identifier, but with a more specific role, typically used to uniquely represent or designate different character sets within a system or context. There are no further axioms or restrictions specified for this class.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "output": "What broader classes does character-set identifier fall under in the ontology? | Which identifier types include character-set identifier as a specialization? | Is every character-set identifier also categorized as an identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: field identifier\nDescription: field identifier is defined as a subclass of identifier. Members of this class inherit all characteristics of identifiers, specifically representing identifiers that are associated with fields. This formalization ensures field identifiers are treated as a specialized type of identifier, typically used to uniquely reference or denote fields within a given context or system.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "output": "To which higher-level classes is field identifier related? | Does field identifier fall under the broader classification of identifier? | What specific subtypes exist within the identifier category, including field identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: date-time factor\nDescription: date-time factor is defined as a subclass of factor. This means every date-time factor is a type of factor, inheriting its general properties and constraints. No additional disjointness or property restrictions are specified, so instances of date-time factor possess all the characteristics of factors, potentially specializing in aspects related to date or time within their domain.\nAxiom: {'subClassOf': ['factor']}\nGenerated CQs:", "output": "What factors are more specific than factor, such as date-time factor? | Which higher-level categories include date-time factor? | Is date-time factor classified as a type under factor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: scaled factor\nDescription: scaled factor is defined as a subclass of factor. This means that every scaled factor is a specific kind of factor, inheriting all characteristics of factors, but may possess additional properties or constraints related to scaling, depending on further ontology specification. There are no further axioms provided, so this class serves as a specialization for factors that have been subject to scaling.\nAxiom: {'subClassOf': ['factor']}\nGenerated CQs:", "output": "Which subcategories fall under factor, including scaled factor? | Is scaled factor classified as a specific kind of factor? | What broader class does scaled factor conceptually fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real factor\nDescription: real factor is defined as a subclass of factor. This means every real factor is, by definition, a factor, inheriting all characteristics shared by factors in general. There are no further distinguishing restrictions or properties specified, so real factor can be understood as a type of factor without additional specified constraints.\nAxiom: {'subClassOf': ['factor']}\nGenerated CQs:", "output": "Is real factor categorized under the broader class of factor? | Which subclasses comprise the set defined by factor, including real factor? | To which general classes does real factor belong within the context of factors? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: complex factor\nDescription: complex factor is defined as a subclass of factor. This means that every complex factor is a kind of factor, inheriting all properties of the factor class. There are no additional restrictions, disjointness, or property constraints specified for complex factor in the current formalization.\nAxiom: {'subClassOf': ['factor']}\nGenerated CQs:", "output": "What are the broader class hierarchies that complex factor falls under? | Which subclasses are encompassed by factor, such as complex factor? | Does complex factor represent a specific kind under the general category of factor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: graph aggregate component\nDescription: graph aggregate component is defined as a subclass of aggregate field component. This indicates that every graph aggregate component inherits all characteristics of aggregate field components but may have additional specialized properties or constraints. Instances of this class are, therefore, specific types of aggregate field components, potentially involved in representing or handling aggregated data within a graph structure.\nAxiom: {'subClassOf': ['aggregate field component']}\nGenerated CQs:", "output": "Is graph aggregate component classified under the broader category of aggregate field component? | What parent categories encompass graph aggregate component? | Which aggregate field component subclasses include graph aggregate component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: n-adic operation\nDescription: n-adic operation is defined as a subclass of characterizing operation. It represents operations that map ordered n-tuples of values—where each value may belong to a given or parameterized datatype—into a result that is also of the given or a parametric datatype. This class models operations with arity n, generalizing functions over sequences of values and emphasizing their domain and codomain datatype constraints.\nAxiom: {'subClassOf': ['characterizing operation']}\nGenerated CQs:", "output": "Is n-adic operation categorized under characterizing operation? | Which operations are specific types of characterizing operation, such as n-adic operation? | What broader operational categories include n-adic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined generator parameter-list\nDescription: defined generator parameter-list is a subclass of list specification. This means every defined generator parameter-list is a type of list specification, inheriting all its properties and constraints. Individuals in this class are formally recognized as specialized list specifications used for defining generator parameters.\nAxiom: {'subClassOf': ['list specification']}\nGenerated CQs:", "output": "Is defined generator parameter-list categorized under list specification? | What are the more specialized types within list specification, such as defined generator parameter-list? | To which higher-level group does defined generator parameter-list conceptually belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DAG datatype generator\nDescription: DAG datatype generator is defined as a subclass of directed labeled graph datatype generator. Members of this class inherit all properties of directed labeled graph datatype generators, specializing in generating data types based on directed acyclic graph (DAG) structures. This class is used to represent systems or components that produce datatypes structured according to DAGs, ensuring acyclicity and directionality in their outputs.\nAxiom: {'subClassOf': ['directed labeled graph datatype generator']}\nGenerated CQs:", "output": "Is DAG datatype generator classified under directed labeled graph datatype generator? | What broader datatype generator classes include DAG datatype generator? | Which generators are categorized as subclasses of directed labeled graph datatype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: identifier\nDescription: identifier is defined as a subclass of information artifact entity. Members of this class represent informational constructs specifically designed to uniquely distinguish or label entities, concepts, or data within information systems. This formalization means every identifier is categorized under the broader class of information artifact entities, emphasizing its role in conveying and maintaining unique identity information.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "Which higher-level categories encompass identifier? | What types are classified under information artifact entity, including identifier? | Does identifier belong to the broader group of information artifact entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: value expression\nDescription: value expression is a subclass of information artifact entity. This means every value expression is formally classified as a type of information artifact entity, inheriting all its general properties and restrictions. No additional axioms or property restrictions are specified, so value expression is currently distinguished solely by its classification within the ontology hierarchy as a specialized form of information artifact entity.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "Does value expression inherit characteristics from information artifact entity? | Which subclasses are defined within the scope of information artifact entity, such as value expression? | What general class does value expression fall under within the context of information artifact entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: label\nDescription: label is defined as a subclass of information artifact entity, indicating that it represents a type of information artifact. Instances of this class are understood to bear, convey, or represent information, typically serving as markers or identifiers that provide descriptive or categorical details about other entities.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "What are the more general classes that label is classified under? | Is label a specific type of information artifact entity? | Which information artifact entities include label as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: directive information entity\nDescription: directive information entity is defined as a subclass of information artifact entity. This means that every directive information entity is a type of information artifact entity, with no additional property restrictions or disjointness specified. Members of this class represent entities that are informational in nature and classified within the broader category of information artifact entities.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "Which specific subtypes of information artifact entity include directive information entity as a member? | What are the direct and indirect parent classes of directive information entity? | Is directive information entity classified under the broader group of information artifact entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: representation\nDescription: representation is defined as a subclass of information artifact entity, indicating that every instance of representation is an information-based object or artifact. This formalization situates representations within the broader context of informational entities, ensuring that they inherit all characteristic properties of information artifact entities. There are no additional property restrictions or disjointness conditions specified for this class.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "What are the broader categories that encompass representation? | Is representation a more specific type within the category of information artifact entity? | Which subclasses fall under information artifact entity, such as representation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: specification\nDescription: specification is defined as a subclass of information artifact entity. This means every specification is considered a type of information artifact, formally representing structured information or requirements typically used to describe, detail, or govern the properties or behavior of an entity, system, or process.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "What general categories encompass specification in the ontology? | Which entities are recognized as more specific forms of information artifact entity, including specification? | Is specification categorized under information artifact entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: equality\nDescription: equality is defined as a subclass of datatype property, indicating that it represents a specific type of property that links individuals to data values. This classification ensures that equality is used exclusively in contexts appropriate for datatype properties, which relate individuals to literal values rather than to other individuals.\nAxiom: {'subClassOf': ['datatype property']}\nGenerated CQs:", "output": "What are the broader property categories that include equality? | Which datatype properties encompass equality as a more specific type? | Is equality classified as a kind of datatype property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: maximum-size\nDescription: maximum-size is a subclass of size, representing the largest possible or allowable extent within a given context. Any individual classified as maximum-size must also be an instance of size, specifying the upper limit or boundary in measurement or quantity.\nAxiom: {'subClassOf': ['size']}\nGenerated CQs:", "output": "Does maximum-size fall under the broader classification of size? | Which higher-level categories encompass maximum-size? | What are the specific types categorized within size, including maximum-size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: minimum-size\nDescription: minimum-size is defined as a subclass of size, indicating that it represents a more specific concept within the broader category of size. Members of this class inherit all characteristics of size, and are distinguished by representing some form of minimum or least amount within size-related contexts.\nAxiom: {'subClassOf': ['size']}\nGenerated CQs:", "output": "Under which broader category is minimum-size classified? | Which concepts are encompassed within size and include minimum-size as a subclass? | Does minimum-size represent a specialization of size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate generator property\nDescription: aggregate generator property is defined as a subclass of quality, indicating that it represents a specialized type of quality. Members of this class inherit all characteristics of qualities, and specifically pertain to attributes or aspects associated with aggregate generators. No additional restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['quality']}\nGenerated CQs:", "output": "What are the more general categories that encompass aggregate generator property? | Which property types fall under the superclass quality, including aggregate generator property? | Is every aggregate generator property classified under the broader category of quality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: datatype property\nDescription: datatype property is defined as a subclass of quality, indicating that each instance of datatype property inherits characteristics associated with quality. This classification suggests that datatype properties are viewed as specific types of qualities within the ontology.\nAxiom: {'subClassOf': ['quality']}\nGenerated CQs:", "output": "Does every datatype property fall under the category of quality? | Which properties are classified as more specific than quality, including datatype property? | To which upper-level categories does datatype property belong within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: subtype generator\nDescription: subtype generator is defined as a subclass of datatype generator, indicating that every instance of subtype generator is also an instance of datatype generator. This classification specifies that subtype generators operate within the broader framework of datatype generators but may provide more specialized or refined functionality. No additional disjointness or property restrictions are specified.\nAxiom: {'subClassOf': ['datatype generator']}\nGenerated CQs:", "output": "Is subtype generator an example of datatype generator? | Which generators are classified under datatype generator, including subtype generator? | What general generator categories encompass subtype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: date-time unit\nDescription: date-time unit is defined as a subclass of label, indicating that it represents a specific type of label used to denote units of time such as seconds, minutes, or hours in the context of date and time. No additional constraints or disjointness are specified, so its primary distinguishing feature is its specialization from the broader category of label.\nAxiom: {'subClassOf': ['label']}\nGenerated CQs:", "output": "What specific subclasses are classified under label, such as date-time unit? | Which concept categories does date-time unit derive from, including label? | Is date-time unit encompassed within the hierarchy of label? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: date-time radix\nDescription: date-time radix is defined as a subclass of radix. This indicates that any instance of date-time radix inherits all characteristics of radix, while potentially adding more specific constraints or properties relevant to date and time representation bases. No further description or property restrictions are provided.\nAxiom: {'subClassOf': ['radix']}\nGenerated CQs:", "output": "Is date-time radix classified under the broader group of radix? | Which specialized forms are encompassed by the class radix, such as date-time radix? | What larger categories does date-time radix fall under in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: complex radix\nDescription: complex radix is a subclass of radix. This means every complex radix is a type of radix, inheriting all the general properties of radix. There are no additional property restrictions or disjointness axioms specified, so complex radix is simply categorized as a specialized form within the broader radix class.\nAxiom: {'subClassOf': ['radix']}\nGenerated CQs:", "output": "What are the parent categories that encompass complex radix? | Which specific types fall under the broader class of radix? | Is complex radix classified as a subtype under the category of radix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real radix\nDescription: real radix is a subclass of radix, representing those members of radix that have the property of being real. Every real radix is formally included in the broader category of radix, but may possess additional distinguishing characteristics specifying real-valued properties. No further property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['radix']}\nGenerated CQs:", "output": "Does real radix fall under the broader classification of radix? | Which specific types are categorized within radix, such as real radix? | What general classifications encompass real radix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: scaled radix\nDescription: scaled radix is defined as a subclass of radix. This means every instance of scaled radix is also considered a radix. No additional property restrictions or disjointness axioms are specified, so a scaled radix inherits all characteristics of radix, potentially with further differentiation implied by its name or use context.\nAxiom: {'subClassOf': ['radix']}\nGenerated CQs:", "output": "To which overarching categories is scaled radix assigned within the taxonomy? | Which classifications are recognized as specializations of radix, such as scaled radix? | Does scaled radix fall under the broader concept of radix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: factor\nDescription: factor is defined as a subclass of value expression, indicating that every instance of factor is also recognized as a value expression. There are no additional restrictions or disjointness axioms specified, so factor inherits all characteristics of value expressions without further constraints.\nAxiom: {'subClassOf': ['value expression']}\nGenerated CQs:", "output": "To which broader classifications does factor belong within the ontology? | Which entities are classified under value expression, such as factor? | Does every factor represent a form of value expression? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: radix\nDescription: radix is defined as a subclass of value expression. This indicates that any radix is a specific kind of value expression, inheriting all characteristics of value expressions and further specializing their meaning, typically referring to the numerical base in mathematical or computational contexts.\nAxiom: {'subClassOf': ['value expression']}\nGenerated CQs:", "output": "Can radix be classified as a kind of value expression? | Which entities are subclasses under value expression, such as radix? | What are the general categories that radix is a member of within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bound\nDescription: bound is defined as a subclass of value expression, indicating that every instance of bound is also considered a value expression. No further restrictions or disjointness axioms are specified, so the defining characteristic of the bound class is its inheritance from value expression.\nAxiom: {'subClassOf': ['value expression']}\nGenerated CQs:", "output": "Which subclasses fall under value expression, and does bound appear among them? | What general class hierarchies encompass bound, considering its relation to value expression? | Is value expression a broader category that includes bound as a more specific concept? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: edge component\nDescription: edge component is defined as a subclass of graph aggregate component. This means that every edge component is a specialized type of graph aggregate component, inheriting all its characteristics. The class represents a distinct part or module within the broader category of aggregated components in graph structures. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['graph aggregate component']}\nGenerated CQs:", "output": "To what broader structural groups does edge component pertain? | Is edge component included within the hierarchy of graph aggregate component? | Which components are classified as specializations of graph aggregate component, specifically noting edge component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled dataset descriptive field component\nDescription: labeled dataset descriptive field component is defined as a subclass of field component. This means every labeled dataset descriptive field component is by definition a type of field component. No additional property restrictions or disjointness constraints are specified, so its unique characterization is its specialization of the more general field component class.\nAxiom: {'subClassOf': ['field component']}\nGenerated CQs:", "output": "Is every labeled dataset descriptive field component classified under the field component category? | Which components are more specific exemplars of field component, including labeled dataset descriptive field component? | What categories encompass labeled dataset descriptive field component as a more specific element? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled dataset target field component\nDescription: labeled dataset target field component is defined as a subclass of field component. This means every labeled dataset target field component is a specific type of field component, typically representing the target variable in a labeled dataset. No additional property or disjointness restrictions are specified for this class.\nAxiom: {'subClassOf': ['field component']}\nGenerated CQs:", "output": "To which broader groups does labeled dataset target field component belong within the hierarchy of field component? | Is every labeled dataset target field component a specific kind of field component? | Which entities are classified as field component subclasses, such as labeled dataset target field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: add operation\nDescription: add operation is defined as a subclass of dyadic arithmetic operation, indicating that it is an arithmetic operation that takes exactly two arguments. This formalization positions add operation within the hierarchy of arithmetic functions involving pairs of inputs, such as addition in standard mathematics.\nAxiom: {'subClassOf': ['dyadic aritmetic operation']}\nGenerated CQs:", "output": "Which operations are subclasses of dyadic arithmetic operation, such as add operation? | What broader classifications include add operation as a specific example? | Does the add operation fall under the category of dyadic arithmetic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: multiply operation\nDescription: multiply operation is defined as a subclass of dyadic arithmetic operation, indicating that it is an arithmetic operation involving exactly two operands. Instances of this class perform multiplication, processing two input values to produce their product.\nAxiom: {'subClassOf': ['dyadic aritmetic operation']}\nGenerated CQs:", "output": "What broader classes encompass multiply operation in the context of arithmetic operations? | Which operations are defined as specializations of dyadic arithmetic operation, such as multiply operation? | Is multiply operation categorized under dyadic arithmetic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Divide:scaled\nDescription: Divide:scaled is defined as a subclass of dyadic arithmetic operation. This indicates that it represents an arithmetic operation involving two inputs (operands). No further description or distinguishing constraints are specified by the current axioms, so its meaning is inherited from the broader category of dyadic arithmetic operations.\nAxiom: {'subClassOf': ['dyadic aritmetic operation']}\nGenerated CQs:", "output": "What specific operations are subclasses of dyadic arithmetic operation, and does Divide:scaled appear among them? | Which broader arithmetic operation classes include Divide:scaled as a specialized form? | Is Divide:scaled categorized under dyadic arithmetic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: delete operation\nDescription: delete operation is a subclass of dyadic updating operation. This means that every delete operation is considered a specific type of updating operation that involves two entities (typically an object and context). The axiom establishes the hierarchical relationship, indicating that delete operation inherits all structural characteristics of dyadic updating operations.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "Which higher-level operation types encompass delete operation in their hierarchy? | Is every delete operation classified as a kind of dyadic updating operation? | What operations belong under the broader category of dyadic updating operation, specifically including delete operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: insert operation\nDescription: insert operation is defined as a subclass of dyadic updating operation. This means that every insert operation is considered a specific type of dyadic updating operation, typically involving two entities and resulting in an update. No further distinguishing characteristics or property restrictions are specified.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "Which specific operations are recognized under the category of dyadic updating operation? | Is insert operation classified as a kind of dyadic updating operation? | What broader operational categories does insert operation fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Append:sequence\nDescription: Append:sequence is defined as a subclass of dyadic updating operation, meaning it is a specific type of operation that updates data by taking two inputs. This class formalizes the concept of appending one sequence to another as an update, inheriting the general properties of dyadic updating operations.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "Which operations are categorized under dyadic updating operation, such as Append:sequence? | Is Append:sequence classified as a specialized form of dyadic updating operation? | What are the broader classes that encompass Append:sequence? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AttributeFunctionOverride:class\nDescription: AttributeFunctionOverride:class is defined as a subclass of dyadic updating operation. This indicates that any member of AttributeFunctionOverride:class represents a special kind of operation within the scope of dyadic updating, where typically two entities are involved in an updating process. Without further restriction or description, all instances of this class inherit the structural and semantic characteristics of dyadic updating operations.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "Which types exhibit a more specific scope than dyadic updating operation, such as AttributeFunctionOverride:class? | What overarching types does AttributeFunctionOverride:class inherit from within the ontology? | Does AttributeFunctionOverride:class fall under the broader category of dyadic updating operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AttributeReplace:class\nDescription: AttributeReplace:class is defined as a subclass of dyadic updating operation. This means it represents a type of operation that updates data by replacing an attribute, and, as a dyadic operation, it involves two input entities. No further restrictions, disjointness, or property constraints are specified in the axiom, so its primary characterization is as a specialized updating action within the context of dyadic operations.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "Which concepts are more specific forms of dyadic updating operation, such as AttributeReplace:class? | What are the higher-level classes that encompass AttributeReplace:class? | Is AttributeReplace:class categorized under the broader group of dyadic updating operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FieldReplace:record\nDescription: FieldReplace:record is defined as a subclass of dyadic updating operation. This means that it represents a specific type of updating operation involving two arguments or entities. As a subclass, FieldReplace:record inherits all the general characteristics of dyadic updating operations and is further specialized to represent operations where a field in a record is replaced or updated. No additional restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "What higher-level operation types encompass FieldReplace:record? | Is FieldReplace:record categorized under the group of dyadic updating operations? | Which dyadic updating operation subclasses include FieldReplace:record? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: difference operation\nDescription: difference operation is defined as a subclass of dyadic operation, indicating it is a mathematical operation that requires exactly two operands. As a specific type of dyadic operation, the difference operation computes the result by evaluating the \"difference\" between its two input elements, distinguishing it from other dyadic operations such as sum or product.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Which operations are classified as more specific types under dyadic operations, including difference operations? | Does the class of difference operations fall within the broader group of dyadic operations? | What broader operation categories encompass the difference operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic select operation\nDescription: dyadic select operation is defined as a subclass of dyadic operation, signifying that it is a binary operation acting on two operands. No additional constraints or distinguishing characteristics are specified beyond its membership in the broader class of dyadic operations.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Is every dyadic select operation also classified as a dyadic operation? | Which specialized operations fall under the category of dyadic operation, including dyadic select operation? | To what broader classes does dyadic select operation belong within the operation hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic aritmetic operation\nDescription: dyadic arithmetic operation is defined as a subclass of dyadic operation, indicating that every dyadic arithmetic operation involves exactly two inputs (operands). This class specifically focuses on operations in the arithmetic domain (such as addition, subtraction, multiplication, or division), extending the more general concept of dyadic operations by emphasizing their application to arithmetic computations.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Is every dyadic arithmetic operation classified under dyadic operation? | Which broader classes include dyadic arithmetic operation within their hierarchy? | What other subclasses fall under dyadic operation alongside dyadic arithmetic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic logical operation\nDescription: dyadic logical operation is defined as a subclass of dyadic operation, meaning it is an operation that takes exactly two inputs. This class specifically refers to logical operations (such as AND, OR, XOR) applied to two operands, distinguishing it from other kinds of dyadic operations that may not be logical in nature.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Does every dyadic logical operation fall under the category of dyadic operation? | Which specific operations are classified as subclasses of dyadic operation, including dyadic logical operation? | What are the broader categories that encompass dyadic logical operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic set operation\nDescription: dyadic set operation is defined as a subclass of dyadic operation. This class encompasses operations that act on two sets as inputs. Members of this class must satisfy all properties of dyadic operations, specifically within the context of set-theoretic functions or relations.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Which specific types fall under the class dyadic operation, such as dyadic set operation? | What categories are broader than dyadic set operation, including dyadic operation? | Is every dyadic set operation also classified as a dyadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic updating operation\nDescription: dyadic updating operation is defined as a subclass of dyadic operation, indicating that it involves two operands. While specific characteristics are not provided, this class inherits all properties of dyadic operations, typically meaning it operates on pairs of entities or values.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Under which more general operation classifications does dyadic updating operation fall? | Which operations are encompassed by the broader class of dyadic operation, including dyadic updating operation? | Does dyadic updating operation represent a specialized form of dyadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic comparison operation\nDescription: dyadic comparison operation is a subclass of dyadic operation. This class encompasses operations that involve two arguments and perform a comparative evaluation between them. Members of this class, as dyadic operations, specifically relate to comparison tasks (such as \"greater than\", \"less than\", or \"equal to\") applied to pairs of inputs.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Which broader categories encompass dyadic comparison operation? | Are all dyadic comparison operations types of dyadic operations? | What specific operations are classified under dyadic operation, including dyadic comparison operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic retrieve operation\nDescription: dyadic retrieve operation is defined as a subclass of dyadic operation, indicating it is an operation that acts on exactly two inputs or entities. No further distinguishing axioms or properties are specified, so its classification relies solely on this generalization.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "What broader classes does dyadic retrieve operation belong to within the operation hierarchy? | Which types of operations are more specific than dyadic operation, such as dyadic retrieve operation? | Does every dyadic retrieve operation fall under the category of dyadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: equal operation\nDescription: equal operation is defined as a subclass of dyadic comparison operation. This class represents operations that perform a comparison between two entities and evaluate whether they are equal. As a refinement of dyadic comparison operation, equal operation specifically focuses on checking and indicating equality between two operands or values.\nAxiom: {'subClassOf': ['dyadic comparison operation']}\nGenerated CQs:", "output": "What operations fall under the category of dyadic comparison operation, such as equal operation? | Is equal operation classified as a type of dyadic comparison operation? | To which broader operational classes does equal operation belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: in order operation\nDescription: in order operation is defined as a subclass of dyadic comparison operation, indicating that it represents a specific type of comparison involving two entities. As a specialized comparison operation, in order operation inherits all characteristics of dyadic comparison operations but further constrains its meaning to those operations that assess or evaluate entities with respect to their sequence or ordering.\nAxiom: {'subClassOf': ['dyadic comparison operation']}\nGenerated CQs:", "output": "Which operations are recognized as specializations of dyadic comparison operation, such as in order operation? | What broader operation types encompass in order operation? | Does in order operation fall under the category of dyadic comparison operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: isEmpty operation\nDescription: isEmpty operation is defined as a subclass of boolean operation. This indicates that it represents a type of boolean operation, specifically one that evaluates a condition and returns a boolean value. No further restrictions or characteristics are provided by the axiom, so its primary purpose within the ontology is to serve as a specialized form of boolean operation.\nAxiom: {'subClassOf': ['boolean operation']}\nGenerated CQs:", "output": "Are all isEmpty operations classified under the category of boolean operations? | Which operations are considered specializations of boolean operation, such as isEmpty operation? | What broader operation categories encompass isEmpty operation within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: nonNegative operation\nDescription: nonNegative operation is a subclass of boolean operation. Any instance of nonNegative operation is, by definition, a type of boolean operation, inheriting all related properties and constraints. This classification indicates that nonNegative operation participates in logical or truth-value manipulations typical of boolean operations, but may have additional distinguishing characteristics defined outside of the given axioms.\nAxiom: {'subClassOf': ['boolean operation']}\nGenerated CQs:", "output": "Which operations are more specific instances of boolean operation, such as nonNegative operation? | To which broader operation types does nonNegative operation belong? | Is every nonNegative operation encompassed within the category of boolean operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SetOf:set\nDescription: SetOf:set is defined as a subclass of boolean operation, indicating that it represents a form of operation consistent with the principles of Boolean logic. Members of this class inherit properties and constraints applicable to boolean operations. No further description is provided, so the class is formally understood as a type of boolean operation.\nAxiom: {'subClassOf': ['boolean operation']}\nGenerated CQs:", "output": "Does SetOf:set represent a subclass within the domain of boolean operation? | Which boolean operations include SetOf:set as a more specific category? | What are the more general classes that SetOf:set belongs to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: negate operation\nDescription: negate operation is defined as a subclass of monadic operation, meaning it represents an operation that acts on a single operand. As a monadic operation, negate operation typically involves transforming or inverting the value of its sole input.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Which types of operations are classified as specializations of monadic operation, including negate operation? | To which higher-level operation classes does negate operation pertain? | Is every negate operation encompassed within the category of monadic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: promote operation\nDescription: promote operation is classified as a subclass of monadic operation. This indicates that promote operation is an operation involving a single operand or argument, inheriting all characteristics associated with monadic operations. No further distinguishing features or constraints are specified beyond its classification within this hierarchy.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What specific operations are subclasses of monadic operation, including promote operation? | Which broader categories encompass promote operation? | Does promote operation fall under the general category of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: serialize operation\nDescription: serialize operation is defined as a subclass of monadic operation. This means every serialize operation is, by definition, a type of monadic operation, inheriting its general behaviors and properties. There are no additional restrictions or relationships specified.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What specific types of monadic operation include serialize operation as a subclass? | Which general operation categories encompass serialize operation? | Is serialize operation classified under the broader category of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: successor operation\nDescription: successor operation is defined as a subclass of monadic operation. This means that every successor operation is a type of operation that acts on a single argument. No additional restrictions or characteristics are specified, so the class inherits all properties of monadic operations.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What higher-level operation categories does successor operation belong to? | Which specific operations fall under the more general category of monadic operation, such as successor operation? | Is successor operation included in the set of operations classified as monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cast:choice\nDescription: Cast:choice is defined as a subclass of monadic operation, indicating that it inherits all characteristics of monadic operations. This classification ensures that any instance of Cast:choice is considered a specific type of monadic operation, although further distinguishing properties or restrictions are not specified in the given axioms or description.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "To which more general operation classes does Cast:choice belong? | Which operations are classified as specializations of monadic operation, such as Cast:choice? | Does Cast:choice fall under the category of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Dereference:pointer\nDescription: Dereference:pointer is defined as a subclass of monadic operation. This means it represents a specific kind of monadic operation, typically referring to an action that takes a single operand and retrieves the value or object being pointed to by a pointer. Individuals of this class inherently possess the characteristics and constraints of monadic operations.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What general operation categories encompass Dereference:pointer? | Is Dereference:pointer categorized as a type of monadic operation? | Which specific operations are subclasses of monadic operation, such as Dereference:pointer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Discriminant:choice\nDescription: Discriminant:choice is defined as a subclass of monadic operation, indicating that it represents a specific type of operation that acts upon a single operand or input. No further restrictions or disjointness axioms are specified, so it inherits all characteristics of monadic operation while introducing the notion of 'choice' as its distinguishing feature.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Which concepts are more specifically classified than monadic operation, for example, Discriminant:choice? | Is Discriminant:choice categorized under the broader concept of monadic operation? | To what higher-level operational categories does Discriminant:choice belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Extend:time&date\nDescription: Extend:time&date is defined as a subclass of monadic operation, indicating that it represents a single-argument operation within the ontology. No further restrictions or characteristics are specified beyond its placement in the class hierarchy as a specialized form of monadic operation.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What broader category does Extend:time&date belong to within the classification of operations? | Which operations are included as subclasses under monadic operation, such as Extend:time&date? | Is Extend:time&date a specific type of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Invoke:procedure\nDescription: Invoke:procedure is defined as a subclass of monadic operation, indicating that it represents a specific type of operation with a single argument or operand. This classification situates Invoke:procedure within the hierarchy of operations, emphasizing its functionality as a specialized, unary process. No further restrictions or disjoint relationships are specified.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What specific operations are included as subclasses of monadic operation, such as Invoke:procedure? | Is Invoke:procedure categorized under the broader class of monadic operation? | Which more general concepts is Invoke:procedure classified under within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Not:boolean\nDescription: Not:boolean is defined as a subclass of monadic operation, indicating that it is a single-argument logical operation. Members of this class represent logical operations that act on one boolean input to produce a boolean output, specifically performing logical negation.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What are the more general operation types that encompass Not:boolean? | Does Not:boolean fall under the category of monadic operation? | Which operations are classified as subclasses of monadic operation, including Not:boolean? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: monadic aritmetic operation\nDescription: monadic arithmetic operation is defined as a subclass of monadic operation. This means any instance of this class is a monadic operation (an operation with a single operand) specifically within the domain of arithmetic. It inherits all characteristics of monadic operations, restricted to those that perform arithmetic functions. No additional distinguishing axioms or constraints are currently specified.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Is monadic arithmetic operation a specific kind of monadic operation? | Which operations are direct specializations of monadic operation, such as monadic arithmetic operation? | To which broader categories does monadic arithmetic operation belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: monadic retrive operation\nDescription: monadic retrieve operation is defined as a subclass of monadic operation. This means every monadic retrieve operation is a type of monadic operation, inheriting all its characteristics. No further property or restriction axioms are specified, so its definition is limited to this hierarchical relationship.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Which specific operations are encompassed by the category monadic operation, such as monadic retrive operation? | Is monadic retrive operation classified within the broader group of monadic operation? | What more general types does monadic retrive operation fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: map operation\nDescription: map operation is defined as a subclass of monadic operation. This indicates that every map operation is itself a type of monadic operation, inheriting its general properties. The map operation typically represents an action that applies a given function to each element within a structure (such as a list, set, or collection), producing a new structure of the same form with the results. No additional constraints or disjointness axioms are specified.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What more general types include map operation as a member within their hierarchy? | Does map operation fall under the category of monadic operation? | Which operations are classified as specializations of monadic operation, such as map operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boolean operation\nDescription: boolean operation is defined as a subclass of monadic operation. This indicates that every boolean operation is a kind of monadic operation, typically involving a single argument and producing a boolean output (true or false). The class encompasses operations that act on one operand and yield a binary (boolean) result.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Into which broader operation classes does boolean operation fall? | Which operation types are defined as more specific forms within monadic operation, such as boolean operation? | Is every boolean operation classified as a type of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: reciprocial operation\nDescription: reciprocal operation is formally defined as a subclass of monadic arithmetic operation, meaning it is an arithmetic operation that acts on a single operand. This class captures operations whose primary purpose is to return the multiplicative inverse (reciprocal) of their input value.\nAxiom: {'subClassOf': ['monadic aritmetic operation']}\nGenerated CQs:", "output": "Is every reciprocial operation classified under monadic aritmetic operation? | What types of operations are subsumed by monadic aritmetic operation, specifically including reciprocial operation? | Which broader arithmetic operation categories encompass reciprocial operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: round operation\nDescription: round operation is defined as a subclass of monadic arithmetic operation. This means every round operation acts on a single numerical input to produce its output, characterizing it as a unary arithmetic process, such as rounding a number to the nearest integer.\nAxiom: {'subClassOf': ['monadic aritmetic operation']}\nGenerated CQs:", "output": "Is round operation categorized as a type of monadic aritmetic operation? | To which broader operation classes does round operation conceptually relate? | Which operations are classified under monadic aritmetic operation, including round operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SquareRoot:complex\nDescription: SquareRoot:complex is defined as a subclass of monadic arithmetic operation, indicating that it represents an arithmetic operation involving only one operand (monadic) in the context of complex numbers. This class formalizes the concept of computing the square root specifically within the domain of complex arithmetic.\nAxiom: {'subClassOf': ['monadic aritmetic operation']}\nGenerated CQs:", "output": "Which operations are subclasses of monadic aritmetic operation, such as SquareRoot:complex? | Is SquareRoot:complex classified as a specific kind of monadic aritmetic operation? | What more general categories encompass SquareRoot:complex in the context of arithmetic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: monadic select operation\nDescription: monadic select operation is defined as a subclass of monadic retrieve operation. This means every monadic select operation is a type of monadic retrieve operation, inheriting its essential characteristics. No additional property restrictions or disjointness constraints are specified; thus, its definition is strictly as a specialized form of monadic retrieve operation with no further distinguishing axioms.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "To which parent operation class does monadic select operation belong? | Which operations fall under the specialization of monadic retrive operation, such as monadic select operation? | Is monadic select operation categorized as a kind of monadic retrive operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AttributeFunctionInvocation:class\nDescription: AttributeFunctionInvocation:class is defined as a subclass of monadic retrieve operation. This indicates that any instance of AttributeFunctionInvocation:class inherits the characteristics of a monadic retrieve operation, meaning it represents an operation that retrieves a value based on a single operand or argument. The class is intended to capture invocations related to retrieving attributes in a functional, monadic manner.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "Is AttributeFunctionInvocation:class classified under the general category of monadic retrieve operation? | Which specialized forms of monadic retrive operation exist, including AttributeFunctionInvocation:class? | What broader operation categories encompass AttributeFunctionInvocation:class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AttributeSelect:class\nDescription: AttributeSelect:class is defined as a subclass of monadic retrieve operation. This means that any instance of AttributeSelect:class represents a specific type of retrieval operation that acts on a single operand to extract or select an attribute. By inheriting from monadic retrieve operation, AttributeSelect:class is characterized by supporting retrieval actions that involve one input and are focused on obtaining attribute-level data.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "Which operations encompass AttributeSelect:class as a specific type within monadic retrieve operations? | Is AttributeSelect:class classified under monadic retrieve operation? | To what broader categories related to retrieval does AttributeSelect:class belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FieldSelect:record\nDescription: FieldSelect:record is defined as a subclass of monadic retrieve operation, meaning it represents a specialized form of retrieval operation within a monadic (single-argument or single-result) context. No additional restrictions or properties are specified, so any instance of FieldSelect:record is also an instance of monadic retrieve operation, inheriting all its characteristics.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "What more general operations does FieldSelect:record inherit properties from? | Is FieldSelect:record classified as a specialized form of monadic retrive operation? | Which monadic retrive operation subclasses encompass FieldSelect:record? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Head:sequence\nDescription: Head:sequence is defined as a subclass of monadic retrieve operation. This means that every instance of Head:sequence is also considered a monadic retrieve operation, inheriting its fundamental characteristics and constraints. The class does not specify additional axioms or restrictions beyond this hierarchical relationship.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "Does Head:sequence fall under the broader classification of monadic retrive operation? | Which operations are considered more specific variants of monadic retrive operation, such as Head:sequence? | To which general operational categories does Head:sequence belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Tail:sequence\nDescription: Tail:sequence is defined as a subclass of monadic retrieve operation. This classification means that any individual instance of Tail:sequence is also a type of monadic retrieve operation, inheriting its foundational characteristics. In the absence of further description or additional axioms, Tail:sequence is interpreted as a specific kind of retrieval operation within a monadic context, implying it operates under the rules and structure of monads—commonly used in functional programming and computational logic for chaining operations.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "What broader operation categories include Tail:sequence? | Does Tail:sequence fall under the category of monadic retrive operation? | Which operations are considered more specific forms of monadic retrive operation, such as Tail:sequence? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: countable\nDescription: countable is defined as a subclass of cardinality, indicating that it represents a specific type of cardinality. Members of the countable class are characterized by having a cardinality that can be matched with the set of natural numbers, distinguishing them from other forms of cardinality.\nAxiom: {'subClassOf': ['cardinality']}\nGenerated CQs:", "output": "Is every countable entity also classified under cardinality? | Which types are included under the broader category of cardinality, including countable? | To which general concepts does the class countable belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: finite\nDescription: finite is a subclass of cardinality, indicating that it represents the concept of cardinalities that are limited or bounded. Any individual classified as finite is, by definition, also a cardinality but with the additional constraint that its size is not infinite.\nAxiom: {'subClassOf': ['cardinality']}\nGenerated CQs:", "output": "Is finite categorized under the broader concept of cardinality? | What are the more general classes associated with finite? | Which subtypes are encompassed by cardinality, including finite? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: uncountable\nDescription: uncountable is defined as a subclass of cardinality, indicating that it represents a specific type of cardinality. Members of the uncountable class are those cardinalities that cannot be placed into a one-to-one correspondence with the natural numbers, distinguishing them from countable cardinalities.\nAxiom: {'subClassOf': ['cardinality']}\nGenerated CQs:", "output": "Does uncountable represent a more specific form under the general concept of cardinality? | Into which broader classes does uncountable fall within the cardinality hierarchy? | What types of cardinality include uncountable as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bounded below\nDescription: bounded below is a subclass of bounded, representing entities that possess the property of being bounded in a particular way—specifically, from below. Any member of bounded below is, by definition, also a member of bounded.\nAxiom: {'subClassOf': ['bounded']}\nGenerated CQs:", "output": "Which concepts are more specific than bounded, such as bounded below? | Is every instance of bounded below also an instance of bounded? | What broader categories does bounded below belong to within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unbounded below\nDescription: unbounded below is defined as a subclass of unbounded, meaning every instance of unbounded below is also an instance of unbounded. This class represents entities that specifically possess the characteristic of being unbounded on their lower side or extent, while inheriting all properties and restrictions from the broader unbounded class.\nAxiom: {'subClassOf': ['unbounded']}\nGenerated CQs:", "output": "What specific concepts are considered subclasses of unbounded, such as unbounded below? | Is unbounded a broader class that encompasses unbounded below? | Which higher-level categories include unbounded below? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unbounded\nDescription: unbounded is defined as a subclass of boundedness. This indicates that unbounded is a specific type or form of boundedness, and any instance of unbounded is also considered an instance of boundedness. No additional property restrictions or disjointness axioms are specified, so the class is distinguished solely by its hierarchical relation.\nAxiom: {'subClassOf': ['boundedness']}\nGenerated CQs:", "output": "Which subclasses fall under the category of boundedness, including unbounded? | To which more general categories does unbounded belong? | Is unbounded a specialized concept within the broader class of boundedness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: exact\nDescription: exact is defined as a subclass of exactness, indicating that any instance of exact exhibits all characteristics associated with exactness. No additional constraints or distinguishing axioms are specified for this class.\nAxiom: {'subClassOf': ['exactness']}\nGenerated CQs:", "output": "Which classes are subsumed by exactness, including exact? | Under which broader categories does exact fall within the ontology? | What is the hierarchical connection between exact and exactness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-numeric\nDescription: non-numeric is defined as a subclass of numericalness, indicating that every instance of non-numeric falls under the broader concept of numericalness. This class is intended to capture entities that are related to numericalness but are explicitly characterized by the absence of numeric value or representation.\nAxiom: {'subClassOf': ['numericalness']}\nGenerated CQs:", "output": "Does non-numeric fall under the broader classification of numericalness? | What are the broader categories that non-numeric is a part of within this ontology? | Which subclasses does numericalness encompass, specifically including non-numeric? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-ordered\nDescription: non-ordered is defined as a subclass of order. This means that every instance of non-ordered is also an instance of order, but represents a specialized form or category within the broader concept of order. No additional property restrictions or disjointness axioms are specified, so the class is distinguished solely by its hierarchical position as a subclass.\nAxiom: {'subClassOf': ['order']}\nGenerated CQs:", "output": "Which broader types encompass non-ordered within the ontology structure? | What categories fall under order as subclasses, including non-ordered? | Can non-ordered be classified under the concept of order? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:complex\nDescription: Add:complex is defined as a subclass of add operation, indicating that it represents a specific form of addition within the broader category of add operations. This formalization establishes that every instance of add:complex is also inherently an add operation, possibly specialized for use with complex numbers or structures, depending on further specification.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "output": "Which types of add operation include Add:complex as a specialization? | What broader classes encompass Add:complex within the ontology? | Does Add:complex fall under the category of add operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:integer\nDescription: Add:integer is defined as a subclass of add operation, indicating that it specifically represents addition operations where the operands are integers. Any individual that is an instance of Add:integer is inherently an add operation, but specialized for use with integer values.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "output": "Which broader groups encompass Add:integer within the classification hierarchy? | What operations are more specific than add operation, including Add:integer? | Is Add:integer categorized under add operation in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:rational\nDescription: Add:rational is defined as a subclass of add operation, indicating that it represents a specialized type of addition focused on rational numbers. This class inherits all characteristics of add operations and is formally distinguished as pertaining to the addition of rational values.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "output": "What kinds of add operation exist as subclasses, such as Add:rational? | Is add operation a broader class encompassing Add:rational? | Which general classification does Add:rational fall under in the context of operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:real\nDescription: Add:real is defined as a subclass of add operation. This means that every instance of Add:real is an add operation, specifically focused on real numbers. The class inherits all the characteristics of generic add operations, but may specify additional constraints or behaviors relevant to addition in the domain of real numbers. No further restrictions or disjointness axioms are asserted.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "output": "What operations fall under the subclass Add:real within add operation? | Is Add:real categorized as a type of add operation? | Which parent concepts encompass Add:real? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:scaled\nDescription: scaled is defined as a subclass of add operation. This means that any scaled operation is recognized as a specific type of add operation, inheriting all characteristics of add operations while potentially introducing its own specialized behavior or constraints. No further disjointness or property restrictions are specified for this class.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "output": "Is add:scaled categorized as a specialized form of add operation? | What broader operations include add:scaled as a member? | Which subtypes are encompassed by add operation, including add:scaled? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Delete:table\nDescription: Delete:table is defined as a subclass of delete operation. This means that every instance of Delete:table is a specific type of delete operation, inheriting all characteristics of delete operations, and representing deletion actions applied at the table level.\nAxiom: {'subClassOf': ['delete operation']}\nGenerated CQs:", "output": "Is Delete:table categorized under delete operation? | Which operations are classified as subtypes of delete operation, such as Delete:table? | What broader operation category encompasses Delete:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Difference:time&date\nDescription: Difference:time&date is defined as a subclass of difference operation. This class represents operations specifically focused on calculating the difference between temporal values such as times or dates, distinguishing it from other types of difference operations. Members of this class inherit all properties and constraints associated with difference operations, but are restricted to application within time and date contexts.\nAxiom: {'subClassOf': ['difference operation']}\nGenerated CQs:", "output": "Is Difference:time&date categorized as a type of difference operation? | Which higher-level operations does Difference:time&date fall under within the ontology? | What difference operations have Difference:time&date as a more specific subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Select:table\nDescription: Select:table is defined as a subclass of dyadic select operation, indicating that it represents a specific type of select operation involving two inputs or components. This class inherits all the characteristics and constraints of dyadic select operations, and any instance of Select:table is, by definition, also an instance of a dyadic select operation. No additional restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['dyadic select operation']}\nGenerated CQs:", "output": "Which higher-level categories does Select:table fall under within the ontology? | Is Select:table classified as a type of dyadic select operation? | What are the specific select operations categorized under dyadic select operation, such as Select:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:array\nDescription: Equal:array is defined as a subclass of equal operation. This means Equal:array represents a specific type of equality operation, typically involving arrays, and inherits all the general characteristics of equal operations. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which operations are specified as subclasses within equal operation? | Is Equal:array classified under equal operation in the ontology? | What broader operation categories include Equal:array as a specialized form? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:bag\nDescription: Equal:bag is defined as a subclass of equal operation, indicating that it represents a specific type of equality evaluation or operation. Any instance of Equal:bag inherits all characteristics of equal operation, positioning it within the broader context of equality comparisons. There are currently no additional restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which higher-level operation categories encompass Equal:bag? | Is Equal:bag classified under the category of equal operation? | What specific operations are subsumed by equal operation, including Equal:bag? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:boolean\nDescription: Equal:boolean is a subclass of equal operation, representing operations that specifically check or enforce equality between two boolean values. Any individual of this class is an instance of an equal operation, with its domain restricted to boolean-type operands.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which concepts are classified as more specific versions under equal operation, including Equal:boolean? | Into which broader categories can Equal:boolean be grouped? | Does Equal:boolean represent a specialized type of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:character\nDescription: Equal:character is defined as a subclass of equal operation. This means every instance of Equal:character represents a specific kind of equality operation, likely focused on comparing characters. Since it inherits all characteristics of equal operation, Equal:character is used where character equality checks are required.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Is Equal:character classified as a kind of equal operation? | What are the parent classes for Equal:character within the ontology? | Which specific operations fall under the category of equal operation, such as Equal:character? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:choice\nDescription: Equal:choice is a subclass of equal operation, indicating that each instance of Equal:choice is a specialized form of equal operation. No additional restrictions, disjointness, or property constraints are defined for this class, so its characterization is derived solely from its position in the class hierarchy.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Is Equal:choice classified under the broader category of equal operation? | What more general categories encompass Equal:choice within the ontology? | Which operations are considered specializations of equal operation, including Equal:choice? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:class\nDescription: Equal:class is defined as a subclass of equal operation, indicating that every instance of Equal:class is a specific type of equal operation. This formalization ensures that any individual classified as Equal:class must also satisfy the properties and constraints of equal operations within the ontology.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which specific types are classified beneath equal operation, including Equal:class? | Is Equal:class categorized under equal operation? | What operations are broader in scope than Equal:class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:complex\nDescription: Equal:complex is defined as a subclass of equal operation. This means that every instance classified as Equal:complex is, by definition, also an instance of equal operation. No further distinguishing axioms or restrictions are specified for this class beyond its hierarchical placement.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Is Equal:complex categorized under equal operation? | Which equal operations have more specific types such as Equal:complex? | What broader operation classes encapsulate Equal:complex? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:enumerated\nDescription: Equal:enumerated is defined as a subclass of equal operation. This indicates that every instance of Equal:enumerated represents a specific kind of equal operation, inheriting all characteristics of equal operation while potentially introducing further constraints or properties relevant to enumerated equality.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "To what more general operation classes does Equal:enumerated belong? | Does Equal:enumerated represent a specialized form of equal operation? | Which operations are classified as subtypes under equal operation, including Equal:enumerated? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:integer\nDescription: Equal:integer is defined as a subclass of equal operation, indicating that it represents a specialized type of equality operation specifically applied to integers. Any instance of Equal:integer is inherently an equal operation, but it is characterized by its restriction to operands of the integer type.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which subclasses are encompassed by equal operation, such as Equal:integer? | What more general classes include Equal:integer within their hierarchy? | Is Equal:integer categorized under the broader class of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:ordinal\nDescription: Equal:ordinal is defined as a subclass of equal operation, indicating that it specifically represents equality operations within the context of ordinal numbers or positions. Instances of this class inherit all properties of equal operations but are semantically restricted to comparisons involving ordinality.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "What parent operation categories does Equal:ordinal pertain to? | Does Equal:ordinal fall under the category of equal operation? | Which specific operations are specialized forms of equal operation, such as Equal:ordinal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:pointer\nDescription: Equal:pointer is defined as a subclass of equal operation. This means it inherits all characteristics of an equal operation and represents a specific form or type of equality operation within the ontology. There are no further restrictions or differentiating axioms provided, so it can be broadly understood as any equality operation that is categorized or implemented as a \"pointer.\"\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "What specific operations are subclasses of equal operation, including Equal:pointer? | To which higher-level operation types does Equal:pointer belong? | Does Equal:pointer fall under the category of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:procedure\nDescription: Equal:procedure is defined as a subclass of equal operation, indicating that it represents a specific type of equal operation. All instances of Equal:procedure inherit the characteristics and constraints of equal operations. No additional restrictions or properties are specified beyond this subclass relationship.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "What broader classes encompass Equal:procedure within the hierarchy? | Which equal operations have more specific subclasses such as Equal:procedure? | Does Equal:procedure represent a specific type of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:rational\nDescription: Equal:rational is defined as a subclass of equal operation. This means every instance of Equal:rational is also an instance of equal operation, inheriting its properties and characteristics. This class specifically represents the application of equality within the context of rational values, distinguishing it from other types of equal operations.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which operations are categorized as more specific types within equal operation, such as Equal:rational? | To which more general operation classes does Equal:rational belong? | Does Equal:rational fall under the broader concept of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:real\nDescription: Equal:real is defined as a subclass of equal operation, representing equality operations that specifically pertain to real numbers. Any instance of Equal:real is an equal operation, and this class captures the concept of evaluating or asserting equality within the domain of real numbers.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which specific equal operations include Equal:real as a subclass? | What are the broader categories under which Equal:real is organized? | Is Equal:real classified as a kind of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:record\nDescription: Equal:record is defined as a subclass of equal operation, indicating that it represents a specialized form of comparison operation focused on evaluating equality. All instances of Equal:record inherit the characteristics and constraints associated with equal operations.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which entities are direct specializations of equal operation, such as Equal:record? | Does Equal:record fall under the broader class of equal operation? | What general concepts encompass Equal:record in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:scaled\nDescription: Equal:scaled is defined as a subclass of equal operation, meaning it inherits all characteristics of equal operations. This class represents a specific type of equal operation, but is further specialized under the general category of equality operations. There are no additional restrictions or disjointness axioms specified.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which operations are included as subclasses within equal operation, such as Equal:scaled? | To what broader operation categories does Equal:scaled belong according to the ontology? | Is Equal:scaled categorized under equal operation in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:sequence\nDescription: Equal:sequence is defined as a subclass of equal operation, indicating that it represents a specific type of equality operation. Any instance of Equal:sequence is thus an equal operation, inheriting its general characteristics and semantic constraints. No additional restrictions or disjointness axioms are specified, so its primary distinguishing feature is its specialization within the equal operation hierarchy.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which specific operations are categorized as equal operations, such as Equal:sequence? | Does Equal:sequence fall under the category of equal operation? | What broader categories include Equal:sequence as a more specific subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:set\nDescription: Equal:set is defined as a subclass of equal operation. This means that every instance of Equal:set is a type of equal operation, inheriting all characteristics and properties of equal operations. No further constraints or disjointness are specified, so its primary ontological role is to represent a specific kind or subset of equal operations.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which operations are broader in scope than Equal:set under equal operation? | Is Equal:set classified as a subclass within equal operation? | What specific subcategories are encompassed by equal operation, including Equal:set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:discrete\nDescription: Equal:discrete is a subclass of equal operation, representing a specific type of equality operation within the ontology. Any instance classified as Equal:discrete inherently possesses all characteristics of equal operation, but denotes a discrete (distinct and separate) form of equality as opposed to potentially other forms covered under the broader parent class.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Is Equal:discrete classified under the general category of equal operation? | What are the broader operation categories encompassing Equal:discrete? | Which operations are considered specific types within equal operation, such as Equal:discrete? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:table\nDescription: Equal:table is defined as a subclass of equal operation, indicating that it represents a specific type of equal operation within the ontology. There are no further restrictions or disjointness axioms provided, so its characteristics are inherited entirely from equal operation. This formalization ensures that every instance of Equal:table is also considered an instance of equal operation.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Does Equal:table fall under the category of equal operation? | What overarching categories does Equal:table belong to within the ontology? | Which operations are subcategories of equal operation, specifically including Equal:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:time&date\nDescription: Equal:time&date is defined as a subclass of equal operation. This class represents equality operations specifically applied to time and date values, inheriting all characteristics of general equal operations while restricting its domain to temporal data. There are no additional property restrictions or disjointness axioms specified.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Is equal:time&date classified as a type of equal operation? | Which specific operations are categorized under equal operation, such as equal:time&date? | What broader operational categories encompass equal:time&date? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:void\nDescription: Equal:void is defined as a subclass of equal operation, indicating that it represents a specific type of equality operation within the ontology. Instances of Equal:void inherit all characteristics of equal operation but are further specialized to reflect this subclass distinction. No additional constraints or property restrictions are present.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which concepts are included as narrower types under equal operation, such as Equal:void? | Does Equal:void represent a specialized form of equal operation? | Of which broader categories is Equal:void a member in relation to equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:enumerated\nDescription: InOrder:enumerated is defined as a subclass of in order operation. This indicates that it inherits all characteristics of in order operations, and further restricts its members to those specifically classified as InOrder:enumerated. No additional disjointness or property restrictions are specified.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Which specialized operations are classified as in order operation, including InOrder:enumerated? | Does InOrder:enumerated fall under the category of in order operation? | What broader operational classifications include InOrder:enumerated as a subtype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:interger\nDescription: InOrder:integer is defined as a subclass of in order operation. This means every instance of InOrder:integer is also an instance of in order operation, inheriting its properties and characteristics. No additional restrictions or properties are specified.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Does InOrder:integer represent a specific kind of in order operation? | What broader categories does InOrder:integer fall under within in order operation? | Which in order operation subclasses include InOrder:integer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:ordinal\nDescription: InOrder:ordinal is defined as a subclass of in order operation, meaning every instance of InOrder:ordinal is also an instance of in order operation. This class captures operations that are performed in a specific, sequential order, consistent with the broader concept of ordered computational procedures.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Is in order operation a broader category that includes InOrder:ordinal as a specific type? | What are all the subclasses under in order operation, and does that list include InOrder:ordinal? | Which general operations is InOrder:ordinal classified under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:rational\nDescription: InOrder:rational is defined as a subclass of in order operation. This means every instance of InOrder:rational is also an instance of in order operation, inheriting its essential properties and behavioral constraints. There are currently no additional property restrictions or disjointness axioms specified for this class, so its definition is primarily characterized by its position within the hierarchy of ordered operations.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Which general operations encompass InOrder:rational as a subclass? | Is InOrder:rational categorized as a type of in order operation? | What in order operations have InOrder:rational as a more specific instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:real\nDescription: InOrder:real is defined as a subclass of in order operation. This means that every instance of InOrder:real is necessarily an in order operation, inheriting all characteristics and constraints of its parent class. No further distinguishing features or restrictions are specified in the current axiom.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Is InOrder:real classified under in order operation? | What specific types are encompassed by in order operation, including InOrder:real? | Which broader categories subsume InOrder:real in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:scaled\nDescription: InOrder:scaled is defined as a subclass of in order operation, indicating that it represents a specialized type of in order operation. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Which upper-level operations encompass InOrder:scaled? | Does InOrder:scaled fall under the category of in order operation? | What are the specific subtypes classified under in order operation, such as InOrder:scaled? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:time&date\nDescription: InOrder:time&date is defined as a subclass of in order operation. This means that every instance of InOrder:time&date is also an instance of in order operation, inheriting all its characteristics and constraints. The class represents a specific type of in order operation that is distinguished within the ontology for handling operations related to time and date.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Is InOrder:time&date recognized as a specific form of in order operation? | Which in order operations include more specialized types such as InOrder:time&date? | To what higher-level categories does InOrder:time&date belong within the hierarchy of in order operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Insert:table\nDescription: Insert:table is defined as a subclass of insert operation, representing a specialized form of data insertion that specifically targets tables. Any individual of Insert:table is by definition an insert operation, but this class serves to distinguish insert actions that are restricted to table-type data structures.\nAxiom: {'subClassOf': ['insert operation']}\nGenerated CQs:", "output": "What broader categories encompass Insert:table as a member? | Is Insert:table classified as a specific form of insert operation? | Which operations are categorized as specializations of insert operation, including Insert:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:complex\nDescription: Multiply:complex is defined as a subclass of multiply operation, indicating that it represents a specialized form of multiplication specifically applicable to certain contexts (such as complex numbers or more advanced multiplicative structures). As a subclass, all characteristics and constraints of multiply operation apply, while distinguishing multiply:complex as a distinct category within the overall multiplication framework. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "output": "Is multiply:complex classified under multiply operation types? | What operations are considered subclasses of multiply operation? | Which higher-level operation categories encompass multiply:complex? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:integer\nDescription: Multiply:integer is defined as a subclass of multiply operation. This class represents multiplication operations specifically involving integer values, inheriting all properties and constraints of general multiplication operations but restricted to the integer domain.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "output": "Within what more general operation types is Multiply:integer included? | Which specialized operations are considered subclasses of multiply operation, such as Multiply:integer? | Is Multiply:integer classified under the broader category of multiply operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:rational\nDescription: Multiply:rational is a subclass of multiply operation. This class represents multiplication operations where the operands are specifically rational numbers, distinguishing it from multiply operations over other numeric domains.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "output": "What multiply operations encompass multiply:rational as a more specific subcategory? | To which general operation types does multiply:rational belong? | Is multiply:rational included among the operations classified as multiply operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:real\nDescription: Multiply:real is defined as a subclass of multiply operation, indicating that it represents multiplication specifically within the domain of real numbers. Any instance of Multiply:real inherits the characteristics and constraints of the general multiply operation, but is restricted in application to real-valued operands.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "output": "Is Multiply:real categorized as a multiply operation? | Into what broader classes is Multiply:real hierarchically organized? | Which multiply operations encompass Multiply:real as a specialized form? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:scaled\nDescription: Multiply:scaled is defined as a subclass of multiply operation. This indicates that it inherits all characteristics of multiply operations while representing a more specific variant or context of multiplication. No additional restrictions or disjointness axioms are specified. Without a current description, its identity is determined solely by its position in the class hierarchy, denoting a specialized type of multiplication operation.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "output": "Is Multiply:scaled categorized as a type of multiply operation? | Which specific multiply operations include Multiply:scaled as a subclass? | What general multiply operation categories encompass Multiply:scaled? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: And:boolean\nDescription: And:boolean is defined as a subclass of dyadic logical operation, indicating that it is a logical operation involving two operands. This class represents the AND operation, commonly used in logic to yield true only when both input values are true.\nAxiom: {'subClassOf': ['dyadic logical operation']}\nGenerated CQs:", "output": "Which logical operations exist as subclasses of dyadic logical operation, And:boolean among them? | Does And:boolean fall under the classification of dyadic logical operation? | What general categories encompass And:boolean within logical operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Or:boolean\nDescription: Or:boolean is defined as a subclass of dyadic logical operation, representing a logical operation that takes two inputs. It corresponds to the Boolean \"or\" operation, where the result is true if at least one of the inputs is true. Members of this class are restricted to binary (dyadic) logic functions operating under the inclusive disjunction principle.\nAxiom: {'subClassOf': ['dyadic logical operation']}\nGenerated CQs:", "output": "What dyadic logical operations include Or:boolean as a specific type? | Which more general logical operation classes encompass Or:boolean? | Does Or:boolean fall under the general category of dyadic logical operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Fetch:table\nDescription: Fetch:table is defined as a subclass of dyadic retrieve operation, indicating that it represents a specific type of retrieve action that involves two entities. As a specialized dyadic retrieve operation, Fetch:table inherits all the relevant characteristics of such operations within the ontology, distinguishing it from other forms of retrieval actions.\nAxiom: {'subClassOf': ['dyadic retrieve operation']}\nGenerated CQs:", "output": "Is Fetch:table recognized as a specific type of dyadic retrieve operation? | Which broader categories encompass Fetch:table as a member? | What operations are classified under dyadic retrieve operation, including Fetch:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Tag:choice\nDescription: Tag:choice is defined as a subclass of dyadic retrieve operation, indicating that it represents a specific retrieval action involving two inputs or arguments. This class is thus characterized by its relation to operations that retrieve or select information based on two distinct pieces of input, inheriting all properties and restrictions applicable to dyadic retrieve operations.\nAxiom: {'subClassOf': ['dyadic retrieve operation']}\nGenerated CQs:", "output": "To which broader operational category does Tag:choice belong? | Is Tag:choice categorized under dyadic retrieve operation? | Which operations fall under the dyadic retrieve operation class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Intersection:set\nDescription: Intersection:set is defined as a subclass of dyadic set operation, signifying that it operates on two sets. This class represents the set operation that yields a set containing all elements that are common to both input sets. As a dyadic set operation, it explicitly requires two sets as operands and produces a new set consisting only of elements present in both.\nAxiom: {'subClassOf': ['dyadic set operation']}\nGenerated CQs:", "output": "What broader categories encompass Intersection:set within the hierarchy of set operations? | Is Intersection:set classified as a type of dyadic set operation? | Which set operations fall under the category of dyadic set operation, including Intersection:set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Lsln:set\nDescription: Lsln:set is formally defined as a subclass of dyadic set operation, indicating that it represents a type of operation involving two sets. No additional constraints or distinguishing characteristics are specified beyond its categorization under dyadic set operations.\nAxiom: {'subClassOf': ['dyadic set operation']}\nGenerated CQs:", "output": "To which higher-level set operation categories does Lsln:set belong? | Is Lsln:set categorized as a type of dyadic set operation? | What specific set operations are subclasses of dyadic set operation, Lsln:set included? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Subset:set\nDescription: Subset:set is defined as a subclass of dyadic set operation, which means it represents a specific type of set operation that involves two sets. Members of this class pertain to operations that determine whether one set is a subset of another, inheriting all formal properties of dyadic set operations.\nAxiom: {'subClassOf': ['dyadic set operation']}\nGenerated CQs:", "output": "Which specialized operations are contained within the class dyadic set operation? | Is Subset:set categorized under the broader class of dyadic set operation? | Into which higher-level set operation categories does Subset:set fall? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Union:set\nDescription: Union:set is defined as a subclass of dyadic set operation, indicating that it represents a type of set operation involving two sets. Members of this class perform the union operation, which combines all distinct elements from both input sets into a single set. This classification situates Union:set within the broader context of binary operations on sets.\nAxiom: {'subClassOf': ['dyadic set operation']}\nGenerated CQs:", "output": "Which set operations are categorized under dyadic set operation, including Union:set? | Is Union:set classified as a kind of dyadic set operation? | To which upper-level operation types does Union:set belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IsEmpty:bag\nDescription: IsEmpty:bag is defined as a subclass of isEmpty operation. This indicates that IsEmpty:bag represents a specific type of isEmpty operation applied to bags, distinguishing it from other isEmpty operations that may apply to different data structures. Any instance of IsEmpty:bag is necessarily an isEmpty operation, constrained in scope to the context of bags.\nAxiom: {'subClassOf': ['isEmpty operation']}\nGenerated CQs:", "output": "Does IsEmpty:bag fall under the broader classification of isEmpty operation? | What operations are more specific variants of isEmpty operation, such as IsEmpty:bag? | To which upper-level operation categories does IsEmpty:bag pertain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IsEmpty:sequence\nDescription: IsEmpty:sequence is defined as a subclass of the isEmpty operation. This class represents operations that are specific forms of isEmpty, likely indicating procedures to determine whether a sequence is empty. By subclassing isEmpty operation, IsEmpty:sequence inherits all properties and constraints associated with isEmpty operations, but is further specialized to apply specifically to sequences.\nAxiom: {'subClassOf': ['isEmpty operation']}\nGenerated CQs:", "output": "Is IsEmpty:sequence categorized as a specialization of the isEmpty operation? | Which operations encompass IsEmpty:sequence as a more specific form? | What broader operation classes does IsEmpty:sequence fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IsEmpty:table\nDescription: IsEmpty:table is defined as a subclass of the isEmpty operation. This means that it represents a specific isEmpty operation applied to tables, inheriting all general properties of isEmpty operations and specializing them for table data structures. Any instance of IsEmpty:table can be understood as an operation that checks or determines whether a table is empty.\nAxiom: {'subClassOf': ['isEmpty operation']}\nGenerated CQs:", "output": "What higher-level operations encompass IsEmpty:table? | Does IsEmpty:table fall under the broader concept of isEmpty operation? | Which operations are classified as subtypes of isEmpty operation, including IsEmpty:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Select:set\nDescription: Select:set is defined as a subclass of monadic select operation, indicating that it represents a specific type of selection operation that acts on a single input or operand. This formalization ensures that any instance of Select:set inherits the properties and constraints associated with monadic select operations. No further distinguishing characteristics or disjointness conditions are specified.\nAxiom: {'subClassOf': ['monadic select operation']}\nGenerated CQs:", "output": "Which higher-level classes encompass Select:set in the ontology? | Does Select:set represent a specific type of monadic select operation? | What kinds of operations fall under the category of monadic select operation, including Select:set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:complex\nDescription: Negate:complex is formally defined as a subclass of negate operation. This indicates that every instance of Negate:complex is a specific type of negate operation, inheriting all properties and constraints associated with negate operations. No additional distinguishing characteristics or property restrictions are specified at this level.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "output": "What higher-level concepts encompass Negate:complex in this ontology? | Is Negate:complex categorized as a subtype of negate operation? | Within the domain of negate operation, which subordinate classes exist aside from Negate:complex? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:integer\nDescription: Negate:integer is defined as a subclass of negate operation. This class represents the operation of taking an integer and producing its additive inverse (negation). Any instance of Negate:integer is a specific case of a negate operation, restricted to the integer domain.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "output": "Which operations are categorized under negate operation, specifically including Negate:integer? | Is Negate:integer a type of negate operation? | What broader classes does Negate:integer belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:rational\nDescription: Negate:rational is defined as a subclass of negate operation. This class represents operations that perform negation specifically within the domain of rational numbers. Any instance of this class is considered a type of negate operation, formally representing the mathematical action of producing the additive inverse of a rational value.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "output": "What are the broader classes that encompass Negate:rational? | Which specific operations are categorized beneath negate operation, such as Negate:rational? | Does Negate:rational fall under the classification of negate operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:real\nDescription: Negate:real is defined as a subclass of the negate operation. This class represents the negation operation as specifically applied to real numbers, inheriting all constraints and characteristics of the more general negate operation category.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "output": "Under which hierarchical categories can Negate:real be grouped? | Does Negate:real fall under the general class of negate operation? | Which operations are classified as specific types of negate operation, including Negate:real? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:scaled\nDescription: Negate:scaled is defined as a subclass of negate operation. This means that every instance of Negate:scaled is a specific type of negate operation, inheriting all properties and restrictions associated with negate operations. The class is intended to represent a specialized negation process, although additional characteristics would depend on further axioms or descriptions.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "output": "What are the general operation types to which Negate:scaled is related? | Which specific operations are categorized as variants of negate operation, such as Negate:scaled? | Does Negate:scaled fall under the broader classification of negate operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NonNegative:rational\nDescription: NonNegative:rational is defined as a subclass of nonNegative operation. This means every instance of NonNegative:rational is also an instance of nonNegative operation, specifically representing rational values or operations constrained to non-negative results. The class formalizes the distinction between all nonNegative operations and those that pertain strictly to rational (i.e., fractional or whole number) non-negative values.\nAxiom: {'subClassOf': ['nonNegative operation']}\nGenerated CQs:", "output": "Which broader operation classes include NonNegative:rational as a member? | Is NonNegative:rational categorized as a type of nonNegative operation? | What specific operations are subclasses under nonNegative operation, such as NonNegative:rational? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Promote:complex\nDescription: Promote:complex is defined as a subclass of promote operation, indicating that every instance of Promote:complex is also an instance of promote operation. This class inherits all the properties and characteristics of promote operation, while potentially introducing additional specificity or constraints unique to Promote:complex.\nAxiom: {'subClassOf': ['promote operation']}\nGenerated CQs:", "output": "Which promote operations have more specific subclasses, such as Promote:complex? | Under which categories of promote operation does Promote:complex fall? | Is Promote:complex an instance within the promote operation hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Promote:rational\nDescription: Promote:rational is defined as a subclass of the promote operation class. This indicates that every instance of Promote:rational is a specific type of promote operation, inheriting all general characteristics of promote operations. No further restrictions, disjointness, or additional axioms are specified for this class.\nAxiom: {'subClassOf': ['promote operation']}\nGenerated CQs:", "output": "What promote operations have Promote:rational as a specific instance or subclass? | Under which broader operation classes does Promote:rational fall? | Is Promote:rational categorized as a subtype of promote operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Promote:real\nDescription: Promote:real is a subclass of promote operation, indicating that it represents a specialized form of promote operation within the ontology. Any individual classified as Promote:real inherits all characteristics and constraints associated with promote operation. No additional distinguishing axioms or restrictions are currently specified for this class.\nAxiom: {'subClassOf': ['promote operation']}\nGenerated CQs:", "output": "What higher-level classes does Promote:real fall under in the promote operation hierarchy? | Which promote operations encompass subtypes such as Promote:real? | Is Promote:real classified under the category of promote operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Reciprocal:rational\nDescription: Reciprocal:rational is defined as a subclass of reciprocal operation. This means every instance of Reciprocal:rational is a specific type of reciprocal operation, typically involving rational numbers. No additional property restrictions or disjointness axioms are specified, so members of this class inherit all general properties of reciprocal operations.\nAxiom: {'subClassOf': ['reciprocial operation']}\nGenerated CQs:", "output": "Is reciprocal:rational classified under the broader category of reciprocial operation? | Which specific operations are categorized as subtypes of reciprocial operation, and does this include reciprocal:rational? | What are the more general operation classes to which reciprocal:rational belongs? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Reciprocal:real\nDescription: Reciprocal:real is defined as a subclass of reciprocal operation. This class represents the operation of finding the reciprocal specifically within the domain of real numbers. Any instance of Reciprocal:real is a kind of reciprocal operation applied to real numbers.\nAxiom: {'subClassOf': ['reciprocial operation']}\nGenerated CQs:", "output": "Which operations are encompassed as more specific types of reciprocial operation, such as Reciprocal:real? | What are the direct parent categories for Reciprocal:real? | Is Reciprocal:real classified under the broader category of reciprocial operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Reciprocal:complex\nDescription: Reciprocal:complex is defined as a subclass of reciprocal operation. This means every instance of Reciprocal:complex is also a reciprocal operation. The class is characterized by operations that involve computing the reciprocal (multiplicative inverse) specifically within the context of complex numbers.\nAxiom: {'subClassOf': ['reciprocial operation']}\nGenerated CQs:", "output": "What specific operations fall under the category of reciprocial operation, including Reciprocal:complex? | Is Reciprocal:complex classified as a subtype of reciprocial operation? | Which broader operation classes does Reciprocal:complex belong to within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Round:time&date\nDescription: Round:time&date is defined as a subclass of round operation. This means that all instances of Round:time&date are specific types of rounding operations that pertain to time and date values. The class captures rounding processes as applied to temporal data, inheriting all general properties of round operations.\nAxiom: {'subClassOf': ['round operation']}\nGenerated CQs:", "output": "Does Round:time&date fall under the category of round operation? | Which broader operations encompass Round:time&date as a subtype? | What specific types are classified as round operation, and does Round:time&date belong to this group? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Serialize:table\nDescription: Serialize:table is defined as a subclass of serialize operation. This indicates that it represents a specific type of serialization process, inheriting all characteristics of a serialize operation but further specializing to handle table data structures. Any individual of Serialize:table is, by axiom, a serialize operation specifically concerned with tables.\nAxiom: {'subClassOf': ['serialize operation']}\nGenerated CQs:", "output": "What kinds of operations fall under the category of serialize operation, specifically including Serialize:table? | Is Serialize:table categorized as a type of serialize operation? | Which more general operation types encompass Serialize:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Successor:ordinal\nDescription: Successor:ordinal is a subclass of successor operation, representing those operations specifically associated with generating the next ordinal in a well-ordered sequence. Members of this class perform the function of yielding the immediate successor ordinal, as formalized within the framework of ordinal arithmetic.\nAxiom: {'subClassOf': ['successor operation']}\nGenerated CQs:", "output": "Which subclasses are encompassed within the category of successor operation, including Successor:ordinal? | To what broader parent classes does Successor:ordinal belong in the ontology? | Is Successor:ordinal classified as a specific type of successor operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MapToBag:table\nDescription: MapToBag:table is a subclass of map operation, representing a specific type of mapping operation. This class inherits all characteristics of map operations and specifies entities that perform mapping tasks in a tabular context.\nAxiom: {'subClassOf': ['map operation']}\nGenerated CQs:", "output": "What broader operations is MapToBag:table categorized under according to the ontology? | Is MapToBag:table classified under map operation in the ontology? | Which specific operations are included as subclasses of map operation, such as MapToBag:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MapToTable:table\nDescription: MapToTable:table is defined as a subclass of map operation, indicating that it inherits all characteristics of map operations. This class represents a specific type of mapping process with the intended outcome or function directly associated with tables. Individuals of this class are specialized map operations that result in or involve tables as part of their output or transformation.\nAxiom: {'subClassOf': ['map operation']}\nGenerated CQs:", "output": "What broader concepts does MapToTable:table relate to in this context? | Is MapToTable:table classified as a kind of map operation? | Which operations fall under the category of map operation, including MapToTable:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Replace:array\nDescription: Replace:array is defined as a subclass of n-adic operation, signifying that it represents an operation which can take an arbitrary number of arguments. Individuals of this class inherit all properties and constraints associated with n-adic operations, and the class serves to specify operations that involve the replacement of elements within arrays or similar data structures. No further characteristics or constraints are specified beyond its position in the class hierarchy.\nAxiom: {'subClassOf': ['n-adic operation']}\nGenerated CQs:", "output": "Is Replace:array classified as a type of n-adic operation? | What are the specific subtypes of n-adic operation, including Replace:array? | Which broader categories encompass Replace:array? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Empty:bag\nDescription: Empty:bag is defined as a subclass of niladic operation, indicating that it represents an operation which does not require any arguments or inputs. This class models entities or operations that, by their formal definition, do not take parameters.\nAxiom: {'subClassOf': ['niladic operation']}\nGenerated CQs:", "output": "Is Empty:bag classified under niladic operation? | Which operations fall under the category of niladic operation, including Empty:bag? | What higher-level operation categories does Empty:bag belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Empty:sequence\nDescription: Empty:sequence is defined as a subclass of niladic operation, indicating that it represents a special operation that does not take any arguments or inputs. This class characterizes sequences that are inherently empty and do not exhibit any elements or content, consistent with the semantics of niladic operations in formal systems.\nAxiom: {'subClassOf': ['niladic operation']}\nGenerated CQs:", "output": "Is Empty:sequence classified under the category of niladic operation? | Which operations are subclasses of niladic operation, including Empty:sequence? | Which more general operation categories encompass Empty:sequence? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Empty:set\nDescription: Empty:set is defined as a subclass of niladic operation. This means that an empty set inherits all characteristics of niladic operations, which are operations that do not require any operands. The classification suggests that empty:set is conceptualized in an operational framework where no input or elements are involved.\nAxiom: {'subClassOf': ['niladic operation']}\nGenerated CQs:", "output": "Is Empty:set categorized as a type of niladic operation? | What broader classes encompass Empty:set within the hierarchy of niladic operations? | Which specific niladic operations include Empty:set as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Empty:table\nDescription: Empty:table is defined as a subclass of niladic operation, indicating that it represents an operation or entity that does not take any input arguments. As a specific type of niladic operation, Empty:table is characterized by being an operation without operands, typically used to denote or construct an empty table structure within its context.\nAxiom: {'subClassOf': ['niladic operation']}\nGenerated CQs:", "output": "Which niladic operations have Empty:table as a more specific type? | What broader operation categories encompass Empty:table? | Does Empty:table fall under the category of niladic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: key access\nDescription: key access is defined as a subclass of direct access property, meaning it inherits all characteristics of direct access property while representing a more specific type. Members of the key access class pertain to properties or relationships that enable or characterize direct forms of access, distinguished from other access mechanisms by their explicit subclass designation.\nAxiom: {'subClassOf': ['direct access property']}\nGenerated CQs:", "output": "What are the more general property types that encompass key access? | Which access properties fall under the category of direct access property, including key access? | Is key access classified as a direct access property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: access by value\nDescription: access by value is defined as a subclass of indirect access property, indicating that it represents a specific type of indirect access. Any individual classified as access by value inherits all the characteristics of indirect access property, typically referring to situations where access is achieved through the value rather than the reference or pointer itself.\nAxiom: {'subClassOf': ['indirect acess property']}\nGenerated CQs:", "output": "Is access by value categorized under indirect access property? | What more general properties include access by value as a specialization? | Which types of properties fall within the scope of indirect access property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: implementation dependent access\nDescription: implementation dependent access is defined as a subclass of indirect access property, indicating that it inherits all characteristics of indirect access property. This means any instance of implementation dependent access is also considered an indirect access property, but with specific details or constraints determined by the particular implementation. There is no further specification beyond its placement in the class hierarchy.\nAxiom: {'subClassOf': ['indirect acess property']}\nGenerated CQs:", "output": "Which access properties are more specific than indirect access property, such as implementation dependent access? | To which broader types does implementation dependent access conceptually relate? | Does implementation dependent access fall within the category of indirect access property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: position access\nDescription: position access is defined as a subclass of indirect access property, indicating that it represents a type of access property that is not direct but mediated through some intermediary or reference. All instances of position access therefore inherit the characteristics and constraints associated with indirect access property.\nAxiom: {'subClassOf': ['indirect acess property']}\nGenerated CQs:", "output": "Which properties are subclasses under the indirect access property category? | Is position access a type of indirect access property? | What more general property categories does position access belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unordered aggregate\nDescription: unordered aggregate is a subclass of aggregate imposed ordering. This means every unordered aggregate is an aggregate where some ordering has been considered, but specifically, unordered aggregate refers to those aggregates where the order of the constituents is irrelevant or not specified. No additional disjointness or property restrictions are defined.\nAxiom: {'subClassOf': ['aggregate imposed ordering']}\nGenerated CQs:", "output": "Is aggregate imposed ordering a superclass of unordered aggregate? | To which broader aggregation categories does unordered aggregate belong? | Which specific types of aggregate imposed ordering include unordered aggregate as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: identifier unique\nDescription: identifier unique is defined as a subclass of aggregate-imposed identifier uniqueness. This indicates that any individual or instance of identifier unique inherits all properties and constraints of aggregate-imposed identifier uniqueness, implying that the uniqueness of identifiers is imposed at the aggregate level. Without additional description, this class specifically represents entities for which unique identification is ensured by aggregate-imposed mechanisms.\nAxiom: {'subClassOf': ['aggregate-imposed identifier uniqueness']}\nGenerated CQs:", "output": "Does identifier unique fall under the broader classification of aggregate-imposed identifier uniqueness? | What more general categories encompass identifier unique within the ontology? | Which kinds of identifier uniqueness are specified as subclasses of aggregate-imposed identifier uniqueness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: variable size\nDescription: variable size is defined as a subclass of aggregate size. This specifies that any instance of variable size is also an instance of aggregate size, inheriting all its properties and restrictions. No further distinguishing characteristics or disjointness constraints are specified for variable size beyond its hierarchical relationship.\nAxiom: {'subClassOf': ['agregate size']}\nGenerated CQs:", "output": "Which specific types are encompassed by aggregate size, such as variable size? | Does variable size fall under the broader classification of aggregate size? | To what higher-level groups does variable size belong according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: component non-mandatory\nDescription: component non-mandatory is defined as a subclass of component mandatoriness. This classification indicates that component non-mandatory represents components characterized by a specific mandatoriness status, distinguishing them from other types of component mandatoriness. No further restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['component mandatoriness']}\nGenerated CQs:", "output": "What broader mandatoriness categories encompass component non-mandatory? | To which general mandatoriness classifications does component non-mandatory belong? | Which types are more specific than component mandatoriness, including component non-mandatory? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: one dimensional\nDescription: one dimensional is defined as a subclass of dimensionality. This class represents entities or concepts that possess exactly one dimension, distinguishing them from higher-dimensional counterparts. Any individual classified as one dimensional must inherently exhibit characteristics specific to single-dimensionality.\nAxiom: {'subClassOf': ['dimensionality']}\nGenerated CQs:", "output": "Is one dimensional classified as a specialized form under dimensionality? | Which concepts are encompassed under dimensionality, such as one dimensional? | What broader type does one dimensional inherit from in the dimensional hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: two dimensional\nDescription: two dimensional is defined as a subclass of dimensionality. This class represents entities or concepts characterized specifically by having two dimensions (such as length and width), distinguishing them within the broader category of dimensionality.\nAxiom: {'subClassOf': ['dimensionality']}\nGenerated CQs:", "output": "Which general category encompasses two dimensional in the ontology? | Is two dimensional a more specific type of dimensionality? | What are the subclasses categorized under dimensionality, such as two dimensional? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: multi dimensional\nDescription: multi dimensional is defined as a subclass of dimensionality, meaning it represents a specific type or instance within the broader concept of dimensionality. Any entity classified as multi dimensional inherently possesses the quality of having multiple dimensions, as specified by its placement under the dimensionality hierarchy.\nAxiom: {'subClassOf': ['dimensionality']}\nGenerated CQs:", "output": "Is multi dimensional categorized under the broader concept of dimensionality? | To which higher-level classes does multi dimensional belong in the context of dimensionality? | Which subclasses are encompassed by dimensionality, such as multi dimensional? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: heterogenous\nDescription: heterogenous is defined as a subclass of homogenity. This means every heterogenous entity is considered a type of homogenity, establishing a hierarchical relationship in which heterogenous inherits all characteristics of homogenity; however, further distinctions or defining properties are not specified by the current axioms or descriptions.\nAxiom: {'subClassOf': ['homogenity']}\nGenerated CQs:", "output": "What broader classes is heterogenous associated with in the ontology? | Which subclasses fall under the concept of homogenity, such as heterogenous? | Is heterogenous included as a specific type under homogenity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-recursive\nDescription: non-recursive is defined as a subclass of recursiveness, meaning every non-recursive entity is a specific type of recursiveness. This class represents elements that, while related to the broader concept of recursiveness, possess characteristics that distinguish them as non-recursive within that context.\nAxiom: {'subClassOf': ['recursiveness']}\nGenerated CQs:", "output": "Which higher-order classes does non-recursive fall under? | What categories are directly encompassed by recursiveness, including non-recursive? | Is non-recursive categorized under recursiveness as a more specific classification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: structured\nDescription: structured is defined as a subclass of structurness. This indicates that every instance of structured also inherits all characteristics and constraints of structurness. No further properties or restrictions are specified for this class.\nAxiom: {'subClassOf': ['structurness']}\nGenerated CQs:", "output": "Is structurness a direct superclass of structured? | Which higher-level categories encompass the concept of structured? | What more specific classes fall under structurness, such as structured? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unstructured\nDescription: unstructured is defined as a subclass of structurness. This means that every instance of unstructured is also an instance of structurness, inheriting all properties and constraints applicable to structurness. There are no additional property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['structurness']}\nGenerated CQs:", "output": "Which types are categorized more specifically than structurness, such as unstructured? | To what higher-level groupings does unstructured pertain? | Does unstructured fall under the category of structurness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: semi-structured\nDescription: semi-structured is defined as a subclass of structurness. This means that every instance of semi-structured is also an instance of structurness, inheriting its general properties while specializing or refining its concept. No additional property restrictions or disjointness axioms are specified, so the class is characterized primarily by its placement within the structurness hierarchy.\nAxiom: {'subClassOf': ['structurness']}\nGenerated CQs:", "output": "What broader categories encompass semi-structured within the ontology? | Is semi-structured classified as a type of structurness? | Which subclasses of structurness include semi-structured? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unique values\nDescription: unique values is defined as a subclass of uniqueness, indicating that every instance of unique values is also an instance of uniqueness. This classification implies that members of this class represent values that are distinguished by not being duplicated within a given context, enforcing a guarantee of singularity for each value.\nAxiom: {'subClassOf': ['uniqueness']}\nGenerated CQs:", "output": "What are the broader classes that unique values are classified under? | Are unique values considered a specific type of uniqueness? | Which subclasses fall under the category of uniqueness, including unique values? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target field identifier\nDescription: target field identifier is defined as a subclass of field identifier. This means that every target field identifier is a specialized form of field identifier and inherits all its properties and constraints. No additional axioms or distinguishing properties are specified for this class.\nAxiom: {'subClassOf': ['field identifier']}\nGenerated CQs:", "output": "What higher-level field identifiers categorize target field identifier? | Does target field identifier belong to the broader group defined by field identifier? | Which field identifier subtypes encompass target field identifier as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: positive integer\nDescription: positive integer is defined as a subclass of extended datatype, indicating that it is a specialized numerical datatype representing integers greater than zero within the broader category of extended datatypes. No additional constraints or properties are specified beyond this hierarchical relationship.\nAxiom: {'subClassOf': ['extended datatype']}\nGenerated CQs:", "output": "Is positive integer classified as a more specific type under extended datatype? | Which datatypes fall within the category of extended datatype, encompassing positive integer? | What broader datatype groups does positive integer inherit from? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: positive integer range generator\nDescription: positive integer range generator is defined as a subclass of range subtype generator. This class represents generators specifically designed to produce ranges consisting only of positive integers, inheriting all characteristics of range subtype generator while specializing in handling positive integer values.\nAxiom: {'subClassOf': ['range subtype generator']}\nGenerated CQs:", "output": "Is every positive integer range generator categorized under range subtype generator? | Which specialized generators are classified beneath range subtype generator, including positive integer range generator? | Under which broader generator types does positive integer range generator fall? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: return-parameter specification\nDescription: return-parameter specification is a subclass of specification, characterized by having at least one member that is a datatype and at least one associated identifier that qualifies as a parameter identifier. This formalization ensures that every return-parameter specification includes a datatype value and a means of uniquely identifying the parameter, which is essential for describing properties of parameters returned by functions or methods in structured data or APIs.\nAxiom: {'subClassOf': ['specification'], 'propertyRestrictions': ['[has_member some datatype]', '[has_identifier only parameter identifier]']}\nGenerated CQs:", "output": "Must every return-parameter specification have at least one identifier specified via the has_identifier property? | Is it required for a return-parameter specification to possess a parameter identifier through the has_identifier relationship? | Does a return-parameter specification entail the existence of some associated parameter identifier via has_identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: excluding subtype generator\nDescription: excluding subtype generator is defined as a subclass of subtype generator, with the added restriction that it must have at least one member specified by the has_member property, where the member is of the type select-list. This means every instance of excluding subtype generator must be associated with at least one select-list through the has_member property, providing a mechanism for selecting or excluding specific subtypes via a list-based criteria.\nAxiom: {'subClassOf': ['subtype generator'], 'propertyRestrictions': ['[has_member only select-list]']}\nGenerated CQs:", "output": "Does the concept 'excluding subtype generator' necessarily include at least one member from the 'select-list' via the 'has_member' property? | Is it required that every 'excluding subtype generator' entity is related through 'has_member' to an instance belonging to the 'select-list'? | Could an 'excluding subtype generator' exist without linking to at least one element of the 'select-list' through 'has_member'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: selection subtype generator\nDescription: selection subtype generator is defined as a subclass of subtype generator. Any instance of this class must have at least one member that is a select-list, enforced by the property restriction [has_member some select-list]. This ensures that selection subtype generators are specifically characterized by their association with select-list members, distinguishing them from other subtype generators.\nAxiom: {'subClassOf': ['subtype generator'], 'propertyRestrictions': ['[has_member only select-list]']}\nGenerated CQs:", "output": "Does every selection necessarily include at least one member from the select-list? | Is it required for any selection to have a member that is part of the select-list? | Can a selection exist without having any member drawn from the select-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled graph datatype\nDescription: labeled graph datatype is defined as a subclass of defined datatype, with the additional restriction that it must have at least one member produced by a directed labeled graph datatype generator. This means every labeled graph datatype is necessarily structured to include elements generated from a mechanism or process that produces directed labeled graph datatypes, distinguishing it from other defined datatypes that may lack this property.\nAxiom: {'subClassOf': ['defined datatype'], 'propertyRestrictions': ['[has_member only directed labeled graph datatype generator]']}\nGenerated CQs:", "output": "Must every labeled graph with propertyRestrictions have at least one has_member relation to a directed labeled graph datatype generator? | Is it required for any labeled graph with propertyRestrictions to be associated, via has_member, with a directed labeled graph datatype generator? | Can a labeled graph with propertyRestrictions exist without having the has_member property relating it to a directed labeled graph datatype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bag generator\nDescription: bag generator is defined as a subclass of homogenous unordered aggregate generator with variable size and is explicitly disjoint with set generator, indicating that an individual cannot be both a bag generator and a set generator. Members of this class are characterized by generating collections where items may have non-unique values (duplicates are permitted) and the way elements are accessed is implementation dependent. This ensures that bag generators support variable-sized, unordered aggregates allowing repeated elements, with element access properties not universally specified.\nAxiom: {'subClassOf': ['homogenous unordered aggregate generator with variable size'], 'disjointWith': ['set generator'], 'propertyRestrictions': ['[has_quality some non-unique values]', '[has_quality only implementation dependent access]']}\nGenerated CQs:", "output": "Is every bag generator required to have at least one quality associated with implementation dependent access? | Does a bag generator necessarily possess the quality of implementation dependent access through the has_quality property? | Can a bag generator exist without having the has_quality property relating it to implementation dependent access? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record generator\nDescription: record generator is defined as a subclass of heterogenous aggregate generator and is explicitly disjoint with table datatype, ensuring that an individual cannot be both a record generator and a table datatype. Members of the record generator class must possess several qualities: they have a fixed size, are one-dimensional, form an unordered aggregate, support key access, and can contain non-unique values. This formalization captures the characteristic structure of a record generator, emphasizing its fixed, one-dimensional, unordered nature with keyed access and allowance for repeated values.\nAxiom: {'subClassOf': ['heterogenous aggregate generator'], 'disjointWith': ['table datatype'], 'propertyRestrictions': ['[has_quality some one dimensional]', '[has_quality some unordered aggregate]', '[has_quality some key access]', '[has_quality some non-unique values]', '[has_quality only fixed size]']}\nGenerated CQs:", "output": "Is it required that every record generator has at least one quality characterized by a fixed size? | Must a record generator possess the property 'has_quality' with a value of fixed size? | Does the presence of the fixed size quality define the class of record generators with respect to the has_quality property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous unordered aggregate generator with variable size\nDescription: homogenous unordered aggregate generator with variable size is a subclass of homogenous aggregate generator with variable size and is defined as being equivalent to either a bag generator or a set generator. Members of this class are characterized by having the quality of generating unordered aggregates, reflecting that the elements produced do not have intrinsic order. This ontology definition ensures that any homogenous unordered aggregate generator with variable size behaves as a variable-sized aggregate generator whose items are homogeneous and unordered, aligning with the behaviors of both bag generators and set generators.\nAxiom: {'subClassOf': ['homogenous aggregate generator with variable size'], 'equivalentClass': ['(bag generator or set generator)'], 'propertyRestrictions': ['[has_quality only unordered aggregate]']}\nGenerated CQs:", "output": "Does every homogenous unordered aggregate generator necessarily have at least one quality characterized as an unordered aggregate? | Can a homogenous unordered aggregate generator possess the 'has_quality' property only if the quality is of type unordered aggregate? | Is it possible for a homogenous unordered aggregate generator to lack any 'has_quality' relationship to unordered aggregate entities? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: table datatype\nDescription: table datatype is defined as a subclass of heterogenous aggregate datatype, and is explicitly disjoint with record (tuple) datatype, indicating that no instance can simultaneously belong to both classes. Members of the table datatype class are characterized by the following: they always have at least one table generator and a field-list as members; possess the qualities of being exact and non-numeric; and support several specific operations, including IsEmpty, MapToBag, Insert, Select, MapToTable, Delete, Fetch, and Serialize. This formalization distinguishes table datatype from other aggregate types, ensuring that it is uniquely identified by its supported operations, membership requirements, and data qualities.\nAxiom: {'subClassOf': ['heterogenous aggregate datatype'], 'disjointWith': ['record (tuple) datatype'], 'propertyRestrictions': ['[has_member some table generator]', '[has_operation some IsEmpty:table]', '[has_operation some MapToBag:table]', '[has_operation some Insert:table]', '[has_operation some Select:table]', '[has_operation some MapToTable:table]', '[has_quality some exact]', '[has_operation some Delete:table]', '[has_operation some Fetch:table]', '[has_operation some Serialize:table]', '[has_quality some non-numeric]', '[has_member only field-list]']}\nGenerated CQs:", "output": "Is it required that every table has at least one member from the field-list? | Does the definition of a table ensure that it must be associated with some field-list member via the has_member property? | Can a table exist without having any has_member link to a field-list individual? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: enumerated-value identifier\nDescription: enumerated-value identifier is a subclass of identifier, characterized by the restriction that its values must be associated (through the has-value property) with at least one literal value (rdfs:Literal). This formalization ensures that every enumerated-value identifier refers explicitly to a concrete literal value, distinguishing it from other identifiers that may not be directly tied to literal data.\nAxiom: {'subClassOf': ['identifier'], 'propertyRestrictions': ['[has-value only rdfs:Literal]']}\nGenerated CQs:", "output": "Are all enumerated-value identifiers required to have at least one property restriction with a value of type rdfs:Literal? | Is it necessary for every enumerated-value identifier to be associated with a property restriction whose value is a literal? | Does the presence of a property restriction with an rdfs:Literal value characterize all enumerated-value identifiers? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate-imposed identifier uniqueness\nDescription: aggregate-imposed identifier uniqueness is a subclass of aggregate generator property, and is explicitly disjoint with classes such as homogenity, aggregate size, uniqueness, component mandatoriness, structurness, recursiveness, and access type, ensuring mutual exclusivity with these notions. It is defined equivalently as a situation where an identifier may or may not be unique (identifier not unique or identifier unique), capturing precisely those cases where the uniqueness of identifiers is determined at the aggregate level rather than being strictly enforced or absent.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['homogenity', 'agregate size', 'uniqueness', 'component mandatoriness', 'structurness', 'recursiveness', 'access type'], 'equivalentClass': ['(identifier not unique and identifier unique)']}\nGenerated CQs:", "output": "Is aggregate-imposed identifier uniqueness equivalent to the union of identifier not unique and identifier unique? | Can aggregate-imposed identifier uniqueness be completely described as either identifier not unique or identifier unique? | Does aggregate-imposed identifier uniqueness include all instances with identifier unique or identifier not unique, and no others? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: uniqueness\nDescription: uniqueness is defined as a subclass of aggregate generator property and is explicitly disjoint from component mandatoriness, structurness, recursiveness, and access type, meaning no entity can be an instance of both uniqueness and any of these disjoint classes simultaneously. It is equivalent to the presence of either unique values or non-unique values, capturing the property of whether values are distinct or may repeat within an aggregate context. This definition formalizes how uniqueness characterizes and distinguishes value patterns in aggregate generator properties.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['component mandatoriness', 'structurness', 'recursiveness', 'access type'], 'equivalentClass': ['(non-unique values and unique values)']}\nGenerated CQs:", "output": "Is uniqueness equivalent to the class containing either only non-unique values or only unique values? | Can all instances classified as uniqueness be described as those having non-unique values or unique values? | Does the definition of uniqueness encompass exclusively the union of non-unique values and unique values? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: recursiveness\nDescription: recursiveness is defined as a subclass of aggregate generator property, indicating it is a specific kind of property related to aggregate generators. It is explicitly disjoint with access type, meaning no entity can simultaneously be both an access type and exhibit recursiveness. Additionally, recursiveness is formally equivalent to either recursive or non-recursive, fully covering both possibilities as mutually exclusive characteristics within this context.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['access type'], 'equivalentClass': ['(recursive and non-recursive)']}\nGenerated CQs:", "output": "Is recursiveness equivalent to the union of recursive and non-recursive concepts? | Can recursiveness be entirely described as either recursive or non-recursive? | Are all entities classified as recursiveness necessarily either recursive or non-recursive? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: primitive datatype\nDescription: primitive datatype is a subclass of datatype, and is explicitly disjoint from both generated datatype and defined datatype, ensuring that no individual can simultaneously belong to these classes. Members of primitive datatype are characterized by the requirement that they possess at least one quality related to equality (expressed as having some has_quality relationship to equality). This formalization captures the basic, irreducible nature of primitive datatypes, differentiating them from those that are constructed or defined based on other rules.\nAxiom: {'subClassOf': ['datatype'], 'disjointWith': ['generated datatype', 'defined datatype'], 'propertyRestrictions': ['[has_quality only equality]']}\nGenerated CQs:", "output": "Is it required for every instance with a primitive datatype propertyRestriction to possess at least one has_quality relation to equality? | Does the definition of primitive datatype propertyRestrictions ensure that the has_quality property always connects to equality for its instances? | Must all primitive datatype propertyRestrictions have the property has_quality with the value equality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined datatype parameter\nDescription: defined datatype parameter is a subclass of datatype role, representing a parameter that is specifically associated with datatypes. Any member of this class must have an identifier (i.e., satisfy the has_identifier property with respect to some parameter identifier), must be a member of a defined datatype parameter-list, and must play the role_of some datatype. This formalization ensures that a defined datatype parameter is always linked to a datatype and properly identified within a parameter list structure.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[has_identifier some parameter identifier]', '[is_member_of some defined datatype parameter-list]', '[role_of only datatype]']}\nGenerated CQs:", "output": "Is it required that propertyRestrictions always involves at least one role_of relation to a datatype? | Can an entity with propertyRestrictions lack any role_of association to a datatype? | Does the definition of propertyRestrictions entail that there must exist some role_of connection to a datatype for its instances? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: alternative-type\nDescription: alternative-type is defined as a subclass of datatype role. Instances of this class must be the role of at least one datatype and must also be a member of some alternative component. This formalization ensures that alternative-type represents a specialized datatype role that is contextually linked both to specific datatypes and to alternative components.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[role_of some datatype]', '[is_member_of only alternative component]']}\nGenerated CQs:", "output": "Must every alternative-type entity be related via 'is_member_of' to at least one alternative component? | Is it required that an alternative-type individual participate as a member in some alternative component? | Can an alternative-type exist in the ontology without being a member of any alternative component through the 'is_member_of' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: parameter\nDescription: parameter is defined as a subclass of datatype role, representing entities that serve a specific function within a datatype context. Each parameter must be associated with some datatype (via the role_of property) and must have an identifier that is a member of the parameter identifier class. This ensures that every parameter is explicitly linked to the datatype it qualifies and is uniquely identified within the system.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[has_identifier some parameter identifier]', '[role_of only datatype]']}\nGenerated CQs:", "output": "Is it necessary for parameter to have the property propertyRestrictions with some value that plays the role_of a specified datatype? | Can a parameter exist without propertyRestrictions relating to at least one instance of datatype through role_of? | Does every valid parameter exhibit propertyRestrictions to at least one entity classified as datatype by role_of? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: attribute component\nDescription: attribute component is defined as a subclass of datatype role, meaning each attribute component is a specific kind of datatype role. Additionally, attribute component instances are required to be associated with at least one attribute identifier through the has_identifier property. This ensures that every attribute component is uniquely identified by an attribute identifier.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[has_identifier only attribute identifier]']}\nGenerated CQs:", "output": "Is it required for every attribute component to have at least one attribute identifier via the has_identifier property? | Can an attribute component exist without being linked to an attribute identifier through has_identifier? | Must each attribute component be associated with some attribute identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete field-list\nDescription: discrete field-list is a subclass of field-list, defined by the restriction that its members must include at least one discrete field component. This ensures that every instance of discrete field-list contains some element that is characterized as a discrete field component.\nAxiom: {'subClassOf': ['field-list'], 'propertyRestrictions': ['[has_member only discrete field component]']}\nGenerated CQs:", "output": "Must every discrete field-list include at least one member that is a discrete field component? | Is it required for a discrete field-list to have the has_member property relating it to some discrete field component? | Can a discrete field-list exist without having any discrete field component as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unlabeled dataset field-list\nDescription: unlabeled dataset field-list is a subclass of field-list, characterized by the axiom that its members must include at least one labeled dataset descriptive field component through the has_member property. This means any instance of unlabeled dataset field-list is a field-list that necessarily contains some labeled dataset descriptive field components.\nAxiom: {'subClassOf': ['field-list'], 'propertyRestrictions': ['[has_member only labeled dataset descriptive field component]']}\nGenerated CQs:", "output": "Is it required for an unlabeled dataset to include at least one member that is a labeled dataset descriptive field component? | Can an unlabeled dataset have members other than labeled dataset descriptive field components? | Does every unlabeled dataset necessarily relate through 'has_member' to a labeled dataset descriptive field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: attribute-list\nDescription: attribute-list is defined as a subclass of list specification, characterized by the requirement that every attribute-list must have at least one member that is an attribute component. This formalization specifies that the class comprises list specifications whose members necessarily include attribute components.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member only attribute component]']}\nGenerated CQs:", "output": "Is it required that every attribute-list includes at least one component as a member? | Does the existence of a member with the attribute 'component' suffice for something to be classified under attribute-list? | Can an attribute-list be identified solely by having the property 'has_member' with at least one component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: alternative-list\nDescription: alternative-list is defined as a subclass of list specification, incorporating a property restriction requiring that its members must include at least one alternative component. This ensures that any instance of alternative-list represents a list specification whose elements are specifically alternative components.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member only alternative component]']}\nGenerated CQs:", "output": "Must every alternative-list include at least one alternative component as a member? | Is it required that alternative-list items possess a member that is classified as an alternative component? | Does the structure of alternative-list entail having some association with an alternative component through the has_member property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: select-list\nDescription: select-list is defined as a subclass of list specification, representing a specialized type of list that must include at least one member which is a select-item specification. Any instance of select-list is thus required to be a list specification containing one or more select-item specifications as its members.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member only select-item specification]']}\nGenerated CQs:", "output": "Are all individuals in select-list required to have at least one member specified by the property has_member from the select-item specification? | Can an instance belonging to select-list exist without having a member that satisfies the select-item specification through has_member? | Is it necessary for any member of select-list to be linked to some entity defined by the select-item specification via has_member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: enumerated-value-list\nDescription: enumerated-value-list is defined as a subclass of list specification, with the defining property that it must have at least one member that is an enumerated-value identifier. This means any instance of enumerated-value-list is a list specification characterized by containing one or more explicitly enumerated values as its members.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member only enumerated-value identifier]']}\nGenerated CQs:", "output": "Is every member in an enumerated-value-list required to have at least one enumerated-value identified by the 'has_member' property? | Can an enumerated-value-list contain an element that does not meet the identifier criteria via 'has_member'? | Does the definition of enumerated-value-list ensure the inclusion of only those values that are explicitly connected through 'has_member' to a recognized enumerated-value identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: array datatype\nDescription: array datatype is defined as a subclass of homogenous aggregate datatype, and is explicitly disjoint from homogenous aggregate datatype with variable size, indicating arrays have a fixed size. Members of this class possess the following characteristics: they have members of a specific base type, members are indexed (by an index-type list), and an array can be generated by an array generator. Arrays are associated with qualities such as being exact, non-ordered, and non-numeric. They support operations including selection (Select:table), replacement (Replace:array), and testing for equality (Equal:array). These axioms provide a formal definition capturing the essential nature and operational behavior of array datatypes.\nAxiom: {'subClassOf': ['homogenous aggregate datatype'], 'disjointWith': ['homogenous aggregate datatype with variable size'], 'propertyRestrictions': ['[has_operation some Select:table]', '[has_member some index-type list]', '[has_quality some exact]', '[has_operation some Replace:array]', '[has_quality some non-ordered]', '[has_quality some non-numeric]', '[has_operation some Equal:array]', '[has_member some array generator]', '[has_member only base type]']}\nGenerated CQs:", "output": "Must every array have at least one member of the base type? | Does an array necessarily include some value identified by the base type through the property has_member? | Is it required that any instance of array is associated via has_member with at least one instance of the base type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real datatype\nDescription: real datatype is defined as a subclass of numeric ordered primitive datatype and is explicitly disjoint with both integer datatype and rational datatype, ensuring that no individual can be simultaneously classified as a real datatype and either of those classes. Members of this class support a range of operations, including addition (Add), multiplication (Multiply), negation (Negate), reciprocals (Reciprocal), equality comparison (Equal), order comparison (InOrder), and type promotion (Promote), all among real values. Instances of real datatype possess qualities of being unbounded and approximate, distinguishing them from other numeric types. They also include members such as real radix and real factor, further characterizing the structure and application of real datatypes.\nAxiom: {'subClassOf': ['numeric ordered primitive datatype'], 'disjointWith': ['integer datatype', 'rational datatype'], 'propertyRestrictions': ['[has_quality some approximate]', '[has_operation some Negate:real]', '[has_member some real radix]', '[has_quality some unbounded]', '[has_operation some Reciprocal:real]', '[has_operation some InOrder:real]', '[has_operation some Add:real]', '[has_operation some Promote:real]', '[has_operation some Equal:real]', '[has_member some real factor]', '[has_operation only Multiply:real]']}\nGenerated CQs:", "output": "Is it required for a real datatype property to participate in at least one 'has_operation' relation involving the Multiply operation? | Can a real datatype property exist without being associated with the 'has_operation' property to a Multiply operation? | Does the presence of a Multiply operation under the 'has_operation' property suffice to classify a real datatype property under this restriction? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-aggregate generator\nDescription: non-aggregate generator is defined as a subclass of generated datatype generator, and is explicitly disjoint from defined generator, aggregate datatype, and aggregate generator. Every non-aggregate generator is equivalent to being either a choice generator, pointer generator, or procedure generator. This class groups generator types that are not aggregate in nature, thereby excluding those that represent defined, aggregate, or aggregate-related generator functionalities.\nAxiom: {'subClassOf': ['generated datatype generator'], 'disjointWith': ['defined generator', 'aggregate datatype', 'aggregate generator'], 'equivalentClass': ['(choice generator and pointer generator and procedure generator)']}\nGenerated CQs:", "output": "Is a non-aggregate generator necessarily equivalent to either a choice generator, a pointer generator, or a procedure generator? | Is every non-aggregate generator either a choice generator, a pointer generator, or a procedure generator, and vice versa? | Are the classes choice generator, pointer generator, and procedure generator jointly exhaustive and mutually exclusive with respect to non-aggregate generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: numericalness\nDescription: numericalness is a subclass of datatype property that classifies properties as either numeric or non-numeric. It is formally specified to be equivalent to the union of numeric and non-numeric, meaning all members must belong to one of these two categories. Additionally, numericalness is explicitly disjoint with cardinality, order, boundedness, and equality, ensuring these property types are mutually exclusive and no property can simultaneously belong to both numericalness and any of these other classes. This class captures the essential distinction between properties based on their numerical character.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['cardinality', 'order', 'boundedness', 'equality'], 'equivalentClass': ['(numeric and non-numeric)']}\nGenerated CQs:", "output": "Is numericalness defined as the union of numeric and non-numeric entities? | Are all instances of numericalness necessarily either numeric or non-numeric? | Does numericalness encompass all and only those classes that are numeric or non-numeric? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boundedness\nDescription: boundedness is defined as a subclass of datatype property and is explicitly disjoint with equality, indicating that no instance can simultaneously represent boundedness and equality. It is further specified as being equivalent to either bounded or unbounded, meaning every instance of boundedness must fall into one of these two categories. This class formally captures the notion of whether a datatype property exhibits bounds or not, distinguishing it from properties concerning equality.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['equality'], 'equivalentClass': ['(bounded and unbounded)']}\nGenerated CQs:", "output": "Is boundedness defined as the union of bounded and unbounded classes? | Are all instances of boundedness either bounded or unbounded? | Does boundedness include any class other than bounded and unbounded? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real field component\nDescription: real field component is defined as a subclass of primitive field component, disjoint with boolean field component—which ensures that no individual can be both a real field component and a boolean field component simultaneously. Members of this class are further constrained by a property restriction: each real field component must have a role with respect to some real datatype. This means that any real field component always relates in some way to a real (numeric, continuous) datatype, distinguishing it from other types of primitive field components.\nAxiom: {'subClassOf': ['primitive field component'], 'disjointWith': ['boolean field component'], 'propertyRestrictions': ['[role_of only real datatype]']}\nGenerated CQs:", "output": "Does a real field component necessarily play the role of some real datatype? | Is it required for every real field component to be associated, through 'role_of', with at least one instance of real datatype? | Can a real field component exist without participating in the 'role_of' relationship with any real datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: choice datatype\nDescription: choice datatype is a subclass of non-aggregate datatype, characterized by having values that represent a single value selected from a set of alternative datatypes. These alternative datatypes are differentiated by their correspondence to values from a tag-type, known as the tag datatype. Formally, a choice datatype has members such as tag-type, alternative-list, and a choice generator; it is subject to property restrictions requiring qualities such as exactness and being non-ordered. It supports specific operations, including Discriminant:choice, Tag:choice, Cast:choice, and Equal:choice, which facilitate the selection and identification of alternatives by tag values.\nAxiom: {'subClassOf': ['non-aggregate datatype'], 'propertyRestrictions': ['[has_quality some exact]', '[has_operation some Discriminant:choice]', '[has_quality some non-ordered]', '[has_operation some Cast:choice]', '[has_operation some Equal:choice]', '[has_member some tag-type]', '[has_member some alternative-list]', '[has_member some choice generator]', '[has_operation only Tag:choice]']}\nGenerated CQs:", "output": "Is every instance of 'choice' required to have at least one 'has_operation' relation to an entity of type Tag:choice? | Can a 'choice' exist without the 'has_operation' property relating it to Tag:choice? | Do all 'choice' entities necessarily participate in some 'has_operation' association with Tag:choice? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DAG datatype\nDescription: DAG datatype is specified as a subclass of labeled graph datatype, meaning it inherits all characteristics of a labeled graph datatype. Additionally, every DAG datatype must have at least one member that is a DAG datatype generator, as indicated by the property restriction [has_member some DAG datatype generator]. This ensures each instance of DAG datatype is associated with a generator tailored for directed acyclic graph structures.\nAxiom: {'subClassOf': ['labeled graph datatype'], 'propertyRestrictions': ['[has_member only DAG datatype generator]']}\nGenerated CQs:", "output": "Must a DAG datatype always have at least one 'has_member' relationship with a DAG datatype generator? | Can a DAG datatype exist without being associated to any DAG datatype generator through the 'has_member' property? | Is the presence of a 'has_member' link to a DAG datatype generator necessary for every DAG datatype instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: character datatype\nDescription: character datatype is defined as a subclass of non-numeric unordered primitive datatype. It is disjoint with discrete datatype and boolean datatype, ensuring that no datatype can be both a character datatype and either of those types. Members of the character datatype class are characterized by possessing at least one exact quality, supporting the Equal operation restricted to characters, and being associated with at least one character-set identifier. This formalization captures the essential properties of character datatypes, which are used to represent single text characters from specific character sets and are distinct from numeric or logical datatypes.\nAxiom: {'subClassOf': ['non-numeric unordered primitive datatype'], 'disjointWith': ['discrete datatype', 'boolean datatype'], 'propertyRestrictions': ['[has_quality some exact]', '[has_identifier some character-set identifier]', '[has_operation only Equal:character]']}\nGenerated CQs:", "output": "Is every character required to have at least one operation of type 'Equal'? | Does the ontology define that there exists an 'Equal' operation associated with each character via the 'has_operation' property? | Can a character exist without being linked to an 'Equal' operation through 'has_operation'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete datatype\nDescription: discrete datatype is a subclass of non-numeric unordered primitive datatype, and it is explicitly disjoint with boolean datatype, ensuring that no individual can be both a discrete datatype and a boolean datatype. Members of this class must have at least one member from a discrete-value-list, support at least the equality operation (Equal:discrete), and possess the quality of exactness. This formalization captures the distinct, non-numeric, unordered nature of discrete datatypes, characterized by well-defined, separate values and an emphasis on precise equality comparisons.\nAxiom: {'subClassOf': ['non-numeric unordered primitive datatype'], 'disjointWith': ['boolean datatype'], 'propertyRestrictions': ['[has_member some discrete-value-list]', '[has_operation some Equal:discrete]', '[has_quality only exact]']}\nGenerated CQs:", "output": "Is every instance with the discrete datatype required to possess at least one 'has_quality' relationship to 'exact'? | Can an entity classified by the discrete datatype lack any association via 'has_quality' to 'exact'? | Must the discrete datatype always be described by the property 'has_quality' with value 'exact'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: generated datatype generator\nDescription: generated datatype generator is defined as a subclass of datatype generator and is considered equivalent to either a non-aggregate generator or an aggregate generator. Members of this class must be associated, via the is_member_of property, with some generated datatype. The class is also described by the synonym \"datatype constructor.\"\nAxiom: {'subClassOf': ['datatype generator'], 'equivalentClass': ['(non-aggregate generator or aggregate generator)'], 'propertyRestrictions': ['[is_member_of only generated datatype]']}\nGenerated CQs:", "output": "Is it required that an entity classified under 'generated datatype' must be a member of at least one 'generated datatype' instance? | Does every instance of 'generated datatype' participate in the 'is_member_of' relationship with some instance of 'generated datatype'? | Can a 'generated datatype' exist without being linked via 'is_member_of' to any other 'generated datatype'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: integer base datatype\nDescription: integer base datatype is defined as a subclass of base type and is constrained by the axiom that it must play the role of some integer datatype. This means that every instance of integer base datatype is a specific kind of base type that is characterized by being related to at least one integer datatype through the role_of property.\nAxiom: {'subClassOf': ['base type'], 'propertyRestrictions': ['[role_of only integer datatype]']}\nGenerated CQs:", "output": "Is it required that the base datatype 'integer' has at least one role filled by an integer value? | Does every instance of the base datatype 'integer' necessarily possess the property 'role_of' relating it to an integer value? | Can an instance of the base datatype 'integer' exist without the property 'role_of' connecting it to an integer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record of primitives datatype\nDescription: record of primitives datatype is defined as a subclass of record (tuple) datatype. Members of this class are characterized by the property restriction that they must have at least one member that is a primitive field-list. This formalization ensures that any instance of record of primitives datatype represents a structured record whose fields are all of primitive types.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'propertyRestrictions': ['[has_member only primitive field-list]']}\nGenerated CQs:", "output": "Is every record of primitives required to have at least one member that is a primitive listed in the field list? | Does the definition of a record of primitives entail that it must possess a 'has_member' relationship with at least one entity in the primitive field-list? | Can a record of primitives exist without having the 'has_member' property connecting it to an element from the primitive field-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unlabeled dataset record datatype\nDescription: unlabeled dataset record datatype is defined as a subclass of record (tuple) datatype. Members of this class are characterized by the presence of at least one has_member relationship to an unlabeled dataset field-list, meaning each record contains a list of fields but without associated labels. This structure is suitable for representing data records in datasets where attribute names are absent.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'propertyRestrictions': ['[has_member only unlabeled dataset field-list]']}\nGenerated CQs:", "output": "Does every unlabeled dataset record necessarily have at least one has_member relationship to an unlabeled dataset field-list? | Is it required for unlabeled dataset records to include some member from the unlabeled dataset field-list? | Can an unlabeled dataset record exist without being related via has_member to any unlabeled dataset field-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set of integer datatype\nDescription: set of integer datatype is defined as a subclass of set datatype. Each instance of this class is constrained by the requirement that it has members, all of which are from the integer base datatype. This ensures that any individual classified as set of integer datatype can only contain integers as its elements.\nAxiom: {'subClassOf': ['set datatype'], 'propertyRestrictions': ['[has_member only integer base datatype]']}\nGenerated CQs:", "output": "Is it required for a set to include at least one member with an integer base datatype? | Must every instance of the set have the 'has_member' property assigned to some value of type integer? | Can a set of integer datatype propertyRestrictions exist without containing an integer as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: enumerated datatype\nDescription: enumerated datatype is defined as a subclass of non-numeric ordered primitive datatype, and is explicitly disjoint with both date and time datatype and ordinal datatype. As a discrete (synonymously, enumerated) datatype, it is characterized by having an explicit set of member values (enumerated-value-list) and supports specific operations such as equality checking (Equal:enumerated), successor determination (Successor:enumerated), and ordered comparison (InOrder:enumerated). Additionally, every enumerated datatype must possess qualities of being bounded (having finite limits) and exact (precisely defined), ensuring it only allows selection from a strictly defined, ordered set of non-numeric values.\nAxiom: {'subClassOf': ['non-numeric ordered primitive datatype'], 'disjointWith': ['date and time datatype', 'ordinal datatype'], 'propertyRestrictions': ['[has_operation some Equal:enumerated]', '[has_member some enumerated-value-list]', '[has_operation some Successor:enumerated]', '[has_quality some bounded]', '[has_operation some InOrder:enumerated]', '[has_quality only exact]']}\nGenerated CQs:", "output": "Are entities in the enumerated datatype required to have at least one 'has_quality' relationship to 'exact'? | Is it necessary that any instance of the enumerated datatype possesses the property 'has_quality' with the value 'exact'? | Can an instance be part of the enumerated datatype if it lacks the 'has_quality' property relating to 'exact'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: range\nDescription: range is defined as a subclass of value expression. Members of this class are characterized by having at least one association, through the property has_member, to both a lower bound and an upper bound. This formalization ensures that each instance of range must specify some lower and some upper bound, thereby representing a bounded interval or extent within the context of value expressions.\nAxiom: {'subClassOf': ['value expression'], 'propertyRestrictions': ['[has_member some upper bound]', '[has_member only lower bound]']}\nGenerated CQs:", "output": "Is every value of the property 'has_member' required to include at least one instance from the class 'lower bound'? | Does enforcing the property restriction 'has_member some lower bound' ensure that any entity linked by 'has_member' must have a member from the 'lower bound' class? | Can an entity have the 'has_member' property without referencing at least one 'lower bound' individual? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: extended datatype\nDescription: extended datatype is defined as a subclass of data representational model. It is characterized by possessing at least one datatype property (has_quality some datatype property), at least one subtype generator as a member (has_member some subtype generator), at least one value space attribute (has_attribute some value space), and at least one base type as a member (has_member some base type). The class is also associated with the synonym \"subtype\". This formalization ensures that any instance of extended datatype is richly described in terms of qualities, generative subtypes, value domains, and derived from fundamental base types.\nAxiom: {'subClassOf': ['data representational model'], 'propertyRestrictions': ['[has_quality some datatype property]', '[has_member some subtype generator]', '[has_member some base type]', '[has_attribute only value space]']}\nGenerated CQs:", "output": "Is every instance with the 'extended datatype propertyRestrictions' required to have at least one 'has_attribute' in the value space? | Can something classified under 'extended datatype propertyRestrictions' exist without possessing the 'has_attribute' property associated with any value space? | Does the existence of 'has_attribute' with any value from the specified space determine membership in 'extended datatype propertyRestrictions'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence of discrete datatype\nDescription: sequence of discrete datatype is defined as a subclass of sequence datatype, meaning it inherits all characteristics associated with sequence datatypes. Individuals of this class are further characterized by the property that each member of the sequence must be of a discrete base type. This restriction ensures that only elements classified as discrete base types are permitted as members in such sequences, differentiating this class from more general sequence datatypes that may include other types of elements.\nAxiom: {'subClassOf': ['sequence datatype'], 'propertyRestrictions': ['[has_member only discrete base type]']}\nGenerated CQs:", "output": "Must every sequence contain at least one member drawn from the discrete base type? | Is it required that a sequence always includes a value for the property 'has_member' sourced from a discrete base type? | Do all instances of the sequence have at least one association via 'has_member' to an element of the discrete base type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous  unordered aggregate datatype with variable size\nDescription: homogenous unordered aggregate datatype with variable size is a subclass of homogenous aggregate datatype with variable size. Each instance of this class must have at least one member that is an instance of homogenous unordered aggregate generator with variable size. This class groups together collections of elements that are all of the same type, where the order of elements is not significant, and the number of elements may vary.\nAxiom: {'subClassOf': ['homogenous aggregate datatype with variable size'], 'propertyRestrictions': ['[has_member only homogenous unordered aggregate generator with variable size]']}\nGenerated CQs:", "output": "Must a homogenous unordered aggregate datatype with variable size always include at least one homogenous unordered aggregate generator with variable size as a member? | Is it required that every homogenous unordered aggregate datatype with variable size is composed of one or more members which are homogenous unordered aggregate generators with variable size? | Does the presence of a homogenous unordered aggregate generator with variable size as a member determine the classification of a datatype as a homogenous unordered aggregate datatype with variable size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate field component\nDescription: aggregate field component is defined as a subclass of field component and is explicitly disjoint with primitive field component, meaning no instance can belong to both classes simultaneously. Every aggregate field component must play the role of or be associated with some aggregate datatype, as specified by the property restriction (role_of some aggregate datatype). This formalization captures that aggregate field components are complex field components characterized by their association with aggregate datatypes, distinguishing them from primitive field components.\nAxiom: {'subClassOf': ['field component'], 'disjointWith': ['primitive field component'], 'propertyRestrictions': ['[role_of only aggregate datatype]']}\nGenerated CQs:", "output": "Does every aggregate field necessarily include at least one component that plays the role_of some aggregate datatype? | Is it required for an aggregate field to have a component related through role_of to an aggregate datatype? | Can an aggregate field exist without any component that fulfills the role_of some aggregate datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: void datatype\nDescription: void datatype is a subclass of primitive datatype and is explicitly disjoint from non-numeric primitive datatype, numeric primitive datatype, and non-numeric unordered primitive datatype—no individual can belong to more than one of these categories. Members of the void datatype class are characterized by supporting at least the Equal:void operation, meaning comparison for equality is defined. This class formalizes the concept of a primitive datatype that does not represent numeric or non-numeric unordered values, distinguishing it within datatype hierarchies.\nAxiom: {'subClassOf': ['primitive datatype'], 'disjointWith': ['non-numeric primitive datatype', 'numeric primitive datatype', 'non-numeric unordered primitive datatype'], 'propertyRestrictions': ['[has_operation only Equal:void]']}\nGenerated CQs:", "output": "Is it a requirement for any void entity to have at least one has_operation relationship with an instance of Equal:void? | Does every void entity necessarily possess an operation of type Equal:void through the has_operation property? | Can a void exist without the has_operation property relating it to Equal:void? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous aggregate generator\nDescription: homogenous aggregate generator is defined as a subclass of aggregate generator and is equivalent to any generator that is an array generator, bag generator, sequence generator, or set generator. It is explicitly disjoint with heterogenous aggregate generator, meaning that no individual can belong to both classes simultaneously. Members of this class are further characterized by the property restriction that they must have at least one quality that is homogenous, indicating that the elements they generate are of a uniform type or nature.\nAxiom: {'subClassOf': ['aggregate generator'], 'disjointWith': ['heterogenous aggregate generator'], 'equivalentClass': ['(array generator or bag generator or sequence generator or set generator)'], 'propertyRestrictions': ['[has_quality only homogenous]']}\nGenerated CQs:", "output": "Is it required that every aggregate generator possesses the quality of being homogenous? | Does an aggregate generator necessarily exhibit some homogenous characteristic? | Can an aggregate generator be classified as homogenous if it lacks the property 'has_quality' with homogenous? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-numeric ordered primitive datatype\nDescription: non-numeric ordered primitive datatype is a subclass of non-numeric primitive datatype. Members of this class are characterized by possessing the quality of being ordered, meaning their values can be arranged in a specific sequence or order. This formalization specifies that any non-numeric primitive datatype classified here must inherently support order among its instances.\nAxiom: {'subClassOf': ['non-numeric primitive datatype'], 'propertyRestrictions': ['[has_quality only ordered]']}\nGenerated CQs:", "output": "Is it necessary for non-numeric ordered primitive datatype property restrictions to possess the 'has_quality' relationship with at least one instance of 'ordered'? | Can non-numeric ordered primitive datatype property restrictions exist without exhibiting some type of 'ordered' quality? | Does the presence of the 'has_quality' property with 'ordered' define all instances of non-numeric ordered primitive datatype property restrictions? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: direct access property\nDescription: direct access property is a subclass of access type and is disjoint with indirect access property, meaning no property can be both a direct access property and an indirect access property. It is formally defined as being equivalent to either index access or key access, specifying that any direct access property allows retrieval via a direct key or index rather than through intermediary steps.\nAxiom: {'subClassOf': ['access type'], 'disjointWith': ['indirect acess property'], 'equivalentClass': ['(index access and key access)']}\nGenerated CQs:", "output": "Is every instance with direct access property necessarily equivalent to either index access or key access? | Is direct access property defined as the union of index access and key access in the ontology? | Can something possessing direct access property be anything other than index access or key access? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target primitive field component\nDescription: target primitive field component is defined as a subclass of labeled dataset target field component, specializing the notion of dataset fields that serve as targets in labeled datasets. Individuals in this class must play the role of some real, discrete, or boolean datatype, meaning the value types associated with these components are restricted to basic primitive datatypes (real numbers, discrete values, or boolean values). This specification clarifies that target primitive field components are intended for use where target variables are representable by primitive datatypes.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some (real datatype and discrete datatype and boolean datatype)]']}\nGenerated CQs:", "output": "Is every target primitive field component required to participate in the role_of relationship with a real, discrete, or boolean datatype? | Can a target primitive field component have a role_of property with something that is not a real, discrete, or boolean datatype? | Are real datatype, discrete datatype, and boolean datatype the only types permitted in the role_of property for target primitive field components? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target boolean field component\nDescription: target boolean field component is defined as a subclass of labeled dataset target field component. It is further characterized by the restriction that it must play the role of some boolean datatype, meaning instances of this class are components within a labeled dataset that represent target fields specifically associated with boolean data types. This ensures that the target values handled by this component are strictly boolean (i.e., true or false).\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only boolean datatype]']}\nGenerated CQs:", "output": "Is every instance of 'target' required to have the 'component' property with at least one value linked to the role_of property associated with a boolean datatype? | Can 'target' possess the 'component' property only if there is a related role_of property with values of boolean type? | Does the definition of 'target' entail that the 'component' property must always reference some boolean value through the role_of property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target discrete field component\nDescription: target discrete field component is defined as a subclass of labeled dataset target field component. It is characterized by having a role that is associated with some discrete datatype, meaning the data values it represents are distinct and separate (e.g., categories or integers) rather than continuous. This ensures that every target discrete field component specifically involves target fields where the underlying data type is discrete.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only discrete datatype]']}\nGenerated CQs:", "output": "Is it required that every target discrete field component is associated with some role_of discrete datatype? | Can a target discrete field component exist without having the role_of property with a discrete datatype? | Does having the role_of property with at least one discrete datatype qualify an entity as a target discrete field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target real field component\nDescription: target real field component is a subclass of labeled dataset target field component. Individuals of this class are characterized by the restriction that they must play the role of some real datatype. This means that any target real field component represents a field component used as a target in labeled datasets, specifically associated with or representing real-valued data.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only real datatype]']}\nGenerated CQs:", "output": "Is every target real field component required to play the role_of property with at least one real datatype? | Can a target real field component exist without having a role_of relationship to any real datatype? | Does the ontology restrict target real field components to only have role_of relationships with real datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target sequence of real field component\nDescription: target sequence of real field component is a subclass of labeled dataset target field component. Members of this class are characterized by having the role_of some sequence of real datatype, meaning that each instance serves as a target field in a labeled dataset and fills a role associated with a sequence of real numbers (e.g., real-valued vectors or time series). This formalization restricts class membership to those dataset components whose target data are structured as sequences of real numbers.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only sequence of real datatype]']}\nGenerated CQs:", "output": "Is every target sequence of real field component required to be associated by the role_of property with at least one value of the real datatype? | Can a target sequence of real field component exist without possessing the role_of relation to elements of the real type? | Does the class target sequence of real field component necessarily have a role_of property restricted only to instances of the real datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target hierarchical field component\nDescription: target hierarchical field component is defined as a subclass of labeled dataset target field component. Members of this class are further characterized by the axiom that they fulfill the role_of relationship with some instance of either a tree datatype or a directed acyclic graph (DAG) datatype. This indicates that such components specifically serve as target fields in labeled datasets, where the targets are drawn from hierarchical data structures represented as either trees or DAGs.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some (tree datatype and DAG datatype)]']}\nGenerated CQs:", "output": "Is every target hierarchical field component necessarily associated through the 'role_of' property with either a tree datatype or a DAG datatype? | Can a target hierarchical field component have the 'role_of' property linked to both a tree datatype and a DAG datatype? | Does the presence of a 'role_of' relationship to any datatype other than tree or DAG preclude the entity from being classified as a target hierarchical field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target DAG field component\nDescription: target DAG field component is defined as a subclass of labeled dataset target field component and is further characterized by the property restriction that it must serve in the role_of some DAG datatype. This means that any instance of target DAG field component is specifically related to Directed Acyclic Graph (DAG) datatypes, describing target fields in labeled datasets that are intended to represent or interact with DAG structures.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only DAG datatype]']}\nGenerated CQs:", "output": "Is every target DAG field component required to have at least one property that fulfills the role_of some DAG datatype condition? | Can a target DAG field component lack the role_of relationship to any DAG datatype? | Does the existence of a role_of connection to a DAG datatype define the target DAG field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target tree field component\nDescription: target tree field component is defined as a subclass of labeled dataset target field component. Members of this class are characterized by the restriction that they must play the role of some tree datatype. This formalization specifies that any target tree field component is associated with a structure fundamentally based on tree datatypes, differentiating it from other target field components by its reliance on hierarchical or tree-structured data.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only tree datatype]']}\nGenerated CQs:", "output": "Is every target tree field component required to have at least one property that serves the role of some tree datatype? | Can a target tree field component exist without a property that plays the role of a tree datatype? | Does the target tree field component necessarily involve a property that is in the role_of relationship with a tree datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target set of discrete field component\nDescription: target set of discrete field component is defined as a subclass of labeled dataset target field component. Every individual in this class must play the role of some set of discrete datatype, meaning each component serves as a target field in a labeled dataset whose values are constrained to a discrete set. This ensures that the target values for this component are not continuous but instead belong to a well-defined set, aligning with tasks such as multi-class classification in machine learning.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only set of discrete datatype]']}\nGenerated CQs:", "output": "Must every target set of discrete field component have at least one role_of relation to a set of discrete datatype? | Is it required for the target set of discrete field component to be connected, through the role_of property, to a set of discrete datatype? | Does the existence of a target set of discrete field component imply that it plays the role_of with some set of discrete datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target record of primitives field component\nDescription: target record of primitives field component is defined as a subclass of labeled dataset target field component. Every instance of this class has the property that it plays the role_of at least one record of primitives datatype. This formalization ensures that any target record of primitives field component is associated, through the role_of relationship, with data characterized as a record of primitives datatype, linking target fields within labeled datasets to primitive data representations.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only record of primitives datatype]']}\nGenerated CQs:", "output": "Does the target record of primitives require the component property 'role_of' to be associated with at least one individual of type record of primitives datatype? | Is it necessary for each target record of primitives to have the 'role_of' property filled by some record of primitives datatype? | Can a target record of primitives exist without any 'role_of' relationship to a record of primitives datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target record of boolean field component\nDescription: target record of boolean field component is defined as a subclass of labeled dataset target field component. Members of this class are characterized by the property that they play the role_of some record of boolean datatype, indicating that these components specifically serve as targets in datasets where the associated data is restricted to boolean (true/false) values. This formalization ensures that any instance of this class must be linked to records containing only boolean-typed data, supporting clear distinction in data modeling for boolean-labeled target fields.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only record of boolean datatype]']}\nGenerated CQs:", "output": "Is every target record required to have at least one property restriction where the role_of property relates to a record with a boolean datatype? | Can a target record exist without having any role_of property pointing to a record with a boolean value? | Does the ontology allow a target record to have role_of relationships only with records of non-boolean datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target record of discrete field component\nDescription: target record of discrete field component is a subclass of labeled dataset target field component, and is characterized by a property restriction indicating it must play the role of some record of discrete datatype. This means that any instance of this class represents a target field component within a labeled dataset, specifically one that is associated with a record whose datatype is discrete.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only record of discrete datatype]']}\nGenerated CQs:", "output": "Does every target record of a discrete field component necessarily relate via 'propertyRestrictions' to at least one record of a discrete datatype through the role_of property? | Is it required that for each target record of a discrete field component, there exists a property restriction involving role_of some record of a discrete datatype? | Can a target record of a discrete field component exist without being associated, via propertyRestrictions, through role_of, to any record of a discrete datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target structured field component\nDescription: target structured field component is a subclass of labeled dataset target field component. Members of this class are further characterized by the requirement that they play some role in relation to a structured data type; specifically, they must be associated with one or more of the following datatypes: table, array, class, sequence, bag, or set. This definition ensures that any target structured field component is a labeled field designated for structured or collection-type datatypes within the context of a dataset.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some (table datatype and array datatype and class datatype and sequence datatype and bag datatype and set datatype)]']}\nGenerated CQs:", "output": "Is every target structured field component required to have a role_of relationship with at least one of the following datatypes: table, array, class, sequence, bag, or set? | Does the definition of target structured field component necessitate that its role_of property is fulfilled by at least one datatype among table, array, class, sequence, bag, or set? | Can a target structured field component possess a role_of relation to any datatype beyond table, array, class, sequence, bag, or set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive record of boolean field component\nDescription: A descriptive record of boolean field component is defined as a subclass of labeled dataset descriptive field component. Any instance of this class must play the role of some record associated with a boolean datatype, signifying that its descriptive information pertains specifically to data fields that store boolean values.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of only record of boolean datatype]']}\nGenerated CQs:", "output": "Must every descriptive record of a boolean field component have at least one 'role_of' relation to a record of boolean datatype? | Is it required that any descriptive record of a boolean field component be linked by 'role_of' only to records of boolean datatype? | Are there descriptive records of boolean field components that lack any 'role_of' connection with a record of boolean datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive strucured field component\nDescription: descriptive structured field component is defined as a subclass of labeled dataset descriptive field component. It is characterized by having a role that must be associated with at least one of the following datatypes: array datatype, class datatype, sequence datatype, bag datatype, or set datatype. This ensures that instances of descriptive structured field component function specifically in contexts involving structured data representations such as arrays, classes, sequences, bags, or sets.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of some (array datatype and class datatype and sequence datatype and bag datatype and set datatype)]']}\nGenerated CQs:", "output": "Must every descriptive structured field component play a role in at least one array, class, sequence, bag, or set datatype? | Is it required that a descriptive structured field component serves in a role involving only array, class, sequence, bag, or set datatypes? | Can a descriptive structured field component have the role_of property with any datatype type other than array, class, sequence, bag, or set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: procedure-paremeter declaration\nDescription: procedure-parameter declaration is a class characterized by the requirement that its instances must have at least one member that is a parameter and at least one member that is a direction. No superclass is specified, and there are no disjointness axioms defined. This formalization ensures that any individual classified as a procedure-parameter declaration is necessarily associated with both a parameter and a direction through the has_member property.\nAxiom: {'subClassOf': ['specification'], 'propertyRestrictions': ['[has_member some parameter]', '[has_member some direction]']}\nGenerated CQs:", "output": "Is procedure-parameter declaration classified as a kind of specification? | Which specifications include procedure-parameter declaration as a more specific type? | Under what broader concepts can procedure-parameter declaration be grouped in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: datatype role\nDescription: datatype role is defined as a subclass of role, inheriting all characteristics of the broader role class. There are no additional property restrictions specified for datatype role, so its classification is determined solely by its status as a type of role.\nAxiom: {'subClassOf': ['role'], 'propertyRestrictions': ['[role_of some datatype]']}\nGenerated CQs:", "output": "Is it required that every instance with the role 'role_of' is associated with a value of datatype? | Does the property 'role_of' necessarily relate an individual only to values belonging to datatype? | Can an entity be considered within the scope if its 'role_of' relation points to something other than the specified datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: range subtype generator\nDescription: range subtype generator is a class whose members are defined by the existence of at least one relationship via the property has_member to an individual of the class range. This means that any instance of range subtype generator must be associated with at least one range individual. There are no subclass or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['subtype generator'], 'propertyRestrictions': ['[has_member some range]']}\nGenerated CQs:", "output": "Is every range subtype generator necessarily classified as a kind of subtype generator? | Which entities fall under the more specific grouping of subtype generator, such as the range subtype generator? | Into what broader categories within the ontology is range subtype generator subsumed? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-directed labeled graph datatype\nDescription: non-directed labeled graph datatype is defined as a subclass of defined datatype. Any instance of this class must have at least one member that is a graph aggregate component, indicating that its values are aggregates composed of graph elements. This definition formalizes the requirement that all non-directed labeled graph datatypes consist of aggregate components relevant to graph structures.\nAxiom: {'subClassOf': ['defined datatype'], 'propertyRestrictions': ['[has_member some graph aggregate component]', '[has_member some non-directed labeled graph generator]']}\nGenerated CQs:", "output": "Is every non-directed labeled graph required to have at least one member that is a non-directed labeled graph generator? | Can a non-directed labeled graph exist without having a has_member relationship to a non-directed labeled graph generator? | Does the presence of the has_member relationship to a non-directed labeled graph generator define membership within a non-directed labeled graph? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous aggregate generator with variable size\nDescription: A homogenous aggregate generator with variable size is defined as any entity that has the quality of variable size. It is not specified as a subclass of another class, but every instance must possess some quality indicating its size can change or vary.\nAxiom: {'subClassOf': ['homogenous aggregate generator'], 'propertyRestrictions': ['[has_quality some variable size]']}\nGenerated CQs:", "output": "Is homogenous aggregate generator with variable size categorized under homogenous aggregate generator? | Which specific types fall under homogenous aggregate generator, such as those with variable size? | What broader classes encompass homogenous aggregate generator with variable size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: class generator\nDescription: class generator is defined as a subclass of heterogenous aggregate generator and is explicitly disjoint with record generator, ensuring that no individual can simultaneously belong to both classes. Members of this class are characterized by having the following qualities: key access, unordered aggregate structure, allowance of non-unique values, one-dimensionality, and a fixed size. These property restrictions formalize the structural and access properties of the class generator, distinguishing it clearly within the ontology.\nAxiom: {'subClassOf': ['heterogenous aggregate generator'], 'disjointWith': ['record generator', 'table generator'], 'propertyRestrictions': ['[has_quality some key access]', '[has_quality some unordered aggregate]', '[has_quality some non-unique values]', '[has_quality some one dimensional]', '[has_quality some fixed size]']}\nGenerated CQs:", "output": "What formal separation is defined between class generator and table generator in the ontology? | Is there any instance that can be classified as both a class generator and a table generator? | Which other entities are specified as being incompatible with table generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence generator\nDescription: sequence generator is defined as a subclass of homogenous aggregate generator with variable size. Members of this class are characterized by possessing the qualities of: containing non-unique values (allowing repeated elements), forming an ordered aggregate (where the arrangement of elements matters), and supporting access by position (enabling retrieval of elements based on their position in the sequence). There are currently no explicit disjointness restrictions specified for this class.\nAxiom: {'subClassOf': ['homogenous aggregate generator with variable size'], 'disjointWith': ['homogenous unordered aggregate generator with variable size'], 'propertyRestrictions': ['[has_quality some non-unique values]', '[has_quality some ordered aggregate]', '[has_quality some position access]']}\nGenerated CQs:", "output": "What logical separation is defined between sequence generators and homogenous unordered aggregate generators with variable size in the ontology? | Is any system classified as both a sequence generator and a homogenous unordered aggregate generator with variable size? | Which generator classes are declared as incompatible with homogenous unordered aggregate generators with variable size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: pointer generator\nDescription: pointer generator is a class defined by the restriction that its members must be associated with at least one pointer datatype via the property is_member_of. This means that any individual of the pointer generator class must be linked to some instance of pointer datatype, ensuring participation in at least one pointer datatype group. There are no specified superclasses for pointer generator.\nAxiom: {'subClassOf': ['non-aggregate generator'], 'propertyRestrictions': ['[is_member_of some pointer datatype]']}\nGenerated CQs:", "output": "Does pointer generator fall under the classification of non-aggregate generator? | Which types of generators are subclasses of non-aggregate generator, such as pointer generator? | What broader generator categories include pointer generator as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record (tuple) datatype\nDescription: record (tuple) datatype is defined as a subclass of heterogenous aggregate datatype. Instances of this class must possess at least one non-numeric quality, exhibit exactness, and are explicitly non-ordered. Each record (tuple) is composed of members that include at least one record generator and a field-list, reflecting its structure as an aggregation of potentially diverse fields. Additionally, records (tuples) are characterized by operations such as equality comparison (Equal:record) and field replacement (FieldReplace:record), which are applicable specifically to this datatype. These restrictions ensure that records (tuples) function as non-ordered, heterogenous aggregates with field-based structure and well-defined operational behaviors.\nAxiom: {'subClassOf': ['heterogenous aggregate datatype'], 'propertyRestrictions': ['[has_quality some non-numeric]', '[has_operation some Equal:record]', '[has_quality some exact]', '[has_quality some non-ordered]', '[has_member some record generator]', '[has_operation some FieldReplace:record]', '[has_member some field-list]', '[has_operation some FieldSelect:record]']}\nGenerated CQs:", "output": "Is every instance of record (tuple) required to have at least one has_operation property relating to a FieldSelect:record? | Can a record (tuple) exist without any has_operation connection to a FieldSelect:record? | Does the ontology specify that a record (tuple) must always participate in at least one has_operation relationship with a FieldSelect:record? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate imposed ordering\nDescription: aggregate imposed ordering is defined as a subclass of aggregate generator property, and is equivalent to either an ordered aggregate or an unordered aggregate. The class is explicitly disjoint with aggregate-imposed identifier uniqueness, homogenity, agregate size, component mandatoriness, structurness, recursiveness, and access type, guaranteeing that no individual can simultaneously belong to any of these classes. This formalization ensures that aggregate imposed ordering represents a specific generator property related to the ordering characteristic of aggregates, distinct from other aggregate-related properties.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['aggregate-imposed identifier uniqueness', 'homogenity', 'agregate size', 'component mandatoriness', 'structurness', 'recursiveness', 'access type', 'uniqueness'], 'equivalentClass': ['(ordered aggregate or unordered aggregate)']}\nGenerated CQs:", "output": "What classification differentiates aggregate imposed ordering from uniqueness within the ontology? | Is it feasible for a concept to exemplify both aggregate imposed ordering and uniqueness simultaneously? | Which concepts are explicitly incompatible with uniqueness by disjointness declarations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: agregate size\nDescription: aggregate size is defined as a subclass of aggregate generator property and is formally disjoint with the classes uniqueness, component mandatoriness, structurness, and recursiveness—ensuring no individual can belong to aggregate size and any of those classes simultaneously. Furthermore, aggregate size is equivalent to the union of fixed size and variable size, meaning every aggregate size is either a fixed size or a variable size. This class characterizes properties describing whether the size of an aggregate is constant or may vary, distinguishing it from other structural aggregate properties.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['uniqueness', 'component mandatoriness', 'structurness', 'recursiveness', 'access type'], 'equivalentClass': ['(fixed size or variable size)']}\nGenerated CQs:", "output": "What conceptual separation is defined between aggregate size and access type in the ontology? | Is there an instance that can simultaneously belong to both aggregate size and access type categories? | Which ontology categories are specified as disjoint with aggregate size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: structurness\nDescription: structurness is defined as a subclass of aggregate generator property and is mutually exclusive (disjoint) with recursiveness, meaning no instance can simultaneously possess both properties. Structurness is equivalent to the union of structured, unstructured, or semi-structured classes; thus, any entity classified under structurness must be classified as one of these three types and vice versa. This ensures a comprehensive coverage of data organizational forms within the scope of aggregate generator properties, while clearly differentiating from recursive properties.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['recursiveness', 'access type'], 'equivalentClass': ['(structured or unstructured or semi-structured)']}\nGenerated CQs:", "output": "How does the ontology distinguish between structurness and access type? | Is it permissible for an entity to be classified simultaneously as structurness and access type? | Which classes are specified as mutually exclusive with access type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dimensionality\nDescription: dimensionality is defined as a subclass of aggregate generator property, indicating that it represents a specific type of property associated with aggregate generators. This classification establishes that dimensionality inherits all characteristics and constraints of aggregate generator properties, but no additional equivalence to other classes is explicitly specified.\nAxiom: {'subClassOf': ['aggregate generator property'], 'equivalentClass': ['(one dimensional or two dimensional or multi dimensional)']}\nGenerated CQs:", "output": "Is dimensionality equivalent to the union of one dimensional, two dimensional, and multi dimensional classes? | Are all instances of dimensionality necessarily instances of either one dimensional, two dimensional, or multi dimensional? | Does dimensionality include any concepts apart from one dimensional, two dimensional, and multi dimensional? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined datatype\nDescription: defined datatype is a class characterized by the requirement that its members must have at least one has_member relationship to an individual of the class defined generator, and at least one has_member relationship to an individual of the class defined datatype parameter-list. There are no further subclass or property restrictions specified, indicating that the core definition relies on these membership conditions.\nAxiom: {'subClassOf': ['datatype'], 'propertyRestrictions': ['[has_member some defined generator]', '[has_member some defined datatype parameter-list]']}\nGenerated CQs:", "output": "Is defined datatype categorized under the broader class of datatype? | What are the specific subclasses found within datatype, such as defined datatype? | Which higher-level categories does defined datatype belong to in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tag-type\nDescription: tag-type is defined as a subclass of datatype role. This means every instance of tag-type is also an instance of datatype role, inheriting its characteristics, but no additional property restrictions or differentiating axioms are specified for tag-type.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[role_of some datatype]']}\nGenerated CQs:", "output": "Must every tag of type 'propertyRestrictions' necessarily have at least one 'role_of' relationship with some datatype? | Is it required for instances of propertyRestrictions to be associated, via the 'role_of' property, with one or more datatypes? | Can a propertyRestrictions tag exist without participating in a 'role_of' connection to any datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: pointer-element-type\nDescription: pointer-element-type is a class defined by the restriction that its members must play the role of at least one datatype (i.e., each pointer-element-type is characterized as being in the role_of some datatype). No further subclass or disjointness relationships are specified.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[role_of some datatype]']}\nGenerated CQs:", "output": "Is pointer-element-type categorized under the broader class of datatype role? | Which entity types are more specific instances of datatype role, such as pointer-element-type? | What are the parent classes that pointer-element-type is associated with? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: base type\nDescription: base type is defined as a subclass of datatype role, characterized by the property that any base type must be a member of at least one of the following datatypes: array datatype, sequence datatype, bag datatype, set datatype, or extended datatype. This ensures all individuals classified as base type participate in at least one of these specified datatype structures.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[is_member_of some (array datatype or sequence datatype or bag datatype or set datatype or extended datatype)]', '[role_of some datatype]']}\nGenerated CQs:", "output": "Is it required that base type always has the property propertyRestrictions with at least one value of role_of? | Can every instance of base type be associated with propertyRestrictions only if it involves some role_of datatype? | Does the existence of propertyRestrictions on base type guarantee the involvement of role_of datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boolean field-list\nDescription: boolean field-list is defined as a subclass of field-list, where every instance must have at least one member that is a boolean field component. There are no specified disjointness constraints with other classes. This formalizes that a boolean field-list is distinguished by the presence of boolean field components among its members.\nAxiom: {'subClassOf': ['field-list'], 'disjointWith': ['discrete field-list'], 'propertyRestrictions': ['[has_member some boolean field component]']}\nGenerated CQs:", "output": "How does the ontology differentiate boolean field-list from discrete field-list? | Is there a scenario where a field-list instance can be both boolean and discrete? | Which field-list types are declared as mutually exclusive with boolean field-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled dataset field-list\nDescription: labeled dataset field-list is defined as a subclass of field-list, with the additional constraint that every instance must have at least one member that is a labeled dataset target field component. This ensures that any labeled dataset field-list necessarily contains components specifically designated as labeled dataset target field components among its members.\nAxiom: {'subClassOf': ['field-list'], 'propertyRestrictions': ['[has_member some labeled dataset target field component]', '[has_member some labeled dataset descriptive field component]']}\nGenerated CQs:", "output": "Must every labeled dataset include at least one member that is a labeled dataset descriptive field component? | Does a labeled dataset necessarily have a 'has_member' relationship with at least one labeled dataset descriptive field component? | Is it required for every labeled dataset to possess a field that is classified as a labeled dataset descriptive field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: niladic operation\nDescription: niladic operation is defined as a subclass of characterizing operation, meaning it inherits all properties of characterizing operations. It is also explicitly disjoint with n-adic operation, ensuring that no individual can be both a niladic operation and an n-adic operation. This formalization characterizes niladic operation as a distinct type of characterizing operation that is fundamentally separate from operations involving any number of arguments.\nAxiom: {'subClassOf': ['characterizing operation'], 'disjointWith': ['n-adic operation', 'monadic operation']}\nGenerated CQs:", "output": "How are niladic operations and monadic operations conceptually differentiated within the ontology? | Is there any operation that can be classified as both niladic and monadic? | Which operation types are explicitly specified as incompatible with monadic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete-value-list\nDescription: discrete-value-list is defined as a subclass of list specification. This means it represents a specific type of list specification, inheriting all characteristics of list specification, but does not introduce any additional property restrictions or disjointness conditions.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member some discrete-value identifier]']}\nGenerated CQs:", "output": "Is it required that a discrete-value-list always contains at least one member of type discrete-value identifier? | Can a discrete-value-list exist without having any has_member relationship to a discrete-value identifier? | Does the presence of a has_member relationship to a discrete-value identifier define the membership criteria for discrete-value-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined datatype parameter-list\nDescription: defined datatype parameter-list is a subclass of list specification. This means that every defined datatype parameter-list is considered a specific kind of list specification, inheriting all general characteristics of list specifications without introducing any additional property restrictions.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member some defined datatype parameter]']}\nGenerated CQs:", "output": "Is it required for a parameter-list to have at least one has_member relationship with a defined datatype parameter? | Can a parameter-list exist without including any defined datatype parameter as a member? | Does every instance of parameter-list necessarily possess a has_member link with some defined datatype parameter? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index-type list\nDescription: index-type list is defined as a subclass of list specification, indicating that every index-type list is a specialized form of list specification. There are no additional property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member some index-type]']}\nGenerated CQs:", "output": "Must an index-type list always include at least one member that is an index-type? | Can an index-type list be valid if it does not have any member of type index-type? | Is every index-type list required to have the has_member property relating it to an index-type individual? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tree datatype generator\nDescription: tree datatype generator is defined as a subclass of directed labeled graph datatype generator. This indicates that every tree datatype generator is a specialized form of directed labeled graph datatype generator, inheriting its characteristics and constraints. No explicit disjointness with other classes is asserted.\nAxiom: {'subClassOf': ['directed labeled graph datatype generator'], 'disjointWith': ['DAG datatype generator']}\nGenerated CQs:", "output": "What is the ontological distinction between tree datatype generators and DAG datatype generators? | Is there any entity categorized under both tree datatype generator and DAG datatype generator? | Which classes are declared as disjoint with DAG datatype generator in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: scaled datatype\nDescription: scaled datatype is defined as a subclass of numeric ordered primitive datatype, and is explicitly disjoint with integer datatype, meaning an individual cannot simultaneously be an instance of both. Members of scaled datatype are characterized by the presence of certain qualities and members, including some unbounded and exact qualities, as well as the inclusion of scaled radix and scaled factor as members. The class is further defined by its ability to support specific operations: Divide:scaled, Multiply:scaled, Add:scaled, Equal:scaled, Negate:scaled, Round:scaled, and InOrder:scaled. These axioms ensure that any instance of scaled datatype possesses precise numeric capabilities, distinct from integer datatypes, and is designed to support a variety of scaling and arithmetic operations.\nAxiom: {'subClassOf': ['numeric ordered primitive datatype'], 'disjointWith': ['integer datatype', 'rational datatype'], 'propertyRestrictions': ['[has_quality some unbounded]', '[has_operation some Divide:scaled]', '[has_operation some InOrder:scaled]', '[has_operation some Multiply:scaled]', '[has_member some scaled radix]', '[has_quality some exact]', '[has_operation some Negate:scaled]', '[has_operation some Round:scaled]', '[has_operation some Add:scaled]', '[has_member some scaled factor]', '[has_operation some Equal:scaled]']}\nGenerated CQs:", "output": "What ontological distinction is specified between scaled datatypes and rational datatypes? | Is any datatype instance allowed to be classified as both scaled and rational? | Which datatypes are specified as mutually exclusive with rational datatypes in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: rational datatype\nDescription: rational datatype is a subclass of numeric ordered primitive datatype. It possesses numerical, ordered, and exact qualities, indicating its values are precise, can be compared according to an order, and are of a numerical nature. Members of this class support a range of operations restricted to rational types, including addition, multiplication, negation, reciprocation, promoting to a different form, testing equality, ensuring non-negativity, and ordering. These axioms collectively formalize rational datatypes as exact, ordered primitive types over which rational-specific numeric operations are defined.\nAxiom: {'subClassOf': ['numeric ordered primitive datatype'], 'propertyRestrictions': ['[has_operation some Multiply:rational]', '[has_operation some Reciprocal:rational]', '[has_quality some numeric]', '[has_operation some NonNegative:rational]', '[has_quality some ordered]', '[has_operation some Promote:rational]', '[has_operation some Equal:rational]', '[has_operation some Add:rational]', '[has_operation some Negate:rational]', '[has_quality some exact]', '[has_operation some InOrder:rational]', '[has_quality some unbounded]']}\nGenerated CQs:", "output": "Is every instance with the rational datatype required to possess at least one quality via the 'has_quality' property? | Can an entity of rational datatype have the 'has_quality' attribute associated with any type of quality without restriction? | Does the rational datatype necessarily exhibit the existence of some related quality as described by the 'has_quality' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: exactness\nDescription: exactness is defined as a subclass of datatype property, and is designated as disjoint from numericalness, cardinality, boundedness, and equality, ensuring that no individual can belong to both exactness and any of these classes simultaneously. exactness is equivalent to the union of approximate and exact, meaning that any instance of exactness must also be either an instance of approximate or of exact. This models properties that describe whether or not a value or measure is exact or approximate, without overlapping with numericalness, cardinality, boundedness, or equality.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['numericalness', 'cardinality', 'boundedness', 'equality', 'order'], 'equivalentClass': ['(approximate or exact)']}\nGenerated CQs:", "output": "How are the concepts of exactness and order separated within the ontology? | Is there any entity that can be simultaneously classified as exactness and order? | Which classes are specified as incompatible with order in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: order\nDescription: order is a subclass of datatype property, representing properties whose values impose an ordering. It is explicitly disjoint with boundedness, ensuring that no individual can be both an order and a boundedness property. The class is further defined as equivalent to the union of ordered or non-ordered properties, meaning any instance of order must be either ordered or non-ordered, but not both. This characterization distinguishes order as a fundamental property related to the arrangement of data values, distinct from properties concerned with data bounds.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['boundedness', 'equality'], 'equivalentClass': ['(ordered or non-ordered)']}\nGenerated CQs:", "output": "How does the ontology formally differentiate order from equality? | Is it allowable for a concept to be simultaneously classified under both order and equality categories? | Which other mathematical properties are specified as disjoint with equality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete field component\nDescription: discrete field component is defined as a subclass of primitive field component and is explicitly disjoint with boolean field component—no individual can belong to both classes. Every discrete field component must be associated, via the role_of property, with at least one discrete datatype. This ensures that discrete field components specifically relate to discrete datatypes and are distinguished from boolean field components within the ontology.\nAxiom: {'subClassOf': ['primitive field component'], 'disjointWith': ['boolean field component', 'real field component'], 'propertyRestrictions': ['[role_of some discrete datatype]']}\nGenerated CQs:", "output": "Are any entities defined as both discrete field components and real field components? | Which ontology classes are explicitly incompatible with real field components? | What type of exclusivity exists between discrete field components and real field components? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: pointer datatype\nDescription: pointer datatype is a class characterized by several defining properties: it must have at least one member that is a pointer generator and at least one member that is a pointer-element-type. Instances are required to possess the qualities of being non-ordered, non-numeric, and exact. Additionally, pointer datatypes must support the operations \"Equal:pointer\" and \"Dereference:pointer\". No further subclass constraints are specified.\nAxiom: {'subClassOf': ['non-aggregate datatype'], 'propertyRestrictions': ['[has_quality some non-ordered]', '[has_quality some non-numeric]', '[has_member some pointer generator]', '[has_member some pointer-element-type]', '[has_operation some Equal:pointer]', '[has_operation some Dereference:pointer]', '[has_quality some exact]']}\nGenerated CQs:", "output": "Is pointer datatype encompassed by the category of non-aggregate datatype? | Which datatypes are classified as more specific types under non-aggregate datatype, including pointer datatype? | To what broader datatype categories does pointer datatype belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tree datatype\nDescription: tree datatype is defined as a subclass of labeled graph datatype. Every tree datatype is required to have at least one member that is an instance of tree datatype generator, as indicated by the property restriction (has_member some tree datatype generator). There are no explicit disjointness constraints specified for this class. This formalization captures the requirement that tree datatypes are structured within the hierarchy of labeled graph datatypes and are generated or constructed via specific tree datatype generators.\nAxiom: {'subClassOf': ['labeled graph datatype'], 'disjointWith': ['DAG datatype'], 'propertyRestrictions': ['[has_member some tree datatype generator]']}\nGenerated CQs:", "output": "What logical separation is specified between tree datatype and DAG datatype in the ontology? | Is any structure permitted to be classified as both tree datatype and DAG datatype? | Which datatypes are set as disjoint with DAG datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: lower bound\nDescription: lower bound is a class whose instances are required to have exactly one value for the property has-value, and this value must be of type xsd:integer. This ensures each member of lower bound is associated with precisely one integer value.\nAxiom: {'subClassOf': ['bound'], 'propertyRestrictions': ['[has-value exactly 1 xsd:integer]']}\nGenerated CQs:", "output": "Is lower bound categorized as a type of bound? | Which specific subclasses fall under the general class bound? | What broader classes encompass lower bound? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index lowerbound\nDescription: index lowerbound is defined as a subclass of bound. This means that every index lowerbound is a type of bound, inheriting all characteristics and constraints associated with the bound class. There are no additional property restrictions specified for this class.\nAxiom: {'subClassOf': ['bound'], 'propertyRestrictions': ['[has-value exactly 1 xsd:integer]']}\nGenerated CQs:", "output": "Is each instance of index required to have the property lowerbound with exactly one integer value? | Can an index possess more than one lowerbound value assigned as an integer? | Is it necessary that the lowerbound property of index refers to one and only one xsd:integer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined generator\nDescription: defined generator is a subclass of datatype generator. This means every defined generator is necessarily a datatype generator, inheriting all its characteristics, but may also have additional distinguishing properties or constraints not specified here.\nAxiom: {'subClassOf': ['datatype generator'], 'propertyRestrictions': ['[is_member_of some defined datatype]']}\nGenerated CQs:", "output": "Is it necessary for a generator to have the property 'is_member_of' with at least one defined datatype? | Can a generator exist without being a member of any defined datatype? | Does a generator always possess an association to some defined datatype through the 'is_member_of' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real base type\nDescription: real base type is a class whose members are defined by their participation in the role_of property with at least one instance of the real datatype. This means every individual of real base type must be in a role_of relation with some real datatype, but there are no additional subclass relationships or property restrictions specified.\nAxiom: {'subClassOf': ['base type'], 'propertyRestrictions': ['[role_of some real datatype]']}\nGenerated CQs:", "output": "Does real base type fall under the classification of base type? | Which types are directly specified as specializations of base type, such as real base type? | What is the immediate superclass of real base type within the type hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record of real datatype\nDescription: record of real datatype is defined as a subclass of record (tuple) datatype. Any instance of this class must have at least one member that is a real field-list, as specified by the property restriction [has_member some real field-list]. This class represents composite data structures in which at least one component is drawn from the set of real-number-based data fields.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'disjointWith': ['record of discrete datatype'], 'propertyRestrictions': ['[has_member some real field-list]']}\nGenerated CQs:", "output": "How does the ontology differentiate between records of real datatype and records of discrete datatype? | Is there any instance that can be considered both a record of real datatype and a record of discrete datatype? | Which other record types are formally specified as disjoint with records of discrete datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled dataset record datatype\nDescription: labeled dataset record datatype is defined as a subclass of record (tuple) datatype. This means every instance of labeled dataset record datatype is also a record (tuple) datatype, inheriting all characteristics of records, but with additional meaning or usage specific to labeled datasets. No further property restrictions or axioms are specified for this class.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'propertyRestrictions': ['[has_member exactly 1 labeled dataset field-list]']}\nGenerated CQs:", "output": "Is it required that a labeled dataset record contains exactly one has_member property referring to a labeled dataset field-list? | Can a labeled dataset record be associated with more than one labeled dataset field-list via has_member? | Does a labeled dataset record exist if it lacks the has_member relationship with a labeled dataset field-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set of real datatype\nDescription: set of real datatype is a class whose members are collections containing at least one element from the real base type. The only formal restriction is that each instance must have at least one member that is a real base type, ensuring that all such sets are connected to real-numbered data elements.\nAxiom: {'subClassOf': ['set datatype'], 'propertyRestrictions': ['[has_member some real base type]']}\nGenerated CQs:", "output": "Is the set of real datatype encompassed within the set datatype category? | Which datatype classes are direct specializations of set datatype, such as set of real datatype? | To which datatype hierarchies does set of real datatype belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-aggregate datatype\nDescription: non-aggregate datatype is a class whose individuals are required to have at least one member related via the property has_member to an individual of the class non-aggregate generator. There are no specified superclasses. This restriction ensures that every non-aggregate datatype includes at least one non-aggregate generator as a member.\nAxiom: {'subClassOf': ['generated datatype'], 'propertyRestrictions': ['[has_member some non-aggregate generator]']}\nGenerated CQs:", "output": "Does every non-aggregate datatype belong under the category of generated datatype? | Which datatypes are explicitly classified as specializations of generated datatype? | To what higher-level datatype categories does non-aggregate datatype correspond? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ordinal datatype\nDescription: ordinal datatype is defined as a subclass of non-numeric ordered primitive datatype. It is characterized by possessing qualities such as being bounded below, potentially unbounded above, ordered, non-numeric, and exact. Members of this class support specific operations, including having an in-order operation and a successor operation, both tailored for ordinal values. This formalization ensures that ordinal datatypes represent strictly ordered, non-numeric values with well-defined successor functions and clear lower bounds, though they may lack an upper bound.\nAxiom: {'subClassOf': ['non-numeric ordered primitive datatype'], 'propertyRestrictions': ['[has_operation some InOrder:ordinal]', '[has_quality some bounded below]', '[has_quality some unbounded above]', '[has_quality some ordered]', '[has_operation some Successor:ordinal]', '[has_quality some non-numeric]', '[has_quality some exact]', '[has_operation some Equal:ordinal]']}\nGenerated CQs:", "output": "Is it necessary for an entity with ordinal datatype property restrictions to have at least one operation involving equality on an ordinal value? | Does every instance with ordinal datatype property restrictions participate in some operation that uses the 'Equal:ordinal' relation? | Must entities constrained by ordinal datatype property restrictions be associated with a 'has_operation' involving an equal comparison on ordinals? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: datatype\nDescription: datatype is a class characterized by the presence of certain properties: each member must have at least one datatype property (expressed via has_quality), must be associated with at least one characterizing operation (via has_operation), and must have at least one value space attribute (via has_attribute). This formalization ensures that any instance of datatype is inherently linked to specific qualities, operations, and value spaces that define its structure and semantics.\nAxiom: {'subClassOf': ['data representational model'], 'propertyRestrictions': ['[has_quality some datatype property]', '[has_operation some characterizing operation]', '[has_attribute some value space]']}\nGenerated CQs:", "output": "Is datatype categorized under the broader class of data representational model? | Which subclasses constitute the data representational model class, such as datatype? | Of which higher-level concepts is datatype an instance within the domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: numeric ordered primitive datatype\nDescription: numeric ordered primitive datatype is defined as a subclass of numeric primitive datatype. This means that every instance of numeric ordered primitive datatype is also an instance of numeric primitive datatype, inheriting all the characteristics of the parent class. There are no additional property restrictions or axioms further constraining this class.\nAxiom: {'subClassOf': ['numeric primitive datatype'], 'propertyRestrictions': ['[has_quality some ordered]']}\nGenerated CQs:", "output": "Does every 'numeric ordered primitive datatype' instance have at least one 'has_quality' relation to an 'ordered' entity? | Is it mandatory for a 'numeric ordered primitive datatype' to possess a 'has_quality' association with something that is 'ordered'? | Can a 'numeric ordered primitive datatype' exist without being linked via 'has_quality' to any 'ordered' entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence datatype\nDescription: sequence datatype is a subclass of homogenous aggregate datatype with variable size. It is characterized by having members of a base type and potentially a sequence generator. Sequence datatypes are non-ordered, non-numeric collections, and their elements all share the same type. They support operations such as equality checking (Equal:sequence), checking if the sequence is empty (IsEmpty:sequence), obtaining the first element (Head:sequence) or the remainder after the first element (Tail:sequence), and appending new elements (Append:sequence). All members of this class have the qualities of being non-ordered and exact.\nAxiom: {'subClassOf': ['homogenous aggregate datatype with variable size'], 'disjointWith': ['homogenous  unordered aggregate datatype with variable size'], 'propertyRestrictions': ['[has_operation some Equal:sequence]', '[has_quality some exact]', '[has_operation some IsEmpty:sequence]', '[has_quality some non-ordered]', '[has_operation some Head:sequence]', '[has_quality some non-numeric]', '[has_member some base type]', '[has_operation some Append:sequence]', '[has_operation some Tail:sequence]', '[has_member some sequence generator]']}\nGenerated CQs:", "output": "What is the logical separation between sequence datatypes and homogenous unordered aggregate datatypes with variable size? | Is there any datatype that can be classified as both a sequence datatype and a homogenous unordered aggregate datatype with variable size? | Which other datatype categories are formally specified as disjoint with sequence datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set datatype\nDescription: set datatype is a subclass of homogeneous unordered aggregate datatypes with variable size. Members of this class have the qualities of being non-ordered, non-numeric, and exact. A set datatype consists of members that are either of a base type or are generated by a set generator. The class supports fundamental set operations, including union, intersection, difference, subset, equality checking, creating an empty set, and creating a set of sets. These axioms formalize the characteristics and operations that define mathematical sets within a datatype context.\nAxiom: {'subClassOf': ['homogenous  unordered aggregate datatype with variable size'], 'propertyRestrictions': ['[has_quality some non-ordered]', '[has_operation some Lsln:set]', '[has_operation some Intersection:set]', '[has_member some base type]', '[has_operation some SetOf:set]', '[has_member some set generator]', '[has_operation some Equal:class]', '[has_quality some non-numeric]', '[has_quality some exact]', '[has_operation some Empty:set]', '[has_operation some Difference:set]', '[has_operation some Union:set]', '[has_operation some Subset:set]', '[has_operation some Select:set]']}\nGenerated CQs:", "output": "Is it necessary for an entity to have at least one 'has_operation' relationship with an instance of Select:set? | Does every instance within the scope of this ontology perform at least one operation classified under Select:set? | Can an individual possess the 'has_operation' property only if it is associated with the Select:set operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: primitive field component\nDescription: primitive field component is defined as a subclass of field component. This means every primitive field component is also a field component, but no further distinguishing characteristics or property restrictions are specified for this class.\nAxiom: {'subClassOf': ['field component'], 'propertyRestrictions': ['[role_of some primitive datatype]']}\nGenerated CQs:", "output": "Is every primitive field component necessarily associated with a role that plays some primitive datatype? | Must a primitive field component have at least one role linked to a primitive datatype? | Can a primitive field component exist without being connected via 'role_of' to a primitive datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: numeric primitive datatype\nDescription: numeric primitive datatype is a class whose members are entities that possess at least one quality characterized as numeric, as indicated by the property restriction [has_quality some numeric]. There are no asserted superclasses, indicating this class is not explicitly defined as a subclass of any other class in the ontology.\nAxiom: {'subClassOf': ['primitive datatype'], 'propertyRestrictions': ['[has_quality some numeric]']}\nGenerated CQs:", "output": "Is numeric primitive datatype categorized under the broader class of primitive datatype? | Which datatypes are considered specializations of primitive datatype, specifically including numeric primitive datatype? | To which more general datatype groups does numeric primitive datatype belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-numeric unordered primitive datatype\nDescription: non-numeric unordered primitive datatype is defined as a subclass of non-numeric primitive datatype, characterized by the property that its members possess at least one quality of being non-ordered (has_quality some non-ordered). No additional disjointness constraints are declared. This means all individuals in this class are primitive datatypes that are non-numeric and inherently lack an ordering among their values.\nAxiom: {'subClassOf': ['non-numeric primitive datatype'], 'disjointWith': ['non-numeric ordered primitive datatype'], 'propertyRestrictions': ['[has_quality some non-ordered]']}\nGenerated CQs:", "output": "What distinguishes non-numeric unordered primitive datatypes from non-numeric ordered primitive datatypes in the ontology? | Can a primitive datatype be classified as both non-numeric unordered and non-numeric ordered simultaneously? | Which primitive datatypes are defined as disjoint with non-numeric ordered primitive datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: heterogenous aggregate datatype\nDescription: heterogenous aggregate datatype is defined as a class whose members must each have at least one member (via the has_member property) that is an instance of the class heterogenous aggregate generator. This means every instance of heterogenous aggregate datatype is characterized by its association with at least one heterogenous aggregate generator, though no additional axiomatic constraints or superclass relationships are specified for this class.\nAxiom: {'subClassOf': ['aggregate datatype'], 'propertyRestrictions': ['[has_member some heterogenous aggregate generator]']}\nGenerated CQs:", "output": "Is aggregate datatype a more general classification that includes heterogenous aggregate datatype? | Which specific aggregate datatypes are categorized as heterogenous aggregate datatype? | To what broader datatype groups does heterogenous aggregate datatype belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bounded above\nDescription: bounded above is defined as a subclass of bounded, indicating that every instance of bounded above is also an instance of bounded. There are no explicit disjointness restrictions specified for this class. This means any member of bounded above inherits all properties and constraints of bounded, and may have additional distinguishing characteristics not specified here.\nAxiom: {'subClassOf': ['bounded'], 'disjointWith': ['bounded below']}\nGenerated CQs:", "output": "How does the ontology differentiate between entities that are bounded above and those that are bounded below? | Is an entity permitted to belong simultaneously to both the bounded above and bounded below categories? | Which classes, apart from bounded above, are specified as disjoint with bounded below within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bounded\nDescription: bounded is defined as a subclass of boundedness, which means every instance of bounded is necessarily also an instance of boundedness. There are no specified disjointness or additional property restrictions for this class, so its primary characterization is its placement within the hierarchy under boundedness.\nAxiom: {'subClassOf': ['boundedness'], 'disjointWith': ['unbounded']}\nGenerated CQs:", "output": "What is the nature of the distinction between bounded and unbounded entities within the ontology? | Is it permissible for a concept to be classified as both bounded and unbounded simultaneously? | Which classes are formally specified as incompatible with the concept of bounded? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: numeric\nDescription: numeric is defined as a subclass of numericalness, indicating that every instance of numeric is also an instance of numericalness. There are no explicit disjointness axioms specified, so numeric may potentially overlap with other classes unless otherwise stated. This class formalizes the concept of entities possessing numeric or quantitative attributes, within the broader category of numericalness.\nAxiom: {'subClassOf': ['numericalness'], 'disjointWith': ['non-numeric']}\nGenerated CQs:", "output": "What differentiates numeric entities from non-numeric entities in the ontology? | Is there any instance that can simultaneously be classified as numeric and non-numeric? | Which classes have an explicit incompatibility declared with non-numeric? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Delete:bag\nDescription: Delete:bag is defined as a subclass of delete operation, indicating that it inherits all characteristics of delete operations. There are no specified disjointness restrictions for this class.\nAxiom: {'subClassOf': ['delete operation'], 'disjointWith': ['Delete:table']}\nGenerated CQs:", "output": "What distinguishes instances of Delete:bag from those of Delete:table in terms of their classification? | Is there any entity in the ontology that can belong to both Delete:bag and Delete:table simultaneously? | Which classes are asserted to be disjoint with Delete:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Select:array\nDescription: Select:array is defined as a subclass of dyadic select operation. This means that every instance of Select:array is a specific type of dyadic select operation. No additional disjointness or property restrictions are specified for this class.\nAxiom: {'subClassOf': ['dyadic select operation'], 'disjointWith': ['Select:table']}\nGenerated CQs:", "output": "What formal difference is established between Select:array and Select:table in the ontology? | Is there any entity that can simultaneously be an instance of both Select:array and Select:table? | Which classes in the ontology are asserted as mutually exclusive with Select:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Select:bag\nDescription: Select:bag is defined as a subclass of monadic select operation, indicating that every instance of Select:bag represents a specific type of single-argument selection process within the broader category of monadic select operations. There are no explicit disjointness constraints specified for this class.\nAxiom: {'subClassOf': ['monadic select operation'], 'disjointWith': ['Select:set']}\nGenerated CQs:", "output": "How does the ontology distinguish between Select:bag and Select:set? | Is there any instance that can be classified as both Select:bag and Select:set? | Which classes are explicitly specified as disjoint with Select:set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Round:scaled\nDescription: Round:scaled is defined as a subclass of round operation, indicating that it represents a specific type of rounding operation. There are no explicit disjointness constraints with other classes. All instances of Round:scaled are also considered instances of round operation.\nAxiom: {'subClassOf': ['round operation'], 'disjointWith': ['Round:time&date']}\nGenerated CQs:", "output": "How are Round:scaled and Round:time&date conceptually separated within the ontology? | Is any entity allowed to belong simultaneously to both Round:scaled and Round:time&date categories? | Which classes in the ontology are specified as disjoint with Round:time&date? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Successor:enumerated\nDescription: Successor:enumerated is defined as a subclass of successor operation, indicating that every instance of Successor:enumerated is also an instance of successor operation. There are no specified disjointness constraints for this class. This formalization is used to distinguish a specific kind or subset of successor operations, grouped as \"enumerated,\" within the broader successor operation category.\nAxiom: {'subClassOf': ['successor operation'], 'disjointWith': ['Successor:ordinal']}\nGenerated CQs:", "output": "How is the conceptual separation represented between enumerated and ordinal successors in the ontology? | Is it allowable for an entity to be classified as both an enumerated and an ordinal successor? | What are the defined disjoint classes for ordinal successors within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ordered aggregate\nDescription: ordered aggregate is defined as a subclass of aggregate imposed ordering, indicating that it represents a type of aggregate in which an explicit ordering of elements is imposed. There are no disjointness axioms specified, so this class may potentially overlap with other classes unless otherwise stated.\nAxiom: {'subClassOf': ['aggregate imposed ordering'], 'disjointWith': ['unordered aggregate']}\nGenerated CQs:", "output": "How does the ontology distinguish between ordered aggregates and unordered aggregates? | Is there any entity that can simultaneously be classified as both an ordered aggregate and an unordered aggregate? | Which classes are specified as incompatible with unordered aggregate in the ontology structure? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: fixed size\nDescription: fixed size is defined as a subclass of agregate size, indicating that every instance of fixed size is also an instance of agregate size. There are no explicit disjointness constraints specified for this class.\nAxiom: {'subClassOf': ['agregate size'], 'disjointWith': ['variable size']}\nGenerated CQs:", "output": "How does the ontology distinguish between fixed size and variable size entities? | Is it permitted for an entity to be classified as both fixed size and variable size? | Which classes within the ontology are defined as mutually exclusive with variable size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous\nDescription: homogenous is a subclass of homogenity, meaning every instance of homogenous must also be an instance of homogenity. There are no explicit disjointness axioms specified, so individuals of this class are not formally excluded from membership in any other class.\nAxiom: {'subClassOf': ['homogenity'], 'disjointWith': ['heterogenous']}\nGenerated CQs:", "output": "How does the ontology differentiate between homogenous and heterogenous entities? | Is there any entity that can simultaneously belong to both homogenous and heterogenous categories? | Which classes are explicitly specified as mutually exclusive with homogenous? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-unique values\nDescription: non-unique values is defined as a subclass of uniqueness, indicating that it inherits all properties of uniqueness. However, the axiom does not specify any additional distinguishing features or restrictions, and non-unique values is not explicitly disjoint with any other class. This suggests it represents a special case or refinement of uniqueness, where the unique constraints may be relaxed or specifically defined elsewhere.\nAxiom: {'subClassOf': ['uniqueness'], 'disjointWith': ['unique values']}\nGenerated CQs:", "output": "How does the ontology distinguish between non-unique values and unique values? | Is it allowed for a value to be classified as both non-unique and unique simultaneously? | What other types of values, if any, are defined as disjoint with unique values? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target record of reals field component\nDescription: target record of reals field component is a class whose members are characterized by participating in the role_of property with at least one record of real datatype. This means that every instance of this class must function in some role specifically related to a record whose values are of a real datatype.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some record of real datatype]']}\nGenerated CQs:", "output": "Is target record of reals field component classified under labeled dataset target field component? | Which field components are considered more specific than labeled dataset target field component, such as target record of reals field component? | To which broader categories does target record of reals field component belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive record of reals field component\nDescription: descriptive record of reals field component is defined as a subclass of labeled dataset descriptive field component. This means that every instance of descriptive record of reals field component is also considered an instance of labeled dataset descriptive field component. There are no additional property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of some record of real datatype]']}\nGenerated CQs:", "output": "Is every descriptive record of a reals field component required to have at least one 'role_of' relationship with a record of real datatype? | Can a descriptive record of a reals field component exist without being related via 'role_of' to any record of real datatype? | Does the ontology ensure that the presence of the 'role_of' property in a descriptive record of a reals field component necessarily points to an individual of type record of real datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive set of integer field component\nDescription: descriptive set of integer field component is defined as a subclass of labeled dataset descriptive field component. This means every descriptive set of integer field component is inherently a labeled dataset descriptive field component, inheriting all its properties and constraints. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of some set of integer datatype]']}\nGenerated CQs:", "output": "Is every descriptive set of integer field component required to have at least one role_of relationship to a set of integer datatype? | Must all descriptive sets of integer field components be assigned some role_of that connects them with a set of integer datatype? | Does the presence of a role_of link to a set of integer datatype necessarily characterize every descriptive set of integer field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_identifier\nDescription: The property \"has_identifier\" is defined as a sub-property of \"has_attribute\" and does not have explicitly stated characteristics, domain, or range restrictions. It represents an attribute relationship, likely used to associate an entity with a unique identifier, though no inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Which properties are considered subproperties under has_attribute? | Is has_identifier categorized as a subproperty of has_attribute? | Does assigning a has_identifier property inherently assign a has_attribute property as well? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is_member_of\nDescription: The property \"is_member_of\" does not have specified domain or range restrictions and has no special characteristics defined. It is a sub-property of \"attribute_of\" and has \"has_member\" as its inverse property. This property is used to relate an entity to a group or collection to which it belongs.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['attribute_of'], 'inverseOf': []}\nGenerated CQs:", "output": "What is the logical connection between ‘is_member_of’ and ‘has_member’ in the ontology? | If entity A is a member of entity B, does that entail that B has member A according to the ontology? | Which property is declared as the inverse of ‘is_member_of’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_operation\nDescription: The property \"has_operation\" does not have explicitly defined characteristics, domain, or range restrictions. It is declared as a sub-property of \"has_attribute,\" indicating that it inherits the general meaning of associating an attribute with an entity, with a more specific focus on operations. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is every instance of has_operation necessarily an instance of has_attribute? | Which properties are defined as subproperties under has_attribute? | What superproperties are associated with has_operation in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_role\nDescription: The property \"has_role\" has no explicitly defined domain, range, or characteristics. It is a direct subproperty of owl:topObjectProperty, indicating broad applicability between individuals. No inverse property is specified. This property can be used to associate entities with their assigned roles without additional restrictions.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is has_role a specialization of owl:topObjectProperty? | Which properties are classified as subproperties under owl:topObjectProperty? | Does the assertion of has_role between entities entail a more general relationship as defined by owl:topObjectProperty? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: represents\nDescription: The property \"represents\" has no explicitly defined domain, range, or characteristics, and does not specify an inverse property. It is a sub-property of owl:topObjectProperty, indicating it is a very general object property that can relate any two individuals in the ontology. No further semantic constraints are provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is represents a subproperty of any top-level object property in the ontology? | Which properties are classified as superproperties of represents? | Does every use of the represents property imply a relationship defined by the most general object property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: role_of\nDescription: The property \"role_of\" does not have explicitly specified domain or range restrictions and lacks defining characteristics. It is a sub-property of \"owl:topObjectProperty\" and has \"has_role\" as its inverse property. This property is typically used to relate a role to an entity, indicating that the entity plays or fulfills a particular role.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "How are 'role_of' and 'has_role' semantically connected as inverse properties in the ontology? | If entity E is linked to F via 'role_of', does the ontology entail that F is connected to E via 'has_role'? | Which property is defined as the inverse of 'role_of' in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is_operation_of\nDescription: The property \"is_operation_of\" has no explicitly defined domain or range restrictions and does not possess any special logical characteristics. It is defined as a sub-property of \"attribute_of,\" indicating that it represents a specific kind of attributions between entities. Additionally, it has an inverse property \"has_operation,\" establishing a bidirectional relationship between related entities.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['attribute_of'], 'inverseOf': []}\nGenerated CQs:", "output": "How are the properties ‘is_operation_of’ and ‘has_operation’ interconnected in the ontology? | If an entity X is an operation of Y, does it follow that Y has operation X under the ontology’s semantics? | Which property is designated as the inverse of ‘is_operation_of’ in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has-value\nDescription: The property \"has-value\" does not have explicitly defined characteristics, domain, range, super-properties, or inverse properties. This indicates a general-purpose property whose usage and constraints are not restricted by axioms in the current ontology specification.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can anything be the domain of the 'has-value' property, or is its domain truly undefined? | What can be the range of the property 'has-value'? | Is it correct that the property 'has-value' does not have a specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_member\nDescription: The property \"has_member\" has no explicit domain or range restrictions and is not defined with characteristics such as functional or transitive. It is declared as a sub-property of \"has_attribute,\" indicating that it inherits the general semantics of attributive relations. No inverse property is specified. This property is used to relate a group or collection to its members in a manner consistent with general attribute relations.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['has_attribute'], 'inverseOf': []}\nGenerated CQs:", "output": "Is has_member considered a specific type of has_attribute property? | What are the direct superproperties of has_member? | Can 'has_member' relate to any kind of entity as its object, or should there be a defined range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: attribute_of\nDescription: The property \"attribute_of\" has no explicitly defined characteristics, domain, or range restrictions. It is not specified as a sub-property of any other property and does not have an inverse property. This property can be used generally to relate an attribute to any entity without further ontological constraints.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'attribute_of' be associated with values of any type as its object? | Is it correct that the property 'attribute_of' does not have a specified range? | Can 'attribute_of' relate to any type of subject, or is there a restriction on its domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: owl:topObjectProperty\nDescription: The property \"owl:topObjectProperty\" has no specified domain, range, characteristics, super-properties, or inverse property. It is the most general object property in OWL ontologies, capable of relating any pair of individuals without restriction.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What entities can serve as the domain for owl:topObjectProperty? | What can be the range of the property 'owl:topObjectProperty'? | Is it valid for owl:topObjectProperty to lack a specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is-about\nDescription: The property \"is-about\" has no defined characteristics, domain, range, super-properties, or inverse properties. This indicates that it is a general-purpose property without explicit usage constraints or hierarchical relationships in the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "Is is-about classified as a subproperty of owl:topObjectProperty? | Which superproperties are associated with is-about in the ontology? | What subproperties, if any, are defined under owl:topObjectProperty? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is_quality_of\nDescription: The property \"is_quality_of\" has no specified domain, range, characteristics, super-properties, or inverse properties. This indicates it can relate any two individuals without restrictions, and does not inherit constraints or semantics from other properties.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': ['has_quality']}\nGenerated CQs:", "output": "What is the logical connection between ‘is_quality_of’ and ‘has_quality’ as defined in the ontology? | If entity A is related to entity B via ‘is_quality_of’, does this entail that B is related to A via ‘has_quality’? | Which object property is specified as the inverse of ‘is_quality_of’ in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: identifier_for\nDescription: The property \"identifier_for\" has no explicitly defined domain or range restrictions and does not possess special characteristics. It is a sub-property of \"attribute_of\", indicating that it inherits the general meaning of being an attribute but specializes it for identifiers. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['attribute_of'], 'inverseOf': ['has_identifier']}\nGenerated CQs:", "output": "What is the logical correspondence between the properties ‘identifier_for’ and ‘has_identifier’ in the ontology? | If entity A is identified by B using ‘identifier_for’, does it follow that B has A as an identifier via ‘has_identifier’? | Which property operates as the inverse of ‘identifier_for’ in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_quality\nDescription: The property \"has_quality\" has no specified characteristics, domain, range, super-properties, or inverse properties. This generic property is intended to relate an entity to a quality, but its use is unconstrained by axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "Is has_quality a subproperty of owl:topObjectProperty? | Which properties are subproperties of owl:topObjectProperty? | What superproperties does has_quality have within the property hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_attribute\nDescription: The property \"has_attribute\" has no explicitly defined characteristics, domain, or range restrictions. It is a sub-property of \"owl:topObjectProperty,\" suggesting it is a general-purpose object property. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': ['has_attribute']}\nGenerated CQs:", "output": "What is the inverse property associated with ‘has_attribute’ defined in the ontology? | If entity A has an attribute B, can we infer that B has an attribute A within the ontology’s structure? | How does the ontology specify the logical connection between ‘has_attribute’ and its inverse? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: denotes\nDescription: The property \"denotes\" has no defined domain, range, characteristics, super-properties, or inverse properties. It is a generic property with no explicit ontological constraints.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['is-about'], 'inverseOf': []}\nGenerated CQs:", "output": "Which properties are defined as subproperties under is-about, such as denotes? | Does an assertion using denotes also satisfy constraints requiring is-about? | What superproperties are associated with denotes in the ontology hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CognitiveLoadAssessment\nDescription: CognitiveLoadAssessment is defined as a subclass of ExperimentalAssessment, representing a specific type of assessment dedicated to measuring cognitive load in experimental contexts. Members of this class are characterized by having exactly one dual task score and exactly one mono task score, with both scores required to be data literals. This formalization ensures that each instance of CognitiveLoadAssessment includes precisely one measurable outcome for both mono-task and dual-task conditions, facilitating standardized evaluation and comparison of cognitive load across assessments.\nAxiom: {'subClassOf': ['ExperimentalAssessment'], 'propertyRestrictions': ['[hasDualTaskScore exactly 1]', '[hasMonoTaskScore only rdfs:Literal]', '[hasDualTaskScore only rdfs:Literal]']}\nGenerated CQs:", "output": "Is it required that a CognitiveLoadAssessment is associated with exactly one mono task score? | Can a CognitiveLoadAssessment have more than one value for the hasMonoTaskScore property? | Does every CognitiveLoadAssessment instance have one and only one hasMonoTaskScore assigned? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ActivityStatusType\nDescription: ActivityStatusType is defined as a subclass of Type and is equivalent to the set containing the statuses: omitted, completed, and incomplete. This means that any instance of ActivityStatusType must be one of these three specific statuses, providing a controlled vocabulary for representing the status of an activity.\nAxiom: {'subClassOf': [], 'equivalentClass': ['{omitted, completed, incomplete}']}\nGenerated CQs:", "output": "Is ActivityStatusType classified under the broader category of Type? | Which types encompass ActivityStatusType as a more specific subtype? | What specific categories fall within the scope of Type, including ActivityStatusType? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DiagnosisType\nDescription: DiagnosisType is defined as a subclass of Type, and is equivalent to the set containing exactly three classes: predementia, dementia, and healthy. This means that any individual classified as a DiagnosisType must be either predementia, dementia, or healthy—no other categories are permitted. This formalization ensures a closed, mutually-exclusive categorization of diagnostic statuses within the ontology.\nAxiom: {'subClassOf': ['Type'], 'equivalentClass': []}\nGenerated CQs:", "output": "Is every DiagnosisType necessarily either predementia, dementia, or healthy? | Is DiagnosisType defined as the union of predementia, dementia, and healthy categories? | Can any instance exist in DiagnosisType that is not classified as predementia, dementia, or healthy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LateralityType\nDescription: LateralityType is a subclass of Type, characterized as an enumerated class consisting exclusively of the instances 'left_handed' and 'right_handed'. Any instance of LateralityType must be either 'left_handed' or 'right_handed', capturing the concept of handedness in individuals.\nAxiom: {'subClassOf': ['Type'], 'equivalentClass': []}\nGenerated CQs:", "output": "Is every instance of LateralityType restricted to being either left_handed or right_handed? | Is LateralityType equivalent to the set containing only left_handed and right_handed individuals? | Are there any LateralityType entities besides left_handed and right_handed? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NeuropsychiatricAndMoodAssessment\nDescription: NeuropsychiatricAndMoodAssessment is defined as a subclass of ClinicalAssessment. Members of this class are characterized by the mandatory presence of exactly one value for each of the following properties: npi (Neuropsychiatric Inventory), dsm_ivDepressionCriteria, and apathyInventory, each being of type xsd:string. Furthermore, these properties cannot have values outside the string datatype. This formalization ensures that any individual instance of NeuropsychiatricAndMoodAssessment contains exactly and only one string value for each of these assessment criteria, supporting precise and consistent neuropsychiatric and mood evaluation.\nAxiom: {'subClassOf': ['ClinicalAssessment'], 'propertyRestrictions': ['[npi only xsd:string]', '[npi exactly 1 xsd:string]', '[dsm_ivDepressionCriteria exactly 1 xsd:string]', '[dsm_ivDepressionCriteria only xsd:string]', '[apathyInventory only xsd:string]']}\nGenerated CQs:", "output": "Is it required that a NeuropsychiatricAndMoodAssessment has exactly one value for the apathyInventory property? | Can a NeuropsychiatricAndMoodAssessment include more than one apathyInventory, or none at all? | Does the axiom restrict NeuropsychiatricAndMoodAssessment to having a single apathyInventory entry represented as a string? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FunctionalAbilitiesData\nDescription: FunctionalAbilitiesData is a subclass of MeasuredData, characterized by having exactly one handTrajectory property, which must be of type HandTrajectoryType. All values for handTrajectory in instances of this class are restricted to HandTrajectoryType, ensuring that each FunctionalAbilitiesData instance is associated with a single, specific hand trajectory measurement.\nAxiom: {'subClassOf': ['MeasuredData'], 'propertyRestrictions': ['[handTrajectory only HandTrajectoryType]']}\nGenerated CQs:", "output": "Is each FunctionalAbilitiesData instance required to have exactly one value for the property 'handTrajectory' of type HandTrajectoryType? | Can a FunctionalAbilitiesData entity be associated with more than one HandTrajectoryType through the 'handTrajectory' property? | Does the ontology permit a FunctionalAbilitiesData instance to have no assigned value for 'handTrajectory'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: OrganisationEfficiencyData\nDescription: OrganisationEfficiencyData is a subclass of MeasuredData representing measured values related to organizational efficiency. Every instance of this class must have exactly one value each for distanceWalked, areasOfInterestExplored, and areasOfNoInterestExplored, and all of these values must be literals. This class structurally enforces that the data captured is precisely quantified for these three efficiency-related attributes.\nAxiom: {'subClassOf': ['MeasuredData'], 'propertyRestrictions': ['[areasOfInterestExplored only rdfs:Literal]', '[areasOfNoInterestExplored only rdfs:Literal]', '[areasOfNoInterestExplored exactly 1]', '[areasOfInterestExplored exactly 1]', '[distanceWalked exactly 1]']}\nGenerated CQs:", "output": "Is OrganisationEfficiencyData restricted to having the property distanceWalked only with instances of rdfs:Literal? | Can OrganisationEfficiencyData possess a distanceWalked value that is not an rdfs:Literal? | Are all distanceWalked properties of OrganisationEfficiencyData necessarily of type rdfs:Literal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SemiDirectedTask\nDescription: SemiDirectedTask is a subclass of Task characterized by the measurement of at least some FunctionalAbilitiesData and some CognitiveAbilitiesData. Additionally, any measuredData associated with a SemiDirectedTask must be exclusively of types CognitiveAbilitiesData, FunctionalAbilitiesData, or StressData—no other data types are permitted. This formalization ensures that tasks within this class are specifically designed to evaluate both cognitive and functional abilities, potentially including stress indicators, thereby aligning with their defined assessment scope.\nAxiom: {'subClassOf': ['Task'], 'propertyRestrictions': ['[measuredData some CognitiveAbilitiesData]', '[measuredData only (CognitiveAbilitiesData or FunctionalAbilitiesData or StressData)]']}\nGenerated CQs:", "output": "Does every SemiDirectedTask require the presence of at least one measuredData instance of type FunctionalAbilitiesData? | Is it obligatory for a SemiDirectedTask to be associated with FunctionalAbilitiesData via the measuredData property? | Can a SemiDirectedTask exist without having any measuredData that qualify as FunctionalAbilitiesData? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PersonWithPredementia\nDescription: PersonWithPredementia is defined as a subclass of Person and is equivalent to those individuals who have at least one clinical record containing an assessment that diagnoses predementia. This formalization ensures that any member of the PersonWithPredementia class must be associated with a clinical record documenting a diagnosis assessment explicitly identifying predementia, thus providing a clear ontological basis for representing individuals in early stages of cognitive decline.\nAxiom: {'subClassOf': ['Person'], 'equivalentClass': []}\nGenerated CQs:", "output": "Does every PersonWithPredementia necessarily have at least one record that contains a diagnosis assessment for predementia? | Is PersonWithPredementia logically equivalent to having a clinical record that includes an assessment component with a predementia diagnosis? | Can PersonWithPredementia be fully defined as someone with a clinical record documenting an assessment that diagnoses predementia? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S2_SemiDirectedActivitiesStep\nDescription: S2_SemiDirectedActivitiesStep is defined as a subclass of ProtocolStep. Any instance of this class must involve exactly one of each of the following tasks: TurnOnTVTask, WaterPlantTask, PrepareHotTeaTask, CallPsychologistTask, AnswerPhoneTask, FindBusLineOnMapTask, PayBillTask, EstablishAccountBalanceTask, LeaveRoomTask, and PrepareDrugBoxTask. Furthermore, the tasks involved are restricted to the following types: AnswerPhoneTask, CallPsychologistTask, EstablishAccountBalanceTask, FindBusLineOnMapTask, LeaveRoomTask, PayBillTask, PrepareDrugBoxTask, PrepareHotTeaTask, Task, TurnOnTVTask, or WaterPlantTask. This formalization ensures that any S2_SemiDirectedActivitiesStep is a uniquely structured protocol step composed of this specific set of semi-directed activities.\nAxiom: {'subClassOf': ['ProtocolStep'], 'propertyRestrictions': ['[involvesTask exactly 1 TurnOnTVTask]', '[involvesTask exactly 1 PrepareHotTeaTask]', '[involvesTask exactly 1 CallPsychologistTask]', '[involvesTask exactly 1 AnswerPhoneTask]', '[involvesTask exactly 1 FindBusLineOnMapTask]', '[involvesTask only (AnswerPhoneTask or CallPsychologistTask or EstablishAccountBalanceTask or FindBusLineOnMapTask or LeaveRoomTask or PayBillTask or PrepareDrugBoxTask or PrepareHotTeaTask or Task or TurnOnTVTask or WaterPlantTask)]', '[involvesTask exactly 1 PayBillTask]', '[involvesTask exactly 1 EstablishAccountBalanceTask]', '[involvesTask exactly 1 LeaveRoomTask]', '[involvesTask exactly 1 PrepareDrugBoxTask]']}\nGenerated CQs:", "output": "Is it required that an S2_SemiDirectedActivitiesStep involves exactly one WaterPlantTask? | Can an S2_SemiDirectedActivitiesStep include more or less than one WaterPlantTask through the involvesTask property? | Does the cardinality restriction on involvesTask for S2_SemiDirectedActivitiesStep exclude the possibility of multiple or zero WaterPlantTask instances? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S1_P12_CountingBackwardsTask\nDescription: S1_P12_CountingBackwardsTask is a subclass of DirectedTask characterized by specific measurement and property constraints. Every instance of this class must have measured data that includes some LatencyData and some MoodVoiceData. Additionally, measured data associated with this task may only be of the types LatencyData, MoodVoiceData, or StressData. The countingType property for individuals in this class is restricted to either _20_0 or _305_285. These axioms ensure that S1_P12_CountingBackwardsTask is a directed task that involves recording response latency, mood/voice indicators, and potentially stress, with a clearly defined range of permissible counting types.\nAxiom: {'subClassOf': ['DirectedTask'], 'propertyRestrictions': ['[measuredData only (LatencyData or MoodVoiceData or StressData)]', '[countingType only {_20_0, _305_285}]', '[measuredData some MoodVoiceData]']}\nGenerated CQs:", "output": "Is it required that the S1_P12_CountingBackwardsTask has at least one measuredData property associated with LatencyData? | Must every instance of S1_P12_CountingBackwardsTask involve measuredData relating specifically to LatencyData? | Can S1_P12_CountingBackwardsTask exist without any measuredData property referring to LatencyData? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S1_P22_ArticulationControlTask\nDescription: S1_P22_ArticulationControlTask is defined as a subclass of DirectedTask. Members of this class are required to have at least one measuredData property linked to LatencyData, and all measuredData properties must be restricted to either LatencyData or StressData. This ensures that any instance of S1_P22_ArticulationControlTask is characterized by the measurement of latency and/or stress data, with no other data types permitted for the measuredData property.\nAxiom: {'subClassOf': ['DirectedTask'], 'propertyRestrictions': ['[measuredData only (LatencyData or StressData)]']}\nGenerated CQs:", "output": "Is it required that an instance of S1_P22_ArticulationControlTask has at least one measuredData property relating to LatencyData? | Does every S1_P22_ArticulationControlTask involve measuredData that includes LatencyData? | Can a S1_P22_ArticulationControlTask exist without any measuredData associated with LatencyData? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DemographicCharacteristicsRecord\nDescription: DemographicCharacteristicsRecord is a class characterized by strict property constraints to ensure comprehensive demographic data representation. Each instance must have exactly one dateOfBirth value of type xsd:dateTime, exactly one gender value of type GenderType, and exactly one educationLevel value of type rdfs:Literal. Additionally, each record must specify exactly one size (as a rdfs:Literal), and may optionally include laterality, restricted to values defined by LateralityType. These axioms ensure that every record is complete with respect to core demographic attributes while maintaining precise data types and cardinality for each property.\nAxiom: {'propertyRestrictions': ['[dateOfBirth only xsd:dateTime]', '[gender only GenderType]', '[laterality only LateralityType]', '[size exactly 1]', '[educationLevel only rdfs:Literal]', '[educationLevel exactly 1]', '[gender exactly 1 GenderType]', '[dateOfBirth exactly 1 xsd:dateTime]']}\nGenerated CQs:", "output": "Are all values of the 'size' property in a DemographicCharacteristicsRecord restricted to rdfs:Literal types? | Is it allowed for a DemographicCharacteristicsRecord to have a 'size' property with a type other than rdfs:Literal? | Does every 'size' property for DemographicCharacteristicsRecord necessarily correspond to an rdfs:Literal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protocol\nDescription: Protocol is a class that represents a structured set of actions or procedures, characterized by a well-defined workflow. Each instance of Protocol must have at least one protocol step and all protocol steps associated with a protocol must be instances of ProtocolStep. Additionally, every protocol is required to specify exactly one date, which must be an instance of xsd:dateTime, and exactly one participant, who must be an instance of Person. The axioms ensure strict adherence to these requirements, supporting precise modeling of procedural activities involving a single documented participant, a single date, and one or more procedural steps.\nAxiom: {'propertyRestrictions': ['[protocolStep some ProtocolStep]', '[protocolStep only ProtocolStep]', '[date exactly 1 xsd:dateTime]', '[hasParticipant exactly 1 Person]', '[hasParticipant only Person]']}\nGenerated CQs:", "output": "Is the date property of a Protocol instance restricted exclusively to values of type xsd:dateTime? | Can a Protocol have the date property with any value that is not an xsd:dateTime? | Are all instances of Protocol required to use only xsd:dateTime typed values for their date property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AbilityToOrganiseAssessment\nDescription: AbilityToOrganiseAssessment is defined as a subclass of ExperimentalAssessment. This means that every AbilityToOrganiseAssessment is an instance of ExperimentalAssessment, inheriting all its general characteristics. This class specifically represents assessments focusing on the capacity to organise or structure experimental tasks or processes. No further property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['ExperimentalAssessment']}\nGenerated CQs:", "output": "Which categories of ExperimentalAssessment encompass AbilityToOrganiseAssessment as a specific type? | Is AbilityToOrganiseAssessment classified as a kind of ExperimentalAssessment? | What are the more specific assessment abilities that fall under ExperimentalAssessment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ApathyAssessment\nDescription: ApathyAssessment is defined as a subclass of ExperimentalAssessment. This means that every ApathyAssessment is a specific type of ExperimentalAssessment, inheriting all characteristics of the latter. It is used to systematically evaluate or measure apathy within an experimental or research context.\nAxiom: {'subClassOf': ['ExperimentalAssessment']}\nGenerated CQs:", "output": "Which broader assessment classes does ApathyAssessment fall under? | What are the types of assessments classified under ExperimentalAssessment, including ApathyAssessment? | Is ApathyAssessment categorized as a form of ExperimentalAssessment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FunctionalAbilityAssessment\nDescription: FunctionalAbilityAssessment is defined as a subclass of ExperimentalAssessment. This means every FunctionalAbilityAssessment is also an ExperimentalAssessment, inheriting its characteristics. No further restrictions or disjointness axioms are specified, so FunctionalAbilityAssessment can be understood as a specialized form of ExperimentalAssessment focused on evaluating functional abilities.\nAxiom: {'subClassOf': ['ExperimentalAssessment']}\nGenerated CQs:", "output": "Is FunctionalAbilityAssessment categorized under ExperimentalAssessment? | What types of assessments fall within ExperimentalAssessment, including FunctionalAbilityAssessment? | Which parent classes encompass FunctionalAbilityAssessment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MemorySelfAppraisalAssessment\nDescription: MemorySelfAppraisalAssessment is defined as a subclass of ExperimentalAssessment. This means it represents a specific type of assessment conducted in an experimental context, which focuses on evaluating an individual's own appraisal or judgement of their memory abilities. Members of this class inherit all characteristics of ExperimentalAssessment, while emphasizing the self-evaluation of memory performance.\nAxiom: {'subClassOf': ['ExperimentalAssessment']}\nGenerated CQs:", "output": "Is MemorySelfAppraisalAssessment classified under the broader category of ExperimentalAssessment? | Which overarching assessment categories include MemorySelfAppraisalAssessment as a member? | What specific types of ExperimentalAssessment does MemorySelfAppraisalAssessment represent? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: StressAssessment\nDescription: StressAssessment is defined as a subclass of ExperimentalAssessment, indicating it inherits all properties of ExperimentalAssessment. This class represents assessments specifically designed to evaluate stress within an experimental context. No additional property restrictions or disjointness axioms are specified, so it can encompass any form of assessment fitting this criterion.\nAxiom: {'subClassOf': ['ExperimentalAssessment']}\nGenerated CQs:", "output": "Which types of assessments are categorized as subkinds of ExperimentalAssessment, such as StressAssessment? | Is StressAssessment classified under the broader type of ExperimentalAssessment? | To what higher-level assessment classes does StressAssessment belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HandTrajectoryType\nDescription: HandTrajectoryType is defined as a subclass of Type. This class represents a specific categorization or kind of type that pertains to hand trajectory, inheriting all characteristics of Type. No additional axioms or restrictions are specified.\nAxiom: {'subClassOf': ['Type']}\nGenerated CQs:", "output": "What categories encompass HandTrajectoryType as a member, given its position under Type? | Which concepts are directly organized under the class Type, including HandTrajectoryType? | Is HandTrajectoryType classified as a more specific concept under Type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AnswerPhoneTask\nDescription: AnswerPhoneTask is defined as a subclass of SemiDirectedTask, indicating that it inherits all characteristics of semi-directed tasks but is specialized for the context of answering phone calls. This classification asserts that every instance of AnswerPhoneTask is also an instance of SemiDirectedTask, typically involving user interaction with some degree of guidance but not complete direction. No additional property or disjointness axioms are specified.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "Which higher-level task types include AnswerPhoneTask as a specialization? | What specific tasks are encompassed by the category SemiDirectedTask, such as AnswerPhoneTask? | Does AnswerPhoneTask fall under the broader classification of SemiDirectedTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CallPsychologistTask\nDescription: CallPsychologistTask is defined as a subclass of SemiDirectedTask. This classification indicates that any instance of CallPsychologistTask inherits all properties of SemiDirectedTask, representing a specific type of task that involves some level of pre-defined guidance or structure. No additional distinguishing properties or constraints are specified beyond its membership in the SemiDirectedTask category.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "Is CallPsychologistTask classified as a kind of SemiDirectedTask? | What broader task types encompass CallPsychologistTask? | Which specific tasks are categorized under SemiDirectedTask, including CallPsychologistTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: EstablishAccountBalanceTask\nDescription: EstablishAccountBalanceTask is defined as a subclass of SemiDirectedTask, indicating that it inherits all properties and constraints of SemiDirectedTask. This class represents tasks specifically related to establishing or determining an account balance, and it is semantically positioned within the ontology as a type of semi-directed task. No further restrictions or differentiators are specified in the current axioms.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "Which tasks are defined as more specific than SemiDirectedTask, including EstablishAccountBalanceTask? | Is EstablishAccountBalanceTask a specialized form of SemiDirectedTask? | What broader task categories include EstablishAccountBalanceTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FindBusLineOnMapTask\nDescription: FindBusLineOnMapTask is defined as a subclass of SemiDirectedTask. This indicates that any instance of FindBusLineOnMapTask inherits the characteristics of a semi-directed task, which typically involves guidance but allows for a degree of user autonomy. The class is intended to represent tasks in which the objective is to locate a specific bus line on a map interface.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "Does FindBusLineOnMapTask fall under the broader classification of SemiDirectedTask? | What are the general task categories that FindBusLineOnMapTask is associated with? | Which tasks are categorized as specialized forms of SemiDirectedTask, specifically including FindBusLineOnMapTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LeaveRoomTask\nDescription: LeaveRoomTask is defined as a subclass of SemiDirectedTask. This means that every LeaveRoomTask must fulfill all the characteristics of a SemiDirectedTask, but it represents a more specific type of task centered on the activity of leaving a room. No additional restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "What higher-level task categories include LeaveRoomTask as a member? | Is LeaveRoomTask categorized as a type of SemiDirectedTask? | Which specific tasks fall under the broader classification of SemiDirectedTask, including LeaveRoomTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PayBillTask\nDescription: PayBillTask is defined as a subclass of SemiDirectedTask, indicating it represents a specific type of task that involves partial direction or guidance in execution. No additional axioms are specified, so PayBillTask inherits all the general properties and constraints associated with SemiDirectedTask, and further characterizes tasks that involve the process of paying a bill.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "Is PayBillTask classified as a more specific type under the umbrella of SemiDirectedTask? | To which higher-level task categories is PayBillTask hierarchically connected? | What are all the tasks that fall under the SemiDirectedTask category, including PayBillTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PrepareDrugBoxTask\nDescription: PrepareDrugBoxTask is defined as a subclass of SemiDirectedTask, indicating that it inherits all characteristics of semi-directed tasks. Individuals classified under PrepareDrugBoxTask represent tasks involving the preparation of drug boxes, and these tasks exhibit the general properties and constraints established for semi-directed tasks within the ontology. No additional restrictions or properties are specified beyond its subclass relationship.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "Is PrepareDrugBoxTask categorized as a form of SemiDirectedTask? | What tasks are classified under SemiDirectedTask, including PrepareDrugBoxTask? | Which higher-level task categories does PrepareDrugBoxTask belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PrepareHotTeaTask\nDescription: PrepareHotTeaTask is defined as a subclass of SemiDirectedTask, indicating that it inherits all characteristics of semi-directed tasks. This class represents activities or processes specifically related to the preparation of hot tea, encompassing all steps that are partially guided yet allow for some flexibility in execution. There are currently no additional restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "Which tasks fall under the category of SemiDirectedTask, such as PrepareHotTeaTask? | Is PrepareHotTeaTask recognized as a specialized form of SemiDirectedTask? | What are the broader categories encompassing PrepareHotTeaTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ReadArticleTask\nDescription: ReadArticleTask is defined as a subclass of SemiDirectedTask. This means that any instance of ReadArticleTask is also an instance of SemiDirectedTask, inheriting its characteristics and constraints. The class represents tasks that involve reading articles and fall within the category of semi-directed activities, which typically allow for some guidance or structure while retaining a degree of autonomy for the task performer.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "Which tasks are classified under SemiDirectedTask, such as ReadArticleTask? | What general task categories encompass ReadArticleTask? | Does the concept of ReadArticleTask fall within the broader class of SemiDirectedTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TurnOnTVTask\nDescription: TurnOnTVTask is defined as a subclass of SemiDirectedTask. This means that every TurnOnTVTask is a type of semi-directed task, typically characterized by having some predefined structure or guidance but allowing for some user input or variation. There are no additional property restrictions or disjointness axioms specified, so TurnOnTVTask is generally understood to represent any task that involves turning on a TV, within the broader category of semi-directed tasks.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "Is TurnOnTVTask categorized as a type of SemiDirectedTask? | Which tasks are considered to be specializations of SemiDirectedTask, for example TurnOnTVTask? | What hierarchy of broader task categories does TurnOnTVTask fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: WaterPlantTask\nDescription: WaterPlantTask is defined as a subclass of SemiDirectedTask, indicating that it inherits all the characteristics of semi-directed tasks. Members of this class represent tasks specifically concerned with watering plants, and they share any constraints or properties specified for semi-directed tasks.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "Which tasks are classified as specializations under SemiDirectedTask, such as WaterPlantTask? | Is WaterPlantTask encompassed by the broader class of SemiDirectedTask? | To which overarching task groups does WaterPlantTask belong within the hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MoodVoiceData\nDescription: MoodVoiceData is a subclass of MeasuredData, indicating that it represents a specific type of measured information. Members of the MoodVoiceData class are characterized by being data entities whose primary function is to capture or represent aspects related to mood as conveyed through voice. This classification ensures that any instance of MoodVoiceData inherits all properties and characteristics of MeasuredData, with a particular focus on mood-related voice data.\nAxiom: {'subClassOf': ['MeasuredData']}\nGenerated CQs:", "output": "Which specialized types are encompassed by MeasuredData, such as MoodVoiceData? | Is MoodVoiceData classified under the category of MeasuredData? | Of what general categories is MoodVoiceData a specific instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DirectedDiscussionTask\nDescription: DirectedDiscussionTask is defined as a subclass of DiscussionTask. This means every DirectedDiscussionTask is a type of DiscussionTask, inheriting its general characteristics. There are no additional restrictions, property constraints, or disjointness axioms specified for this class. Its primary distinguishing feature lies in its hierarchical placement within the ontology.\nAxiom: {'subClassOf': ['DiscussionTask']}\nGenerated CQs:", "output": "Is DirectedDiscussionTask classified as a more specific form of DiscussionTask? | To which broader categories does DirectedDiscussionTask belong within the task hierarchy? | Which task types are encompassed by DiscussionTask, specifically including DirectedDiscussionTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FreeDiscussionTask\nDescription: FreeDiscussionTask is defined as a subclass of DiscussionTask. This means that every FreeDiscussionTask inherits all properties and characteristics of DiscussionTask, while potentially introducing further specializations specific to free-form or open-ended discussions. No additional constraints or distinguishing features are specified in the current axiom.\nAxiom: {'subClassOf': ['DiscussionTask']}\nGenerated CQs:", "output": "Which task types are direct specializations of DiscussionTask, such as FreeDiscussionTask? | Is FreeDiscussionTask categorized as a kind of DiscussionTask? | Within which broader categories is FreeDiscussionTask classified? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DirectedTask\nDescription: DirectedTask is defined as a subclass of Task. This means that every DirectedTask is a type of Task, inheriting all general characteristics of Task, but is further specialized to represent a more specific kind or instance within that broader category. No additional restrictions or differentiating axioms are specified beyond its hierarchical position in relation to Task.\nAxiom: {'subClassOf': ['Task']}\nGenerated CQs:", "output": "What are the direct superclasses associated with DirectedTask? | Which subclasses fall under Task, including DirectedTask? | Is DirectedTask categorized under the broader class of Task? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S3_P21_PictureDescriptionTask\nDescription: S3_P21_PictureDescriptionTask is defined as a subclass of FreeDiscussionTask. This means that every instance of S3_P21_PictureDescriptionTask is also an instance of FreeDiscussionTask, inheriting all the properties and constraints applicable to free discussion tasks. No additional restrictions or differentiating features beyond this specialization are specified by the axioms.\nAxiom: {'subClassOf': ['FreeDiscussionTask']}\nGenerated CQs:", "output": "Which task types fall under the broader class of FreeDiscussionTask, such as S3_P21_PictureDescriptionTask? | Is S3_P21_PictureDescriptionTask recognized as a specialized form of FreeDiscussionTask? | What higher-level categories encompass S3_P21_PictureDescriptionTask within the task taxonomy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S3_P22_PictureDiscussionTask\nDescription: S3_P22_PictureDiscussionTask is defined as a subclass of FreeDiscussionTask. This means that every instance of S3_P22_PictureDiscussionTask is also considered a FreeDiscussionTask, inheriting all characteristics and constraints of FreeDiscussionTask, while potentially introducing additional specificity relevant to picture discussion activities.\nAxiom: {'subClassOf': ['FreeDiscussionTask']}\nGenerated CQs:", "output": "What discussion tasks are specialized forms of FreeDiscussionTask, such as S3_P22_PictureDiscussionTask? | Which general discussion task categories encompass S3_P22_PictureDiscussionTask? | Is S3_P22_PictureDiscussionTask classified as a more specific type of FreeDiscussionTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GaitAssessment\nDescription: GaitAssessment is defined as a subclass of ExperimentalAssessment. Individuals in this class are required to have exactly one MonoTaskScore and exactly one DualTaskScore, both of which must be literals (i.e., data values such as numbers or strings). This formalization ensures that each GaitAssessment precisely records a single score for both mono-task and dual-task conditions using literal values.\nAxiom: {'subClassOf': ['ExperimentalAssessment'], 'propertyRestrictions': ['[hasMonoTaskScore exactly 1]', '[hasMonoTaskScore only rdfs:Literal]', '[hasDualTaskScore exactly 1]', '[hasDualTaskScore some rdfs:Literal]']}\nGenerated CQs:", "output": "Is it mandatory that a GaitAssessment’s hasDualTaskScore property can only relate to rdfs:Literal values? | Can a GaitAssessment ever have a hasDualTaskScore value that is not an rdfs:Literal? | Are the hasDualTaskScore values for GaitAssessment instances exclusively constrained to rdfs:Literal types? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AutonomyAssessment\nDescription: AutonomyAssessment is a subclass of ClinicalAssessment designed specifically to evaluate an individual's level of autonomy. Every instance of AutonomyAssessment is required to have exactly one value for the property iadl_e, which must be of type xsd:int. This ensures that each AutonomyAssessment provides a singular, integer-based measurement relevant to the assessed individual's instrumental activities of daily living.\nAxiom: {'subClassOf': ['ClinicalAssessment'], 'propertyRestrictions': ['[iadl_e exactly 1 xsd:int]', '[iadl_e some xsd:int]']}\nGenerated CQs:", "output": "Is it required that AutonomyAssessment instances only have the 'iadl_e' property with values of type integer? | Must every 'iadl_e' property associated with AutonomyAssessment be restricted to integer values? | Are there any properties other than 'iadl_e' with integer values permitted for AutonomyAssessment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CognitiveAbilitiesAssessment\nDescription: CognitiveAbilitiesAssessment is defined as a subclass of ClinicalAssessment, representing evaluations specifically focused on measuring cognitive functions. Instances of this class must have exactly one FAB score (an integer), one MMSE score (an integer), one Trail Making Test result (a string), one Free and Cued Reminding Assessment result (a string), and one Short Cognitive Battery Assessment result (a string). Property restrictions further specify that each of these assessments and scores must be unique and of the stated data type, ensuring a comprehensive and structured representation of cognitive assessment results for each individual.\nAxiom: {'subClassOf': ['ClinicalAssessment'], 'propertyRestrictions': ['[fabScore exactly 1 xsd:int]', '[freeAndCuedRemindingAssessment exactly 1 xsd:string]', '[hasMMSEScore exactly 1 xsd:int]', '[trailMakingTest only xsd:string]', '[trailMakingTest exactly 1 xsd:string]', '[freeAndCuedRemindingAssessment only xsd:string]', '[hasMMSEScore only xsd:int]', '[shortCognitiveBatteryAssessment exactly 1 xsd:string]', '[fabScore only xsd:int]', '[shortCognitiveBatteryAssessment some xsd:string]']}\nGenerated CQs:", "output": "Is it required that a CognitiveAbilitiesAssessment only have the shortCognitiveBatteryAssessment property with values of type xsd:string? | Are all shortCognitiveBatteryAssessment values associated with CognitiveAbilitiesAssessment instances strings? | Can a CognitiveAbilitiesAssessment have a shortCognitiveBatteryAssessment property with any value other than a string? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MotricityAbilitiesAssessment\nDescription: MotricityAbilitiesAssessment is defined as a subclass of ClinicalAssessment, representing assessments that evaluate motor abilities. Every instance of this class is required to have exactly one UPDRS score, and this score must be an integer value (xsd:int). This ensures that each motricity abilities assessment is uniquely and quantitatively characterized by a single UPDRS score, aligning with the clinical need for standardized motor evaluation.\nAxiom: {'subClassOf': ['ClinicalAssessment'], 'propertyRestrictions': ['[hasUPDRSScore exactly 1 xsd:int]', '[hasUPDRSScore some xsd:int]']}\nGenerated CQs:", "output": "Are UPDRS scores for MotricityAbilitiesAssessment always restricted to integer values? | Can MotricityAbilitiesAssessment have any hasUPDRSScore value other than an integer? | Is it required that MotricityAbilitiesAssessment only uses hasUPDRSScore with values of type integer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DiscussionInvolvementData\nDescription: DiscussionInvolvementData is defined as a subclass of MeasuredData. Every instance of this class is required to have exactly one value for the property verbalReactionSpontaneity, and this property must take a value of type rdfs:Literal. This formalizes that each DiscussionInvolvementData entry captures a single, literal-valued measure of verbal reaction spontaneity as part of its involvement data.\nAxiom: {'subClassOf': ['MeasuredData'], 'propertyRestrictions': ['[verbalReactionSpontaneity exactly 1]', '[verbalReactionSpontaneity some rdfs:Literal]']}\nGenerated CQs:", "output": "Are all values of the 'verbalReactionSpontaneity' property in DiscussionInvolvementData instances restricted exclusively to literals? | Is it possible for 'verbalReactionSpontaneity' in DiscussionInvolvementData to take any value type other than rdfs:Literal? | Does DiscussionInvolvementData ensure that only rdfs:Literal values are used for the 'verbalReactionSpontaneity' property for every instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LatencyData\nDescription: LatencyData is a subclass of MeasuredData. Each instance of LatencyData must have exactly one latency value, and this value must be a literal (rdfs:Literal). This class formally represents measured data where the primary attribute is a singular latency value stored as a literal, ensuring uniformity and precision in latency representation.\nAxiom: {'subClassOf': ['MeasuredData'], 'propertyRestrictions': ['[latency exactly 1]', '[latency some rdfs:Literal]']}\nGenerated CQs:", "output": "Are all latency values associated with LatencyData instances required to be of type rdfs:Literal? | Does LatencyData exclude any latency property values that are not rdfs:Literal? | Is it necessary that every latency property of LatencyData is expressed solely as an rdfs:Literal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DiscussionTask\nDescription: DiscussionTask is defined as a subclass of Task. Every instance of DiscussionTask is required to have at least some measured data of type StressData and some measured data of type MoodVoiceData. Additionally, all measured data associated with DiscussionTask must be exclusively of type StressData or MoodVoiceData, meaning no other types of measured data are permitted. This ensures that the assessment of a DiscussionTask is strictly based on stress and mood-related voice data.\nAxiom: {'subClassOf': ['Task'], 'propertyRestrictions': ['[measuredData some StressData]', '[measuredData only (MoodVoiceData or StressData)]', '[measuredData only MoodVoiceData]']}\nGenerated CQs:", "output": "Does every DiscussionTask necessarily involve measuredData related to MoodVoiceData? | Is it required that a DiscussionTask has at least one measuredData instance corresponding to MoodVoiceData? | Can a DiscussionTask exist without possessing measuredData of the type MoodVoiceData? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PersonWithDementia\nDescription: PersonWithDementia is defined as a subclass of Person, and is equivalent to any person who has an associated clinical record that contains at least one assessment in which a clinical diagnosis of dementia is present. This formalization ensures that all individuals in the PersonWithDementia class are explicitly linked to the confirmed clinical diagnosis of dementia via assessment records.\nAxiom: {'subClassOf': ['Person'], 'equivalentClass': ['[hasRecord some (ClinicalRecord and [containsAssessment some (DiagnosisAssessment or [hasClinicalDiagnosis only {dementia}])])]']}\nGenerated CQs:", "output": "Must every PersonWithDementia have at least one record containing a diagnosis assessment indicating dementia? | Is a PersonWithDementia equivalent to someone with a clinical record that includes an assessment with a clinical diagnosis of dementia? | Does the definition of PersonWithDementia require the intersection of having a clinical record and an assessment diagnosing dementia? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S1_DirectedActivitiesStep\nDescription: S1_DirectedActivitiesStep is defined as a subclass of ProtocolStep. Each instance of this class is required to involve exactly one S1_P11_WalkingTask, one S1_P12_CountingBackwardsTask, one S1_P13_WalkingCountingBackwardsTask, one S1_P21_SentenceRepeatingTask, and one S1_P22_ArticulationControlTask. Additionally, the only tasks permitted to be involved are S1_P11_WalkingTask, S1_P12_CountingBackwardsTask, S1_P13_WalkingCountingBackwardsTask, S1_P21_SentenceRepeatingTask, S1_P22_ArticulationControlTask, or other general Task instances. This formalization ensures that each S1_DirectedActivitiesStep is composed of these five specific tasks, and does not include any other types of tasks.\nAxiom: {'subClassOf': ['ProtocolStep'], 'propertyRestrictions': ['[involvesTask exactly 1 S1_P11_WalkingTask]', '[involvesTask exactly 1 S1_P13_WalkingCountingBackwardsTask]', '[involvesTask exactly 1 S1_P21_SentenceRepeatingTask]', '[involvesTask exactly 1 S1_P22_ArticulationControlTask]', '[involvesTask exactly 1 S1_P12_CountingBackwardsTask]', '[involvesTask only (S1_P11_WalkingTask and S1_P12_CountingBackwardsTask and S1_P13_WalkingCountingBackwardsTask and S1_P21_SentenceRepeatingTask and S1_P22_ArticulationControlTask and Task)]']}\nGenerated CQs:", "output": "Must every S1_DirectedActivitiesStep solely involve tasks that are either S1_P11_WalkingTask, S1_P12_CountingBackwardsTask, S1_P13_WalkingCountingBackwardsTask, S1_P21_SentenceRepeatingTask, S1_P22_ArticulationControlTask, or Task? | Is it possible for an S1_DirectedActivitiesStep to involve a task that is not among S1_P11_WalkingTask, S1_P12_CountingBackwardsTask, S1_P13_WalkingCountingBackwardsTask, S1_P21_SentenceRepeatingTask, S1_P22_ArticulationControlTask, or Task? | Are activities classified as S1_DirectedActivitiesStep permitted to involve only tasks from the specified set of six task categories? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S1_P11_WalkingTask\nDescription: S1_P11_WalkingTask is a subclass of DirectedTask, representing a specific type of directed task that involves walking. Every instance of this class is required to have at least some measuredData of type GaitData as well as some LatencyData, and the measuredData associated with any instance may only be of types GaitData, LatencyData, or StressData. This ensures that S1_P11_WalkingTask is characterized by the collection and analysis of gait and latency information, with the potential inclusion of stress-related data during walking activities.\nAxiom: {'subClassOf': ['DirectedTask'], 'propertyRestrictions': ['[measuredData only (GaitData or LatencyData or StressData)]', '[measuredData some GaitData]', '[measuredData only LatencyData]']}\nGenerated CQs:", "output": "Is it required that every S1_P11_WalkingTask instance has at least one measuredData property linking to LatencyData? | Can an S1_P11_WalkingTask exist without having any measuredData related to LatencyData? | Does the presence of LatencyData as measuredData define S1_P11_WalkingTask instances in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S1_P21_SentenceRepeatingTask\nDescription: S1_P21_SentenceRepeatingTask is a subclass of DirectedTask characterized by measuredData properties. Every instance must have at least one measuredData value of type MoodVoiceData and at least one of type LatencyData. The measuredData property for this class can only be filled with LatencyData, MoodVoiceData, or StressData, and no other types. This structure ensures the task consistently collects both mood/voice and latency data, restricting measured data types to those specifically listed.\nAxiom: {'subClassOf': ['DirectedTask'], 'propertyRestrictions': ['[measuredData only (LatencyData or MoodVoiceData or StressData)]', '[measuredData some LatencyData]', '[measuredData only MoodVoiceData]']}\nGenerated CQs:", "output": "Does every S1_P21_SentenceRepeatingTask require the presence of measuredData that relates to MoodVoiceData? | Is MoodVoiceData a necessary component of measuredData for an S1_P21_SentenceRepeatingTask? | Does the execution of S1_P21_SentenceRepeatingTask entail at least one measuredData instance that is classified as MoodVoiceData? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ClinicalRecord\nDescription: ClinicalRecord is defined as a class that must contain exactly one instance each of AutonomyAssessment, MotricityAbilitiesAssessment, CognitiveAbilitiesAssessment, and DiagnosisAssessment. Furthermore, the containsAssessment property for any ClinicalRecord instance is restricted to only those assessments that are of type AutonomyAssessment, CognitiveAbilitiesAssessment, DiagnosisAssessment, MotricityAbilitiesAssessment, or NeuropsychiatricAndMoodAssessment. This ensures that every ClinicalRecord is a structured record of clinical assessments, each holding exactly one specific assessment of autonomy, motricity abilities, cognitive abilities, and diagnosis, with assessments strictly limited to the defined set.\nAxiom: {'propertyRestrictions': ['[containsAssessment exactly 1 AutonomyAssessment]', '[containsAssessment exactly 1 MotricityAbilitiesAssessment]', '[containsAssessment exactly 1 CognitiveAbilitiesAssessment]', '[containsAssessment exactly 1 DiagnosisAssessment]', '[containsAssessment only (AutonomyAssessment and CognitiveAbilitiesAssessment and DiagnosisAssessment and MotricityAbilitiesAssessment and NeuropsychiatricAndMoodAssessment)]']}\nGenerated CQs:", "output": "Is a ClinicalRecord permitted to contain any assessment type apart from AutonomyAssessment, CognitiveAbilitiesAssessment, DiagnosisAssessment, MotricityAbilitiesAssessment, or NeuropsychiatricAndMoodAssessment? | Must every assessment included in a ClinicalRecord be either an AutonomyAssessment, CognitiveAbilitiesAssessment, DiagnosisAssessment, MotricityAbilitiesAssessment, or NeuropsychiatricAndMoodAssessment? | Does the ontology prevent ClinicalRecord from containing assessments outside the set of AutonomyAssessment, CognitiveAbilitiesAssessment, DiagnosisAssessment, MotricityAbilitiesAssessment, or NeuropsychiatricAndMoodAssessment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ExperimentalRecord\nDescription: ExperimentalRecord represents a record comprised of exactly one assessment of each of the following types: ExperimentalDiagnosisAssessment, CognitiveLoadAssessment, AbilityToOrganiseAssessment, FunctionalAbilityAssessment, MemorySelfAppraisalAssessment, GaitAssessment, ApathyAssessment, and StressAssessment. The class restricts its containsAssessment property so that only these eight specific assessment types are included—no additional or alternative types are permitted. Each ExperimentalRecord must contain exactly one instance of each assessment type, ensuring comprehensive and standardized coverage within each record.\nAxiom: {'propertyRestrictions': ['[containsAssessment exactly 1 ExperimentalDiagnosisAssessment]', '[containsAssessment exactly 1 CognitiveLoadAssessment]', '[containsAssessment exactly 1 AbilityToOrganiseAssessment]', '[containsAssessment exactly 1 FunctionalAbilityAssessment]', '[containsAssessment exactly 1 MemorySelfAppraisalAssessment]', '[containsAssessment exactly 1 GaitAssessment]', '[containsAssessment exactly 1 ApathyAssessment]', '[containsAssessment exactly 1 StressAssessment]', '[containsAssessment only (AbilityToOrganiseAssessment and ApathyAssessment and CognitiveLoadAssessment and ExperimentalDiagnosisAssessment and FunctionalAbilityAssessment and GaitAssessment and MemorySelfAppraisalAssessment and StressAssessment)]']}\nGenerated CQs:", "output": "Is every assessment contained in an ExperimentalRecord restricted to AbilityToOrganiseAssessment, ApathyAssessment, CognitiveLoadAssessment, ExperimentalDiagnosisAssessment, FunctionalAbilityAssessment, GaitAssessment, MemorySelfAppraisalAssessment, or StressAssessment? | Can an ExperimentalRecord include any assessment type outside the specified set of eight assessment categories? | Does an ExperimentalRecord necessarily exclude all assessments other than the listed types under containsAssessment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Task\nDescription: Task is defined as a class whose members are associated with exactly one start time and exactly one end time, each of which must be an instance of time:Instant. Additionally, every Task must have some measuredData, and all such measuredData must be of type StressData. These property restrictions ensure that every Task is temporally bounded and is characterized by stress-related measurements.\nAxiom: {'propertyRestrictions': ['[startTime exactly 1 time:Instant]', '[measuredData some StressData]', '[startTime only time:Instant]', '[endTime exactly 1 time:Instant]', '[endTime only time:Instant]', '[measuredData some StressData]']}\nGenerated CQs:", "output": "Is it necessary for every measuredData of a Task to be of type StressData? | Can a Task have measuredData that is not classified as StressData? | Does the property measuredData for Task restrict data types strictly to StressData and no other types? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ExperimentalDiagnosisAssessment\nDescription: ExperimentalDiagnosisAssessment is defined as a subclass of ExperimentalAssessment. This means every instance of ExperimentalDiagnosisAssessment is also an instance of ExperimentalAssessment. There are no additional property restrictions specified for this class. This class represents a specific type of experimental assessment that is focused on diagnostic evaluation within an experimental context.\nAxiom: {'subClassOf': ['ExperimentalAssessment'], 'propertyRestrictions': ['[hasExperimentalDiagnosis only DiagnosisType]']}\nGenerated CQs:", "output": "Does ExperimentalDiagnosisAssessment assign hasExperimentalDiagnosis exclusively to instances of DiagnosisType? | Is it true that all values of hasExperimentalDiagnosis for ExperimentalDiagnosisAssessment must belong to DiagnosisType? | Can ExperimentalDiagnosisAssessment have hasExperimentalDiagnosis related to anything other than DiagnosisType? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CountingType\nDescription: CountingType is defined as a subclass of Type. This indicates that every CountingType is necessarily a Type, inheriting all characteristics of Type, but there are no additional restrictions or distinguishing features specified for CountingType beyond this subclass relationship.\nAxiom: {'subClassOf': ['Type'], 'equivalentClass': ['{_20_0, _305_285}']}\nGenerated CQs:", "output": "Is CountingType equivalent to the intersection of _20_0 and _305_285? | Are all instances of CountingType necessarily members of both _20_0 and _305_285? | Does CountingType exclude any concepts outside the overlap of _20_0 and _305_285? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GenderType\nDescription: GenderType is defined as a subclass of Type. This means that every instance of GenderType is also an instance of Type. No additional constraints or equivalence conditions are specified for this class.\nAxiom: {'subClassOf': ['Type'], 'equivalentClass': ['{male, female}']}\nGenerated CQs:", "output": "Is GenderType equivalent to the set containing only the individuals male and female? | Does GenderType include any individuals other than male or female? | Is every instance of GenderType necessarily identified as either male or female? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DiagnosisAssessment\nDescription: DiagnosisAssessment is defined as a subclass of ClinicalAssessment. Every instance of DiagnosisAssessment must be associated with exactly one clinical diagnosis, specified by the property restriction that it has exactly one value for hasClinicalDiagnosis, and that value must be of type DiagnosisType. This formalizes that each diagnosis assessment relates to one and only one diagnosis type.\nAxiom: {'subClassOf': ['ClinicalAssessment'], 'propertyRestrictions': ['[hasClinicalDiagnosis exactly 1 DiagnosisType]', '[hasClinicalDiagnosis only DiagnosisType]']}\nGenerated CQs:", "output": "Can a DiagnosisAssessment have a hasClinicalDiagnosis relationship with anything other than DiagnosisType? | Is it required that all clinical diagnoses assigned by a DiagnosisAssessment are instances of DiagnosisType? | Are diagnoses outside of the DiagnosisType class excluded from the possible values for hasClinicalDiagnosis in a DiagnosisAssessment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CognitiveAbilitiesData\nDescription: CognitiveAbilitiesData is a class defined by several property restrictions. Every instance must have exactly one status of type ActivityStatusType, exactly one repetitions value (which must be an rdfs:Literal), exactly one compliantInstructionsOrder value (which must be a boolean), and exactly one taskDuration (which must be an instance of time:DurationDescription). The status property may only point to ActivityStatusType, repetitions only to rdfs:Literal, compliantInstructionsOrder only to boolean values, and taskDuration only to time:DurationDescription. This formalization ensures strict data structure and type safety for information related to cognitive ability assessment data.\nAxiom: {'subClassOf': ['MeasuredData'], 'propertyRestrictions': ['[status exactly 1 ActivityStatusType]', '[repetitions exactly 1]', '[repetitions only rdfs:Literal]', '[compliantInstructionsOrder only xsd:boolean]', '[compliantInstructionsOrder exactly 1 xsd:boolean]', '[taskDuration only time:DurationDescription]', '[taskDuration exactly 1 time:DurationDescription]', '[status only ActivityStatusType]']}\nGenerated CQs:", "output": "Does CognitiveAbilitiesData fall under the broader group of MeasuredData? | What types of data are classified as subcategories of MeasuredData, including CognitiveAbilitiesData? | Which overarching classes encompass CognitiveAbilitiesData within their hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GaitData\nDescription: GaitData is defined as a subclass of MeasuredData, representing data specifically related to gait analysis. Members of this class are characterized by exactly one value each for walkingSpeed, stepLength, dynamicBalance (all with values restricted to literals), and stoppingDisplacement (restricted to a boolean value). Additionally, walkingSpeedInstantaneous and dynamicBalance can only take literal values. This formalization ensures that each GaitData instance uniquely records these properties, providing a precise structure for representing gait measurements.\nAxiom: {'subClassOf': ['MeasuredData'], 'propertyRestrictions': ['[walkingSpeedInstantaneous only rdfs:Literal]', '[walkingSpeed only rdfs:Literal]', '[stepLength only rdfs:Literal]', '[dynamicBalance exactly 1]', '[walkingSpeed exactly 1]', '[stoppingDisplacement exactly 1 xsd:boolean]', '[stepLength exactly 1]', '[dynamicBalance only rdfs:Literal]', '[stoppingDisplacement only xsd:boolean]', '[walkingSpeedInstantaneous exactly 1]']}\nGenerated CQs:", "output": "Is it required that every instance of GaitData has exactly one value for the walkingSpeedInstantaneous property? | Can a GaitData record possess multiple or no walkingSpeedInstantaneous values, or must it always have precisely one? | Is the cardinality of the walkingSpeedInstantaneous property for GaitData instances limited to one and only one occurrence? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: StressData\nDescription: StressData is defined as a subclass of MeasuredData. Any individual of StressData is characterized by the property restriction that its stressLevel property may only take values that are rdfs:Literal (such as numbers or strings). This ensures that StressData captures measured data in which stress level is recorded exclusively as a literal value.\nAxiom: {'subClassOf': ['MeasuredData'], 'propertyRestrictions': ['[stressLevel only rdfs:Literal]', '[stressLevel exactly 1]']}\nGenerated CQs:", "output": "Does every instance of StressData necessarily have exactly one value specified for the stressLevel property? | Can StressData ever have more or fewer than one stressLevel assigned? | Is it possible for StressData to be valid if the stressLevel property is not set to a single unique value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HealthyControlParticipant\nDescription: HealthyControlParticipant is defined as a subclass of Person, representing individuals who are considered persons. There are no additional axioms or property restrictions specified, indicating that HealthyControlParticipant inherits all characteristics of Person without further differentiation or equivalence to other classes.\nAxiom: {'subClassOf': ['Person'], 'equivalentClass': ['[hasRecord some (ClinicalRecord and [containsAssessment some (DiagnosisAssessment and [hasClinicalDiagnosis some {healthy}])])]']}\nGenerated CQs:", "output": "Is every HealthyControlParticipant necessarily associated with a record that includes a clinical assessment confirming a 'healthy' diagnosis? | Does the class HealthyControlParticipant represent exactly those individuals who have at least one clinical record containing a diagnosis assessment marked as 'healthy'? | Is HealthyControlParticipant logically equivalent to entities with some clinical record where the assessment includes a clinical diagnosis of 'healthy'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Person\nDescription: Person is defined as a subclass of ns1:Person. Every individual belonging to this class is required to participate in at least one Protocol, and is also restricted such that they participate only in Protocol (no other types of participation are allowed). Additionally, each Person is associated with at least one ClinicalRecord, one ExperimentalRecord, and one DemographicCharacteristicsRecord via the hasRecord property. This formalization ensures that all Persons have these specific record types and exclusively participate in Protocols.\nAxiom: {'subClassOf': ['ns1:Person'], 'propertyRestrictions': ['[participates some Protocol]', '[hasRecord some ClinicalRecord]', '[hasRecord some ExperimentalRecord]', '[hasRecord some DemographicCharacteristicsRecord]', '[participates only Protocol]', '[hasRecord only (ClinicalRecord or DemographicCharacteristicsRecord or ExperimentalRecord)]']}\nGenerated CQs:", "output": "Is every record associated with a Person required to be either a ClinicalRecord, DemographicCharacteristicsRecord, or ExperimentalRecord? | Can a Person have a record that is not classified as a ClinicalRecord, DemographicCharacteristicsRecord, or ExperimentalRecord? | Are the records linked to a Person exclusively limited to ClinicalRecord, DemographicCharacteristicsRecord, and ExperimentalRecord categories? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S3_DiscussionWithClinicianStep\nDescription: S3_DiscussionWithClinicianStep is defined as a subclass of ProtocolStep. Every instance of this class necessarily involves exactly one S3_P1_DirectedExpressionTask, and may additionally involve an S3_P21_PictureDescriptionTask or another Task. The property restriction ensures that all tasks involved are limited to S3_P1_DirectedExpressionTask, S3_P21_PictureDescriptionTask, or other specified Task subclasses, reflecting a step that is structured around these specific clinical activities.\nAxiom: {'subClassOf': ['ProtocolStep'], 'propertyRestrictions': ['[involvesTask only (S3_P1_DirectedExpressionTask or S3_P21_PictureDescriptionTask or Task)]', '[involvesTask exactly 1 S3_P1_DirectedExpressionTask]', '[involvesTask exactly 1 S3_P21_PictureDescriptionTask]']}\nGenerated CQs:", "output": "Must every S3_DiscussionWithClinicianStep involve exactly one S3_P21_PictureDescriptionTask task? | Can an S3_DiscussionWithClinicianStep include more than one or no S3_P21_PictureDescriptionTask via involvesTask? | Is the involvement of precisely one S3_P21_PictureDescriptionTask by each S3_DiscussionWithClinicianStep mandatory according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S1_P13_WalkingCountingBackwardsTask\nDescription: S1_P13_WalkingCountingBackwardsTask is defined as a subclass of DirectedTask. Members of this class are exclusively associated with counting types of CountingType and are required to have at least some measured data of both LatencyData and GaitData. It also enforces that measured data for this task must only include data of the following types: GaitData, LatencyData, MoodVoiceData, or StressData. This formalization ensures that instances of this class involve directed walking while counting backwards, with behavioral and cognitive performance captured by relevant measured data.\nAxiom: {'subClassOf': ['DirectedTask'], 'propertyRestrictions': ['[countingType only CountingType]', '[measuredData some LatencyData]', '[measuredData some GaitData]', '[countingType some CountingType]', '[measuredData only (GaitData or LatencyData or MoodVoiceData or StressData)]', '[measuredData some MoodVoiceData]']}\nGenerated CQs:", "output": "Must every instance of S1_P13_WalkingCountingBackwardsTask include at least one measuredData property relating to MoodVoiceData? | Is it possible for S1_P13_WalkingCountingBackwardsTask to have measuredData exclusively associated with MoodVoiceData? | Does the presence of measuredData of type MoodVoiceData necessarily imply the existence of an S1_P13_WalkingCountingBackwardsTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S3_P1_DirectedExpressionTask\nDescription: S3_P1_DirectedExpressionTask is defined as a subclass of DirectedDiscussionTask. Members of this class are characterized by the property that they are associated with at least some measuredData of type MoodVoiceData. This means that every S3_P1_DirectedExpressionTask instance involves collecting or utilizing mood-related voice data as part of the task.\nAxiom: {'subClassOf': ['DirectedDiscussionTask'], 'propertyRestrictions': ['[measuredData some MoodVoiceData]', '[measuredData only (MoodVoiceData or StressData)]']}\nGenerated CQs:", "output": "Are S3_P1_DirectedExpressionTasks required to have measuredData properties exclusively involving MoodVoiceData or StressData? | Could an S3_P1_DirectedExpressionTask possess measuredData that is neither MoodVoiceData nor StressData? | Do the measuredData property values for S3_P1_DirectedExpressionTask necessarily only include concepts from MoodVoiceData or StressData? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ExperimentalAssessment\nDescription: ExperimentalAssessment is a class that is characterized by a property restriction: every instance must have the hasScore property whose values are only rdfs:Literal (such as numbers, strings, or other literal data). This ensures that the assessment results are always represented as literal data types, capturing quantified or descriptive information relevant to the assessment process.\nAxiom: {'propertyRestrictions': ['[hasScore only rdfs:Literal]', '[hasScore exactly 1]']}\nGenerated CQs:", "output": "Is every ExperimentalAssessment required to have exactly one hasScore property assigned? | Can an ExperimentalAssessment possess more than one or fewer than one value for the hasScore property? | Does the ontology restrict ExperimentalAssessment instances to a single value for the hasScore property and not allow zero or multiple values? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ProtocolStep\nDescription: ProtocolStep is a class characterized by its involvement in at least one Task (via the involvesTask property), with the restriction that it can only be associated with individuals of type Task through this property. Each ProtocolStep is also formally constrained to have exactly one startTime, which must be of type time:Instant, and may have zero or more endTimes, but any endTime provided must also be of type time:Instant. These axioms ensure that every ProtocolStep is precisely linked to its temporal boundaries and the tasks it entails.\nAxiom: {'propertyRestrictions': ['[involvesTask some Task]', '[endTime only time:Instant]', '[startTime exactly 1 time:Instant]', '[startTime only time:Instant]', '[involvesTask only Task]', '[endTime exactly 1 time:Instant]']}\nGenerated CQs:", "output": "Is each ProtocolStep required to have exactly one value for endTime? | Can a ProtocolStep have more than one endTime assigned to it? | Does the definition of ProtocolStep allow for having no endTime specified? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: participates\nDescription: The property \"participates\" has no explicit domain or range restrictions and is a sub-property of \"owl:topObjectProperty.\" It does not have any characteristics such as functionality or symmetry. The property is the inverse of \"hasParticipant,\" meaning if an entity participates in something, that thing has the entity as a participant.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "How are the properties 'participates' and 'hasParticipant' related within the ontology? | If individual X participates in event Y, does it follow that Y has participant X? | Which property in the ontology is specified as the inverse of 'participates'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: apathyInventory\nDescription: The property \"apathyInventory\" does not have specified domain or range restrictions and has no declared characteristics. It is defined as a subproperty of \"owl:topDataProperty,\" indicating it is a data property applicable to any individual. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is apathyInventory classified as a data property within the ontology? | What superproperties does apathyInventory have according to the property hierarchy? | Which data properties are subsumed by owl:topDataProperty within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasMonoTaskScore\nDescription: The property \"hasMonoTaskScore\" does not have explicitly defined characteristics, domain, or range restrictions. It is defined as a sub-property of \"hasScore,\" indicating it is used to represent a specific type of score related to mono-task contexts. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is hasScore the superproperty of hasMonoTaskScore? | Which properties are classified as subproperties under hasScore? | Does usage of hasMonoTaskScore always entail usage of hasScore? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: areasOfInterestExplored\nDescription: The property \"areasOfInterestExplored\" has no explicitly defined characteristics, domain restrictions, or super-properties. Its range is rdfs:Literal, indicating that the values associated with this property are expected to be plain text or data values. No inverse property is specified. This property is used to record or describe the areas of interest that have been explored by an entity.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': [], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'areasOfInterestExplored' take any object other than a literal value? | Is every object associated with 'areasOfInterestExplored' necessarily an rdfs:Literal? | What types of values are permitted as the range for 'areasOfInterestExplored'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasClinicalDiagnosis\nDescription: The property \"hasClinicalDiagnosis\" does not specify any characteristics, domain, or range. It is a subproperty of \"hasDiagnosis,\" indicating that it represents a specialized type of diagnostic relationship, specifically pertaining to clinical diagnoses. No inverse property is defined.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is hasClinicalDiagnosis a specific type of the hasDiagnosis property? | Which properties are considered subproperties of hasDiagnosis? | What superproperties are directly associated with hasClinicalDiagnosis? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: verbalReactionSpontaneity\nDescription: The property \"verbalReactionSpontaneity\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. No current textual description is provided. Its use should be interpreted in context, as there are no formal restrictions or relations specified in its axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'verbalReactionSpontaneity' relate to subjects of any type, given its domain is unspecified? | What types of entities can be the range for the property 'verbalReactionSpontaneity'? | Can 'verbalReactionSpontaneity' be associated with any type of value as its range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: containedInContext\nDescription: The property \"containedInContext\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. It is a generic property with no specified constraints, indicating its use and applicability are context-dependent and unconstrained by the current ontology axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Are there any restrictions on what can act as the range for 'containedInContext'? | Is it correct that 'containedInContext' has no specified domain? | What types of entities can be the domain of the property 'containedInContext'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: status\nDescription: The property \"status\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. This suggests flexibility in its use, allowing it to relate any types of entities without restriction.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it appropriate for the 'status' property to have no specified domain? | What types of resources can be subjects of the 'status' property? | Is there a defined domain for the property 'status', or can it link to any type of entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: measuredData\nDescription: The property \"measuredData\" has no specified domain, range, characteristics, super-properties, or inverse properties. It can be used to relate any two entities without restriction, as no additional constraints or descriptive information are provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'measuredData' have a range other than the currently unspecified value? | Is it correct that the property 'measuredData' does not have a defined range? | Is it correct that the property 'measuredData' has no specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: containsAssessment\nDescription: The property \"containsAssessment\" has no specified characteristics, domain, range, super-properties, or inverse properties. It is likely intended to associate an entity with an assessment, but its usage is not formally restricted by axioms. Additional details or constraints may be needed to clarify its precise application within the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'containsAssessment' be linked from any type of resource, or should a domain be defined? | What types of values are permitted as the object when using the 'containsAssessment' property? | What kinds of entities can be subjects of the property 'containsAssessment'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasDiagnosis\nDescription: The property \"hasDiagnosis\" has no explicitly defined characteristics, no specified domain or range restrictions, and is not declared as a sub-property of any other property. No inverse property is specified. This suggests that \"hasDiagnosis\" serves as a general relation, potentially linking individuals to their diagnoses without further formal constraints.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'hasDiagnosis' does not have a specified range? | What kinds of entities can serve as the range for the property 'hasDiagnosis'? | Can entities outside any domain be linked using the property 'hasDiagnosis'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasScore\nDescription: The property \"hasScore\" has no defined domain, range, characteristics, super-properties, or inverse properties. Based on its name, it is likely used to associate an entity with a numerical or evaluative score, but no formal restrictions or relationships are specified in the current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'hasScore' be associated with entities of any type as its range? | Can 'hasScore' be used with any entity as its subject, or are there implicit constraints? | Is it correct that the property 'hasScore' does not specify a range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: dateOfBirth\nDescription: The property \"dateOfBirth\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. Typically, it is intended to link an entity to its date of birth, although no formal constraints or relationships are currently specified in the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'dateOfBirth' does not specify any domain? | Is it correct that the property 'dateOfBirth' does not have a specified range? | Can 'dateOfBirth' have a range other than those currently defined? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasMMSEScore\nDescription: The property \"hasMMSEScore\" has no explicitly defined characteristics, domain or range restrictions, super-properties, or inverse properties. Based on its name, it is intended to associate an entity with its MMSE (Mini-Mental State Examination) score.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What entities can serve as the domain for the property 'hasMMSEScore'? | Is it correct that the property 'hasMMSEScore' does not have a defined range? | Is it correct that the property 'hasMMSEScore' does not have a specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: repetitions\nDescription: The property \"repetitions\" has no explicitly defined characteristics, domain, or range restrictions. It does not specify any super-properties or inverse properties. Based on the current axioms, \"repetitions\" can relate any two entities without additional constraints or semantic specifications.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Are there any entity types that could serve as the subject for the 'repetitions' property? | What types of values can serve as the range for the property 'repetitions'? | Can entities other than those currently defined be used as the range for 'repetitions'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: iadl_e\nDescription: The property \"iadl_e\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. No additional description is provided, and the property is not currently constrained by any axioms, indicating it is unspecified in its current form.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of entities may serve as the domain for the property 'iadl_e'? | Can the domain of 'iadl_e' include any class, or is it intended to be limited? | Is it correct that the property 'iadl_e' has no specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: size\nDescription: The property \"size\" currently lacks explicit characteristics, domain, or range restrictions, and is not defined as a sub-property or inverse of any other property. This indicates that \"size\" is a general-purpose property intended to relate entities to their size attributes, but its specific usage and constraints are not currently specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Are there any entities that are not allowed to be the subject of the property 'size'? | What can be the domain of the property 'size'? | Are there any restrictions on what can be used as the range of the 'size' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: protocolStep\nDescription: The property \"protocolStep\" does not have any explicitly defined characteristics, domain, or range restrictions. It is not specified as a sub-property of another property and has no declared inverse property. Its intended usage and semantics should be inferred from its name or surrounding context.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it permissible for 'protocolStep' to have no specified domain? | Can the property 'protocolStep' be associated with any object, given that it has no specified range? | Is it accurate that the property 'protocolStep' does not have a range defined? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: countingType\nDescription: The property \"countingType\" has no explicitly defined characteristics, domain, or range restrictions. It does not have any specified super-properties or inverse properties. Its intended purpose must be inferred from its name, as no additional description or axioms are provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'countingType' be used with subjects of any type, or is its domain implicitly constrained? | What entities can serve as the domain for the property 'countingType'? | Is it correct that the property 'countingType' does not have a defined range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: taskDuration\nDescription: The property \"taskDuration\" has no specified characteristics, domain, or range restrictions. It does not have defined super-properties or an inverse property. Its intended use should be inferred from its name, which suggests it relates to the duration associated with a task, but no explicit constraints are imposed by the current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What entities can be the subject (domain) of the property 'taskDuration'? | Is it correct that the property 'taskDuration' does not have a specified range? | What kinds of values could be valid as the range for the property 'taskDuration'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasParticipant\nDescription: The property \"hasParticipant\" has no specified domain, range, characteristics, super-properties, or inverse properties. This property can be used in a general manner to relate an entity to its participant(s) without restriction on the types of subjects or objects involved.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can anything be the value of the 'hasParticipant' property, or is there an implicit restriction? | What types of entities are permitted as the domain of the property 'hasParticipant'? | What types of entities can serve as the range for 'hasParticipant'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: distanceWalked\nDescription: The property \"distanceWalked\" has no explicitly defined characteristics, domain, or range restrictions. It does not inherit from any super-properties and has no specified inverse property. Its usage and semantics should be defined by the context or by further specification in the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What kinds of entities can use the 'distanceWalked' property as their subject? | Can entities other than a particular class be associated with the property 'distanceWalked'? | Is it correct that the 'distanceWalked' property does not have a defined range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: laterality\nDescription: The property \"laterality\" has no explicitly specified domain, range, or characteristics, and does not inherit from any super-properties nor possess any inverse property. The purpose and usage of this property are not further detailed by its current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'laterality' be used with any value as its object, or should its range be restricted? | Is it correct that 'laterality' has no specified range? | What types of entities can serve as the domain for the property 'laterality'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: shortCognitiveBatteryAssessment\nDescription: The property \"shortCognitiveBatteryAssessment\" does not have any explicitly defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it likely represents a relation involving a brief cognitive battery assessment, but no formal constraints are specified in the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What type of entities can be the subject of the property 'shortCognitiveBatteryAssessment'? | Is it accurate to state that 'shortCognitiveBatteryAssessment' does not have a specified range? | Can the property 'shortCognitiveBatteryAssessment' be associated with any type of value as its range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: date\nDescription: The property \"date\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. No additional descriptive information is provided, indicating that its use and relationships are unspecified in the current ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of entities can serve as the domain for the property 'date'? | Is it correct that the property 'date' has no specified domain? | Is it correct that the property 'date' has no defined range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: startTime\nDescription: The property \"startTime\" currently has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. Its intended use is likely to associate an entity with the point in time when an event or activity begins, but no formal restrictions or relationships are specified by the axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is the property 'startTime' allowed to have a range, or must it always have no range? | What kinds of subjects can the property 'startTime' be applied to? | Is it correct that the property 'startTime' is defined without a domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: endTime\nDescription: The property \"endTime\" has no defined domain, range, super-properties, or inverse properties, and no specific logical characteristics are assigned. This property is presumably intended to specify the endpoint or completion time of an event or process, but no ontological constraints or further documentation are currently provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'endTime' have a range assigned to it, and if so, what would it be? | Is it correct that the property 'endTime' has no specified range? | Can 'endTime' be used with any type of subject, or should its domain be restricted? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: before\nDescription: The property \"before\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. This indicates that it represents a generic relation without specific constraints on the types of entities it connects.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of entities can serve as the range for the property 'before'? | Can the property 'before' associate with ranges outside a particular class? | Is it correct that the property 'before' does not have a specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: freeAndCuedRemindingAssessment\nDescription: The property \"freeAndCuedRemindingAssessment\" has no explicitly defined characteristics, domain, or range restrictions, and does not specify any super-properties or inverse properties. Its intended use and meaning should be clarified by additional documentation or context, as current axioms do not constrain its usage.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What can be the domain of the property 'freeAndCuedRemindingAssessment'? | Is it accurate that 'freeAndCuedRemindingAssessment' does not have a specified domain? | Is it valid for the property 'freeAndCuedRemindingAssessment' to have no range defined? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: handTrajectory\nDescription: The property \"handTrajectory\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. Based solely on its name and lack of further restrictions, it can be inferred that this property is used to associate entities with information related to the movement or path of a hand, but its usage is not formally constrained within the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it valid for the property 'handTrajectory' to have no specified range? | Which kinds of entities can be the range for the property 'handTrajectory'? | Is it correct that the property 'handTrajectory' does not specify a domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: gender\nDescription: The property \"gender\" has no explicitly defined characteristics, domain, range, or hierarchy with other properties. There is no current description or axiomatic restriction, indicating that its usage context and value types are unspecified within the ontology. No inverse property is defined.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the 'gender' property be applied to resources of any type? | Is it correct that the property 'gender' does not have a defined domain? | What can be the range of the property 'gender'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: walkingSpeedInstantaneous\nDescription: The property \"walkingSpeedInstantaneous\" has no specified characteristics, domain, or range restrictions, and is not defined as a sub-property or inverse of any other property. The property is expected to represent an entity's instantaneous walking speed, but lacks formal axiomatization to constrain or further describe its use.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that 'walkingSpeedInstantaneous' currently has no specified range? | Is it correct that 'walkingSpeedInstantaneous' does not have a defined domain? | Can the property 'walkingSpeedInstantaneous' be associated with any type of entity, or should its domain be restricted? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasUPDRSScore\nDescription: The property \"hasUPDRSScore\" does not have explicitly defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely intended to associate an entity with its Unified Parkinson's Disease Rating Scale (UPDRS) score, reflecting clinical assessments in Parkinson's disease. No further constraints or relationships are specified in the current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is there a defined range for the property 'hasUPDRSScore'? | Is it correct that the property 'hasUPDRSScore' does not have a defined domain? | Can any type of value serve as the range for 'hasUPDRSScore'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: dsm_ivDepressionCriteria\nDescription: The property \"dsm_ivDepressionCriteria\" has no explicitly defined characteristics, domain, or range constraints, and it is not specified as a sub-property of any other property nor does it have an inverse property. Based on its name, it is intended to relate an entity to the diagnostic criteria for depression as defined in DSM-IV, but this intended usage is not formally constrained by the provided axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can anything other than an explicitly specified class serve as the domain for 'dsm_ivDepressionCriteria'? | What are the possible domains for the property 'dsm_ivDepressionCriteria'? | Is it correct that 'dsm_ivDepressionCriteria' does not specify a range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: latency\nDescription: The property \"latency\" has no explicitly specified characteristics, domain, or range constraints. It is not defined as a sub-property or inverse of any other property. The usage and applicable types for this property are unspecified in the current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What can be the domain of the property 'latency'? | Can 'latency' be used with any type of subject entity? | Is it correct that 'latency' does not have any specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: educationLevel\nDescription: The property \"educationLevel\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. Its use is not constrained to specific classes or value types, allowing for flexible application in the ontology. No further description is currently provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it accurate that the property 'educationLevel' does not have a specified range? | Can educationLevel be associated with any entity regardless of its type? | Is it correct that the property educationLevel does not have an explicitly defined domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: npi\nDescription: The property \"npi\" has no specified characteristics, domain, or range restrictions. It is not defined as a sub-property of any other property and does not have any inverse properties. This indicates \"npi\" is a general property with no explicit structural or semantic constraints currently defined.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What can be the domain of the property 'npi'? | Is it appropriate for the property 'npi' to have no specified domain? | What can be the range of the property 'npi'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: stoppingDisplacement\nDescription: The property \"stoppingDisplacement\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. No current description is provided. The intended use or semantics of this property should be specified for greater clarity.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'stoppingDisplacement' has no defined domain? | What types of subjects can 'stoppingDisplacement' be associated with? | Can entities outside any specific class use the property 'stoppingDisplacement' as their subject? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: trailMakingTest\nDescription: The property \"trailMakingTest\" has no specified characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely used to associate an entity with a trail making test, but no further ontological constraints or relationships are defined for this property.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'trailMakingTest' does not have a defined domain? | Is it correct that the property 'trailMakingTest' does not have a specified range? | Can 'trailMakingTest' be used with subjects from any class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: involvesTask\nDescription: The property \"involvesTask\" has no explicitly defined characteristics, domain, or range restrictions. It is not specified as a sub-property of any other property, nor does it have an inverse property. This indicates that \"involvesTask\" is a general property intended to relate entities to unspecified tasks, without formal constraints on the types of entities or tasks involved.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'involvesTask' does not have a specified range? | What types of entities can serve as the range for the property 'involvesTask'? | Can any type of entity use 'involvesTask' as a property subject? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: stressLevel\nDescription: The property \"stressLevel\" has no explicitly defined characteristics, domain, or range restrictions, nor any specified super-properties or inverse properties. Its intended purpose is not further described in the available axioms or documentation.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'stressLevel' be associated with any type of entity as its value? | Is it correct that the property 'stressLevel' does not have any specified domain? | What types of subjects can 'stressLevel' be applied to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: dynamicBalance\nDescription: The property \"dynamicBalance\" does not have explicitly defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely intended to relate entities in the context of maintaining or evaluating balance under changing conditions, but no formal constraints or further documentation are currently specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it valid for the property 'dynamicBalance' to have no specified range? | What types of entities can be the range of the 'dynamicBalance' property? | Can the property 'dynamicBalance' have a domain other than what is currently specified (None)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasRecord\nDescription: The property \"hasRecord\" does not have explicitly defined domain, range, characteristics, super-properties, or inverse properties. Based on its name, it is likely intended to associate an entity with a record, but no further semantic constraints are specified by its current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of entities can be the subject of the property 'hasRecord'? | Can anything be used as the range of 'hasRecord', or should its range be defined? | Is it correct that the property 'hasRecord' does not specify a domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: fabScore\nDescription: The property \"fabScore\" has no specified domain, range, characteristics, super-properties, or inverse properties. Its usage and constraints are not defined by axioms, indicating that it is a general property without ontology-imposed restrictions or semantic details.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What entities are permitted as the range for the property 'fabScore'? | Does the property 'fabScore' have a range other than None? | Is it correct that the property 'fabScore' has no specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: walkingSpeed\nDescription: The property \"walkingSpeed\" has no specified characteristics, domain, range, super-properties, or inverse properties. This property is likely intended to capture the walking speed of an entity, but no formal usage constraints or value types are currently defined.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of entities can be used as the subject of the 'walkingSpeed' property? | What types of values can serve as the range for the property 'walkingSpeed'? | Can 'walkingSpeed' be associated with any entity regardless of its type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: areasOfNoInterestExplored\nDescription: The property \"areasOfNoInterestExplored\" has no defined characteristics, domain, range, super-properties, or inverse properties. This indicates it is a general property without specific constraints or hierarchical relationships in the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['rdfs:Literal'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'areasOfNoInterestExplored' have a range other than rdfs:Literal? | Is every value associated with 'areasOfNoInterestExplored' necessarily an rdfs:Literal? | What types of entities can be used as the value for the property 'areasOfNoInterestExplored'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: compliantInstructionsOrder\nDescription: The property \"compliantInstructionsOrder\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. Its purpose and constraints are unspecified according to the given axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['xsd:boolean'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is every value used with the property 'compliantInstructionsOrder' required to be a boolean? | Could 'compliantInstructionsOrder' ever have a value that is not of type xsd:boolean? | What types of entities are permitted as the range for 'compliantInstructionsOrder'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasDualTaskScore\nDescription: The property \"hasDualTaskScore\" has no explicitly defined characteristics, domain, or range restrictions. It is not specified as a sub-property of any other property and does not have an inverse property. Its usage and semantics are unrestricted by the given axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasScore'], 'inverseOf': []}\nGenerated CQs:", "output": "Is every usage of the hasDualTaskScore property also classified under hasScore? | Which properties are recognized as subproperties of hasScore? | What are the superproperties of hasDualTaskScore within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasExperimentalDiagnosis\nDescription: The property \"hasExperimentalDiagnosis\" has no specified domain, range, characteristics, super-properties, or inverse properties. This indicates it is a general property with no formal restrictions on the types of entities it can relate or the values it can take.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasDiagnosis'], 'inverseOf': []}\nGenerated CQs:", "output": "Is hasExperimentalDiagnosis considered a specific type of hasDiagnosis within the property hierarchy? | Which properties are defined as subproperties under hasDiagnosis? | Does the use of hasExperimentalDiagnosis in an assertion automatically entail the use of hasDiagnosis? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: stepLength\nDescription: The property \"stepLength\" has no explicitly defined characteristics, domain, or range restrictions. It is not declared as a sub-property of any other property and has no specified inverse property. This suggests its usage is flexible and not limited to particular classes or value types within the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topDataProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "Is stepLength categorized under the general properties defined by owl:topDataProperty? | Which data properties are considered subproperties of owl:topDataProperty within the ontology? | Does assigning a value to stepLength also imply an assignment to owl:topDataProperty? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylogenetics\nDescription: Phylogenetics is defined as a subclass of both Sequence analysis and Phylogeny, indicating that it involves analytical methods for understanding evolutionary relationships. It is formally described as the study of evolutionary relationships among organisms using analyses of genetic information, typically involving gene or protein sequence data. This class focuses on methodologies and approaches to infer phylogenetic relationships through sequence-based evidence.\nAxiom: {'subClassOf': ['Phylogeny']}\nGenerated CQs:", "output": "Is Phylogenetics categorized as a specific type of Sequence analysis? | Which disciplines are classified under Sequence analysis, and does this include Phylogenetics? | What are the broader conceptual categories that encompass Phylogenetics within sequence studies? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TAIR accession (protein)\nDescription: TAIR accession (protein) is defined as a subclass of both TAIR accession and Sequence accession (protein), representing identifiers specifically assigned to protein sequences within the TAIR database. Each TAIR accession (protein) serves as an identifier for at least one sequence record. This class formalizes the concept of associating unique protein sequence identifiers from TAIR, ensuring they are only used as identifiers of protein sequence records.\nAxiom: {'subClassOf': ['Sequence accession (protein)'], 'propertyRestrictions': ['[is identifier of some Sequence record]']}\nGenerated CQs:", "output": "Is TAIR accession (protein) categorized under the general class of TAIR accession? | What are the subclasses defined within TAIR accession, including TAIR accession (protein)? | Which broader classes encompass TAIR accession (protein)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ensembl gene ID\nDescription: Ensembl gene ID is a subclass of both Gene ID and Ensembl ID, representing a unique identifier specifically assigned to a gene or related feature within the Ensembl database. This class is used to distinctly reference genetic loci in the Ensembl genome annotation system, ensuring unambiguous identification of genetic entities and facilitating cross-referencing between biological databases.\nAxiom: {'subClassOf': ['Gene ID']}\nGenerated CQs:", "output": "Is Ensembl gene ID classified under Ensembl ID? | Which instances are defined as specific types of Ensembl ID, such as Ensembl gene ID? | What broader identifiers encompass the Ensembl gene ID category? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HilbertVis\nDescription: HilbertVis is a subclass of software that is implemented in the R language. It is designed to process input data in either GFF or BED formats and requires explicit format specification. The software is executed within the contexts of data visualization and data normalization tasks. Its output consists of graph plots, which are specified to be in an image format. The axiomatic structure ensures that HilbertVis operates strictly on well-structured biological data formats and produces visual representations suitable for further analysis or presentation.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has specified data input some (data and [has format specification some GFF])]', '[is executed in some data visualization]', '[has specified data output some (Graph plot and [has format specification some image format])]', '[has specified data input some (data and [has format specification some BED])]', '[is encoded in some R language]', '[is executed in some data normalization]']}\nGenerated CQs:", "output": "Is HilbertVis categorized under the broader class of software? | Which software subclasses include HilbertVis as a more specific instance? | What general classifications encompass HilbertVis within the software hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Single particle analysis\nDescription: Single particle analysis is a subclass of both Structure analysis and Image analysis, and is characterized by the requirement that it is related to the topic of Structural biology. It refers to an image processing technique that combines and analyzes multiple images of a particulate sample, such as proteins or viruses, to produce higher quality, interpretable images—typically used to enhance information obtained from low resolution methods like transmission electron microscopy (TEM).\nAxiom: {'subClassOf': ['Image analysis'], 'propertyRestrictions': ['[has topic some Structural biology]']}\nGenerated CQs:", "output": "Is Single particle analysis included within the broader set of Structure analysis methods? | Which analytical approaches are more specific than Structure analysis, such as Single particle analysis? | What higher-level analysis categories encompass Single particle analysis? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene annotation format\nDescription: Gene annotation format is a subclass of Format (typed) that is specifically used as the format of some Gene report. According to its definition, it represents the format of a report concerning a particular locus, gene, gene system, or groups of genes. This ensures that any Gene annotation format is necessarily associated with documenting information about genetic entities in a structured manner.\nAxiom: {'subClassOf': ['Format (typed)'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is every gene annotation format necessarily associated with at least one gene report through the 'is format of' property? | Does a gene annotation format serve as the format specifically for some gene report? | For a given gene annotation format, can we identify at least one gene report that it formats by means of the 'is format of' relationship? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: 50-50 MANOVA\nDescription: 50-50 MANOVA is defined as a subclass of software. Members of this class are characterized by being outputs of some software publishing process involving Matforsk as a participant. They implement some 50-50 MANOVA algorithm, and are encoded in either R or MATLAB languages. This formalization captures 50-50 MANOVA as specialized analytical software produced in collaborative contexts with Matforsk, leveraging both R and MATLAB for implementation.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is encoded in some R language]', '[implements some 50-50 MANOVA algorithm]', '[is encoded in some MATLAB language]']}\nGenerated CQs:", "output": "Does the output of a 50-50 MANOVA always involve a software publishing process that includes Matforsk as a participant? | Is it possible for the output of a 50-50 MANOVA to result from a software publishing process that does not have Matforsk as a participant? | Must every output of a 50-50 MANOVA arise from both a software publishing process and guarantee Matforsk's participation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Immunoproteins, genes and antigens\nDescription: Immunoproteins, genes and antigens is a class defined as a subclass of both Protein families and Immunology. This class covers entities such as T cell receptors (TR), major histocompatibility complex (MHC), immunoglobulin superfamily (IgSF)/antibodies, and the major histocompatibility complex superfamily (MhcSF). It includes immunity-related genes, proteins, their ligands, and antigens involved in immune system function.\nAxiom: {'subClassOf': ['Protein families']}\nGenerated CQs:", "output": "Are Immunoproteins, genes and antigens classified as a subgroup under Immunology? | Which classes fall under the broader category of Immunology, including Immunoproteins, genes and antigens? | What are the higher-level categories to which Immunoproteins, genes and antigens are assigned? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene expression profile clustering\nDescription: Gene expression profile clustering is a subclass of both Clustering and Gene expression profile comparison. It involves performing cluster analysis specifically on gene expression (microarray) data, grouping similar gene expression profiles together. By axiom, any instance of Gene expression profile clustering must have as output some Processed microarray data. This class is used to formally represent analyses that discover patterns or groups within complex gene expression datasets.\nAxiom: {'subClassOf': ['Clustering'], 'propertyRestrictions': ['[has output some Processed microarray data]']}\nGenerated CQs:", "output": "Does Gene expression profile clustering fall under the broader class of Gene expression profile comparison? | Which specific techniques are categorized as subclasses of Gene expression profile comparison, including Gene expression profile clustering? | What are the immediate parent concepts of Gene expression profile clustering in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dat\nDescription: dat is a format defined as a subclass of both Textual format and Gene expression report format, specifically used for representing Affymetrix data files containing raw image data. Members of this class serve as formats for at least one Microarray spots image, indicating their direct association with raw image outputs from microarray experiments. This formalization ensures that any instance of dat is recognized as a textual and gene expression report format, uniquely related to microarray spot images.\nAxiom: {'subClassOf': ['Textual format'], 'propertyRestrictions': ['[is format of some Microarray spots image]']}\nGenerated CQs:", "output": "Does the dat format fall under the category of Gene expression report formats? | What are the specific formats classified as Gene expression report formats, including dat? | Which broader reporting format categories encompass dat? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dasdna\nDescription: dasdna is a subclass of both XML and Sequence record format (XML), indicating that it is an XML-based sequence record format. Specifically, it refers to the DAS sequence (XML) format, which is restricted to nucleotide-only data. The use of this format is deprecated.\nAxiom: {'subClassOf': ['XML']}\nGenerated CQs:", "output": "Is dasdna categorized as a specific type within Sequence record format (XML)? | What formats are considered narrower concepts under Sequence record format (XML), such as dasdna? | Which broader format classifications does dasdna fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: pure dna\nDescription: pure dna is defined as a subclass of both dna and pure nucleotide. It represents an alphabet for a DNA sequence that may include ambiguous or unknown nucleotide positions, but does not allow any non-sequence characters. This ensures that pure dna sequences are composed strictly of nucleotides (with possible ambiguities), excluding all extraneous symbols.\nAxiom: {'subClassOf': ['dna']}\nGenerated CQs:", "output": "Does pure dna qualify as an instance within the pure nucleotide category? | Which specific entities are classified under pure nucleotide, including pure dna? | To which broader classes is pure dna hierarchically associated? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CAF\nDescription: CAF (Common Assembly Format) is a subclass of both Textual format and Sequence assembly format (text). It is a sequence assembly format that encodes information in text form, specifically designed to represent contigs, base-call qualities, and other metadata related to assembled genetic sequences. This formalization situates CAF within the hierarchy of textual data formats for sequence assembly, highlighting its structure and intended use for storing detailed assembly metadata.\nAxiom: {'subClassOf': ['Textual format']}\nGenerated CQs:", "output": "Does CAF fall under the general classification of Sequence assembly format? | What specific format types, such as CAF, are classified as subclasses of Sequence assembly format? | Which broader format categories include CAF as a more specific type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Obsolete\nDescription: Obsolete is defined as a subclass of Development status, indicating it represents a specific developmental state. It is explicitly disjoint with Maintained, meaning an entity cannot simultaneously be classified as both Obsolete and Maintained. This ensures a clear distinction between entities that are no longer in active use or development (Obsolete) and those that continue to be supported or updated (Maintained).\nAxiom: {'subClassOf': ['Development status'], 'disjointWith': []}\nGenerated CQs:", "output": "What logical separation is asserted between Obsolete and Maintained entities in the ontology? | Is it permitted for a resource to be classified as both Obsolete and Maintained? | Which classes are declared as disjoint with Maintained in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: quantsmooth\nDescription: quantsmooth is defined as a subclass of software, characterized by several key attributes: it is implemented in the R language and operates within the context of data visualization. Members of this class must accept input in the form of either ILLUMINA data or Gene expression datasets, and the output generated is specifically a Graph plot. This ensures that any instance of quantsmooth is a piece of software for data visualization, encoded in R, designed to process biological datasets and produce graphical representations.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is encoded in some R language]', '[is executed in some data visualization]', '[has specified data output some Graph plot]']}\nGenerated CQs:", "output": "Does quantsmooth require at least one specified data input that is either an ILLUMINA data or a Gene expression dataset? | Is it necessary for every instance of quantsmooth to work with a data input that is of type ILLUMINA data or Gene expression dataset? | Can quantsmooth have any specified data input that is not categorized as either ILLUMINA data or Gene expression dataset? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Smultron\nDescription: Smultron is a subclass of software, specifically defined as an application that is executed in at least one text editing context. Each instance has the specific version 3.5.1 and is characterized as handling data inputs that are ontologies provided in some textual format. Smultron is declared to have the latest release status, and its official homepage is http://www.peterborgapps.com/smultron/.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[is executed in some text editing]', '[has version hasValue 3.5.1]', '[has specified data input some (Ontology and [has format specification some Textual format])]', '[has declared status some Latest release]', '[has website homepage hasValue http://www.peterborgapps.com/smultron/]']}\nGenerated CQs:", "output": "Is Smultron classified as a type of software? | Which entities are specified as subclasses under software, including Smultron? | What broader categories include Smultron within their classification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CDF binary format\nDescription: CDF binary format is defined as a subclass of Binary format and is specifically published by Affymetrix. This class represents the binary variant of the CDF format; due to historical uncertainty about the format's original specification (ASCII or binary), this class has been clearly designated for the binary version, while a separate class (CDF ASCII format) exists for the ASCII variant.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[is published by hasValue Affymetrix]']}\nGenerated CQs:", "output": "Is CDF binary format categorized as a subclass of Binary format? | Which types are encompassed by the Binary format class, and does this include CDF binary format? | What are the broader format categories that include CDF binary format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ontology format\nDescription: Ontology format is defined as a subclass of Format (typed) and is characterized by the property that it is the format of at least one Ontology. Members of this class represent formats specifically used for ontologies, ensuring a clear association between an ontology and its format type.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[is format of some Ontology]']}\nGenerated CQs:", "output": "Is Ontology format categorized under Format? | Which types are classified as specializations of Format, such as Ontology format? | What broader classes does Ontology format fall within? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Endnote\nDescription: Endnote is a subclass of software defined as citation management software with a graphical user interface, operating under a proprietary commercial software license. It maintains a live status and has its official homepage at http://www.endnote.com/. The software is used within the domain of citation management and is an output of a software publishing process that involves Thomson Reuters as a participant. These axioms formally characterize Endnote as an actively maintained, proprietary, GUI-based citation management tool linked to Thomson Reuters and distributed via its dedicated website.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has interface some graphical user interface]', '[has license some Proprietary commercial software license]', '[has declared status some Live]', '[has website homepage hasValue http://www.endnote.com/]', '[output of some (software publishing process and [has participant hasValue Thompson Reuters])]']}\nGenerated CQs:", "output": "Does every Endnote instance require execution within at least one citation management context? | Is it necessary for Endnote to be associated with the execution property in relation to citation management systems? | Can an Endnote be executed independently of any citation management environment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PubChem bioassay ID\nDescription: PubChem bioassay ID is a subclass of both Identifier (typed) and PubChem ID, indicating it is a specific type of identifier used within the PubChem resource. It is defined as the identifier assigned to an assay entry in the PubChem database, enabling unambiguous reference to bioassays curated by PubChem.\nAxiom: {'subClassOf': ['Identifier (typed)']}\nGenerated CQs:", "output": "Is every PubChem bioassay ID categorized under PubChem ID? | Which identifiers fall under the broader class of PubChem ID, including PubChem bioassay ID? | What are the parent categories of PubChem bioassay ID? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Surface rendering\nDescription: Surface rendering is defined as a subclass of both Structure visualisation and Protein surface calculation. It involves calculating the positions of dots, each specified by three coordinates (x, y, z) and typically a color, which are homogeneously distributed over the surface of a molecule. This process aids in the visual representation and analysis of molecular surfaces.\nAxiom: {'subClassOf': ['Protein surface calculation']}\nGenerated CQs:", "output": "Is Surface rendering categorized under the broader class of Structure visualisation? | What are the specific subclasses encompassed by Structure visualisation such as Surface rendering? | Under which higher-level visualisation categories can Surface rendering be classified? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Text mining\nDescription: Text mining is a subclass of Analysis, defined as the process of analyzing text—typically biomedical and informatics literature—to extract information. Formally, any instance of text mining operates on some input that is a Report, pertains to a topic within Data mining, and produces as output a Text mining report. This class captures methodologies and systems that utilize reports as input and focus on extracting structured data or insights from textual content related to data mining.\nAxiom: {'subClassOf': ['Analysis'], 'propertyRestrictions': ['[has input some Report]', '[has output some Text mining report]']}\nGenerated CQs:", "output": "Is every instance of Text mining necessarily associated with at least one topic that is Data mining? | Does Text mining require the presence of the has topic relation to Data mining in its definition? | Can Text mining exist without having Data mining as a topic? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FreeBSD\nDescription: FreeBSD is defined as a subclass of software license and is compatible with both GNU GPL v2 and GNU GPL v3 licenses. This license includes several clauses: the requirement that source code must be available, that distribution must include notices, and that derivative software is permitted. These characteristics ensure that FreeBSD enables broad software reuse and distribution while maintaining attribution and allowing for the creation of derivative works.\nAxiom: {'subClassOf': ['software license'], 'propertyRestrictions': ['[is compatible license of some GNU GPL v2]', '[has clause some Source code available]', '[has clause some derivative software allowed]', '[is compatible license of some GNU GPL v3]']}\nGenerated CQs:", "output": "Is it required that every FreeBSD instance has at least one clause associated with a distribution that includes notices? | Can FreeBSD possess a clause if it is not linked to any distribution with notices? | Does FreeBSD necessarily have a relationship via ‘has clause’ to some distribution entity that contains notices? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Splice transcript prediction\nDescription: Splice transcript prediction is a subclass of Splicing model analysis, focused on the prediction of splicing alternatives or transcript isoforms through the analysis of sequence data. Members of this class are associated with topics related to gene structure, indicating that predictions pertain to the organization and variation of genes at the transcript level.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has topic some Gene structure]']}\nGenerated CQs:", "output": "Is Splicing model analysis a direct superclass of Splice transcript prediction? | Which analysis types are classified under Splicing model analysis, such as Splice transcript prediction? | Under which broader analysis categories does Splice transcript prediction fall? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: mspcrunch\nDescription: mspcrunch is defined as a subclass of both Textual format and Database hits (sequence) format. It represents the format used for results produced by sequence database searches utilizing a variant of MSPCrunch. This class captures result formats that are textual and specifically designed to document database hit information from MSPCrunch-based search tools.\nAxiom: {'subClassOf': ['Textual format']}\nGenerated CQs:", "output": "Is mspcrunch a specific instance within the broader category of Database hits (sequence) format? | Which formats are defined as more specialized than Database hits (sequence) format, such as mspcrunch? | What overarching categories does mspcrunch fall under within sequence data formats? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Query and retrieval\nDescription: Query and retrieval is a subclass of information processing that focuses on searching or querying data resources to retrieve entries or annotations. Members of this class produce some form of data as output and are concerned specifically with topics related to data search, query, and retrieval. This formalization ensures that any process classified under query and retrieval involves both the act of querying/searching and the acquisition of data or annotations from relevant data resources.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has output some data]', '[has topic some Data search, query and retrieval]']}\nGenerated CQs:", "output": "Does Query and retrieval fall under the broader classification of information processing? | Which specific categories are encompassed within information processing, including Query and retrieval? | What higher-level concepts include Query and retrieval as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RBioinf\nDescription: RBioinf is defined as a subclass of software characterized by its use of the R programming language and its implementation of linear modelling functionality. It accepts data inputs that are specifically R data frames and outputs images, with both inputs and outputs subject to precise format specifications. This class formalizes that any RBioinf software must process data in the form of R data frames, produce image outputs conforming to specified image formats, and must be implemented in the R language with capabilities for linear modelling.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data output some (Image and [has format specification some image format])]', '[is encoded in some R language]', '[implements some Linear modelling]']}\nGenerated CQs:", "output": "Does RBioinf require that its specified data input includes data with at least one format specification of an R data frame? | Is it necessary for RBioinf to have the has specified data input property relating to data that has a format specification of an R data frame? | Can RBioinf’s specified data input be data without any format specification as an R data frame? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NMR spectrum\nDescription: NMR spectrum is a subclass of Spectrum and represents spectral information for a molecule derived from a nuclear magnetic resonance (NMR) experiment. By axiom, every NMR spectrum is linked with at least one topic in Structural biology, situating it within research relevant to molecular structure determination. This class formalization ensures all instances pertain to spectra associated with structural biology analyses using NMR techniques.\nAxiom: {'subClassOf': ['Spectrum'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is it necessary for an NMR spectrum propertyRestriction to have the topic Structural biology? | Can an NMR spectrum propertyRestriction exist without being related to Structural biology? | Are there NMR spectrum propertyRestrictions that are necessarily associated with the topic Structural biology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cell type name\nDescription: Cell type name is a subclass of both Name and Cell type identifier. It represents the name assigned to a type or group of cells, serving as an identifier within biological and ontological contexts. This class formally captures the concept of cell type naming for purposes such as annotation, identification, and classification.\nAxiom: {'subClassOf': ['Cell type identifier']}\nGenerated CQs:", "output": "Does Cell type name fall under the classification of Name? | Which entities are encompassed as more specific types of Name, including Cell type name? | What broader categories is Cell type name associated with in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TreeBASE format\nDescription: TreeBASE format is defined as a subclass of both Textual format and Phylogenetic tree format (text), indicating it is a specific type of text-based format used for representing phylogenetic trees. The class is described as the format used for entries in the TreeBASE database of phylogenetic data, highlighting its application within the domain of phylogenetic data management and exchange.\nAxiom: {'subClassOf': ['Textual format']}\nGenerated CQs:", "output": "Is TreeBASE format classified as a type of Phylogenetic tree format? | Which data formats fall under the category of Phylogenetic tree format, including TreeBASE format? | What are the more general data format categories that encompass TreeBASE format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: OmniOutliner\nDescription: OmniOutliner is defined as a subclass of software, specifically characterized as the output of either a software development or publishing process involving the participant Omni. It is designed to be executed for document outlining tasks. The software is associated with a proprietary commercial license and its official homepage is http://www.omnigroup.com/products/omnioutliner/. OmniOutliner specifies data output in the OmniOutline format, adhering to a defined format specification for its data.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[output of some (software development process and [has participant hasValue Omni])]', '[is executed in some document outlining]', '[output of some (software publishing process and [has participant hasValue Omni])]', '[has website homepage hasValue http://www.omnigroup.com/products/omnioutliner/]', '[has license some Proprietary commercial software license]', '[has specified data output some (data and [has format specification some OmniOutline format])]']}\nGenerated CQs:", "output": "Is OmniOutliner categorized under the broader class of software? | Which subclasses does software include, such as OmniOutliner? | To which higher-level categories does OmniOutliner conceptually belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene ID (SGD)\nDescription: Gene ID (SGD) is defined as a subclass of both Gene ID and SGD ID. It represents identifiers that uniquely reference gene entries within the Saccharomyces Genome Database (SGD). Members of this class serve as unique identifiers for genes as recorded in the SGD database, ensuring precise mapping and retrieval of genetic information associated with Saccharomyces cerevisiae.\nAxiom: {'subClassOf': ['Gene ID']}\nGenerated CQs:", "output": "Is every Gene ID (SGD) instance inherently classified as an SGD ID? | Which identifiers are defined as specific types under the broader SGD ID class? | What are the more general categories that encompass Gene ID (SGD)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Taverna workflow format\nDescription: Taverna workflow format is formally defined as a subclass of both XML and Workflow format. This means it is a type of workflow format that is specifically encoded in XML. The class describes formats used to represent Taverna workflows, aligning with the definition: \"Format of Taverna workflows.\"\nAxiom: {'subClassOf': ['Workflow format']}\nGenerated CQs:", "output": "Is Taverna workflow format an instance of the broader category XML? | Which workflow formats are more specific than XML, for example, Taverna workflow format? | To which overarching data format categories does Taverna workflow format belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: limmaGUI\nDescription: limmaGUI is a subclass of software specifically designed for input and output of text data sets, where output formats are limited to those having only the TIFF specification. It implements linear modelling techniques, is encoded in the R language, and has been published by Bioconductor.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data output some (Text data set and [has format specification only TIFF])]', '[implements some Linear modelling]', '[has specified data input some Text data set]', '[is encoded in some R language]']}\nGenerated CQs:", "output": "Is every instance of limmaGUI necessarily published by Bioconductor? | Can a limmaGUI have any publisher other than Bioconductor? | Is it required for limmaGUI to have the value Bioconductor for the property 'is published by'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein domain classification format\nDescription: Protein domain classification format is a subclass of Format (typed) and represents a data format specifically used for reporting on the classification of sequences and/or structures of protein structural domains. By axiom, any instance of this class must serve as the format for at least one Protein family report. This ensures that such formats are formally recognized as integral to the documentation and communication of protein domain classification data.\nAxiom: {'subClassOf': ['Format (typed)'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Must every protein domain classification format be associated with at least one protein family report through the 'is format of' property? | Can a protein domain classification format exist without being the format for any protein family report? | Is it required that a protein domain classification format serves as the format for some report that describes a protein family? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Virulence prediction\nDescription: Virulence prediction is a subclass of both Sequence analysis and Prediction and recognition, and is defined as processes or activities that involve predicting the degree of pathogenicity (virulence) of a microorganism based on the analysis of molecular sequences. Additionally, this class is restricted to analyses that have a topic related to Microbiology, ensuring its relevance to the study of microorganisms and their potential for causing disease.\nAxiom: {'subClassOf': ['Sequence analysis'], 'propertyRestrictions': ['[has topic some Microbiology]']}\nGenerated CQs:", "output": "Is Virulence prediction classified under the more general category of Prediction and recognition? | What specialized forms of Prediction and recognition exist, including Virulence prediction? | Which higher-level concepts encompass Virulence prediction? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aaindex\nDescription: aaindex is defined as a subclass of both Textual format and Amino acid index format. It specifically refers to the amino acid index format utilized by the AAindex database, which is used to represent data about amino acid properties in a textual structure. This class ensures that any format identified as aaindex must inherit characteristics of textual formats for amino acid indices.\nAxiom: {'subClassOf': ['Textual format']}\nGenerated CQs:", "output": "Is aaindex classified as a more specific form of Amino acid index format? | Which formats fall under the category of Amino acid index format, such as aaindex? | What broader classes does aaindex belong to within the context of amino acid index representation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CDF ASCII format\nDescription: CDF ASCII format is defined as a subclass of ASCII format, with the additional restriction that it must be published by Affymetrix. This means every instance of CDF ASCII format is a type of ASCII format and is specifically associated with Affymetrix as its publisher.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[is published by hasValue Affymetrix]']}\nGenerated CQs:", "output": "Is CDF ASCII format categorized as a type of ASCII format? | Which specific formats are included under the broader class of ASCII format? | What are the more general format categories that encompass CDF ASCII format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RDF format\nDescription: RDF format is defined as a subclass of both XML and Ontology format, indicating that it inherits characteristics from these classes. It is a serialization format that conforms to the Resource Description Framework (RDF) model, which is commonly used for representing information about resources in the Semantic Web. This classification highlights RDF format's position at the intersection of ontology-based knowledge representation and XML-based data structuring.\nAxiom: {'subClassOf': ['Ontology format']}\nGenerated CQs:", "output": "Does RDF have a more general type, such as XML? | Which classes fall under the broader category represented by XML, specifically including RDF? | Of which broader representations is RDF a specific example? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Transcription factor accession\nDescription: Transcription factor accession is defined as a subclass of Accession, Protein accession, and Transcription factor identifier. It represents the accession of an entry from a database specifically pertaining to transcription factors or their binding sites, uniquely identifying these entities within such resources. This formalization ensures that any transcription factor accession is recognized both as a general accession and as a specialized identifier for proteins with transcription factor activity.\nAxiom: {'subClassOf': ['Protein accession', 'Transcription factor identifier']}\nGenerated CQs:", "output": "What categories is Transcription factor accession classified under within the accession taxonomy? | Which accessions are specifically categorized as Transcription factor accession? | Does Accession encompass Transcription factor accession as one of its subtypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Repeat sequence organisation analysis\nDescription: Repeat sequence organisation analysis is defined as a subclass of both Sequence composition calculation and Repeat sequence analysis, indicating that it inherits characteristics from both analytical approaches. It involves the analysis of the organization of repeat sequences within biological data, specifically focusing on aspects such as periodicity. This class is intended for methods and processes that evaluate how repeat sequences are arranged and structured within a given sequence, emphasizing their compositional and organizational properties.\nAxiom: {'subClassOf': ['Repeat sequence analysis']}\nGenerated CQs:", "output": "Does Repeat sequence organisation analysis fall under the broader class of Sequence composition calculation? | Which specific analyses are classified under Sequence composition calculation, such as Repeat sequence organisation analysis? | What more general analysis categories encompass Repeat sequence organisation analysis? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Stock number\nDescription: Stock number is defined as a subclass of both Identifier (typed) and Accession, representing a specific type of typed identifier used for cataloguing. It is characterized as an identifier assigned to stock from a catalogue of biological resources, enabling precise identification and tracking of biological material in resource collections.\nAxiom: {'subClassOf': ['Accession']}\nGenerated CQs:", "output": "Does Stock number fall under the category of Identifier? | Which specific Identifier types include Stock number as a subclass? | What broader categories is Stock number classified under according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence similarity search\nDescription: Sequence similarity search is defined as a subclass of both Sequence comparison and Database search. It refers to the process of searching a sequence database to retrieve sequences that are similar to a given query sequence. This class links the computational method of comparing biological or other sequences with the practical task of searching databases, emphasizing the retrieval of similar sequences based on a defined similarity criterion.\nAxiom: {'subClassOf': ['Database search']}\nGenerated CQs:", "output": "Is Sequence similarity search categorized under the broader class of Sequence comparison? | Which specific types of Sequence comparison include Sequence similarity search as a subclass? | What higher-level concepts encompass Sequence similarity search within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene name\nDescription: Gene name is defined as a subclass of both Name and Gene identifier. It refers to the name of a gene, typically assigned by a person or according to a specific naming scheme. Gene names are generally more intuitive and readable than gene symbols, may include whitespace, and are often used to identify similar genes across different species or to help derive gene symbols.\nAxiom: {'subClassOf': ['Name']}\nGenerated CQs:", "output": "Is Gene identifier a broader classification encompassing Gene name? | Which entities are categorized as more specific types under Gene identifier, such as Gene name? | To which higher-level categories does Gene name conceptually relate within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Scanning software G2565AA version A6.3.1\nDescription: Scanning software G2565AA version A6.3.1 is defined as a subclass of scanning software, and is characterized by being developed specifically by Agilent Technologies. Any individual instance of this class must be a scanning software product with this version identifier and origin. This formalization prevents classification of scanning software from other developers or different versions under this class.\nAxiom: {'subClassOf': ['scanning software'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is Scanning software G2565AA version A6.3.1 necessarily developed by Agilent Technologies? | Can Scanning software G2565AA version A6.3.1 have a developer other than Agilent Technologies? | Does the property restriction require that Agilent Technologies is assigned as the developer for Scanning software G2565AA version A6.3.1? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: xls\nDescription: xls is defined as a subclass of both XML and Document format, indicating that it is a type of document format that utilizes XML technology. It specifically refers to the Microsoft Excel spreadsheet format, which is used for storing, organizing, and exchanging tabular data in Excel.\nAxiom: {'subClassOf': ['Document format']}\nGenerated CQs:", "output": "Is xls classified as a type of XML? | Which file types are more specific variations of XML, such as xls? | What broader categories include xls in their classification hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylip character frequencies format\nDescription: Phylip character frequencies format is a subclass of both Textual format and Phylogenetic continuous quantitative character format. It is defined as a PHYLIP file format specifically intended to represent character frequency data within phylogenetic analyses. Members of this class are textual file formats designed to encode continuous quantitative character frequencies, supporting data exchange and processing in phylogenetic studies.\nAxiom: {'subClassOf': ['Phylogenetic continuous quantitative character format']}\nGenerated CQs:", "output": "Is Phylip character frequencies format classified under the broader group of Textual format? | Which formats are specified as subcategories of Textual format, including Phylip character frequencies format? | What higher-level categories encompass Phylip character frequencies format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NCBI taxonomy ID\nDescription: NCBI taxonomy ID is defined as a subclass of both Ontology concept ID and Organism accession. This class represents a stable, unique identifier assigned to each taxonomic group (such as species, family, order, or any other rank) in the NCBI taxonomy database. It provides a persistent and distinct reference for organisms within the taxonomy framework.\nAxiom: {'subClassOf': ['Organism accession']}\nGenerated CQs:", "output": "Is the NCBI taxonomy ID classified as a type of Ontology concept ID? | Which identifiers are subclasses of Ontology concept ID, including NCBI taxonomy ID? | What broader categories encompass the NCBI taxonomy ID as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: cghMCR\nDescription: cghMCR is defined as a subclass of software, specifically characterized by implementation of some MCR (Minimum Common Regions) algorithm. Instances of this class are published exclusively by Bioconductor and are implemented in the R programming language. cghMCR operates within data normalization processes, requiring as input data with the format specification of an R data frame, and outputs either graphical plots or data conforming to the R data frame format. This ensures that cghMCR software tools conform to standardized input/output requirements and are integrated with Bioconductor’s platform for bioinformatics analysis.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is executed in some data normalization]', '[has specified data output some (Graph plot and [has format specification only R data frame])]', '[is encoded in some R language]', '[implements some MCR algorithm]', '[has specified data input some [has format specification only R data frame]]']}\nGenerated CQs:", "output": "Is cghMCR always published by Bioconductor? | Can cghMCR be published by any publisher other than Bioconductor? | Is it required that cghMCR is associated with the publisher Bioconductor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Feature Extraction Software\nDescription: Feature Extraction Software is defined as a subclass of Affymetrix GeneChip Operating Software. Members of this class are characterized by their involvement in the execution of at least one feature extraction process. This ensures that any instance of Feature Extraction Software is specialized for or utilized in performing feature extraction tasks within the context of Affymetrix GeneChip operations.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[is executed in some feature extraction]']}\nGenerated CQs:", "output": "Is Feature Extraction Software classified under Affymetrix GeneChip Operating Software? | What specific types of software are encompassed by Affymetrix GeneChip Operating Software, including Feature Extraction Software? | Which broader software categories does Feature Extraction Software fall within? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Agilent Technologies Software\nDescription: Agilent Technologies Software is defined as a subclass of software, formally equivalent to any software that is the output of at least one software publishing process involving Agilent Technologies as a participant. This means that every individual in this class is a software product published with the involvement of Agilent Technologies.\nAxiom: {'subClassOf': [], 'equivalentClass': ['[output of some (software publishing process and [has participant hasValue Agilent Technologies])]']}\nGenerated CQs:", "output": "Does Agilent Technologies Software fall under the broader classification of software? | Which specific categories are encompassed within the software class, such as Agilent Technologies Software? | What higher-level groups include Agilent Technologies Software as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylogenetic tree generation (from molecular sequences)\nDescription: Phylogenetic tree generation (from molecular sequences) is defined as a subclass of both Sequence analysis and Phylogenetic tree generation (data centric). This class encompasses methods that construct phylogenetic trees by comparing multiple molecular sequences, estimating evolutionary distances, and inferring relationships. The process is used to elucidate gene families or make functional predictions based on sequence data, focusing specifically on the use of molecular sequence information to infer evolutionary histories.\nAxiom: {'subClassOf': ['Sequence analysis']}\nGenerated CQs:", "output": "Is Phylogenetic tree generation (data centric) a parent category of Phylogenetic tree generation (from molecular sequences)? | Which types of Phylogenetic tree generation (data centric) methods include the molecular sequence-based approach? | To what broader methodological categories does Phylogenetic tree generation (from molecular sequences) belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: File format name\nDescription: File format name is defined as a subclass of both Name and Format identifier, representing a name that serves as an identifier for a file format. Members of this class denote the names of various file formats, such as HTML, PNG, PDF, EMBL, or GenBank. This class captures terms used specifically to identify different file formats within digital systems.\nAxiom: {'subClassOf': ['Name']}\nGenerated CQs:", "output": "Does File format name fall under the broader class of Format identifier? | Which entities are classified as more specific instances of Format identifier, such as File format name? | What higher-level categories does File format name belong to within this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ChipSkipper\nDescription: ChipSkipper is defined as a subclass of software. Members of this class are characterized by being outputs of at least one software publishing process in which EMBL is a participant. This formalization ensures that any instance of ChipSkipper is not only software but is specifically associated with publishing activities involving the EMBL organization.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[output of some (software publishing process and [has participant hasValue EMBL])]']}\nGenerated CQs:", "output": "Is ChipSkipper categorized as a kind of software? | Which types of software include ChipSkipper as a subclass? | What broader categories encompass ChipSkipper within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein binding site prediction (from structure)\nDescription: Protein binding site prediction (from structure) is defined as a subclass of both Protein structural motif recognition and Protein binding site prediction. This class encompasses methods or processes that identify or predict catalytic residues, active sites, or other ligand-binding sites within the three-dimensional structures of proteins. It focuses on structural analysis to locate functional regions involved in molecular interactions.\nAxiom: {'subClassOf': ['Protein structural motif recognition']}\nGenerated CQs:", "output": "Does Protein binding site prediction (from structure) fall under the broader group of Protein binding site prediction? | Which methods are more specific than Protein binding site prediction, such as Protein binding site prediction (from structure)? | What broader categories does Protein binding site prediction (from structure) belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence alignment validation\nDescription: Sequence alignment validation is defined as a subclass of both Sequence alignment analysis and Validation. This class encompasses processes that evaluate the accuracy of molecular sequence alignments. Evaluations may be based solely on sequence data or may incorporate structural information. The formalization ensures that Sequence alignment validation is recognized as both a form of analysis specific to sequence alignments and as a validation procedure within broader biological contexts.\nAxiom: {'subClassOf': ['Validation']}\nGenerated CQs:", "output": "Is Sequence alignment analysis a parent category that includes Sequence alignment validation as a specific type? | Which specialized tasks fall under Sequence alignment analysis, such as Sequence alignment validation? | To which broader analysis domains does Sequence alignment validation conceptually belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TAIR accession\nDescription: TAIR accession is a subclass of both Accession and Identifier (hybrid). It represents an identifier specifically assigned to entries within the TAIR database, ensuring that each entry in the TAIR database can be uniquely and formally referenced using this identifier.\nAxiom: {'subClassOf': ['Accession']}\nGenerated CQs:", "output": "What identifiers are classified under the category of TAIR accession? | Is Identifier a direct parent class of TAIR accession? | Which broader classes encompass TAIR accession as their subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: spML\nDescription: spML is a standardized format, defined as a subclass of both XML and experiment annotation format, specifically designed for the description of proteomics sample processing methods excluding the use of gels, prior to mass spectrometric protein identification. The standardization is overseen by HUPO PSI PS, and beyond proteomics, spML may also be applicable in the context of metabolomics.\nAxiom: {'subClassOf': ['XML']}\nGenerated CQs:", "output": "Is spML categorized as a type of Experiment annotation format? | What are the more specific kinds of Experiment annotation format, including spML? | Which broader annotation format categories contain spML? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence file editing\nDescription: Sequence file editing is a subclass of both Sequence analysis and Sequence editing. It encompasses basic, non-analytical operations performed on sequence files or reports (potentially including sequence features). Such operations include concatenating files, removing or reordering sequences, and creating subsets or new sequence files. Sequence file editing does not include analytical transformations but is focused on managing and organizing sequence data within files.\nAxiom: {'subClassOf': ['Sequence editing']}\nGenerated CQs:", "output": "Does Sequence file editing fall under the broader category of Sequence analysis? | What kinds of Sequence analysis include Sequence file editing as a more specific type? | To which higher-level analyses is Sequence file editing related as a subtype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TraML\nDescription: TraML (Transition Markup Language) is a standardized format established by HUPO PSI MSS for representing mass spectrometry transitions. In the ontology, TraML is defined as a subclass of both XML and Mass spectrometry data format, situating it as a specialized XML-based data format specifically for encoding transition information within the mass spectrometry domain.\nAxiom: {'subClassOf': ['XML']}\nGenerated CQs:", "output": "Is TraML classified under the broader category of Mass spectrometry data format? | Which data formats are narrower in scope than Mass spectrometry data format, such as TraML? | What higher-level categories include TraML as a member format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein property calculation (from sequence)\nDescription: Protein property calculation (from sequence) is defined as a subclass of both Protein property calculation and Protein sequence analysis. This class encompasses methods that calculate or predict physical or chemical properties—specifically non-positional properties—of a protein by processing its molecular sequence. The class focuses on deriving such properties based solely on sequence analysis, enabling the assessment of overall protein characteristics without reference to specific positional residues.\nAxiom: {'subClassOf': ['Protein sequence analysis']}\nGenerated CQs:", "output": "Is Protein property calculation (from sequence) categorized under the broader class of Protein property calculation? | Which specific methods are encompassed by Protein property calculation, including those derived from sequence information? | What general calculation classes does Protein property calculation (from sequence) fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Codon usage bias calculation\nDescription: Codon usage bias calculation is defined as a subclass of codon usage analysis. It is characterized by the production of at least one codon usage bias result as output. Members of this class specifically perform the calculation of codon usage bias, formally ensuring that any process or method classified here must output some form of codon usage bias metric as part of its analysis.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has output some Codon usage bias]']}\nGenerated CQs:", "output": "Is codon usage bias calculation classified as a type of codon usage analysis? | Which analysis methods are specialized forms of codon usage analysis, such as codon usage bias calculation? | To what broader analytical categories does codon usage bias calculation pertain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: nexusnon\nDescription: nexusnon is a textual sequence record format, formally defined as a subclass of \"Textual format\", \"Alignment format (text)\", and \"Sequence record format (text)\". It specifically refers to the Nexus/PAUP non-interleaved sequence format, which organizes sequence data in a non-interleaved manner for phylogenetic analyses and alignments.\nAxiom: {'subClassOf': ['Textual format', 'Sequence record format (text)']}\nGenerated CQs:", "output": "Is nexusnon categorized under the broader class of Alignment format? | Which Alignment format subclasses are defined, including nexusnon? | To which superordinate classes does nexusnon belong within the Alignment format hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence image\nDescription: Sequence image is defined as a subclass of both Sequence report and Image, indicating that it possesses characteristics of both categories. It represents an image depicting a molecular sequence, which may also display specific sequence features or properties. This formalization ensures that any individual classified as a Sequence image is simultaneously considered both a type of Sequence report and an Image, and specifically serves to visually convey molecular sequence information and its associated annotations.\nAxiom: {'subClassOf': ['Image']}\nGenerated CQs:", "output": "Is Sequence report a generalization of Sequence image? | Which specific types fall under the category of Sequence report, including Sequence image? | What broader concepts encompass Sequence image in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Reaction ID (KEGG)\nDescription: Reaction ID (KEGG) is defined as a subclass of both KEGG object identifier and Reaction ID. It denotes a unique identifier assigned to a biological reaction within the KEGG reactions database. This class is used to represent and reference specific biological reactions catalogued by KEGG through a standardized identifier.\nAxiom: {'subClassOf': ['KEGG object identifier']}\nGenerated CQs:", "output": "Are all Reaction ID (KEGG) instances classified under Reaction ID? | Which identifiers constitute subclasses of Reaction ID, specifically including Reaction ID (KEGG)? | Which upper-level categories include Reaction ID (KEGG) as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Staden format\nDescription: Staden format is a type of sequence record format represented in text, and is a subclass of both Textual format and Sequence record format (text). It is specifically used by the Staden suite, providing a structured means to record biological sequence data in a textual form.\nAxiom: {'subClassOf': ['Textual format']}\nGenerated CQs:", "output": "Is every Staden format classified under Sequence record format? | Which sequence record formats encompass Staden format as a more specific type? | Under which broader record format categories is Staden format organized? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TreeCon format\nDescription: TreeCon format is a type of phylogenetic tree format represented in text form. It is defined as a subclass of both Textual format and Phylogenetic tree format (text). The TreeCon format is specifically used for representing phylogenetic trees in a textual notation.\nAxiom: {'subClassOf': ['Textual format']}\nGenerated CQs:", "output": "Is TreeCon format categorized under the broader class of Phylogenetic tree format? | What specific formats fall under Phylogenetic tree format, such as TreeCon format? | Which higher-level format classes does TreeCon format belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: search engine\nDescription: search engine is defined as a subclass of software, and is formally equivalent to software that is executed in the context of web content search. This means that any instance of search engine must be a kind of software that operates specifically to facilitate the searching of web-based content.\nAxiom: {'subClassOf': ['software'], 'equivalentClass': []}\nGenerated CQs:", "output": "Is every search engine necessarily a type of software that is executed in at least one web content search? | Can a search engine be precisely defined as the intersection of software and those entities executed within a web content search? | Is the class of search engines equivalent to software with the additional condition of being executed in some web content search? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Peptide ID\nDescription: Peptide ID is defined as a subclass of both Peptide identifier and Molecule accession. It represents the accession assigned to a peptide, as deposited in a database. This classification indicates that Peptide ID serves as a unique molecular identifier specifically for peptides within database systems, inheriting the properties and constraints of both broader parent classes.\nAxiom: {'subClassOf': ['Peptide identifier']}\nGenerated CQs:", "output": "Is Peptide ID classified as a type of Molecule accession? | Which identifiers are narrower in scope than Molecule accession, such as Peptide ID? | What broader categories include Peptide ID as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence generation (protein)\nDescription: Sequence generation (protein) is defined as a subclass of both Protein analysis and Sequence generation. Members of this class are characterized by the process of generating a protein sequence by some means, reflecting activities or methods that result in the creation or determination of a protein’s amino acid sequence within the broader context of protein analysis and sequence generation tasks.\nAxiom: {'subClassOf': ['Sequence generation']}\nGenerated CQs:", "output": "Is sequence generation (protein) a more specific type within the domain of protein analysis? | What forms of protein analysis include sequence generation (protein) as a specialized method? | Under which higher-level analytical techniques does sequence generation (protein) fall? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Nucleic acid features (quadruplexes)\nDescription: Nucleic acid features (quadruplexes) is classified as a subclass of Obsolete concept (EDAM), indicating that it represents a concept that is no longer active or recommended for current use in the ontology. The class is defined as a report on quadruplex-forming motifs in a nucleotide sequence, highlighting its focus on sequence motifs capable of forming quadruplex structures.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which concepts fall under the category of Obsolete concept (EDAM), including Nucleic acid features (quadruplexes)? | Is Nucleic acid features (quadruplexes) classified under Obsolete concept (EDAM)? | What broader categories include Nucleic acid features (quadruplexes) in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CpG island and isochores\nDescription: CpG island and isochores is defined as a subclass of Gene transcription features, focusing on CpG-rich regions—commonly referred to as isochores—within nucleotide sequences. These regions are characterized by a high frequency of CpG dinucleotides and play important roles in gene regulation and transcriptional processes. The class specifically encompasses features related to the presence and function of CpG-rich regions in genomic sequences.\nAxiom: {'subClassOf': ['Gene transcription features']}\nGenerated CQs:", "output": "Are CpG island and isochores included as specific types under Gene transcription features? | What higher-level categories encompass CpG island and isochores in the context of gene transcription? | Which subclasses are defined within Gene transcription features, such as CpG island and isochores? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Logit-t algorithm\nDescription: Logit-t algorithm is a subclass of algorithm, indicating that it inherits all general characteristics of algorithms. No further constraints or distinguishing axioms are provided, so its definition is currently limited to being a type of algorithm.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "Is Logit-t algorithm classified under the general category of algorithm? | Which types of algorithm encompass the Logit-t algorithm as a specific example? | What are the specialized subclasses included within algorithm, such as Logit-t algorithm? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Amino acid index (White-Wimley data)\nDescription: Amino acid index (White-Wimley data) is a subclass of Amino acid index, specifically representing experimental free energy values associated with water-interface and water-octanol transitions for amino acids. This class formalizes data characterizing the thermodynamic properties of amino acids as measured by the White-Wimley method.\nAxiom: {'subClassOf': ['Amino acid index']}\nGenerated CQs:", "output": "What are the higher-level categories associated with \"Amino acid index (White-Wimley data)\"? | Which specific indices fall under the broader class of \"Amino acid index\" and include \"Amino acid index (White-Wimley data)\"? | Is \"Amino acid index (White-Wimley data)\" classified under the category \"Amino acid index\"? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence database search (by sequence using global alignment-based methods)\nDescription: Sequence database search (by sequence using global alignment-based methods) is classified as a subclass of Obsolete concept (EDAM). This class encompasses search tools and processes that identify sequences similar to a query by applying global alignment-based methods, such as the Needleman and Wunsch algorithm. These approaches compare entire sequences to maximize overall alignment, and are considered outdated in the current ontology context.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What are the more specific concepts classified within Obsolete concept (EDAM), for example, Sequence database search (by sequence using global alignment-based methods)? | Does Sequence database search (by sequence using global alignment-based methods) fall under the category of Obsolete concept (EDAM)? | Which general knowledge categories encompass Sequence database search (by sequence using global alignment-based methods)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Database search (by sequence)\nDescription: Database search (by sequence) is classified as a subclass of Obsolete concept (EDAM), indicating it is no longer in active use within the ontology. It refers to the process of screening one or more molecular sequences against a database to identify similarities between the query sequence and database entries. This class represents a type of analysis focused on sequence comparison for the purpose of finding related or homologous sequences.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What are the more specific concepts that fall within Obsolete concept (EDAM), including Database search (by sequence)? | Which obsolete concepts, as defined in EDAM, encompass Database search (by sequence)? | Is Database search (by sequence) classified under the broader category of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: 50-50 MANOVA algorithm\nDescription: 50-50 MANOVA algorithm is defined as a subclass of algorithm, indicating it is a specific type of computational method. While no further axioms or restrictions are provided, this class represents algorithms designed for multivariate analysis of variance (MANOVA) employing a 50-50 partitioning strategy or criterion within their procedure.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "Under which broader algorithmic categories can the 50-50 MANOVA algorithm be grouped? | What algorithms encompass the 50-50 MANOVA algorithm as their subclass? | Is the 50-50 MANOVA algorithm classified as a specific type of algorithm? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Job identifier\nDescription: Job identifier is defined as a subclass of Identifier (typed). It represents an identifier specifically assigned to a submitted job, uniquely distinguishing it within a system or workflow. This class inherits all characteristics of Identifier (typed), ensuring that each job identifier maintains the constraints and semantics of typed identifiers.\nAxiom: {'subClassOf': ['Identifier (typed)']}\nGenerated CQs:", "output": "Is Job identifier classified as a more specific type of Identifier? | Which broader classes encompass Job identifier within the Identifier hierarchy? | What specific kinds of Identifier include Job identifier in their classification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: JPEG 2000\nDescription: JPEG 2000 is a subclass of raster image format, indicating that it is a specific type of raster image format. This classification places JPEG 2000 within the hierarchy of digital image encoding formats that represent images as a grid of pixels.\nAxiom: {'subClassOf': ['raster image format']}\nGenerated CQs:", "output": "Is JPEG 2000 classified as a kind of raster image format? | What broader categories is JPEG 2000 an instance or subclass of? | Which raster image format subclasses include JPEG 2000? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DNA transduction map\nDescription: DNA transduction map is defined as a subclass of Genetic map. It specifically refers to a gene map that illustrates the distances between loci by utilizing relative cotransduction frequencies. This means such maps provide information about the relative positions of genes based on the likelihood of their co-transfer during the process of genetic transduction.\nAxiom: {'subClassOf': ['Genetic map']}\nGenerated CQs:", "output": "What are the direct superclasses associated with DNA transduction map? | Is DNA transduction map categorized under Genetic map? | Which genetic map subclasses exist, and does this include DNA transduction map? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Article comparison\nDescription: Article comparison is a subclass of Comparison, defined as an activity that involves the comparison of two or more scientific articles. This class formalizes instances where scientific articles are systematically contrasted or evaluated with respect to each other.\nAxiom: {'subClassOf': ['Comparison']}\nGenerated CQs:", "output": "What broader concept does Article comparison fall under within the ontology? | Which comparisons encompass subtypes such as Article comparison? | Is Article comparison categorized as a more specific form of Comparison? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: obsolete_Microarray data\nDescription: obsolete_Microarray data is defined as a subclass of Obsolete concept (EDAM), indicating that it represents a concept that is no longer in active use or has been superseded within the ontology. As an obsolete class, individuals should no longer be assigned to this category, and usage is discouraged in favor of more current concepts.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which data types are specified as subclasses of Obsolete concept (EDAM)? | Is obsolete_Microarray data classified under Obsolete concept (EDAM)? | What broader category encompasses obsolete_Microarray data in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Lognormal Normal with Modied Variance Model\nDescription: Lognormal Normal with Modified Variance Model is defined as a subclass of algorithm. This class represents a specific type of algorithm, and is formally categorized under the general class of algorithms. Further specialization or characteristics about its function, parameters, or use are not specified in the current axioms.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "What broader classes encompass Lognormal Normal with Modied Variance Model within the ontology? | Which types of algorithm include Lognormal Normal with Modied Variance Model as a specialization? | Is Lognormal Normal with Modied Variance Model categorized under algorithm? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Nucleic acid stitch profile\nDescription: Nucleic acid stitch profile is a subclass of Nucleic acid melting profile. It represents a diagrammatic or computational depiction of hybridized or double-stranded nucleic acids (such as DNA or DNA/RNA hybrids) showing partly melted conformations and their associated probabilities across a range of temperatures. The stitch profile captures detailed features such as location, size, probability, and fluctuations of possible loop openings at specific temperatures, providing insights into the thermal stability and dynamic structural transitions of nucleic acids.\nAxiom: {'subClassOf': ['Nucleic acid melting profile']}\nGenerated CQs:", "output": "To which higher-level profile classes does Nucleic acid stitch profile belong? | Is Nucleic acid stitch profile categorized under the broader class of Nucleic acid melting profile? | Which more specific profiles fall under the category of Nucleic acid melting profile? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Structure alignment report\nDescription: Structure alignment report is defined as a subclass of Report, serving as a broad data type used primarily as a placeholder for more specific report types. It represents an informative report detailing data derived from the alignment of molecular tertiary structures, providing insight into structural similarities or differences between molecules.\nAxiom: {'subClassOf': ['Report']}\nGenerated CQs:", "output": "Does Structure alignment report fall under the general classification of Report? | What broader report categories is Structure alignment report associated with? | Which types of reports encompass Structure alignment report as a specific kind? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: predictive modeling task\nDescription: predictive modeling task is defined as a subclass of data mining task. It involves learning a (probabilistic) predictive model from a dataset comprising pairs (d, c), where d represents the description (of type Td) and c is the class or target (of type Tc). The core objective is to learn a mapping, m :: Td → Tc, that accurately predicts the target value c from the description d. The quality of a predictive modeling task is measured by how closely the predicted target values (m(d)) match the actual observed target values in the dataset.\nAxiom: {'subClassOf': ['data mining task']}\nGenerated CQs:", "output": "Which data mining task subclasses include predictive modeling task? | Does predictive modeling task fall under the classification of data mining task? | What broader task categories is predictive modeling task associated with? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Interaction data\nDescription: Interaction data is defined as a subclass of data. It represents information specifically pertaining to interactions, thereby inheriting all characteristics of data while providing a more focused context on records or attributes related to interactive events or behaviors.\nAxiom: {'subClassOf': ['data']}\nGenerated CQs:", "output": "Which specific data subclasses include Interaction data? | What broader categories does Interaction data fall under within the data hierarchy? | Is Interaction data classified as a type of data? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Spectral analysis\nDescription: Spectral analysis is a subclass of Analysis and refers to the process of analyzing a spectrum generated from a mass spectrometry experiment or other types of experiments. This class encompasses methods and practices for interpreting spectral data to extract relevant information, and is formally categorized under the broader concept of Analysis.\nAxiom: {'subClassOf': ['Analysis']}\nGenerated CQs:", "output": "What general classes does Spectral analysis fall under within the classification of Analysis? | Which types of Analysis include Spectral analysis as a more specific instance? | Is Spectral analysis recognized as a category within the broader concept of Analysis? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ChemSpider entry format\nDescription: ChemSpider entry format is defined as a subclass of Obsolete concept (EDAM). It refers to the format used for entries in ChemSpider, a database of chemical structures and property predictions. The classification under \"Obsolete concept\" indicates that this format is no longer in active use or recommended.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which specific formats are categorized under Obsolete concept (EDAM), such as ChemSpider entry format? | What broader conceptual groups encompass ChemSpider entry format according to the classification hierarchy? | Is ChemSpider entry format classified as a type of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Codon usage\nDescription: Codon usage is defined as a subclass of the obsolete concept in EDAM, indicating that it is no longer actively maintained. The class represents a broad data type concerning patterns in the use of codons, and currently serves as a placeholder for more specific types related to codon usage data.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which broader classes does codon usage belong to within the EDAM ontology structure? | What concepts are categorized under the obsolete concept class in EDAM, including codon usage? | Is codon usage classified as an obsolete concept in the EDAM ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Plasmid map drawing\nDescription: Plasmid map drawing is defined as a subclass of map drawing, specifically focused on the creation of circular maps depicting DNA structures, such as plasmids. This class encompasses graphical representations that illustrate the features, genes, and elements present on plasmid DNA, ensuring their visualization aligns with the broader category of map drawings.\nAxiom: {'subClassOf': ['Map drawing']}\nGenerated CQs:", "output": "What are the parent categories of plasmid map drawing? | Which types of map drawing include plasmid map drawing as a specific instance? | Is plasmid map drawing classified under the broader category of map drawing? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: EMBOSS supermatcher error file\nDescription: EMBOSS supermatcher error file is categorized as an obsolete concept (EDAM ontology), indicating it is no longer in active use. It specifically refers to error files generated by the EMBOSS (EMBASSY) supermatcher tool.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What higher-level concepts encompass EMBOSS supermatcher error file within the ontology? | Is EMBOSS supermatcher error file classified under the broader concept of Obsolete concept (EDAM)? | Which entities are specified as subclasses of Obsolete concept (EDAM), such as EMBOSS supermatcher error file? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence database name\nDescription: Sequence database name is defined as a subclass of Obsolete concept (EDAM), indicating that it represents a concept no longer in active use. The class refers to the name assigned to a molecular sequence database, specifying the designation or title under which such a database is identified. This definition clarifies that instances of this class are used to denote the names of molecular sequence databases but are considered obsolete within the ontology context.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Sequence database name classified under the broader concept of Obsolete concept (EDAM)? | Which specific concepts are contained within the category Obsolete concept (EDAM), including Sequence database name? | To which higher-level classes does Sequence database name belong within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Trauma medicine\nDescription: Trauma medicine is a subclass of Medicine, specifically focused on the treatment of bodily wounds or shock resulting from sudden physical injuries such as those caused by violence or accidents. This class encompasses the medical knowledge and practices involved in the immediate assessment, management, and care of trauma patients.\nAxiom: {'subClassOf': ['Medicine']}\nGenerated CQs:", "output": "What general medical domains encompass Trauma medicine? | Which medical specialties fall under the category of Medicine, including Trauma medicine? | Is Trauma medicine classified under the broader category of Medicine? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DTD\nDescription: DTD is a subclass of Obsolete concept (EDAM) and represents a document type definition (DTD). This class denotes a concept that is considered obsolete within the ontology. DTD is defined as a specification that describes the structure and permissible content of an XML document.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is DTD categorized under the broader concept of Obsolete concept (EDAM)? | Which concepts are classified as more specific instances of Obsolete concept (EDAM), such as DTD? | What higher-level classifications does DTD fall under in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: G protein-coupled receptors (GPCR)\nDescription: G protein-coupled receptors (GPCR) are defined as a subclass of Obsolete concept (EDAM). This class covers the topic of G-protein coupled receptors (GPCRs), as specified in its definition. Classification as an obsolete concept indicates that this class is no longer in active use or has been superseded within the ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Are G protein-coupled receptors (GPCR) classified under the obsolete concepts in EDAM ontology? | Which entities are categorized as specializations of Obsolete concept (EDAM), including G protein-coupled receptors (GPCR)? | What broader categories encompass G protein-coupled receptors (GPCR) within the EDAM framework? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: geneseq\nDescription: geneseq is defined as a subclass of EMBL-like (text), indicating that it inherits the foundational characteristics of EMBL-like sequence formats. The class represents data in the Geneseq sequence format, serving as a specific variant or instance within the broader category of EMBL-like text formats.\nAxiom: {'subClassOf': ['EMBL-like (text)']}\nGenerated CQs:", "output": "What broader sequence categories encompass geneseq? | Is geneseq categorized as a type of EMBL-like? | Which sequence types are narrower classifications under EMBL-like, such as geneseq? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Molecular similarity score\nDescription: Molecular similarity score is defined as a subclass of Obsolete concept (EDAM). It refers to a score that quantifies the structural similarities between two molecules. This class represents outdated or deprecated concepts within the ontology context.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Does Molecular similarity score fall under the category of Obsolete concept (EDAM)? | Which broader categories encompass Molecular similarity score within the EDAM ontology? | What are the more specific concepts classified beneath Obsolete concept (EDAM), such as Molecular similarity score? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: graphical user interface\nDescription: graphical user interface is defined as a subclass of software interface. This means every graphical user interface is a type of software interface, distinguished by its focus on visual elements for user interaction such as windows, icons, and menus, as opposed to purely text-based interfaces.\nAxiom: {'subClassOf': ['software interface']}\nGenerated CQs:", "output": "Is graphical user interface classified under the broader category of software interface? | Which interfaces are specialized types of software interface, such as graphical user interface? | What higher-level categories encompass graphical user interface? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Article report\nDescription: Article report is a subclass of Obsolete concept (EDAM). It refers to data derived from the analysis of a scientific text, such as a full-text article from a scientific journal. This classification indicates that the \"Article report\" concept is considered obsolete within the EDAM ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which specific concepts fall under Obsolete concept (EDAM), including Article report? | What more general concepts encompass Article report within the ontology? | Is Article report classified under the broader category of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GenePix Pro 3\nDescription: GenePix Pro 3 is defined as a subclass of GenePix Pro. This means that every instance of GenePix Pro 3 is also an instance of GenePix Pro, inheriting all characteristics and constraints of the parent class. There are no additional distinguishing axioms or restrictions specified for this class beyond its hierarchical classification.\nAxiom: {'subClassOf': ['GenePix Pro']}\nGenerated CQs:", "output": "What broader categories does GenePix Pro 3 fall under in the classification hierarchy? | Which software types are classified under GenePix Pro, including GenePix Pro 3? | Is GenePix Pro 3 categorized as a type of GenePix Pro? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Lipids\nDescription: Lipids is defined as a subclass of Biochemistry, formally situating it within the domain of biochemical studies. The class concerns lipids and their structures, encompassing topics related to the molecular composition, properties, and functions of lipids within biological systems.\nAxiom: {'subClassOf': ['Biochemistry']}\nGenerated CQs:", "output": "What higher-level categories include lipids in their classification hierarchy? | Which entities are more specific subcategories under biochemistry, such as lipids? | Are lipids encompassed within the broader classification of biochemistry? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Complex Estimation Algorithm\nDescription: Complex Estimation Algorithm is defined as a subclass of algorithm. This means that every complex estimation algorithm is an algorithm, inheriting all general properties applicable to algorithms, while also indicating a specialization focused on complex estimation tasks. No additional axioms or property restrictions are specified.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "What types fall under the classification of algorithm, including Complex Estimation Algorithm? | Which more abstract groupings does Complex Estimation Algorithm belong to within the ontology? | Is Complex Estimation Algorithm categorized under the broader class of algorithm? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene features (exonic splicing enhancer)\nDescription: Gene features (exonic splicing enhancer) is defined as a subclass of Obsolete concept (EDAM), indicating that this concept is no longer in active use within the ontology. It refers to a report on exonic splicing enhancers (ESE) within an exon, documenting regions that promote the inclusion of exons during RNA splicing. The classification as obsolete suggests that researchers should refer to more current terms or concepts for this topic.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is exonic splicing enhancer classified as an obsolete concept in EDAM? | Which gene features are designated as obsolete concepts according to EDAM? | What broader categories encompass exonic splicing enhancer within the EDAM classification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cell biology\nDescription: Cell biology is a subclass of Biology, focusing on the study of cells. This class encompasses topics related to cells, including key genes and proteins involved in the cell cycle. It serves to address the molecular and functional aspects of cells within the broader context of biological sciences.\nAxiom: {'subClassOf': ['Biology']}\nGenerated CQs:", "output": "Which higher-level domains encompass Cell biology within their classification hierarchy? | Is Cell biology categorized under the broader discipline of Biology? | What specialized fields are classified as subtypes of Biology, such as Cell biology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence alignment (nucleic acid)\nDescription: Sequence alignment (nucleic acid) is a subclass of Sequence alignment, specifically referring to the alignment of multiple nucleotide sequences. This class captures the process by which two or more nucleic acid (DNA or RNA) sequences are arranged to identify regions of similarity, which may indicate functional, structural, or evolutionary relationships.\nAxiom: {'subClassOf': ['Sequence alignment']}\nGenerated CQs:", "output": "Which hierarchical parent classes is Sequence alignment (nucleic acid) associated with? | Is Sequence alignment (nucleic acid) classified under the broader category of Sequence alignment? | What specific types fall under Sequence alignment, and does this include Sequence alignment (nucleic acid)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence length range\nDescription: Sequence length range is a subclass of Obsolete concept (EDAM). It represents the specification of range(s) of length of sequences. This class is considered obsolete within the ontology, and its primary purpose was to define limits or intervals for the lengths that sequences can have.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What are the more specific subclasses represented under Obsolete concept (EDAM), such as Sequence length range? | Which categories encompass Sequence length range, specifically considering its relationship to Obsolete concept (EDAM)? | Is Sequence length range classified as a kind of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FACS data\nDescription: FACS data is defined as a subclass of data. This means that any instance of FACS data is categorized as data, with no additional constraints or distinguishing properties specified by the current axiom.\nAxiom: {'subClassOf': ['data']}\nGenerated CQs:", "output": "Is FACS data recognized as a specific type under the general category of data? | What broader data classifications does FACS data fall under? | Which data subtypes encompass FACS data as a more specialized instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dynamic Bayesian network model\nDescription: dynamic Bayesian network model is defined as a subclass of Bayesian Model. This means every dynamic Bayesian network model is, by definition, a type of Bayesian Model, inheriting all its fundamental properties and characteristics. This class typically represents Bayesian models that allow for temporal or sequential representation of probabilistic dependencies, suitable for modeling dynamic systems where variables evolve over time.\nAxiom: {'subClassOf': ['Bayesian Model']}\nGenerated CQs:", "output": "Is dynamic Bayesian network model classified as a type of Bayesian Model? | What broader modeling categories encompass dynamic Bayesian network model? | Which models are categorized under Bayesian Model, including dynamic Bayesian network model? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Atomic x coordinate\nDescription: Atomic x coordinate is a subclass of Atomic coordinate that specifically represents the Cartesian x coordinate of an atom within a molecular structure. This class is used to denote the x-axis spatial position of an atom, distinguishing it from other possible spatial coordinates in molecular data.\nAxiom: {'subClassOf': ['Atomic coordinate']}\nGenerated CQs:", "output": "Is Atomic x coordinate classified under the broader category of Atomic coordinate? | What are the hierarchical parent classes of Atomic x coordinate? | Which specific subtypes fall within Atomic coordinate, such as Atomic x coordinate? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Northern blot experiment\nDescription: Northern blot experiment is defined as a subclass of Proteomics experiment. It concerns the investigation and analysis techniques used in Northern Blot experiments, which typically involve the detection and study of RNA molecules. This class is used to capture information, protocols, or procedures specifically related to Northern Blot experimental methods under the broader category of proteomics research.\nAxiom: {'subClassOf': ['Proteomics experiment']}\nGenerated CQs:", "output": "Does the category of Proteomics experiment include more specific experiments such as Northern blot experiment? | Is Northern blot experiment a specialized form of Proteomics experiment? | Which experiments fall under the class of Proteomics experiment, including Northern blot experiment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ensembl ID ('Danio rerio')\nDescription: Ensembl ID ('Danio rerio') is defined as a subclass of 'Obsolete concept (EDAM)'. It represents the identifier assigned to an entry—such as an exon, gene, transcript, or protein—in the Ensembl 'core' database for the 'Danio rerio' (zebrafish) division. This class specifies identifiers that are considered obsolete within the EDAM ontology context.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which identifiers are classified as subclasses of Obsolete concept (EDAM)? | What parent classes are defined for Ensembl ID ('Danio rerio') within the ontology? | Is Ensembl ID ('Danio rerio') categorized under the broader class of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: System metadata\nDescription: System metadata is defined as a subclass of Resource metadata. It specifically encompasses metadata that pertains to software, hardware, or other aspects of a computer system, distinguishing it from broader resource metadata by its focus on computer system components and their characteristics.\nAxiom: {'subClassOf': ['Resource metadata']}\nGenerated CQs:", "output": "Which types of metadata are included within the category of Resource metadata? | What broader metadata categories encompass System metadata? | Is System metadata categorized under Resource metadata? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: EMBL accession\nDescription: EMBL accession is defined as a subclass of EMBL/GenBank/DDBJ ID, which means it is a specific type of sequence identifier within the broader INSDC (International Nucleotide Sequence Database Collaboration) context. Members of this class are accession numbers assigned to entries in the EMBL sequence database, serving as unique identifiers for nucleotide sequence records within EMBL.\nAxiom: {'subClassOf': ['EMBL/GenBank/DDBJ ID']}\nGenerated CQs:", "output": "Which identifiers are specified as subclasses under EMBL/GenBank/DDBJ ID, such as EMBL accession? | Is every EMBL accession classified as an EMBL/GenBank/DDBJ ID? | What are the direct superclass categories for EMBL accession? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene regulatory network processing\nDescription: Gene regulatory network processing is defined as a subclass of Obsolete concept (EDAM). It refers to processes that read and/or write networks of gene regulation. As an obsolete concept, its use is deprecated in favor of more current or accurate terms, but historically it represented the computational handling or manipulation of gene regulatory networks.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What higher-level classifications does gene regulatory network processing fall under? | Is gene regulatory network processing categorized under obsolete concept (EDAM)? | Which concepts are classified as specializations of obsolete concept (EDAM), including gene regulatory network processing? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: web user interface\nDescription: web user interface is defined as a subclass of graphical user interface, indicating that it inherits all properties and characteristics of graphical user interfaces. This class encompasses user interfaces accessed through web technologies, typically rendered in web browsers, and facilitates user interaction with software applications over the internet or an intranet.\nAxiom: {'subClassOf': ['graphical user interface']}\nGenerated CQs:", "output": "Which interfaces fall under the category of graphical user interface, such as web user interface? | Is web user interface classified as a type of graphical user interface? | What broader categories encompass web user interface? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Nucleic acid features report (expression signal)\nDescription: Nucleic acid features report (expression signal) is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer maintained or recommended for use. This class concerns regions within a nucleic acid sequence that contain a signal which alters a biological function, capturing sequence features relevant to changes in gene expression or functional activity.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What specialized types are listed within Obsolete concept (EDAM), including Nucleic acid features report (expression signal)? | Which broader groups encompass Nucleic acid features report (expression signal)? | Is Nucleic acid features report (expression signal) classified as a more specific concept under Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NONMEM data format\nDescription: NONMEM data format is a subclass of data format specification. It represents a specific data format standard used primarily for the input and handling of pharmacometric and population modeling data in NONMEM software. This class encapsulates all data structure requirements and constraints defined for compliant data interchange within NONMEM workflows.\nAxiom: {'subClassOf': ['data format specification']}\nGenerated CQs:", "output": "What are the superclass categories to which NONMEM data format belongs? | Which data format specifications encompass more specific types such as NONMEM data format? | Is NONMEM data format categorized under data format specification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein structure raw data\nDescription: Protein structure raw data is defined as a subclass of Experimental measurement. It represents raw data obtained from experimental methods used to determine protein structure. This class serves as a broad, placeholder data type, primarily intended to facilitate navigation within EDAM, rather than for direct annotation.\nAxiom: {'subClassOf': ['Experimental measurement']}\nGenerated CQs:", "output": "To which higher-level categories does Protein structure raw data pertain within the ontology? | Is Protein structure raw data classified as a more specific type under Experimental measurement? | Which subtypes are encompassed within Experimental measurement, specifically including Protein structure raw data? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ASCII format\nDescription: ASCII format is defined as a subclass of plain text file format. This means that any instance of ASCII format is also a plain text file format, characterized by storing data as unformatted text using the ASCII character encoding standard. The definition ensures that ASCII format files are recognized specifically as plain text representations, inheriting all properties of plain text file formats.\nAxiom: {'subClassOf': ['plain text file format']}\nGenerated CQs:", "output": "What broader file format categories does ASCII format fall under? | Which file formats are subclasses within the plain text file format category, including ASCII format? | Is ASCII format categorized as a more specific type under plain text file format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylogeny\nDescription: Phylogeny is defined as a subclass of Evolutionary biology, focusing on the study of evolutionary relationships among organisms. This class encompasses diverse phylogenetic methods, including the construction of phylogenetic trees from molecular sequence or morphological data, simulation of DNA sequence evolution, estimation or use of molecular clock and stratigraphic (age) data, and techniques for studying gene evolution. These methods collectively facilitate the analysis and inference of evolutionary patterns and relationships within and across species.\nAxiom: {'subClassOf': ['Evolutionary biology']}\nGenerated CQs:", "output": "Which fields are classified as subtypes of Evolutionary biology, such as Phylogeny? | Is Phylogeny categorized under the broader domain of Evolutionary biology? | What higher-level disciplines encompass Phylogeny within their scope? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: database creation\nDescription: database creation is classified as a subclass of information processing, meaning it represents a specific type of process involved in the handling or manipulation of information. Individuals of this class are characterized as activities or operations whose primary function is to establish or generate databases as part of broader information processing tasks.\nAxiom: {'subClassOf': ['information processing']}\nGenerated CQs:", "output": "Which broader categories encompass database creation within the ontology? | What specific processes are included under information processing, such as database creation? | Is database creation classified as a form of information processing? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Amino acid name (single letter)\nDescription: Amino acid name (single letter) is defined as a subclass of Amino acid name. It represents a single-letter identifier used to denote amino acids, for example, \"G\" for glycine. This class is used to capture the standardized single-character codes assigned to specific amino acids.\nAxiom: {'subClassOf': ['Amino acid name']}\nGenerated CQs:", "output": "Which specific designations are recognized as subclasses of amino acid name, including the single-letter representation? | To which higher-level groups is the single-letter amino acid name associated within the ontology? | Does the single-letter amino acid name fall under the broader category of amino acid name? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: raster image format\nDescription: raster image format is defined as a subclass of image format. This means every raster image format is an image format, but not all image formats are raster. Members of this class represent image formats in which images are composed of a grid of pixels, as opposed to formats based on vectors or other representations.\nAxiom: {'subClassOf': ['image format']}\nGenerated CQs:", "output": "Which types of image format specifically include raster image format as a subclass? | Is raster image format encompassed within the broader classification of image format? | What general format categories does raster image format fall under according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence alignment type\nDescription: Sequence alignment type is a subclass of Obsolete concept (EDAM). It represents a label or text token used to describe the type of a sequence alignment. Possible values encompass various alignment categories, such as those defined by EMBOSS and BLAST. This class captures the categorization of sequence alignments based on their methodological or functional characteristics.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which specific concepts are defined as subclasses of Obsolete concept (EDAM), such as Sequence alignment type? | What broader category encompasses Sequence alignment type according to the ontology? | Is Sequence alignment type categorized under Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ensembl ID (Homo sapiens)\nDescription: Ensembl ID (Homo sapiens) is defined as a subclass of Obsolete concept (EDAM), indicating that it represents an outdated or deprecated notion within the ontology. It refers specifically to identifiers assigned to entries such as exons, genes, transcripts, or proteins within the Homo sapiens division of the Ensembl 'core' database. This class is intended for referencing unique identifiers for human genomic entities as catalogued in Ensembl, but it is marked as obsolete within the current ontology structure.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What parent categories include Ensembl ID (Homo sapiens) within the ontology? | Is Ensembl ID (Homo sapiens) categorized under the broader group Obsolete concept (EDAM)? | Which concepts are more specific than Obsolete concept (EDAM), such as Ensembl ID (Homo sapiens)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GO (molecular function)\nDescription: GO (molecular function) is classified as a subclass of Obsolete concept (EDAM), indicating it is no longer in active use within the ontology framework. It represents an enumerated string data type that provides a term definition for a molecular function from the Gene Ontology (GO). This class captures definitions associated with molecular functional terms, but is considered obsolete for current applications.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which concepts are more specific subclasses within Obsolete concept (EDAM), including molecular function? | Is molecular function classified under the category of Obsolete concept (EDAM)? | To which higher-level categories does molecular function, as represented by GO, belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene ID (ZFIN)\nDescription: Gene ID (ZFIN) is defined as a subclass of Gene ID and represents an identifier specifically assigned to a gene in the Zebrafish Information Network (ZFIN) genome database. This class is intended to uniquely reference zebrafish genes within the context of ZFIN, ensuring clear identification and integration with the ZFIN resource.\nAxiom: {'subClassOf': ['Gene ID']}\nGenerated CQs:", "output": "Is every Gene ID (ZFIN) instance included under the broader Gene ID category? | What hierarchical categories does Gene ID (ZFIN) fall under within the ontology? | Which specific types of Gene ID exist, such as Gene ID (ZFIN)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence assembly format (text)\nDescription: Sequence assembly format (text) is a subclass of Sequence assembly format and refers specifically to formats used to represent sequence assembly data in a text-based form. This class encompasses any text format designed to store, exchange, or process sequence assembly information.\nAxiom: {'subClassOf': ['Sequence assembly format']}\nGenerated CQs:", "output": "What broader classes include Sequence assembly format (text) as a member? | Is Sequence assembly format (text) classified as a specific kind of Sequence assembly format? | Which sequence assembly formats encompass Sequence assembly format (text) as a more specific type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: 2D PAGE experiment\nDescription: 2D PAGE experiment is defined as a subclass of Proteomics experiment. It specifically concerns two-dimensional gel electrophoresis (2D-PAGE) techniques, encompassing experiments, gels, or spots observed within a gel. This class captures experimental processes and data associated with the separation and analysis of proteins based on two distinct properties, typically isoelectric point and molecular weight, as utilized in 2D-PAGE within proteomic studies.\nAxiom: {'subClassOf': ['Proteomics experiment']}\nGenerated CQs:", "output": "Which broader experiment categories encompass 2D PAGE experiment? | Is every 2D PAGE experiment classified under the category of Proteomics experiment? | What specific experiments are categorized as Proteomics experiment, such as 2D PAGE experiment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Genome index\nDescription: Genome index is defined as a subclass of Data index. It refers to an index specifically constructed for a genome sequence, serving as a precomputed organizational structure that facilitates rapid sequence alignment, especially when dealing with large or numerous sequences. This enables efficient retrieval and comparison operations by accelerating computational alignment tasks involving genome data.\nAxiom: {'subClassOf': ['Data index']}\nGenerated CQs:", "output": "Is Genome index categorized as a type of Data index? | Which indexes are subclasses of Data index, with Genome index as an example? | What broader classifications encompass Genome index? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Database cross-mapping\nDescription: Database cross-mapping is a subclass of Data reference, representing the process or entity in which accession numbers or other database identifiers are mapped between two or more biological or biomedical databases. Typically implemented as a table, each row corresponds to an accession number and each column to a database being referenced, with cells containing identifiers of corresponding entries. Empty cells indicate the absence of a mapping for that database. Additional metadata such as version or date may also be included. This structure facilitates the integration and comparison of related data across different database sources.\nAxiom: {'subClassOf': ['Data reference']}\nGenerated CQs:", "output": "Is Database cross-mapping classified as a kind of Data reference? | What specific types fall under the category of Data reference, and does Database cross-mapping belong to them? | Which broader concepts is Database cross-mapping subsumed by? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Alignment processing\nDescription: Alignment processing is a subclass of 'Obsolete concept (EDAM)', indicating that it is no longer recommended for use. It is defined as the process of reading and/or writing alignments of two or more molecular sequences, structures, or derived data. This class encompasses methods or workflows that manipulate such alignments, but its obsolescence status suggests use of alternative, updated concepts where possible.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What broader category encompasses Alignment processing within the EDAM ontology? | Is Alignment processing classified as an Obsolete concept (EDAM)? | Which concepts fall under the category of Obsolete concept (EDAM), such as Alignment processing? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence alignment parameter\nDescription: Sequence alignment parameter is a subclass of Obsolete concept (EDAM) and is defined as some simple value controlling a sequence alignment or similar 'match' operation. This class represents conceptual parameters that guide how sequence alignment procedures are performed, but has been marked as obsolete in the EDAM ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Sequence alignment parameter classified under the category of Obsolete concept (EDAM)? | Which parameters are considered subclasses of Obsolete concept (EDAM), including Sequence alignment parameter? | What broader classes encompass the Sequence alignment parameter within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Recombination detection\nDescription: Recombination detection is a subclass of nucleic acid sequence alignment analysis, focused on identifying recombination events in aligned genetic sequences. This class covers the detection of recombination hotspots and coldspots, as well as the precise identification of recombination breakpoints within sequence alignments. Tools for recombination detection may employ various methods, including genetic algorithms, quartet-mapping, bootscanning, graphical techniques, or machine learning models such as random forests.\nAxiom: {'subClassOf': ['Nucleic acid sequence alignment analysis']}\nGenerated CQs:", "output": "Which analytical methods are considered specializations of Nucleic acid sequence alignment analysis, such as Recombination detection? | To what higher-level analytical domains does Recombination detection pertain? | Is Recombination detection classified under the broader category of Nucleic acid sequence alignment analysis? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Motif database search\nDescription: Motif database search is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer recommended for current use within the EDAM ontology. It refers to the process of screening a biological sequence against a motif or pattern database to identify potential matches. This category encompasses methods or tools designed to perform such computational searches, but is now considered outdated or superseded in this context.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What hierarchical parent classes does Motif database search fall under? | Is Motif database search classified as an instance of the broader category Obsolete concept (EDAM)? | Which concepts are encompassed by the Obsolete concept (EDAM) category, including Motif database search? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Residue bump detection\nDescription: Residue bump detection is a subclass of Residue non-canonical interaction detection. This class encompasses methods or processes that identify 'bumps' between residues in a molecular structure, defined as pairs of atoms where the Van der Waals' radii overlap (interpenetrate) beyond a specified threshold. This detection helps characterize unusual or sterically hindered residue interactions not considered canonical.\nAxiom: {'subClassOf': ['Residue non-canonical interaction detection']}\nGenerated CQs:", "output": "Which overarching detection categories does Residue bump detection fall under? | What detection types are encompassed by Residue non-canonical interaction detection, specifically including Residue bump detection? | Is Residue bump detection categorized under the broader group of Residue non-canonical interaction detection? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: STRIDE log file\nDescription: STRIDE log file is defined as a subclass of Obsolete concept (EDAM), indicating that it represents a concept no longer in active use or recommended within the EDAM ontology. This class refers specifically to STRIDE log files, but its status as an obsolete concept suggests it should not be used for new data or annotation activities.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "To which overarching categories does STRIDE log file belong according to the ontology? | Which log file types are included under Obsolete concept (EDAM), specifically encompassing STRIDE log file? | Is STRIDE log file classified as a type of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Laboratory techniques\nDescription: Laboratory techniques is a subclass of Topic, defined as a topic concerning the procedures used to conduct an experiment. This class encapsulates various methods and processes essential for carrying out experimental investigations within laboratory settings.\nAxiom: {'subClassOf': ['Topic']}\nGenerated CQs:", "output": "Which categories under Topic encompass Laboratory techniques? | What broader conceptual groupings include Laboratory techniques? | Are laboratory techniques classified as a subset of Topic? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LabVIEW\nDescription: LabVIEW is defined as a subclass of programming language. This indicates that LabVIEW inherits all characteristics of programming languages, and any instance of LabVIEW is also considered a programming language. No further restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['programming language']}\nGenerated CQs:", "output": "What other concepts are subclasses of programming language alongside LabVIEW? | Is LabVIEW classified under the category of programming languages? | Which broader classes encompass LabVIEW as a specialized instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Atom ID\nDescription: Atom ID is defined as a subclass of Identifier (typed). It serves as an identifier—such as a character symbol—for a specific atom. This class captures identifiers that are explicitly associated with individual atoms, ensuring precise atom-level reference within the ontology.\nAxiom: {'subClassOf': ['Identifier (typed)']}\nGenerated CQs:", "output": "Which specialized types are encompassed by the class Identifier? | Is Atom ID categorized as a kind of Identifier? | What are the parent classes of Atom ID within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence alignment (hybrid)\nDescription: Sequence alignment (hybrid) is a subclass of Sequence alignment, specifically referring to the alignment of multiple molecular sequences of different types, such as genomic DNA and expressed sequence tags (EST), cDNA, or mRNA. This class captures alignments that integrate sequences representing distinct biological molecules, allowing for comparative analysis across different molecular sequence types.\nAxiom: {'subClassOf': ['Sequence alignment']}\nGenerated CQs:", "output": "Is Sequence alignment (hybrid) classified as a specialized form of Sequence alignment? | Under which more general classes does Sequence alignment (hybrid) fall within the ontology? | Which types of alignment fall under the broader category of Sequence alignment, specifically including Sequence alignment (hybrid)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DictyBase gene report format\nDescription: DictyBase gene report format is defined as an entry format used within the DictyBase genome database. It is formally classified as a subclass of Obsolete concept (EDAM), indicating that this format is no longer in active use and has been superseded or retired. This class represents reporting structures for gene information specific to DictyBase, but its obsolete status means it should not be applied to current datasets or applications.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which data formats are considered subclasses of Obsolete concept (EDAM)? | Is DictyBase gene report format classified under the broader category of Obsolete concept (EDAM)? | What are the higher-level categories associated with DictyBase gene report format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence-profile alignment (HMM) format\nDescription: Sequence-profile alignment (HMM) format is defined as a data format specifically used for representing alignments between biological sequences and hidden Markov model (HMM) profiles. According to its axioms, this class is a subclass of Obsolete concept (EDAM), indicating that it is no longer considered current or in active use within the EDAM ontology. This classification helps ensure that this format is recognized as deprecated and should not be used for new data or tools.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What more general classes does Sequence-profile alignment (HMM) format fall under within the ontology? | Is Sequence-profile alignment (HMM) format classified under the broader category of Obsolete concept (EDAM)? | Which formats are considered specific types of Obsolete concept (EDAM), such as Sequence-profile alignment (HMM) format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence editing (nucleic acid)\nDescription: Sequence editing (nucleic acid) is defined as a subclass of Obsolete concept (EDAM). It refers to the process of editing or changing a nucleic acid sequence, either in a random or specific manner. This class has been marked obsolete, indicating that its use is deprecated in the ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What obsolete concepts in EDAM encompass Sequence editing (nucleic acid)? | Is Sequence editing (nucleic acid) categorized under Obsolete concept (EDAM)? | Which specific processes are included within the Obsolete concept (EDAM) class, such as Sequence editing (nucleic acid)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: BIND entry format\nDescription: BIND entry format is defined as a subclass of the obsolete concept in EDAM, indicating it is no longer current or recommended for use. It specifically refers to the entry format used in the BIND database for protein interaction data. This classification marks the BIND entry format as both historically significant and deprecated within contemporary bioinformatics ontologies.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What higher-level classifications include BIND entry format? | Is BIND entry format categorized under the broader concept of Obsolete concept (EDAM)? | Which entity types are classified as more specific than Obsolete concept (EDAM), such as BIND entry format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multivariate correlation estimator\nDescription: Multivariate correlation estimator is defined as a subclass of algorithm. It encompasses algorithms specifically designed to estimate the correlation structure among multiple variables simultaneously. This class formalizes methods that take multivariate data as input and output information about the linear or nonlinear relationships among variables, supporting multivariate statistical analysis.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "Is Multivariate correlation estimator categorized as a type of algorithm? | Which broader categories encompass Multivariate correlation estimator beyond its direct classification? | What algorithms exist that include Multivariate correlation estimator as a specific variant? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Genes and proteins resources\nDescription: Genes and proteins resources is defined as a subclass of the obsolete concept category in EDAM, indicating that it is no longer in current use or has been superseded. This class encompasses topics concerning specific genes, their encoded proteins, and groupings such as gene or protein families, focusing on resources related to molecular genetics and proteomics.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Obsolete concept (EDAM) a superclass for Genes and proteins resources? | Which resources are classified as subclasses of Obsolete concept (EDAM), such as Genes and proteins resources? | What higher-level classes does Genes and proteins resources fall under in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Peptide annotation\nDescription: Peptide annotation is defined as a subclass of the obsolete concept (EDAM), indicating that it is deprecated or no longer recommended for use. It is described as an informative report about a specific peptide, suggesting its historical role in providing details or metadata relating to peptides. Use of this class should be reconsidered due to its obsolete status.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Peptide annotation categorized under the broader class of Obsolete concept (EDAM)? | What are all the subclasses defined within Obsolete concept (EDAM), including Peptide annotation? | To which higher-level concepts does Peptide annotation belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene name (MaizeGDB)\nDescription: Gene name (MaizeGDB) is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer in active use within the referenced ontology. It represents the name of a gene from the MaizeGDB (maize genes) database. This class should not be used for current annotation, as it has been marked obsolete.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Gene name (MaizeGDB) categorized under the broader class of Obsolete concept (EDAM)? | To which higher-level classes does Gene name (MaizeGDB) belong according to the ontology? | Which specific entities are classified as subclasses of Obsolete concept (EDAM), including Gene name (MaizeGDB)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: markx0\nDescription: markx0 is defined as a subclass of markx0 variant. It represents the Pearson MARKX0 alignment format, which pertains to a specific format used for sequence alignments. This class inherits all properties of markx0 variant and is characterized by its association with the MARKX0 alignment specification.\nAxiom: {'subClassOf': ['markx0 variant']}\nGenerated CQs:", "output": "Is markx0 classified under the broader group of markx0 variant? | Which variants categorize markx0 as a more specific form? | What overarching classes include markx0 within the markx0 variant hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: EMBOSS database resource definition\nDescription: EMBOSS database resource definition is a subclass of Obsolete concept (EDAM), indicating it is no longer in active use or has been superseded. It refers to a resource definition for an EMBOSS database, representing the specification or structured description of a database resource within the EMBOSS bioinformatics suite.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which concepts are direct specializations of Obsolete concept (EDAM), such as EMBOSS database resource definition? | Is EMBOSS database resource definition classified as a type of Obsolete concept in EDAM? | What general categories encompass EMBOSS database resource definition in the EDAM ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein targeting and localization\nDescription: Protein targeting and localization is defined as a subclass of Protein expression. It encompasses the study of the mechanisms by which proteins are transported to specific locations within or outside the cell, including processes such as signal peptide-mediated transport, subcellular localization, and protein export. This class focuses on understanding how proteins reach their functional destinations as part of cellular protein expression dynamics.\nAxiom: {'subClassOf': ['Protein expression']}\nGenerated CQs:", "output": "Is Protein expression a general category that encompasses Protein targeting and localization? | Which categories does Protein targeting and localization fall under with respect to Protein expression? | What are the specialized subtypes of Protein expression, including Protein targeting and localization? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Microarray raw data analysis\nDescription: Microarray raw data analysis is defined as a subclass of Obsolete concept (EDAM), indicating it is no longer an actively maintained or recommended concept. It refers to the process of analyzing raw microarray data, typically involving the initial computational and statistical procedures applied to uninterpreted data obtained from microarray experiments. The obsolete status suggests that this method or term has been superseded by newer approaches or terminologies.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What are the more specific types encompassed by Obsolete concept (EDAM), including Microarray raw data analysis? | Is Microarray raw data analysis classified under the Obsolete concept (EDAM) category? | Which broader concepts does Microarray raw data analysis inherit from within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Dylan\nDescription: Dylan is defined as a subclass of programming language, indicating that it represents a specific type of programming language. No additional axioms or restrictions are provided, so members of this class inherit all the general characteristics of programming languages.\nAxiom: {'subClassOf': ['programming language']}\nGenerated CQs:", "output": "What are the parent categories of Dylan in the ontology? | Does Dylan belong to the category of programming languages? | Which programming languages have Dylan as a specific type within their hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Usage restricted\nDescription: Usage restricted is defined as a subclass of Usage clause. This means that every instance of Usage restricted is also considered a Usage clause, typically signifying a specific type of usage limitation or regulation formalized within a broader policy or agreement context. No further restrictions or disjointness are specified beyond this hierarchical relationship.\nAxiom: {'subClassOf': ['Usage clause']}\nGenerated CQs:", "output": "Which specific usages are classified within the Usage clause category? | Does Usage restricted fall under the general category of Usage clause? | What broader clauses encompass Usage restricted as a subtype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Metabolic disease\nDescription: Metabolic disease is defined as a subclass of Obsolete concept (EDAM), indicating its deprecated status within the ontology. It refers to a topic concerning the study of metabolic diseases, though its classification as obsolete suggests it should not be used for current or future annotation.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What general classes or categories does Metabolic disease directly inherit from? | Does Metabolic disease fall under the overarching class of Obsolete concept (EDAM)? | Which specific concepts are categorized under Obsolete concept (EDAM), such as Metabolic disease? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: application programming interface\nDescription: application programming interface is defined as a subclass of software interface. This means every application programming interface is a specialized form of software interface, facilitating communication and interaction between different software components or systems.\nAxiom: {'subClassOf': ['software interface']}\nGenerated CQs:", "output": "To which higher-level categories is application programming interface assigned? | What are the more specific types classified within software interface, such as application programming interface? | Does application programming interface fall under the category of software interface? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylogenetic tree generation (minimum distance methods)\nDescription: Phylogenetic tree generation (minimum distance methods) is a subclass of Phylogenetic tree generation (method centric). This class comprises approaches—such as the neighbor joining (NJ) clustering method—that construct phylogenetic trees by calculating or utilizing precomputed distances between sequences. The goal is to identify a tree where the discrepancies between the observed pairwise distances and those implied by the tree structure are minimized, allowing for accurate inference of evolutionary relationships.\nAxiom: {'subClassOf': ['Phylogenetic tree generation (method centric)']}\nGenerated CQs:", "output": "What are the more specific types under Phylogenetic tree generation (method centric), including minimum distance methods? | Is Phylogenetic tree generation (minimum distance methods) classified within the broader group of Phylogenetic tree generation (method centric)? | Which higher-level categories encompass Phylogenetic tree generation (minimum distance methods)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein signal peptide detection (eukaryotes)\nDescription: Protein signal peptide detection (eukaryotes) is a subclass of Protein signal peptide detection. Members of this class are concerned with detecting or predicting signal peptides specifically in eukaryotic proteins, often also predicting their subcellular localization. This classification formalizes tasks or methods focused on identifying signal peptides in eukaryotic protein sequences.\nAxiom: {'subClassOf': ['Protein signal peptide detection']}\nGenerated CQs:", "output": "Which broader detection classes encompass 'Protein signal peptide detection (eukaryotes)'? | What specific detection categories are subclasses of 'Protein signal peptide detection', including the eukaryote-focused type? | Is 'Protein signal peptide detection (eukaryotes)' classified as a kind of 'Protein signal peptide detection'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Coding region prediction\nDescription: Coding region prediction is defined as a subclass of gene component prediction. It refers to the computational process of identifying protein-coding regions, such as coding sequences (CDS), exons, or open reading frames, within nucleotide sequences. This class formalizes prediction methods aimed specifically at detecting the parts of genes that encode proteins, distinguishing them from non-coding regions.\nAxiom: {'subClassOf': ['Gene component prediction']}\nGenerated CQs:", "output": "Does Coding region prediction represent a specialized form of Gene component prediction? | Which subcategories fall under Gene component prediction, such as Coding region prediction? | To which major prediction category does Coding region prediction belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein secondary structure image\nDescription: Protein secondary structure image is a subclass of Protein image. It represents images specifically depicting the secondary structure of proteins, such as alpha helices and beta sheets. This class is defined by the oboInOwl:hasDefinition property: \"Image of protein secondary structure.\"\nAxiom: {'subClassOf': ['Protein image']}\nGenerated CQs:", "output": "Which specific types of Protein image exist, and does this include Protein secondary structure image? | To which superordinate image categories does Protein secondary structure image belong? | Is Protein image a more general category that includes Protein secondary structure image? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence cluster ID (UniRef90)\nDescription: Sequence cluster ID (UniRef90) is a subclass of Sequence cluster ID (UniRef). It represents a unique identifier assigned to each entry in the UniRef90 database, enabling the unambiguous referencing and retrieval of sequence clusters within the UniRef90 dataset.\nAxiom: {'subClassOf': ['Sequence cluster ID (UniRef)']}\nGenerated CQs:", "output": "What broader cluster identifier categories does Sequence cluster ID (UniRef90) fall under? | Which specific sequence cluster IDs are included within Sequence cluster ID (UniRef), such as UniRef90? | Is Sequence cluster ID (UniRef90) categorized under Sequence cluster ID (UniRef)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: REBASE proto enzyme report format\nDescription: REBASE proto enzyme report format is defined as a subclass of Obsolete concept (EDAM). It represents the format of an entry from the proto section of the REBASE enzyme database. This class is considered obsolete, indicating that the format is no longer in active use or has been superseded.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is REBASE proto enzyme report format classified under the overarching category of Obsolete concept (EDAM)? | Which broader conceptual categories recognize REBASE proto enzyme report format as a subordinate member? | What obsolete concepts (EDAM) include REBASE proto enzyme report format as a more specific subtype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence word comparison\nDescription: Sequence word comparison is a subclass of Sequence comparison, specialized in identifying exact character or word matches between molecular sequences. Unlike full sequence alignment, this class represents operations that focus solely on pinpointing matching words or characters, providing a targeted approach for comparative analysis of sequence fragments.\nAxiom: {'subClassOf': ['Sequence comparison']}\nGenerated CQs:", "output": "What general comparison categories include Sequence word comparison? | Which types of comparisons are classified as subclasses of Sequence comparison? | Does Sequence word comparison fall under the broader class of Sequence comparison? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: amino acid protein sequence data\nDescription: amino acid protein sequence data is defined as a subclass of biological sequence data. This class represents sequence data composed specifically of amino acids, typically encoding the primary structure of proteins. Members of this class are distinguished from other types of biological sequence data, such as nucleic acid sequences, by representing the ordered series of amino acids that form protein molecules.\nAxiom: {'subClassOf': ['biological sequence data']}\nGenerated CQs:", "output": "To which higher-level groups does amino acid protein sequence data pertain? | Is amino acid protein sequence data a more specialized form of biological sequence data? | Which subcategories fall under the class of biological sequence data? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ontology concept comment\nDescription: Ontology concept comment is a subclass of Obsolete concept (EDAM), representing a comment made on a concept within an ontology. This class is intended to capture annotations or remarks relevant to ontology concepts, though it is now considered obsolete within the EDAM framework.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is every Ontology concept comment categorized under Obsolete concept (EDAM)? | Which concepts fall under the Obsolete concept (EDAM) class, including Ontology concept comment? | What broader classes does Ontology concept comment directly belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Image\nDescription: Image is defined as a subclass of data, specifically representing biological or biomedical data that can be visually rendered—such as being displayed on a screen or plotted on a graph. Members of this class are characterized by their suitability for visual representation, distinguishing them within the spectrum of data types.\nAxiom: {'subClassOf': ['data']}\nGenerated CQs:", "output": "Is Image categorized as a specialized type of data? | What types are encompassed under data, specifically including Image? | Which upper-level groups does Image fall under within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HGVbase entry format\nDescription: HGVbase entry format is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer in active use or has been deprecated. It represents the format of a record originating from the HGVbase database, which stored information about genotypes and phenotypes.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which upper-level categories does HGVbase entry format belong to according to the ontology? | Is HGVbase entry format classified under the broader category of Obsolete concept (EDAM)? | What specific concepts fall within Obsolete concept (EDAM), such as HGVbase entry format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GO concept name\nDescription: GO concept name is a subclass of Obsolete concept (EDAM), indicating that it refers to a concept that is no longer actively used within the EDAM ontology. It is defined as the name of a concept from the Gene Ontology (GO), according to its current definition. This class captures deprecated labels or identifiers associated with GO concepts.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which GO concept names fall within the scope of Obsolete concept in EDAM? | Is every GO concept name classified under Obsolete concept in EDAM? | What broader EDAM categories include GO concept name as a more specific class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Directory metadata\nDescription: Directory metadata is defined as a subclass of the obsolete concept (EDAM), indicating that it is no longer in current use. It is characterized as a directory on disk from which files are read. This class groups metadata associated specifically with such directories, although its use is considered outdated within the ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Directory metadata categorized as a specialized form of Obsolete concept (EDAM)? | What broader conceptual groupings encompass Directory metadata? | Which concepts are classified under Obsolete concept (EDAM), such as Directory metadata? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Nucleic acid comparison\nDescription: Nucleic acid comparison is a subclass of Comparison, defined as the process of analyzing two or more nucleic acids to identify their similarities. This class is intended to capture activities focused on the comparative assessment of nucleic acid sequences or structures.\nAxiom: {'subClassOf': ['Comparison']}\nGenerated CQs:", "output": "Which comparisons are classified more specifically as Nucleic acid comparisons? | Does Nucleic acid comparison fall under the category of Comparison? | To which parent classes does Nucleic acid comparison belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: beta\nDescription: beta is defined as a subclass of Development status. This indicates that beta represents a specific stage or category within the broader concept of Development status, used to characterize entities according to their progress or phase in a development lifecycle. No further property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['Development status']}\nGenerated CQs:", "output": "Is beta categorized under the broader class of Development status? | Which specific subclasses fall within Development status, such as beta? | What general classifications does beta fall under in terms of Development status hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Rank-invariant set normalization\nDescription: Rank-invariant set normalization is an algorithm and thus a subclass of algorithm. While no further properties or relationships are specified in the given axiom, this class represents computational procedures designed for data normalization in which certain ranked sets or features remain unchanged, ensuring comparability across samples.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "Which instances are recognized as more specific types of algorithm, such as rank-invariant set normalization? | Is rank-invariant set normalization classified under the general category of algorithm? | What broader categories contain rank-invariant set normalization as a specific method? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CBS\nDescription: CBS is defined as a subclass of algorithm. This indicates that every instance of CBS is recognized as a type of algorithm, inheriting all properties and characteristics typical of algorithms. No additional distinguishing axioms or restrictions are specified for CBS.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "What are the specific subclasses found within the class algorithm, such as CBS? | Is CBS classified under the broader category of algorithm? | Which higher-level categories does CBS conceptually fall into? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Perl\nDescription: Perl is defined as a subclass of programming language, indicating that any instance of Perl is also an instance of programming language. This classification situates Perl within the broader category of languages designed for coding and software development.\nAxiom: {'subClassOf': ['programming language']}\nGenerated CQs:", "output": "To which higher-level categories does Perl belong within the programming language hierarchy? | Which programming languages include subclasses such as Perl? | Is Perl classified as a specialized form of programming language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Functional mapping\nDescription: Functional mapping is defined as a subclass of the obsolete concept (EDAM), indicating it is no longer recommended for current use. It refers to mapping the genetic architecture of dynamic complex traits, often involving the characterization of underlying quantitative trait loci (QTLs) or nucleotides (QTNs). This term historically described approaches for associating genetic markers with complex trait variation through quantitative analysis.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Functional mapping recognized as a specialized form of Obsolete concept (EDAM)? | Which concepts are classified under Obsolete concept (EDAM), including Functional mapping? | What broader conceptual categories include Functional mapping within the EDAM ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ecology\nDescription: Ecology is a subclass of Biology, focused on the study of ecological and environmental sciences. It is especially concerned with the application of information technology in these fields, as emphasized in ecoinformatics. This class covers both foundational ecological knowledge and the technological methods used to analyze and manage ecological data.\nAxiom: {'subClassOf': ['Biology']}\nGenerated CQs:", "output": "Which specialized fields fall under Biology, specifically referencing Ecology? | Is Ecology classified under the broader discipline of Biology? | To which overarching domains does Ecology pertain within the life sciences hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Shell\nDescription: Shell is defined as a subclass of programming language, indicating that every shell is considered a type of programming language within the ontology. No additional constraints or distinguishing characteristics are provided in the axioms. Thus, any individual classified as a shell must also be recognized as a programming language.\nAxiom: {'subClassOf': ['programming language']}\nGenerated CQs:", "output": "Is Shell classified as a type of programming language? | What broader classes does Shell belong to within the ontology? | Which specific constructs fall under the category of programming language, including Shell? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylogenetic tree analysis (shape)\nDescription: Phylogenetic tree analysis (shape) is a subclass of Phylogenetic tree analysis, focused on analyzing the shape or topology of a phylogenetic tree. This class encompasses methods and approaches that examine structural features of the tree, such as its branching patterns, symmetry, or imbalance, to infer evolutionary relationships and patterns.\nAxiom: {'subClassOf': ['Phylogenetic tree analysis']}\nGenerated CQs:", "output": "Which larger conceptual classes include Phylogenetic tree analysis (shape)? | Does Phylogenetic tree analysis (shape) fall under the general category of Phylogenetic tree analysis? | What specific analyses are classified as subtypes of Phylogenetic tree analysis, such as Phylogenetic tree analysis (shape)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: data processing task\nDescription: data processing task is a subclass of information processing. It is defined as an information processing objective that specifies the goal for a data processing algorithm execution process, which, when applied to a dataset, is intended to produce a new dataset as output. This class formalizes the role of tasks that guide algorithm execution in transforming input datasets into resulting datasets.\nAxiom: {'subClassOf': ['information processing']}\nGenerated CQs:", "output": "Is every data processing task classified under the broader group of information processing? | Which tasks are recognized as specific kinds of information processing, such as data processing tasks? | To what higher-level categories does data processing task correspond within the information processing domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Structure-based sequence alignment\nDescription: Structure-based sequence alignment is a subclass of sequence alignment generation. This class refers to the process of aligning molecular sequences using both sequence and structural information, integrating structural data to improve alignment accuracy compared to purely sequence-based methods.\nAxiom: {'subClassOf': ['Sequence alignment generation']}\nGenerated CQs:", "output": "What specific types of sequence alignment generation include structure-based sequence alignment? | Which broader alignment processes encompass structure-based sequence alignment? | Is structure-based sequence alignment categorized under sequence alignment generation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: UMLS\nDescription: UMLS is defined as a subclass of Obsolete concept (EDAM), indicating that it represents a retired or superseded entity within the ontology. The class refers specifically to a term originating from the UMLS vocabulary, providing a clear provenance but signaling that the concept is no longer in active use within the EDAM framework.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is UMLS categorized under the broader Obsolete concept (EDAM)? | What are the direct parent categories of UMLS within this ontology? | Which concepts are subsumed by Obsolete concept (EDAM), and does this include UMLS? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Transcriptome assembly (de novo)\nDescription: Transcriptome assembly (de novo) is a subclass of Obsolete concept (EDAM). It is defined as the process of inferring a transcriptome sequence without the aid of a reference genome, by comparing short sequence reads directly to each other. This approach does not rely on any pre-existing genomic reference, and the class is considered obsolete in the referenced ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is transcriptome assembly (de novo) classified under the category of Obsolete concept (EDAM)? | What concepts are specified as subclasses of Obsolete concept (EDAM), including transcriptome assembly (de novo)? | Which higher-level categories does transcriptome assembly (de novo) fall under in relation to Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Structure formatting\nDescription: Structure formatting is defined as a subclass of Formatting. It involves the process of reformatting, specifically applied to files or reports containing tertiary structure data. This class represents formatting operations aimed at reorganizing or restructuring information related to tertiary structures.\nAxiom: {'subClassOf': ['Formatting']}\nGenerated CQs:", "output": "Is Structure formatting classified as a type of Formatting? | What are the distinct subclasses that fall under Formatting, including Structure formatting? | Which formatting categories encompass Structure formatting as a more specific subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: phylip sequence format\nDescription: phylip sequence format is a subclass of Obsolete concept (EDAM), indicating that it is no longer recommended for active use. This class represents the Phylip interleaved sequence format, a file format for representing sequence data. Its use is deprecated in favor of more current standards.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which sequence formats are considered more specific instances of Obsolete concept (EDAM), such as phylip sequence format? | To which broader concepts does phylip sequence format conceptually pertain? | Is phylip sequence format categorized under the broader concept of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Helical wheel\nDescription: Helical wheel is defined as a subclass of Protein secondary structure image. It represents an image depicting a peptide sequence as viewed along the axis of a helix, specifically designed to highlight amphipathicity and other structural properties. This class is used to capture visual representations relevant to the analysis of helical structures in proteins.\nAxiom: {'subClassOf': ['Protein secondary structure image']}\nGenerated CQs:", "output": "Is Helical wheel recognized as a type of Protein secondary structure image? | Which specific images fall under the category of Protein secondary structure image, including Helical wheel? | To which broader image classifications does Helical wheel belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene ID (VBASE2)\nDescription: Gene ID (VBASE2) is defined as a subclass of Gene ID and represents an identifier assigned to a gene in the VBASE2 database. This class is intended to uniquely specify gene records within VBASE2, aligning with its formal role as a specialization of general gene identifiers.\nAxiom: {'subClassOf': ['Gene ID']}\nGenerated CQs:", "output": "Does VBASE2 fall under the broader classification of Gene ID? | Which general identifiers include VBASE2 as a specialized Gene ID? | What more specific Gene ID types encompass VBASE2? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence alignment (pair)\nDescription: Sequence alignment (pair) is defined as a subclass of Sequence alignment, specifically referring to the alignment of exactly two molecular sequences. This class formalizes pairwise comparison, distinguishing it from alignments involving multiple sequences.\nAxiom: {'subClassOf': ['Sequence alignment']}\nGenerated CQs:", "output": "Which types are classified as Sequence alignment, including Sequence alignment (pair)? | Is Sequence alignment (pair) a specific type under the general category of Sequence alignment? | What broader categories encompass Sequence alignment (pair)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gramene identifier\nDescription: Gramene identifier is defined as a subclass of Sequence accession (protein), representing an identifier that uniquely denotes an entry within the Gramene database. This class formalizes Gramene database entries as specific types of protein sequence accessions, ensuring any individual in this class is both a protein sequence accession and a valid Gramene database identifier.\nAxiom: {'subClassOf': ['Sequence accession (protein)']}\nGenerated CQs:", "output": "Does Gramene identifier represent a specialized form of Sequence accession (protein)? | What higher-level classes encompass Gramene identifier within the context of protein sequence accessions? | Which identifiers are categorized under Sequence accession (protein), including Gramene identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence submission\nDescription: Sequence submission is defined as a subclass of Obsolete concept (EDAM). It refers to the process of submitting a molecular sequence to a database. This categorization indicates that sequence submission is now considered an outdated or deprecated concept within the EDAM ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What concepts are included as subclasses within Obsolete concept (EDAM), such as Sequence submission? | Which higher-level categories encompass Sequence submission in the ontology? | Is Sequence submission classified under the broader category of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Backbone torsion angle calculation\nDescription: Backbone torsion angle calculation is a subclass of torsion angle calculation. This class represents the process of computing all backbone torsion angles for each residue within a protein structure, enabling detailed analysis of the protein’s conformational properties.\nAxiom: {'subClassOf': ['Torsion angle calculation']}\nGenerated CQs:", "output": "Is backbone torsion angle calculation classified under torsion angle calculation? | Which broader calculation types encompass backbone torsion angle calculation? | What categories fall under torsion angle calculation, and does that list include backbone torsion angle calculation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Nucleic acid sequences\nDescription: Nucleic acid sequences is defined as a subclass of Obsolete concept (EDAM). This class represents topics related to nucleotide sequences, encompassing associated concepts such as sequence sites, alignments, motifs, and profiles. Its classification as obsolete indicates that it is no longer actively maintained or recommended for current use within the ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which concepts are categorized under Obsolete concept (EDAM), including nucleic acid sequences? | Are nucleic acid sequences classified as a type of obsolete concept within EDAM? | What broader concepts encompass nucleic acid sequences in the EDAM ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: probability distribution estimation algorithm\nDescription: probability distribution estimation algorithm is defined as a subclass of single generalization algorithm. This class comprises algorithms that infer or estimate a probability distribution from data, rather than focusing on mapping individual inputs to outputs. Members of this class generalize from data in a way that results in a probabilistic model, which can then be used for tasks such as sampling, density estimation, or uncertainty quantification.\nAxiom: {'subClassOf': ['single generalization algorithm']}\nGenerated CQs:", "output": "Is every probability distribution estimation algorithm categorized as a type of single generalization algorithm? | Which algorithms are classified under single generalization algorithm, such as probability distribution estimation algorithm? | To what higher-level categories does probability distribution estimation algorithm belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ontology concept reference\nDescription: Ontology concept reference is defined as a subclass of Obsolete concept (EDAM), indicating that it is considered an outdated or superseded concept within the EDAM ontology framework. It refers specifically to a reference for a concept from an ontology, serving as a means to denote or cite ontology concepts.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Ontology concept reference categorized under Obsolete concept (EDAM)? | Which concepts are classified as subclasses of Obsolete concept (EDAM)? | To which higher-level concepts does Ontology concept reference belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Small molecule data\nDescription: Small molecule data is defined as a subclass of Obsolete concept (EDAM). It represents data concerning one or more small molecules and is considered a broad data type, typically used as a placeholder for more specific types. This class is deprecated in favor of more precise classifications.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What broader categories include Small molecule data as a specific instance? | Which obsolete concepts within EDAM have Small molecule data as a subclass? | Is Obsolete concept (EDAM) a direct superclass of Small molecule data? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene ID (GeneDB Trypanosoma brucei)\nDescription: Gene ID (GeneDB Trypanosoma brucei) is defined as a subclass of Obsolete concept (EDAM), indicating it is no longer in active use within the ontology. This class refers to gene identifiers that originate from the GeneDB database specifically for Trypanosoma brucei.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Gene ID (GeneDB Trypanosoma brucei) categorized under Obsolete concept (EDAM)? | What are the direct and indirect superclasses of Gene ID (GeneDB Trypanosoma brucei)? | Which concepts are designated as subclasses of Obsolete concept (EDAM), such as Gene ID (GeneDB Trypanosoma brucei)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Chemical formula\nDescription: Chemical formula is a subclass of Molecular property (general) and is defined as a specification of a chemical structure. This class captures the properties related to the way a chemical structure is formally represented, linking it to the broader category of molecular properties.\nAxiom: {'subClassOf': ['Molecular property (general)']}\nGenerated CQs:", "output": "Is a chemical formula classified under the broader category of molecular property? | Which molecular properties have chemical formula as a more specific type? | To which higher-level molecular property categories does chemical formula belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene ID (GeneDB Glossina morsitans)\nDescription: Gene ID (GeneDB Glossina morsitans) is defined as a subclass of Obsolete concept (EDAM), indicating that it represents a concept no longer in active use. This class refers specifically to gene identifiers from the Glossina morsitans GeneDB database.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What are the specific subclasses that are included in Obsolete concept (EDAM), such as Gene ID (GeneDB Glossina morsitans)? | Which broader classes does Gene ID (GeneDB Glossina morsitans) belong to within the ontology? | Does Gene ID (GeneDB Glossina morsitans) fall under the category of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: UniProt format\nDescription: UniProt format is a subclass of the obsolete concept in the EDAM ontology, indicating it is no longer actively used or recommended for new work. It is defined as the sequence format used for UniProt entries. This class represents formats specifically designed for recording and representing protein sequence information in the UniProt knowledgebase.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which specific formats are subsumed by the Obsolete concept (EDAM), including UniProt format? | Is UniProt format classified under the broader category of Obsolete concept (EDAM)? | What more general concept categories encompass UniProt format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein surface report\nDescription: Protein surface report is an obsolete concept in the EDAM ontology, serving as a broad data type that acts as a placeholder for more specific types. It primarily facilitates navigation within EDAM and is not typically intended for annotation. This class encompasses data regarding the surface properties of protein structures, such as shape, hydropathy, and electrostatic patches.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What are the concepts categorized under Obsolete concept (EDAM), including Protein surface report? | Is Obsolete concept (EDAM) a generalization of Protein surface report? | Which higher-level classes include Protein surface report as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Data analysis\nDescription: Data analysis is defined as a subclass of Data management, representing processes focused on the systematic application of statistical and/or logical techniques to describe, illustrate, condense, recap, and evaluate data. This class encompasses activities that transform raw data into meaningful insights, ensuring that data is interpreted and summarized accurately within the broader framework of data management.\nAxiom: {'subClassOf': ['Data management']}\nGenerated CQs:", "output": "What are the more specific types classified under Data management, such as Data analysis? | Is Data analysis regarded as a specialized form of Data management? | Which broader categories encompass Data analysis within their scope? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Database\nDescription: Database is defined as a subclass of Obsolete concept (EDAM). It refers to a digital data archive, generally structured around a relational model, but it can also utilize object-oriented, tree, or graph-based models. This formalization indicates that the concept of 'Database'—as described here—has been superseded or rendered obsolete within its ontological context.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which concepts are considered more specific types within the Obsolete concept (EDAM) category, including Database? | What broader classifications does Database fall under according to the ontology? | Can Database be categorized under Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: clustering algorithm\nDescription: clustering algorithm is defined as a subclass of single generalization algorithm, indicating that it represents a specialized type of algorithm focused on grouping data points based on similarity or shared characteristics. By this axiom, every clustering algorithm is inherently a single generalization algorithm, inheriting its properties and constraints, but with a specific emphasis on unsupervised partitioning of data into clusters.\nAxiom: {'subClassOf': ['single generalization algorithm']}\nGenerated CQs:", "output": "Which specific algorithms fall under the single generalization algorithm category, including clustering algorithms? | Is every clustering algorithm encompassed by the category of single generalization algorithm? | To what higher-level algorithm categories does clustering algorithm belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CMA\nDescription: CMA is defined as a subclass of algorithm, meaning it inherits all characteristics of algorithms and represents a more specific type within this category. No further restrictions or disjointness axioms are specified, so CMA encompasses all properties of algorithm without any additional constraints.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "Is CMA categorized as a subtype of algorithm? | What broader classes does CMA fall under in the ontology? | Which kinds of algorithms include CMA as a more specific example? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: INOH entry format\nDescription: INOH entry format is defined as a subclass of Obsolete concept (EDAM), indicating it represents a deprecated concept within the ontology. It refers specifically to the format of an entry from the INOH signal transduction pathways database, describing the data structure or specification once used by this resource.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What specific formats are classified under Obsolete concept (EDAM), including INOH entry format? | To which higher-level groupings is INOH entry format subsumed? | Does INOH entry format belong to the broader category of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence alignment\nDescription: sequence alignment is defined as a subclass of pattern discovery task. This means that every sequence alignment is considered a type of pattern discovery task, focusing on the process of arranging sequences (such as DNA, RNA, or protein sequences) to identify regions of similarity that may indicate functional, structural, or evolutionary relationships. This classification establishes sequence alignment as a specialized activity within the broader domain of discovering patterns in data.\nAxiom: {'subClassOf': ['pattern discovery task']}\nGenerated CQs:", "output": "Is sequence alignment categorized under the broader class of pattern discovery task? | Which specific tasks are subclasses of pattern discovery task, such as sequence alignment? | What are the higher-level categories that encompass sequence alignment as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MRI\nDescription: MRI is defined as a subclass of Imaging and refers to techniques that use magnetic fields and radio waves to produce images, typically for investigating the anatomy and physiology of the human body. This classification ensures that MRI is recognized as a specific type of imaging modality, distinct in its mechanism and applications.\nAxiom: {'subClassOf': ['Imaging']}\nGenerated CQs:", "output": "Which procedures fall under the category of Imaging, such as MRI? | Is MRI classified as a type of Imaging? | What broader categories encompass MRI within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ensembl ID ('Bos taurus')\nDescription: Ensembl ID ('Bos taurus') is defined as a subclass of Obsolete concept (EDAM), indicating that it is considered deprecated or outdated in the ontology context. This class represents an identifier assigned to an entry—such as an exon, gene, transcript, or protein—in the Ensembl 'core' database specific to the Bos taurus division.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which concepts are categorized as subclasses under Obsolete concept (EDAM), such as Ensembl ID ('Bos taurus')? | What are the broader classes that include Ensembl ID ('Bos taurus') as a member? | Does the Ensembl ID ('Bos taurus') belong to the set of Obsolete concepts (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: 1 or more\nDescription: 1 or more is defined as a subclass of Obsolete concept (EDAM). It represents the idea of \"one or more things.\" This class is considered obsolete within the ontology and is not intended for current use.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is 1 or more categorized as an instance of the Obsolete concept in EDAM? | What higher-level classifications encompass 1 or more in the context of EDAM? | Which concepts are designated as subclasses under the Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene ID (GeneDB Plasmodium falciparum)\nDescription: Gene ID (GeneDB Plasmodium falciparum) is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer in active use or superseded by other identifiers. It specifically represents a gene identifier assigned by the Plasmodium falciparum GeneDB database. This class captures identifiers unique to genes in this database, but should not be used for current annotation due to its obsolete status.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What other concepts, like Gene ID (GeneDB Plasmodium falciparum), are classified as subclasses of Obsolete concept (EDAM)? | Does Gene ID (GeneDB Plasmodium falciparum) fall under the general category of Obsolete concept (EDAM)? | Which higher-level groups include Gene ID (GeneDB Plasmodium falciparum) according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Position frequency matrix\nDescription: Position frequency matrix is defined as a subclass of Position-specific scoring matrix. It represents a profile, typically derived from a sequence alignment, structured as a simple matrix where each entry reflects the count of nucleotides or amino acids at each position. This formalization distinguishes Position frequency matrices by their use of raw residue counts per position, rather than scores or probabilities, within the broader category of position-specific scoring matrices.\nAxiom: {'subClassOf': ['Position-specific scoring matrix']}\nGenerated CQs:", "output": "What general matrix categories include Position frequency matrix as a conceptual member? | Which matrix types are classified beneath Position-specific scoring matrix, such as Position frequency matrix? | Does the Position frequency matrix fall under the broader grouping of Position-specific scoring matrix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Agilent Feature Extraction software version 7.5\nDescription: Agilent Feature Extraction software version 7.5 is defined as a subclass of Agilent Feature Extraction Software. This classification indicates that version 7.5 inherits all general characteristics of the broader software class while representing a specific version distinguished by its unique features or updates. No additional constraints, disjointness, or property restrictions are asserted in the current axiom.\nAxiom: {'subClassOf': ['Agilent Feature Extraction Software']}\nGenerated CQs:", "output": "Is Agilent Feature Extraction software version 7.5 classified under Agilent Feature Extraction Software? | Which broader software categories does Agilent Feature Extraction software version 7.5 fall into? | Which specific versions or types are encompassed by Agilent Feature Extraction Software? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Error\nDescription: Error is defined as a subclass of the obsolete concept category, indicating that it is considered deprecated within the ontology. It represents data pertaining to an error generated by a computer system or tool. This class is maintained for reference to legacy data representations but should not be used for modeling current or future concepts.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which concepts are more specific than Obsolete concept (EDAM), including Error? | To what higher-level concepts does Error belong within the EDAM classification? | Is Error categorized as an instance of the broader Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Annotation retrieval\nDescription: Annotation retrieval is a subclass of Obsolete concept (EDAM). This class is intended for tools or methods that retrieve existing annotations (or documentation), typically on database entities, rather than predicting or generating new annotations. The focus is on accessing pre-existing information, distinguishing it from annotation prediction methods.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Annotation retrieval classified as a narrower concept under Obsolete concept (EDAM)? | What are the broader categories that Annotation retrieval is associated with? | Which concepts fall under the category of Obsolete concept (EDAM), such as Annotation retrieval? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Diffraction data reduction\nDescription: Diffraction data reduction is defined as a subclass of Diffraction data analysis. It involves the processing of diffraction data into a corrected, ordered, and simplified form, preparing the data for further interpretation or analysis. This class represents methods and procedures specifically focused on transforming raw diffraction measurements into structured datasets suitable for downstream applications.\nAxiom: {'subClassOf': ['Diffraction data analysis']}\nGenerated CQs:", "output": "Is Diffraction data analysis a broader category that encompasses Diffraction data reduction? | What are the parent categories associated with Diffraction data reduction? | Which specific processes are classified under Diffraction data analysis, such as Diffraction data reduction? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: lma\nDescription: lma is defined as a subclass of Binary format. This classification indicates that every instance of lma is, by definition, a type of Binary format, inheriting all its properties and constraints. No further characteristics or restrictions are specified in the given axiom.\nAxiom: {'subClassOf': ['Binary format']}\nGenerated CQs:", "output": "Which formats are more specific than Binary format, such as lma? | What broader classifications encompass lma as a type? | Is lma categorized under Binary format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Genome identifier\nDescription: Genome identifier is defined as a subclass of Identifier (typed), representing an identifier specifically assigned to a particular genome. This class formalizes genome identifiers as a distinct type of typed identifiers, ensuring that any instance classified under Genome identifier must be used to uniquely denote a genome within biological datasets.\nAxiom: {'subClassOf': ['Identifier (typed)']}\nGenerated CQs:", "output": "Which types of Identifier encompass Genome identifier as a specialized instance? | What broader classes does Genome identifier inherit characteristics from, given its classification? | Is Genome identifier regarded as a more specific form of Identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: REST service\nDescription: REST service is defined as a subclass of web service. This means every REST service is a type of web service, inheriting all its general characteristics. No additional property restrictions or disjointness axioms are specified, so a REST service is formally distinguished only by its placement under the broader category of web service.\nAxiom: {'subClassOf': ['web service']}\nGenerated CQs:", "output": "Which web service subclasses include REST service within their classification? | What broader categories does REST service fall under according to the ontology? | Is REST service classified as a type of web service? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: EMBOSS graph\nDescription: EMBOSS graph is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer in active use or recommended for use. Members of this class refer specifically to images of graphs generated by the EMBOSS suite, as stated in its definition.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What higher-level classes include EMBOSS graph according to the ontology structure? | Is EMBOSS graph classified under the broader group of Obsolete concept (EDAM)? | Which concepts are categorized as specializations of Obsolete concept (EDAM), such as EMBOSS graph? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein features report (membrane regions)\nDescription: Protein features report (membrane regions) is a subclass of Obsolete concept (EDAM). It refers to topics concerning trans- or intra-membrane regions of a protein, typically describing physicochemical properties of secondary structure elements. As an obsolete concept, it indicates that this classification is no longer in current use or has been replaced in the EDAM ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "To which broader classifications does Protein features report (membrane regions) pertain within EDAM? | Are all Protein features report (membrane regions) instances categorized under Obsolete concept (EDAM)? | Which specific concepts are considered subtypes of Obsolete concept (EDAM), such as Protein features report (membrane regions)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RNAi report\nDescription: RNAi report is defined as a subclass of Obsolete concept (EDAM). This class represents topics concerning RNAi (RNA interference) experiments. Its classification under \"Obsolete concept\" indicates that this topic is no longer in active use within the ontology, although it historically referred to documenting or reporting on RNAi experimental data or findings.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What are the more general categories to which RNAi report belongs? | Is RNAi report categorized under the broader class of Obsolete concept (EDAM)? | Which concepts are specific instances or subtypes of Obsolete concept (EDAM), including RNAi report? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence retrieval\nDescription: Sequence retrieval is defined as a subclass of Obsolete concept (EDAM), indicating that it represents a retired or deprecated concept within the EDAM ontology. This class encompasses methods for directly querying a sequence data resource—typically a sequence database—and retrieving sequences and/or their annotations. Direct retrieval methods, such as dbfetch, are included, but methods that perform calculations or further analysis on the sequences are excluded from this category.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What specific concepts are designated as subtypes of Obsolete concept (EDAM), including Sequence retrieval? | Is Sequence retrieval categorized under the broader class of Obsolete concept (EDAM)? | Which higher-level groupings encompass Sequence retrieval within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ligand identifier\nDescription: Ligand identifier is a subclass of Obsolete concept (EDAM), meaning it is considered outdated or superseded within the ontology. It is defined as a code word used to represent a ligand, such as those assigned in a PDB (Protein Data Bank) file. This classification and definition clarify that the concept was primarily employed to specify ligand codes in structural data resources but is no longer actively used.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Ligand identifier currently categorized as an instance of Obsolete concept (EDAM)? | Which higher-level concepts encompass Ligand identifier within the EDAM ontology? | What identifiers are classified as obsolete concepts according to EDAM? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Pfam clan ID\nDescription: Pfam clan ID is defined as a subclass of Protein family accession, representing the accession number associated specifically with a Pfam clan. This class captures unique identifiers used for referencing Pfam clans within the broader context of protein family accessions.\nAxiom: {'subClassOf': ['Protein family accession']}\nGenerated CQs:", "output": "What higher-level classifications does Pfam clan ID belong to within protein family ontologies? | Which specific identifiers fall under the class Protein family accession, such as Pfam clan ID? | Is every Pfam clan ID classified under the broader category of Protein family accession? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DragonDB author identifier\nDescription: DragonDB author identifier is defined as a subclass of Author ID, representing an identifier specifically assigned to authors within the DragonDB database. This class ensures that any instance identified as a DragonDB author identifier is formally recognized as a type of Author ID, uniquely referencing author entities in the DragonDB resource.\nAxiom: {'subClassOf': ['Author ID']}\nGenerated CQs:", "output": "What broader categories encompass DragonDB author identifier? | Is DragonDB author identifier a more specific form of Author ID? | Which identifier types are classified under Author ID, including DragonDB author identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GenePix\nDescription: GenePix is defined as a subclass of Gene Pix. This indicates that any individual classified as GenePix must also meet all criteria associated with Gene Pix. No additional property restrictions, equivalence, or disjointness axioms are specified, thus GenePix inherits all characteristics of its superclass.\nAxiom: {'subClassOf': ['Gene Pix']}\nGenerated CQs:", "output": "Which entities are more specific than Gene Pix, such as GenePix? | To what broader classes does GenePix belong? | Is Gene Pix a generalization of GenePix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Carbohydrates\nDescription: Carbohydrates is a subclass within the broader domain of Biochemistry. This class focuses on topics related to carbohydrates, typically encompassing their structural information. It formalizes the study and categorization of carbohydrates as chemical compounds within biochemistry, emphasizing their molecular structure and relevance in biological systems.\nAxiom: {'subClassOf': ['Biochemistry']}\nGenerated CQs:", "output": "Which specific entities are classified as subtypes of Biochemistry, such as Carbohydrates? | What higher-level classifications include Carbohydrates within their scope? | Are Carbohydrates categorized under the broader domain of Biochemistry? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene features (SECIS element)\nDescription: Gene features (SECIS element) is defined as a subclass of Obsolete concept (EDAM), indicating that this concept is no longer considered current or in active use. It is described as a report on the selenocysteine insertion sequence (SECIS) element in a DNA sequence, which pertains to the identification or annotation of SECIS elements involved in the incorporation of selenocysteine during translation. The obsolete status suggests that this class has been deprecated in favor of more up-to-date concepts.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which gene features are defined as subclasses of the obsolete concept (EDAM), such as the SECIS element? | Is the SECIS element gene feature categorized under the obsolete concept class from EDAM? | To which broader EDAM categories does the SECIS element gene feature belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein folding report\nDescription: Protein folding report is defined as a subclass of Obsolete concept (EDAM), indicating that this concept is no longer in active use. It refers to a report detailing the analysis or modeling of protein folding properties, folding pathways, and identifying residues or sites key to protein folding, such as nucleation or stabilization centers. This class encompasses documentation surrounding investigations into the mechanisms and factors governing protein folding.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Protein folding report classified as a kind of Obsolete concept (EDAM)? | Which concepts fall under the category of Obsolete concept (EDAM), specifically including Protein folding report? | What broader conceptual group does Protein folding report belong to according to the taxonomy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Immunology\nDescription: Immunology is a subclass of Biomedical science, focusing on the application of information technology to the study of immunological processes, including immunological genes, proteins, peptide ligands, antigens, and related topics. This class captures the intersection of informatics and immunology within the broader context of biomedical sciences.\nAxiom: {'subClassOf': ['Biomedical science']}\nGenerated CQs:", "output": "Is Immunology classified under the broader category of Biomedical science? | What are the specialized fields that fall under Biomedical science, such as Immunology? | Which overarching scientific domains encompass Immunology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DiProDB ID\nDescription: DiProDB ID is defined as a subclass of Oligonucleotide ID, representing an identifier specifically assigned to a dinucleotide property within the DiProDB database. This class is intended to uniquely reference dinucleotide properties catalogued in DiProDB, ensuring structured identification within oligonucleotide-related datasets.\nAxiom: {'subClassOf': ['Oligonucleotide ID']}\nGenerated CQs:", "output": "Is DiProDB ID classified under the broader category of Oligonucleotide ID? | Which identifiers are considered specific forms of Oligonucleotide ID, including DiProDB ID? | What more general identifier categories encompass DiProDB ID? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Wilcoxon\nDescription: Wilcoxon is defined as a subclass of algorithm, indicating that all instances of Wilcoxon are considered algorithms. No further property constraints or disjointness are specified, so its principal characteristic is its classification under the broader category of algorithm.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "Is Wilcoxon classified as a specific kind of algorithm? | What broader categories does Wilcoxon, as a subclass, fall under? | Which algorithms encompass Wilcoxon as a more specialized form? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Neurobiology\nDescription: Neurobiology is a subclass of Biomedical science, focused on the study of the nervous system and brain, including their anatomy, physiology, and functional aspects. This class encompasses research and knowledge relating to how nervous tissue develops, operates, and influences behavior and health.\nAxiom: {'subClassOf': ['Biomedical science']}\nGenerated CQs:", "output": "What disciplines are categorized under Biomedical science, specifically including Neurobiology? | Which higher-level scientific categories encompass Neurobiology? | Is Neurobiology classified as a subset of Biomedical science? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Pascal\nDescription: Pascal is defined as a subclass of programming language. This specifies that every instance of Pascal is inherently a programming language, inheriting all general characteristics and constraints of programming languages. No additional property restrictions or distinctions are currently asserted for this class.\nAxiom: {'subClassOf': ['programming language']}\nGenerated CQs:", "output": "Is Pascal categorized as a type of programming language? | What broader classes include Pascal as a member? | Which programming languages have Pascal as a specific example? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence cutting\nDescription: Sequence cutting is defined as a subclass of Sequence editing, representing an operation that involves cutting or removing characters or a specific region from a molecular sequence. This class specifically captures the molecular sequence alteration process where a segment is excised, aligning with its role as a specialized form of sequence editing.\nAxiom: {'subClassOf': ['Sequence editing']}\nGenerated CQs:", "output": "Does Sequence cutting fall under the general category of Sequence editing? | Which higher-level classes contain Sequence cutting as a subclass? | What specific subtypes are encompassed within Sequence editing, including Sequence cutting? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Physicochemical property data processing\nDescription: Physicochemical property data processing is defined as a subclass of Obsolete concept (EDAM), representing processes that involve reading and/or writing data related to the physicochemical properties of molecules. This class is considered obsolete, meaning it is no longer recommended for use in current ontological frameworks.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "To which higher-level categories does Physicochemical property data processing belong? | Is Physicochemical property data processing classified as a type of Obsolete concept (EDAM)? | Which specific concepts are categorized under Obsolete concept (EDAM), including Physicochemical property data processing? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GenePix Pro [Axon Instruments]\nDescription: GenePix Pro [Axon Instruments] is defined as a subclass of GenePix Pro. This indicates that it inherits all characteristics and constraints of GenePix Pro, but may also include additional specific features or distinctions related to the Axon Instruments variant. No further disjointness or property restrictions are specified for this class.\nAxiom: {'subClassOf': ['GenePix Pro']}\nGenerated CQs:", "output": "Which software tools are specialized types of GenePix Pro, such as GenePix Pro [Axon Instruments]? | What higher-level categories include GenePix Pro [Axon Instruments] as a member? | Is GenePix Pro [Axon Instruments] classified under the broader category of GenePix Pro? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Locus ID (MMP)\nDescription: Locus ID (MMP) is defined as a subclass of Locus ID, representing identifiers specifically assigned to loci within the Maize Mapping Project. These identifiers uniquely reference genetic loci mapped in the context of this project, ensuring precise identification and integration with broader genetic resources.\nAxiom: {'subClassOf': ['Locus ID']}\nGenerated CQs:", "output": "What hierarchical categories encompass Locus ID (MMP)? | What distinguishes Locus ID (MMP) as a specialized form of Locus ID? | Which instances are classified under Locus ID (MMP) within the overall set of Locus ID? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Reaction ID (SABIO-RK)\nDescription: Reaction ID (SABIO-RK) is defined as a subclass of Reaction ID and functions as an identifier for biological reactions specifically sourced from the SABIO-RK reactions database. This class ensures that any instance categorized as Reaction ID (SABIO-RK) serves to uniquely identify a biological reaction entry within the SABIO-RK database.\nAxiom: {'subClassOf': ['Reaction ID']}\nGenerated CQs:", "output": "Does Reaction ID (SABIO-RK) belong to the more general class of Reaction ID? | Which specific types of Reaction ID encompass Reaction ID (SABIO-RK)? | What broader categories can Reaction ID (SABIO-RK) be classified under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: outline document format\nDescription: outline document format is defined as a subclass of data format specification. This means it represents a specific type of data format specification focused on encoding or structuring outline documents, distinguishing it from other forms of data format specifications.\nAxiom: {'subClassOf': ['data format specification']}\nGenerated CQs:", "output": "Is outline document format classified under data format specification? | What higher-level categories does outline document format fall within? | Which types are encompassed by data format specification, such as outline document format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Local-pooled-error\nDescription: Local-pooled-error is defined as a subclass of algorithm, indicating that it represents a specific type of algorithm. No further restrictions or distinguishing axioms are specified, so any instance of local-pooled-error must also be an instance of algorithm.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "What are the specific types of algorithm that include Local-pooled-error? | Does Local-pooled-error fall under the general category of algorithm? | To which broader classes does Local-pooled-error belong in the ontology hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene ID (JCVI)\nDescription: Gene ID (JCVI) is a subclass of Gene ID and represents a unique identifier assigned to a gene by the J. Craig Venter Institute (JCVI). This ensures distinct identification and referencing of genes specifically annotated by JCVI within biological databases.\nAxiom: {'subClassOf': ['Gene ID']}\nGenerated CQs:", "output": "Does Gene ID (JCVI) represent a specialized form of Gene ID? | To which general identifier classes does Gene ID (JCVI) belong? | What specific identifiers are encompassed by the broader category Gene ID, such as Gene ID (JCVI)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Nucleic acid property\nDescription: Nucleic acid property is a subclass of Molecular property, representing reports that primarily describe intrinsic physical, chemical, or other properties of nucleic acid molecules, rather than their position in a sequence. This class encompasses broad data types, typically based on the analysis of nucleic acid sequence or structural data, and serves as a placeholder for more specific nucleic acid property types.\nAxiom: {'subClassOf': ['Molecular property']}\nGenerated CQs:", "output": "What specific properties are categorized under Molecular property, such as Nucleic acid property? | Which higher-level classes encompass the Nucleic acid property category? | Does every Nucleic acid property fall under the broader group of Molecular properties? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Secondary structure processing\nDescription: Secondary structure processing is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer in active use within the EDAM ontology. This class refers to processes involving the reading and/or writing of molecular secondary structure, encompassing the handling or manipulation of such structural information.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "To what higher-level groupings does Secondary structure processing belong? | Which concepts are defined as subclasses of Obsolete concept (EDAM)? | Is Secondary structure processing categorized under Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Affymetrix probe sets library file\nDescription: Affymetrix probe sets library file is defined as a subclass of Obsolete concept (EDAM). This class refers to an Affymetrix library file containing information about which probes belong to which probe set. As it is classified under obsolete concepts, it is considered deprecated within the ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Affymetrix probe sets library file classified as an instance of the broader Obsolete concept (EDAM)? | What broader conceptual groups include Affymetrix probe sets library file? | Which specific concepts are categorized under Obsolete concept (EDAM), such as Affymetrix probe sets library file? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence-profile alignment (Domainatrix signature)\nDescription: Sequence-profile alignment (Domainatrix signature) is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer in active use or recommended for current applications. This class represents the alignment of molecular sequences to a Domainatrix signature, where the signature itself embodies a sequence alignment. This concept is retained for historical or reference purposes within the ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What are the more specific concepts included within Obsolete concept (EDAM), such as Sequence-profile alignment (Domainatrix signature)? | Which higher-level categories does Sequence-profile alignment (Domainatrix signature) fall under? | Is Sequence-profile alignment (Domainatrix signature) classified under the broader category of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Primer3 internal oligo mishybridizing library\nDescription: Primer3 internal oligo mishybridizing library is a subclass of Obsolete concept (EDAM). It represents a library of nucleotide sequences specifically designated to be avoided during hybridization events involving internal oligos. The purpose of this library is to prevent internal oligos from hybridizing to these sequences, rather than initiating priming from them. The library data is provided in a restricted FASTA format. As a member of the \"Obsolete concept (EDAM)\" category, this concept is no longer recommended for current use.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Does Primer3 internal oligo mishybridizing library fall under the general classification of Obsolete concept (EDAM)? | Which broader classes include Primer3 internal oligo mishybridizing library as a member? | What specialized concepts are subsumed by Obsolete concept (EDAM), including Primer3 internal oligo mishybridizing library? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Calculation\nDescription: Calculation is defined as a subclass of Analysis. This class encompasses mathematical determinations of the value of something, typically a property of a molecule. Any individual of this class represents a process or act in which a quantitative or qualitative property—especially of a molecule—is derived through mathematical means, reflecting its analytical role within the ontology.\nAxiom: {'subClassOf': ['Analysis']}\nGenerated CQs:", "output": "Which broader classes does Calculation belong to within the ontology? | What specialized concepts fall under the broader class of Analysis, such as Calculation? | Is Calculation categorized as a specific type of Analysis? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Strain data format\nDescription: Strain data format is defined as a subclass of the obsolete concept (EDAM), indicating that it is no longer actively maintained or recommended for use. It refers to the format used for reports on organism strain data or cell lines. This classification suggests that while historically relevant, this data format is now superseded or discouraged in current practices.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What more general categories include Strain data format within the ontology? | Is Strain data format classified as a type of Obsolete concept (EDAM)? | Which data formats fall under the broader category of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Distribution clause\nDescription: Distribution clause is defined as a subclass of license clause, indicating that it represents a specific type or aspect of licensing terms. Any individual of Distribution clause inherently possesses all characteristics of a license clause, but with additional specialization relevant to distribution-related conditions within a license.\nAxiom: {'subClassOf': ['license clause']}\nGenerated CQs:", "output": "What broader classes encompass a distribution clause, such as license clause? | Is a distribution clause categorized as a type of license clause? | Which specific clauses fall under the classification of license clause, including distribution clause? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein sites and features\nDescription: Protein sites and features is defined as a subclass of the obsolete concept (EDAM), indicating that this class is deprecated and should not be used for new annotation. It refers to topics concerning the detection, identification, and analysis of positional features in proteins, such as functional sites. This class is preserved for historic or compatibility purposes rather than active use in current ontology models.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Are all protein sites and features categorized under the obsolete concept in EDAM? | Which specific subclasses fall within the obsolete concept (EDAM), including protein sites and features? | What broader ontology classes encompass protein sites and features in EDAM? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene ID (MIPS Maize)\nDescription: Gene ID (MIPS Maize) is defined as an identifier for genetic elements specific to the MIPS Maize database. This class is a subclass of Obsolete concept (EDAM), indicating that it is no longer recommended for use in contemporary ontological modeling or data annotation. Its usage is primarily historical or for legacy data referencing within the scope of MIPS Maize genetic element identification.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Does Gene ID (MIPS Maize) fall under the broader classification of Obsolete concept (EDAM)? | Which concepts are directly classified as Obsolete concept (EDAM) and include Gene ID (MIPS Maize)? | What are the parent classes associated with Gene ID (MIPS Maize)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ensembl ID ('Monodelphis domestica')\nDescription: Ensembl ID ('Monodelphis domestica') is defined as a subclass of Obsolete concept (EDAM). This class represents identifiers for entries such as exons, genes, transcripts, or proteins from the Ensembl 'core' database specific to the 'Monodelphis domestica' division. The obsolete status indicates that this identifier or concept is no longer recommended for current use.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What broader EDAM concepts encompass the Ensembl ID for Monodelphis domestica? | Which Ensembl IDs are designated as subclasses of Obsolete concept (EDAM)? | Is Monodelphis domestica Ensembl ID classified under the category of Obsolete concept in EDAM? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Free\nDescription: Free is defined as a subclass of Purchase cost, representing instances where the cost of software is zero. This class exclusively addresses the price aspect of software and does not pertain to the broader definition of \"free software\" as established by the GNU Project, which emphasizes user freedoms and community rights. The scope of this class is limited solely to monetary cost, clarifying that \"free\" in this context means no purchase payment is required for the software.\nAxiom: {'subClassOf': ['Purchase cost']}\nGenerated CQs:", "output": "Is Free regarded as a specialized form of Purchase cost? | Which specific purchase costs include Free as an instance or subclass? | Under what broader purchase cost categories does Free fall? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Alignment format (XML)\nDescription: Alignment format (XML) is a subclass of Alignment format, specifically representing the XML-based standard used for encoding molecular sequence alignment information. This class formalizes alignment data expressed in XML format, ensuring structured, standardized representation and exchange within bioinformatics workflows.\nAxiom: {'subClassOf': ['Alignment format']}\nGenerated CQs:", "output": "Which higher-level classification groups include Alignment format (XML)? | Is Alignment format (XML) categorized as a kind of Alignment format? | What are the direct subclasses found under Alignment format, including Alignment format (XML)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Virus annotation (taxonomy)\nDescription: Virus annotation (taxonomy) is defined as a subclass of Obsolete concept (EDAM), indicating that it is considered outdated within the context of the ontology. It is described as an informative report on the taxonomy of a specific virus, providing taxonomic classification details relevant to viral species.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What broader classifications encompass Virus annotation (taxonomy) within the ontology? | Is Virus annotation (taxonomy) categorized under Obsolete concept (EDAM)? | Which concepts are specialized forms of Obsolete concept (EDAM), such as Virus annotation (taxonomy)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Databank\nDescription: Databank is defined as a subclass of the obsolete concept (EDAM), indicating that it represents a concept no longer in active use. It is described as a flat-file (textual) data archive, typically meaning a structured collection of data stored in plain text format, rather than in a relational database or other advanced data management system. This class formalizes the notion of simple, text-based data repositories that have since been superseded by more modern data management paradigms.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which concepts are categorized under Obsolete concept (EDAM), including Databank? | Is Databank classified as a type of Obsolete concept (EDAM)? | What more general concepts encompass Databank within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Mass spectrometry experiment\nDescription: Mass spectrometry experiment is a subclass of Obsolete concept (EDAM), indicating that it represents a topic or category that is now considered outdated within the EDAM framework. It is defined as a topic concerning mass spectrometry experiments, relating to experimental procedures or studies utilizing mass spectrometry techniques.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Mass spectrometry experiment classified under the broader group of Obsolete concept (EDAM)? | Which specific experimental types fall within the category of Obsolete concept (EDAM)? | What higher-level concepts encompass Mass spectrometry experiment in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence composition calculation (nucleic acid)\nDescription: Sequence composition calculation (nucleic acid) is defined as a subclass of Obsolete concept (EDAM). It refers to methods or processes used to calculate the base frequency or word (oligonucleotide) composition within a nucleotide sequence. This concept is considered obsolete in the EDAM ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which specific concepts fall under the Obsolete concept (EDAM) category, including Sequence composition calculation (nucleic acid)? | Is Sequence composition calculation (nucleic acid) categorized under Obsolete concept (EDAM)? | What broader category does Sequence composition calculation (nucleic acid) belong to within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RefSeq accession\nDescription: RefSeq accession is defined as a subclass of Sequence accession (hybrid) and represents an accession number uniquely identifying a database entry in the RefSeq database. This class ensures traceability and standard reference across biological sequence data as captured within RefSeq records.\nAxiom: {'subClassOf': ['Sequence accession (hybrid)']}\nGenerated CQs:", "output": "Does the RefSeq accession category fall under the broader group of Sequence accession? | To what higher-level class does RefSeq accession belong within the sequence accession hierarchy? | Which accessions are recognized as more specific types within Sequence accession, including RefSeq accession? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Secondary structure alignment\nDescription: Secondary structure alignment is defined as a subclass of Alignment. It refers specifically to the alignment of the one-dimensional representations of the secondary structure elements of two or more molecules. This class restricts members to those alignments that are based on comparing features such as alpha helices and beta strands, rather than primary sequence or three-dimensional structure.\nAxiom: {'subClassOf': ['Alignment']}\nGenerated CQs:", "output": "Which types of Alignment include Secondary structure alignment as a more specialized form? | Is Secondary structure alignment categorized under the broader concept of Alignment? | What general classifications encompass Secondary structure alignment as a subcategory? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Genotype and phenotype data\nDescription: Genotype and phenotype data is classified as a subclass of the Obsolete concept (EDAM), indicating that it is deprecated in the ontology. The class refers to data pertaining to a particular genotype, phenotype, or the relationship between a genotype and phenotype. This classification clarifies that any instance must represent information about genetic makeup, observable traits, or their associations, but the use of this class is discouraged in favor of more current concepts.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What are the broader conceptual categories to which Genotype and phenotype data is assigned in this context? | Does Genotype and phenotype data fall under the broader classification of Obsolete concept (EDAM)? | Which specific data types are included as subclasses beneath Obsolete concept (EDAM), such as Genotype and phenotype data? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence type\nDescription: Sequence type is a subclass of Obsolete concept (EDAM). It refers to a label (text token) describing a type of molecular sequence, which may reflect either the molecule (such as protein, nucleic acid, etc.) or characteristics of the sequence itself (such as being gapped or ambiguous). This concept is retained for reference but is categorized as obsolete within the EDAM ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which subclasses fall under Obsolete concept (EDAM), including Sequence type? | What higher-level classes encompass Sequence type within the ontology? | Is Sequence type categorized under the broader class of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: usage non commercial only\nDescription: The class usage non commercial only is defined as a subclass of Usage restricted, indicating that its members are subject to usage limitations. Specifically, individuals in this class are permitted to use the associated resource only for non-commercial purposes, excluding any commercial exploitation or profit-making activities. This formalization ensures that any resource labeled with usage non commercial only inherits all general usage restrictions while explicitly prohibiting commercial use.\nAxiom: {'subClassOf': ['Usage restricted']}\nGenerated CQs:", "output": "What types fall under Usage restricted, including usage non commercial only? | Which overarching restrictions encompass usage non commercial only? | Is usage non commercial only classified under the broader category of Usage restricted? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NCBI gene report format\nDescription: NCBI gene report format is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer actively used or maintained. It refers to the entry (gene) format used by the NCBI database. Members of this class pertain to the data structure or template formerly applied for representing gene records in NCBI, but its classification as obsolete implies supersession by alternative formats or standards.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is NCBI gene report format classified under the broader category of Obsolete concept (EDAM)? | Which report formats are subclasses of Obsolete concept (EDAM), including NCBI gene report format? | To which obsolete conceptual categories does NCBI gene report format belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cardiology\nDescription: Cardiology is defined as a subclass of Medicine concerned with the study, diagnosis, and treatment of diseases and abnormalities of the heart and circulatory system. This class represents a medical specialty focused on cardiovascular health within the broader domain of medicine.\nAxiom: {'subClassOf': ['Medicine']}\nGenerated CQs:", "output": "Under which major domains is Cardiology classified? | Does Cardiology fall under the broader discipline of Medicine? | Which academic fields are more specialized than Medicine, such as Cardiology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TIGRFam entry format\nDescription: TIGRFam entry format is defined as a subclass of Obsolete concept (EDAM). It refers to the entry format used in the TIGRFam protein secondary database. This class is considered obsolete, indicating that it is no longer in active use or has been replaced in the relevant ontology or database context.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which higher-level categories encompass TIGRFam entry format within the ontology? | Is TIGRFam entry format classified under the broader concept of Obsolete concept (EDAM)? | What formats are recognized as more specific instances of Obsolete concept (EDAM), such as TIGRFam entry format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Systems medicine\nDescription: Systems medicine is formally defined as a subclass of Medicine. It is an interdisciplinary field focused on understanding the dynamic systems of the human body as an integrated whole, incorporating biochemical, physiological, and environmental interactions essential to sustaining life. This classification emphasizes its foundational connection to Medicine while highlighting its systems-based, integrative approach.\nAxiom: {'subClassOf': ['Medicine']}\nGenerated CQs:", "output": "Does Systems medicine fall under the broader classification of Medicine? | What higher-level categories include Systems medicine within their scope? | Which subfields are encompassed by Medicine, including Systems medicine? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene name (ASPGD)\nDescription: Gene name (ASPGD) is defined as a subclass of Obsolete concept (EDAM), indicating it represents an outdated or retired concept within the ontology. It specifically refers to the name of a gene recorded in the Aspergillus Genome Database.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Can Gene name (ASPGD) be classified under the broader category of Obsolete concept (EDAM)? | Which subclasses fall under Obsolete concept (EDAM), and does Gene name (ASPGD) appear among them? | What are the direct superclasses of Gene name (ASPGD)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: averaging\nDescription: averaging is defined as a subclass of information processing. This means that averaging is considered a specific type of information processing activity. Any instance of averaging inherits all characteristics of information processing, but is more specifically concerned with the methods or processes by which multiple values are combined to produce a representative value.\nAxiom: {'subClassOf': ['information processing']}\nGenerated CQs:", "output": "Which subcategories fall within information processing, particularly including averaging? | Is averaging classified under the broader category of information processing? | What higher-level concepts encompass averaging within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein folding, stability and design\nDescription: Protein folding, stability and design is a subclass of Protein structure analysis. It concerns the study of protein stability, the folding of proteins in three-dimensional space, and the relationships between protein sequence, structure, and function. This class includes topics such as the analysis of inter-atomic or inter-residue interactions within protein structures, investigation of the effects of mutations on protein stability or function, and the rational design of proteins with specific properties, often accomplished by introducing targeted changes to existing proteins (e.g., via site-directed mutagenesis).\nAxiom: {'subClassOf': ['Protein structure analysis']}\nGenerated CQs:", "output": "Which specialized topics fall under Protein structure analysis, such as Protein folding, stability and design? | What higher-level classes does Protein folding, stability and design belong to within the protein research domain? | Is Protein structure analysis a broader category that encompasses Protein folding, stability and design? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Microbiology\nDescription: Microbiology is defined as a subclass of biomedical science, focusing on the biology of microorganisms. This class encompasses scientific study and research related to microorganisms, such as bacteria, viruses, fungi, and protozoa, within the broader context of biomedical sciences.\nAxiom: {'subClassOf': ['Biomedical science']}\nGenerated CQs:", "output": "Which specialized disciplines fall under Biomedical science, including Microbiology? | Is Microbiology categorized under the broader field of Biomedical science? | Under which parent scientific domains is Microbiology classified? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Amino acid index (hydropathy)\nDescription: Amino acid index (hydropathy) is a subclass of Amino acid index that refers to hydrophobic, hydrophilic, or charge properties of amino acids. Members of this class specifically characterize amino acids based on their tendency to interact with water or carry a charge, reflecting fundamental chemical and physical attributes important for protein structure and function.\nAxiom: {'subClassOf': ['Amino acid index']}\nGenerated CQs:", "output": "Is Amino acid index (hydropathy) classified as a type of Amino acid index? | To what broader index classes does Amino acid index (hydropathy) pertain? | Which specific indices are covered under the broader category of Amino acid index, including hydropathy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylogenetic tree generation (maximum likelihood and Bayesian methods)\nDescription: Phylogenetic tree generation (maximum likelihood and Bayesian methods) is a subclass of Phylogenetic tree generation (method centric). This class encompasses computational approaches for constructing phylogenetic trees by relating sequence data to hypothetical tree topologies through models of sequence evolution. Specifically, maximum likelihood methods identify the tree topology that maximizes the likelihood function based on the given data and model, while Bayesian analysis estimates the probability distribution of possible trees (including branch lengths and topology), often employing Monte Carlo algorithms for inference.\nAxiom: {'subClassOf': ['Phylogenetic tree generation (method centric)']}\nGenerated CQs:", "output": "Is phylogenetic tree generation using maximum likelihood and Bayesian methods classified under method-centric phylogenetic tree generation? | Which specialized approaches belong to the category of method-centric phylogenetic tree generation, such as maximum likelihood and Bayesian methods? | What are the broader categories that encompass phylogenetic tree generation with maximum likelihood and Bayesian methods? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Secondary structure alignment generation\nDescription: Secondary structure alignment generation is classified as a subclass of Obsolete concept (EDAM), indicating it is no longer in active use within the ontology. This class refers to the process of aligning molecular secondary structures represented as 1D strings, but its deprecated status suggests newer or alternative methods are now preferred.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which overarching categories encompass Secondary structure alignment generation? | What specialized processes are classified under Obsolete concept (EDAM), such as Secondary structure alignment generation? | Is Obsolete concept (EDAM) a direct superclass of Secondary structure alignment generation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ILLUMINA data\nDescription: ILLUMINA data is defined as a subclass of data, meaning it represents a specific type or category of data within the broader class of data. There are no additional property restrictions or disjointness axioms specified, so ILLUMINA data inherits all characteristics of the general data class, while being distinguished as data generated by ILLUMINA technologies or platforms.\nAxiom: {'subClassOf': ['data']}\nGenerated CQs:", "output": "Is ILLUMINA data classified as a specific type of data? | Which overarching types does ILLUMINA data inherit from? | What are the specialized categories that fall under data, such as ILLUMINA data? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gap opening penalty\nDescription: Gap opening penalty is defined as a subclass of Gap penalty. It specifically refers to a penalty applied for opening a gap in an alignment, as part of sequence alignment scoring schemes. This class represents a particular type of gap penalty, distinguishing the cost incurred at the initiation of a gap from other potential gap-related penalties.\nAxiom: {'subClassOf': ['Gap penalty']}\nGenerated CQs:", "output": "What are the higher-level categories that encompass Gap opening penalty? | Is Gap penalty a broader classification that includes Gap opening penalty? | Which specific penalty types fall under the Gap penalty category, such as Gap opening penalty? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Amino acid identifier format\nDescription: Amino acid identifier format is a subclass of Obsolete concept (EDAM), indicating it is no longer in active use. It is defined as a text format used to represent amino acid residues, specifying how amino acids are notated or encoded in text-based data representations.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What are the parent classes of Amino acid identifier format in the ontology? | Which formats are specified as subclasses of Obsolete concept (EDAM), including Amino acid identifier format? | Does Amino acid identifier format fall under the category of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MHC Class II epitopes report\nDescription: MHC Class II epitopes report is defined as a subclass of Obsolete concept (EDAM). It represents a report on predicted epitopes that bind to MHC class II molecules, but is currently considered obsolete within the ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is MHC Class II epitopes report categorized under the obsolete concepts defined in EDAM? | For which more general concept in EDAM is MHC Class II epitopes report a specific subtype? | Which obsolete concepts in EDAM have MHC Class II epitopes report as a specific instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Amino acid index (van der Waals radii)\nDescription: Amino acid index (van der Waals radii) is a subclass of Amino acid index that represents data on the van der Waals radii of atoms in different amino acid residues. This class is used to characterize the steric properties of amino acids by capturing the effective size of their constituent atoms, as reflected by van der Waals radii.\nAxiom: {'subClassOf': ['Amino acid index']}\nGenerated CQs:", "output": "What general classes is Amino acid index (van der Waals radii) a member of? | Does Amino acid index (van der Waals radii) fall under the broader class of Amino acid index? | Which specialized indices are categorized under Amino acid index, such as Amino acid index (van der Waals radii)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence assembly report\nDescription: Sequence assembly report is defined as a subclass of Sequence alignment report, representing an informative report about a DNA sequence assembly. This report includes an overall quality assessment of the assembly and provides summary statistics such as counts, average length, and number of bases related to reads, matches, non-matches, contigs, and reads in pairs.\nAxiom: {'subClassOf': ['Sequence alignment report']}\nGenerated CQs:", "output": "Which specific reports are classified as subclasses of Sequence alignment report? | Does the Sequence assembly report fall under the broader category of Sequence alignment report? | What higher-level categories does Sequence assembly report belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Nucleic acid features report (microsatellite)\nDescription: Nucleic acid features report (microsatellite) is a subclass of Obsolete concept (EDAM), indicating that it represents a topic or conceptual category that is no longer in active use within the EDAM ontology. It focuses specifically on the subject of microsatellite polymorphism in a DNA sequence, describing topics related to the identification and analysis of repeated DNA sequences (microsatellites) and their variability.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which specific concepts are classified as subclasses of Obsolete concept (EDAM), such as Nucleic acid features report (microsatellite)? | Does Nucleic acid features report (microsatellite) fall under the broader category of Obsolete concept (EDAM)? | What general categories encompass Nucleic acid features report (microsatellite) within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: EPS\nDescription: EPS is defined as a subclass of Textual format and refers specifically to Encapsulated PostScript format. This indicates that EPS files are considered a type of textual file format, characterized by their structure as encapsulated PostScript documents typically used for graphics and document exchange.\nAxiom: {'subClassOf': ['Textual format']}\nGenerated CQs:", "output": "Is EPS categorized under the general class of Textual format? | Which formats are specialized forms of Textual format, with EPS as an example? | In what broader format classifications does EPS reside? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Date\nDescription: Date is defined as a subclass of \"Obsolete concept (EDAM)\", indicating it is considered outdated in the current ontology context. It is described as a temporal date, referring to a specific point or period in time. This classification signals that although the concept refers to dates or points in time, its use is deprecated within the EDAM ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Date classified as a kind of Obsolete concept in the EDAM ontology? | What broader conceptual categories does Date fall under within the EDAM ontology? | Which concepts are more specific than Obsolete concept (EDAM), specifically including Date? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ensembl ID ('Gasterosteus aculeatus')\nDescription: Ensembl ID ('Gasterosteus aculeatus') is defined as a subclass of Obsolete concept (EDAM). It represents an identifier assigned to entries such as exons, genes, transcripts, or proteins in the Ensembl 'core' database for the Gasterosteus aculeatus division. This class is considered obsolete in the ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What higher-level concepts encompass Ensembl ID ('Gasterosteus aculeatus') in the ontology? | Which identifiers are categorized as specializations of Obsolete concept (EDAM), including Ensembl ID ('Gasterosteus aculeatus')? | Is Ensembl ID ('Gasterosteus aculeatus') classified under the category of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein interaction networks\nDescription: Protein interaction networks is a class categorized as an obsolete concept in EDAM, indicating that it is no longer in active use or has been retired in favor of more precise terminology. The class concerns topics related to networks representing interactions between proteins. Although previously used to describe the study or organization of protein-protein interactions, this concept now falls under obsolete classifications and is not recommended for new use.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)', 'Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "To which higher-level categories does Protein interaction networks belong according to EDAM? | Which more specific concepts are encompassed under Obsolete concept (EDAM), including Protein interaction networks? | Is Protein interaction networks classified within the broader category of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Viruses\nDescription: Viruses are defined as a subclass of organisms, encompassing any entity that is or pertains to a virus or group of viruses. This class includes topics such as viral sequence and structural data, interactions among viral proteins, and viral genomes with their associated molecular sequences, genes, and annotations. The scope covers resources specific to individual viruses, groups of viruses, or viruses in general.\nAxiom: {'subClassOf': ['Organisms']}\nGenerated CQs:", "output": "Are all Viruses categorized under the broader class of Organisms? | What higher-level classes include Viruses as members? | Which subclasses are encompassed by Organisms, such as Viruses? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene ID (HGNC)\nDescription: Gene ID (HGNC) is defined as a subclass of Gene ID. It represents an identifier specifically assigned to a gene that has been approved by the HUGO Gene Nomenclature Committee (HGNC). This ensures that each gene is uniquely and consistently identified according to HGNC standards.\nAxiom: {'subClassOf': ['Gene ID']}\nGenerated CQs:", "output": "Which identifiers are subclasses under Gene ID, such as Gene ID (HGNC)? | What broader identifier classes does Gene ID (HGNC) fall under? | Is Gene ID (HGNC) classified as a more specific form of Gene ID? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Tool identifier\nDescription: Tool identifier is defined as a subclass of Identifier (typed), specifically representing an identifier assigned to a bioinformatics tool such as an application or web service. This class ensures that every Tool identifier is a type of typed identifier, explicitly intended for uniquely distinguishing bioinformatics tools.\nAxiom: {'subClassOf': ['Identifier (typed)']}\nGenerated CQs:", "output": "What broader categories encompass Tool identifier within the ontology? | Is Tool identifier regarded as a specific kind of Identifier? | Which identifiers include Tool identifier as a more specialized type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HMMER3\nDescription: HMMER3 is defined as a subclass of HMMER format, representing profile HMM files specifically used with HMMER software versions 3.x. This class characterizes files formatted for compatibility with the HMMER3 suite, distinguishing them from other HMMER file versions or formats.\nAxiom: {'subClassOf': ['HMMER format']}\nGenerated CQs:", "output": "To which higher-level classes is HMMER3 directly related? | Does HMMER3 fall under the general category of HMMER format? | What types are covered as subclasses of HMMER format, specifically including HMMER3? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Misspelling\nDescription: Misspelling is defined as a subclass of the obsolete concept (EDAM), indicating that it is no longer an actively maintained or recommended concept within the ontology. It refers to a common misspelling of a word, formally capturing instances where a word is not spelled correctly according to standard conventions.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What specific subclasses are encompassed by the Obsolete concept (EDAM) category, including Misspelling? | Does Misspelling fall under the overarching category of Obsolete concept (EDAM)? | To which higher-level concepts is Misspelling hierarchically related within EDAM? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NCBI locus tag\nDescription: NCBI locus tag is defined as a subclass of Locus ID, representing identifiers specifically assigned to loci in the NCBI database. This class is used to designate and reference unique loci within the NCBI data framework, ensuring standardized identification and organization of genetic loci in NCBI resources.\nAxiom: {'subClassOf': ['Locus ID']}\nGenerated CQs:", "output": "Is NCBI locus tag classified under the broader category of Locus ID? | What subclasses are encompassed by Locus ID, and does this include NCBI locus tag? | Which higher-level identifiers does NCBI locus tag fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RMA++\nDescription: RMA++ is defined as a subclass of algorithm, indicating that it represents a specific type or instance of algorithm. No additional restrictions or distinctions are specified, so any entity classified as RMA++ is inherently an algorithm by definition.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "What specific types are encompassed within the category of algorithm, and does RMA++ appear among them? | Is RMA++ classified under the broader grouping of algorithm? | Which broader conceptual categories include RMA++ based on its classification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: process\nDescription: process is a class that is explicitly disjoint with 'Obsolete concept (EDAM)', meaning no individual can be simultaneously classified as both a process and an obsolete concept. This distinction ensures clarity in categorization by separating active processes from deprecated or outdated conceptual entities.\nAxiom: {'disjointWith': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which concepts are declared as disjoint with process in the ontology? | Can an entity be simultaneously classified as both a process and an Obsolete concept (EDAM)? | Is there any overlap defined between process and Obsolete concept (EDAM) in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene regulatory network report\nDescription: Gene regulatory network report is defined as a subclass of Obsolete concept (EDAM). It is described as a report that typically includes a map or diagram of a gene regulatory network, providing an overview of the regulatory interactions among genes. This class is considered obsolete within the EDAM ontology context.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Under which higher-level groupings would a gene regulatory network report be classified? | Does the category Obsolete concept (EDAM) encompass gene regulatory network reports? | Which types are more specific than Obsolete concept (EDAM), such as gene regulatory network report? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ensembl\nDescription: Ensembl is defined as a subclass of software, indicating that it represents a type of software application or platform. This classification establishes Ensembl within the broader software category, without further restrictions or specified properties.\nAxiom: {'subClassOf': ['software']}\nGenerated CQs:", "output": "What broader classes does Ensembl belong to in the ontology? | Which specific instances or subclasses fall under the category of software, such as Ensembl? | Is Ensembl classified as a type of software? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HMM emission and transition counts\nDescription: HMM emission and transition counts are defined as a subclass of Obsolete concept (EDAM). This class represents the emission and transition counts within a hidden Markov model, which are generated after the model has been determined—such as following the assignment of residues or gaps to match, delete, and insert states. This classification denotes that the concept is considered obsolete in the EDAM ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which concepts are subsumed by Obsolete concept (EDAM), including HMM emission and transition counts? | Are HMM emission and transition counts classified under the broader concept of Obsolete concept (EDAM)? | What higher-level categories encompass HMM emission and transition counts in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence features\nDescription: Sequence features is defined as a subclass of data, representing the annotation of positional features on molecular sequences that can be specifically mapped to positions within the sequence. This class includes standardized feature tables and general reports documenting sequence features, potentially requiring internal conversion for integration. Sequence features facilitate the structured description and reporting of specific regions or attributes along molecular sequences.\nAxiom: {'subClassOf': ['data']}\nGenerated CQs:", "output": "Under which broader classes does Sequence features fall? | Is Sequence features categorized as a subset of data? | Which classes are more specific than data, such as Sequence features? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RNA-Seq alignment\nDescription: RNA-Seq alignment is defined as a subclass of the Obsolete concept (EDAM), indicating that it is considered outdated within the ontology. It concerns the alignment of large numbers of short RNA sequence reads to a reference genome—a process that has unique challenges due to the complexities introduced by RNA splicing. As a specialized topic within the broader category of sequence alignment, RNA-Seq alignment addresses issues specific to transcriptomic data, such as handling spliced reads.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is RNA-Seq alignment classified as an instance within the wider class of Obsolete concept (EDAM)? | Which concepts are narrower in scope than Obsolete concept (EDAM), particularly including RNA-Seq alignment? | To which upper-level categories does RNA-Seq alignment fall, considering its status as Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DNA nucleotide sequence\nDescription: DNA nucleotide sequence is defined as a subclass of biological sequence data. It represents linear data sequences composed specifically of DNA nucleotides (adenine, thymine, cytosine, and guanine). This class formalizes the concept that any DNA nucleotide sequence is a type of biological sequence data, typically used to describe genetic information at the molecular level.\nAxiom: {'subClassOf': ['biological sequence data']}\nGenerated CQs:", "output": "What are the broader categories encompassing DNA nucleotide sequence? | Which biological sequence data subclasses include DNA nucleotide sequence? | Is DNA nucleotide sequence considered a specific type of biological sequence data? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylogenetic tree report (tree stratigraphic)\nDescription: Phylogenetic tree report (tree stratigraphic) is defined as a subclass of Obsolete concept (EDAM). It refers to molecular clock and stratigraphic (age) data derived from phylogenetic tree analysis. This class is considered obsolete in the EDAM ontology, indicating it is no longer recommended for current usage or annotation.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What are the subclasses identified under Obsolete concept (EDAM), including Phylogenetic tree report (tree stratigraphic)? | Can Phylogenetic tree report (tree stratigraphic) be classified as an instance of Obsolete concept (EDAM)? | Which higher-level concept encompasses Phylogenetic tree report (tree stratigraphic)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Peptide identifier\nDescription: Peptide identifier is defined as a subclass of Molecule identifier. It represents an identifier assigned specifically to a peptide chain, distinguishing it from other types of molecular identifiers by its exclusive association with peptides. This class formalizes the concept of uniquely referencing peptide chains within molecular datasets or systems.\nAxiom: {'subClassOf': ['Molecule identifier']}\nGenerated CQs:", "output": "Which identifier categories encompass Peptide identifier as a specific instance? | Is every Peptide identifier classified under the broader category of Molecule identifier? | What specific types of identifiers are included within the class of Molecule identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IntAct accession number\nDescription: IntAct accession number is defined as a subclass of Protein interaction ID, representing an accession number assigned to entries in the IntAct database. This class identifies unique entries documenting protein interactions within the IntAct database, ensuring standardized referencing and integration with protein interaction data resources.\nAxiom: {'subClassOf': ['Protein interaction ID']}\nGenerated CQs:", "output": "Is every IntAct accession number classified under Protein interaction ID? | What distinct subclasses are included within Protein interaction ID? | Which identifier categories encompass IntAct accession number as a specialized type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Microsatellites\nDescription: Microsatellites are a subclass of DNA polymorphism characterized by very short sequences of nucleotides, specifically repeats of cytosine and adenosine, that occur in tandem and vary in repeat number among individuals. These polymorphisms are notable for their variability in the number of sequence repeats, making them useful markers in genetic studies. The class definition centers on the presence of repeated short DNA sequences within a DNA molecule, with emphasis on their role in genetic diversity.\nAxiom: {'subClassOf': ['DNA polymorphism']}\nGenerated CQs:", "output": "Are microsatellites recognized as a form of DNA polymorphism? | What broader classifications does microsatellite fall under within the context of DNA polymorphism? | Which types of DNA polymorphism include microsatellites as a specific example? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Medicine\nDescription: Medicine is defined as a subclass of Topic and is formally described as a subject concerned with research supporting healing through the diagnosis, treatment, and prevention of disease. This classification positions Medicine within the broader category of Topics, emphasizing its focus on health-related research and practices aimed at promoting healing and disease management.\nAxiom: {'subClassOf': ['Topic']}\nGenerated CQs:", "output": "Is Medicine classified as a subset of Topic? | What specific types fall under the category of Topic, including Medicine? | Which categories are broader than Medicine in the hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GeneSNP ID\nDescription: GeneSNP ID is defined as a subclass of Sequence variation ID, representing an identifier specifically assigned to entries within the GeneSNP database. This class is intended to capture unique identifiers associated with sequence variations cataloged in the GeneSNP resource.\nAxiom: {'subClassOf': ['Sequence variation ID']}\nGenerated CQs:", "output": "Which identifiers fall under the category of Sequence variation ID, such as GeneSNP ID? | Is Sequence variation ID a broader class that encompasses GeneSNP ID? | What more general identifier types does GeneSNP ID inherit from? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence composition calculation (protein)\nDescription: Sequence composition calculation (protein) is a subclass of Obsolete concept (EDAM). This class represents calculations that determine the amino acid frequency or the word composition within a protein sequence, typically used to analyze sequence characteristics. As an obsolete concept, it indicates that this analytical function is outdated or has been superseded in the relevant ontology or domain context.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Sequence composition calculation (protein) categorized under Obsolete concept (EDAM)? | What broader class does Sequence composition calculation (protein) belong to in the ontology? | Which concepts fall under the Obsolete concept (EDAM) category, such as Sequence composition calculation (protein)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PolyA signal detection\nDescription: PolyA signal detection is defined as a subclass of nucleic acid sequence feature detection. It refers specifically to the process of identifying polyadenylation signals within nucleotide sequences. This class inherits all characteristics of nucleic acid sequence feature detection and is distinguished by its focus on the detection of polyA signals, which are critical regulatory elements in gene expression and mRNA processing.\nAxiom: {'subClassOf': ['Nucleic acid sequence feature detection']}\nGenerated CQs:", "output": "Which detection methods are more specific than Nucleic acid sequence feature detection, including PolyA signal detection? | Is PolyA signal detection categorized as a type of Nucleic acid sequence feature detection? | What higher-level detection categories does PolyA signal detection belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene name (Genolist)\nDescription: Gene name (Genolist) is defined as a subclass of the Obsolete concept (EDAM), indicating that it is no longer actively used or maintained. This class represents the name assigned to a gene entry from the Genolist genes database.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What specific concepts fall under Obsolete concept (EDAM), including Gene name (Genolist)? | Which general types encompass Gene name (Genolist) within the ontology? | Is Gene name (Genolist) classified as a kind of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene ID (SGN)\nDescription: Gene ID (SGN) is defined as a subclass of Gene ID and specifically refers to a gene identifier originating from the Sol Genomics Network. This class represents identifiers uniquely assigned to genes within the SGN resource, distinguishing them as a subset within the broader category of gene identifiers.\nAxiom: {'subClassOf': ['Gene ID']}\nGenerated CQs:", "output": "What identifiers are categorized under Gene ID, specifically including Gene ID (SGN)? | Which higher-level identifier types encompass Gene ID (SGN)? | Is every instance classified as Gene ID (SGN) also recognized under Gene ID? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Plugin\nDescription: Plugin is defined as a subclass of role, indicating that it represents a specific type of role within the ontology. No additional property restrictions or disjointness axioms are present, so its characterization is currently limited to inheriting all features and constraints of the role class.\nAxiom: {'subClassOf': ['role']}\nGenerated CQs:", "output": "Is Plugin categorized as a type of role? | Which entities are classified under the broader category of role, including Plugin? | To which higher-level categories does Plugin belong within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Restriction enzyme name\nDescription: Restriction enzyme name is a subclass of Enzyme name. It refers specifically to the name assigned to a restriction enzyme, a type of enzyme that recognizes and cuts DNA at specific sequences. This class is formally situated within the broader category of enzyme names, distinguishing names of restriction enzymes from other enzyme types.\nAxiom: {'subClassOf': ['Enzyme name']}\nGenerated CQs:", "output": "Is Restriction enzyme name classified under the broader category of Enzyme name? | Which general categories encompass Restriction enzyme name within the enzyme classification? | What specific enzyme names are classified as subclasses of Enzyme name, including Restriction enzyme name? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Nucleic acid features (siRNA)\nDescription: Nucleic acid features (siRNA) is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer an active or recommended term within the ontology. According to its definition, this class refers to a report on siRNA duplexes in mRNA. This formalization designates the class as representing obsolete concepts specifically related to the documentation of siRNA duplex features in messenger RNA.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which concepts are more specific than Obsolete concept (EDAM), such as Nucleic acid features (siRNA)? | Is Obsolete concept (EDAM) a broader category that includes Nucleic acid features (siRNA)? | To which higher-level classifications does Nucleic acid features (siRNA) belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Pairwise protein tertiary structure alignment (all atoms)\nDescription: Pairwise protein tertiary structure alignment (all atoms) is an obsolete concept, classified as a subclass of Obsolete concept (EDAM). It refers to the alignment (superimposition) of exactly two protein tertiary (3D) structures, where all atoms are considered in the comparison. This class is no longer in active use, as indicated by its placement under the obsolete category.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Pairwise protein tertiary structure alignment (all atoms) classified as an instance of the broader Obsolete concept (EDAM)? | To which upper-level categories does Pairwise protein tertiary structure alignment (all atoms) belong? | Which specific concepts are classified under Obsolete concept (EDAM), including Pairwise protein tertiary structure alignment (all atoms)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SVG\nDescription: SVG is defined as a subclass of vector image format, indicating that every SVG is a type of vector image format. This classification situates SVG within the broader category of digital graphics that encode images using geometric and vector-based representations rather than rasterized pixels.\nAxiom: {'subClassOf': ['vector image format']}\nGenerated CQs:", "output": "Which image formats are included as subclasses within vector image format, such as SVG? | Does SVG fall under the broader classification of vector image format? | Of which more general categories is SVG a member according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Dotplot\nDescription: Dotplot is defined as a subclass of Sequence alignment report. It represents a report or graphical representation that depicts sequence similarities, typically identified through word-matching or character comparison methods. Members of this class provide visual summaries to highlight regions of similarity between biological sequences, facilitating the analysis of alignment patterns.\nAxiom: {'subClassOf': ['Sequence alignment report']}\nGenerated CQs:", "output": "To which general categories does Dotplot belong within the context of sequence alignment documentation? | Is Dotplot categorized under the broader class of Sequence alignment report? | Which report types are more specific than Sequence alignment report, such as Dotplot? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Systems biology\nDescription: Systems biology is defined as a subclass of Biology, focused on the holistic modeling and analysis of complex biological systems and their interactions. This class includes resources such as databases of models and methods used to construct or analyze these models, emphasizing an integrative approach to understanding biological complexity.\nAxiom: {'subClassOf': ['Biology']}\nGenerated CQs:", "output": "What specific branches are encompassed by Biology, including Systems biology? | Is Systems biology classified as a specialized field within Biology? | To which higher-level categories does Systems biology pertain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Dihedral angle validation\nDescription: Dihedral angle validation is a subclass of protein model validation. It is defined as the process of identifying, for each residue in a protein structure, any improper dihedral (phi/psi) angles. This class characterizes validation approaches focused specifically on assessing the correctness of backbone torsion angles in protein models.\nAxiom: {'subClassOf': ['Protein model validation']}\nGenerated CQs:", "output": "Does Dihedral angle validation fall under the broader classification of Protein model validation? | Which validation methods are categorized as more specific types of Protein model validation, such as Dihedral angle validation? | What are the overarching validation categories that encompass Dihedral angle validation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InterPro architecture image\nDescription: InterPro architecture image is defined as a subclass of Obsolete concept (EDAM). It represents an image that visually depicts the arrangement of InterPro domains within a protein sequence, illustrating domain architecture as a series of non-overlapping domains. Such images may be generated from sequences screened against InterPro or derived directly from InterPro entry sequences. This class is considered obsolete.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is InterPro architecture image categorized under Obsolete concept (EDAM)? | Under which broader concept does InterPro architecture image fall? | Which specific concepts are subclasses of Obsolete concept (EDAM), including InterPro architecture image? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: organization\nDescription: organization is defined as a subclass of material entity, indicating that every organization is regarded as a physical or material entity within the ontology. There are currently no further property restrictions or disjointness axioms specified for this class, so its definition is limited to its position as a specialized type of material entity.\nAxiom: {'subClassOf': ['material entity']}\nGenerated CQs:", "output": "Which entities are classified as more specific forms of material entity, such as organization? | Is an organization categorized as a type of material entity? | To what higher-level categories does organization belong according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: URN\nDescription: URN is defined as a subclass of URI, indicating that every URN is also a URI. It represents a Uniform Resource Name, which is a specific type of URI intended to serve as a unique, persistent identifier for a resource, independent of its location.\nAxiom: {'subClassOf': ['URI']}\nGenerated CQs:", "output": "Is URN categorized as a type of URI? | Which entities are classified under the URI category, including URN? | To what higher-level class does the concept of URN belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Bayesian Model\nDescription: Bayesian Model is defined as a subclass of algorithm, indicating that it is a specialized form of algorithm. Members of this class use principles of Bayesian inference to update probabilities or model parameters based on observed data, aligning with the general approach of algorithms in processing and decision-making.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "What are the direct subclasses of algorithm, such as Bayesian Model? | For which parent categories does Bayesian Model qualify as a member? | Is Bayesian Model classified as a specific type of algorithm? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Standardization and normalization\nDescription: Standardization and normalization is a subclass of Analysis, focusing specifically on processes designed to standardize or normalize data. Members of this class represent analytical procedures or techniques whose primary purpose is to bring data into a common format or scale, ensuring comparability and consistency across datasets.\nAxiom: {'subClassOf': ['Analysis']}\nGenerated CQs:", "output": "Which general classes encompass Standardization and normalization? | What types of Analysis include Standardization and normalization as a subclass? | Is Standardization and normalization categorized under the broader class of Analysis? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Job metadata\nDescription: Job metadata is a subclass of Obsolete concept (EDAM) and represents textual metadata associated with a submitted or completed job. This class encapsulates descriptive information pertaining to job instances, but is considered obsolete within the EDAM ontology context.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Job metadata an instance of the broader category Obsolete concept (EDAM)? | Which broader categories encompass Job metadata? | What concepts are categorized as subclasses of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Platform unrestricted\nDescription: Platform unrestricted is defined as a subclass of Platform clause. This means every instance of Platform unrestricted is also a Platform clause, inheriting all its properties and relationships, but may have no additional restrictions or specific platform-related constraints imposed by its definition.\nAxiom: {'subClassOf': ['Platform clause']}\nGenerated CQs:", "output": "Which specific types are encompassed by the Platform clause class, such as Platform unrestricted? | What are the broader classes to which Platform unrestricted is assigned? | Does Platform unrestricted fall under the classification of Platform clause? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cellular process pathways report\nDescription: Cellular process pathways report is defined as a subclass of the obsolete concept (EDAM), indicating that it represents a topic that is no longer in active use or is deprecated. According to its definition, it concerns topics related to cellular process pathways—mechanisms and interactions that occur within cells. This class should not be used for new classifications due to its obsolete status.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Cellular process pathways report classified under the broader category of Obsolete concept (EDAM)? | Which higher-level categories does Cellular process pathways report belong to? | What are the specific concepts that fall within Obsolete concept (EDAM), such as Cellular process pathways report? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TIGRFam ID\nDescription: TIGRFam ID is defined as a subclass of Protein family accession. It represents the accession number assigned to an entry (family) within the TIGRFam database, serving as a unique identifier for protein families curated in this resource.\nAxiom: {'subClassOf': ['Protein family accession']}\nGenerated CQs:", "output": "Is TIGRFam ID classified as a specific type of Protein family accession? | What kinds of identifiers are encompassed under the category of Protein family accession? | To which broader accession categories does TIGRFam ID pertain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Affymetrix probe sets information library file\nDescription: Affymetrix probe sets information library file is defined as a subclass of the obsolete concept (EDAM), indicating it is no longer considered current or maintained. This class represents Affymetrix library files that contain information about probe sets, including details such as the gene name associated with each probe set.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Does Affymetrix probe sets information library file fall under the category of Obsolete concept (EDAM)? | What higher-level classifications include Affymetrix probe sets information library file? | Which concepts are subclasses of Obsolete concept (EDAM), including Affymetrix probe sets information library file? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Data security\nDescription: Data security is defined as a subclass of Data management, focusing specifically on the protection of data assets. According to its current description, it addresses the safeguarding of data—including sensitive information such as patient health data—against unauthorized access, use, disclosure, disruption, modification, or destruction. This class thus captures all concepts and measures related to maintaining the confidentiality, integrity, and availability of data within broader data management practices.\nAxiom: {'subClassOf': ['Data management']}\nGenerated CQs:", "output": "Which concepts are defined as narrower than Data management, including Data security? | Is Data security categorized as a type of Data management? | What broader classifications does Data security fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ARACNE algorithm\nDescription: ARACNE algorithm is defined as a subclass of algorithm. As an algorithm, it inherits the general properties and characteristics associated with computational procedures or problem-solving methods. No further axioms or distinguishing features are specified, so the class represents the set of algorithms known as ARACNE, without additional constraints or relations.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "Is the ARACNE algorithm encompassed under the general class of algorithms? | Which algorithms includes ARACNE algorithm as a specialized subclass? | What broader categories in the ontology does ARACNE algorithm fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence composition table\nDescription: Sequence composition table is defined as a subclass of Obsolete concept (EDAM). It represents a table that summarizes the composition or frequency of characters or words in a molecular sequence. This class is considered obsolete within the EDAM ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which concepts are defined as subclasses of Obsolete concept (EDAM), including Sequence composition table? | What broader categories encompass Sequence composition table in the ontology? | Is Sequence composition table categorized under Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Data retrieval (database cross-reference)\nDescription: Data retrieval (database cross-reference) is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer in active use within the ontology. It refers to the action of searching a database to retrieve all relevant references to a particular entity or entry. This class has been deprecated and should be replaced with more current practices or concepts in data retrieval and database referencing.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What more general types does Data retrieval (database cross-reference) belong to within the ontology? | Is Data retrieval (database cross-reference) categorized as a kind of Obsolete concept (EDAM)? | Which concepts are classified as subclasses of Obsolete concept (EDAM), including Data retrieval (database cross-reference)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein structural motif\nDescription: Protein structural motif is a subclass of Protein structure, representing a 3D coordinate and associated data for a protein (3D) structural motif. It refers to any group of contiguous or non-contiguous amino acid residues, typically forming a feature with a structural or functional role within the protein. This class captures structural motifs that are defined by their spatial configuration and functional or structural significance within protein architecture.\nAxiom: {'subClassOf': ['Protein structure']}\nGenerated CQs:", "output": "Which types fall under the category of Protein structure, such as Protein structural motif? | Is every Protein structural motif included within the collection of Protein structures? | What broader classifications does Protein structural motif belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ChEBI concept ID\nDescription: ChEBI concept ID is defined as a subclass of Ontology concept ID. It represents an identifier assigned to a concept within the ChEBI ontology, used for uniquely referencing entities in the ChEBI (Chemical Entities of Biological Interest) ontology.\nAxiom: {'subClassOf': ['Ontology concept ID']}\nGenerated CQs:", "output": "Is every ChEBI concept ID necessarily included in an ontology concept ID category? | Which ontology concepts are superclasses of ChEBI concept IDs? | What specific ChEBI concept IDs are categorized under a given ontology concept ID? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Structural data\nDescription: Structural data is a subclass of Obsolete concept (EDAM), serving as a broad data type intended as a placeholder for more specific data types. It encompasses data related to molecular structural information, although its classification as an obsolete concept indicates it has been superseded by more precise categories within the domain.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which more specific concepts are encompassed by Obsolete concept (EDAM), such as Structural data? | Is Structural data classified under the Obsolete concept (EDAM) category? | What broader ontological groups include Structural data within the EDAM schema? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: gct\nDescription: gct is defined as a subclass of tab delimited file format. This means that every gct instance is a specific type of tab delimited file format, inheriting all characteristics of tab-delimited file formats while possibly adding further constraints or conventions unique to gct.\nAxiom: {'subClassOf': ['tab delimited file format']}\nGenerated CQs:", "output": "What broader file format categories encompass gct? | Is gct categorized under tab delimited file format? | Which file formats are classified as specializations of tab delimited file format, such as gct? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: 't-test'\nDescription: t-test is defined as a subclass of algorithm, indicating that it is a type of statistical procedure within the broader category of algorithms. This class represents methods used to determine if there is a significant difference between the means of two groups, commonly used in statistical hypothesis testing.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "Is 't-test' categorized as a specific type of algorithm? | What overarching classes include 't-test' as a member? | Which types fall under the broader class of algorithm, such as 't-test'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence cluster ID (UniRef)\nDescription: Sequence cluster ID (UniRef) is a subclass of Sequence cluster ID and is defined as the unique identifier of an entry from the UniRef database. This identifier is used to reference specific sequence clusters within the UniRef resource, ensuring precise and standardized access to cluster information.\nAxiom: {'subClassOf': ['Sequence cluster ID']}\nGenerated CQs:", "output": "Which identifiers are more specific types of Sequence cluster ID, such as Sequence cluster ID (UniRef)? | What broader identifier categories does Sequence cluster ID (UniRef) fall under? | Is Sequence cluster ID (UniRef) classified under the general category of Sequence cluster ID? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CGD gene report format\nDescription: CGD gene report format is an entry format associated with the Candida Genome Database, specifically designed for representing gene-related information. It is defined as a subclass of \"Obsolete concept (EDAM)\", indicating that this format is no longer in active use or has been replaced.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is CGD gene report format classified under the broader category of Obsolete concept (EDAM)? | Which general types encompass CGD gene report format according to the ontology? | What specific formats are categorized as subclasses of Obsolete concept (EDAM), including CGD gene report format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein sequence properties plot\nDescription: Protein sequence properties plot is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer recommended for use within the ontology. It represents a plot illustrating the general physicochemical properties of a protein sequence, such as hydrophobicity, charge, or molecular weight distribution. This class is retained for historical reference and should not be used for new annotations.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What concepts are specified as subclasses of Obsolete concept (EDAM), such as Protein sequence properties plot? | Is Protein sequence properties plot classified under the category of Obsolete concept (EDAM)? | Which broader conceptual group contains Protein sequence properties plot within the EDAM ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Drug structure\nDescription: Drug structure is defined as a subclass of Small molecule structure, representing the 3D coordinates and associated data describing the three-dimensional structure of a drug. This class specifically captures structural information essential for understanding the spatial and chemical configuration of drug molecules.\nAxiom: {'subClassOf': ['Small molecule structure']}\nGenerated CQs:", "output": "What higher-level structural categories encompass Drug structure? | Which structures are recognized as subtypes of Small molecule structure, including Drug structure? | Is Drug structure classified under the broader category of Small molecule structure? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NMTRAN\nDescription: NMTRAN is defined as a subclass of programming language, representing a specific type of language used for instructing computers. This classification indicates that NMTRAN shares all fundamental properties of programming languages, but possesses additional characteristics that distinguish it within this broader category.\nAxiom: {'subClassOf': ['programming language']}\nGenerated CQs:", "output": "Is NMTRAN recognized as a kind of programming language? | Which programming languages encompass specializations such as NMTRAN? | What higher-level classifications does NMTRAN fall under within programming languages? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein residue 3D cluster\nDescription: Protein residue 3D cluster is defined as a subclass of Protein residue interactions, representing groups of contacting residues within protein structures. These clusters highlight key structural residue networks, capturing the spatial and interactive organization of amino acids that contribute to the protein’s architecture and function.\nAxiom: {'subClassOf': ['Protein residue interactions']}\nGenerated CQs:", "output": "Is Protein residue 3D cluster classified as a kind of Protein residue interactions? | Which subclasses are encompassed within Protein residue interactions, including Protein residue 3D cluster? | What broader classes does Protein residue 3D cluster fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Position weight matrix (PWM )\nDescription: Position weight matrix (PWM) is defined as a subclass of algorithm. PWMs are computational tools used in bioinformatics to represent motifs, such as transcription factor binding sites, by quantifying the preference for each nucleotide at every position in a sequence. As an algorithm, PWM systematically assigns weights based on observed frequencies, enabling efficient motif detection in genomic sequences.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "Is Position weight matrix (PWM) categorized as a type of algorithm? | What are the parent categories for Position weight matrix (PWM) in the classification hierarchy? | Which algorithm subclasses include Position weight matrix (PWM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: 'MI'\nDescription: MI is defined as a subclass of algorithm, indicating that every instance of MI is also recognized as an algorithm. No additional constraints or distinguishing characteristics are specified beyond its classification as an algorithm.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "What are the more general categories that MI is a part of? | Which algorithms have subclasses that include MI? | Is MI categorized as a specific type of algorithm? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Chi-square\nDescription: Chi-square is defined as a subclass of algorithm, indicating that it is a specific type of algorithm. No further disjointness or property restrictions are specified, so any individual of this class is understood solely as an algorithm, with no additional constraints or differentiating features provided in the current axiom.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "Is Chi-square an instance of the broader category algorithm? | Which classes are classified under algorithm and include Chi-square? | What are the direct superclasses of Chi-square within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DNA-Seq\nDescription: DNA-Seq is defined as a subclass of the Obsolete concept (EDAM) class. It refers to high-throughput sequencing techniques applied to randomly fragmented genomic DNA. This approach is commonly used in whole-genome sequencing and resequencing, as well as in studies involving SNP discovery and the identification of copy number variations and chromosomal rearrangements. The class is marked obsolete in the EDAM ontology, indicating it is deprecated for current use.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What broader classifications encompass DNA-Seq within the ontology? | Does DNA-Seq fall under the category of Obsolete concept (EDAM)? | Which concepts are categorized as more specific types of Obsolete concept (EDAM), including DNA-Seq? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene features (coding region) format\nDescription: Gene features (coding region) format is a subclass of Gene annotation format, specifically designated for representing reports on coding regions within nucleotide sequences. This class formalizes formats that are used to annotate and convey information about regions of genetic sequences that code for proteins, emphasizing their role in gene annotation workflows.\nAxiom: {'subClassOf': ['Gene annotation format']}\nGenerated CQs:", "output": "Which annotation formats classify as specializations of Gene annotation format, such as Gene features (coding region) format? | To what higher-level annotation formats does Gene features (coding region) format belong? | Is Gene annotation format a more general category than Gene features (coding region) format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Locus ID (Tropgene)\nDescription: Locus ID (Tropgene) is a subclass of Locus ID and serves as an identifier specifically assigned to a locus within the Tropgene database. This class represents locus identifiers that are uniquely sourced from Tropgene, thereby distinguishing them from locus IDs in other repositories.\nAxiom: {'subClassOf': ['Locus ID']}\nGenerated CQs:", "output": "What specific identifiers are recognized under the broader class of Locus ID, such as Locus ID (Tropgene)? | Is Locus ID (Tropgene) classified as a type of Locus ID? | Which higher-level identifier categories include Locus ID (Tropgene) as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Molecular medicine\nDescription: Molecular medicine is defined as a subclass of translational medicine, focusing on the identification of molecular and genetic causes of diseases. It encompasses research and interventions aimed at correcting molecular-level abnormalities that lead to disease, thereby bridging fundamental molecular discoveries with clinical applications and patient care.\nAxiom: {'subClassOf': ['Translational medicine']}\nGenerated CQs:", "output": "Is Translational medicine a broader category that includes Molecular medicine as a type? | Which specific subtypes within Translational medicine encompass Molecular medicine? | What higher-level categories does Molecular medicine fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Preclinical and clinical studies\nDescription: Preclinical and clinical studies is a subclass of Medicine research and development. This class includes activities focused on testing new medicines, vaccines, or medical procedures first on animals (preclinical studies) and then on humans (clinical studies), all conducted prior to regulatory approval. The formalization aligns with the definition, emphasizing the sequential and comprehensive process integral to medical research and development.\nAxiom: {'subClassOf': ['Medicine research or development']}\nGenerated CQs:", "output": "Are preclinical and clinical studies classified under the broader category of medicine research and development? | Which research and development activities are more specific subdivisions of medicine research and development, such as preclinical and clinical studies? | What general domains of research and development encompass preclinical and clinical studies? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein dipole moment calculation\nDescription: Protein dipole moment calculation is a subclass of Protein property calculation (from sequence) and is characterized by producing at least one Protein dipole moment as output. This class represents computational methods or procedures used to determine whether a protein structure exhibits an unusually large net charge, specifically by calculating its dipole moment.\nAxiom: {'subClassOf': ['Protein property calculation (from sequence)'], 'propertyRestrictions': ['[has output only Protein dipole moment]']}\nGenerated CQs:", "output": "Does every instance of Protein dipole moment calculation necessarily produce at least one output of Protein dipole moment? | Is it required that the output of a Protein dipole moment calculation always includes a Protein dipole moment? | Can a Protein dipole moment calculation exist without yielding a Protein dipole moment as its output? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GeneR\nDescription: GeneR is defined as a subclass of software that is implemented in the R programming language. Members of this class are characterized by accepting multiple specified data input types: general data formatted as R data frames, gene lists with specific data format specifications, and data in FASTA format. These input constraints ensure that any instance of GeneR-typed software is capable of handling commonly used biological data formats, particularly those relevant for bioinformatics applications in R.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data input some (data and [has format specification some R data frame])]', '[is encoded in some R language]', '[has specified data input some (data and [has format specification some FASTA])]', '[has specified data input some (Gene list and [has format specification only data format specification])]']}\nGenerated CQs:", "output": "Does GeneR require at least one specified data input that is both a Gene list and has some data format specification? | Must all specified data inputs of GeneR meet the criteria of being Gene lists with an associated data format specification? | Can GeneR have a specified data input that is not a Gene list or lacks a data format specification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: maCorrPlot\nDescription: maCorrPlot is a subclass of software designed for use in data visualization, background correction, and data normalization workflows. It requires data inputs specifically in mas5 or .rma formats, and its outputs include at least one Graph plot. maCorrPlot is implemented in the R language, and the authoritative source for this software is Bioconductor. This class formalizes the functional characteristics and technical restrictions of maCorrPlot, ensuring its application in specialized bioinformatic data analysis pipelines.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data output some Graph plot]', '[has specified data input some [has format specification only (mas5 format or .rma format)]]', '[is published by hasValue Bioconductor]', '[is executed in some (data visualization and background correction and data normalization)]', '[is encoded in only R language]']}\nGenerated CQs:", "output": "Is it required for every instance of maCorrPlot to be encoded in at least one R language? | Does maCorrPlot necessarily involve an encoding implemented using R language? | Can a maCorrPlot exist without being associated with the R language for its encoding? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CRG Expresso Web Tool\nDescription: CRG Expresso Web Tool is defined as a subclass of TCoffee, with several specific characteristics. Individuals of this class are required to have documentation identified as ns6:gkl092 and provide at least one web user interface. They must utilize some version of the CRG TCoffee 9.02.r1228 software. Additionally, their outputs must result from a software publishing process in which the Centre for Genomic Regulation (CRG) of Barcelona is a participant. This class models web-based tools for TCoffee developed and documented by CRG, with online accessibility and provenance traceable to the institution.\nAxiom: {'subClassOf': ['TCoffee'], 'propertyRestrictions': ['[has documentation hasValue ns6:gkl092]', '[has interface some web user interface]', '[uses software some CRG TCoffee 9.02.r1228]', '[output of only (software publishing process or [has participant hasValue Centre for Genomic Regulation (CRG) of Barcelona])]']}\nGenerated CQs:", "output": "Does the CRG Expresso Web Tool require its output to result from at least one software publishing process involving the Centre for Genomic Regulation (CRG) of Barcelona as a participant? | Is it necessary that any output produced by the CRG Expresso Web Tool is associated with a software publishing process in which the Centre for Genomic Regulation (CRG) of Barcelona participates? | Can the output of the CRG Expresso Web Tool ever originate from a process that is not a software publishing process involving the Centre for Genomic Regulation (CRG) of Barcelona? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: BioPAX\nDescription: BioPAX is defined as a subclass of biological pathway or network format, meaning it is a specific type of data format for representing biological pathways or networks. According to its current definition, BioPAX is intended for the exchange of pathway data, and its data model is defined using OWL (Web Ontology Language), ensuring structured and semantically rich data representation. This places BioPAX within the context of standardized formats facilitating pathway data sharing and interoperability in the life sciences.\nAxiom: {'subClassOf': ['Biological pathway and network format']}\nGenerated CQs:", "output": "Is BioPAX classified under the general category of Biological pathway or network format? | Which specific formats fall under the category of Biological pathway or network format, such as BioPAX? | What broader categories is BioPAX directly associated with in terms of data formats for biological pathways or networks? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: qpgraph\nDescription: qpgraph is a subclass of software that is specifically designed for use in descriptive statistical calculations, particularly those involving gene expression data as input. It outputs graph plots, with data formats specified as R data frames. qpgraph implements Pearson correlation estimators and AvgNRRs, and is encoded in the R programming language. This software is published by Bioconductor, ensuring its integration within the bioinformatics community.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is executed in some descriptive statistical calculation]', '[has specified data input some Gene expression data]', '[implements some (Pearson correlation estimator and AvgNRRs)]', '[is encoded in some R language]', '[is published by hasValue Bioconductor]', '[has specified data output only (Graph plot and [has format specification some R data frame])]']}\nGenerated CQs:", "output": "Is it necessary for a qpgraph to have at least one specified data output that is both a Graph plot and has format specification restricted to R data frame? | Does every specified data output related to a qpgraph in this context always correspond to a Graph plot whose format specification is only an R data frame? | Can a qpgraph possess a specified data output that is not a Graph plot or whose format specification is not exclusively an R data frame? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AtlasImage\nDescription: AtlasImage is defined as a subclass of software, specifically distinguished by being the output of at least one software publishing process in which Clontech Laboratories, Inc is a participant. This ensures that any instance of AtlasImage is software generated or published through such a process involving Clontech Laboratories, Inc.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[output of only (software publishing process or [has participant hasValue Clontech Laboratories, Inc])]']}\nGenerated CQs:", "output": "Is every AtlasImage necessarily the output of a software publishing process involving Clontech Laboratories, Inc. as a participant? | Can an AtlasImage be produced without the involvement of Clontech Laboratories, Inc. in the software publishing process? | Are AtlasImages limited to being outputs only from software publishing processes that have Clontech Laboratories, Inc. as a participant? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: affypdnn\nDescription: affypdnn is defined as a subclass of software, with several specific characteristics. It operates on input that must be a text data set in the format of an R data frame, and it is encoded in the R programming language. The software produces output in the form of graph plots. Additionally, it is explicitly published by Bioconductor. These axioms collectively specify affypdnn as R-based software for producing graphical representations from structured text data sets, distributed via Bioconductor.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is encoded in some R language]', '[has specified data output some Graph plot]', '[is published by hasValue Bioconductor]', '[has specified data input some (Text data set or [has format specification some R data frame])]']}\nGenerated CQs:", "output": "Does affypdnn require at least one specified data input that is both a Text data set and has a format specification of R data frame? | Is it necessary for affypdnn to accept as specified data input only those datasets that are text-based and formatted as R data frames? | Can affypdnn have a specified data input unless it meets the criteria of being a Text data set with a format specification of R data frame? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: rsbml\nDescription: rsbml is defined as a subclass of software, specifically characterized by several axioms. It must be executed through at least one of the following processes: parse or cross validation. The software is encoded in the R programming language and is published by Bioconductor. Regarding data interaction, rsbml takes as input data that is strictly formatted according to the SBML specification and produces output data formatted exclusively according to the XML specification. These axioms collectively ensure that any instance of rsbml adheres to these strict requirements concerning its function, implementation language, publisher, and I/O data format.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is executed in some (parse and cross validation)]', '[is published by hasValue Bioconductor]', '[has specified data input some [has format specification only SBML]]', '[has specified data output some [has format specification only XML]]', '[is encoded in only R language]']}\nGenerated CQs:", "output": "Is it required that every rsbml property restriction be encoded in at least one R language? | Can an rsbml property restriction exist without being encoded in any R language? | Does the ontology allow for multiple R languages to encode a single rsbml property restriction? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Data retrieval\nDescription: Data retrieval is defined as a subclass of Query and retrieval, specifically focusing on retrieving an entry or part of an entry from a data resource that matches a supplied query. Every instance of Data retrieval requires an input that is an Identifier, such as an accession number or an indexed term. This process may involve obtaining primary data and annotations associated with the query. The class formalizes retrieval activities where a unique identifier or an indexed keyword is used to locate and access relevant data entries within a resource.\nAxiom: {'subClassOf': ['Query and retrieval'], 'propertyRestrictions': ['[has input only Identifier]']}\nGenerated CQs:", "output": "Is it required that a Data retrieval instance has at least one 'has input' relationship to an Identifier? | Can a Data retrieval process exist without being associated with any Identifier through the 'has input' property? | Does Data retrieval necessarily involve input that is classified as an Identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylogenetic tree generation (from gene frequencies)\nDescription: Phylogenetic tree generation (from gene frequencies) is a subclass of Phylogenetic tree generation (data centric), specifically focusing on constructing phylogenetic trees using gene frequency data as input. This class is characterized by its association with the topic of gene expression and requires phylogenetic gene frequencies data as input. The formal definition emphasizes that the process involves phylogenetic tree construction derived from gene frequency data.\nAxiom: {'subClassOf': ['Phylogenetic tree generation (data centric)'], 'propertyRestrictions': ['[has topic some Gene expression]', '[has input only Phylogenetic gene frequencies data]']}\nGenerated CQs:", "output": "Does phylogenetic tree generation necessarily require at least one input of phylogenetic gene frequencies data? | Is it possible to perform phylogenetic tree generation without providing any phylogenetic gene frequencies data as input? | Must all instances of phylogenetic tree generation use some phylogenetic gene frequencies data as input? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Dotplot plotting\nDescription: Dotplot plotting is a subclass of Plotting, Sequence word comparison, and Sequence alignment visualisation, indicating its role in both visual representation and comparative analysis of biological sequences. Any Dotplot plotting process is characterized by producing some Dotplot as output. It specifically involves drawing a dotplot to visualize sequence similarities, which are identified through word-matching or character comparison techniques. This class formalizes visualization methods for interpreting sequence alignments using dotplots.\nAxiom: {'subClassOf': ['Plotting', 'Sequence word comparison', 'Sequence alignment visualisation'], 'propertyRestrictions': ['[has output only Dotplot]']}\nGenerated CQs:", "output": "Is it required that every Dotplot plotting entity produces at least one output of type Dotplot? | Can a plotting process classified as Dotplot plotting have an output other than Dotplot? | Does the Dotplot plotting process necessarily generate a Dotplot as an output? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence signature recognition\nDescription: Sequence signature recognition is a subclass of Sequence feature detection concerned with identifying (scanning for) known motifs, patterns, and regular expressions in molecular sequence(s). It is characterized by generating outputs that include Sequence signature matches and is associated with topics such as Sequence sites, features, and motifs. This class formally captures analyses that detect established sequence elements within biological sequences.\nAxiom: {'subClassOf': ['Sequence feature detection'], 'propertyRestrictions': ['[has output some Sequence signature matches]', '[has topic some Sequence sites, features or motifs]']}\nGenerated CQs:", "output": "Does a sequence signature recognition necessarily involve at least one topic concerning sequence sites, features, or motifs? | Is it required for a sequence signature recognition to be associated with sequence sites, features, or motifs by the 'has topic' property? | Can a sequence signature recognition exist without having 'has topic' linking it to sequence sites, features, or motifs? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein family report\nDescription: Protein family report is defined as a subclass of Protein report, focusing specifically on content whose topic concerns one or more protein families. It is formally characterized by the requirement that it pertains to, or discusses, some protein families. According to its current definition, it provides informative content on a specific protein family or related classification, encompassing groups of protein sequences or structures.\nAxiom: {'subClassOf': ['Protein report'], 'propertyRestrictions': ['[has topic only Protein families]']}\nGenerated CQs:", "output": "Is it required that a protein family report has at least one topic related to protein families? | Does every protein family report necessarily cover a topic concerning protein families? | Can a protein family report exist without having a topic associated with any protein family? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: BAI\nDescription: BAI is defined as a subclass of Data index format, specifically described as the BAM indexing format. It is characterized by the property that every BAI instance is a format for at least one Data index. This axiomatization ensures that BAI represents formats used for indexing BAM data, supporting efficient data retrieval and access.\nAxiom: {'subClassOf': ['Data index format'], 'propertyRestrictions': ['[is format of only Data index]']}\nGenerated CQs:", "output": "Is it required that every BAI is the format of at least one Data index? | Can a BAI exist without being the format of any Data index? | Does the definition of BAI permit it to be the format for multiple Data indices? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein sequence alignment analysis\nDescription: Protein sequence alignment analysis is a subclass of Protein analysis, Prediction and recognition (protein), and Sequence alignment analysis. It is characterized by requiring at least one input of type Sequence alignment (protein). This class encompasses analyses performed on protein sequence alignments, typically to detect features or make predictions about the aligned sequences. The formal definition ensures that instances of this class specifically involve input data consisting of protein sequence alignments within the broader context of protein and sequence analysis.\nAxiom: {'subClassOf': ['Protein analysis', 'Sequence alignment analysis', 'Prediction or recognition (protein)'], 'propertyRestrictions': ['[has input some Sequence alignment (protein)]']}\nGenerated CQs:", "output": "Is Protein sequence alignment analysis a specialized form of Prediction and recognition (protein)? | Which analysis types are classified under Prediction and recognition (protein), including Protein sequence alignment analysis? | What higher-level categories encompass Protein sequence alignment analysis? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence Alignment and Modeling System\nDescription: Sequence Alignment and Modeling System is a subclass of software, characterized by its role in the context of multiple sequence alignment. Any instance of this class must be executed within at least one multiple sequence alignment process, reflecting its functional application in computational biology for aligning and modeling biological sequences.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is executed in some multiple sequence alignment]']}\nGenerated CQs:", "output": "Is Sequence Alignment and Modeling System classified as a type of software? | What are the specialized systems categorized under software, such as Sequence Alignment and Modeling System? | Which broader classes include Sequence Alignment and Modeling System? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein-protein interaction prediction\nDescription: Protein-protein interaction prediction is defined as a subclass of protein interaction prediction, focused specifically on the identification or prediction of interactions between proteins, including interfaces and binding sites. Members of this class are characterized by having outputs that are protein interaction reports and are concerned with topics relating to protein interactions. This ensures that any instance of this class is involved in generating reports about protein interactions and is centered on protein interaction phenomena.\nAxiom: {'subClassOf': ['Protein interaction prediction'], 'propertyRestrictions': ['[has output some Protein interaction report]', '[has topic only Protein interactions]']}\nGenerated CQs:", "output": "Must every protein-protein interaction prediction have at least one topic related to protein interactions? | Is it possible for a protein-protein interaction prediction to lack any association with protein interactions as its topic? | Are all topics associated with protein-protein interaction prediction necessarily about protein interactions? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MPL\nDescription: MPL is defined as a subclass of software license, characterized by the requirement that any license in this class must include at least some clause ensuring that source code is available and at least some clause stipulating distribution must include notices. This formalization captures the core obligations commonly associated with the Mozilla Public License: making source code accessible and ensuring proper attribution upon distribution.\nAxiom: {'subClassOf': ['software license'], 'propertyRestrictions': ['[has clause some Source code available]', '[has clause only Distribution with notices]']}\nGenerated CQs:", "output": "Must every MPL include at least one clause associated with a Distribution notice? | Is it required for an MPL to possess a 'has clause' relationship with some Distribution that includes notices? | Does the presence of any clause in an MPL always correspond to Distribution with notices? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Structural (3D) profile ID\nDescription: Structural (3D) profile ID is a subclass of both Identifier (typed) and Accession, representing identifiers or names specifically assigned to structural (3D) profiles or templates. Members of this class serve as identifiers for some Structural profile, such as those representing structures or structure alignments, ensuring unambiguous referencing within structural data repositories.\nAxiom: {'subClassOf': ['Identifier (typed)', 'Accession'], 'propertyRestrictions': ['[is identifier of only Structural profile]']}\nGenerated CQs:", "output": "Is every Structural (3D) profile ID necessarily associated only with a Structural profile through the 'is identifier of' property? | Must a Structural (3D) profile ID serve as an identifier for at least one Structural profile? | Can a Structural (3D) profile ID exist without being linked to any Structural profile via the 'is identifier of' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cysteine bridge detection\nDescription: Cysteine bridge detection is defined as a subclass of protein cysteine and disulfide bond assignment. This class focuses on the identification of cysteine bridges, specifically by detecting disulfide bonds formed between cysteine residues within a protein structure using coordinate data. Individuals of this class perform or represent methods for recognizing these covalent linkages, which are important for protein stability and function.\nAxiom: {'subClassOf': ['Protein cysteine or disulfide bond assignment']}\nGenerated CQs:", "output": "Does cysteine bridge detection fall under the broader category of protein cysteine and disulfide bond assignment? | Which processes are recognized as specialized forms of protein cysteine and disulfide bond assignment, such as cysteine bridge detection? | To which overarching categories is cysteine bridge detection formally related in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Secondary structure comparison\nDescription: Secondary structure comparison is a subclass of Comparison, specifically focused on evaluating or comparing molecular secondary structures. It is defined by the property restriction that its topic involves some form of structure comparison. Members of this class are concerned with the comparative analysis of two or more molecular secondary structures, as indicated by its definition.\nAxiom: {'subClassOf': ['Comparison'], 'propertyRestrictions': ['[has topic only Structure comparison]']}\nGenerated CQs:", "output": "Must every instance of the secondary structure comparison propertyRestrictions involve the topic of structure comparison? | Is it necessary for secondary structure comparison propertyRestrictions to relate to at least one structure comparison topic? | Can a secondary structure comparison propertyRestriction exist without referencing the structure comparison topic? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence trace format\nDescription: Sequence trace format is a subclass of Sequence record format that serves specifically as a format for sequence trace data, including information such as base calls. According to its axioms, every Sequence trace format is associated with at least one Sequence trace, meaning it is designed to represent or encode the data generated during DNA sequencing processes. This class formalizes the relationship between sequence trace data and the file formats used to store such data.\nAxiom: {'subClassOf': ['Sequence record format'], 'propertyRestrictions': ['[is format of only Sequence trace]']}\nGenerated CQs:", "output": "Is every instance described by the sequence trace format propertyRestrictions required to be the format of at least one Sequence trace? | Can a sequence trace format propertyRestriction exist without being associated as the format of a Sequence trace? | Does the ontology permit a sequence trace format propertyRestriction that is not related to any Sequence trace through the 'is format of' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein residue surface calculation\nDescription: Protein residue surface calculation is a subclass of Protein surface and interior calculation. This class refers to the process of calculating the solvent accessibility for each residue within a protein structure, determining how much of each residue's surface is exposed to the surrounding solvent.\nAxiom: {'subClassOf': ['Protein surface or interior calculation']}\nGenerated CQs:", "output": "Is Protein surface and interior calculation a broader classification encompassing Protein residue surface calculation? | Which calculation methods are classified under Protein surface and interior calculation, specifically including Protein residue surface calculation? | To which higher-level calculation categories does Protein residue surface calculation pertain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LBE\nDescription: LBE is defined as a subclass of software specifically designed for execution within differential expression analysis workflows. LBE must be encoded in some R language and is required to implement the FDR (False Discovery Rate) method. It accepts as input gene expression datasets, which must conform to a specified data format. The outputs of LBE include (1) graphical plots, which are constrained to possess image format specifications, and (2) data outputs provided as R data frames. This class formalization highlights LBE's role as a specialized analytical software tool in genomics, with rigorous specifications for input formats, output formats, and methodological implementation.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is encoded in some R language]', '[has specified data output some (Graph plot and [has format specification some image format])]', \"[implements some 'FDR']\", '[has specified data output some (data and [has format specification some R data frame])]', '[has specified data input some (Gene expression dataset and [has format specification some data format specification])]', '[is executed in only differential expression analysis]']}\nGenerated CQs:", "output": "Is it required for LBE to be executed in at least one differential expression analysis? | Can any instance of LBE exist without being executed in some differential expression analysis? | Does the ontology allow for LBE usage only when it is associated with a differential expression analysis? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence redundancy removal\nDescription: Sequence redundancy removal is defined as a subclass of Sequence comparison. This class includes processes that take two or more molecular sequences as input, compare them, and identify and remove redundant sequences based on specific criteria. According to its axioms, any instance of Sequence redundancy removal must have at least one output that is a Sequence.\nAxiom: {'subClassOf': ['Sequence comparison'], 'propertyRestrictions': ['[has output only Sequence]']}\nGenerated CQs:", "output": "Is every output generated by the sequence redundancy removal process required to be a Sequence? | Can there exist a sequence redundancy removal result that is not categorized as a Sequence in the ontology? | Does the sequence redundancy removal process necessarily produce at least one output that qualifies as a Sequence? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Free cysteine detection\nDescription: Free cysteine detection is a subclass of Protein cysteine and disulfide bond assignment, concerned with identifying cysteine residues in a protein structure that are not engaged in disulfide bonds (cysteine bridges) and do not serve as ligands to metals. This class ensures the detection and annotation of cysteine residues that are chemically free within protein structures.\nAxiom: {'subClassOf': ['Protein cysteine or disulfide bond assignment']}\nGenerated CQs:", "output": "Is Free cysteine detection classified under Protein cysteine and disulfide bond assignment? | What are the more specific processes that fall under Protein cysteine and disulfide bond assignment, such as Free cysteine detection? | Which broader categories encompass Free cysteine detection? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Map\nDescription: Map is defined as a subclass of data, with the restriction that it must be associated with at least one instance of Mapping via the has topic property. It is described as a map of (typically one) DNA sequence annotated with positional or non-positional features, indicating that instances of this class function as representations of sequence data linked to mapping information.\nAxiom: {'subClassOf': ['data'], 'propertyRestrictions': ['[has topic only Mapping]']}\nGenerated CQs:", "output": "Is it required that every Map has at least one topic associated via the has topic property that is an instance of Mapping? | Can a Map exist that does not have the has topic property relating it to any Mapping? | Does the presence of a Mapping as a value for the has topic property qualify an entity as a Map? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence feature detection\nDescription: Sequence feature detection is a subclass of the obsolete concept in EDAM, as well as sequence analysis and prediction and recognition. It specifically concerns the detection of positional sequence features, such as functional and other key sites, within molecular sequences. Formally, this class includes topics related to sequence sites, features, and motifs (via the 'has topic' property), and is characterized by producing sequence features as output (via the 'has output' property). This ensures the class encompasses analysis methods that predict or recognize annotated features within sequences.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)', 'Sequence analysis', 'Prediction or recognition'], 'propertyRestrictions': ['[has topic some Sequence sites, features and motifs]', '[has output some Sequence features]']}\nGenerated CQs:", "output": "Does Sequence feature detection fall under the broader category of Prediction and recognition? | What are all the more specific types classified under Prediction and recognition, including Sequence feature detection? | Which higher-level categories does Sequence feature detection pertain to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MUSCLE 3.8.31\nDescription: MUSCLE 3.8.31 is a subclass of Drive5 MUSCLE and represents a specific release of the MUSCLE software (version 3.8.31). Instances of this class are characterized by having a defined download location (ns5:downloads.htm), access to at least one command-line interface, and are associated with documentation resources (ns5:muscle_userguide3.8.html and ns6:gkh340). This formalization ensures that any individual classified as MUSCLE 3.8.31 is identifiable by these version-specific properties and documentation links.\nAxiom: {'subClassOf': ['Drive5 MUSCLE'], 'propertyRestrictions': ['[has download location hasValue ns5:downloads.htm]', '[has documentation hasValue ns5:muscle_userguide3.8.html]', '[has version hasValue MUSCLE version 3.8.31]', '[has documentation hasValue ns6:gkh340]', '[has interface only command-line interface]']}\nGenerated CQs:", "output": "Is it required that MUSCLE 3.8.31 has an interface with at least one command-line interface? | Can MUSCLE 3.8.31 possess any interface that is not a command-line interface? | Does MUSCLE 3.8.31 necessarily support a command-line interface among its interfaces? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GenomeGraphs\nDescription: GenomeGraphs is defined as a subclass of software, specifically designed to handle gene expression datasets with explicit format specifications. It requires specified data inputs that must include a gene expression dataset accompanied by a data format specification. The software is encoded in the R programming language. Its data output consists of graph plots with format specifications that conform to an image format. These axioms formalize GenomeGraphs as an R-based software tool aimed at generating graphical representations of gene expression data, ensuring both input and output data comply with defined formats.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data input some (Gene expression dataset and [has format specification some data format specification])]', '[has specified data output some (Graph plot and [has format specification some image format])]', '[is encoded in only R language]']}\nGenerated CQs:", "output": "Is it required that every GenomeGraph is encoded in at least one instance of R language? | Can a GenomeGraph exist without being encoded in any R language? | Does the encoding of a GenomeGraph necessarily involve an R language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylogenetic tree reconstruction\nDescription: Phylogenetic tree reconstruction is a subclass of phylogenetic tree generation and is specifically concerned with topics pertaining to phylogeny. It involves reconstructing the inner node labels of a phylogenetic tree based on information from its leaves, distinguishing this process from merely analyzing an existing tree or constructing an entirely new tree. This class encapsulates methods and concepts relative to inferring ancestral relationships and internal features from observed leaf data in evolutionary trees.\nAxiom: {'subClassOf': ['Phylogenetic tree generation'], 'propertyRestrictions': ['[has topic only Phylogeny]']}\nGenerated CQs:", "output": "Is it required that phylogenetic tree reconstruction addresses at least one topic related to phylogeny? | Can a phylogenetic tree reconstruction process have the 'has topic' property only if the topic is phylogeny? | Must every instance of phylogenetic tree reconstruction involve a topic that is classified as phylogeny? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Pathway or network identifier\nDescription: Pathway or network identifier is a subclass of Identifier (typed) and is characterized by the property that it serves as an identifier for some Pathway or network. This class represents identifiers assigned to entries within databases cataloging biological pathways or networks. Any instance of this class functions specifically to uniquely reference a pathway or network entity.\nAxiom: {'subClassOf': ['Identifier (typed)'], 'propertyRestrictions': ['[is identifier of some Pathway and network]']}\nGenerated CQs:", "output": "Does every instance of 'Pathway or network identifier' necessarily identify at least one 'Pathway or network'? | Can a 'Pathway or network identifier' exist without being associated with any 'Pathway or network'? | Is it mandatory for an entity to be classified as a 'Pathway or network identifier' only when it is the identifier for some 'Pathway or network'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Database search\nDescription: Database search is a subclass of Query and retrieval, constrained such that it produces at least some Database search results as output. This class represents processes where a supplied query is compared against each entry in a database or data resource, returning those entries—or parts thereof—that are similar to the query. Typically, this involves identifying high-scoring matches, as exemplified by tasks like a BLAST search of a sequence database.\nAxiom: {'subClassOf': ['Query and retrieval'], 'propertyRestrictions': ['[has output only Database search results]']}\nGenerated CQs:", "output": "Is it required that a database search yields at least one output of type Database search results? | Can a database search exist without producing any database search results as output? | Does the presence of output classified as database search results indicate that an activity qualifies as a database search? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Pathway or network processing\nDescription: Pathway or network processing is defined as a subclass of Operation (typed), encompassing activities that generate, analyze, or handle biological pathways or networks. Members of this class are characterized by the property restriction that they must have a topic involving molecular interactions, pathways, and networks. This ensures that all pathway or network processing operations are specifically concerned with the management or investigation of biological molecular interaction systems.\nAxiom: {'subClassOf': ['Operation (typed)'], 'propertyRestrictions': ['[has topic some Molecular interactions, pathways and networks]']}\nGenerated CQs:", "output": "Is Pathway or network processing classified as a type of Operation (typed)? | Which specific operations are encompassed by Operation (typed), such as Pathway or network processing? | What broader operational categories does Pathway or network processing fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Affymetrix-compliant data\nDescription: Affymetrix-compliant data is defined as a subclass of data, and is equivalent to data that has some format specification which itself is a data format specification published by Affymetrix. This means any instance of Affymetrix-compliant data must be associated with at least one data format specification that is officially published by Affymetrix, ensuring adherence to the standards set by the organization.\nAxiom: {'subClassOf': ['data'], 'equivalentClass': ['[has format specification only (data format specification and [is published by hasValue Affymetrix])]']}\nGenerated CQs:", "output": "Is Affymetrix-compliant data defined as data that has a format specification which is published by Affymetrix? | Does Affymetrix-compliant data require at least one format specification that is both a data format specification and has Affymetrix as its publisher? | Is being Affymetrix-compliant equivalent to having a format specification that is simultaneously a data format specification and published by Affymetrix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein disordered structure\nDescription: Protein disordered structure is defined as a subclass of Protein sites, features and motifs. It refers to regions within a protein that lack a fixed or ordered three-dimensional structure. This class captures concepts related to structural disorder in proteins, distinguishing such regions as important features within the broader context of protein sites, features, and motifs.\nAxiom: {'subClassOf': ['Protein sites, features or motifs']}\nGenerated CQs:", "output": "Is Protein disordered structure classified under the category of Protein sites, features and motifs? | Which specific types are encompassed by Protein sites, features and motifs, including Protein disordered structure? | What are the broader ontological categories to which Protein disordered structure belongs? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GeneData Expressionist Analyst v4.0.5\nDescription: GeneData Expressionist Analyst v4.0.5 is a subclass of software. It is specifically characterized as the output of a software publishing process in which Genedata participates. This definition ensures that any instance of this class is a software artifact resulting from such a process involving Genedata.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[output of only (software publishing process and [has participant hasValue Genedata])]']}\nGenerated CQs:", "output": "Is it required that the output of GeneData Expressionist Analyst v4.0.5 results from a software publishing process involving Genedata as a participant? | Does every output generated by GeneData Expressionist Analyst v4.0.5 have to originate from a software publishing process with Genedata as a participant? | Can an output of GeneData Expressionist Analyst v4.0.5 be produced without Genedata being a participant in the relevant software publishing process? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein property calculation\nDescription: Protein property calculation is defined as a subclass of Calculation, Protein analysis, and Prediction and recognition (protein), and is characterized by producing outputs related to Protein properties and being focused on topics concerning Protein properties. This class includes methods for rendering and visualizing properties of protein sequences, and is concerned with calculating or predicting physical or chemical properties of a protein, including any non-positional properties derived from processing the molecular sequence.\nAxiom: {'subClassOf': ['Calculation', 'Protein analysis', 'Prediction and recognition (protein)'], 'propertyRestrictions': ['[has output some Protein property]', '[has topic only Protein properties]']}\nGenerated CQs:", "output": "Is it required that protein property calculations always involve at least one topic related to protein properties? | Can a protein property calculation be associated with topics other than protein properties? | Does every protein property calculation explicitly reference at least one specific protein property through its topic? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Disease ID\nDescription: Disease ID is defined as a subclass of both Identifier (typed) and Accession. It serves specifically as an identifier for entries in disease databases and is constrained by the property that it must be an identifier of some Disease report. This formalization ensures that any Disease ID is associated uniquely with disease records.\nAxiom: {'subClassOf': ['Identifier (typed)', 'Accession'], 'propertyRestrictions': ['[is identifier of only Disease report]']}\nGenerated CQs:", "output": "Is every Disease ID required to serve as the identifier for at least one Disease report? | Can a Disease report exist without being associated with a Disease ID as its identifier? | Does a Disease ID function exclusively as an identifier for Disease reports? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LMGene\nDescription: LMGene is defined as a subclass of software, specifically characterized by its association with gene expression analysis. Every LMGene instance must be encoded in the R programming language and requires a specified data input that is both a gene expression dataset and accompanied by a data format specification. LMGene must execute data normalization and linear modeling procedures, and it implements linear modeling methods. The resulting data output is required to be a data object, specifically structured as an R data frame, and specified with an appropriate data format specification. This formalization captures the core purpose and constraints of LMGene as software dedicated to linear modeling of gene expression data in R.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data input some (Gene expression dataset and [has format specification some data format specification])]', '[is executed in some data normalization]', '[implements some Linear modelling]', '[is executed in some Linear modelling]', '[has specified data output some (data and [has format specification some R data frame])]', '[is encoded in only R language]']}\nGenerated CQs:", "output": "Is it required that an LMGene is encoded in at least one R language? | Can an LMGene exist without being encoded in any R language? | Does having an encoding in an R language satisfy the property restriction for LMGene? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GPCR coupling selectivity prediction\nDescription: GPCR coupling selectivity prediction is a class defined as a subclass of Protein interaction prediction, Protein property calculation (from sequence), and GPCR analysis. It is characterized by producing at least one Protein report as output. This class focuses on the prediction of G-protein coupled receptor (GPCR) coupling selectivity, identifying which types of G-proteins a GPCR preferentially interacts with, based on sequence-derived properties and protein interaction analysis.\nAxiom: {'subClassOf': ['Protein interaction prediction', 'Protein property calculation (from sequence)', 'GPCR analysis'], 'propertyRestrictions': ['[has output only Protein report]']}\nGenerated CQs:", "output": "Does every instance of GPCR coupling selectivity prediction necessarily produce at least one output that is a Protein report? | Is it required that GPCR coupling selectivity prediction has an output related to a Protein report? | Can a GPCR coupling selectivity prediction exist without producing a Protein report as output? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: metahdep\nDescription: metahdep is a subclass of software, characterized by several specific property restrictions. It implements at least one Bayesian Model and must be encoded in the R programming language. Additionally, metahdep is published exclusively by Bioconductor. In terms of data handling, it requires a gene expression dataset as input and produces graph plots as outputs, with these outputs specifically formatted as R data frames. This formalization ensures that any software classified as metahdep aligns with these ontological and technical specifications.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is encoded in some R language]', '[is published by hasValue Bioconductor]', '[has specified data output some (Graph plot and [has format specification only R data frame])]', '[has specified data input some Gene expression dataset]', '[implements only Bayesian Model]']}\nGenerated CQs:", "output": "Is every instance of metahdep required to implement at least one Bayesian Model? | Does metahdep necessarily have an implementation that is a Bayesian Model? | Can metahdep exist without implementing a Bayesian Model? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence alignment ID\nDescription: Sequence alignment ID is defined as a subclass of both Identifier (typed) and Accession, and is restricted such that it serves as an identifier for some Sequence alignment instance. It is used as the identifier of a molecular sequence alignment, for example a record from an alignment database. This formalization ensures that any instance of Sequence alignment ID uniquely identifies a sequence alignment, and maintains compatibility with identifier and accession structures in related ontologies.\nAxiom: {'subClassOf': ['Identifier (typed)', 'Accession'], 'propertyRestrictions': ['[is identifier of only Sequence alignment]']}\nGenerated CQs:", "output": "Is it required for an identifier to always refer to at least one sequence alignment? | Does every value of the sequence alignment ID property correspond to a sequence alignment instance? | Can a sequence alignment ID exist without being the identifier of any sequence alignment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: genomeIntervals\nDescription: genomeIntervals is defined as a subclass of software, specifically designed for execution in descriptive statistical calculations within genomics contexts. Instances of this class are published exclusively by Bioconductor, and are encoded in the R programming language. They accept input data strictly in GFF or R data frame formats, and produce output data solely as R data frames. This formalization ensures that any genomeIntervals resource adheres to Bioconductor's publication standards, operates within the R ecosystem, and supports defined data interoperability via precise input/output format restrictions.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is published by hasValue Bioconductor]', '[has specified data output some [has format specification only R data frame]]', '[is encoded in some R language]', '[has specified data input some [has format specification only (GFF and R data frame)]]', '[is executed in only descriptive statistical calculation]']}\nGenerated CQs:", "output": "Is it required that genome intervals participate in at least one descriptive statistical calculation? | Does every instance of genome intervals engage in a descriptive statistical calculation through the 'is executed in' property? | Can a genome interval exist without being executed in any descriptive statistical calculation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Quadruplex formation site detection\nDescription: Quadruplex formation site detection is a subclass of nucleic acid sequence feature detection, specifically focused on identifying regions within nucleotide sequences capable of forming quadruplex (4-stranded) structures. These quadruplexes, typically arising from guanine-rich regions, play important roles in biological processes and are potential therapeutic targets. The class is characterized by its association with nucleic acid structure prediction as a topic and the output of nucleic acid structure reports, ensuring that any instance of this class involves the detection and reporting of quadruplex-forming motifs.\nAxiom: {'subClassOf': ['Nucleic acid sequence feature detection'], 'propertyRestrictions': ['[has output some Nucleic acid structure report]', '[has topic only Nucleic acid structure prediction]']}\nGenerated CQs:", "output": "Is it required that a quadruplex formation site detection involves a topic related to nucleic acid structure prediction? | Can a quadruplex formation site detection be associated with topics outside of nucleic acid structure prediction? | Does every quadruplex formation site detection reference at least one nucleic acid structure prediction topic? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MIRIAM data type name\nDescription: MIRIAM data type name is a subclass of Data resource definition name, representing the name of a data type sourced from the MIRIAM database. Additionally, each instance serves as an identifier for some Database metadata. This ensures that every MIRIAM data type name uniquely references metadata within a database context, as per the definition from MIRIAM.\nAxiom: {'subClassOf': ['Data resource definition name'], 'propertyRestrictions': ['[is identifier of only Database metadata]']}\nGenerated CQs:", "output": "Does every MIRIAM data type name have the property 'is identifier of' with at least one Database metadata? | Is it necessary for a MIRIAM data type name to serve as an identifier for some Database metadata? | Can a MIRIAM data type name exist without being an identifier for any Database metadata? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DNDC\nDescription: DNDC is a subclass of software, specifically described as a Soil Chemistry Model. It is characterized by having both graphical user interface (GUI) and command-line interface (CLI) options for user interaction. The software is accessible online, with its homepage given as both ns15:dndc.html and http://www.dndc.sr.unh.edu/. DNDC requires as input data that conforms to a tab-delimited file format. The output of DNDC results from a software development process involving the University of New Hampshire as a participant. Furthermore, DNDC is used within the context of modelling.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has interface some graphical user interface]', '[has website homepage hasValue ns15:dndc.html]', '[has specified data input some (data and [has format specification some tab delimited file format])]', '[output of some (software development process and [has participant hasValue University of New Hampshire])]', '[is executed in some modelling]', '[has website homepage hasValue http://www.dndc.sr.unh.edu/]', '[has interface only command-line interface]']}\nGenerated CQs:", "output": "Is it required that every DNDC has at least one command-line interface? | Can a DNDC exist without being associated with any command-line interface? | Does the DNDC entity necessarily provide access through a command-line interface? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Proteolytic digest\nDescription: Proteolytic digest is defined as a subclass of Sequence set (protein), where each instance is characterized by having some association with the topic of Proteomics. According to its description, a proteolytic digest consists of a protein sequence that has been cleaved into peptide fragments—either enzymatically or chemically—with known fragment masses. This class formalization ensures that any proteolytic digest is a specialized set of protein sequences relevant to studies or analyses in proteomics.\nAxiom: {'subClassOf': ['Sequence set (protein)'], 'propertyRestrictions': ['[has topic only Proteomics]']}\nGenerated CQs:", "output": "Is every proteolytic digest associated with at least one topic in proteomics? | Must a proteolytic digest necessarily have a topic that relates to proteomics? | Can a proteolytic digest exist without being linked to proteomics as a topic? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DNA translation\nDescription: DNA translation is defined as a subclass of Sequence conversion, where the process involves converting one type of biological sequence into another. It is further characterized by having the topic of Protein expression, indicating its role in the generation of proteins. The class is described as the process that translates a DNA sequence into a protein, formalizing its biological role in interpreting genetic information to produce functional proteins.\nAxiom: {'subClassOf': ['Sequence conversion'], 'propertyRestrictions': ['[has topic only Protein expression]']}\nGenerated CQs:", "output": "Does DNA translation always have the topic of protein expression? | Is it necessary for DNA translation to be associated with some aspect of protein expression? | Can an instance of DNA translation exist without being linked to protein expression through the 'has topic' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GeneticsDesign\nDescription: GeneticsDesign is a subclass of software, characterized by its input and output specifications and its implementation language. Specifically, any instance of GeneticsDesign must accept as input data that is in the form of an R data frame (with an associated format specification), produce as output a text data set (constrained to specified textual formats), and be encoded in the R programming language. This formalization ensures standardized interoperability and data handling within the class's defined domain.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data output some (Text data set and [has format specification some Textual format])]', '[has specified data input some (data and [has format specification some R data frame])]', '[is encoded in only R language]']}\nGenerated CQs:", "output": "Is every GeneticsDesign necessarily encoded in at least one instance of R language? | Can a GeneticsDesign exist without being encoded in R language? | Does the ontology require that each GeneticsDesign is linked to some R language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Prediction and recognition (protein)\nDescription: Prediction and recognition (protein) is a subclass of Prediction and recognition, defined by its role in predicting, recognising, detecting, or identifying properties specific to proteins. This class encompasses processes, methods, or functions aimed at analyzing and determining various attributes or characteristics of proteins, such as structure, function, or presence.\nAxiom: {'subClassOf': ['Prediction or recognition']}\nGenerated CQs:", "output": "Is Prediction and recognition (protein) classified under Prediction and recognition? | Which specific classes are included within Prediction and recognition, such as Prediction and recognition (protein)? | What broader categories does Prediction and recognition (protein) fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ramachandran plot validation\nDescription: Ramachandran plot validation is a subclass of Dihedral angle validation, defined as the process of validating a Ramachandran plot for a protein structure. Instances of this class take a Ramachandran plot as input and produce a Protein structural quality report as output. This validation assesses the conformational quality of protein structures based on their dihedral angles, supporting rigorous structural bioinformatics analyses.\nAxiom: {'subClassOf': ['Dihedral angle validation'], 'propertyRestrictions': ['[has input some Ramachandran plot]', '[has output only Protein structural quality report]']}\nGenerated CQs:", "output": "Is it required that a Ramachandran plot validation always produces at least one Protein structural quality report as output? | Can every output generated by a Ramachandran plot validation be classified as a Protein structural quality report? | Does a Ramachandran plot validation ever produce an output that is not a Protein structural quality report? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: BasReader 3.01\nDescription: BasReader 3.01 is defined as a subclass of software. Members of this class are exclusively characterized as outputs produced by a software publishing process in which the participant Raytest is involved. This formalization ensures that BasReader 3.01 instances are software entities resulting from processes that specifically include Raytest as a participant.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[output of some (software publishing process or [has participant hasValue Raytest])]']}\nGenerated CQs:", "output": "Must any output of the BasReader 3.01 propertyRestrictions include results from a software publishing process that involves Raytest as a participant? | Is it necessary that BasReader 3.01 propertyRestrictions only produce outputs related to a software publishing process where Raytest is involved? | Can an output of BasReader 3.01 propertyRestrictions exist without stemming from a software publishing process in which Raytest is a participant? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: globaltest\nDescription: globaltest is defined as a subclass of software with several specific characteristics. It is encoded in the R programming language and is published by Bioconductor. Instances of this class are designed to be executed within the context of descriptive statistical calculations. A globaltest implementation must have specified data input in the form of a gene expression dataset and produces specified data output, which can be either a graph plot or an R data frame (and only in the R data frame format). The class also includes a restriction that it implements the globaltest method. This formalization captures the essential features and functional requirements of the globaltest software component within a bioinformatics or statistical analysis context.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is encoded in some R language]', '[is published by hasValue Bioconductor]', '[is executed in some descriptive statistical calculation]', '[has specified data output some (Graph plot and [has format specification only R data frame])]', '[has specified data input some Gene expression dataset]', '[implements only globaltest]']}\nGenerated CQs:", "output": "Is it required that all entities with 'propertyRestrictions' implement at least one 'globaltest'? | Can an entity with 'propertyRestrictions' exist without implementing any 'globaltest'? | Does every instance of 'propertyRestrictions' have an implementation relationship with some 'globaltest'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene expression QTL analysis\nDescription: Gene expression QTL analysis is defined as a subclass of Gene expression data analysis, characterized by combining classical quantitative trait loci (QTL) analysis with gene expression profiling to identify cis- and trans-regulatory elements influencing the expression of phenotype-associated genes. Members of this class are further defined by the requirement that their analysis outputs include either a Pathway or network report, reflecting the integrative nature of the results produced.\nAxiom: {'subClassOf': ['Gene expression data analysis'], 'propertyRestrictions': ['[has output only Pathway and network report]']}\nGenerated CQs:", "output": "Does every Gene expression QTL analysis necessarily produce at least one output that is either a Pathway report or a Network report? | Is it possible for the output of a Gene expression QTL analysis to be something other than a Pathway report or Network report? | Are Pathway and Network reports the only required types of outputs generated by Gene expression QTL analysis? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Taxonomy\nDescription: Taxonomy is defined as a subclass of data and evolutionary biology, focusing specifically on topics related to phylogeny. Members of this class involve the classification, identification, and naming of organisms, ensuring a systematic approach to understanding biological diversity and evolutionary relationships. The class is formally restricted to instances that are concerned with at least some aspect of phylogeny, aligning with its central role in evolutionary studies.\nAxiom: {'subClassOf': ['data', 'Evolutionary biology'], 'propertyRestrictions': ['[has topic only Phylogeny]']}\nGenerated CQs:", "output": "Is it required that any Taxonomy has at least one topic related to Phylogeny? | Does every instance of Taxonomy necessarily include a topic concerning Phylogeny? | Can a Taxonomy exist without having any topic involving Phylogeny? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: pcaMethods\nDescription: pcaMethods is a subclass of software designed for data analysis. It is encoded in the R language and published by Bioconductor. This class implements several algorithms, including Bayesian Model, Expectation-Maximization (EM) algorithm, Nonlinear Estimation by Iterative Partial Least Squares, and the SVDimpute algorithm. It operates within contexts of data visualization and cross-validation. The software requires data inputs strictly in R data frame format, and its outputs specifically include graphical plots.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is encoded in some R language]', '[implements some (Bayesian Model and Expectation-Maximization(EM) algorithm and Nonlinear Estimation by Iterative Partial Least Squares and SVDimpute algorithm)]', '[is published by hasValue Bioconductor]', '[has specified data output some Graph plot]', '[is executed in some (data visualization and cross validation)]', '[has specified data input some [has format specification some R data frame]]']}\nGenerated CQs:", "output": "Does every data input specified for pcaMethods necessarily have a format specification restricted only to R data frames? | Can a data input provided to pcaMethods have any format specification other than R data frame? | Is the format specification of data inputs for pcaMethods limited exclusively to R data frames for all relevant cases? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TCoffee\nDescription: TCoffee is defined as a subclass of software and is characterized by its essential role in executing at least one multiple sequence alignment. This means that any instance of TCoffee is a software application specifically involved in performing multiple sequence alignment tasks.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is executed in only multiple sequence alignment]']}\nGenerated CQs:", "output": "Is it necessary for TCoffee to be executed in a multiple sequence alignment? | Does TCoffee always participate in at least one multiple sequence alignment process? | Can TCoffee exist without being executed in a multiple sequence alignment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein chemical modifications\nDescription: Protein chemical modifications is defined as a subclass of Protein sites, features and motifs. It refers to the topic concerning the chemical modification of a protein, encompassing alterations that affect specific protein sites or motifs. This class formalizes the grouping of all concepts related to protein chemical modifications within the broader context of protein features.\nAxiom: {'subClassOf': ['Protein sites, features or motifs']}\nGenerated CQs:", "output": "Are protein chemical modifications classified under the broader category of protein sites, features and motifs? | What specific subclasses exist within protein sites, features and motifs, including protein chemical modifications? | Which higher-level classes encompass protein chemical modifications? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: OrderedList\nDescription: OrderedList is a subclass of software designed for differential expression analysis. It requires as input a gene expression dataset with an associated data format specification, and outputs a gene list, also accompanied by a format specification. OrderedList is implemented in the R programming language, executes within a differential expression analysis context, and provides similarity scoring functionality. These axioms define OrderedList as specialized analysis software with well-defined input/output standards and analytical capabilities, constrained to the context of gene expression data.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[implements some Similarity score]', '[is encoded in some R language]', '[is executed in some differential expression analysis]', '[has specified data output some (Gene list and [has format specification some data format specification])]', '[has specified data input some (Gene expression dataset or [has format specification some data format specification])]']}\nGenerated CQs:", "output": "Is every OrderedList required to have at least one specified data input that is both a Gene expression dataset and has a format specification? | Can an OrderedList possess a specified data input only if it qualifies as a Gene expression dataset with an associated data format specification? | Does the property restriction enforce that OrderedLists reference data inputs that are both categorized as Gene expression datasets and constrained by a format specification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Codon usage table\nDescription: Codon usage table is a subclass of data that specifically pertains to gene expression. It represents a structured table containing codon usage data calculated from one or more nucleic acid sequences. Such a table typically includes its name, optional comments, and columns listing codons alongside their corresponding usage data. Additionally, a codon usage table can be used to extract or represent a genetic code, providing valuable insights into the patterns of codon utilization associated with gene expression.\nAxiom: {'subClassOf': ['data'], 'propertyRestrictions': ['[has topic only Gene expression]']}\nGenerated CQs:", "output": "Is it required that every Codon usage table is associated with some aspect of Gene expression through the has topic property? | Can a Codon usage table exist without referencing Gene expression as a topic? | Does the presence of a 'has topic' relationship to Gene expression define Codon usage tables? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CRAM\nDescription: CRAM is a subclass of both Binary format and Alignment format (pair only), representing a file format used for storing pairwise alignments in a compressed binary representation. It is defined by its use of reference-based compression to efficiently encode alignment data, distinguishing it from other binary or alignment formats.\nAxiom: {'subClassOf': ['Binary format', 'Alignment format (pair some)']}\nGenerated CQs:", "output": "Is CRAM classified as a type of Alignment format (pair only)? | Which specific formats are categorized under Alignment format (pair only), and does this include CRAM? | What are the broader categories encompassing CRAM within alignment format classification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein cleavage sites\nDescription: Protein cleavage sites is a subclass of Protein sites, features and motifs, representing locations within a protein sequence where cleavage by a proteolytic enzyme or agent occurs. This class specifically captures the sites of proteolytic processing, which are essential for understanding post-translational modifications and protein maturation.\nAxiom: {'subClassOf': ['Protein sites, features or motifs']}\nGenerated CQs:", "output": "Are protein cleavage sites included as a specific type within protein sites, features and motifs? | What specialized categories exist under protein sites, features and motifs, such as protein cleavage sites? | Which broader classes encompass the concept of protein cleavage sites? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein structural motifs and surfaces\nDescription: Protein structural motifs and surfaces is a subclass of Obsolete concept (EDAM), Protein structure analysis, and Protein sites, features and motifs. This class encompasses conserved substructures, geometry of secondary structure elements, and spatial arrangements within protein backbones. It also includes aspects related to solvent-exposed surfaces and internal cavities, addressing analyses of shape, hydropathy, electrostatic patches, and related roles and functions. The class captures topics concerning three-dimensional structural features or common 3D motifs in proteins, as well as functional surface regions such as biological interfaces with other molecules.\nAxiom: {'subClassOf': ['Protein structure analysis', 'Protein sites, features and motifs', 'Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Are Protein structural motifs and surfaces categorized as a type of Obsolete concept (EDAM)? | Which concepts fall under the broader classification of Obsolete concept (EDAM), including Protein structural motifs and surfaces? | What higher-level categories encompass Protein structural motifs and surfaces within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IRanges\nDescription: IRanges is defined as a subclass of software characterized by several key properties. It is encoded in the R language and operates in the context of data normalization and decision tree induction processes. IRanges requires input data in the form of an R data frame and produces output data also formatted as an R data frame. These property restrictions specify the technical environment and data formats integral to IRanges, emphasizing its role in R-based data workflows and its utility in data preprocessing and machine learning tasks.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is executed in some data normalization]', '[has specified data input some (data and [has format specification some R data frame])]', '[is executed in some decision tree induction]', '[has specified data output some (data and [has format specification some R data frame])]', '[is encoded in only R language]']}\nGenerated CQs:", "output": "Is every instance of IRanges required to be encoded in at least one R language? | Can IRanges exist without being associated with any R language encoding? | Does the definition of IRanges demand that it must have an encoding exclusively in an R language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: spikeLI\nDescription: spikeLI is defined as a subclass of software characterized by its implementation of some version of the Langmuir Isotherm. It is executed as part of both descriptive statistical calculation and differential expression analysis workflows. spikeLI is specifically encoded in the R language, accepts as input a gene expression dataset, and produces a graph plot as its specified output. This formalization captures spikeLI’s role as a specialized software tool for processing gene expression data and visualizing results through graphical plots.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[implements some Langmuir Isotherm]', '[is executed in some (descriptive statistical calculation and differential expression analysis)]', '[is encoded in some R language]', '[has specified data output some Graph plot]', '[has specified data input only Gene expression dataset]']}\nGenerated CQs:", "output": "Does a spikeLI require at least one specified data input that is a Gene expression dataset? | Is it necessary for every spikeLI to have a specified data input drawn from Gene expression datasets? | Can an instance of spikeLI lack a specified data input of the type Gene expression dataset? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Representative sequence identification\nDescription: Representative sequence identification is defined as a subclass of Sequence comparison. Individuals in this class are related to at least one topic involving sequence comparison (as specified by the property restriction: has topic some Sequence comparison). This class is concerned with the process of identifying a representative sequence from a set of sequences, generally utilizing pair-wise alignment scores or other sequence comparison methods.\nAxiom: {'subClassOf': ['Sequence comparison'], 'propertyRestrictions': ['[has topic only Sequence comparison]']}\nGenerated CQs:", "output": "Is it necessary for a Representative sequence identification to have the property 'has topic' associated with Sequence comparison? | Does every Representative sequence identification instance relate to at least one Sequence comparison through the 'has topic' property? | Can a Representative sequence identification exist without having 'has topic' connected to a Sequence comparison? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein-ligand docking\nDescription: Protein-ligand docking is defined as a subclass of molecular docking, characterizing computational or experimental procedures in which the output must include at least one protein-ligand complex. This formalization ensures that any instance of protein-ligand docking results in the generation or identification of a protein-ligand complex.\nAxiom: {'subClassOf': ['Molecular docking'], 'propertyRestrictions': ['[has output some Protein-ligand complex]', '[has topic some Protein interactions]']}\nGenerated CQs:", "output": "Does every protein-ligand docking necessarily involve some aspect related to protein interactions? | Is it required that protein-ligand docking has a topic associated with protein interactions? | Does protein-ligand docking always pertain to a subject within the domain of protein interactions? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MLInterfaces\nDescription: MLInterfaces is defined as a subclass of software, specifically characterized by its role in facilitating interactions between data and machine learning algorithms. Instances of MLInterfaces must accept as input gene expression datasets (with an associated data format specification) and must output either ALL or AML datasets (also with a defined data format specification). Additionally, all MLInterfaces are required to be implemented in the R programming language, formally ensuring compatibility with R-based computational workflows.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data output some (ALL/AML data set and [has format specification some data format specification])]', '[has specified data input some (Gene expression dataset and [has format specification some data format specification])]', '[is encoded in some R language]', '[implements some k-nearest neighbour classification]']}\nGenerated CQs:", "output": "Is it required that every MLInterface implements at least one k-nearest neighbour classification? | Can an MLInterface exist without implementing k-nearest neighbour classification? | Does the ontology allow for MLInterfaces that implement only k-nearest neighbour classification among possible implementations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Microsoft Excel 2007\nDescription: Microsoft Excel 2007 is a subclass of Microsoft Excel, characterized by its support for both input and output of data in multiple formats: it is capable of importing data in tab-delimited file format and XLS spreadsheet format, and outputting data in XLS spreadsheet and XML spreadsheet formats. The release date is specified as ns1:00, and its official homepage is http://office.microsoft.com/. This version is directly succeeded by Microsoft Excel for Windows 2010 and has the version identifier \"Microsoft 2007 version.\"\nAxiom: {'subClassOf': ['Microsoft Excel'], 'propertyRestrictions': ['[has specified data output some (data and [has format specification some XML spreadsheet])]', '[has specified data input some (data and [has format specification some tab delimited file format])]', '[has specified data output some (data and [has format specification some XLS spreadsheet])]', '[has release date hasValue ns1:00]', '[has website homepage hasValue http://office.microsoft.com/]', '[directly followed by some Microsoft Excel for Windows 2010]', '[has version hasValue Microsoft 2007 version]', '[has specified data input some (data and [has format specification some XLS spreadsheet])]', '[has specified data output some (data and [has format specification some tab delimited file format])]']}\nGenerated CQs:", "output": "Does Microsoft Excel 2007 always generate data output that is formatted as a tab delimited file? | Is it necessary for data output from Microsoft Excel 2007 to be data with a format specification of tab delimited file format? | Can Microsoft Excel 2007 output any data that is not both data and specified as tab delimited file format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GeneSelector\nDescription: GeneSelector is defined as a subclass of software, characterized by its ability to implement a variety of statistical and computational methods. Specifically, any instance of GeneSelector must implement at least one of the following techniques: SAM, BaldiLongT, FoxDimmicT, WilcEbam, Bayesian Model, Wilcoxon, Linear modelling, or t-test. This formalization ensures that GeneSelector software is equipped to perform gene selection using multiple analytical approaches.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[implements some SAM]', '[implements some BaldiLongT]', '[implements some FoxDimmicT]', '[implements some WilcEbam]', '[implements some Bayesian Model]', '[implements some Wilcoxon]', '[implements some Linear modelling]', \"[implements some 't-test']\", '[is encoded in some R language]']}\nGenerated CQs:", "output": "Is it required that every GeneSelector must be encoded in at least one R language? | Can a GeneSelector exist without being encoded in any R language? | Does the ontology specify that GeneSelectors may only be encoded in R language, or are other encoding languages permitted? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Pathway ID (ConsensusPathDB)\nDescription: Pathway ID (ConsensusPathDB) is defined as a subclass of ConsensusPathDB identifier. This means any instance of Pathway ID (ConsensusPathDB) is recognized as a type of unique identifier specifically used within the ConsensusPathDB resource, dedicated to identifying biological pathways recorded in this database.\nAxiom: {'subClassOf': ['ConsensusPathDB identifier', 'Pathway or network accession']}\nGenerated CQs:", "output": "Is Pathway ID (ConsensusPathDB) a subtype of Pathway or network accession? | Which types are encompassed under Pathway or network accession, including Pathway ID (ConsensusPathDB)? | Under what broader classes can Pathway ID (ConsensusPathDB) be classified? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Transcriptomics\nDescription: Transcriptomics is defined as a subclass of Genomics. It represents a specialized area within Genomics, specifically focused on the study and characterization of the transcriptome—all RNA transcripts produced by the genome—of a given organism or cell type. This formalization positions Transcriptomics as a distinct but related domain under the broader field of Genomics.\nAxiom: {'subClassOf': ['Genomics', 'Gene expression']}\nGenerated CQs:", "output": "Is Transcriptomics classified under the broader category of Gene expression? | Which concepts are considered specialized types of Gene expression, such as Transcriptomics? | To which higher-level classes does Transcriptomics belong within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: 'beadarraySNP'\nDescription: beadarraySNP is a class characterized by a combination of specific property restrictions: it requires at least some specified data input in the form of a text data set and produces at least some specified data output in the form of a graph plot. Instances of beadarraySNP are executed within the context of data normalization processes and are encoded using the R programming language. No additional subclass or disjointness axioms are currently specified for this class.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data output some Graph plot]', '[has specified data input some Text data set]', '[is executed in some data normalization]', '[is encoded in some R language]']}\nGenerated CQs:", "output": "Is beadarraySNP categorized as a type of software? | Which software subclasses include beadarraySNP? | What broader classes encompass beadarraySNP? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MEDME\nDescription: MEDME is a class defined by the following characteristics: it processes at least one specified data input that is a data object, with the explicit requirement that the input conforms to the R data frame format. It produces at least one specified data output that is a data object formatted according to the GFF specification. Furthermore, any instance of MEDME must be encoded in the R programming language.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data input some (data and [has format specification some R data frame])]', '[has specified data output some (data and [has format specification some GFF])]', '[is encoded in some R language]']}\nGenerated CQs:", "output": "Is MEDME categorized under the broader class of software? | Which software subclasses include MEDME? | What are the direct superclasses of MEDME? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Splice site prediction\nDescription: Splice site prediction is a class characterized by the property that it is associated with at least one topic related to gene structure. There are no specified superclasses or disjoint classes, but the presence of the property restriction \"[has topic some Gene structure]\" ensures that any instance of Splice site prediction must be concerned with or related to the structure of genes.\nAxiom: {'subClassOf': ['Nucleic acid sequence feature detection'], 'propertyRestrictions': ['[has topic some Gene structure]']}\nGenerated CQs:", "output": "Is Splice site prediction categorized as a type of Nucleic acid sequence feature detection? | Which specific activities are classified under Nucleic acid sequence feature detection, such as Splice site prediction? | What higher-level categories encompass Splice site prediction within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Functional enrichment\nDescription: Functional enrichment is a subclass of both gene expression data analysis and enrichment, indicating it involves methods that analyze gene expression data to identify statistically significant overrepresentation of biological functions, pathways, or categories within a gene set. This establishes functional enrichment as a specialized approach within broader enrichment analyses, specifically applied in the context of gene expression studies.\nAxiom: {'subClassOf': ['Gene expression data analysis', 'Enrichment'], 'propertyRestrictions': ['[has topic some Function analysis]']}\nGenerated CQs:", "output": "Must every instance of Functional enrichment be associated with at least one topic of Function analysis? | Can a Functional enrichment process exist without having the topic of Function analysis? | Is it possible for Functional enrichment to have topics other than Function analysis? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Acuity\nDescription: Acuity is defined as any entity that is the output of at least one software publishing process in which Molecular Devices is a participant. This specification restricts class membership to outputs directly associated with publishing activities involving Molecular Devices, ensuring that only entities linked to such processes are included.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[output of some (software publishing process and [has participant hasValue Molecular Devices])]']}\nGenerated CQs:", "output": "Is Acuity categorized as a type of software? | Which software subclasses include Acuity? | What broader categories does Acuity fall under within the software hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Raw microarray data\nDescription: Raw microarray data is defined as a subclass of experimental measurement, meaning it represents a specific type of data obtained directly from experimental procedures involving microarrays. All individuals classified as raw microarray data are, by definition, also considered experimental measurements.\nAxiom: {'subClassOf': ['Experimental measurement', 'Microarray hybridisation data']}\nGenerated CQs:", "output": "Is Raw microarray data classified under the broader category of Microarray hybridisation data? | Which specific data types fall under Microarray hybridisation data, such as Raw microarray data? | What are the parent categories for Raw microarray data within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein structure prediction\nDescription: Protein structure prediction is a subclass of Protein analysis, Prediction and recognition (protein), Protein sequence analysis, and Structure prediction. \nThis class is characterized by processes or activities that generate a Protein structure as output and are explicitly focused on the topic of Protein structure prediction. \nMembers of this class are methods or approaches dedicated to predicting the three-dimensional structure of proteins based on sequence or related information.\nAxiom: {'subClassOf': ['Protein analysis', 'Prediction and recognition (protein)', 'Protein sequence analysis', 'Structure prediction', 'Structure prediction', 'Protein structure analysis'], 'propertyRestrictions': ['[has output some Protein structure]', '[has topic some Protein structure prediction]']}\nGenerated CQs:", "output": "Is Protein structure analysis a broader category that encompasses Protein structure prediction? | Which specialized analyses fall under the category of Protein structure analysis, such as Protein structure prediction? | What more general domains is Protein structure prediction associated with within protein studies? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein interaction network comparison\nDescription: Protein interaction network comparison is defined as a subclass of Protein function comparison. This means that every instance of Protein interaction network comparison is also considered an instance of Protein function comparison. The class specifically focuses on comparing networks of interactions between proteins, as a subdomain of the broader context of comparing protein functions.\nAxiom: {'subClassOf': ['Protein function comparison', 'Protein interaction network analysis']}\nGenerated CQs:", "output": "Is Protein interaction network comparison categorized as a specific kind of Protein interaction network analysis? | Which analysis methods are subclassed under Protein interaction network analysis, such as Protein interaction network comparison? | What broader analytical categories does Protein interaction network comparison inherit from? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: timecourse\nDescription: timecourse is defined as a subclass of software, specifically characterized by implementing some form of Robust Multi-array Average (RMA) methodology. Instances of this class are published by Bioconductor, are encoded in the R programming language, and are restricted to producing data output that has a format specification only in the CEL binary format. This formalization ensures that any timecourse software must fulfill these requirements and cannot represent software lacking these key attributes.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[implements some RMA]', '[is published by hasValue Bioconductor]', '[is encoded in some R language]', '[has specified data output some [has format specification only CEL binary format]]', '[has specified data input some Gene expression dataset]']}\nGenerated CQs:", "output": "Is it required that a timecourse has at least one specified data input that is a gene expression dataset? | Can a timecourse exist without any specified data input of type gene expression dataset? | Does the definition of timecourse permit only those data inputs that are gene expression datasets as specified? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sizepower\nDescription: sizepower is defined as a subclass of software that is executed in the context of background correction, data normalization, and differential expression analysis. It requires input data in the form of an R data frame and produces output data also as an R data frame, as specified by its format restrictions. Furthermore, sizepower is published exclusively by Bioconductor, ensuring its provenance and association with this software repository.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is executed in some (background correction and data normalization and differential expression analysis)]', '[has specified data output some [has format specification only R data frame]]', '[has specified data input some [has format specification only R data frame]]', '[is published by hasValue Bioconductor]', '[is encoded in some R language]']}\nGenerated CQs:", "output": "Is it necessary for a sizepower propertyRestriction to be encoded in at least one R language? | Can a sizepower propertyRestriction exist without being associated with any R language? | Does every sizepower propertyRestriction require an encoding in an R language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: derivative software not allowed\nDescription: derivative software not allowed is defined as a subclass of Derivatives clause, indicating it represents a specific kind of clause that addresses the restriction or prohibition of creating derivative software. This class does not have any explicitly declared disjointness with other classes.\nAxiom: {'subClassOf': ['Derivatives clause'], 'disjointWith': ['derivative software allowed']}\nGenerated CQs:", "output": "What logical separation exists between 'derivative software not allowed' and 'derivative software allowed' within the ontology? | Is any software classified as both 'derivative software not allowed' and 'derivative software allowed'? | Which software permission classes are specifically declared as disjoint with 'derivative software allowed'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: logitT\nDescription: logitT is defined as a subclass of software that implements both the Logit-t algorithm and the t-test. It is used specifically in differential expression analysis and requires as input data with a format specified exclusively as either CEL binary format or CEL ASCII format. The output produced by logitT is an R data frame. Additionally, all instances of logitT are published by Bioconductor.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': [\"[implements some (Logit-t algorithm and 't-test')]\", '[is executed in some differential expression analysis]', '[has specified data input some [has format specification only (CEL binary format or CEL ASCII format)]]', '[is published by hasValue Bioconductor]', '[has specified data output some [has format specification only R data frame]]', '[is encoded in some R language]']}\nGenerated CQs:", "output": "Does every logitT property restriction require encoding in at least one R language? | Is it necessary for logitT propertyRestrictions to be encoded using some R language? | Can a logitT property restriction exist without being encoded in any R language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MPL v2.0\nDescription: MPL v2.0 is defined as a subclass of MPL (Mozilla Public License) and is characterized by its compatibility: it is a license that is compatible with at least some instances of the GNU GPL v3 license. This axiom ensures that any license categorized as MPL v2.0 must be able to coexist or interact legally with GNU GPL v3 in some licensing scenarios.\nAxiom: {'subClassOf': ['MPL'], 'propertyRestrictions': ['[is compatible license of some GNU GPL v3]', '[is compatible license of some GNU GPL v2]']}\nGenerated CQs:", "output": "Is every instance of MPL v2.0 associated with at least one GNU GPL v2 license through the 'is compatible license of' property? | Must MPL v2.0 have a compatibility relationship with some software licensed under GNU GPL v2? | Does the ontology entail that MPL v2.0 can demonstrate compatibility via the 'is compatible license of' relation with at least one entity classified as GNU GPL v2? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: BAR\nDescription: BAR is defined as a subclass of Binary format. This indicates that every instance of BAR is also an instance of Binary format, inheriting all characteristics and constraints of the Binary format class. No additional property restrictions or disjointness axioms are specified for BAR.\nAxiom: {'subClassOf': ['Binary format'], 'propertyRestrictions': ['[is published by hasValue Affymetrix]']}\nGenerated CQs:", "output": "Is every instance of BAR necessarily published by Affymetrix? | Can a BAR exist if it is not published by Affymetrix? | Does BAR exclusively have the 'is published by' property value set to Affymetrix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: affyPara\nDescription: affyPara is defined as a subclass of software, specifically published by Bioconductor. It is executed in computational processes that perform averaging, correction, and data normalization. Its specified data input must be in the CEL binary format or CEL ASCII format. The data outputs are either graph plots or R data frames, with the latter characterized by an explicit format specification. This ontological definition formalizes affyPara as specialized software for processing microarray data within the defined formats and computational contexts.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is published by hasValue Bioconductor]', '[is executed in some (averaging and correction and data normalization)]', '[has specified data input some [has format specification only (CEL binary format or CEL ASCII format)]]', '[has specified data output some (Graph plot and [has format specification some R data frame])]', '[is encoded in some R language]']}\nGenerated CQs:", "output": "Is it required that affyPara is encoded in at least one R language? | Can affyPara exist without being encoded in any R language? | Which R languages are permissible for encoding affyPara? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: vsn\nDescription: vsn is defined as a subclass of software, characterized by its capability to process gene expression datasets as specified data input. Any instance of vsn must satisfy the property restrictions that it is executed in processes involving correction, data normalization, and differential expression analysis. This formalization ensures all vsn instances are specialized software tools for gene expression data processing workflows.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data input some Gene expression dataset]', '[is executed in some (correction and data normalization and differential expression analysis)]', '[is encoded in some R language]']}\nGenerated CQs:", "output": "Is it required that every property restriction in vsn is encoded in at least one R language? | Does a property restriction in vsn necessarily have to be represented in some form of R language? | Can a vsn property restriction exist without being encoded in an R language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SAGx\nDescription: SAGx is defined as a subclass of software, specifically characterized by several formal restrictions: it is published exclusively by Bioconductor, accepts as data input graph plots that are specified only in the R data frame format, and is implemented in the R programming language. These constraints ensure that any instance of SAGx software must originate from Bioconductor, be capable of processing graph plot data provided as R data frames, and be encoded in R.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is published by hasValue Bioconductor]', '[has specified data input some (Graph plot and [has format specification only R data frame])]', '[is encoded in some R language]', \"[implements some (Linear modelling and 't-test')]\"]}\nGenerated CQs:", "output": "Is it required that SAGx implements at least one of Linear modelling or t-test? | Can SAGx exist without implementing either Linear modelling or t-test? | Does every instance of SAGx necessarily implement Linear modelling, t-test, or both? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: phyloXML\nDescription: phyloXML is defined as a subclass of Phylogenetic tree format (XML), indicating that it is a specific type of XML-based format used for representing phylogenetic trees. Any instance of phyloXML is also considered an instance of Phylogenetic tree format (XML).\nAxiom: {'subClassOf': ['Phylogenetic tree format (XML)', 'XML']}\nGenerated CQs:", "output": "Does phyloXML fall under the category of XML languages? | Which XML-based formats include phyloXML as a specialized subset? | What broader classes encompass phyloXML within document markup languages? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: matlab software\nDescription: matlab software is defined as any entity that is encoded in some MATLAB language. This equivalence axiom specifies that membership in the class is strictly determined by being software that is written using MATLAB language.\nAxiom: {'subClassOf': ['software'], 'equivalentClass': ['[is encoded in some MATLAB language]']}\nGenerated CQs:", "output": "Is matlab software classified as a more specific member within the category of software? | Which entities are directly categorized as subclasses of software, including matlab software? | What higher-level classes does matlab software fall under according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Epitope mapping\nDescription: Epitope mapping is defined as a subclass of protein sequence feature detection, focusing on the identification and analysis of epitopes. It is characterized by having a topical relationship to immunology, meaning that any instance of epitope mapping must relate to immunological topics. This ensures that the process specifically pertains to immunological research or applications within the broader domain of protein sequence analysis.\nAxiom: {'subClassOf': ['Protein sequence feature detection', 'Mapping'], 'propertyRestrictions': ['[has topic some Immunology]']}\nGenerated CQs:", "output": "Does Epitope mapping fall under the general category of Mapping? | What specialized types are encompassed by Mapping, with reference to Epitope mapping? | Which broader concepts does Epitope mapping inherit from within the hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Algorithms for Calculating Microarray Enrichment\nDescription: Algorithms for Calculating Microarray Enrichment is defined as a subclass of software. Instances of this class must accept input data that is both classified as data and specified in the format of an R data frame. They are encoded in the R programming language and implement both the Algorithms for Calculating Microarray Enrichment procedure and the Chi-square algorithm. This ensures that each member of the class provides functionality for microarray enrichment analysis using Chi-square methodologies, specifically within the R environment and with structured R data frame input.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data input some (data and [has format specification some R data frame])]', '[is encoded in some R language]', '[implements some (Algorithms for Calculating Microarray Enrichment and Chi-square)]', '[has specified data output some Graph plot]']}\nGenerated CQs:", "output": "Is it required that Algorithms for Calculating Microarray Enrichment produce at least one data output that is a Graph plot? | Can any Algorithm for Calculating Microarray Enrichment exist without generating a Graph plot as a specified data output? | Are Graph plots an essential type of specified data output for Algorithms for Calculating Microarray Enrichment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dhf\nDescription: dhf is defined as a subclass of Textual format, meaning every instance of dhf is necessarily a textual format and inherits all characteristics of textual formats.\nAxiom: {'subClassOf': ['Textual format', 'Database hits (sequence) format']}\nGenerated CQs:", "output": "Does dhf fall under the broader classification of Database hits (sequence) format? | Which sequence formats have dhf as a more specific variation? | What are the direct parent categories for dhf in terms of sequence formats? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: affyTiling\nDescription: affyTiling is defined as a subclass of software. It is characterized by the following formal restrictions: it is published by Bioconductor; it is encoded in the R language; and it is executed in tasks involving correction and data normalization. affyTiling specifically outputs data in the form of CSV data sets. For data input, it requires files with a format specification limited exclusively to BPMAP or CEL binary formats. These axioms precisely describe the technical requirements and functional context of affyTiling within data analysis workflows.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is published by hasValue Bioconductor]', '[is executed in some (correction and data normalization)]', '[has specified data output some CSV data set]', '[is encoded in some R language]', '[has specified data input some [has format specification only (BPMAP and CEL binary format)]]', '[implements some RMA]']}\nGenerated CQs:", "output": "Is it required that every affyTiling implements at least one RMA? | Can an affyTiling exist without implementing any RMA? | Does the implementation of some RMA distinguish affyTiling from other concepts? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RLMM\nDescription: RLMM is defined as a subclass of software, characterized by the following constraints: it requires input data in the form of Xba.CQV, Xba.regions, and .raw files, with these formats explicitly specified. Its output is some type of graph plot. RLMM is implemented in the R programming language, is involved in data normalization processes, and is published via the Bioconductor platform. These axioms formally specify RLMM’s role, operational context, and technical details within data analysis workflows.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data input some [has format specification only (Xba.CQV and Xba.regions and .raw files)]]', '[has specified data output some Graph plot]', '[is encoded in some R language]', '[is executed in some data normalization]', '[is published by hasValue Bioconductor]', '[implements some Mahalanobis distance]']}\nGenerated CQs:", "output": "Is it required for an RLMM to implement at least one Mahalanobis distance property? | Must every RLMM be associated with implementing the Mahalanobis distance? | Can an RLMM exist without having any implementation of Mahalanobis distance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Restriction map\nDescription: Restriction map is defined as a subclass of Sequence map, meaning every restriction map is also a sequence map. This hierarchical relationship indicates that all properties and characteristics of sequence maps are inherited by restriction maps, while restriction maps may possess additional distinguishing features not shared with general sequence maps.\nAxiom: {'subClassOf': ['Sequence map', 'Sequence image']}\nGenerated CQs:", "output": "Is Restriction map categorized under Sequence image? | Which specific subclasses are encompassed by Sequence image such as Restriction map? | What broader categories does Restriction map fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Organism name\nDescription: Organism name is defined as a subclass of Name, indicating that every organism name is a specialized form of name. This relationship ensures that only valid names applicable to organisms are included in this class.\nAxiom: {'subClassOf': ['Name', 'Organism identifier']}\nGenerated CQs:", "output": "Is Organism identifier a generalization of Organism name? | What identifiers encompass Organism name as a more specific instance? | Which classes are broader than Organism name, including Organism identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Medline Display Format\nDescription: Medline Display Format is defined as a subclass of Textual format, indicating that it represents a specific kind of textual format used for displaying information, likely in the context of Medline bibliographic data. All individuals in this class inherit the general properties and characteristics of textual formats.\nAxiom: {'subClassOf': ['Textual format', 'Bibliographic reference format']}\nGenerated CQs:", "output": "Does Medline Display Format fall under the broader classification of Bibliographic reference format? | Which specific formats are categorized as Bibliographic reference format, including Medline Display Format? | What are the overarching categories that Medline Display Format is a specialized instance of? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Codon usage table ID\nDescription: Codon usage table ID is defined as an entity that serves as an identifier for at least one Genetic code as well as for at least one Codon usage table. It is formally constrained such that every instance of Codon usage table ID must be linked, via the 'is identifier of' property, to a Genetic code and to a Codon usage table.\nAxiom: {'subClassOf': ['Identifier (typed)'], 'propertyRestrictions': ['[is identifier of some Genetic code]', '[is identifier of some Codon usage table]']}\nGenerated CQs:", "output": "Does Codon usage table ID qualify as a kind of Identifier (typed)? | Which identifiers encompass Codon usage table ID as a specific form? | Within the classification of Identifier (typed), what subclasses exist, including Codon usage table ID? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: vbmp\nDescription: vbmp is a subclass of software, characterized by implementing Multinomial probit regression with Gaussian Process priors. It is specifically encoded in the R language, and is published by Bioconductor. vbmp requires as input data an R data frame (with mandatory format specification), and produces outputs that include both a graph plot and an R data frame (again with explicit format specification). These axioms formally constrain vbmp to operate within the R ecosystem, handle structured data in R data frame format, and utilize advanced regression methods, ensuring proper interoperability and reproducibility within computational biology workflows.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data input some [has format specification only R data frame]]', '[has specified data output some (Graph plot and [has format specification only R data frame])]', '[is published by hasValue Bioconductor]', '[is encoded in some R language]', '[implements some Multinomial probit regression with Gaussian Process priors]', '[is executed in some cross validation]']}\nGenerated CQs:", "output": "Is it required that every vbmp instance must be executed in at least one cross validation? | Can a vbmp exist without being executed in any cross validation? | For any given vbmp, does there necessarily exist a cross validation where it is executed? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Structure prediction\nDescription: Structure prediction is a subclass of both Prediction and recognition and Structure analysis. It is defined by having at least one output that is a Structure and is associated with topics related to structure prediction. Any instance of Structure prediction must produce some Structure as an output and must concern topics involving structure prediction.\nAxiom: {'subClassOf': ['Prediction and recognition', 'Structure analysis'], 'propertyRestrictions': ['[has output some Structure]', '[has topic some Structure prediction]']}\nGenerated CQs:", "output": "Does Structure prediction represent a more specific form of Structure analysis? | Which subclasses are encompassed by Structure analysis, for example, Structure prediction? | What broader categories does Structure prediction fall under within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bigWig\nDescription: bigWig is defined as a subclass of Binary format, indicating that every instance of bigWig is a specific type of binary file format. This classification formally asserts that bigWig files inherit all characteristics common to binary formats.\nAxiom: {'subClassOf': ['Binary format', 'Sequence annotation track format']}\nGenerated CQs:", "output": "Is bigWig classified as a subtype under Sequence annotation track format? | Which specific formats are categorized under Sequence annotation track format, such as bigWig? | To what broader format group does bigWig belong within the ontology structure? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Book ID\nDescription: Book ID is defined as a subclass of Identifier (typed), indicating that any Book ID is a specialized form of typed identifier uniquely associated with books. This formalization ensures that Book ID inherits all characteristics and constraints of typed identifiers while being specifically applicable to the domain of books.\nAxiom: {'subClassOf': ['Identifier (typed)', 'Accession']}\nGenerated CQs:", "output": "Is Book ID classified under the category of Accession? | What are all the subclasses that fall within Accession, such as Book ID? | Which broader classes does Book ID derive from in the hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: 2bit\nDescription: 2bit is defined as a subclass of Raw sequence format, indicating that it is a specific type or specialization of raw sequence format used for representing biological sequence data. All individuals classified as 2bit inherently inherit the characteristics and constraints of Raw sequence format.\nAxiom: {'subClassOf': ['Raw sequence format', 'Binary format']}\nGenerated CQs:", "output": "Is 2bit classified as a specific type within the Binary format category? | What are the direct and indirect subtypes encompassed by Binary format, such as 2bit? | Which higher-level categories include 2bit as a member, with respect to Binary format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Structural variation\nDescription: Structural variation is defined as a subclass of Chromosomes, indicating that every structural variation is considered a type of chromosome-related entity. This formalization positions structural variation within the broader context of chromosomal features or modifications.\nAxiom: {'subClassOf': ['Chromosomes', 'Genetic variation']}\nGenerated CQs:", "output": "Is Structural variation categorized as a type of Genetic variation? | Which specific variations fall under the broader class of Genetic variation, including Structural variation? | What higher-level categories encompass Structural variation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MVCClass\nDescription: MVCClass is defined as a subclass of software, characterized by several key property restrictions. It is executed within some data visualization context and is encoded in the R programming language. Additionally, it has a specified data input that must be data which possesses a format specification of an R data frame. This ensures that any instance of MVCClass operates in a data visualization setting, relies on R code, and accepts inputs specifically formatted as R data frames.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is executed in some data visualization]', '[is encoded in some R language]', '[has specified data input some (data and [has format specification some R data frame])]', '[has specified data output some (data and [has format specification some R data frame])]']}\nGenerated CQs:", "output": "Is every MVCClass required to provide at least one data output that is a data instance formatted as an R data frame? | Can an MVCClass be considered valid if it produces a data output that does not adhere to the R data frame format specification? | Does the requirement for MVCClass data output necessitate both the presence of data and its conformity to the R data frame format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Enzyme kinetics data\nDescription: Enzyme kinetics data is defined as a subclass of Reaction data, indicating that it specifically represents data related to the kinetic properties and behaviors of enzyme-catalyzed reactions and inherits all characteristics of general reaction data.\nAxiom: {'subClassOf': ['Reaction data', 'Protein property']}\nGenerated CQs:", "output": "Does enzyme kinetics data fall under the category of protein property? | Which specific types of protein property include enzyme kinetics data as a subclass? | What broader classes encompass enzyme kinetics data within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RFAM accession\nDescription: RFAM accession is defined as a subclass of Accession, indicating that every RFAM accession is a specific type of accession with all the general properties of an accession. No additional constraints or distinguishing characteristics are provided beyond its subclass relationship.\nAxiom: {'subClassOf': ['Accession', 'RNA family identifier']}\nGenerated CQs:", "output": "Does RFAM accession fall under the category of RNA family identifier? | Which identifiers are classified as more specific types of RNA family identifier, including RFAM accession? | What are the broader identifier categories that include RFAM accession? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence motif format\nDescription: Sequence motif format is defined as a class of entities that serve as formats specifically for some Sequence motif. Any instance of Sequence motif format must be the format of at least one Sequence motif; this is specified by the existential restriction on the \"is format of\" property. No additional subclass relationships or disjointness axioms are asserted.\nAxiom: {'subClassOf': ['Format (typed)'], 'propertyRestrictions': ['[is format of some Sequence motif]']}\nGenerated CQs:", "output": "Is Sequence motif format a specialized form of Format (typed)? | Which Format (typed) subclasses encompass Sequence motif format? | What more general classes does Sequence motif format belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RNA secondary structure visualisation\nDescription: RNA secondary structure visualisation is defined as a subclass of both RNA secondary structure analysis and Visualisation. This means that it is a specialized activity or method that involves representing or illustrating the secondary structure of RNA for purposes of analysis, falling within both the broader domains of RNA analysis and visualization techniques. No additional property restrictions apply to this class.\nAxiom: {'subClassOf': ['RNA secondary structure analysis', 'Visualisation'], 'propertyRestrictions': ['[has input some RNA secondary structure]']}\nGenerated CQs:", "output": "Is it required that an RNA secondary structure visualisation has at least one input that is an RNA secondary structure? | Can an RNA secondary structure visualisation exist if it does not have any RNA secondary structure as input? | Does every RNA secondary structure visualisation necessarily operate on some RNA secondary structure as its input? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InChI\nDescription: InChI is defined as a subclass of Textual format, indicating that it represents a form of information expressed in textual or string-based representation. Any instance of InChI is necessarily also an instance of Textual format.\nAxiom: {'subClassOf': ['Textual format', 'Chemical formula format']}\nGenerated CQs:", "output": "Is InChI classified as a more specific type of Chemical formula format? | What chemical formula formats encompass InChI as a subset? | Which broader categories does InChI, as a format, fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Reference map name (SWISS-2DPAGE)\nDescription: Reference map name (SWISS-2DPAGE) is defined as a subclass of Gel ID. This means every instance of Reference map name (SWISS-2DPAGE) is also an instance of Gel ID, inheriting all its properties and characteristics.\nAxiom: {'subClassOf': ['Gel ID', 'Name']}\nGenerated CQs:", "output": "Is Reference map name (SWISS-2DPAGE) classified as a type of Name? | Which specific subclasses are encompassed by the Name category, such as Reference map name (SWISS-2DPAGE)? | What broader categories include Reference map name (SWISS-2DPAGE) as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Python 2.6\nDescription: Python 2.6 is defined as a class whose members possess the property has version with the specific value \"Python version 2.6\". This ensures that any individual classified as Python 2.6 must be associated explicitly with version 2.6 of Python.\nAxiom: {'subClassOf': ['Python'], 'propertyRestrictions': ['[has version hasValue Python version 2.6]']}\nGenerated CQs:", "output": "Does Python 2.6 fall under the broader classification of Python? | Which versions or variants are subclasses of Python, including Python 2.6? | Of which higher-level software languages is Python 2.6 a specific instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ChipReader 3.1\nDescription: ChipReader 3.1 is defined as a class whose instances are outputs of at least one software publishing process, and every such process must have Bio-Rad Laboratories, Inc. as a participant. This axiom ensures that any individual categorized as ChipReader 3.1 originates from a software publishing process involving Bio-Rad Laboratories, Inc.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[output of some (software publishing process and [has participant hasValue Bio-Rad Laboratories, Inc.])]']}\nGenerated CQs:", "output": "Is ChipReader 3.1 classified under the category of software? | What are the specific subclasses that fall within software, such as ChipReader 3.1? | Which broader classes encompass ChipReader 3.1? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylogenetic tree distances calculation\nDescription: Phylogenetic tree distances calculation is a class whose members are characterized by the property that they produce at least one output classified as Phylogenetic tree distances. This means any instance of this class is associated with generating or yielding results that measure distances between phylogenetic trees. No superclass is explicitly defined.\nAxiom: {'subClassOf': ['Phylogenetic tree comparison'], 'propertyRestrictions': ['[has output some Phylogenetic tree distances]']}\nGenerated CQs:", "output": "Is phylogenetic tree distances calculation classified under the broader activity of phylogenetic tree comparison? | What are the specific methods that fall within phylogenetic tree comparison, such as phylogenetic tree distances calculation? | Which general categories encompass phylogenetic tree distances calculation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GIF\nDescription: GIF is defined as a subclass of raster image format, meaning every GIF is a type of raster image format. This classification indicates that GIFs inherit all properties and characteristics associated with raster image formats.\nAxiom: {'subClassOf': ['raster image format', 'Binary format']}\nGenerated CQs:", "output": "Is GIF classified as a type of Binary format? | Which file formats are categorized under Binary format, including GIF? | What broader format categories does GIF fall under in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Genetic code identifier\nDescription: Genetic code identifier is a class whose members serve as identifiers for at least one Genetic code. Any instance of this class is defined by the fact that it identifies some Genetic code, establishing a reference or association to a Genetic code entity.\nAxiom: {'subClassOf': ['Identifier (typed)'], 'propertyRestrictions': ['[is identifier of some Genetic code]']}\nGenerated CQs:", "output": "Does Genetic code identifier represent a more specific type within the overarching class of Identifier? | Which identifiers include Genetic code identifier as a particular example? | What general classification does Genetic code identifier fall under in the context of identifiers? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unambiguous sequence\nDescription: unambiguous sequence is defined as a subclass of Raw sequence format, indicating that every unambiguous sequence is a type of Raw sequence format. This classification implies that an unambiguous sequence shares all properties and constraints of a Raw sequence format, but may be further specialized to represent sequences with a single, clear interpretation.\nAxiom: {'subClassOf': ['Raw sequence format', 'Textual format']}\nGenerated CQs:", "output": "Is unambiguous sequence categorized under the broader class of Textual format? | Which types are directly more general than unambiguous sequence, specifically including Textual format? | What specific subcategories does Textual format encompass, such as unambiguous sequence? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: codata\nDescription: codata is defined as a subclass of Textual format, meaning every codata is a type of textual format. This classification situates codata within the broader category of data formats that are primarily text-based in nature.\nAxiom: {'subClassOf': ['Textual format', 'Sequence record format (text)']}\nGenerated CQs:", "output": "Is codata a specialization of Sequence record format? | Which record formats are classified as types of Sequence record format, including codata? | What broader record format categories encompass codata? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: iHOP symbol\nDescription: iHOP symbol is defined as a subclass of both Gene ID and Protein accession. This means that every iHOP symbol is simultaneously a Gene ID and a Protein accession, inheriting all characteristics and constraints of these two parent classes. This class serves to integrate identifiers that are valid in both gene and protein contexts within the ontology.\nAxiom: {'subClassOf': ['Gene ID', 'Protein accession', 'Identifier (hybrid)']}\nGenerated CQs:", "output": "Does iHOP symbol belong to the broader class of Identifier? | Which subclasses fall under the Identifier category, such as iHOP symbol? | What are the superclass categories for the concept iHOP symbol? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unambiguous pure rna sequence\nDescription: unambiguous pure rna sequence is defined as a subclass of unambiguous pure. This means every unambiguous pure rna sequence inherits all characteristics of unambiguous pure, while further specializing the concept—typically to represent RNA sequences that contain only unambiguous (unmodified and clearly defined) nucleotide bases. No additional restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['unambiguous pure', 'rna']}\nGenerated CQs:", "output": "Is unambiguous pure rna sequence classified as a type of rna? | Which subclasses are found under rna, specifically including unambiguous pure rna sequence? | What are the parent classes that unambiguous pure rna sequence is associated with? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HMMER profile alignment (sequences versus HMMs)\nDescription: HMMER profile alignment (sequences versus HMMs) is defined as a subclass of Textual format, indicating that it is a type of data represented in text form, specifically used to document the alignment of biological sequences against Hidden Markov Models (HMMs). This classification ensures that any instance of HMMER profile alignment is recognized as a textual data format within relevant ontological structures.\nAxiom: {'subClassOf': ['Textual format', 'Sequence-profile alignment format']}\nGenerated CQs:", "output": "Does HMMER profile alignment (sequences versus HMMs) fall under the category of Sequence-profile alignment format? | What specific alignment formats are classified as types of Sequence-profile alignment format, including HMMER profile alignment (sequences versus HMMs)? | Which broader alignment format categories does HMMER profile alignment (sequences versus HMMs) inherit from? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Enzyme ID (BioCyc)\nDescription: Enzyme ID (BioCyc) is defined as a subclass of BioCyc ID, meaning it represents a specialized identifier within the BioCyc database specifically assigned to enzymes. Every instance of Enzyme ID (BioCyc) is also an instance of BioCyc ID.\nAxiom: {'subClassOf': ['BioCyc ID', 'Enzyme ID']}\nGenerated CQs:", "output": "Is every Enzyme ID (BioCyc) instance categorized under Enzyme ID? | Which identifiers are more specific forms of Enzyme ID, such as Enzyme ID (BioCyc)? | To what broader identifier types does Enzyme ID (BioCyc) belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein-protein interaction prediction (from protein structure)\nDescription: Protein-protein interaction prediction (from protein structure) is a subclass of both Protein feature detection and Protein-protein interaction prediction. This class represents predictive methods or mechanisms that determine possible interactions between proteins specifically by utilizing protein structural information, inheriting characteristics from both feature detection and interaction prediction domains.\nAxiom: {'subClassOf': ['Protein feature detection', 'Protein-protein interaction prediction', 'Protein structure analysis']}\nGenerated CQs:", "output": "Is protein-protein interaction prediction (from protein structure) categorized under protein structure analysis? | Which analysis methods are recognized as more specific forms of protein structure analysis, such as protein-protein interaction prediction (from protein structure)? | What broader analytical categories encompass protein-protein interaction prediction (from protein structure)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence checksum generation\nDescription: Sequence checksum generation is defined as a subclass of Generation, with the additional restriction that it must have some input that is a Sequence. This specifies that any instance of Sequence checksum generation involves a process or activity categorized under Generation and necessarily requires a Sequence as its input.\nAxiom: {'subClassOf': ['Generation'], 'propertyRestrictions': ['[has input some Sequence]', '[has topic some Data acquisition]']}\nGenerated CQs:", "output": "Must every sequence checksum generation be associated with at least one data acquisition topic? | Is it possible for sequence checksum generation to have a topic other than data acquisition? | Does sequence checksum generation necessarily involve the property 'has topic' connecting it to data acquisition? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: 'domainsignatures'\nDescription: domainsignatures is defined as a subclass of software, specifically characterized by several property restrictions: it must implement some Gene-Set Enrichment Analysis, require as input some Gene list, and produce as output some Graph plot. Additionally, it is executed within the context of descriptive statistical calculation. This formalization ensures that any instance of domainsignatures must fulfill all these functional roles, distinguishing it from other types of software.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[implements some Gene-Set Enrichment Analysis]', '[has specified data input some Gene list]', '[has specified data output some Graph plot]', '[is executed in some descriptive statistical calculation]', '[is encoded in some R language]']}\nGenerated CQs:", "output": "Is every domainsignature required to be encoded in at least one R language? | Are there any domainsignatures that must only be encoded in an R language and not in any other language? | Can a domainsignature exist without being encoded in an R language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Clustal\nDescription: Clustal is defined as a subclass of software. This means Clustal is formally categorized as a type of software application, without further specified property restrictions or distinguishing characteristics in the current axioms.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is executed in some multiple sequence alignment]']}\nGenerated CQs:", "output": "Is Clustal required to be executed in at least one multiple sequence alignment? | Does the execution of Clustal always involve a multiple sequence alignment process? | Can Clustal exist without being executed in any multiple sequence alignment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence composition plot\nDescription: Sequence composition plot is defined as a subclass of Plot, indicating that it inherits all the characteristics of Plot while representing a more specific concept. This class is intended for visualizations that depict the composition of sequences, such as nucleotide or amino acid frequencies, organized graphically.\nAxiom: {'subClassOf': ['Plot', 'Sequence composition report']}\nGenerated CQs:", "output": "Is Sequence composition plot classified as a type under Sequence composition report? | Which specific reports fall under Sequence composition report, such as Sequence composition plot? | Under which broader report categories is Sequence composition plot organized? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: newick\nDescription: newick is defined as a subclass of Textual format. Members of this class represent data using a textual notation, specifically designed to encode information in text form. This formalization ensures that all newick instances are recognized as specific types of textual formats.\nAxiom: {'subClassOf': ['Textual format', 'Phylogenetic tree format (text)']}\nGenerated CQs:", "output": "Is newick a specific type of format under Phylogenetic tree format (text)? | What formats are classified as specializations of Phylogenetic tree format (text), such as newick? | Which general format classes encompass newick? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bigBed\nDescription: bigBed is defined as a subclass of Sequence annotation track format, indicating that any individual classified as a bigBed is also recognized as a Sequence annotation track format. There are no additional constraints or distinguishing features specified by the current axiom.\nAxiom: {'subClassOf': ['Sequence annotation track format', 'Binary format']}\nGenerated CQs:", "output": "Is bigBed categorized under Binary format? | Which data formats are classified as more specific types of Binary format, such as bigBed? | To which broader format categories does bigBed belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ClustalW format\nDescription: ClustalW format is defined as a subclass of Alignment format (text), indicating that it is a specific type of alignment file represented in a text-based format, used to store sequence alignments. This formalization ensures all ClustalW format instances are recognized as alignment formats expressed as text files.\nAxiom: {'subClassOf': ['Alignment format (text)', 'Textual format']}\nGenerated CQs:", "output": "Is ClustalW format classified under the broader class of Textual format? | What specific formats are categorized as subtypes of Textual format, including ClustalW format? | To which higher-level categories is ClustalW format hierarchically related? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Pathway ID (PharmGKB)\nDescription: Pathway ID (PharmGKB) is defined as a subclass of PharmGKB ID, indicating that it is a specific type of identifier used within the PharmGKB resource, specifically for representing biological pathways. Any instance of Pathway ID (PharmGKB) is, by definition, also a PharmGKB ID.\nAxiom: {'subClassOf': ['PharmGKB ID', 'Pathway or network accession']}\nGenerated CQs:", "output": "Is Pathway ID (PharmGKB) classified as a kind of Pathway or network accession? | Which identifiers are encompassed under Pathway or network accession, including Pathway ID (PharmGKB)? | To which higher-level accession categories does Pathway ID (PharmGKB) belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: 'codelink'\nDescription: codelink is defined as a subclass of software. Its members are characterized by having at least one specified data input that must be either an XML or a text data set. The data output is constrained such that at least one output must include both a text data set and a graph plot. Additionally, every codelink must be executed within processing contexts that perform background correction, data normalization, descriptive statistical calculations, and differential expression analysis. This formalization ensures that codelink instances are specialized software tools tailored for advanced data processing workflows involving specific input types, multifaceted outputs, and a sequence of bioinformatics analyses.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data input some (XML or Text data set)]', '[has specified data output some (Text data set and Graph plot)]', '[is executed in some (background correction and data normalization and descriptive statistical calculation and differential expression analysis)]', '[is encoded in some R language]']}\nGenerated CQs:", "output": "Is it required for every codelink to be associated with at least one encoding in the R language? | Can a codelink exist without being encoded in the R language? | Are all instances of codelink necessarily linked to some resource in the R programming language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence record format\nDescription: Sequence record format is defined as a subclass of Format (typed), indicating that it inherits all characteristics of a typed format. There are no additional property restrictions specified for this class, so its definition is solely based on its classification as a type of Format (typed).\nAxiom: {'subClassOf': ['Format (typed)'], 'propertyRestrictions': ['[is format of some Sequence record]']}\nGenerated CQs:", "output": "Is every sequence record format necessarily associated with at least one sequence record via the 'is format of' property? | Does the existence of the 'is format of' relation from a sequence record format imply the presence of a linked sequence record? | Can a sequence record format be valid without being the format of any sequence record? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein sequence (raw)\nDescription: Protein sequence (raw) is defined as a subclass of Raw sequence, indicating that every protein sequence (raw) is a specific type of raw sequence. This classification implies that all characteristics and constraints of Raw sequence apply to Protein sequence (raw), but no additional axioms or distinguishing features are specified beyond this relationship.\nAxiom: {'subClassOf': ['Raw sequence', 'Protein sequence']}\nGenerated CQs:", "output": "Does Protein sequence (raw) belong to the category of Protein sequence? | Which conceptual categories include Protein sequence (raw) as a more specific type? | What types fall under Protein sequence, including Protein sequence (raw)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has specified data input\nDescription: The property \"has specified data input\" links instances of software (domain) to data (range). It has no explicitly defined characteristics, super-properties, or inverse properties. This property specifies the particular data input required or accepted by a software entity. See also http://softwareontology.wordpress.com/2011/04/15/ins-and-outs-of-software/ for further reference.\nAxiom: {'characteristics': [], 'domain': [], 'range': ['data'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can entities other than software be subjects of the property 'has specified data input'? | Is it mandatory that every subject using 'has specified data input' belongs to the class software? | Which types of entities are permitted as the domain of the property 'has specified data input'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: followed by\nDescription: The property \"followed by\" is defined as a transitive object property and a sub-property of owl:topObjectProperty. Its domain and range are unrestricted. The inverse property is \"preceded by.\" According to the current description, this property is based on relations used in RO and BFO ontologies and is assumed to represent the transitive form, though not yet incorporated into BFO2.\nAxiom: {'characteristics': ['Transitive'], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "What is the inverse property of 'followed by' in the ontology? | If entity A is followed by entity B, does it necessarily mean that B is preceded by A? | How do the properties 'followed by' and 'preceded by' correspond to each other within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has license\nDescription: The property \"has license\" has no special characteristics or domain restriction. Its range is specified as \"software license,\" indicating it links subjects to software license entities. It is a sub-property of \"is about,\" meaning every \"has license\" assertion implies an \"is about\" relation. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['software license'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Which properties are defined as subproperties of is about? | Does the use of has license always entail the use of is about? | Is has license restricted to contexts where is about is applicable? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: output of\nDescription: The property \"output of\" does not have explicitly defined characteristics, domain, or range restrictions. It is a sub-property of \"participates in,\" indicating that it represents a more specific relationship within the broader context of participation. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is every output of a property that is a subproperty of output also considered to participate in some activity or process? | Which properties are included as subproperties under output and thereby inherit the participates in relationship? | What are the superproperties of output based on its subPropertyOf relationship with participates in? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is topic of\nDescription: The property \"is topic of\" relates an instance of 'Topic' (the subject) to an instance of 'data or information processing' (the object), indicating that the topic is the subject or scope of the referenced data or process. The domain is restricted to 'Topic', while the range includes data or information processing entities. There are no declared property characteristics, super-properties, or sub-properties. The inverse property is 'has topic'. In EDAM, this property is not used directly between EDAM concepts; instead, the inverse 'has topic' is applied. The property asserts that a topic A is the topic of object B, establishing a scope relationship.\nAxiom: {'characteristics': [], 'domain': ['Topic'], 'range': ['(data and information processing)'], 'subPropertyOf': [], 'inverseOf': ['has topic']}\nGenerated CQs:", "output": "Can the property 'is topic of' have a range other than 'data or information processing'? | Is every entity in the range of 'is topic of' required to be a 'data or information processing' item? | What types of entities can serve as the range for the property 'is topic of'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is published by\nDescription: The property \"is published by\" relates data format specifications or software to organizations, indicating the publishing organization responsible for these entities. It has no explicitly defined characteristics or inverse properties. The property is a sub-property of owl:topObjectProperty, making it a general object property. Its domain includes data format specifications or software, and its range is restricted to organizations.\nAxiom: {'characteristics': [], 'domain': ['(data format specification and software)'], 'range': ['organization'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'is published by' have a subject other than a data format specification or software? | What types of entities can be the domain for the 'is published by' property? | Are all instances used with the 'is published by' property required to be either data format specifications or software as subjects? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is executed in\nDescription: The property \"is executed in\" has no specified characteristics, domain, or super-properties. Its range is restricted to instances of \"information processing,\" meaning it is used to associate an entity with an \"information processing\" context in which it is executed. No inverse property is defined.\nAxiom: {'characteristics': [], 'domain': ['software'], 'range': ['information processing'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'is executed in' be applied to subjects other than software? | Are all objects used with the property 'is executed in' necessarily domains? | What types of entities are permitted to serve as the range when using 'is executed in'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is version of\nDescription: The property \"is version of\" has no explicitly defined characteristics, domain or range restrictions, super-properties, or inverse properties. It is used without constraints on the types of entities it relates.\nAxiom: {'characteristics': [], 'domain': ['version name'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'is version of' have a subject that is not a version? | Is every object used with the property 'is version of' required to be a version name? | What entities are permitted as the domain for the property 'is version of'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has format specification\nDescription: The property \"has format specification\" links individuals of the class \"information content entity\" to individuals of the class \"data format specification.\" It has no explicitly defined characteristics, super-properties, or inverse properties. This property is used to specify the data format that an information content entity conforms to.\nAxiom: {'characteristics': [], 'domain': ['information content entity'], 'range': ['data format specification'], 'subPropertyOf': ['is encoded in'], 'inverseOf': []}\nGenerated CQs:", "output": "Is every use of the has format specification property also an instance of the is encoded in property? | Which subproperties are defined under the is encoded in property, including has format specification? | What are the superproperties of the has format specification property within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is input of\nDescription: The property \"is input of\" has no specified characteristics or super-properties. Its domain is restricted to entities classified as \"data,\" and its range is limited to \"information processing\" entities. This property is used to indicate that some data serves as input to an information processing activity. No inverse property is defined.\nAxiom: {'characteristics': [], 'domain': ['data'], 'range': ['information processing'], 'subPropertyOf': [], 'inverseOf': ['has input']}\nGenerated CQs:", "output": "How are the properties ‘is input of’ and ‘has input’ connected in the ontology? | If entity X is input of process Y, does it follow that process Y has input X? | Which property acts as the inverse of ‘is input of’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Measurement\nDescription: Measurement is defined as a subclass of Observation. Every Measurement instance formally describes only entities classified as event:Measurement, ensuring it cannot describe other types of events. Additionally, each Measurement must be provided by either an event:Person or a Sensor, restricting its provenance to these two sources. This specification captures the nature of measurements as observational entities exclusively linked to specific events and originating strictly from people or sensor devices.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[describes only event:Measurement]', '[providedBy only (event:Person or Sensor)]']}\nGenerated CQs:", "output": "Is Measurement classified as a narrower concept under Observation? | Which specialized forms of Observation does Measurement represent? | What broader categories encompass Measurement within the context of Observation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Report\nDescription: Report is a class defined by a set of strict property restrictions: each instance must be provided by exactly one event:Person and must refer to exactly one instance of either home:Questionnaire, lab:ClinicalRecord, or lab:DemographicCharacteristicsRecord. Additionally, every Report must have exactly one hasPlausibilityMetric value of type xsd:double and exactly one hasReportingTime value of type time:Instant, with no other values permitted for these properties. The class definition ensures that each Report is uniquely associated with one provider, one time of reporting, a plausibility metric, and one described source record, reflecting a precise and singular reporting activity.\nAxiom: {'propertyRestrictions': ['[hasPlausibilityMetric exactly 1 xsd:double]', '[hasPlausibilityMetric only xsd:double]', '[describes only (home:Questionnaire or lab:ClinicalRecord or lab:DemographicCharacteristicsRecord)]', '[providedBy exactly 1 event:Person]', '[providedBy only event:Person]', '[hasReportingTime only time:Instant]', '[describes exactly 1 (home:Questionnaire or lab:ClinicalRecord or lab:DemographicCharacteristicsRecord)]']}\nGenerated CQs:", "output": "Is it mandatory that each Report has exactly one hasReportingTime property pointing to a time:Instant? | Can a Report possess more than one hasReportingTime value, or is it strictly limited to one time:Instant? | Does the ontology exclude the possibility of a Report having zero or multiple hasReportingTime assignments? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Accelerometer\nDescription: Accelerometer is defined as a subclass of WearableSensor. This means that every accelerometer is considered a wearable sensor, inheriting all characteristics of wearable sensors. Accelerometers are specialized sensors used in wearable devices to measure acceleration forces, which can be used to detect motion, orientation, and activity levels. No additional axioms further constrain the class.\nAxiom: {'subClassOf': ['WearableSensor']}\nGenerated CQs:", "output": "What broader sensor groups does Accelerometer belong to? | Which other types of sensors are classified as WearableSensor alongside Accelerometer? | Is Accelerometer categorized under WearableSensor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DTI-2\nDescription: DTI-2 is defined as a subclass of WearableSensor, indicating that it inherits all characteristics of wearable sensors. This means any instance of DTI-2 is necessarily a wearable sensor, though no further distinguishing properties or restrictions are specified.\nAxiom: {'subClassOf': ['WearableSensor']}\nGenerated CQs:", "output": "Which sensor types are more specific than WearableSensor, specifically including DTI-2? | To which parent categories does DTI-2 conceptually belong? | Does DTI-2 fall under the category of WearableSensor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: WearableMicrophone\nDescription: WearableMicrophone is defined as a subclass of WearableSensor. This class represents microphones that are designed to be worn on the body, distinguishing them from other types of wearable sensors by their specific function of capturing audio signals. Members of this class inherit all attributes and behaviors of wearable sensors, with a focus on audio data acquisition.\nAxiom: {'subClassOf': ['WearableSensor']}\nGenerated CQs:", "output": "Which types of WearableSensor include WearableMicrophone as a more specific subclass? | Does WearableMicrophone fall under the broader class of WearableSensor? | Into what higher-level classes can the WearableMicrophone entity be grouped? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: WearableVideoCamera\nDescription: WearableVideoCamera is defined as a subclass of WearableSensor. This means any instance of WearableVideoCamera is also an instance of WearableSensor, inheriting all characteristics of wearable sensors. WearableVideoCamera specifically refers to sensors that are worn on the body and are capable of capturing video data.\nAxiom: {'subClassOf': ['WearableSensor']}\nGenerated CQs:", "output": "To which broader sensor categories does WearableVideoCamera belong according to the ontology? | Which sensor types are considered more specific instances of WearableSensor, such as WearableVideoCamera? | Is WearableVideoCamera classified as a kind of WearableSensor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Alert\nDescription: Alert is defined as a subclass of Feedback, meaning every instance of Alert is also considered an instance of Feedback. This class captures specific types of feedback events characterized as alerts, distinguishing them from other forms of feedback. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['Feedback']}\nGenerated CQs:", "output": "Which higher-level categories does Alert fall under? | What are all subclasses categorized under Feedback, such as Alert? | Is Alert classified as a type of Feedback? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ambient2DVideoCamera\nDescription: Ambient2DVideoCamera is defined as a subclass of FixedSensor, indicating that every Ambient2DVideoCamera is a type of sensor with a fixed position. This class represents video cameras designed to capture ambient, two-dimensional visual information from a stationary location.\nAxiom: {'subClassOf': ['FixedSensor']}\nGenerated CQs:", "output": "Which sensor types are categorized as subclasses of FixedSensor, such as Ambient2DVideoCamera? | Does Ambient2DVideoCamera fall under the category of FixedSensor? | What parent classes are associated with Ambient2DVideoCamera? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: _3DVideoCamera\nDescription: _3DVideoCamera is defined as a subclass of FixedSensor, indicating that every instance of _3DVideoCamera is a type of sensor that operates in a fixed position. This class represents cameras capable of capturing three-dimensional video data, inheriting all characteristics of fixed sensors.\nAxiom: {'subClassOf': ['FixedSensor']}\nGenerated CQs:", "output": "Does the category FixedSensor include more specific types such as 3DVideoCamera? | Which sensor types are subclasses of FixedSensor, with reference to 3DVideoCamera? | To which higher-level classes does 3DVideoCamera belong within this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FixedSensor\nDescription: FixedSensor is defined as a subclass of Sensor. This indicates that every FixedSensor is a type of Sensor, inheriting all characteristics of the Sensor class. No additional constraints or distinguishing axioms are specified beyond this hierarchical relationship, meaning FixedSensors share the essential properties of Sensors.\nAxiom: {'subClassOf': ['Sensor']}\nGenerated CQs:", "output": "Which types are directly categorized under Sensor, such as FixedSensor? | Is FixedSensor classified within the broader group of Sensor? | What more general groupings include FixedSensor as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: WearableSensor\nDescription: WearableSensor is defined as a subclass of Sensor. This means that every instance of WearableSensor is also considered an instance of Sensor, inheriting its general properties and behaviors. WearableSensor typically refers to a sensor designed to be worn on the human body for the purpose of monitoring physiological signals, activity, or environmental parameters.\nAxiom: {'subClassOf': ['Sensor']}\nGenerated CQs:", "output": "Which entities are defined as more specific types within Sensor, such as WearableSensor? | What higher-level groups does WearableSensor belong to in the ontology? | Does the category WearableSensor fall under the broader classification of Sensor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Detection\nDescription: Detection is defined as a subclass of Observation. Individuals classified as Detection must only describe either an event of type AtomicActivity or ObjectEvent, and are restricted to being provided exclusively by a ProcessingComponent. This ensures that each Detection instance is specifically tied to these event types, and clearly attributed to a particular processing component within the system.\nAxiom: {'subClassOf': ['Observation'], 'propertyRestrictions': ['[describes only (event:AtomicActivity or event:ObjectEvent)]', '[providedBy some ProcessingComponent]']}\nGenerated CQs:", "output": "Is it required that the provider of Detection is always a ProcessingComponent? | Can Detection have any provider other than a ProcessingComponent? | Are all sources supplying Detection instances necessarily classified as ProcessingComponent? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Observation\nDescription: Observation is a class characterized by its formal linkage to a single event, as indicated by the restriction that each Observation describes exactly one event:Event. Each Observation is provided by exactly one provider, restricted to being either a event:Person, a ProcessingComponent, or a Sensor. Observations are further annotated with precisely one plausibility metric (hasPlausibilityMetric exactly 1 xsd:double) and exactly one reporting time (hasReportingTime exactly 1 time:Instant). These formal restrictions ensure that an Observation instance unambiguously refers to a specific event, has a single well-defined provider, includes a quantitative plausibility assessment, and records the precise time at which the observation was reported.\nAxiom: {'propertyRestrictions': ['[describes only event:Event]', '[providedBy only (event:Person or ProcessingComponent or Sensor)]', '[describes exactly 1 event:Event]', '[hasPlausibilityMetric only xsd:double]', '[hasReportingTime only time:Instant]', '[hasReportingTime exactly 1 time:Instant]', '[hasPlausibilityMetric exactly 1 xsd:double]', '[providedBy exactly 1 (event:Person and ProcessingComponent and Sensor)]']}\nGenerated CQs:", "output": "Is each Observation required to have exactly one provider, which must be either an event:Person, a ProcessingComponent, or a Sensor? | Can an Observation ever have its providedBy property assigned to more than one instance among event:Person, ProcessingComponent, or Sensor? | Does the property restriction for providedBy on Observation exclude all providers except event:Person, ProcessingComponent, or Sensor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sensor\nDescription: Sensor is a class characterized by the restriction that every instance must be attached to exactly one entity from the event:Entity class; no sensor can be attached to more than one, nor to any entity outside of event:Entity. This ensures a one-to-one association between each sensor and an event entity.\nAxiom: {'propertyRestrictions': ['[attachedTo exactly 1 event:Entity]', '[attachedTo some event:Entity]']}\nGenerated CQs:", "output": "Is it required that every Sensor be attached only to instances of event:Entity? | Can a Sensor ever be attached to something other than an event:Entity? | Does the ontology restrict a Sensor’s attachedTo property exclusively to event:Entity instances? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Recognition\nDescription: Recognition is defined as a subclass of Observation, representing a specific type of observation process. It is further constrained such that any instance of Recognition must be provided only by either a Person or a ProcessingComponent, ensuring that the source of recognition events is always one of these two entities. This formalization distinguishes Recognition events from other Observations based on their permissible providers.\nAxiom: {'subClassOf': ['Observation'], 'propertyRestrictions': ['[providedBy only (event:Person or ProcessingComponent)]', '[describes only event:ComplexActivity]']}\nGenerated CQs:", "output": "Does the Recognition property only describe events classified as ComplexActivity? | Is it required that Recognition property never describes any event other than those of type ComplexActivity? | Can Recognition property refer to events not categorized as ComplexActivity under this restriction? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Result\nDescription: Result is a class characterized by several property restrictions: each Result must be described by exactly one DaySummary or Problem, and may only describe these types. Each Result must be provided by exactly one entity, which can be either a Person or a ProcessingComponent, and may only be provided by these types. Furthermore, each Result must have exactly one reporting time, which must be an instance of time:Instant. Results may have plausibility metrics, represented only by values of type xsd:double. These restrictions ensure that every Result is uniquely linked to its source, time, and subject, reflecting precise and validated reporting.\nAxiom: {'propertyRestrictions': ['[providedBy exactly 1 (event:Person or ProcessingComponent)]', '[hasReportingTime exactly 1 time:Instant]', '[hasReportingTime only time:Instant]', '[describes only (home:DaySummary or home:Problem)]', '[providedBy only (event:Person or ProcessingComponent)]', '[hasPlausibilityMetric only xsd:double]', '[describes exactly 1 (home:DaySummary or home:Problem)]', '[hasPlausibilityMetric exactly 1 xsd:double]']}\nGenerated CQs:", "output": "Is each Result entity associated with exactly one plausibility metric value of type xsd:double? | Can a Result have more than one plausibility metric assigned to it? | Is it possible for a Result to lack a plausibility metric of type xsd:double? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: roomLocalisation\nDescription: The property \"roomLocalisation\" has no explicitly defined domain, range, or characteristics, and is not specified as a sub-property or inverse of any other property. In the absence of further axioms or existing description, its use and related entities remain unspecified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What entities can serve as the domain for the property 'roomLocalisation'? | Is it correct that the property 'roomLocalisation' has no domain specified? | Is it correct that the property 'roomLocalisation' has no range defined? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasParticipant\nDescription: The property \"hasParticipant\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. It can be used to relate any two individuals in the ontology without restriction. No additional description or constraints are provided by the axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of entities are permitted as subjects of the 'hasParticipant' property? | Is it correct that the property 'hasParticipant' does not specify any domain? | What kinds of entities can appear as the value of the 'hasParticipant' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasQuality\nDescription: The property \"hasQuality\" has no explicitly defined characteristics, domain, or range restrictions. It does not specify any super-properties or inverse properties. This property is generally intended to associate an entity with a quality but its precise usage is not restricted by axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'hasQuality' does not specify a range? | Can 'hasQuality' be used with any type of subject entity? | Is it correct that the property 'hasQuality' does not have a specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasAgent\nDescription: The property \"hasAgent\" does not have asserted characteristics, domain, or range restrictions. It is not defined as a sub-property of any other property and has no specified inverse. This property is intended to relate entities to their agents, but its usage is not formally constrained by ontology axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'hasAgent' does not have a specified range? | What can be the range of the property 'hasAgent'? | Is it correct that the property 'hasAgent' does not have a specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: providedBy\nDescription: The property \"providedBy\" has no specified characteristics, domain, or range, and is not defined as a sub-property of or inverse to any other property. Its use and applicable classes are unrestricted, indicating a general-purpose relationship for associating entities with their providers.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What are the possible domains for the property 'providedBy'? | Which types of subjects can 'providedBy' be used with? | What can serve as the range for the property 'providedBy'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: duration\nDescription: The property \"duration\" has no explicitly defined characteristics, domain, or range restrictions, and does not specify any super-properties or inverse properties. It is used to relate entities to their duration, but the types of subjects or objects are not formally constrained.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'duration' have any type of value as its range, or should it be restricted to a specific class? | Can 'duration' be applied to any subject, or should it be restricted to specific classes? | Is it correct that the property 'duration' does not have a specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasPlausibilityMetric\nDescription: The property \"hasPlausibilityMetric\" has no explicitly defined characteristics, domain, or range constraints. It is not specified as a sub-property of any other property and has no defined inverse. The purpose of this property is not currently described and would depend on its intended use within the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that 'hasPlausibilityMetric' has no defined range in the ontology? | Are there any constraints limiting the range of values for 'hasPlausibilityMetric'? | Is it correct that the property 'hasPlausibilityMetric' does not specify a domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: attachedTo\nDescription: The property \"attachedTo\" has no explicitly defined characteristics, domain, or range restrictions and is not specified as a sub-property or an inverse of any other property. This indicates that \"attachedTo\" is a general-purpose property intended to express an unspecified attachment relationship between entities.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it appropriate for 'attachedTo' to have no specified domain? | Is there any range specified for the property 'attachedTo'? | What can be the domain of the property 'attachedTo'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: startTime\nDescription: The property \"startTime\" has no explicitly defined characteristics, domain, or range restrictions. It is not specified as a sub-property of any other property and has no inverse property declared. Its intended usage is not further detailed by current axioms or description.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What entities or data types are allowed as the range of the property 'startTime'? | Is it correct that the property 'startTime' does not have a defined range? | Is it correct that the property 'startTime' has no specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: refersTo\nDescription: The property \"refersTo\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. This indicates its use is unconstrained with respect to the types of entities it connects, allowing it to relate any two individuals without restriction.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of entities can appear as the object of the 'refersTo' property? | What entities can serve as the domain of the property 'refersTo'? | Can 'refersTo' have subjects that do not belong to any particular class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: describes\nDescription: The property \"describes\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. It is a general property intended to associate one entity with another in a descriptive relationship, without restrictions on the types of entities it connects.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'describes' has no specified range? | What types of entities, if any, can act as the subject for the 'describes' property? | Is it correct that the property 'describes' has no specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasReportingTime\nDescription: The property \"hasReportingTime\" has no explicitly defined characteristics, domain, or range restrictions. It is not specified as a subproperty of any other property and does not have an inverse property. No additional description or constraints are currently provided, indicating that its intended usage and value type are not restricted by the ontology at this stage.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'hasReportingTime' does not specify any domain? | Can a range be specified for 'hasReportingTime', and if so, what should it be? | Can 'hasReportingTime' be used with subjects of any class, or are there restrictions? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: American\nDescription: American is defined as a subclass of NamedPizza and is explicitly disjoint from several other specific pizza types, such as Mushroom, LaReine, Napoletana, and others, ensuring that an individual cannot simultaneously belong to more than one of these classes. Members of the American class must have the following toppings: tomato topping, pepperoni sausage topping, and mozzarella topping. Furthermore, they can have only mozzarella, pepperoni sausage, or tomato as toppings—no other toppings are permitted. Additionally, the country of origin for this pizza is specified as America. This formalization distinguishes the American pizza by its unique combination of toppings and origin, while preventing any overlap with the other named pizzas.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some PeperoniSausageTopping]', '[hasCountryOfOrigin hasValue America]', '[hasTopping some MozzarellaTopping]', '[hasTopping only (MozzarellaTopping or PeperoniSausageTopping or TomatoTopping)]']}\nGenerated CQs:", "output": "Is there any logical relationship specified between American and PrinceCarlo in the ontology? | Could an individual be classified as both American and PrinceCarlo at once? | Which classes are marked as mutually exclusive with PrinceCarlo? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Capricciosa\nDescription: Capricciosa is defined as a subclass of NamedPizza, and is explicitly disjoint from a range of other specified pizza types, ensuring no individual can simultaneously belong to Capricciosa and any of those classes. Members of Capricciosa must have at least one topping each of tomato, ham, olive, mozzarella, anchovies, peperonata, and caper. Additionally, their toppings are strictly limited to only anchovies, mozzarella, tomato, peperonata, ham, caper, or olive—no other toppings are permitted. This formalization ensures a precise and consistent definition for Capricciosa pizza within the ontology.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some HamTopping]', '[hasTopping only (AnchoviesTopping or MozzarellaTopping or TomatoTopping or PeperonataTopping or HamTopping or CaperTopping or OliveTopping)]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some AnchoviesTopping]', '[hasTopping some PeperonataTopping]', '[hasTopping some CaperTopping]']}\nGenerated CQs:", "output": "How does the ontology formally distinguish between Capricciosa and American pizzas? | Is it allowable for a pizza to be classified as both Capricciosa and American simultaneously? | Which named pizza classes are specified as being disjoint with Capricciosa in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FourSeasons\nDescription: FourSeasons is a subclass of NamedPizza and is explicitly disjoint from several other specific pizza classes, ensuring that no pizza can be simultaneously classified as FourSeasons and any of the listed disjoint pizzas (such as Mushroom, Margherita, QuattroFormaggi, etc.). Members of the FourSeasons class are characterized by having at least one of each of the following toppings: mushroom, tomato, peperoni sausage, olive, mozzarella, anchovies, and capers. Additionally, the set of possible toppings for FourSeasons pizzas is restricted to only anchovies, mozzarella, peperoni sausage, tomato, capers, olives, and mushrooms—no other toppings are permitted. This formalization captures the standard combinatory topping profile of the FourSeasons pizza variant.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera'], 'propertyRestrictions': ['[hasTopping some MushroomTopping]', '[hasTopping some TomatoTopping]', '[hasTopping some PeperoniSausageTopping]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping only (AnchoviesTopping or MozzarellaTopping or PeperoniSausageTopping or TomatoTopping or CaperTopping or OliveTopping or MushroomTopping)]', '[hasTopping some AnchoviesTopping]', '[hasTopping some CaperTopping]']}\nGenerated CQs:", "output": "How does the ontology represent the separation between FourSeasons and AmericanHot pizzas? | Is any pizza instance allowed to belong to both the FourSeasons and AmericanHot categories? | What pizza types are declared as mutually exclusive with FourSeasons? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LaReine\nDescription: LaReine is defined as a subclass of NamedPizza and is declared disjoint with a number of other specific pizza classes, including Mushroom, Napoletana, Veneziana, and others—ensuring no individual pizza can be classified as both a LaReine and any of these listed classes. \n\nLaReine pizzas are characterized by several property restrictions: every LaReine pizza must have at least one topping of each of the following types—MushroomTopping, TomatoTopping, HamTopping, OliveTopping, and MozzarellaTopping. Additionally, the only permitted toppings for LaReine pizzas are MozzarellaTopping, TomatoTopping, HamTopping, OliveTopping, or MushroomTopping; no other toppings are allowed. This ensures that the LaReine pizza is strictly defined by this specific set of ingredients.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some MushroomTopping]', '[hasTopping some TomatoTopping]', '[hasTopping some HamTopping]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping only (MozzarellaTopping or TomatoTopping or HamTopping or OliveTopping or MushroomTopping)]']}\nGenerated CQs:", "output": "What logical separation is defined between LaReine and Caprina in the ontology? | Is there any entity that can belong to both LaReine and Caprina classes simultaneously? | Which classes are specified as mutually exclusive with Caprina? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Napoletana\nDescription: Napoletana is defined as a subclass of NamedPizza and is explicitly disjoint with a wide range of other specific pizza types, ensuring that no individual pizza can simultaneously belong to Napoletana and any of those classes. Members of the Napoletana class must have toppings including tomato, olive, mozzarella, anchovies, and capers, with the restriction that only these toppings (and no others) are permitted. Additionally, the country of origin for Napoletana is restricted to Italy. This class therefore represents a distinct and well-defined type of pizza with a uniquely specified combination of Italian origin and allowable toppings.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some AnchoviesTopping]', '[hasCountryOfOrigin hasValue Italy]', '[hasTopping some CaperTopping]', '[hasTopping only (AnchoviesTopping or MozzarellaTopping or TomatoTopping or CaperTopping or OliveTopping)]']}\nGenerated CQs:", "output": "How are Napoletana and American classified in relation to each other within the ontology? | Is there any instance that can simultaneously belong to both Napoletana and American categories? | Which classes are defined as disjoint with American in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PrinceCarlo\nDescription: PrinceCarlo is defined as a subclass of NamedPizza, making it a specific kind of pizza with a distinct identity. It is explicitly disjoint with a comprehensive set of other named pizzas, such that no individual pizza can be simultaneously classified as PrinceCarlo and any of those other pizzas (e.g., Mushroom, LaReine, Napoletana, etc.).\n\nFrom the property restrictions, any PrinceCarlo pizza must have at least the following toppings: TomatoTopping, MozzarellaTopping, ParmesanTopping, LeekTopping, and RosemaryTopping. Furthermore, the only toppings permitted on a PrinceCarlo pizza are LeekTopping, RosemaryTopping, MozzarellaTopping, TomatoTopping, and ParmesanTopping. This formalization ensures that PrinceCarlo pizzas are uniquely characterized by this specific and exclusive combination of toppings, and cannot include any others.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping only (LeekTopping or RosemaryTopping or MozzarellaTopping or TomatoTopping or ParmesanTopping)]', '[hasTopping some MozzarellaTopping]', '[hasTopping some ParmesanTopping]', '[hasTopping some LeekTopping]', '[hasTopping some RosemaryTopping]']}\nGenerated CQs:", "output": "How does the ontology define the separation between PrinceCarlo and Napoletana? | Is it allowed for an individual to be classified as both PrinceCarlo and Napoletana? | Which classes are explicitly declared as mutually exclusive with PrinceCarlo? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Siciliana\nDescription: Siciliana is a subclass of NamedPizza, explicitly disjoint from numerous other specific pizza types, ensuring that no individual pizza can be simultaneously classified as Siciliana and any of the listed varieties (e.g., Mushroom, Margherita, FourSeasons, etc.). Siciliana pizzas are characterized by their toppings: they must include some tomato topping, garlic topping, ham topping, artichoke topping, olive topping, mozzarella topping, and anchovies topping. Furthermore, these pizzas are restricted to only have toppings from the following: anchovies, mozzarella, garlic, artichoke, tomato, ham, and olive—no additional toppings are permitted. This formalization precisely defines the Siciliana pizza in terms of both its composition and differentiation from other pizzas.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some GarlicTopping]', '[hasTopping some HamTopping]', '[hasTopping some ArtichokeTopping]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some AnchoviesTopping]', '[hasTopping only (AnchoviesTopping or MozzarellaTopping or GarlicTopping or ArtichokeTopping or TomatoTopping or HamTopping or OliveTopping)]']}\nGenerated CQs:", "output": "How does the ontology formally distinguish between Siciliana and LaReine pizza types? | Is there any circumstance where an individual can be classified as both Siciliana and LaReine? | Which pizza varieties are specified as mutually exclusive with LaReine? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: UnclosedPizza\nDescription: UnclosedPizza is defined as a subclass of NamedPizza, disjoint with a specific set of pizzas including Mushroom, AmericanHot, Margherita, and others, ensuring mutual exclusivity with these named varieties. Every UnclosedPizza is characterized by having at least one MozzarellaTopping, but there is no restriction on additional toppings. As described, membership in UnclosedPizza does not imply classification as either a VegetarianPizza or a NonVegetarianPizza, as its topping composition may be incomplete or unspecified. This formalization supports the open nature of its topping definitions within the ontology.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some MozzarellaTopping]']}\nGenerated CQs:", "output": "How are UnclosedPizza and Parmense differentiated within the ontology? | Is any pizza instance allowed to belong to both UnclosedPizza and Parmense categories? | Which classes are specified as mutually exclusive with Parmense? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AnchoviesTopping\nDescription: AnchoviesTopping is modeled as a subclass of FishTopping, signifying that it is a specific type of fish-based topping. It is explicitly disjoint with both MixedSeafoodTopping and PrawnsTopping, meaning an individual instance cannot simultaneously be categorized as AnchoviesTopping and either of those other toppings. This ensures a clear and mutually exclusive classification among these seafood-themed pizza toppings.\nAxiom: {'subClassOf': ['FishTopping'], 'disjointWith': ['PrawnsTopping']}\nGenerated CQs:", "output": "How does the ontology specify the distinction between AnchoviesTopping and MixedSeafoodTopping? | Is it permitted for a topping to be classified as both Anchovies and MixedSeafood within the ontology? | What other topping types are declared as mutually exclusive with AnchoviesTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PrawnsTopping\nDescription: PrawnsTopping is defined as a subclass of FishTopping, indicating it is a specific kind of fish-based topping. It is explicitly disjoint with both MixedSeafoodTopping and AnchoviesTopping, which means no individual topping can simultaneously be classified as PrawnsTopping and either of the other two classes. This formalization ensures that members of PrawnsTopping are uniquely identifiable as prawn-based toppings, distinct from other seafood or anchovy-based toppings.\nAxiom: {'subClassOf': ['FishTopping'], 'disjointWith': ['MixedSeafoodTopping']}\nGenerated CQs:", "output": "What is the ontological separation between PrawnsTopping and AnchoviesTopping? | Is there any instance that can simultaneously be classified as both PrawnsTopping and AnchoviesTopping? | Which toppings are stated to be mutually exclusive with AnchoviesTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CheeseyVegetableTopping\nDescription: CheeseyVegetableTopping is defined as a subclass of both VegetableTopping and CheeseTopping. However, since these two parent classes are disjoint, CheeseyVegetableTopping is necessarily inconsistent—no individual can simultaneously belong to both parent classes. As a result, this class cannot have any members. This scenario is often used in ontology modeling tutorials (such as called ProbeInconsistentTopping in the ProtegeOWL Tutorial) to demonstrate the effects of disjointness and inconsistency in class hierarchies.\nAxiom: {'subClassOf': ['CheeseTopping']}\nGenerated CQs:", "output": "Is CheeseyVegetableTopping classified as a kind of VegetableTopping? | Which toppings fall under the category of VegetableTopping, such as CheeseyVegetableTopping? | What more general topping types encompass CheeseyVegetableTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: OliveTopping\nDescription: OliveTopping is defined as a subclass of VegetableTopping and is disjoint with other vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping—meaning an individual cannot belong to both OliveTopping and any of these classes. Members of the OliveTopping class are further characterized by the property that they have at least some level of spiciness classified as mild.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness some Mild]']}\nGenerated CQs:", "output": "What is the ontological separation between OliveTopping and CaperTopping? | Is there any instance that can be assigned to both OliveTopping and CaperTopping? | Which topping classes are specified as mutually exclusive with CaperTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PepperTopping\nDescription: PepperTopping is defined as a subclass of VegetableTopping, indicating it is a specific type of vegetable-based topping. It is explicitly disjoint with RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping—meaning no individual can simultaneously be a PepperTopping and any of these other vegetable topping classes. This establishes PepperTopping as a distinct and non-overlapping category within vegetable toppings.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'AsparagusTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping']}\nGenerated CQs:", "output": "What ontological criterion separates PepperTopping from OliveTopping? | Is there any topping entity classified under both PepperTopping and OliveTopping? | Which topping categories are defined as mutually exclusive with OliveTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TomatoTopping\nDescription: TomatoTopping is a subclass of VegetableTopping, representing toppings derived from tomatoes. It is explicitly disjoint with other vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, and PetitPoisTopping, ensuring that no individual can simultaneously be both a TomatoTopping and any of these other toppings. Additionally, TomatoTopping is defined to always have some level of mild spiciness, as specified by the restriction [hasSpiciness some Mild].\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping'], 'propertyRestrictions': ['[hasSpiciness some Mild]']}\nGenerated CQs:", "output": "How are TomatoTopping and AsparagusTopping differentiated within the ontology? | Is it permissible for a pizza to include both TomatoTopping and AsparagusTopping simultaneously? | Which topping classes are specified as disjoint with AsparagusTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CheeseTopping\nDescription: CheeseTopping is defined as a subclass of PizzaTopping, representing toppings made from cheese products that are used on pizzas. It is explicitly disjoint from other topping types such as MeatTopping, SauceTopping, VegetableTopping, FishTopping, HerbSpiceTopping, NutTopping, and FruitTopping, ensuring that no individual topping instance can simultaneously belong to both CheeseTopping and any of these other topping categories. This classification enforces a clear distinction between cheese-based toppings and all other types of pizza toppings.\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['SauceTopping', 'VegetableTopping', 'FishTopping', 'HerbSpiceTopping', 'NutTopping', 'FruitTopping']}\nGenerated CQs:", "output": "How does the ontology represent the exclusivity between CheeseTopping and MeatTopping? | Is it allowed for a topping to be classified as both CheeseTopping and MeatTopping? | Which classes are defined as disjoint with MeatTopping in the knowledge model? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FruitTopping\nDescription: FruitTopping is defined as a subclass of PizzaTopping, meaning it represents a specific type of topping used on pizzas. It is explicitly disjoint with MeatTopping, SauceTopping, VegetableTopping, CheeseTopping, FishTopping, HerbSpiceTopping, and NutTopping, ensuring that no topping can simultaneously belong to FruitTopping and any of these other topping categories. This formalization guarantees that FruitTopping exclusively includes toppings derived from fruit and distinguishes them from all other major topping types.\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['MeatTopping', 'VegetableTopping', 'CheeseTopping', 'FishTopping', 'HerbSpiceTopping', 'NutTopping']}\nGenerated CQs:", "output": "What is the formal separation defined between FruitTopping and SauceTopping in the ontology? | Can a single topping instance belong to both FruitTopping and SauceTopping categories? | Which classes of toppings are specified as disjoint with SauceTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MeatTopping\nDescription: MeatTopping is defined as a subclass of PizzaTopping, representing toppings derived specifically from meat products. It is disjoint with SauceTopping, VegetableTopping, CheeseTopping, FishTopping, HerbSpiceTopping, NutTopping, and FruitTopping, ensuring that no single topping instance can simultaneously belong to both MeatTopping and any of these other topping categories. This formalization enforces a clear categorical separation between meat-based and other types of pizza toppings.\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['SauceTopping', 'VegetableTopping', 'CheeseTopping', 'FishTopping', 'NutTopping', 'FruitTopping']}\nGenerated CQs:", "output": "What ontological separation is established between MeatTopping and HerbSpiceTopping? | Is any topping allowed to be classified simultaneously as a MeatTopping and an HerbSpiceTopping? | Which topping categories are defined as mutually exclusive with HerbSpiceTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: VegetableTopping\nDescription: VegetableTopping is defined as a subclass of PizzaTopping, representing pizza toppings that are derived from vegetables. It is explicitly disjoint with MeatTopping, SauceTopping, CheeseTopping, FishTopping, HerbSpiceTopping, NutTopping, and FruitTopping, ensuring that no topping can simultaneously belong to VegetableTopping and any of these other topping categories. This formalization guarantees that VegetableTopping exclusively encompasses toppings of vegetable origin, and clearly separates it from other distinct topping types used on pizzas.\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['MeatTopping', 'CheeseTopping', 'FishTopping', 'HerbSpiceTopping', 'NutTopping', 'FruitTopping']}\nGenerated CQs:", "output": "How are VegetableTopping and SauceTopping differentiated within the ontology? | Is there any entity that can simultaneously be classified as both a VegetableTopping and a SauceTopping? | Which classes are defined as disjoint with SauceTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ParmesanTopping\nDescription: ParmesanTopping is defined as a subclass of CheeseTopping, representing cheese-based toppings specifically comprised of parmesan. It is explicitly disjoint from GoatsCheeseTopping, MozzarellaTopping, GorgonzolaTopping, and FourCheesesTopping, ensuring no individual can simultaneously belong to these classes. Members of this class are characterized by having some level of mild spiciness, as specified by the property restriction [hasSpiciness some Mild].\nAxiom: {'subClassOf': ['CheeseTopping'], 'disjointWith': ['MozzarellaTopping', 'GorgonzolaTopping', 'FourCheesesTopping'], 'propertyRestrictions': ['[hasSpiciness some Mild]']}\nGenerated CQs:", "output": "What is the formal association defined between ParmesanTopping and GoatsCheeseTopping in the ontology? | Is it allowable for a pizza to have both ParmesanTopping and GoatsCheeseTopping simultaneously? | Which topping categories are specified as mutually exclusive with GoatsCheeseTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HamTopping\nDescription: HamTopping is defined as a subclass of MeatTopping, indicating that it is a type of meat-based pizza topping. It is explicitly disjoint with PeperoniSausageTopping, HotSpicedBeefTopping, and ChickenTopping, meaning an individual topping cannot simultaneously be classified as ham and any of these other meat toppings. This formalization ensures that HamTopping remains distinct from other specific meat toppings within the ontology.\nAxiom: {'subClassOf': ['MeatTopping'], 'disjointWith': ['HotSpicedBeefTopping', 'ChickenTopping']}\nGenerated CQs:", "output": "What differentiates HamTopping from PeperoniSausageTopping in the ontology? | Is there any instance that belongs to both HamTopping and PeperoniSausageTopping simultaneously? | Which toppings are asserted as incompatible with HamTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DeepPanBase\nDescription: DeepPanBase is defined as a subclass of PizzaBase, establishing it as a specific type of pizza base. It is explicitly disjoint with ThinAndCrispyBase, which means that no pizza base can simultaneously be classified as both a DeepPanBase and a ThinAndCrispyBase. This formalization ensures clear differentiation between thick, deep pan styles and thin, crispy bases within the ontology.\nAxiom: {'subClassOf': ['PizzaBase'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology distinguish between DeepPanBase and ThinAndCrispyBase? | Is it permissible for a pizza base to be classified as both DeepPanBase and ThinAndCrispyBase? | Which base types are specified as mutually exclusive with DeepPanBase in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GreenPepperTopping\nDescription: GreenPepperTopping is defined as a subclass of PepperTopping, indicating it inherits all characteristics of pepper-based pizza toppings. It is explicitly disjoint with SweetPepperTopping, JalapenoPepperTopping, and PeperonataTopping—ensuring that no instance can simultaneously belong to more than one of these classes. This formalization distinguishes green pepper toppings from other specific pepper varieties within the ontology.\nAxiom: {'subClassOf': ['PepperTopping'], 'disjointWith': ['SweetPepperTopping', 'JalapenoPepperTopping']}\nGenerated CQs:", "output": "How does the ontology specify the relationship between GreenPepperTopping and PeperonataTopping? | Is an instance allowed to be classified as both GreenPepperTopping and PeperonataTopping? | Which classes are formally stated as disjoint from PeperonataTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Hot\nDescription: Hot is defined as a subclass of Spiciness, indicating it represents an elevated or intense level of spicy sensation. It is explicitly disjoint with the classes Mild and Medium, ensuring that no instance can be both Hot and either Mild or Medium at the same time. This formalization clarifies that Hot describes a distinct, non-overlapping intensity within the spectrum of spiciness.\nAxiom: {'subClassOf': ['Spiciness'], 'disjointWith': ['Medium']}\nGenerated CQs:", "output": "What type of logical separation is defined between Hot and Mild? | Is it allowed for an entity to be classified as both Hot and Mild simultaneously? | Which classes, apart from Mild, are explicitly stated as disjoint with Hot? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Mild\nDescription: Mild is a subclass of Spiciness, representing a specific level of spiciness distinct from other grades. It is explicitly disjoint with both Hot and Medium, ensuring that an instance classified as Mild cannot simultaneously be classified as Hot or Medium. This enforces a clear and exclusive categorization among the spiciness levels.\nAxiom: {'subClassOf': ['Spiciness'], 'disjointWith': ['Hot']}\nGenerated CQs:", "output": "What logical separation is specified between Mild and Medium within the ontology? | Is it possible for an item to be classified as both Mild and Medium simultaneously? | Which classes are formally declared as disjoint with Medium? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PizzaBase\nDescription: PizzaBase is defined as a subclass of Food, indicating that every PizzaBase is a type of food. It is explicitly disjoint with IceCream, Pizza, and PizzaTopping, ensuring that an individual cannot simultaneously be a PizzaBase and any of these other classes. This formalization distinguishes PizzaBase as a unique foundational component in food ontology, separate from finished pizzas, their toppings, or dessert items like ice cream.\nAxiom: {'subClassOf': ['Food'], 'disjointWith': ['IceCream', 'PizzaTopping']}\nGenerated CQs:", "output": "How does the ontology specify the differentiation between PizzaBase and Pizza? | Is there any instance that can simultaneously be classified as both PizzaBase and Pizza? | Which classes are declared disjoint with PizzaBase according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SundriedTomatoTopping\nDescription: SundriedTomatoTopping is a subclass of TomatoTopping, meaning it inherits all characteristics typical of tomato-based toppings. It is defined as disjoint with SlicedTomatoTopping, ensuring that an individual cannot be both a SundriedTomatoTopping and a SlicedTomatoTopping. Additionally, every instance of SundriedTomatoTopping must have at least some mild level of spiciness, as specified by the property restriction (hasSpiciness some Mild).\nAxiom: {'subClassOf': ['TomatoTopping'], 'disjointWith': [], 'propertyRestrictions': ['[hasSpiciness some Mild]']}\nGenerated CQs:", "output": "How does the ontology represent the incompatibility between SundriedTomatoTopping and SlicedTomatoTopping? | Is it allowed for a pizza to include both SundriedTomatoTopping and SlicedTomatoTopping according to the ontology? | Which topping classes are specified as disjoint with SlicedTomatoTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TobascoPepperSauce\nDescription: TobascoPepperSauce is defined as a subclass of SauceTopping, indicating it is a specific type of sauce used as a topping. All members of this class are required to have the property hasSpiciness with at least some value classified as Hot, meaning every TobascoPepperSauce must exhibit a hot level of spiciness.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[hasSpiciness some Hot]']}\nGenerated CQs:", "output": "Is TobascoPepperSauce classified as a subcategory of SauceTopping? | Which toppings are more specific instances under SauceTopping, such as TobascoPepperSauce? | To which broader topping classes does TobascoPepperSauce belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RealItalianPizza\nDescription: RealItalianPizza is formally defined as any Pizza whose country of origin is Italy, ensuring strict geographical provenance. Additionally, all RealItalianPizzas are restricted to having only ThinAndCrispyBase as their base. This definition ensures that the class exclusively contains pizzas originating from Italy with thin and crispy bases, faithfully reflecting the intended concept that authentic Italian pizzas are characterized both by their origin and their base type.\nAxiom: {'equivalentClass': [], 'propertyRestrictions': ['[hasBase only ThinAndCrispyBase]']}\nGenerated CQs:", "output": "Is RealItalianPizza equivalent to the intersection of Pizza and those whose country of origin is Italy? | Does every RealItalianPizza necessarily have Italy as its country of origin? | Can RealItalianPizza be fully defined as a Pizza that is specifically from Italy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Food\nDescription: Food is defined as a subclass of DomainConcept. This means that every instance of Food is considered a type of DomainConcept, representing consumable items or substances within the modeled domain. No further restrictions or disjoint relationships are specified in the current axiom.\nAxiom: {'subClassOf': ['DomainConcept']}\nGenerated CQs:", "output": "Is Food classified under the broader category of DomainConcept? | Which more specific classes, such as Food, are encompassed by DomainConcept? | What general categories is Food a member of within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NamedPizza\nDescription: NamedPizza is defined as a subclass of Pizza, representing pizzas that are explicitly listed or recognized on a pizza menu. Members of this class inherit all properties of Pizza and are distinguished by being menu-identified variants, rather than custom or unnamed creations.\nAxiom: {'subClassOf': ['Pizza']}\nGenerated CQs:", "output": "Which categories encompass NamedPizza as a member? | Is NamedPizza classified as a type of Pizza? | What specific varieties are encompassed within the supercategory Pizza, including NamedPizza? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PineKernels\nDescription: PineKernels is defined as a subclass of NutTopping, indicating that all PineKernels are considered a type of nut-based topping. No further property restrictions or disjointness axioms are specified, so individuals classified as PineKernels inherit all characteristics of NutTopping.\nAxiom: {'subClassOf': ['NutTopping']}\nGenerated CQs:", "output": "Which toppings are defined as more specific forms of NutTopping, such as PineKernels? | Is PineKernels classified under the broader group of NutTopping? | What more general topping categories include PineKernels as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RedOnionTopping\nDescription: RedOnionTopping is defined as a subclass of OnionTopping, representing toppings specifically comprised of red onion. All individuals classified as RedOnionTopping inherit the characteristics and constraints applicable to OnionTopping.\nAxiom: {'subClassOf': ['OnionTopping']}\nGenerated CQs:", "output": "Which toppings are specified as subclasses of OnionTopping, such as RedOnionTopping? | Is RedOnionTopping categorized under the broader class of OnionTopping? | What parent classes does RedOnionTopping belong to within the topping hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DomainConcept\nDescription: DomainConcept is a class that is explicitly disjoint with ValuePartition, meaning no individual can simultaneously be a member of both DomainConcept and ValuePartition. This ensures a clear separation between entities considered DomainConcepts and those defined as ValuePartitions within the ontology.\nAxiom: {'disjointWith': ['ValuePartition']}\nGenerated CQs:", "output": "How does the ontology differentiate between DomainConcept and ValuePartition? | Which classes are specified as disjoint with ValuePartition? | Is there any instance that can belong to both DomainConcept and ValuePartition? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ValuePartition\nDescription: ValuePartition is a pattern used to represent a set of mutually exclusive and exhaustive subclasses that serve as the only permissible values for a particular property. It is disjoint with DomainConcept, ensuring that no individual can belong to both classes. The parent ValuePartition class is employed in property restrictions, and its subclasses collectively cover all possible values for the property—membership cannot extend beyond these predefined subclasses without modifying the ValuePartition. This structure enforces a fixed set of alternatives, supporting controlled vocabularies and value enumerations within the ontology.\nAxiom: {'disjointWith': ['DomainConcept']}\nGenerated CQs:", "output": "How are ValuePartition and DomainConcept differentiated within the ontology? | Which classes are specified as disjoint with DomainConcept? | Is there any entity that can simultaneously be a ValuePartition and a DomainConcept? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cajun\nDescription: Cajun is defined as a subclass of NamedPizza and is explicitly disjoint with a variety of other pizza types, ensuring that no pizza can belong to Cajun and any of the disjoint classes simultaneously. Each Cajun pizza must have, as toppings, tomato, Tobasco pepper sauce, mozzarella, onion, peperonata, and prawns. Furthermore, the only allowed toppings on a Cajun pizza are prawn, Tobasco pepper sauce, mozzarella, tomato, onion, and peperonata. This formalization strictly characterizes Cajun pizzas by both required and exclusive toppings, distinguishing them from other named pizzas.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some TobascoPepperSauce]', '[hasTopping some MozzarellaTopping]', '[hasTopping some OnionTopping]', '[hasTopping some PeperonataTopping]', '[hasTopping some PrawnsTopping]', '[hasTopping some (PrawnsTopping and TobascoPepperSauce and MozzarellaTopping and TomatoTopping and OnionTopping and PeperonataTopping)]']}\nGenerated CQs:", "output": "Is a Cajun pizza restricted to having only Prawns, Tobasco Pepper Sauce, Mozzarella, Tomato, Onion, or Peperonata as its toppings? | Can any topping other than Prawns, Tobasco Pepper Sauce, Mozzarella, Tomato, Onion, or Peperonata be present on a Cajun pizza? | Does every instance of hasTopping for a Cajun pizza necessarily relate to either Prawns, Tobasco Pepper Sauce, Mozzarella, Tomato, Onion, or Peperonata toppings only? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Fiorentina\nDescription: Fiorentina is defined as a subclass of NamedPizza and is explicitly disjoint with a variety of other specific pizza types, ensuring that no individual pizza can simultaneously be classified as both Fiorentina and any of those listed (e.g., Mushroom, Margherita, FourSeasons). Members of the Fiorentina class are characterized by the following topping constraints: they must include at least one of each of the following toppings—TomatoTopping, GarlicTopping, OliveTopping, MozzarellaTopping, ParmesanTopping, and SpinachTopping. Additionally, Fiorentina pizzas are restricted to having only the following toppings: MozzarellaTopping, GarlicTopping, TomatoTopping, SpinachTopping, OliveTopping, or ParmesanTopping. This axiomatisation precisely defines Fiorentina pizzas in terms of both required ingredients and clear differentiation from other pizzas.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping only (MozzarellaTopping or GarlicTopping or TomatoTopping or SpinachTopping or OliveTopping or ParmesanTopping)]', '[hasTopping some GarlicTopping]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some ParmesanTopping]', '[hasTopping some SpinachTopping]', '[hasTopping only TomatoTopping]']}\nGenerated CQs:", "output": "Is it necessary for a Fiorentina to have at least one topping that is a TomatoTopping? | Can a Fiorentina exist without any TomatoTopping among its toppings? | Does the definition of Fiorentina require the presence of TomatoTopping as one of its toppings? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Giardiniera\nDescription: Giardiniera is defined as a subclass of NamedPizza, and is explicitly disjoint from several other pizza classes such as Mushroom, LaReine, Napoletana, and others—ensuring that no pizza can simultaneously be classified as Giardiniera and any of these classes. Members of Giardiniera are characterized by a combination of specific toppings: they must contain at least some MushroomTopping, TomatoTopping, OliveTopping, MozzarellaTopping, SlicedTomatoTopping, PeperonataTopping, PetitPoisTopping, and LeekTopping. Furthermore, Giardiniera pizzas are strictly limited to having toppings only from the set: LeekTopping, MozzarellaTopping, TomatoTopping, PetitPoisTopping, PeperonataTopping, OliveTopping, MushroomTopping, and SlicedTomatoTopping. This formalization ensures that any pizza classified as Giardiniera has an exclusive and characteristic combination of the specified toppings and no others.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some MushroomTopping]', '[hasTopping only (LeekTopping or MozzarellaTopping or TomatoTopping or PetitPoisTopping or PeperonataTopping or OliveTopping or MushroomTopping or SlicedTomatoTopping)]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some SlicedTomatoTopping]', '[hasTopping some PeperonataTopping]', '[hasTopping some PetitPoisTopping]', '[hasTopping some LeekTopping]', '[hasTopping only TomatoTopping]']}\nGenerated CQs:", "output": "Is it required for a Giardiniera to have at least one topping that is a TomatoTopping? | Can an instance of Giardiniera exist without possessing the hasTopping relation to a TomatoTopping? | Does every Giardiniera necessarily include TomatoTopping among its toppings? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Mushroom\nDescription: Mushroom is defined as a subclass of NamedPizza, and it is disjoint from a wide range of other specific pizza types, ensuring that an individual cannot simultaneously belong to the Mushroom class and any of those listed classes. Members of the Mushroom class are required to have MushroomTopping, TomatoTopping, and MozzarellaTopping among their toppings. Additionally, they may only have MozzarellaTopping, TomatoTopping, or MushroomTopping as toppings, and no others. This formalization ensures that Mushroom pizzas are uniquely characterized by the exclusive combination of these three toppings.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some MushroomTopping]', '[hasTopping only (MozzarellaTopping or TomatoTopping or MushroomTopping)]', '[hasTopping some TomatoTopping]', '[hasTopping only MozzarellaTopping]']}\nGenerated CQs:", "output": "Is it necessary for a Mushroom pizza to have at least one Mozzarella topping? | Must every Mushroom pizza include the 'hasTopping' property with MozzarellaTopping as a value? | Can a Mushroom pizza exist without any Mozzarella topping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PolloAdAstra\nDescription: PolloAdAstra is defined as a subclass of NamedPizza and is explicitly disjoint with other specified pizzas, ensuring that no individual pizza can simultaneously be an instance of PolloAdAstra and any of the listed alternative named pizzas. Members of this class must have at least one of each of the following toppings: Red Onion, Cajun Spice, Tomato, Garlic, Sweet Pepper, Mozzarella, and Chicken. Furthermore, the only permissible toppings are Chicken, Mozzarella, Garlic, Tomato, Red Onion, Cajun Spice, and Sweet Pepper; no other toppings are allowed. This formalization provides a precise specification of PolloAdAstra as a distinct pizza type characterized by its unique and restricted combination of toppings.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some RedOnionTopping]', '[hasTopping some CajunSpiceTopping]', '[hasTopping some TomatoTopping]', '[hasTopping some GarlicTopping]', '[hasTopping some SweetPepperTopping]', '[hasTopping only (ChickenTopping or MozzarellaTopping or GarlicTopping or TomatoTopping or RedOnionTopping or CajunSpiceTopping or SweetPepperTopping)]', '[hasTopping some MozzarellaTopping]', '[hasTopping only ChickenTopping]']}\nGenerated CQs:", "output": "Is it required for a PolloAdAstra pizza to have at least one ChickenTopping as a topping? | Can a PolloAdAstra pizza exist without any ChickenTopping among its toppings? | Does every PolloAdAstra pizza include the property hasTopping with a value of ChickenTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Rosa\nDescription: Rosa is defined as a subclass of NamedPizza, explicitly disjoint with a range of other specific pizza types (such as Mushroom, Margherita, AmericanHot, and others), ensuring an individual pizza cannot simultaneously belong to Rosa and any of those disjoint classes. Members of the Rosa class are characterized by their toppings: every Rosa pizza must have at least one TomatoTopping, one GorgonzolaTopping, and one MozzarellaTopping, and it may only contain these three toppings (no other toppings are permitted). This formalization strictly captures the unique identity and allowed ingredients of the Rosa pizza type.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping only (MozzarellaTopping or TomatoTopping or GorgonzolaTopping)]', '[hasTopping some MozzarellaTopping]', '[hasTopping only GorgonzolaTopping]']}\nGenerated CQs:", "output": "Must every Rosa pizza have at least one topping that is Gorgonzola? | Is inclusion of Gorgonzola as a topping a necessary requirement for a pizza to be considered a Rosa? | Can a pizza be classified as Rosa if it does not have any Gorgonzola topping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Soho\nDescription: Soho is defined as a subclass of NamedPizza and is explicitly disjoint with a range of other specific pizza types, ensuring that no instance can simultaneously belong to both Soho and these other classes. Members of the Soho class are characterized by their required toppings: each Soho pizza must include tomato, garlic, olive, mozzarella, parmesan, and rocket toppings. Additionally, the only permitted toppings for Soho pizzas are mozzarella, garlic, tomato, rocket, olive, or parmesan, meaning no other toppings are allowed on this type of pizza. This formalization strictly specifies both the mandatory inclusion and the exclusivity of particular toppings for Soho pizzas.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping only (MozzarellaTopping or GarlicTopping or TomatoTopping or RocketTopping or OliveTopping or ParmesanTopping)]', '[hasTopping some GarlicTopping]', '[hasTopping some OliveTopping]', '[hasTopping some ParmesanTopping]', '[hasTopping some RocketTopping]', '[hasTopping only MozzarellaTopping]']}\nGenerated CQs:", "output": "Is it required for a Soho pizza to have at least one Mozzarella topping? | Can a Soho pizza be classified as such if it does not contain any Mozzarella topping? | Does every Soho pizza necessarily include Mozzarella as one of its toppings? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ArtichokeTopping\nDescription: ArtichokeTopping is defined as a subclass of VegetableTopping and is explicitly disjoint with a range of other vegetable toppings, including RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, ensuring that no individual can be classified as an ArtichokeTopping and any of these other types simultaneously. Furthermore, every member of the ArtichokeTopping class is constrained to have at least some level of mild spiciness (hasSpiciness some Mild), distinguishing it by its gentle flavor profile within the broader category of vegetable toppings.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is every ArtichokeTopping required to have at least one spiciness level classified as Mild? | Can an ArtichokeTopping exist without possessing any degree of spiciness identified as Mild? | Does the definition of ArtichokeTopping permit toppings with only Mild spiciness, or could additional spiciness levels also be present? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AsparagusTopping\nDescription: AsparagusTopping is defined as a subclass of VegetableTopping, meaning it represents a specific type of vegetable-based topping. It is disjoint with several other vegetable toppings, including RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, ensuring that an individual cannot simultaneously belong to any of these classes. Additionally, every instance of AsparagusTopping must have some level of mild spiciness, as specified by the hasSpiciness property restriction.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is every AsparagusTopping required to have at least one 'hasSpiciness' property with a Mild value? | Must AsparagusTopping always be associated with some level of Mild spiciness through the hasSpiciness property? | Can there exist an instance of AsparagusTopping without having any Mild spiciness via the hasSpiciness relationship? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GarlicTopping\nDescription: GarlicTopping is defined as a subclass of VegetableTopping, meaning it is a type of vegetable-based topping. It is explicitly disjoint with several other specific vegetable toppings, such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, ensuring that an individual cannot belong to both GarlicTopping and any of these other topping classes. Additionally, GarlicTopping is characterized by the property that its members must have at least some medium level of spiciness (hasSpiciness some Medium).\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Medium]']}\nGenerated CQs:", "output": "Is it required that every GarlicTopping has at least one spiciness classified as Medium? | Can a GarlicTopping exist without exhibiting any Medium level of spiciness? | Does the definition of GarlicTopping entail the presence of Medium spiciness in at least one instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MushroomTopping\nDescription: MushroomTopping is a subclass of VegetableTopping and is explicitly disjoint from other specific vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, and others—ensuring that no individual can simultaneously belong to more than one of these topping types. Furthermore, MushroomTopping is characterized by the property that it must have some level of mild spiciness (hasSpiciness some Mild). This formalization defines MushroomTopping as a mild-flavored vegetable topping that is distinct from other named vegetable toppings in the ontology.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Must every MushroomTopping possess at least one spiciness classified as Mild? | Is it required that MushroomTopping is associated with some instance of hasSpiciness equal to Mild? | Can a MushroomTopping exist without having any Mild spiciness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PetitPoisTopping\nDescription: PetitPoisTopping is defined as a subclass of VegetableTopping and is explicitly disjoint with other vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, and TomatoTopping—meaning no individual can simultaneously belong to PetitPoisTopping and any of these other topping classes. Additionally, PetitPoisTopping is characterized by the property restriction that it has some level of spiciness classified as Mild. This formalization ensures that PetitPoisTopping represents a unique, mildly spicy vegetable topping distinct from all other specified vegetable toppings.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is it required that a PetitPoisTopping ingredient has at least one spiciness level classified as Mild? | Does every PetitPoisTopping possess the property 'hasSpiciness' relating it to Mild spiciness? | Can a PetitPoisTopping exist without any association to Mild spiciness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SpinachTopping\nDescription: SpinachTopping is defined as a subclass of VegetableTopping and is explicitly disjoint from a variety of other vegetable-based toppings, including RocketTopping, LeekTopping, OnionTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping. Individuals of this class must have at least one hasSpiciness property value that is Mild. This ensures that SpinachTopping exclusively refers to mild, spinach-based toppings that do not overlap with other vegetable toppings in the ontology.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is it required that every SpinachTopping has some degree of spiciness classified as Mild? | Can a SpinachTopping exist without having the property hasSpiciness with at least one Mild value? | Does the definition of SpinachTopping imply the presence of at least one hasSpiciness relation to Mild? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RosemaryTopping\nDescription: RosemaryTopping is defined as a subclass of HerbSpiceTopping, representing toppings that are both herbal and spicy in nature. This class is explicitly disjoint with CajunSpiceTopping, ensuring that no topping can be classified simultaneously as RosemaryTopping and CajunSpiceTopping. RosemaryTopping is further characterized by the property restriction that it must have at least some mild spiciness, distinguishing it from toppings with no or higher levels of spiciness.\nAxiom: {'subClassOf': ['HerbSpiceTopping'], 'disjointWith': ['CajunSpiceTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is every RosemaryTopping required to have a spiciness level that is Mild? | Can a RosemaryTopping exist without any mild spiciness property? | Must all instances of RosemaryTopping possess at least one spiciness classified as Mild? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NutTopping\nDescription: NutTopping is defined as a subclass of PizzaTopping, representing pizza toppings that consist specifically of nuts. It is explicitly disjoint with MeatTopping, SauceTopping, VegetableTopping, CheeseTopping, FishTopping, HerbSpiceTopping, and FruitTopping, ensuring that no topping instance can simultaneously belong to these other topping categories. Additionally, every NutTopping must have at least some level of mild spiciness, as constrained by the property restriction (hasSpiciness some Mild).\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['MeatTopping', 'SauceTopping', 'VegetableTopping', 'CheeseTopping', 'FishTopping', 'HerbSpiceTopping', 'FruitTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is it necessary for a NutTopping to have at least one hasSpiciness property value that is Mild? | Must every instance of NutTopping be associated with some mild level of spiciness through the hasSpiciness property? | Does the presence of a NutTopping imply the existence of a hasSpiciness relationship to Mild? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FourCheesesTopping\nDescription: FourCheesesTopping is defined as a subclass of CheeseTopping, representing a specific type of cheese topping distinguished by its composition of four cheeses. It is declared disjoint with GoatsCheeseTopping, MozzarellaTopping, GorgonzolaTopping, and ParmesanTopping, meaning an individual topping cannot simultaneously be classified as FourCheesesTopping and any of these other specific cheese toppings. Additionally, FourCheesesTopping must have a spiciness level that is at least mildly spicy, as specified by the restriction that it has some Mild spiciness.\nAxiom: {'subClassOf': ['CheeseTopping'], 'disjointWith': ['GoatsCheeseTopping', 'MozzarellaTopping', 'GorgonzolaTopping', 'ParmesanTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Must every FourCheesesTopping have at least one hasSpiciness relationship to Mild? | Is it required for a FourCheesesTopping to exhibit some level of spiciness classified as Mild? | Does the existence of a Mild spiciness property suffice for an instance to be considered a FourCheesesTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GoatsCheeseTopping\nDescription: GoatsCheeseTopping is defined as a subclass of CheeseTopping and is explicitly disjoint with MozzarellaTopping, GorgonzolaTopping, ParmesanTopping, and FourCheesesTopping, meaning an individual topping cannot simultaneously belong to any of these classes. GoatsCheeseTopping is characterized by the property that it has some degree of mild spiciness (hasSpiciness some Mild), indicating that any topping of this class is mildly spicy.\nAxiom: {'subClassOf': ['CheeseTopping'], 'disjointWith': ['MozzarellaTopping', 'GorgonzolaTopping', 'ParmesanTopping', 'FourCheesesTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is it required that any GoatsCheeseTopping must exhibit at least one instance of the hasSpiciness property with value Mild? | Does every GoatsCheeseTopping have an associated spiciness level that includes Mild? | Can a GoatsCheeseTopping exist without being characterized by the hasSpiciness property set to Mild? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MozzarellaTopping\nDescription: MozzarellaTopping is a subclass of CheeseTopping, representing a cheese-based topping specifically characterized by its mild spiciness and Italian origin. It is explicitly disjoint from GoatsCheeseTopping, GorgonzolaTopping, ParmesanTopping, and FourCheesesTopping, ensuring that no individual can simultaneously be an instance of MozzarellaTopping and any of these other cheese topping classes. All individuals of MozzarellaTopping are associated with a mild level of spiciness and must originate from Italy.\nAxiom: {'subClassOf': ['CheeseTopping'], 'disjointWith': ['GoatsCheeseTopping', 'GorgonzolaTopping', 'ParmesanTopping', 'FourCheesesTopping'], 'propertyRestrictions': ['[hasCountryOfOrigin hasValue Italy]', '[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is it required that every MozzarellaTopping has at least some level of spiciness categorized as Mild? | Can a MozzarellaTopping exist without having the hasSpiciness property set to Mild? | Does the presence of MozzarellaTopping entail that it must be associated with a Mild spiciness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HotSpicedBeefTopping\nDescription: HotSpicedBeefTopping is defined as a subclass of MeatTopping, representing a specific type of meat-based pizza topping. It is disjoint with PeperoniSausageTopping, HamTopping, and ChickenTopping, meaning no individual topping can simultaneously belong to any of these classes and HotSpicedBeefTopping. Members of this class are characterized by having at least some degree of spiciness classified as Hot, distinguishing them from other meat toppings in the ontology.\nAxiom: {'subClassOf': ['MeatTopping'], 'disjointWith': ['PeperoniSausageTopping', 'HamTopping', 'ChickenTopping'], 'propertyRestrictions': ['[hasSpiciness only Hot]']}\nGenerated CQs:", "output": "Must every HotSpicedBeefTopping have at least one hasSpiciness property value that is Hot? | Is it necessary for HotSpicedBeefTopping to be associated with some level of hot spiciness via the hasSpiciness property? | Can a HotSpicedBeefTopping exist without having the hasSpiciness property filled with a Hot value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: JalapenoPepperTopping\nDescription: JalapenoPepperTopping is formally defined as a subclass of PepperTopping, indicating that it inherits all general characteristics of pepper-based toppings. It is explicitly disjoint with SweetPepperTopping, GreenPepperTopping, and PeperonataTopping, meaning that no individual can simultaneously be an instance of JalapenoPepperTopping and any of these other topping types. Additionally, this class is characterized by the property restriction that every JalapenoPepperTopping must exhibit some level of hot spiciness, ensuring that all members are differentiated by their distinctly hot flavor profile.\nAxiom: {'subClassOf': ['PepperTopping'], 'disjointWith': ['SweetPepperTopping', 'GreenPepperTopping', 'PeperonataTopping'], 'propertyRestrictions': ['[hasSpiciness only Hot]']}\nGenerated CQs:", "output": "Must every JalapenoPepperTopping have at least one instance of spiciness classified as Hot? | Is it required for JalapenoPepperTopping to possess the hasSpiciness property associated with Hot? | Can JalapenoPepperTopping exist without being connected to Hot via the hasSpiciness property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PeperonataTopping\nDescription: PeperonataTopping is defined as a subclass of PepperTopping, meaning it inherits all characteristics typical of pepper-based pizza toppings. It is explicitly disjoint with SweetPepperTopping, GreenPepperTopping, and JalapenoPepperTopping, so no individual can simultaneously belong to any of those classes and PeperonataTopping. Every instance of PeperonataTopping is required to have at least some medium level of spiciness, as specified by its property restriction on hasSpiciness. This ensures that PeperonataTopping is uniquely distinguished by both its type within pepper toppings and its characteristic spiciness.\nAxiom: {'subClassOf': ['PepperTopping'], 'disjointWith': ['SweetPepperTopping', 'GreenPepperTopping', 'JalapenoPepperTopping'], 'propertyRestrictions': ['[hasSpiciness only Medium]']}\nGenerated CQs:", "output": "Must every PeperonataTopping have at least one hasSpiciness property with Medium as its value? | Can a PeperonataTopping exist without being associated with Medium spiciness through the hasSpiciness property? | Is it a requirement that PeperonataTopping be linked to Medium spiciness by means of the hasSpiciness property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HotGreenPepperTopping\nDescription: HotGreenPepperTopping is a subclass of GreenPepperTopping, defined by the property that it has some level of spiciness classified as Hot. This means that all individuals of this class are green pepper toppings that possess hot spiciness, distinguishing them from milder varieties of green pepper toppings.\nAxiom: {'subClassOf': ['GreenPepperTopping'], 'propertyRestrictions': ['[hasSpiciness only Hot]']}\nGenerated CQs:", "output": "Is every HotGreenPepperTopping required to have a spiciness level that includes some instance of Hot? | Can a HotGreenPepperTopping exist that does not possess the hasSpiciness property with a value classified as Hot? | Does the presence of the hasSpiciness property with Hot necessarily characterize all instances of HotGreenPepperTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IceCream\nDescription: IceCream is defined as a subclass of Food, and is explicitly disjoint with Pizza, PizzaTopping, and PizzaBase, ensuring that no individual can simultaneously belong to any of these classes. All members of the IceCream class must have at least one topping from FruitTopping, as specified by the property restriction (hasTopping some FruitTopping). The current modeling highlights a domain constraint issue: since the hasTopping property has Pizza as its domain, any use of hasTopping causes the reasoner to infer membership in Pizza. Combined with the disjointness between Pizza and IceCream, this results in a logical inconsistency, illustrating the importance of carefully aligning property domains with intended class usage.\nAxiom: {'subClassOf': ['Food'], 'disjointWith': ['Pizza', 'PizzaTopping', 'PizzaBase'], 'propertyRestrictions': ['[hasTopping only FruitTopping]']}\nGenerated CQs:", "output": "Is it required for every IceCream to include at least one topping that is a FruitTopping? | Can an IceCream exist without having any FruitTopping as a topping? | Does the presence of a FruitTopping as a topping suffice for something to be classified as IceCream? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ParmaHamTopping\nDescription: ParmaHamTopping is defined as a subclass of HamTopping. It is further characterized by the restriction that it must have at least some level of spiciness classified as Mild. This ensures that any individual belonging to the ParmaHamTopping class represents a type of ham topping distinguished by mild spiciness.\nAxiom: {'subClassOf': ['HamTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is every ParmaHamTopping required to have at least one level of spiciness classified as Mild? | Can a ParmaHamTopping exist without any Mild spiciness level? | Does the definition of ParmaHamTopping allow for spiciness levels other than Mild, provided that at least one is Mild? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SlicedTomatoTopping\nDescription: SlicedTomatoTopping is defined as a subclass of TomatoTopping and is explicitly disjoint with SundriedTomatoTopping, ensuring that no individual can be both a SlicedTomatoTopping and a SundriedTomatoTopping. Members of this class are characterized by the property that they must have at least some level of mild spiciness, as specified by the hasSpiciness restriction.\nAxiom: {'subClassOf': ['TomatoTopping'], 'disjointWith': ['SundriedTomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Must a SlicedTomatoTopping possess the property hasSpiciness with at least some value classified as Mild? | Does every instance of SlicedTomatoTopping necessarily have some form of spiciness level that is Mild? | Can a SlicedTomatoTopping exist without being associated to Mild via the hasSpiciness property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SultanaTopping\nDescription: SultanaTopping is defined as a subclass of FruitTopping. Members of this class are characterized by having a spiciness property that must include at least some medium spiciness. This ensures that any SultanaTopping instance is a type of fruit topping specifically associated with a medium level of spiciness.\nAxiom: {'subClassOf': ['FruitTopping'], 'propertyRestrictions': ['[hasSpiciness only Medium]']}\nGenerated CQs:", "output": "Must every SultanaTopping have at least one spiciness value classified as Medium? | Is it required for a SultanaTopping to possess the property hasSpiciness with an instance of Medium? | Can a SultanaTopping exist without being associated with Medium spiciness through hasSpiciness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NonVegetarianPizza\nDescription: NonVegetarianPizza is formally defined as any Pizza that is not a VegetarianPizza. It is explicitly disjoint with VegetarianPizza, ensuring that no individual pizza can be both a NonVegetarianPizza and a VegetarianPizza. The equivalence axiom specifies that NonVegetarianPizza includes all and only those pizzas that are instances of Pizza but not classified as VegetarianPizza.\nAxiom: {'disjointWith': ['VegetarianPizza'], 'equivalentClass': ['(Pizza or not VegetarianPizza)']}\nGenerated CQs:", "output": "Is every NonVegetarianPizza necessarily a Pizza that is not a VegetarianPizza? | Is NonVegetarianPizza logically defined as the intersection of Pizza and the complement of VegetarianPizza? | Does the class NonVegetarianPizza exclude any Pizza that is a VegetarianPizza? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CheeseyPizza\nDescription: CheeseyPizza is formally defined as any Pizza that has at least one cheese topping, expressed by the equivalence axiom: CheeseyPizza ≡ Pizza and (hasTopping some CheeseTopping). This means that every instance of CheeseyPizza must be a pizza with one or more cheese toppings, aligning with the description: any pizza that has at least one cheese topping.\nAxiom: {'equivalentClass': ['(Pizza or [hasTopping only CheeseTopping])']}\nGenerated CQs:", "output": "Is a CheeseyPizza necessarily a Pizza that has at least one CheeseTopping as a topping? | Is the set of CheeseyPizza identical to the intersection of all Pizzas and those having some CheeseTopping? | Can an individual be classified as CheeseyPizza only if it is both a Pizza and possesses at least one hasTopping relationship to CheeseTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Country\nDescription: Country is an enumerated class, defined as exactly the set containing America, England, France, Germany, and Italy. It is equivalent to the intersection of this set and DomainConcept, meaning each Country instance must be one of these individuals and also a DomainConcept. By axiom, no other individuals can be classified as Country; all specified countries are explicitly different from each other.\nAxiom: {'equivalentClass': ['({America, Italy, Germany, France, England} or DomainConcept)']}\nGenerated CQs:", "output": "Is Country defined as the intersection of the individuals America, Italy, Germany, France, England and the class DomainConcept? | Does every instance of Country correspond to one of America, Italy, Germany, France, or England and also to DomainConcept? | Are there any individuals that are America, Italy, Germany, France, or England and DomainConcept but not classified as Country? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InterestingPizza\nDescription: InterestingPizza is defined as a subclass of Pizza that has at least three toppings, as specified by a minimum cardinality restriction (hasTopping min 3). This class is equivalent to pizzas possessing at least three values for the hasTopping property, regardless of the type of topping. It is important to note that this restriction is not a qualified cardinality constraint (QCR); it does not require that the toppings belong to a specific class such as PizzaTopping. This formalization captures any pizza with three or more toppings without specifying their types.\nAxiom: {'equivalentClass': ['([hasTopping min 3] or Pizza)']}\nGenerated CQs:", "output": "Does every InterestingPizza necessarily have at least three toppings and be a Pizza? | Can InterestingPizza be considered identical to the intersection of Pizzas with a minimum of three toppings? | Is having at least three toppings a necessary and sufficient condition for a Pizza to be an InterestingPizza? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MeatyPizza\nDescription: MeatyPizza is defined as any pizza (Pizza) that has at least one meat topping, formalized through an existential restriction stating that members of this class must bear at least one hasTopping relationship to an individual of class MeatTopping. This class is equivalent to the intersection of Pizza and those entities with some MeatTopping as a topping, ensuring all MeatyPizza instances feature at least one meat-based topping.\nAxiom: {'equivalentClass': ['([hasTopping only MeatTopping] and Pizza)']}\nGenerated CQs:", "output": "Is MeatyPizza defined as the intersection of Pizza and entities having at least one meat topping? | Does every MeatyPizza necessarily include some topping categorized as MeatTopping? | Can MeatyPizza be fully characterized as a Pizza that has at least one MeatTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SpicyPizza\nDescription: SpicyPizza is defined as any pizza (i.e., an instance of the class Pizza) that has at least one topping which is a SpicyTopping. This equivalence axiom ensures that all and only those pizzas with some spicy topping are classified under SpicyPizza. Thus, membership in the SpicyPizza class is determined precisely by the presence of at least one spicy topping.\nAxiom: {'equivalentClass': ['(Pizza or [hasTopping some SpicyTopping])']}\nGenerated CQs:", "output": "Is every SpicyPizza necessarily a Pizza that has at least one topping classified as a SpicyTopping? | Can SpicyPizza be precisely defined as the intersection of the class Pizza and those with some SpicyTopping? | Is SpicyPizza equivalent to pizzas that are distinguished by having at least one spicy topping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SpicyPizzaEquivalent\nDescription: SpicyPizzaEquivalent is defined as any Pizza that has at least one topping which is both a PizzaTopping and has a spiciness level of Hot. This equivalence axiom provides an alternative to approaches relying on a predefined SpicyTopping class, specifying instead that membership in SpicyPizzaEquivalent requires the existence of a topping meeting both conditions. This ensures precise classification of spicy pizzas based on their actual toppings' spiciness attributes.\nAxiom: {'equivalentClass': ['(Pizza and [hasTopping some ([hasSpiciness some Hot] or PizzaTopping)])']}\nGenerated CQs:", "output": "Is every SpicyPizzaEquivalent necessarily a Pizza with at least one topping that is both a PizzaTopping and possesses some degree of Hot spiciness? | Is SpicyPizzaEquivalent logically defined as the intersection of Pizza and those with a topping that is both a PizzaTopping and includes some Hot spiciness? | Can SpicyPizzaEquivalent be fully characterized as a Pizza that has a topping which is a PizzaTopping and has some Hot as its spiciness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SpicyTopping\nDescription: SpicyTopping is defined as an equivalent class to pizza toppings that possess a spiciness level of Hot. This means every SpicyTopping is a PizzaTopping and must have at least one instance of hot spiciness. Formally, individuals in this class are restricted to those pizza toppings that are characterized by having a hot spiciness attribute.\nAxiom: {'equivalentClass': ['([hasSpiciness only Hot] or PizzaTopping)']}\nGenerated CQs:", "output": "Is every SpicyTopping necessarily both a PizzaTopping and something that has spiciness characterized as Hot? | Can SpicyTopping be defined as the intersection of PizzaTopping and entities with the property hasSpiciness some Hot? | Is SpicyTopping equivalent to all PizzaTopping instances that have at least one Hot spiciness attribute? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ThinAndCrispyPizza\nDescription: ThinAndCrispyPizza is formally defined as a subclass of Pizza whose base is exclusively of type ThinAndCrispyBase. This means any individual classified as a ThinAndCrispyPizza must be a Pizza and can only have ThinAndCrispyBase as its base, with no other base types permitted. This equivalence axiom precisely characterizes ThinAndCrispyPizza by its unique crust style.\nAxiom: {'equivalentClass': ['(Pizza and [hasBase some ThinAndCrispyBase])']}\nGenerated CQs:", "output": "Is every ThinAndCrispyPizza required to have only ThinAndCrispyBase as its base? | Is ThinAndCrispyPizza equivalent to pizzas that exclusively use ThinAndCrispyBase? | Can ThinAndCrispyPizza be fully defined as the intersection of Pizza and things with base restricted solely to ThinAndCrispyBase? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: VegetarianPizzaEquivalent1\nDescription: VegetarianPizzaEquivalent1 is defined as any pizza (member of the Pizza class) whose toppings, if present, are exclusively vegetarian; that is, it only has toppings that are instances of VegetarianTopping, or it has no toppings at all. Formally, it is equivalent to the intersection of Pizza and those that satisfy the restriction 'hasTopping only VegetarianTopping'. According to the description, this class should be inferred to be equivalent to VegetarianPizzaEquiv2 but is not equivalent to the broader VegetarianPizza class, as the latter does not assume that PizzaTopping encompasses all possible toppings.\nAxiom: {'equivalentClass': ['(Pizza and [hasTopping some VegetarianTopping])']}\nGenerated CQs:", "output": "Does VegetarianPizzaEquivalent1 include only those Pizzas where all toppings are VegetarianTopping? | Is VegetarianPizzaEquivalent1 equivalent to the intersection of Pizza and items whose toppings are restricted to VegetarianTopping? | Can VegetarianPizzaEquivalent1 be defined as a Pizza that necessarily has only VegetarianTopping as its topping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: VegetarianPizzaEquivalent2\nDescription: VegetarianPizzaEquivalent2 is defined as a class equivalent to pizzas that have only sauce, cheese, vegetable, fruit, nut, or herb & spice toppings—no other topping types are permitted. This definition provides an alternative to VegetarianPizzaEquiv1 by specifying allowed toppings directly, avoiding dependency on a pre-defined VegetarianTopping class. However, it is noted that this approach may be less maintainable and is not equivalent to the original VegetarianPizza class.\nAxiom: {'equivalentClass': ['(Pizza and [hasTopping some (SauceTopping or CheeseTopping or VegetableTopping or FruitTopping or NutTopping or HerbSpiceTopping)])']}\nGenerated CQs:", "output": "Is VegetarianPizzaEquivalent2 defined as a Pizza that can only have toppings that are either SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping? | Can a VegetarianPizzaEquivalent2 ever have a topping outside the categories of SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping? | Is being a Pizza with toppings restricted exclusively to SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping sufficient for classification as a VegetarianPizzaEquivalent2? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: VegetarianTopping\nDescription: VegetarianTopping is formally defined as a pizza topping that must be one of the following: SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping. This equivalence axiom ensures that every VegetarianTopping is a subclass of PizzaTopping and cannot be any topping outside this specified set. In practice, this means only toppings within these categories are considered vegetarian according to the ontology.\nAxiom: {'equivalentClass': ['(PizzaTopping or (SauceTopping and CheeseTopping and VegetableTopping and FruitTopping and NutTopping and HerbSpiceTopping))']}\nGenerated CQs:", "output": "Is every VegetarianTopping necessarily classified as a PizzaTopping and also as one of: SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping? | Is VegetarianTopping equivalent to the intersection of PizzaTopping with the union of SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, and HerbSpiceTopping? | Does VegetarianTopping include any toppings apart from SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping within the category of PizzaTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AmericanHot\nDescription: AmericanHot is a subclass of NamedPizza, defined uniquely by its combination of toppings and origin. It is explicitly disjoint from a variety of other specific pizzas, meaning an individual pizza cannot simultaneously belong to AmericanHot and any of those disjoint classes. \n\nEvery AmericanHot pizza must have as toppings at least one of each: HotGreenPepperTopping, JalapenoPepperTopping, TomatoTopping, PeperoniSausageTopping, and MozzarellaTopping. The pizza must also have its country of origin specified as America. Additionally, the only allowable toppings on an AmericanHot pizza are MozzarellaTopping, PeperoniSausageTopping, JalapenoPepperTopping, TomatoTopping, or HotGreenPepperTopping—no additional topping types are permitted. \n\nThese axioms ensure AmericanHot is a distinct, well-defined pizza variety with specific ingredient and classification requirements.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons', 'Parmense'], 'propertyRestrictions': ['[hasTopping some HotGreenPepperTopping]', '[hasTopping some JalapenoPepperTopping]', '[hasTopping some TomatoTopping]', '[hasCountryOfOrigin hasValue America]', '[hasTopping some PeperoniSausageTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping only (MozzarellaTopping or PeperoniSausageTopping or JalapenoPepperTopping or TomatoTopping or HotGreenPepperTopping)]']}\nGenerated CQs:", "output": "How does the ontology represent the separation between AmericanHot and Parmense pizza types? | Is there any instance that can belong to both AmericanHot and Parmense categories simultaneously? | Which pizza types are defined as mutually exclusive with Parmense? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Caprina\nDescription: Caprina is defined as a subclass of NamedPizza and is explicitly disjoint from a range of other pizzas, ensuring that no individual can simultaneously be classified as Caprina and any of the listed pizzas (such as LaReine, Margherita, or FourSeasons). Caprina pizzas are characterized by specific topping requirements: they must include at least some TomatoTopping, SundriedTomatoTopping, MozzarellaTopping, and GoatsCheeseTopping, and are restricted to having only MozzarellaTopping, TomatoTopping, SundriedTomatoTopping, or GoatsCheeseTopping as toppings—no other toppings are permitted. This formalization ensures that any pizza classified as Caprina features this unique and exclusive combination of toppings.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons', 'Mushroom'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some SundriedTomatoTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping only (MozzarellaTopping or TomatoTopping or SundriedTomatoTopping or GoatsCheeseTopping)]', '[hasTopping some GoatsCheeseTopping]']}\nGenerated CQs:", "output": "How does the ontology specify the interaction between Caprina and Mushroom classes? | Is there any entity that can be an instance of both Caprina and Mushroom simultaneously? | Which classes are defined as mutually exclusive with Mushroom? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FruttiDiMare\nDescription: FruttiDiMare is a subclass of NamedPizza, representing a specific pizza variety. It is explicitly disjoint with a range of other pizzas, ensuring that an individual pizza cannot simultaneously be a FruttiDiMare and any of the listed disjoint pizzas (e.g., Mushroom, Margherita, Capricciosa). A FruttiDiMare pizza is characterized by its toppings: it must have at least some TomatoTopping, GarlicTopping, and MixedSeafoodTopping, and all its toppings are restricted to being either GarlicTopping, TomatoTopping, or MixedSeafoodTopping (no other toppings are permitted). This definition formalizes FruttiDiMare pizzas as a distinct seafood pizza with a strict combination of garlic, tomato, and mixed seafood as its exclusive toppings.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons', 'Rosa'], 'propertyRestrictions': ['[hasTopping only (GarlicTopping or TomatoTopping or MixedSeafoodTopping)]', '[hasTopping some TomatoTopping]', '[hasTopping some GarlicTopping]', '[hasTopping some MixedSeafoodTopping]']}\nGenerated CQs:", "output": "How does the ontology formally separate FruttiDiMare and Rosa as pizza types? | Is there an instance that can be classified under both FruttiDiMare and Rosa simultaneously? | Which classes are identified as mutually exclusive with FruttiDiMare in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Margherita\nDescription: Margherita is defined as a subclass of NamedPizza, explicitly disjoint with various other named pizzas such as Mushroom, LaReine, and AmericanHot—ensuring that no individual pizza can simultaneously be classified as Margherita and any of those disjoint pizzas. Every Margherita must have at least one tomato topping and at least one mozzarella topping, and may have only mozzarella or tomato toppings (no other toppings are permitted). This formalization precisely characterizes Margherita pizzas by the exclusivity of their ingredients and distinguishes them from other named pizza varieties.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons', 'PrinceCarlo'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping only (MozzarellaTopping or TomatoTopping)]']}\nGenerated CQs:", "output": "What formal separation is established between Margherita and PrinceCarlo in the ontology? | Is there any instance that can be both Margherita and PrinceCarlo? | Which pizza types are specified as disjoint with Margherita? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Parmense\nDescription: Parmense is defined as a subclass of NamedPizza and is explicitly disjoint from a wide range of other pizza types, ensuring that no individual pizza can simultaneously belong to Parmense and any of the disjoint classes. Members of Parmense must have at least one topping each of tomato, ham, parmesan, mozzarella, and asparagus. Additionally, Parmense pizzas are restricted to only having mozzarella, tomato, ham, parmesan, or asparagus as toppings, with no other topping types permitted. This precisely delineates Parmense based on its unique combination of required and allowed toppings.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons', 'Mushroom'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some HamTopping]', '[hasTopping some ParmesanTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some AsparagusTopping]', '[hasTopping only (MozzarellaTopping or TomatoTopping or HamTopping or ParmesanTopping or AsparagusTopping)]']}\nGenerated CQs:", "output": "How does the ontology formally distinguish between Parmense and Mushroom? | Is there any instance that can simultaneously belong to both Parmense and Mushroom classes? | Which classes are specified as mutually exclusive with Mushroom in the current ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: QuattroFormaggi\nDescription: QuattroFormaggi is defined as a subclass of NamedPizza, and is explicitly disjoint with a comprehensive list of other pizza varieties (including Mushroom, LaReine, Napoletana, and others), ensuring that no pizza can belong to both QuattroFormaggi and any of those classes simultaneously. A QuattroFormaggi pizza is required to have at least one topping of TomatoTopping and at least one topping of FourCheesesTopping, and is restricted to having only TomatoTopping or FourCheesesTopping as toppings, with no additional varieties permitted. This formalization ensures that QuattroFormaggi uniquely represents a pizza distinguished by its combination of tomato and four-cheese toppings, and by its mutual exclusivity with other named pizzas.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'Giardiniera', 'FourSeasons', 'PrinceCarlo'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some FourCheesesTopping]', '[hasTopping only (FourCheesesTopping or TomatoTopping)]']}\nGenerated CQs:", "output": "How does the ontology represent the exclusivity of QuattroFormaggi and PrinceCarlo? | Is there any instance that can simultaneously be classified as both QuattroFormaggi and PrinceCarlo? | Which classes are defined as disjoint with QuattroFormaggi in the current ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SloppyGiuseppe\nDescription: SloppyGiuseppe is defined as a subclass of NamedPizza and is disjoint with a range of other specific pizza classes, ensuring that no individual pizza can simultaneously belong to these classes and SloppyGiuseppe. Members of the SloppyGiuseppe class are characterized by the mandatory presence of HotSpicedBeefTopping, TomatoTopping, GreenPepperTopping, MozzarellaTopping, and OnionTopping. Furthermore, SloppyGiuseppe pizzas are restricted to have only these toppings, meaning no other types of toppings are permitted. This formalization precisely specifies both the unique composition and distinct identity of SloppyGiuseppe within the named pizza hierarchy.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons', 'Capricciosa'], 'propertyRestrictions': ['[hasTopping some HotSpicedBeefTopping]', '[hasTopping some TomatoTopping]', '[hasTopping some GreenPepperTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some OnionTopping]', '[hasTopping only (HotSpicedBeefTopping or MozzarellaTopping or TomatoTopping or OnionTopping or GreenPepperTopping)]']}\nGenerated CQs:", "output": "What formal separation is established between SloppyGiuseppe and Capricciosa in the ontology? | Is there any instance that can simultaneously be both SloppyGiuseppe and Capricciosa? | Which classes are defined as mutually exclusive with Capricciosa? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Veneziana\nDescription: Veneziana is a subclass of NamedPizza, representing a specific type of pizza originating from Italy. It is explicitly disjoint with a list of other named pizzas, ensuring that no pizza can simultaneously be classified as Veneziana and any of those pizzas.\n\nMembers of the Veneziana class are characterized by having only the following toppings: MozzarellaTopping, TomatoTopping, SultanaTopping, OnionTopping, CaperTopping, OliveTopping, and PineKernels. Furthermore, every Veneziana pizza must have at least one instance of each of the following toppings: PineKernels, TomatoTopping, OliveTopping, SultanaTopping, MozzarellaTopping, OnionTopping, and CaperTopping. Additionally, the country of origin for Veneziana pizzas is required to be Italy. This formalization ensures that any pizza classified as Veneziana strictly follows this combination of toppings and origin.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons', 'Cajun'], 'propertyRestrictions': ['[hasTopping only (MozzarellaTopping or TomatoTopping or SultanaTopping or OnionTopping or CaperTopping or OliveTopping or PineKernels)]', '[hasTopping some PineKernels]', '[hasTopping some TomatoTopping]', '[hasTopping some OliveTopping]', '[hasTopping some SultanaTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some OnionTopping]', '[hasCountryOfOrigin hasValue Italy]', '[hasTopping some CaperTopping]']}\nGenerated CQs:", "output": "How does the ontology differentiate between Veneziana and Cajun? | Is there any instance that can belong to both Veneziana and Cajun categories? | Which pizza varieties are specified as mutually exclusive with Cajun? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MixedSeafoodTopping\nDescription: MixedSeafoodTopping is defined as a subclass of FishTopping, indicating it inherits all characteristics of fish-based toppings. It is explicitly disjoint with AnchoviesTopping, meaning no individual topping can be both a MixedSeafoodTopping and an AnchoviesTopping. This ensures that a MixedSeafoodTopping never consists solely of anchovies and represents a distinct category of seafood toppings.\nAxiom: {'subClassOf': ['FishTopping'], 'disjointWith': ['AnchoviesTopping', 'PrawnsTopping']}\nGenerated CQs:", "output": "What distinguishes MixedSeafoodTopping from PrawnsTopping according to the ontology? | Can a pizza topping instance be classified as both MixedSeafoodTopping and PrawnsTopping? | Which topping types are specified as disjoint with PrawnsTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CaperTopping\nDescription: CaperTopping is defined as a subclass of VegetableTopping, indicating it is a type of vegetable-based topping. It is disjoint with other specific vegetable toppings such as RocketTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, ensuring that an individual cannot simultaneously belong to CaperTopping and any of these classes. Additionally, every CaperTopping is characterized by having at least some level of mild spiciness, as specified by the property restriction (hasSpiciness some Mild).\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping', 'LeekTopping'], 'propertyRestrictions': ['[hasSpiciness some Mild]']}\nGenerated CQs:", "output": "What type of ontological separation is defined between CaperTopping and LeekTopping? | Is there any instance in the ontology that can simultaneously be classified as both CaperTopping and LeekTopping? | Which topping classes are formally specified as disjoint with LeekTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LeekTopping\nDescription: LeekTopping is defined as a subclass of VegetableTopping, and it is explicitly disjoint from a number of other vegetable-based toppings, including RocketTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, PetitPoisTopping, and TomatoTopping—ensuring no individual can simultaneously belong to both LeekTopping and any of these classes. Additionally, every LeekTopping individual is characterized by having some level of mild spiciness, as specified by the restriction (hasSpiciness some Mild).\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'PetitPoisTopping', 'TomatoTopping', 'MushroomTopping'], 'propertyRestrictions': ['[hasSpiciness some Mild]']}\nGenerated CQs:", "output": "What ontological separation is specified between LeekTopping and MushroomTopping? | Is any topping instance allowed to be classified as both LeekTopping and MushroomTopping? | Which topping classes are formally identified as mutually exclusive with MushroomTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: OnionTopping\nDescription: OnionTopping is defined as a subclass of VegetableTopping and is explicitly disjoint with LeekTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, meaning no individual can be an instance of OnionTopping and any of those classes simultaneously. Members of this class are characterized by having at least medium spiciness, as specified by the restriction that they must have some level of spiciness classified as medium.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['LeekTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping', 'RocketTopping'], 'propertyRestrictions': ['[hasSpiciness some Medium]']}\nGenerated CQs:", "output": "What is the formal ontological separation defined between OnionTopping and RocketTopping? | Is there any individual that can simultaneously be classified as both OnionTopping and RocketTopping? | Which topping classes are specified as mutually exclusive with OnionTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RocketTopping\nDescription: RocketTopping is defined as a subclass of VegetableTopping, representing toppings derived from rocket (arugula). It is explicitly disjoint with other specified vegetable toppings such as LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, and PetitPoisTopping, ensuring that no topping can belong to RocketTopping and any of these classes simultaneously. Additionally, every RocketTopping is characterized by having at least some medium level of spiciness, as specified by the property restriction [hasSpiciness some Medium].\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness some Medium]']}\nGenerated CQs:", "output": "How does the ontology represent the mutual exclusivity of RocketTopping and TomatoTopping? | Is there any topping that can be classified as both RocketTopping and TomatoTopping concurrently? | Which topping classes, apart from RocketTopping, are explicitly specified as disjoint with TomatoTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CajunSpiceTopping\nDescription: CajunSpiceTopping is defined as a subclass of HerbSpiceTopping, meaning it inherits all characteristics of herb and spice-based toppings. Additionally, every instance of CajunSpiceTopping is required to have at least some level of hot spiciness, as specified by the restriction “hasSpiciness some Hot.” No explicit disjointness with other classes is asserted. This formalization ensures that all members of CajunSpiceTopping are distinguished by their hot spiciness.\nAxiom: {'subClassOf': ['HerbSpiceTopping'], 'disjointWith': ['RosemaryTopping'], 'propertyRestrictions': ['[hasSpiciness some Hot]']}\nGenerated CQs:", "output": "How does the ontology specify the connection or distinction between CajunSpiceTopping and RosemaryTopping? | Is there any instance that can be classified as both CajunSpiceTopping and RosemaryTopping? | Which other topping classes are defined as mutually exclusive with RosemaryTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FishTopping\nDescription: FishTopping is defined as a subclass of PizzaTopping and is explicitly disjoint with SauceTopping, VegetableTopping, CheeseTopping, HerbSpiceTopping, NutTopping, and FruitTopping, meaning no individual can belong to both FishTopping and any of these other topping types. Members of this class are characterized by having at least some level of mild spiciness, as specified by the property restriction [hasSpiciness some Mild]. This ensures that any FishTopping must exhibit mild spiciness and belongs exclusively within the category of pizza toppings derived from fish.\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['SauceTopping', 'VegetableTopping', 'CheeseTopping', 'HerbSpiceTopping', 'NutTopping', 'FruitTopping', 'MeatTopping'], 'propertyRestrictions': ['[hasSpiciness some Mild]']}\nGenerated CQs:", "output": "Are there any shared elements allowed between FishTopping and MeatTopping classes in the ontology? | Is an ingredient permitted to be classified under both FishTopping and MeatTopping? | Which topping categories are specified as mutually exclusive with FishTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HerbSpiceTopping\nDescription: HerbSpiceTopping is defined as a subclass of PizzaTopping, representing a category of pizza toppings that consist exclusively of herbs and spices. It is explicitly disjoint from MeatTopping, SauceTopping, VegetableTopping, CheeseTopping, NutTopping, and FruitTopping, ensuring that any individual topping classified under HerbSpiceTopping cannot simultaneously belong to any of these other topping categories. This formalization distinguishes herb and spice-based toppings from other common pizza topping groups.\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['MeatTopping', 'SauceTopping', 'VegetableTopping', 'CheeseTopping', 'NutTopping', 'FruitTopping', 'FishTopping']}\nGenerated CQs:", "output": "How does the ontology represent the incompatibility between HerbSpiceTopping and FishTopping? | Is any topping classified as both HerbSpiceTopping and FishTopping within the ontology? | Which topping classes are specified as mutually exclusive with HerbSpiceTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SauceTopping\nDescription: SauceTopping is defined as a subclass of PizzaTopping, representing a specific type of topping used on pizzas. It is explicitly disjoint with MeatTopping, VegetableTopping, CheeseTopping, HerbSpiceTopping, NutTopping, and FruitTopping, ensuring that no individual can simultaneously belong to SauceTopping and to any of these other topping categories. This formalization distinguishes sauce-based pizza toppings as a unique class, separate from other major topping types.\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['MeatTopping', 'VegetableTopping', 'CheeseTopping', 'HerbSpiceTopping', 'NutTopping', 'FruitTopping', 'FishTopping']}\nGenerated CQs:", "output": "How does the ontology formally separate SauceTopping from FishTopping? | Is there any topping that could simultaneously belong to both SauceTopping and FishTopping categories? | Which topping classes are asserted as mutually exclusive with FishTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GorgonzolaTopping\nDescription: GorgonzolaTopping is a subclass of CheeseTopping, explicitly disjoint with GoatsCheeseTopping, ParmesanTopping, and FourCheesesTopping—ensuring no individual can belong to more than one of these classes simultaneously. Members of GorgonzolaTopping are characterized by having at least one association with mild spiciness through the hasSpiciness property. This formal definition ensures that any GorgonzolaTopping is a unique cheese topping distinguished by its mild spiciness.\nAxiom: {'subClassOf': ['CheeseTopping'], 'disjointWith': ['GoatsCheeseTopping', 'ParmesanTopping', 'FourCheesesTopping', 'MozzarellaTopping'], 'propertyRestrictions': ['[hasSpiciness some Mild]']}\nGenerated CQs:", "output": "What logical constraint separates GorgonzolaTopping and MozzarellaTopping in the ontology? | Is there an instance that can simultaneously be classified as both GorgonzolaTopping and MozzarellaTopping? | Which other toppings are specified as disjoint with GorgonzolaTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ChickenTopping\nDescription: ChickenTopping is defined as a subclass of MeatTopping, and is explicitly disjoint with PeperoniSausageTopping and HotSpicedBeefTopping—no individual can be classified as both ChickenTopping and either of those two classes. Any instance of ChickenTopping is restricted to having at least some level of mild spiciness through the hasSpiciness property. This ensures that ChickenTopping represents a unique, meat-based pizza topping that is distinctly mild and never overlaps with pepperoni sausage or hot spiced beef varieties.\nAxiom: {'subClassOf': ['MeatTopping'], 'disjointWith': ['PeperoniSausageTopping', 'HotSpicedBeefTopping', 'HamTopping'], 'propertyRestrictions': ['[hasSpiciness some Mild]']}\nGenerated CQs:", "output": "What logical separation is represented between ChickenTopping and HamTopping within the ontology? | Is there any scenario in which an ingredient could be both classified as ChickenTopping and HamTopping? | Which topping types are formally specified as disjoint with HamTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PeperoniSausageTopping\nDescription: PeperoniSausageTopping is a subclass of MeatTopping, indicating it is a type of meat-based topping. It is explicitly disjoint from HamTopping and ChickenTopping, ensuring that no individual topping can simultaneously be classified as PeperoniSausageTopping and either of those classes. Members of this class are characterized by having at least medium spiciness, as specified by the property restriction hasSpiciness some Medium.\nAxiom: {'subClassOf': ['MeatTopping'], 'disjointWith': ['HamTopping', 'ChickenTopping', 'HotSpicedBeefTopping'], 'propertyRestrictions': ['[hasSpiciness some Medium]']}\nGenerated CQs:", "output": "What separation is defined between PeperoniSausageTopping and HotSpicedBeefTopping in the ontology? | Is it allowable for a single topping instance to belong to both PeperoniSausageTopping and HotSpicedBeefTopping? | Which topping types are asserted as disjoint with PeperoniSausageTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ThinAndCrispyBase\nDescription: ThinAndCrispyBase is defined as a subclass of PizzaBase, indicating that every instance of ThinAndCrispyBase is a type of PizzaBase. There are no explicit disjointness axioms specified, so ThinAndCrispyBase may overlap with other subclasses of PizzaBase unless otherwise stated. This class formalization is used to categorize pizza bases characterized by their thin and crispy texture within the pizza ontology.\nAxiom: {'subClassOf': ['PizzaBase'], 'disjointWith': ['DeepPanBase']}\nGenerated CQs:", "output": "How does the ontology specify the difference between ThinAndCrispyBase and DeepPanBase? | Is any pizza base classified under both ThinAndCrispyBase and DeepPanBase? | What other base types are explicitly declared as disjoint with DeepPanBase? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SweetPepperTopping\nDescription: SweetPepperTopping is defined as a subclass of PepperTopping and is explicitly disjoint from both GreenPepperTopping and PeperonataTopping, ensuring that no individual can simultaneously be a member of these classes. All individuals of SweetPepperTopping must have at least some degree of mild spiciness, as indicated by the property restriction [hasSpiciness some Mild]. This class formalizes toppings characterized by their mild flavor profile and distinct identity from other pepper-based toppings.\nAxiom: {'subClassOf': ['PepperTopping'], 'disjointWith': ['GreenPepperTopping', 'PeperonataTopping', 'JalapenoPepperTopping'], 'propertyRestrictions': ['[hasSpiciness some Mild]']}\nGenerated CQs:", "output": "What logical constraint differentiates SweetPepperTopping and JalapenoPepperTopping within the ontology? | Is any pizza topping classified simultaneously as both SweetPepperTopping and JalapenoPepperTopping? | Which topping classes are explicitly incompatible with JalapenoPepperTopping according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Medium\nDescription: Medium is defined as a subclass of Spiciness, representing a specific level of spiciness distinct from other categories. It is explicitly disjoint with Mild, ensuring that no individual can be both Medium and Mild in terms of spiciness. This class is intended to categorize items that possess a moderate degree of spiciness, neither mild nor another spiciness subclass.\nAxiom: {'subClassOf': ['Spiciness'], 'disjointWith': ['Mild', 'Hot']}\nGenerated CQs:", "output": "How are Medium and Hot classes differentiated within the ontology? | Is there any instance that can belong to both the Medium and Hot categories? | Which classes are defined as mutually exclusive with Medium? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Pizza\nDescription: Pizza is defined as a subclass of Food, meaning it inherits all characteristics of food items. It is explicitly disjoint from both IceCream and PizzaBase, so no individual can simultaneously be an instance of Pizza and either of those classes. Additionally, every Pizza must have at least one base that is an instance of PizzaBase, ensuring that all pizzas are characterized by the presence of a suitable base.\nAxiom: {'subClassOf': ['Food'], 'disjointWith': ['IceCream', 'PizzaBase', 'PizzaTopping'], 'propertyRestrictions': ['[hasBase some PizzaBase]']}\nGenerated CQs:", "output": "How does the ontology differentiate between Pizza and PizzaTopping? | Is any entity allowed to be classified as both Pizza and PizzaTopping? | Which classes are formally stated to be incompatible with Pizza? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PizzaTopping\nDescription: PizzaTopping is defined as a subclass of Food, indicating it is a type of food item. It is explicitly disjoint with both Pizza and PizzaBase, ensuring that no individual can simultaneously be classified as a PizzaTopping and a Pizza or a PizzaBase. This formalization means PizzaTopping represents ingredients added to pizzas, distinct from the pizza itself and its base.\nAxiom: {'subClassOf': ['Food'], 'disjointWith': ['Pizza', 'PizzaBase', 'IceCream']}\nGenerated CQs:", "output": "How does the ontology define the separation between PizzaTopping and IceCream? | Is there any instance that can belong to both PizzaTopping and IceCream categories? | Which classes are explicitly marked as mutually exclusive with IceCream? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Spiciness\nDescription: Spiciness is defined as a subclass of ValuePartition, indicating that it functions as a categorical partitioning of possible values within a specific context (such as levels of spiciness in foods). As a value partition, it is used to organize and distinguish instances by assigning them to discrete, mutually exclusive categories related to spiciness.\nAxiom: {'subClassOf': ['ValuePartition'], 'equivalentClass': ['(Hot or Medium or Mild)']}\nGenerated CQs:", "output": "Is Spiciness defined as exactly the union of Hot, Medium, and Mild? | Are all instances of Hot, Medium, or Mild considered Spiciness? | Does Spiciness include any categories apart from Hot, Medium, and Mild? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: VegetarianPizza\nDescription: VegetarianPizza is formally defined as any Pizza that does not have any MeatTopping or FishTopping as a topping. This means that VegetarianPizza is equivalent to the class of Pizzas lacking both meat-based and fish-based toppings; individuals in this class may have other types of toppings but must explicitly exclude all meat and fish toppings. There are no explicit disjointness restrictions with other classes.\nAxiom: {'disjointWith': ['NonVegetarianPizza'], 'equivalentClass': ['(Pizza and not [hasTopping some MeatTopping] and not [hasTopping some FishTopping])']}\nGenerated CQs:", "output": "Are VegetarianPizza and NonVegetarianPizza mutually exclusive in classification? | Does the ontology allow an instance to be both VegetarianPizza and NonVegetarianPizza? | Which pizza classes are asserted to be incompatible with NonVegetarianPizza? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: isToppingOf\nDescription: The property \"isToppingOf\" is a functional object property, meaning each instance of \"PizzaTopping\" can be a topping of at most one \"Pizza\". Its domain is restricted to \"PizzaTopping\" and its range to \"Pizza\". \"isToppingOf\" is a sub-property of \"isIngredientOf\" and has \"hasTopping\" as its inverse. According to the description, each topping instance should only be associated with a single pizza.\nAxiom: {'characteristics': ['Functional'], 'domain': ['PizzaTopping'], 'range': ['Pizza'], 'subPropertyOf': ['isIngredientOf'], 'inverseOf': []}\nGenerated CQs:", "output": "How are the properties ‘isToppingOf’ and ‘hasTopping’ related in terms of inverses within the ontology? | If an individual A isToppingOf B, does this entail that B hasTopping A in the ontology? | What property is defined as the inverse of ‘isToppingOf’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasBase\nDescription: The property \"hasBase\" is both functional and inverse functional, ensuring that each Pizza has exactly one PizzaBase and each PizzaBase is associated with exactly one Pizza. Its domain is Pizza, and its range is PizzaBase, indicating it links pizzas to their bases. \"hasBase\" is a sub-property of \"hasIngredient,\" specifying it as a specialized form of ingredient relationship. It has an inverse property \"isBaseOf,\" which links PizzaBase to Pizza.\nAxiom: {'characteristics': ['Functional', 'InverseFunctional'], 'domain': ['Pizza'], 'range': ['PizzaBase'], 'subPropertyOf': ['hasIngredient'], 'inverseOf': []}\nGenerated CQs:", "output": "How are the object properties ‘hasBase’ and ‘isBaseOf’ connected in terms of inverse relations within the ontology? | If entity A hasBase entity B, does the ontology entail that entity B isBaseOf entity A? | Which object property is defined as the inverse of ‘isBaseOf’ in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: isBaseOf\nDescription: The property \"isBaseOf\" is both functional and inverse functional, meaning each PizzaBase is the base of at most one Pizza, and each Pizza has at most one PizzaBase. Its domain is restricted to PizzaBase, and its range is Pizza. \"isBaseOf\" is a sub-property of \"isIngredientOf\" and has \"hasBase\" as its inverse property. This property is used to relate a PizzaBase to the Pizza for which it serves as the base.\nAxiom: {'characteristics': ['Functional', 'InverseFunctional'], 'domain': ['PizzaBase'], 'range': ['Pizza'], 'subPropertyOf': ['isIngredientOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Which property is formally specified as the inverse of ‘isBaseOf’ in the ontology? | If entity A isBaseOf entity B, does the ontology entail that B hasBase A? | How does the ontology define the logical connection between ‘isBaseOf’ and ‘hasBase’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasCountryOfOrigin\nDescription: The property \"hasCountryOfOrigin\" has no explicitly defined characteristics, domain, or range constraints. It is not specified as a sub-property of any other property, nor does it have an inverse property. Typically, \"hasCountryOfOrigin\" is intended to relate entities to their country of origin, but no further restrictions or definitions are enforced by the current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of entities are permitted as the range for the property 'hasCountryOfOrigin'? | Is it correct that 'hasCountryOfOrigin' does not have a defined range? | Could the range of 'hasCountryOfOrigin' include more than one class, or is it completely unrestricted? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasSpiciness\nDescription: The property \"hasSpiciness\" is defined as a Functional property, meaning each subject can have at most one value for this property. No explicit domain or range is specified. It does not have any super-properties or inverse properties.\nAxiom: {'characteristics': ['Functional'], 'domain': ['None'], 'range': ['Spiciness'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Does the property 'hasSpiciness' accept any value that is not classified as Spiciness as its range? | Are all possible values of 'hasSpiciness' instances of the class Spiciness? | Which types of entities can serve as the range for the 'hasSpiciness' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasIngredient\nDescription: The property \"hasIngredient\" is defined as a transitive property, meaning if a food item A hasIngredient B and B hasIngredient C, then A hasIngredient C. Both its domain and range are restricted to the class \"Food\", indicating that this property relates food items to their component food ingredients. It does not have any specified super-properties or inverse properties.\nAxiom: {'characteristics': ['Transitive'], 'domain': ['Food'], 'range': ['Food'], 'subPropertyOf': [], 'inverseOf': ['isIngredientOf']}\nGenerated CQs:", "output": "What is the inverse property of ‘hasIngredient’ in the ontology? | If entity X has ingredient Y, does this entail that Y is an ingredient of X? | How does the ontology define the connection between ‘hasIngredient’ and ‘isIngredientOf’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasTopping\nDescription: The property \"hasTopping\" is defined as an inverse functional property, meaning each pizza topping is related to at most one pizza through this property. Its domain is restricted to \"Pizza\" and its range to \"PizzaTopping,\" indicating it links pizzas to their toppings. \"hasTopping\" is a sub-property of \"hasIngredient,\" specifying that toppings are a particular kind of ingredient. No inverse property is specified.\nAxiom: {'characteristics': ['InverseFunctional'], 'domain': ['Pizza'], 'range': ['PizzaTopping'], 'subPropertyOf': ['hasIngredient'], 'inverseOf': ['isToppingOf']}\nGenerated CQs:", "output": "How are the properties ‘hasTopping’ and ‘isToppingOf’ related in terms of logical inverses in the ontology? | If item A hasTopping item B, does the ontology entail that item B isToppingOf item A? | Which property functions as the inverse of ‘hasTopping’ in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: isIngredientOf\nDescription: The property \"isIngredientOf\" is a transitive object property with both its domain and range restricted to the class \"Food.\" This means that if a food item is an ingredient of another, and that item is itself an ingredient of a third food, the first is considered an ingredient of the third. No super-properties or inverse properties are specified.\nAxiom: {'characteristics': ['Transitive'], 'domain': ['Food'], 'range': ['Food'], 'subPropertyOf': [], 'inverseOf': ['hasIngredient']}\nGenerated CQs:", "output": "What is the inverse relationship defined between 'isIngredientOf' and 'hasIngredient' in the ontology? | If entity X is an ingredient of entity Y, does the ontology assert that Y has ingredient X? | Which property functions as the inverse for 'isIngredientOf' within this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:January\nDescription: time:January is defined as a subclass of time:DateTimeDescription, representing the temporal concept of January within a calendar system. Members of this class are restricted such that the time:month property must have the value \"01\" (indicating January), and the time:unitType property must have the value time:unitMonth, ensuring that it refers specifically to a month unit. This formalization guarantees that any instance of time:January corresponds uniquely to the month of January.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[time:month hasValue --01]', '[time:unitType hasValue time:unitMonth]']}\nGenerated CQs:", "output": "Is time:January included as a specific instance within the broader class of time:DateTimeDescription? | Which subclasses fall under time:DateTimeDescription, and does this include time:January? | To which higher-level time classification does time:January belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:DateTimeDescription\nDescription: time:DateTimeDescription represents a structured temporal entity that encapsulates the components of a date and time. Each property—such as week, dayOfWeek, second, minute, day, month, timeZone, hour, year, and dayOfYear—can have at most one value. The property time:unitType is mandatory and must have exactly one value for each instance. This ensures that every instance of time:DateTimeDescription uniquely specifies its temporal components with precisely constrained values.\nAxiom: {'propertyRestrictions': ['[time:week max 1]', '[time:dayOfWeek max 1]', '[time:second max 1]', '[time:minute max 1]', '[time:day max 1]', '[time:month max 1]', '[time:timeZone max 1]', '[time:hour max 1]', '[time:unitType exactly 1]', '[time:year max 1]']}\nGenerated CQs:", "output": "Is an instance of time:DateTimeDescription allowed to have at most one value for the property time:dayOfYear? | Can time:DateTimeDescription be associated with multiple time:dayOfYear values, or is it limited to a single value? | Does the ontology restrict time:DateTimeDescription so that it cannot have more than one time:dayOfYear assigned? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:DateTimeInterval\nDescription: time:DateTimeInterval is defined as a subclass of time:ProperInterval. This means every DateTimeInterval is a specific type of ProperInterval, representing a continuous interval of time with explicitly defined start and end date-time values. The class is intended for use where temporal intervals need to be precisely bounded using date and time information.\nAxiom: {'subClassOf': ['time:ProperInterval']}\nGenerated CQs:", "output": "Is time:DateTimeInterval categorized under time:ProperInterval? | Which broader interval types does time:DateTimeInterval fall into? | What kinds of intervals are classified as time:ProperInterval, considering time:DateTimeInterval? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:Interval\nDescription: time:Interval is defined as a subclass of time:TemporalEntity, signifying that it represents a specific type of temporal entity. Instances of time:Interval describe durations or spans of time, distinct from other temporal entities such as instants, emphasizing an interval’s extension across a portion of the temporal dimension.\nAxiom: {'subClassOf': ['time:TemporalEntity']}\nGenerated CQs:", "output": "To which higher-level temporal categories does time:Interval directly relate? | Is every time:Interval encompassed within the broader class of time:TemporalEntity? | Which specific entities are classified under time:TemporalEntity, such as time:Interval? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:ProperInterval\nDescription: time:ProperInterval is defined as a subclass of time:Interval. This means every instance of time:ProperInterval is also an instance of time:Interval, inheriting all its properties. Proper intervals represent temporal intervals with distinct start and end points (i.e., the start and end times are different), distinguishing them from instantaneous time points or degenerate intervals where start equals end.\nAxiom: {'subClassOf': ['time:Interval']}\nGenerated CQs:", "output": "What other subclasses exist under time:Interval besides time:ProperInterval? | Is time:Interval a broader category encompassing time:ProperInterval? | To which upper-level classifications does time:ProperInterval belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:DayOfWeek\nDescription: time:DayOfWeek is defined as a class equivalent to the set containing time:Monday, time:Tuesday, time:Wednesday, time:Thursday, time:Friday, time:Saturday, and time:Sunday. This means that any individual of time:DayOfWeek must be exactly one of these seven days, formally capturing the conventional enumeration of days in a week.\nAxiom: {'equivalentClass': ['{time:Wednesday, time:Friday, time:Saturday, time:Tuesday, time:Monday, time:Sunday, time:Thursday}']}\nGenerated CQs:", "output": "Is DayOfWeek identical to the set containing Wednesday, Friday, Saturday, Tuesday, Monday, Sunday, and Thursday? | Are there any classes included in DayOfWeek apart from the specified days: Wednesday, Friday, Saturday, Tuesday, Monday, Sunday, and Thursday? | Is each member of the set {Wednesday, Friday, Saturday, Tuesday, Monday, Sunday, Thursday} necessarily an instance of DayOfWeek? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:TemporalUnit\nDescription: time:TemporalUnit is a class that is defined as being equivalent to the set containing time:unitMonth, time:unitMinute, time:unitDay, time:unitHour, time:unitYear, time:unitSecond, and time:unitWeek. This means that any individual that is an instance of any of these specific temporal units (such as month, minute, day, hour, year, second, or week) is also an instance of time:TemporalUnit, and vice versa. The class thus serves as a grouping for the major standard units used to measure time.\nAxiom: {'equivalentClass': ['{time:unitMonth, time:unitMinute, time:unitDay, time:unitHour, time:unitYear, time:unitSecond, time:unitWeek}']}\nGenerated CQs:", "output": "Does time:TemporalUnit exclude any temporal concept other than the specified units (month, minute, day, hour, year, second, week)? | Is time:TemporalUnit logically equivalent to the union of time:unitMonth, time:unitMinute, time:unitDay, time:unitHour, time:unitYear, time:unitSecond, and time:unitWeek? | Is every time:TemporalUnit necessarily one of time:unitMonth, time:unitMinute, time:unitDay, time:unitHour, time:unitYear, time:unitSecond, or time:unitWeek? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:TemporalEntity\nDescription: time:TemporalEntity is defined as a class equivalent to either time:Instant or time:Interval. This means any instance of time:TemporalEntity must be either an instant (representing a single point in time) or an interval (representing a duration between two points in time). This equivalence captures the generality of temporal entities, encompassing both points and periods within a temporal framework.\nAxiom: {'equivalentClass': ['(time:Instant and time:Interval)']}\nGenerated CQs:", "output": "Is time:TemporalEntity defined as the union of time:Instant and time:Interval? | Are all instances of time:TemporalEntity necessarily either a time:Instant or a time:Interval? | Does time:TemporalEntity include any instance that is not a time:Instant or a time:Interval? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:Instant\nDescription: time:Instant is defined as a subclass of time:TemporalEntity, meaning it represents a specific point within the temporal domain. There are no explicit disjointness axioms specified, so no additional exclusivity constraints are imposed.\nAxiom: {'subClassOf': ['time:TemporalEntity'], 'disjointWith': ['time:ProperInterval']}\nGenerated CQs:", "output": "How does the ontology specify the mutual exclusivity between time:Instant and time:ProperInterval? | Is any entity allowed to be typed as both time:Instant and time:ProperInterval simultaneously? | Which classes are declared as disjoint with time:Instant within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:Year\nDescription: time:Year is a subclass of time:DurationDescription, formally defined as a duration consisting of exactly 1 year, with all other time units (months, days, hours, minutes, and seconds) restricted to exactly 0. This ensures that any individual of time:Year represents a duration of precisely one year, without any additional components.\nAxiom: {'subClassOf': ['time:DurationDescription'], 'propertyRestrictions': ['[time:years exactly 1]', '[time:months exactly 0]', '[time:hours exactly 0]', '[time:seconds exactly 0]', '[time:days exactly 0]', '[time:minutes exactly 0]', '[time:weeks exactly 0]']}\nGenerated CQs:", "output": "Is a Year in the ontology defined as having exactly zero weeks according to the time:weeks property? | Can any instance classified as time:Year possess a nonzero value for the time:weeks property? | Does the property restriction indicate that only time:Year entities with zero weeks are valid in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:DurationDescription\nDescription: time:DurationDescription is a class representing temporal durations, where each instance is restricted to having at most one value for each of the following properties: time:hours, time:minutes, time:seconds, time:days, time:weeks, and time:years. This ensures that an individual duration description cannot specify more than one value for any temporal unit, maintaining a unique specification for each time component.\nAxiom: {'propertyRestrictions': ['[time:hours max 1]', '[time:seconds max 1]', '[time:weeks max 1]', '[time:days max 1]', '[time:years max 1]', '[time:minutes max 1]', '[time:months max 1]']}\nGenerated CQs:", "output": "Is it required that a DurationDescription has at most one value for the 'months' property? | Can a DurationDescription be associated with more than one 'months' property value? | Does the ontology restrict DurationDescription entities to a single 'months' property assignment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:weeks\nDescription: The property \"time:weeks\" has no defined characteristics or super-properties. Its domain is restricted to instances of \"time:DurationDescription\", and its range is specified as a decimal value (xsd:decimal). This property is used to indicate the number of weeks associated with a given duration description. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['time:DurationDescription'], 'range': [], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:weeks' take as its value anything other than an xsd:decimal? | Is every object associated with the property 'time:weeks' necessarily an xsd:decimal? | What types of values are permitted as the range for the property 'time:weeks'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:seconds\nDescription: The property \"time:seconds\" has no declared characteristics or super-properties. Its domain is \"time:DurationDescription\", indicating it applies to duration descriptions, and its range is \"xsd:decimal\", specifying that its values are decimal numbers representing seconds. No inverse property is defined.\nAxiom: {'characteristics': [], 'domain': [], 'range': ['xsd:decimal'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:seconds' have a subject other than a time:DurationDescription? | Is there any time:DurationDescription that cannot be associated with 'time:seconds'? | What types of entities can be the domain for the property 'time:seconds'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalOverlappedBy\nDescription: The property \"time:intervalOverlappedBy\" has no explicitly defined domain, range, characteristics, or super-properties. It is specified as the inverse of \"time:intervalOverlaps\", indicating that if one interval is overlapped by another, the second interval overlaps the first. No further restrictions or features are defined for this property.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What is the inverse property of ‘intervalOverlappedBy’ in the ontology? | If interval A is overlapped by interval B, does it follow that interval B overlaps interval A according to the defined properties? | How are the properties ‘intervalOverlappedBy’ and ‘intervalOverlaps’ connected in terms of inverse relationships? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalAfter\nDescription: The property \"time:intervalAfter\" has no explicitly defined characteristics, domain, or range restrictions. It does not have any super-properties. Its inverse property is \"time:intervalBefore,\" indicating that if one interval is after another, the second is before the first. This property is used to relate temporal intervals where one occurs after the other.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What is the ontological relationship established between 'intervalAfter' and 'intervalBefore'? | If interval A occurs after interval B, must interval B occur before interval A? | Which property is defined as the inverse of 'intervalAfter' in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:timeZone\nDescription: The property \"time:timeZone\" links an instance of time:DateTimeDescription to an instance of tzont:TimeZone. It has no explicitly defined characteristics, super-properties, or inverse properties. This property is used to specify the time zone associated with a particular date-time description.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeDescription'], 'range': [], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is every value assigned using the property 'time:timeZone' required to be a tzont:TimeZone? | Can the property 'time:timeZone' reference any class other than tzont:TimeZone as its range? | What entities are permitted to serve as the range for the property 'time:timeZone'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:hasEnd\nDescription: The property \"time:hasEnd\" links a temporal entity (\"time:TemporalEntity\") to a time instant (\"time:Instant\") indicating its endpoint. It has no defined property characteristics, super-properties, or inverse properties. This property is used to specify when a temporal entity concludes.\nAxiom: {'characteristics': [], 'domain': [], 'range': ['time:Instant'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:hasEnd' be used with a subject that is not a time:TemporalEntity? | Are all entities appearing as the subject of 'time:hasEnd' necessarily instances of time:TemporalEntity? | What types of entities are permitted as the domain of the 'time:hasEnd' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalDuring\nDescription: The property \"time:intervalDuring\" relates two instances of time:ProperInterval, indicating that one interval occurs during the other. It has no explicitly defined characteristics, super-properties, or specified inverse property. Both its domain and range are restricted to time:ProperInterval, signifying its use in expressing temporal containment between intervals.\nAxiom: {'characteristics': [], 'domain': [], 'range': ['time:ProperInterval'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'intervalDuring' be used with subjects other than ProperInterval? | What types of entities are permissible as the subject for the property 'intervalDuring'? | Are there any entities classified as ProperInterval that cannot be the subject of 'intervalDuring'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalMetBy\nDescription: The property \"time:intervalMetBy\" has no explicitly defined characteristics, domain, or range restrictions, and does not have any super-properties. It is specified as the inverse of \"time:intervalMeets,\" indicating a temporal relation where one interval is met by another. No additional description is provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What is the ontological connection between the properties ‘intervalMetBy’ and ‘intervalMeets’? | If an interval A is met by interval B, does this entail that B meets A according to the ontology? | Which property is defined as the inverse of ‘intervalMetBy’ in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:inDateTime\nDescription: The property \"time:inDateTime\" links an instance of time:Instant to a corresponding time:DateTimeDescription. It has no declared characteristics such as being functional or transitive, and it does not inherit from any super-property or have an inverse property. The domain is restricted to time:Instant, and the range is time:DateTimeDescription, indicating its purpose is to specify the detailed date and time information for a given temporal instant.\nAxiom: {'characteristics': [], 'domain': [], 'range': ['time:DateTimeDescription'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:inDateTime' apply to any subject other than time:Instant? | Is it possible that a time:Instant does not have an associated value for the property 'time:inDateTime'? | What are the possible domains for the property 'time:inDateTime'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:hours\nDescription: The property \"time:hours\" has a domain of \"time:DurationDescription\" and a range of \"xsd:decimal\", indicating it relates a duration description to a decimal value representing hours. It has no explicitly defined characteristics, super-properties, or inverse properties.\nAxiom: {'characteristics': [], 'domain': [], 'range': ['xsd:decimal'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:hours' have a subject other than a time:DurationDescription? | What types of entities are permitted as the subject of 'time:hours'? | Is it correct that only instances of time:DurationDescription can use the 'time:hours' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:hasDateTimeDescription\nDescription: The property \"time:hasDateTimeDescription\" has no special characteristics and is not defined as a sub-property or inverse of any other property. Its domain is restricted to instances of time:DateTimeInterval, and its range is time:DateTimeDescription. This property relates a DateTimeInterval to a DateTimeDescription, indicating the specific date and time details associated with the interval.\nAxiom: {'characteristics': [], 'domain': [], 'range': ['time:DateTimeDescription'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'hasDateTimeDescription' be associated with any subject other than a DateTimeInterval? | Is it possible for an object linked via 'hasDateTimeDescription' not to conform to a DateTimeDescription? | What entities are permitted to serve as the domain for the 'hasDateTimeDescription' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:second\nDescription: The property \"time:second\" has no specified characteristics, super-properties, or inverse properties. Its domain is restricted to instances of time:DateTimeDescription, and its range is xsd:decimal. This property is used to associate a DateTimeDescription with a decimal value representing seconds.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeDescription'], 'range': [], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:second' refer to any value type other than xsd:decimal? | Is it necessary that all values of 'time:second' are of type xsd:decimal? | What types of entities are permitted as the range of the property 'time:second'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:minute\nDescription: The property \"time:minute\" relates an individual of the class \"time:DateTimeDescription\" to a non-negative integer value representing the minute component of a date-time description. It has no explicitly defined characteristics, super-properties, or inverse properties. Its domain is restricted to \"time:DateTimeDescription\", and its range is restricted to \"xsd:nonNegativeInteger\".\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeDescription'], 'range': [], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is there any value other than a nonNegativeInteger that can be used as the range of 'time:minute'? | Are all objects associated with the property 'time:minute' necessarily nonNegativeIntegers? | What types of values are permitted as the range for the property 'time:minute'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:hasDurationDescription\nDescription: The property \"time:hasDurationDescription\" links an instance of time:TemporalEntity to a corresponding time:DurationDescription. It has no defined characteristics, super-properties, or inverse properties. Its domain is restricted to time:TemporalEntity, and its range is limited to time:DurationDescription. This property is used to specify the duration description associated with a temporal entity.\nAxiom: {'characteristics': [], 'domain': ['time:TemporalEntity'], 'range': [], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:hasDurationDescription' take as its value an entity other than 'time:DurationDescription'? | Is every object of the 'time:hasDurationDescription' property necessarily a 'time:DurationDescription'? | What entities are permitted as the range of 'time:hasDurationDescription'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalStarts\nDescription: The property \"time:intervalStarts\" has no explicitly defined characteristics or super-properties. Its domain and range are both limited to \"time:ProperInterval\", indicating it relates two proper time intervals. This property is used to assert that one proper interval starts another proper interval. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': [], 'range': ['time:ProperInterval'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'intervalStarts' be used with subjects other than ProperInterval? | Is there any ProperInterval that cannot be associated with the property 'intervalStarts'? | What types of entities may serve as the domain for the 'intervalStarts' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:after\nDescription: The property \"time:after\" has no explicitly defined characteristics, domain, or range restrictions, and does not have any super-properties. It is specified as the inverse of the property \"time:before,\" indicating that if one entity is related to another via \"time:after,\" the second entity is related to the first via \"time:before.\" No additional description is provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What is the inverse property of 'time:after' in the ontology? | If entity A is related to entity B through 'time:after', does the ontology entail that B is related to A through 'time:before'? | How do the properties 'time:after' and 'time:before' correspond as logical inverses in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:inXSDDateTime\nDescription: The property \"time:inXSDDateTime\" relates instances of \"time:Instant\" to values of type \"xsd:dateTime\". It has no additional characteristics, super-properties, or inverse properties specified. This property is used to associate a temporal instant with its corresponding XML Schema dateTime representation.\nAxiom: {'characteristics': [], 'domain': [], 'range': ['xsd:dateTime'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'time:inXSDDateTime' have a subject that is not a 'time:Instant'? | Are all instances related through 'time:inXSDDateTime' necessarily 'time:Instant'? | What are the possible domains for the property 'time:inXSDDateTime'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalStartedBy\nDescription: The property \"time:intervalStartedBy\" has no explicitly defined characteristics, domain, or range restrictions, and is not a sub-property of any other property. It is specified as the inverse of \"time:intervalStarts,\" indicating that if an interval is started by another, then the latter starts the former. No additional constraints or relationships are provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What is the inverse relationship specified between the properties ‘intervalStartedBy’ and ‘intervalStarts’ in the ontology? | Does the assertion that interval A intervalStartedBy interval B entail that interval B intervalStarts interval A? | Which property functions as the inverse of ‘intervalStartedBy’ according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:months\nDescription: The property \"time:months\" links an instance of time:DurationDescription to a decimal value representing the number of months. It has no specified characteristics, super-properties, or inverse properties. Its domain is restricted to time:DurationDescription, and its range is xsd:decimal.\nAxiom: {'characteristics': [], 'domain': [], 'range': ['xsd:decimal'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is the property 'months' applicable to entities other than DurationDescription? | Are all subjects of the property 'months' instances of DurationDescription? | What entities can be the domain of the 'months' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalEquals\nDescription: The property \"time:intervalEquals\" links two individuals of type \"time:ProperInterval\" and asserts that they are equal in terms of their start and end points. It has no additional characteristics, super-properties, or inverse properties defined. Both its domain and range are restricted to \"time:ProperInterval\".\nAxiom: {'characteristics': [], 'domain': [], 'range': ['time:ProperInterval'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'intervalEquals' be used with subjects that are not instances of 'ProperInterval'? | Are all values associated with the property 'intervalEquals' required to be of a specific type or class? | What types of entities can serve as the domain for the property 'intervalEquals'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:years\nDescription: The property \"time:years\" relates instances of \"time:DurationDescription\" to a decimal value representing a duration in years. It does not have explicitly defined characteristics, super-properties, or inverse properties. Its range is restricted to decimal values (xsd:decimal).\nAxiom: {'characteristics': [], 'domain': [], 'range': ['xsd:decimal'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'time:years' be used with entities that are not instances of 'time:DurationDescription'? | Is 'time:DurationDescription' the only possible domain for the property 'time:years'? | What types of objects are allowed as the subject when using the property 'time:years'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:minutes\nDescription: The property \"time:minutes\" has no explicitly defined characteristics, super-properties, or inverse properties. Its domain is restricted to instances of \"time:DurationDescription,\" indicating that it is intended to relate duration descriptions to a specific value or entity corresponding to minutes. The range of this property is not explicitly specified.\nAxiom: {'characteristics': [], 'domain': ['time:DurationDescription'], 'range': ['xsd:decimal'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can values for 'time:minutes' only be of type xsd:decimal? | Is every range value for 'time:minutes' constrained exclusively to xsd:decimal? | What possible datatypes can serve as the range for the property 'time:minutes'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:xsdDateTime\nDescription: The property \"time:xsdDateTime\" has a domain restricted to \"time:DateTimeInterval\" and does not specify a range, characteristics, super-properties, or inverse properties. This property is used to associate instances of DateTimeInterval with additional information, likely a specific date and time value.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeInterval'], 'range': ['xsd:dateTime'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is every value assigned via the property 'time:xsdDateTime' necessarily of type xsd:dateTime? | Can 'time:xsdDateTime' have a range different from xsd:dateTime? | What data types are permissible as the range for the property 'time:xsdDateTime'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:unitType\nDescription: The property \"time:unitType\" has no specified characteristics, domain, super-properties, or inverse property. Its range is restricted to instances of \"time:TemporalUnit\", indicating that it associates a subject with a temporal unit.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeDescription'], 'range': ['time:TemporalUnit'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'unitType' be used with subjects other than 'DateTimeDescription'? | Must all objects of the 'unitType' property refer to a specific type or class? | What are the possible domains for the property 'unitType'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:month\nDescription: The property \"time:month\" has no explicitly defined characteristics, domain restrictions, super-properties, or inverse properties.  \nIts range is restricted to values of data type xsd:gMonth, indicating it is used to relate an entity to a specific month in the Gregorian calendar.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeDescription'], 'range': ['xsd:gMonth'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is there any entity other than time:DateTimeDescription that can be the subject of the property time:month? | Are all objects used with the property time:month required to represent months? | What types of entities can act as the domain for the property time:month? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:hour\nDescription: The property \"time:hour\" has \"time:DateTimeDescription\" as its domain, indicating it is used with instances of date and time descriptions. No explicit range, characteristics, super-properties, or inverse properties are defined. This property represents the hour component within a temporal description.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeDescription'], 'range': ['xsd:nonNegativeInteger'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is every value of the property 'time:hour' required to be a non-negative integer? | Can 'time:hour' have a range other than xsd:nonNegativeInteger? | What kinds of values are permitted as the range for the property 'time:hour'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalOverlaps\nDescription: The property \"time:intervalOverlaps\" has no explicitly defined characteristics, super-properties, or inverse properties. Its domain is restricted to instances of \"time:ProperInterval,\" indicating that it is used to relate proper time intervals to other entities. No specific range is defined for this property.\nAxiom: {'characteristics': [], 'domain': ['time:ProperInterval'], 'range': ['time:ProperInterval'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'intervalOverlaps' relate to anything other than a ProperInterval as its object? | Is there any ProperInterval that cannot be used as the range for the property 'intervalOverlaps'? | What types of entities can appear as the range for the property 'intervalOverlaps'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalFinishedBy\nDescription: The property \"time:intervalFinishedBy\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. This indicates that its usage is unrestricted by ontology axioms and is not semantically linked to other properties within the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': ['time:intervalFinishes']}\nGenerated CQs:", "output": "What is the logical connection between 'intervalFinishedBy' and 'intervalFinishes' in the ontology? | If time interval A is related to interval B using 'intervalFinishedBy', does this entail that B is related to A via 'intervalFinishes'? | Which property is defined as the inverse of 'intervalFinishedBy' in the time ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalContains\nDescription: The property \"time:intervalContains\" does not have explicitly defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely intended to relate a temporal interval to another interval or event that it contains.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': ['time:intervalDuring']}\nGenerated CQs:", "output": "How does the ontology represent the connection between 'intervalContains' and 'intervalDuring' properties? | If a time interval A contains time interval B, does the ontology entail that B occurs during A? | Which property is identified as the inverse of 'intervalContains' in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:dayOfYear\nDescription: The property \"time:dayOfYear\" has no specific characteristics, no explicit domain restrictions, and no defined super-properties. Its range is restricted to non-negative integers (xsd:nonNegativeInteger), indicating that it is used to represent the day of the year as a non-negative integer value. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeDescription'], 'range': ['xsd:nonNegativeInteger'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'dayOfYear' be used with subjects other than DateTimeDescription? | Is every instance of DateTimeDescription required to have a value for the 'dayOfYear' property? | What types of entities are permitted as the domain of the 'dayOfYear' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:hasBeginning\nDescription: The property \"time:hasBeginning\" does not have specified characteristics, domain restrictions, super-properties, or inverse properties. Its range is limited to individuals of type \"time:Instant,\" indicating it associates a subject with a temporal instant marking its beginning.\nAxiom: {'characteristics': [], 'domain': ['time:TemporalEntity'], 'range': ['time:Instant'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:hasBeginning' be used with any subject other than a 'time:TemporalEntity'? | Is it necessary that every subject of 'time:hasBeginning' is a 'time:TemporalEntity'? | Which types of entities are permitted as the subject for the property 'time:hasBeginning'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:dayOfWeek\nDescription: The property \"time:dayOfWeek\" has no explicitly defined characteristics or super-properties. Its domain is restricted to instances of \"time:DateTimeDescription\", indicating it is used to associate a date-time description with its corresponding day of the week. No specific range or inverse property is defined.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeDescription'], 'range': ['time:DayOfWeek'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:dayOfWeek' have values that are not instances of 'time:DayOfWeek'? | Is it possible for any entity other than 'time:DayOfWeek' to serve as the range of 'time:dayOfWeek'? | What entities are permitted as the range for the property 'time:dayOfWeek'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:year\nDescription: The property \"time:year\" has no specified characteristics or super-properties. Its domain is restricted to instances of time:DateTimeDescription, but no range is defined. This property is intended to associate a DateTimeDescription with a corresponding year value. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeDescription'], 'range': ['xsd:gYear'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Does the property 'time:year' accept values other than those of type xsd:gYear as its range? | Are all values associated with 'time:year' required to be instances of xsd:gYear? | What possible data types can be used as the range for the property 'time:year'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:days\nDescription: The property \"time:days\" has no specified characteristics, super-properties, or inverse properties. Its domain is restricted to \"time:DurationDescription\", indicating that it is used to associate a duration description with an unspecified value representing days. The range of this property is not explicitly defined.\nAxiom: {'characteristics': [], 'domain': ['time:DurationDescription'], 'range': ['xsd:decimal'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:days' point to values other than xsd:decimal? | Is every value assigned via 'time:days' required to be of type xsd:decimal? | What types of values are valid as the range for the property 'time:days'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalMeets\nDescription: The property \"time:intervalMeets\" has no specified property characteristics or super-properties. Its domain is restricted to instances of \"time:ProperInterval\", indicating that it is used to relate proper time intervals to other entities. No range or inverse property is defined.\nAxiom: {'characteristics': [], 'domain': ['time:ProperInterval'], 'range': ['time:ProperInterval'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'intervalMeets' be used with objects other than 'ProperInterval'? | Is every object linked by the property 'intervalMeets' obliged to be a 'ProperInterval'? | What types of entities are allowed as the range for the 'intervalMeets' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:week\nDescription: The property \"time:week\" has no explicitly defined characteristics, super-properties, or inverse properties. Its domain is restricted to instances of \"time:DateTimeDescription,\" indicating that it is used to associate a week-related value or resource with a date-time description. No range is specified.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeDescription'], 'range': ['xsd:nonNegativeInteger'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'week' be associated with any object other than a nonNegativeInteger as its value? | Is it correct that the only possible range for 'week' is xsd:nonNegativeInteger, or can other datatypes be used? | What types of values are permissible as the range of the property 'week'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalBefore\nDescription: The property \"time:intervalBefore\" has no explicitly defined characteristics or domain restrictions. Its range is restricted to \"time:ProperInterval,\" indicating that it relates an entity to a proper time interval. It is specified as a sub-property of \"time:before,\" inheriting its semantic implications. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['time:ProperInterval'], 'range': ['time:ProperInterval'], 'subPropertyOf': ['time:before'], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:intervalBefore' have a domain different from time:ProperInterval? | Is there any instance of time:ProperInterval that cannot be used as the subject of 'time:intervalBefore'? | What entities are permitted to serve as the domain of 'time:intervalBefore'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:before\nDescription: The property \"time:before\" is a transitive property used to relate temporal entities, as indicated by its range restriction to \"time:TemporalEntity.\" There are no explicit domain constraints, no specified super-properties, and no defined inverse property. This property is typically used to assert that one temporal entity precedes another in time.\nAxiom: {'characteristics': ['Transitive'], 'domain': ['time:TemporalEntity'], 'range': ['time:TemporalEntity'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:before' be used with subjects that are not instances of 'time:TemporalEntity'? | Are there any 'time:TemporalEntity' instances that cannot participate as domains in the 'time:before' relationship? | What types of entities are permissible as the domain for the property 'time:before'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:inside\nDescription: The property \"time:inside\" has no specified characteristics, domain, super-properties, or inverse properties. Its range is restricted to instances of \"time:Instant\", indicating that it relates subjects to a specific temporal instant.\nAxiom: {'characteristics': [], 'domain': ['time:Interval'], 'range': ['time:Instant'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:inside' have a subject that is not a time:Interval? | Is it possible for an entity that is not a time:Interval to be associated via 'time:inside'? | What are the possible domains for the 'time:inside' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalFinishes\nDescription: The property \"time:intervalFinishes\" has no specified characteristics or domain restrictions. Its range is limited to instances of \"time:ProperInterval,\" indicating it relates an entity to a proper time interval that it finishes. There are no super-properties or inverse properties defined.\nAxiom: {'characteristics': [], 'domain': ['time:ProperInterval'], 'range': ['time:ProperInterval'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'intervalFinishes' be used with a subject that is not a ProperInterval? | Are all subjects of the 'intervalFinishes' property instances of ProperInterval? | What entities are permitted as the domain for the 'intervalFinishes' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:day\nDescription: The property \"time:day\" has no special characteristics or super-properties. Its domain is restricted to instances of \"time:DateTimeDescription,\" indicating that it is used to associate a day value with a temporal description. There are no specified range constraints or inverse properties.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeDescription'], 'range': ['xsd:gDay'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is every value assigned to the property 'time:day' necessarily of type xsd:gDay? | Can 'time:day' ever be associated with an object outside the range xsd:gDay? | What types of values are permitted as the range of the property 'time:day'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ExerciseSummary\nDescription: ExerciseSummary is a subclass of DaySummary that encapsulates the summary of exercise activities recorded for a specific day. Members of this class must have exactly one value each for exerciseStartTime (of type time:Instant), distanceTravelled (xsd:double), strideLength (xsd:double), exerciseDuration (time:DurationDescription), walkSpeed (xsd:double), heartRate (xsd:double), exerciseIntensity (rdfs:Literal), and accelerometerCountsPerMinute (xsd:int). Each of these properties is also restricted to values of the specified type, ensuring strict data consistency for representing exercise-session summaries.\nAxiom: {'subClassOf': ['DaySummary'], 'propertyRestrictions': ['[exerciseStartTime only time:Instant]', '[distanceTravelled only xsd:double]', '[exerciseDuration only time:DurationDescription]', '[walkSpeed exactly 1 xsd:double]', '[exerciseDuration exactly 1 time:DurationDescription]', '[heartRate only xsd:double]', '[heartRate exactly 1 xsd:double]', '[walkSpeed only xsd:double]', '[exerciseIntensity exactly 1]', '[exerciseStartTime exactly 1 time:Instant]', '[strideLength only xsd:double]', '[distanceTravelled exactly 1 xsd:double]', '[accelerometerCountsPerMinute exactly 1 xsd:int]', '[exerciseIntensity only rdfs:Literal]', '[accelerometerCountsPerMinute only xsd:int]']}\nGenerated CQs:", "output": "Is each ExerciseSummary instance required to have exactly one value for the strideLength property? | Can an ExerciseSummary be associated with more than one strideLength value? | Does every ExerciseSummary exclude the possibility of having zero or multiple strideLength values? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SocialSummary\nDescription: SocialSummary is defined as a subclass of DaySummary, representing a daily aggregation of social interaction metrics. Members of this class are characterized by the presence of specific numeric properties: each individual must have exactly one value (of type xsd:int) specified for the number of social interactions, face-to-face conversations, phone conversations, and communicative attempts. Additionally, these properties are restricted to accept only integer values. This formalization ensures that every SocialSummary instance provides an unambiguous, integer-based summary of key social activities occurring within a single day.\nAxiom: {'subClassOf': ['DaySummary'], 'propertyRestrictions': ['[numberOfSocialInteractions only xsd:int]', '[numberOfFaceToFaceConversations only xsd:int]', '[numberOfPhoneConversations exactly 1 xsd:int]', '[numberOfCommunicativeAttempts exactly 1 xsd:int]', '[numberOfCommunicativeAttempts only xsd:int]', '[numberOfPhoneConversations only xsd:int]', '[numberOfFaceToFaceConversations exactly 1 xsd:int]']}\nGenerated CQs:", "output": "Is it required that a SocialSummary must have exactly one value for the 'numberOfSocialInteractions' property? | Can a SocialSummary ever have more or fewer than one 'numberOfSocialInteractions' specified? | Does the SocialSummary class permit multiple or zero assignments of 'numberOfSocialInteractions', or is exactly one mandatory? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ADLProblem\nDescription: ADLProblem is defined as a subclass of Problem. This means every instance of ADLProblem is also an instance of Problem, establishing a hierarchical relationship where ADLProblem specifies a more specialized type of problem related to activities of daily living (ADL). No further property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['Problem']}\nGenerated CQs:", "output": "Which types of Problem include ADLProblem as a more specific instance? | What broader categories encompass ADLProblem? | Is ADLProblem a specialized form within the overarching class of Problem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ExerciseProblem\nDescription: ExerciseProblem is defined as a subclass of Problem. This means that every ExerciseProblem is considered a type of Problem, inheriting all characteristics of the Problem class. No additional distinguishing axioms or property restrictions are specified for ExerciseProblem in the current definition.\nAxiom: {'subClassOf': ['Problem']}\nGenerated CQs:", "output": "What are the specialized types of Problem, such as ExerciseProblem? | Does ExerciseProblem fall under the wider category of Problem? | Which broader classifications encompass ExerciseProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MoodProblem\nDescription: MoodProblem is defined as a subclass of Problem, indicating that any instance of MoodProblem is also an instance of Problem. This classification establishes MoodProblem as a specific type of problem, but does not currently provide further distinguishing characteristics beyond its placement in the hierarchy.\nAxiom: {'subClassOf': ['Problem']}\nGenerated CQs:", "output": "Does MoodProblem fall under the general category of Problem? | What are the hierarchically broader classes that include MoodProblem? | Which specific types are encompassed within the broader class Problem, such as MoodProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SleepProblem\nDescription: SleepProblem is defined as a subclass of Problem, representing a specific category of problems related to sleep. Any individual classified as a SleepProblem is, by definition, also a Problem, inheriting all general properties and restrictions of the Problem class but specializing them to issues involving sleep.\nAxiom: {'subClassOf': ['Problem']}\nGenerated CQs:", "output": "Which subcategories exist within the Problem class, such as SleepProblem? | What broader categories encompass SleepProblem? | Is SleepProblem categorized under Problem types? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SocialProblem\nDescription: SocialProblem is defined as a subclass of Problem. This means every social problem is recognized as a problem, but with distinguishing features or contexts that are social in nature. The axiom places SocialProblem within the hierarchy of problems, ensuring that social problems inherit all general characteristics of problems while being specifically identified for their relevance to societal issues.\nAxiom: {'subClassOf': ['Problem']}\nGenerated CQs:", "output": "Is every SocialProblem categorized under the broader class of Problem? | To which overarching categories does SocialProblem belong within the ontology? | Which specific types are subsumed by Problem, including SocialProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ADLSummary\nDescription: ADLSummary is a subclass of DaySummary. This means that every instance of ADLSummary is also an instance of DaySummary and inherits its properties and constraints. No additional axioms or distinguishing features are specified beyond its hierarchical relationship.\nAxiom: {'subClassOf': ['DaySummary']}\nGenerated CQs:", "output": "Is ADLSummary classified under the broader group of DaySummary types? | What higher-level categories include ADLSummary? | Which specific summaries are encompassed within DaySummary, such as ADLSummary? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ExcessiveNapProblem\nDescription: ExcessiveNapProblem is defined as a subclass of NappingProblem. It represents a specific type of napping issue characterized by an unusually high frequency or duration of naps, distinguishing it from other forms of napping problems.\nAxiom: {'subClassOf': ['NappingProblem']}\nGenerated CQs:", "output": "What are the direct superclasses associated with ExcessiveNapProblem? | Is ExcessiveNapProblem classified under the broader group of NappingProblem? | Which specific types of NappingProblem encompass ExcessiveNapProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FailureToPrepareMeal\nDescription: FailureToPrepareMeal is defined as a subclass of MealProblem, representing a specific type of problem wherein a meal is not successfully prepared. All instances of FailureToPrepareMeal are, by definition, also considered instances of MealProblem, aligning this class within the broader context of meal-related issues.\nAxiom: {'subClassOf': ['MealProblem']}\nGenerated CQs:", "output": "What types of issues are included as subclasses of MealProblem? | Does FailureToPrepareMeal fall under the category of MealProblem? | Which broader classes encompass FailureToPrepareMeal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InappropriateMealDuration\nDescription: InappropriateMealDuration is defined as a subclass of MealProblem. This class represents meal-related issues specifically concerning the duration of meals. Any instance of InappropriateMealDuration is inherently a type of MealProblem, indicating that problems related to the amount of time spent during meals fall under this category.\nAxiom: {'subClassOf': ['MealProblem']}\nGenerated CQs:", "output": "Is InappropriateMealDuration classified under the broader category of MealProblem? | To which overarching problem categories does InappropriateMealDuration pertain? | Which specific problems are encompassed by the general class MealProblem, including InappropriateMealDuration? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InappropriateMealLocation\nDescription: InappropriateMealLocation is a subclass of MealProblem. This class represents issues or problems specifically related to unsuitable or improper locations for meals. Every instance of InappropriateMealLocation is also considered a type of MealProblem, highlighting its role in categorizing location-based meal issues.\nAxiom: {'subClassOf': ['MealProblem']}\nGenerated CQs:", "output": "To which higher-level categories does InappropriateMealLocation belong? | Is InappropriateMealLocation categorized under the broader class of MealProblem? | Which types are classified as more specific instances of MealProblem, including InappropriateMealLocation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InterruptedMeal\nDescription: InterruptedMeal is a subclass of MealProblem, indicating that it represents a specific type of issue arising during a meal. Members of this class are characterized as meal-related problems where the meal is disrupted or not completed as intended. This formalization ensures that any instance of InterruptedMeal also qualifies as a MealProblem, distinguishing it from other meal-related issues by its defining feature of interruption.\nAxiom: {'subClassOf': ['MealProblem']}\nGenerated CQs:", "output": "What categories represent the superclass of InterruptedMeal? | Which problem types encompass InterruptedMeal as a more specific instance? | Does InterruptedMeal belong to the broader classification of MealProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MissedMeal\nDescription: MissedMeal is defined as a subclass of MealProblem, meaning it represents a specific type of problem related to meals. Any instance of MissedMeal is, by definition, also an instance of MealProblem. This classification is used to denote situations where a meal is not consumed as expected.\nAxiom: {'subClassOf': ['MealProblem']}\nGenerated CQs:", "output": "Is MissedMeal categorized as a kind of MealProblem? | What broader classifications does MissedMeal fall under within the ontology? | Which problems are subclasses of MealProblem, specifically including MissedMeal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FragmentedSleepProblem\nDescription: FragmentedSleepProblem is a subclass of InterruptedSleepProblem, representing a specific type of sleep disturbance characterized by sleep fragmentation. This condition involves frequent interruptions or arousals during sleep, leading to broken or non-continuous sleep.\nAxiom: {'subClassOf': ['InterruptedSleepProblem']}\nGenerated CQs:", "output": "What broader sleep problem categories encompass FragmentedSleepProblem? | Which specific sleep problems are classified under InterruptedSleepProblem, such as FragmentedSleepProblem? | Is FragmentedSleepProblem categorized as a type of InterruptedSleepProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Nocturia\nDescription: Nocturia is defined as a subclass of InterruptedSleepProblem. Individuals with nocturia typically experience interrupted sleep due to visiting the bathroom more than twice during the night. This classification formalizes nocturia as a specific type of sleep disturbance characterized by frequent nighttime urination.\nAxiom: {'subClassOf': ['InterruptedSleepProblem']}\nGenerated CQs:", "output": "Which sleep problems are considered subtypes of InterruptedSleepProblem, such as Nocturia? | What broader problem categories include Nocturia among their subclasses? | Is Nocturia classified as a kind of InterruptedSleepProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HighStressLevel\nDescription: HighStressLevel is defined as a subclass of MoodProblem, indicating that all individuals classified as HighStressLevel are also considered to have a mood-related problem. This formalization groups HighStressLevel within the broader category of mood issues for more precise reasoning and classification. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['MoodProblem']}\nGenerated CQs:", "output": "Is HighStressLevel classified under the broader group of MoodProblem? | Which mood-related issues encompass HighStressLevel as a specific case? | What higher-level categories does HighStressLevel fall under within the context of mood problems? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SelfReportedLowMood\nDescription: SelfReportedLowMood is defined as a subclass of MoodProblem, indicating that all individuals classified under SelfReportedLowMood are also considered types of MoodProblem. This formalization implies that SelfReportedLowMood represents a specific form or instance of mood problem, characterized by being self-reported rather than externally assessed.\nAxiom: {'subClassOf': ['MoodProblem']}\nGenerated CQs:", "output": "Does SelfReportedLowMood fall under the broader classification of MoodProblem? | Which conditions are categorized as more specific forms of MoodProblem, such as SelfReportedLowMood? | To which overarching classes does SelfReportedLowMood pertain within the mood domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InsufficientAccelerometerCounts\nDescription: InsufficientAccelerometerCounts is defined as a subclass of ExerciseProblem. This class represents a specific type of exercise problem where the measured accelerometer counts are lower than required or expected levels, indicating an issue with the quantity or quality of motion captured during exercise activities.\nAxiom: {'subClassOf': ['ExerciseProblem']}\nGenerated CQs:", "output": "What higher-level categories include InsufficientAccelerometerCounts as a member? | Is InsufficientAccelerometerCounts classified under the broader category of ExerciseProblem? | Which more specific problems are encompassed by ExerciseProblem, such as InsufficientAccelerometerCounts? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ShortStrideLength\nDescription: ShortStrideLength is defined as a subclass of ExerciseProblem. This indicates that it represents a specific type of issue encountered during exercise, categorized under general exercise problems. No further constraints or distinguishing characteristics are specified.\nAxiom: {'subClassOf': ['ExerciseProblem']}\nGenerated CQs:", "output": "Which higher-level categories encompass ShortStrideLength as a member? | Is ShortStrideLength classified as a type of ExerciseProblem? | What specific types fall under the category of ExerciseProblem, including ShortStrideLength? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SlowWalkSpeed\nDescription: SlowWalkSpeed is defined as a subclass of ExerciseProblem, indicating that it represents a specific type of problem or difficulty related to walking at a slow speed. Members of this class are considered instances where an individual's slow walking speed is identified as an exercise-related issue.\nAxiom: {'subClassOf': ['ExerciseProblem']}\nGenerated CQs:", "output": "What specific subtypes fall under ExerciseProblem, such as SlowWalkSpeed? | Which higher-level classes include SlowWalkSpeed as a subordinate concept? | Is SlowWalkSpeed classified as a type of ExerciseProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InsufficientFaceToFaceInteraction\nDescription: InsufficientFaceToFaceInteraction is defined as a subclass of SocialProblem. This class represents social problems that arise specifically from a lack of direct, in-person interactions between individuals. Any instance of InsufficientFaceToFaceInteraction is, by definition, also an instance of SocialProblem, indicating its relevance within the broader context of social issues.\nAxiom: {'subClassOf': ['SocialProblem']}\nGenerated CQs:", "output": "What kinds of SocialProblem encompass InsufficientFaceToFaceInteraction as a subclass? | Which more general classifications include InsufficientFaceToFaceInteraction within their scope? | Is InsufficientFaceToFaceInteraction categorized as a specific type of SocialProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InsufficientTelephoneInteraction\nDescription: InsufficientTelephoneInteraction is defined as a subclass of SocialProblem. This means that every instance of InsufficientTelephoneInteraction is also an instance of SocialProblem, situating it within the broader category of issues impacting social well-being. No further property restrictions or disjointness axioms are specified, so its definition relies solely on its classification as a type of social problem.\nAxiom: {'subClassOf': ['SocialProblem']}\nGenerated CQs:", "output": "Which specific social problems include InsufficientTelephoneInteraction as a subtype? | What are the more general categories that encompass InsufficientTelephoneInteraction? | Is InsufficientTelephoneInteraction classified under the broader category of SocialProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InterruptedSleepProblem\nDescription: InterruptedSleepProblem is defined as a subclass of SleepProblem, indicating that every instance of InterruptedSleepProblem is also an instance of SleepProblem. This class characterizes sleep issues specifically involving interruptions or disturbances during sleep, distinguishing it from other types of sleep problems.\nAxiom: {'subClassOf': ['SleepProblem']}\nGenerated CQs:", "output": "To which parent classes is InterruptedSleepProblem associated? | Does InterruptedSleepProblem fall under the general classification of SleepProblem? | What types of SleepProblem are defined, and does this include InterruptedSleepProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NappingProblem\nDescription: NappingProblem is defined as a subclass of SleepProblem, indicating that any instance classified as a NappingProblem is also recognized as a SleepProblem. This class formalizes issues specifically related to napping, distinguishing it from other types of sleep problems.\nAxiom: {'subClassOf': ['SleepProblem']}\nGenerated CQs:", "output": "What are all the more specific problem types that fall under SleepProblem, including NappingProblem? | Is NappingProblem categorized under the broader class of SleepProblem? | Which upper-level categories encompass NappingProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PeriodicLimbMovement\nDescription: PeriodicLimbMovement is defined as a subclass of SleepProblem, indicating that every instance of PeriodicLimbMovement is also considered a type of sleep problem. This class captures disturbances involving repetitive limb movements during sleep, aligning with the broader classification of sleep-related disorders.\nAxiom: {'subClassOf': ['SleepProblem']}\nGenerated CQs:", "output": "Which specific types of SleepProblem include PeriodicLimbMovement? | Is PeriodicLimbMovement classified under the broader category of SleepProblem? | What are the parent categories associated with PeriodicLimbMovement? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SleepDurationProblem\nDescription: SleepDurationProblem is defined as a subclass of SleepProblem. Members of this class experience issues related specifically to sleep duration. According to the current description, this class is characterized by individuals whose sleep duration is less than 7 hours. This formalization ensures that all instances of SleepDurationProblem represent cases where insufficient sleep time is the primary issue.\nAxiom: {'subClassOf': ['SleepProblem']}\nGenerated CQs:", "output": "Is SleepDurationProblem categorized under the broader class of SleepProblem? | To what higher-level groups does SleepDurationProblem belong within the ontology? | Which types of sleep issues are classified as more specific than SleepProblem, such as SleepDurationProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SleepEfficiencyProblem\nDescription: SleepEfficiencyProblem is a subclass of SleepProblem, referring specifically to cases where an individual's sleep efficiency is less than 85%. This classification distinguishes SleepEfficiencyProblem from other sleep-related issues by focusing on reduced efficiency in sleep, as formally defined by the subclass axiom and supported by the given comment.\nAxiom: {'subClassOf': ['SleepProblem']}\nGenerated CQs:", "output": "What higher-level categories are associated with SleepEfficiencyProblem? | Does SleepEfficiencyProblem fall under the broader classification of SleepProblem? | Which subclasses are encompassed by SleepProblem, such as SleepEfficiencyProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SleepLatencyProblem\nDescription: SleepLatencyProblem is a subclass of SleepProblem, representing a specific type of sleep issue. Members of this class are characterized by experiencing sleep latency (the time taken to fall asleep) exceeding 30 minutes. This definition situates SleepLatencyProblem within the broader category of sleep-related disorders, with a focus on delayed sleep onset.\nAxiom: {'subClassOf': ['SleepProblem']}\nGenerated CQs:", "output": "Which more specific problems are categorized within SleepProblem, such as SleepLatencyProblem? | What higher-level categories does SleepLatencyProblem pertain to in the ontology? | Does SleepLatencyProblem fall under the broader classification of SleepProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MealProblem\nDescription: MealProblem is defined as a subclass of ADLProblem, indicating that it represents a specific kind of difficulty or issue related to Activities of Daily Living (ADL). Any instance of MealProblem is also an instance of ADLProblem, inheriting its characteristics and properties, but is used to specifically denote problems associated with meal-related activities.\nAxiom: {'subClassOf': ['ADLProblem']}\nGenerated CQs:", "output": "Does MealProblem fall under the overarching category of ADLProblem? | Which problem types are more specific instances of ADLProblem, such as MealProblem? | To which higher-level classifications is MealProblem associated within the context of ADLProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MoodQuestionnaire\nDescription: MoodQuestionnaire is defined as a subclass of Questionnaire. This class represents questionnaires designed specifically to assess or measure mood-related aspects of an individual. All MoodQuestionnaire instances inherit the general characteristics of Questionnaire, while focusing on evaluating emotional or affective states.\nAxiom: {'subClassOf': ['Questionnaire']}\nGenerated CQs:", "output": "Which questionnaire types are more specific than Questionnaire, for example, MoodQuestionnaire? | What higher-level categories encompass MoodQuestionnaire? | Is MoodQuestionnaire classified under the broader group of Questionnaire? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SleepQuestionnaire\nDescription: SleepQuestionnaire is defined as a subclass of Questionnaire. This means every SleepQuestionnaire is a type of Questionnaire, typically designed to assess or gather information related to sleep patterns, habits, or disorders. No additional restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['Questionnaire']}\nGenerated CQs:", "output": "What are the direct parent classes of SleepQuestionnaire in the ontology? | Which types of Questionnaire include SleepQuestionnaire as a specific example? | Is SleepQuestionnaire categorized under the broader class of Questionnaire? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: event:LongNap\nDescription: event:LongNap is a class characterized by the requirement that all its instances have the property ‘highlight’ set to true. This means every long nap event is marked as highlighted, distinguishing it from other types of events that may not have this property. There are no additional subclass, disjointness, or other property axioms specified.\nAxiom: {'propertyRestrictions': ['[highlight hasValue true]']}\nGenerated CQs:", "output": "Is the highlight property of a LongNap event universally constrained to the value true? | Does every LongNap event necessarily have the highlight property set to true? | Can a LongNap event exist without having the highlight property valued as true? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: event:NapAfterLunch\nDescription: event:NapAfterLunch is a class characterized by having the property highlight with a required value of true for all its instances. This means every instance of event:NapAfterLunch must be associated with the property highlight set to true, signifying its notable or emphasized status within a given context. No other description is currently provided, so the class is defined solely by this property restriction.\nAxiom: {'propertyRestrictions': ['[highlight hasValue true]']}\nGenerated CQs:", "output": "Is it required that NapAfterLunch events are always associated with a 'highlight' property set to true? | Can a NapAfterLunch event exist without possessing 'highlight' equal to true? | Must every instance of NapAfterLunch have the property 'highlight' with the value true? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: event:NightKitchenVisit\nDescription: event:NightKitchenVisit is a class characterized by the property restriction that any instance must have the attribute 'highlight' with a value of true. This means that all individuals classified under event:NightKitchenVisit are specifically marked or emphasized via the 'highlight' property. In the absence of additional superclasses or disjointness, this class is primarily defined by this property restriction.\nAxiom: {'propertyRestrictions': ['[highlight hasValue true]']}\nGenerated CQs:", "output": "Does the ontology restrict the ‘highlight’ property of NightKitchenVisit events so that only those with value true are permitted? | Are all instances of NightKitchenVisit characterized by the property ‘highlight’ having the value true? | Is it required for every NightKitchenVisit event to have the property ‘highlight’ set to true? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: event:NightLivingRoomVisit\nDescription: event:NightLivingRoomVisit is a class characterized by the property restriction that every instance must have the property 'highlight' with the value 'true'. This formalization ensures that any individual classified as event:NightLivingRoomVisit is specifically marked as highlighted, indicating its special significance or prominence.\nAxiom: {'propertyRestrictions': ['[highlight hasValue true]']}\nGenerated CQs:", "output": "Must every NightLivingRoomVisit event have the highlight property set to true? | Are all NightLivingRoomVisit events required to entail highlight equals true as a property restriction? | Is it possible for any NightLivingRoomVisit event to exist without the highlight property being true? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SleepSummary\nDescription: SleepSummary is defined as a subclass of DaySummary that captures a comprehensive summary of an individual's sleep for a given day. Each SleepSummary instance is characterized by exactly one value for sleepBedTime, sleepTime, wakeUpTime (all xsd:dateTime), duration, totalDurationOfNaps, numberOfNaps, numberOfArousals, numberOfAwakenings, numberOfBedExits, sleepLatency (all xsd:int), sleepEfficiency and sleepMovementIndex (all xsd:double), and lightLevel (xsd:string). These properties ensure that each SleepSummary provides detailed and quantitative metrics for sleep episodes, including timings, efficiency, nap statistics, nocturnal movements, arousals, awakenings, light levels, and related quantitative indicators, supporting precise day-by-day rest analysis.\nAxiom: {'subClassOf': ['DaySummary'], 'propertyRestrictions': ['[totalDurationOfNaps exactly 1 xsd:int]', '[sleepBedTime exactly 1 xsd:dateTime]', '[duration only xsd:int]', '[sleepEfficiency exactly 1 xsd:double]', '[duration exactly 1 xsd:int]', '[sleepMovementIndex exactly 1 xsd:double]', '[numberOfNaps only xsd:int]', '[totalDurationOfNaps only xsd:int]', '[numberOfNaps exactly 1 xsd:int]', '[numberOfArousals only xsd:int]', '[numberOfAwakenings exactly 1 xsd:int]', '[wakeUpTime only xsd:dateTime]', '[numberOfBedExits only xsd:int]', '[lightLevel only xsd:string]', '[sleepTime exactly 1 xsd:dateTime]', '[sleepBedTime only xsd:dateTime]', '[numberOfAwakenings only xsd:int]', '[lightLevel exactly 1 xsd:string]', '[numberOfBedExits exactly 1 xsd:int]', '[sleepLatency exactly 1 xsd:int]', '[sleepEfficiency only xsd:double]', '[sleepLatency only xsd:int]', '[numberOfArousals exactly 1 xsd:int]', '[sleepTime only xsd:dateTime]', '[wakeUpTime exactly 1 xsd:dateTime]', '[sleepMovementIndex some xsd:double]']}\nGenerated CQs:", "output": "Does SleepSummary restrict the property 'sleepMovementIndex' to only have values of type xsd:double? | Is it required that all instances of 'sleepMovementIndex' associated with SleepSummary must be xsd:double values? | Can SleepSummary have any 'sleepMovementIndex' values that are not xsd:double? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DaySummary\nDescription: DaySummary is a class characterized by the presence of exactly one associated date (of type xsd:dateTime) and exactly one related patient (of class event:Patient). Additionally, every instance must have at least one date and be linked to at least one patient. This ensures that each DaySummary uniquely corresponds to a specific date and patient, representing summaries that are strictly tied to individual patient-days.\nAxiom: {'propertyRestrictions': ['[date exactly 1 xsd:dateTime]', '[forPatient exactly 1 event:Patient]', '[date some xsd:dateTime]', '[forPatient only event:Patient]']}\nGenerated CQs:", "output": "Does every DaySummary necessarily reference at least one Patient via the forPatient property? | Is it required that any DaySummary instance be linked to a Patient through forPatient? | Can a DaySummary exist without being associated with a Patient by the forPatient relationship? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Problem\nDescription: Problem is a class characterized by the existence of at least one possible contributing factor, which must be an instance of event:Event. This means that any individual classified as a Problem is associated with one or more events identified as potential factors contributing to the occurrence of the problem.\nAxiom: {'propertyRestrictions': ['[possibleContributingFactor only event:Event]']}\nGenerated CQs:", "output": "Does a problem necessarily have at least one possible contributing factor that is an event? | Is it required for every instance of Problem to be associated with some event as a possible contributing factor? | Can a problem exist without having any event identified as a possible contributing factor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MoodSummary\nDescription: MoodSummary is a subclass of DaySummary, representing a summary of mood-related aspects for a particular day. It is characterized by exactly one stressLevel, which must be a literal value, exactly one numberOfSocialInteractions (an integer), some physicalHygiene information, and some involvementInDiscussion. This formalization ensures that each MoodSummary instance documents a single stress level and number of social interactions, and includes details on both physical hygiene and participation in discussions.\nAxiom: {'subClassOf': ['DaySummary'], 'propertyRestrictions': ['[stressLevel exactly 1]', '[physicalHygiene some owl:Thing]', '[numberOfSocialInteractions exactly 1 xsd:int]', '[stressLevel only rdfs:Literal]', '[involvementInDiscussion some owl:Thing]', '[numberOfSocialInteractions only xsd:int]']}\nGenerated CQs:", "output": "Does MoodSummary allow only integer values for the property numberOfSocialInteractions? | Is it required that every numberOfSocialInteractions value associated with MoodSummary must be an integer? | Can MoodSummary have numberOfSocialInteractions in any datatype other than integer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: EatingSummary\nDescription: EatingSummary is defined as a subclass of ADLSummary. Each instance of EatingSummary must be associated with exactly one eatingLocation, which is an event:Place, and exactly one eatingDuration, which is a time:DurationDescription. Furthermore, any eatingDuration specified must be an instance of time:DurationDescription, ensuring the exclusivity and precision of duration representation. This formalization guarantees that any EatingSummary records structured information about where and for precisely how long eating occurred.\nAxiom: {'subClassOf': ['ADLSummary'], 'propertyRestrictions': ['[eatingLocation exactly 1 event:Place]', '[eatingDuration exactly 1 time:DurationDescription]', '[eatingDuration only time:DurationDescription]', '[eatingLocation only event:Place]']}\nGenerated CQs:", "output": "Is an EatingSummary restricted to having eatingLocation only at places categorized as event:Place? | Can an EatingSummary reference any eatingLocation that is not an event:Place? | Must every eatingLocation described in an EatingSummary fall exclusively under event:Place? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: eatingLocation\nDescription: The property \"eatingLocation\" has no explicitly defined characteristics, super-properties, or inverse properties. Its domain is restricted to instances of \"EatingSummary,\" while its range is unspecified. This property is used to associate an \"EatingSummary\" with a location where eating occurs.\nAxiom: {'characteristics': [], 'domain': [], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it possible for something other than an EatingSummary to have an eatingLocation? | Are there any instances of EatingSummary that do not have an eatingLocation? | What types of subjects are allowed to use the eatingLocation property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: exerciseDuration\nDescription: The property \"exerciseDuration\" does not specify explicit domain or range restrictions, nor any special characteristics. It is defined as a sub-property of \"time:hasBeginning,\" indicating that it inherits semantic meaning related to temporal beginnings. No inverse property is provided. This property is primarily intended to represent the temporal duration associated with an exercise activity.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is every instance of the exerciseDuration property also an instance of time:hasBeginning? | Which properties are subproperties encompassed by time:hasBeginning in the ontology? | What superproperties does exerciseDuration have according to the property hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: highlight\nDescription: The property \"highlight\" has no specified characteristics, super-properties, or inverse properties. Its domain is restricted to instances of event:Event, and its range is xsd:boolean, indicating whether an event is highlighted (true) or not (false).\nAxiom: {'characteristics': [], 'domain': [], 'range': ['xsd:boolean'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is there any entity other than an Event that can be the subject of 'highlight'? | What types of individuals may appear as the domain of the 'highlight' property? | Must the subject of 'highlight' always be an Event? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: sleepTime\nDescription: The property \"sleepTime\" has no specified characteristics, domain, or range restrictions. It does not have any super-properties or inverse properties defined. Based on its name, \"sleepTime\" likely represents the time or duration related to an entity's sleep, but further constraints or intended usage are not specified in the current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What can be the range of the property 'sleepTime'? | Can the property 'sleepTime' be assigned to any class, or should its domain be defined? | Is it correct that the property 'sleepTime' does not have a defined range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: lightLevel\nDescription: The property \"lightLevel\" does not have explicitly defined characteristics, domain, range, super-properties, or inverse properties. No additional description or axiomatic restrictions are provided, suggesting its intended use is either unspecified or context-dependent within the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the 'lightLevel' property has no assigned domain? | Can the property 'lightLevel' take any subject, since its domain is undefined? | What types of entities, if any, are permitted as subjects for the property 'lightLevel'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: sleepBedTime\nDescription: The property \"sleepBedTime\" has no defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely intended to represent the time at which an individual goes to bed for sleep, but no formal constraints or descriptions are provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What kinds of entities can be subjects of the 'sleepBedTime' property? | What types of values can be the range of the property 'sleepBedTime'? | Can any entity be associated with the 'sleepBedTime' property regardless of its type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: numberOfArousals\nDescription: The property \"numberOfArousals\" has no explicitly defined characteristics, domain, or range restrictions, and is not specified as a sub-property or inverse of any other property. Based on its name, it is likely intended to represent the count or frequency of arousal events associated with an entity, but no formal constraints are provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Should 'numberOfArousals' be restricted to a specific class as its domain? | What types of values can be used as the range for the property 'numberOfArousals'? | Is it correct that the property 'numberOfArousals' does not have a defined domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: numberOfCommunicativeAttempts\nDescription: The property \"numberOfCommunicativeAttempts\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it likely represents a quantitative value indicating how many times an entity attempts communication. No further semantic restrictions are specified by the axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What entities can act as the domain for the property 'numberOfCommunicativeAttempts'? | What entities can be used as the value for the property 'numberOfCommunicativeAttempts'? | Can 'numberOfCommunicativeAttempts' be associated with any type of entity as its value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: numberOfNaps\nDescription: The property \"numberOfNaps\" has no explicitly defined characteristics, domain, or range constraints. It is not specified as a sub-property of any other property and does not have an inverse property. The intended use of this property may be to associate an entity with the number of naps it takes, but no formal restrictions are currently imposed.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'numberOfNaps' does not restrict its range? | Are there any datatype or class constraints on the range of the property 'numberOfNaps'? | What types of entities, if any, can be the subject of 'numberOfNaps'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: strideLength\nDescription: The property \"strideLength\" has no explicitly defined characteristics, domain, or range restrictions, and is not specified as a sub-property or inverse of any other property. Its description and usage context should be clarified in the ontology, as no formal axioms currently constrain its application.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'strideLength' be used with subjects other than those in a specified class? | What types of entities can be the range of the property 'strideLength'? | Is it valid for 'strideLength' to have no range defined? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: sleepEfficiency\nDescription: The property \"sleepEfficiency\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. Its intended use is not further specified by axioms, indicating it may be used flexibly unless additional constraints are provided elsewhere in the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'sleepEfficiency' relate to entities other than those with a defined domain? | What types of values can be assigned as the range of the property 'sleepEfficiency'? | Is it correct that the property 'sleepEfficiency' does not have a specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: numberOfFaceToFaceConversations\nDescription: The property \"numberOfFaceToFaceConversations\" has no explicitly defined characteristics, domain, or range restrictions, and is not specified as a subproperty or inverse of any other property. It is likely intended to represent the count of face-to-face conversations associated with an entity, but no further axiomatic constraints are provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that 'numberOfFaceToFaceConversations' does not have a defined domain? | What potential classes or entities can be the domain of 'numberOfFaceToFaceConversations'? | What can be the range of the property 'numberOfFaceToFaceConversations'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: endTime\nDescription: The property \"endTime\" has no explicitly defined characteristics, domain, or range restrictions. It does not specify any super-properties or inverse properties. This suggests that \"endTime\" can be used flexibly to relate an entity to its corresponding end time, but the specific types of subjects and values are not constrained by the current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'endTime' does not have a defined domain? | What types of entities can use 'endTime' as a property? | Is it valid for the property 'endTime' to have no specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasValue\nDescription: The property \"hasValue\" has no specified domain, range, characteristics, or super-properties. It is not defined as an inverse of any other property. Based on the axiom, \"hasValue\" is a general-purpose property with unconstrained usage. Its intended meaning and constraints should be clarified within specific ontological contexts.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'hasValue' does not have a defined domain? | Can 'hasValue' apply to entities of any type as its subject? | What entities can serve as the range for the property 'hasValue'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: date\nDescription: The property \"date\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. This indicates that its intended usage and applicable types are not currently specified in the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'date range' does not have a specified domain? | Can 'date range' be assigned to any type of subject, or is there an implicit restriction on its domain? | Is it correct that the property 'date' does not have a specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: numberOfSocialInteractions\nDescription: The property \"numberOfSocialInteractions\" has no explicitly defined characteristics, domain, or range constraints, and is not specified as a sub-property or inverse of any other property. This suggests it can be used flexibly to associate any subject and object, though its intended purpose is to represent the count or quantity of social interactions related to an entity.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it possible for the property 'numberOfSocialInteractions' to have a domain? | Should the property 'numberOfSocialInteractions' be associated with any specific class as its domain? | Can the property 'numberOfSocialInteractions' be associated with any particular type of value as its range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: sleepMovementIndex\nDescription: The property \"sleepMovementIndex\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. Its use and meaning are unspecified in the ontology, as no descriptive information or axioms restrict or explain its application or value type.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What are the possible domains for the property 'sleepMovementIndex'? | Is it correct that 'sleepMovementIndex' does not have a defined domain? | Can the property 'sleepMovementIndex' be associated with entities other than a specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: walkSpeed\nDescription: The property \"walkSpeed\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely intended to represent the walking speed of an entity, but no formal constraints or further description are provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'walkSpeed' does not specify a range? | Is it correct that the property 'walkSpeed' does not have a defined domain? | Can 'walkSpeed' be applied to any type of subject, or should its domain be specified? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: forPatient\nDescription: The property \"forPatient\" has no explicitly defined domain, range, or characteristics. It does not specify any super-properties or inverse properties. Based on its name, it is intended to relate an entity or process to a patient, typically indicating that something is meant or designated for an individual receiving care.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'forPatient' does not specify any domain? | Can the property 'forPatient' have any value as its range? | What entities may serve as the range of the property 'forPatient'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: accelerometerCountsPerMinute\nDescription: The property \"accelerometerCountsPerMinute\" has no specified domain, range, characteristics, super-properties, or inverse properties. It is designed to represent the number of counts detected by an accelerometer per minute but is not restricted to any particular subject or value type by current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it accurate that 'accelerometerCountsPerMinute' has no assigned domain? | Can accelerometerCountsPerMinute have a range other than None? | Is it correct that the property accelerometerCountsPerMinute has no specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: physicalHygiene\nDescription: The property \"physicalHygiene\" has no explicitly defined characteristics, domain, or range restrictions, and is not specified as a sub-property or inverse of any other property. Its usage and scope are not further restricted by current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'physicalHygiene' does not have a specified domain? | Can 'physicalHygiene' relate to instances of any class, or should its range be defined? | What can be the domain of the property 'physicalHygiene'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: possibleContributingFactor\nDescription: The property \"possibleContributingFactor\" has no explicitly defined characteristics, domain, or range restrictions, and is not specified as a sub-property of any other property. No inverse property is defined. This property is intended to relate entities to possible factors that may contribute to a particular situation or event, but its usage is not restricted to specific classes or value types.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Are there any domain restrictions for the usage of 'possibleContributingFactor'? | What entities can serve as the domain for the property 'possibleContributingFactor'? | Is it correct that the property 'possibleContributingFactor' does not have a specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: distanceTravelled\nDescription: The property \"distanceTravelled\" has no specified characteristics, domain, or range restrictions. It is not defined as a sub-property of any other property and has no declared inverse property. Based on its name, it is likely intended to represent the distance an entity has moved or covered, but no formal constraints are currently specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'distanceTravelled' does not have a specified domain? | Can 'distanceTravelled' be associated with any class, or should its domain be restricted to specific types? | What possible types of values can serve as the range for 'distanceTravelled'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:hasBeginning\nDescription: The property \"time:hasBeginning\" has no explicitly defined characteristics, domain, or range constraints, nor does it specify any super-properties or inverse properties. Based on its name, it is likely intended to relate a temporal entity to its starting point or beginning, but no formal axioms restrict its usage.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'time:hasBeginning' have a range other than what is currently defined? | What entities can serve as the domain for the property 'time:hasBeginning'? | Is it correct that the property 'time:hasBeginning' has no specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: totalDurationOfNaps\nDescription: The property \"totalDurationOfNaps\" currently has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. Based on its name, it is intended to represent the total duration of naps associated with an entity. However, without further axioms, its precise usage within the ontology remains unspecified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it valid for the property 'totalDurationOfNaps' to have no specified range? | Should 'totalDurationOfNaps' be restricted to values of a certain datatype or class as its range? | Is it correct that the property 'totalDurationOfNaps' has no domain defined? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: sleepLatency\nDescription: The property \"sleepLatency\" has no defined domain, range, or formal characteristics, and lacks specification of super-properties or an inverse property. Its formal usage and intended meaning must be inferred from its name, which typically refers to the duration or interval between attempting to sleep and the onset of sleep. No additional restrictions or relationships are provided in the current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Could there be a specific class that should serve as the domain for 'sleepLatency' rather than it being undefined? | What types of values can be assigned as the range for the property 'sleepLatency'? | Are there any constraints on the range of 'sleepLatency', or can it be associated with any type of value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: numberOfPhoneConversations\nDescription: The property \"numberOfPhoneConversations\" has no explicitly defined characteristics, domain, or range restrictions, and is not declared as a sub-property or inverse of any other property. Its intended use is to represent the number of telephone conversations associated with an entity, but its application is unconstrained in the current specification.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it possible for 'numberOfPhoneConversations' to have a defined domain? | Is it correct that the property 'numberOfPhoneConversations' does not have a specified range? | What types of entities can be subjects of the 'numberOfPhoneConversations' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:hasDurationDescription\nDescription: The property \"time:hasDurationDescription\" has no specified domain, range, characteristics, super-properties, or inverse properties. It is used to associate entities with their duration descriptions, but no additional constraints or relationships are imposed by the current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it valid for the property 'time:hasDurationDescription' to have no specified domain? | Which classes, if any, are implicitly considered as the domain for 'time:hasDurationDescription'? | Is it accurate that the property 'time:hasDurationDescription' has no specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: duration\nDescription: The property \"duration\" has no explicitly defined domain, range, characteristics, super-properties, or inverse property. It is intended to represent the concept of duration, but no further constraints or relationships are specified by its current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it accurate that the property 'duration' has no specified range? | What can be the range of the property 'duration'? | Are there entities that can act as the subject of 'duration', given its domain is undefined? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: numberOfBedExits\nDescription: The property \"numberOfBedExits\" has no explicitly defined characteristics, domain, or range, and is not specified as a sub-property or inverse of any other property. Based on its name, it likely represents the quantity of times a bed exit occurs in a given context, but further specification of its scope and value type is not provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'numberOfBedExits' has no range specified? | What can be the domain of the property 'numberOfBedExits'? | Is it correct that the property 'numberOfBedExits' does not have a defined domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: involvementInDiscussion\nDescription: The property \"involvementInDiscussion\" has no specified characteristics, domain, range, super-properties, or inverse properties. It is intended to relate two entities in the context of participation or involvement in a discussion, but its usage is unconstrained by ontological axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Could 'involvementInDiscussion' have a domain other than those currently defined? | Is it correct that the property 'involvementInDiscussion' has no specified domain? | What types of entities can be the domain of the 'involvementInDiscussion' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: numberOfAwakenings\nDescription: The property \"numberOfAwakenings\" has no defined domain, range, characteristics, super-properties, or inverse properties. It is intended to represent the number of times an awakening event occurs, but its usage is not currently constrained by axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it accurate that the property 'numberOfAwakenings' does not have a specified range? | Which types of values can appear as the object of 'numberOfAwakenings'? | Can 'numberOfAwakenings' be associated with any type of subject regardless of its class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: heartRate\nDescription: The property \"heartRate\" has no specified domain, range, super-properties, or inverse properties, and lacks defined characteristics. Its intended use is to associate an entity with its heart rate, but no formal constraints on its usage are currently defined.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What entities can be used as values for the property 'heartRate'? | Is it correct that the property 'heartRate' does not have a defined domain? | Is it correct that the property 'heartRate' does not specify any range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: stressLevel\nDescription: The property \"stressLevel\" has no defined domain or range restrictions, and no specified characteristics, super-properties, or inverse properties. This indicates that \"stressLevel\" can relate any subject to any object, with its precise usage intended to be determined by context or further specification.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'stressLevel' be associated with subjects other than a specific class? | Could 'stressLevel' have a range other than what is currently defined? | What types of values can be used as the range for the property 'stressLevel'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: wakeUpTime\nDescription: The property \"wakeUpTime\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely intended to relate an entity to a time value indicating when waking up occurs, but no formal constraints or additional documentation are currently specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of values can be used as the range for the 'wakeUpTime' property? | What can be the domain of the property 'wakeUpTime'? | Is it correct that 'wakeUpTime' has no specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: startTime\nDescription: The property \"startTime\" has no specified domain or range restrictions and does not inherit from any super-property. It has no explicitly defined characteristics, nor is any inverse property specified. This property is intended to represent the beginning time of an event or process, though the exact usage context is unconstrained by current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'startTime' be assigned to any subject, regardless of type? | Can 'startTime' point to values other than those specified as its range? | Is it correct that 'startTime' does not specify any domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: exerciseIntensity\nDescription: The property \"exerciseIntensity\" has no defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely intended to relate an entity to a measure or classification of physical activity intensity, but no formal constraints or description are specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What can be the range of the property 'exerciseIntensity'? | Can 'exerciseIntensity' be associated with subjects outside of any defined class? | What types of entities can serve as the domain for the property 'exerciseIntensity'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: exerciseStartTime\nDescription: The property \"exerciseStartTime\" has no specified domain, range, super-properties, inverse properties, or declared characteristics. Its intended use is to represent the start time of an exercise, but the axiom does not constrain its applicable subjects or the type of values it relates to.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['time:hasBeginning'], 'inverseOf': []}\nGenerated CQs:", "output": "Is exerciseStartTime considered a more specific form of time:hasBeginning? | Which properties are classified as subproperties of time:hasBeginning? | Does exerciseStartTime always entail the use of time:hasBeginning when describing an event? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: eatingDuration\nDescription: The property \"eatingDuration\" has no defined domain or explicit characteristics. Its range is unspecified, allowing for flexible use. It is a sub-property of \"time:hasDurationDescription\", indicating it is used to relate an entity to a temporal duration specifically describing the length of an eating event. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['EatingSummary'], 'range': ['None'], 'subPropertyOf': ['time:hasDurationDescription'], 'inverseOf': []}\nGenerated CQs:", "output": "Is there any class other than EatingSummary that can be the domain of 'eatingDuration'? | Can the property 'eatingDuration' be asserted for any entity that is not an EatingSummary? | What are the possible classes that 'eatingDuration' can have as its subject? "}
