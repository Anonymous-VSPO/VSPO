{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Datatype Specification Language Representation\nDescription: Datatype Specification Language Representation is a subclass of representation, characterized by the property that it represents at least one datatype. This class encompasses languages or symbolic forms specifically designed to define, describe, or model datatypes through a formal representation. Every individual in this class must be associated with the representation of some datatype, reflecting its role in specifying datatype structure or characteristics.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[represents some datatype]']}\nGenerated CQs:", "output": "Is Datatype Specification Language Representation categorized under the broader class of representation? | Which representation subclasses include Datatype Specification Language Representation? | What are the parent classes of Datatype Specification Language Representation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined generator parameter\nDescription: defined generator parameter is a subclass of specification, meaning it inherits all characteristics of the specification class. Additionally, any individual in this class must possess at least one identifier, specified through the property has_identifier and linked to a parameter identifier. This definition ensures that every defined generator parameter instance is uniquely identified in the context of specifications.\nAxiom: {'subClassOf': ['specification'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Must every defined generator parameter have at least one 'has_identifier' relationship with a parameter identifier? | Is it required that a defined generator parameter is associated, via the 'has_identifier' property, to some parameter identifier? | Can a defined generator parameter exist without any 'has_identifier' link to a parameter identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: extending subtype generator\nDescription: extending subtype generator is defined as a subclass of subtype generator. It is characterized by the property restriction that every instance must have at least one member from an extended-value-list. This ensures that individuals of this class are subtype generators specifically connected to one or more extended value lists, reflecting their extended generative capability.\nAxiom: {'subClassOf': ['subtype generator'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is every instance of extending subtype generator required to have at least one has_member relationship to an extended-value-list? | Does extending subtype generator always include some member specified within extended-value-list? | Can an extending subtype generator exist without any association to an extended-value-list through has_member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: size subtype generator\nDescription: size subtype generator is a subclass of subtype generator whose members are characterized by necessarily having at least one associated member of type size. This ensures that any instance of size subtype generator must be linked to one or more sizes, establishing its role in creating subtypes specifically based on size distinctions.\nAxiom: {'subClassOf': ['subtype generator'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is every instance of 'size subtype generator' required to have at least one 'has_member' relationship to a 'size'? | Does 'size subtype generator' always include at least one member classified as 'size'? | Can a 'size subtype generator' exist without linking to any entity of type 'size' via the 'has_member' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: array generator\nDescription: array generator is a subclass of homogenous aggregate generator and is explicitly disjoint with homogenous aggregate generator with variable size, ensuring that an instance cannot belong to both classes simultaneously. Members of the array generator class are characterized by possessing certain qualities: they are unordered aggregates, have a fixed size, can be multi-dimensional, allow index-based access, and may contain non-unique values. This combination of properties formally describes the essential characteristics of array generators, distinguishing them from other types of homogenous aggregate generators.\nAxiom: {'subClassOf': ['homogenous aggregate generator'], 'disjointWith': [], 'propertyRestrictions': ['[has_quality some unordered aggregate]', '[has_quality some fixed size]', '[has_quality some multi dimensional]', '[has_quality some index access]', '[has_quality some non-unique values]']}\nGenerated CQs:", "output": "Which generator classes are explicitly declared as mutually exclusive with homogenous aggregate generator with variable size? | Is there any circumstance under which a device can be considered both an array generator and a homogenous aggregate generator with variable size? | What disjointness constraints are specified for array generator within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set generator\nDescription: set generator is defined as a subclass of homogenous unordered aggregate generator with variable size. Members of this class are characterized by having the qualities of access by value and containing unique values. This means that each instance generates aggregates where elements are both accessed directly by their value (rather than by reference or position) and all elements within any generated aggregate are unique, with no duplicates permitted.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_quality some access by value]', '[has_quality some unique values]']}\nGenerated CQs:", "output": "Is every set generator classified under homogenous unordered aggregate generator with variable size? | Which specific generators fall under the category of homogenous unordered aggregate generator with variable size? | What broader categories include set generator as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: table generator\nDescription: table generator is defined as a subclass of heterogenous aggregate generator and is characterized by several property restrictions: it must possess the qualities of having non-unique values, variable size, being an unordered aggregate, and being two dimensional. These constraints specify that any instance of table generator produces or represents a two-dimensional collection of items where elements may repeat, the number of items can vary, the arrangement lacks a specific sequence, and multiple types of elements (heterogeneity) are permitted.\nAxiom: {'subClassOf': ['heterogenous aggregate generator'], 'propertyRestrictions': ['[has_quality some variable size]', '[has_quality some unordered aggregate]', '[has_quality some two dimensional]']}\nGenerated CQs:", "output": "Must a table generator possess at least one quality that is not unique among its values? | Can a table generator exhibit qualities where the same value is shared by more than one instance? | Is it required for a table generator to have the property 'has_quality' associated with values that are not unique? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: choice generator\nDescription: choice generator is defined as a subclass of non-aggregate generator. Members of this class are further characterized by the property that they are associated with at least one choice datatype, as expressed by the restriction [is_member_of some choice datatype]. This means any individual classified as a choice generator must participate in or be a member of a choice datatype, distinguishing them from other forms of non-aggregate generators.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[is_member_of some choice datatype]']}\nGenerated CQs:", "output": "Is every choice generator categorized under non-aggregate generator? | Which generator types fall under the broader class of non-aggregate generator? | What more general classes include choice generator as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: class datatype\nDescription: class datatype is a subclass of heterogenous aggregate datatype and is explicitly disjoint with record (tuple) datatype, ensuring that no individual can belong to both classes. Members of class datatype are characterized by the following property restrictions: they must have operations such as AttributeSelect, AttributeReplace, and Equal (each operating on class), must include members such as a class generator and an attribute-list, and must exhibit the qualities of being non-ordered and non-numeric. This formalization distinguishes class datatypes from other aggregates (like records) by their operations and inherent qualities.\nAxiom: {'subClassOf': ['heterogenous aggregate datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_operation some AttributeSelect:class]', '[has_operation some AttributeReplace:class]', '[has_operation some Equal:class]', '[has_member some class generator]', '[has_quality some non-ordered]', '[has_quality some non-numeric]', '[has_member some attribute-list]']}\nGenerated CQs:", "output": "What formal separation exists between class datatypes and record (tuple) datatypes in the ontology? | Can an entity simultaneously be classified as both a class datatype and a record (tuple) datatype? | Which datatypes are specified as being incompatible with class datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete-value identifier\nDescription: discrete-value identifier is a subclass of identifier whose instances are constrained to have at least one associated value specified as an rdfs:Literal. This means that every discrete-value identifier must be linked to some literal value (such as a string, number, or date), formalizing the notion of identifiers that represent or encode discrete, literal data.\nAxiom: {'subClassOf': ['identifier'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Does every discrete-value identifier necessarily have a value for the property 'propertyRestrictions' that is a literal? | Is it required that each discrete-value identifier possesses at least one propertyRestrictions value belonging to rdfs:Literal? | Can a discrete-value identifier exist without having propertyRestrictions set to any literal value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenity\nDescription: homogenity is defined as a subclass of aggregate generator property and is explicitly disjoint with the classes aggregate size, uniqueness, component mandatoriness, structurness, recursiveness, and access type, ensuring that no individual can simultaneously belong to these. It is also equivalent to the union of homogenous or heterogenous, indicating that any instance of homogenity must be categorized as either homogenous or heterogenous with respect to an aggregate generator property.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['agregate size', 'uniqueness', 'component mandatoriness', 'structurness', 'access type'], 'equivalentClass': ['(homogenous or heterogenous)']}\nGenerated CQs:", "output": "How are homogeneity and recursiveness formally related within the ontology? | Is there an instance that can possess both homogeneity and recursiveness? | Which classes are stated to be incompatible with homogeneity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: component mandatoriness\nDescription: component mandatoriness is defined as a subclass of aggregate generator property and is explicitly disjoint with structurness, recursiveness, and access type, ensuring no overlap among individuals of these classes. It is equivalent to the union of component mandatory and component non-mandatory, meaning every instance of component mandatoriness must be either component mandatory or component non-mandatory. This class categorizes aggregate generator properties by specifying whether a component is mandatory or not.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['recursiveness', 'access type'], 'equivalentClass': ['(component mandatory or component non-mandatory)']}\nGenerated CQs:", "output": "How does the ontology distinguish between component mandatoriness and structurness? | Is there any entity that can simultaneously possess both component mandatoriness and structurness? | Which concepts are defined as mutually exclusive with structurness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: access type\nDescription: access type is defined as a subclass of aggregate generator property and is equivalent to the union of direct access property and indirect access property. This means that any instance of access type must be either a direct access property or an indirect access property, and no other properties qualify as access types outside of this definition.\nAxiom: {'subClassOf': [], 'equivalentClass': ['(direct access property or indirect acess property)']}\nGenerated CQs:", "output": "Is access type categorized under aggregate generator property? | Which types are more specific than aggregate generator property, such as access type? | What broader property classes include access type as a specialized type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: generated datatype\nDescription: generated datatype is defined as a subclass of datatype and is explicitly disjoint with defined datatype, meaning no individual can be both a generated datatype and a defined datatype. Members of this class are further constrained by the property restriction that each generated datatype must have at least one member (has_member) that is a generated datatype generator. This formalization distinguishes generated datatypes from defined datatypes and ensures their association with specific generating mechanisms.\nAxiom: {'subClassOf': ['datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_member some generated datatype generator]']}\nGenerated CQs:", "output": "How does the ontology distinguish between generated datatype and defined datatype? | Is any entity allowed to be classified simultaneously as a generated datatype and a defined datatype? | Which datatypes are specified as being mutually exclusive with generated datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: field component\nDescription: field component is defined as a subclass of datatype role. It is further characterized by two property restrictions: every field component must participate in the role_of relationship with at least one datatype, and must have at least one identifier of type field identifier. This formalization ensures that field components are specifically associated with datatypes and are uniquely identifiable within the ontology.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[role_of some datatype]', '[has_identifier some field identifier]']}\nGenerated CQs:", "output": "Does field component fall under the category of datatype role? | What components are classified as more specific types within datatype role, including field component? | Which broader categories encompass field component as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: alternative component\nDescription: alternative component is defined as a subclass of datatype role, characterized by the requirement that it must have at least one member that is a tag-value list and at least one member that is an alternative-type. This means every instance of alternative component is associated with at least one tag-value list and one alternative-type via the has_member property, formalizing its structure as a composition of these elements.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some tag-value list]', '[has_member some alternative-type]']}\nGenerated CQs:", "output": "Which datatype roles include alternative components as their subclasses? | Is alternative component categorized under the superclass datatype role? | What general classes encompass alternative component within their hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index-type\nDescription: index-type is a subclass of datatype role, characterized by specific property restrictions. Any instance of index-type must have as members both an index upperbound and an index lowerbound, indicating the range of allowable index values. Additionally, index-type instances are members of an index-type list and are associated, via the role_of property, with some datatype. This formalization ensures that index-type serves as a role connecting data types to index value ranges, organized within relevant index-type lists.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[has_member some index upperbound]', '[is_member_of some index-type list]', '[has_member some index lowerbound]']}\nGenerated CQs:", "output": "Is it required that every index-type has at least one role_of relationship to a datatype? | Can an index-type exist without being associated through role_of to any datatype? | Does the presence of a role_of link with a datatype distinguish index-type from other classes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real field-list\nDescription: real field-list is defined as a subclass of field-list, explicitly disjoint from boolean field-list and discrete field-list, ensuring no overlap in membership between these types. Members of real field-list are characterized by the property that they contain at least one real field component as a member. This formalization guarantees that any real field-list includes real-valued field components and cannot simultaneously be considered a boolean or discrete field-list.\nAxiom: {'subClassOf': ['field-list'], 'disjointWith': ['boolean field-list'], 'propertyRestrictions': ['[has_member some real field component]']}\nGenerated CQs:", "output": "What is the logical separation between real field-list and discrete field-list according to the ontology? | Is any field-list instance permitted to belong to both real and discrete field-list classes? | Which entities are declared as mutually exclusive with discrete field-list within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: primitive field-list\nDescription: primitive field-list is defined as a subclass of field-list, with the restriction that it must have at least one member that is a primitive field component. This means that every instance of primitive field-list comprises a collection of fields where at least one member is a primitive field component.\nAxiom: {'subClassOf': ['field-list'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is every primitive field-list required to have at least one 'has_member' relationship with a primitive field component? | Can a primitive field-list exist if it does not include any primitive field component as a member? | Does the existence of a 'primitive field-list' imply the presence of a related 'primitive field component' via the 'has_member' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic operation\nDescription: dyadic operation is defined as a subclass of characterizing operation, and is disjoint with niladic operation, monadic operation, and n-adic operation, ensuring that no individual can be simultaneously classified as any of these mutually exclusive operation types. A dyadic operation is characterized by mapping a pair of values from a given datatype to either another value of the same datatype or to a Boolean value. This formalization supports the clear distinction and function of dyadic operations within the hierarchy of operation arities.\nAxiom: {'subClassOf': ['characterizing operation'], 'disjointWith': ['niladic operation', 'n-adic operation']}\nGenerated CQs:", "output": "How does the ontology differentiate dyadic operations from monadic operations? | Is it permissible for an operation to be classified as both dyadic and monadic according to the ontology? | Which operation types are defined as mutually exclusive with monadic operations in the knowledge model? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: monadic operation\nDescription: monadic operation is defined as a subclass of characterizing operation and is explicitly disjoint with n-adic operation, meaning an operation cannot be both monadic and n-adic. Monadic operations map a value of the given datatype to either another value of the same datatype or to a Boolean value, thus operating on a single input. This distinguishes monadic operations from n-adic operations, which take multiple inputs.\nAxiom: {'subClassOf': ['characterizing operation'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology formally distinguish between monadic operations and n-adic operations? | Is it permitted for an operation to be both monadic and n-adic simultaneously within the ontology framework? | Which types of operations are specified as being mutually exclusive with n-adic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: procedure-parameter-list\nDescription: procedure-parameter-list is defined as a subclass of list specification, restricted so that it must have at least one member which is a procedure-parameter declaration. This formalization ensures that any instance of procedure-parameter-list represents a list where each member is specifically a declaration pertaining to procedure parameters.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some procedure-paremeter declaration]']}\nGenerated CQs:", "output": "Is procedure-parameter-list categorized under list specification? | Which specific types fall under the category of list specification, and does procedure-parameter-list appear among them? | What broader classifications include procedure-parameter-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: extended-value-list\nDescription: extended-value-list is defined as a subclass of list specification, meaning it inherits the general characteristics of list specifications. Additionally, every member of this class must have at least one associated extended-value identifier, as specified by the property has_identifier. This ensures that all instances of extended-value-list are identifiable through one or more extended-value identifiers.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is every instance of an extended-value-list required to have at least one has_identifier relationship with an extended-value identifier? | Can an extended-value-list exist without being linked by has_identifier to an extended-value identifier? | Does the presence of the has_identifier property between an extended-value-list and an extended-value identifier define the membership of extended-value-list in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: field-list\nDescription: field-list is defined as a subclass of list specification, meaning it inherits all properties of a list specification. Additionally, it is characterized by a property restriction: every field-list must have at least one member that is a field component. This ensures that any instance of field-list specifically contains field components as its members.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Must every field-list include at least one field component as a member? | Is it required for the has_member property of a field-list to relate to a field component? | Can a field-list exist without having any field component as its member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous aggregate datatype with variable size\nDescription: homogenous aggregate datatype with variable size is a subclass of homogenous aggregate datatype. Each instance in this class is characterized by having at least one member that is a homogenous aggregate generator with variable size. This means members of this class are structured as aggregates comprised of homogeneous components, and the size or number of these components can vary, as generated by the associated generator.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some homogenous aggregate generator with variable size]']}\nGenerated CQs:", "output": "Can a homogenous aggregate datatype with variable size be classified under homogenous aggregate datatype? | What are the specific types categorized as homogenous aggregate datatype, including those with variable size? | Which general datatype categories include homogenous aggregate datatype with variable size as a specialization? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: integer datatype\nDescription: integer datatype is a subclass of numeric ordered primitive datatype, characterized by qualities such as being ordered, numeric, exact, and unbounded. It supports operations including addition, multiplication, negation, equality checking, and ordered comparison among integers, as well as ensuring the existence of non-negative integers. The class is explicitly disjoint with rational datatype, indicating that no individual can be both an integer and a rational that is not an integer. These axioms formalize the mathematical and operational properties unique to the integer datatype.\nAxiom: {'subClassOf': ['numeric ordered primitive datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_operation some NonNegative:integer]', '[has_quality some ordered]', '[has_operation some Equal:integer]', '[has_operation some InOrder:interger]', '[has_quality some numeric]', '[has_quality some exact]', '[has_operation some Add:integer]', '[has_quality some unbounded]', '[has_operation some Multiply:integer]', '[has_operation some Negate:integer]']}\nGenerated CQs:", "output": "What logical separation is established between integer datatype and rational datatype in the ontology? | Can a datatype simultaneously be classified as both integer and rational? | Which datatypes are explicitly specified as incompatible with rational datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate generator\nDescription: aggregate generator is defined as a subclass of generated datatype generator and is equivalent to any generator that is either an array generator, bag generator, class generator, record generator, sequence generator, set generator, or table generator. This class serves as a synonym for \"aggregate datatype constructor,\" reflecting its role in constructing aggregate or composite datatypes from collections of elements or records.\nAxiom: {'subClassOf': [], 'equivalentClass': ['(array generator or bag generator or class generator or record generator or sequence generator or set generator or table generator)']}\nGenerated CQs:", "output": "Does every aggregate generator fall under the category of generated datatype generator? | Which generator types are encompassed by the generated datatype generator class? | To which higher-level classes does aggregate generator pertain within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: cardinality\nDescription: cardinality is a subclass of datatype property and is disjoint from the classes order, boundedness, and equality, meaning no entity can simultaneously belong to both cardinality and any of these classes. It is formally equivalent to the union of countable, finite, and uncountable, reflecting that cardinality expresses the size or \"number of elements\" in a set, which may be countable, finite, or uncountable. This structure ensures clear differentiation from related set properties such as order, boundedness, and equality.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['order', 'equality'], 'equivalentClass': ['(countable or finite or uncountable)']}\nGenerated CQs:", "output": "How does the ontology distinguish between cardinality and boundedness as separate concepts? | Is any entity permitted to belong to both cardinality and boundedness categories simultaneously? | Which other classes, apart from boundedness, are defined as mutually exclusive with cardinality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: vector datatype\nDescription: vector datatype is defined as a subclass of array datatype. Every vector datatype must have at least one member that is generated by or corresponds to a vector generator, as specified by the property restriction [has_member some vector generator]. This formalizes vector datatypes as array datatypes with elements produced or related to a specific generation mechanism.\nAxiom: {'subClassOf': ['array datatype'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is every instance with a 'has_member' relation to a vector required to be associated with a vector generator? | Can an entity with the 'has_member' property pointing to a vector be something other than a vector generator? | Are all entities that have members of type vector necessarily linked to a vector generator through the 'has_member' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boolean field component\nDescription: boolean field component is defined as a subclass of primitive field component and is characterized by the restriction that it must have some relationship (role_of) to a boolean datatype. This means every boolean field component represents or is associated with a value that is strictly of boolean type (such as true or false), distinguishing it from other field components that may represent different primitive datatypes.\nAxiom: {'subClassOf': ['primitive field component'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is it required that the 'component' property of a boolean field always relates only to values of the boolean datatype? | Can a boolean field have a 'component' relationship to any entity that is not of boolean datatype? | Does every instance of a boolean field necessarily possess at least one 'component' that is a boolean datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: procedure datatype\nDescription: procedure datatype is defined as a subclass of non-aggregate datatype. Instances of this class represent atomic values that are operations (procedures) on values of designated parameter datatypes. A procedure datatype must possess non-numeric, exact, and non-ordered qualities, and it is composed of specific members: a procedure generator, a procedure-parameter list, and a return-parameter specification. It is also characterized by having at least the operations ‘Equal:procedure’ and ‘Invoke:procedure’. This formalization encapsulates all operations on a collection of datatypes, treating each procedure as an indivisible (atomic) value.\nAxiom: {'subClassOf': ['non-aggregate datatype'], 'propertyRestrictions': ['[has_quality some non-numeric]', '[has_member some procedure generator]', '[has_quality some exact]', '[has_member some procedure-parameter-list]', '[has_operation some Equal:procedure]', '[has_quality some non-ordered]', '[has_operation some Invoke:procedure]']}\nGenerated CQs:", "output": "Does every procedure necessarily have at least one return-parameter specified as a member? | Is it required for a procedure to have the property 'has_member' relating to a return-parameter specification? | Can there exist a procedure without an associated return-parameter specification via the 'has_member' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: upper bound\nDescription: upper bound is defined as a subclass of bound, representing a specific type of bound characterized by having exactly one value of type xsd:integer associated through the has-value property. This formalization ensures that every instance of upper bound uniquely specifies a single integer value as its bound.\nAxiom: {'subClassOf': ['bound'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is it required that an upper bound always has exactly one property restriction with a value of type integer? | Can an upper bound possess more than one property restriction assigned to integer values? | Are multiple xsd:integer values allowed for the property restriction in the context of an upper bound? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index upperbound\nDescription: index upperbound is defined as a subclass of bound, characterized by the property restriction that it must have exactly one value of type xsd:integer. This ensures that any instance of index upperbound represents a unique integer value serving as an upper bound within an indexing context.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has-value exactly 1 xsd:integer]']}\nGenerated CQs:", "output": "Is bound a superclass encompassing index upperbound? | Which subclasses does bound include, such as index upperbound? | To what broader categories does index upperbound belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boolean datatype\nDescription: boolean datatype is defined as a subclass of non-numeric unordered primitive datatype. It has qualities that are non-ordered, non-numeric, and exact, indicating that boolean values are discrete, precise, and lack inherent ordering or numeric magnitude. Instances of boolean datatype support specific logical operations, including Not, And, Or, and Equal, with all operations yielding boolean results. This formalization captures the core characteristics of the boolean datatype: a primitive type that represents values with two alternatives (typically true and false), distinct from numeric or ordered datatypes, and amenable to fundamental logic operations.\nAxiom: {'subClassOf': ['non-numeric unordered primitive datatype'], 'propertyRestrictions': ['[has_quality some non-ordered]', '[has_quality some non-numeric]', '[has_quality some exact]', '[has_operation some Not:boolean]', '[has_operation some Or:boolean]', '[has_operation some Equal:boolean]']}\nGenerated CQs:", "output": "Is it required that an entity with the has_operation property is associated with the boolean value 'And'? | Must every instance with a has_operation property necessarily involve the 'And' boolean operation? | Can an entity be considered valid if its has_operation property is linked to a boolean value other than 'And'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete base type\nDescription: discrete base type is defined as a subclass of base type, and is disjoint with real base type, ensuring that no individual can belong to both classes simultaneously. Members of this class participate in the role_of relationship with at least one discrete datatype, meaning that every discrete base type must be associated with some discrete datatype. This formalization distinguishes discrete base types from real base types and characterizes them by their association with discrete datatypes.\nAxiom: {'subClassOf': ['base type'], 'disjointWith': [], 'propertyRestrictions': ['[role_of some discrete datatype]']}\nGenerated CQs:", "output": "What is the logical separation between discrete base type and real base type in the ontology? | Can a data type be defined as both discrete and real simultaneously? | Which base types are explicitly declared as disjoint with real base type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record of boolean datatype\nDescription: record of boolean datatype is a subclass of record (tuple) datatype, disjoint from both record of real datatype and record of discrete datatype, ensuring that no individual can belong to any two of these classes simultaneously. Members of this class are characterized by having at least one member that is a boolean field-list, meaning each record must include at least one field of boolean type. This enforces that the records grouped under this class are distinguished by containing boolean data fields.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'disjointWith': ['record of real datatype'], 'propertyRestrictions': ['[has_member some boolean field-list]']}\nGenerated CQs:", "output": "What ontological separation exists between records of boolean datatype and records of discrete datatype? | Is it allowable for a single record to possess both boolean and discrete datatypes? | Which other record types are formally incompatible with records of discrete datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record of discrete datatype\nDescription: record of discrete datatype is a subclass of record (tuple) datatype, characterized by the requirement that it must have at least one member drawn from a discrete field-list. This ensures that instances of this class represent tuple datatypes whose components include one or more fields with discrete (distinct, countable) values.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Must every record of discrete datatype necessarily have at least one has_member relationship to an entity within discrete field-list? | Is it obligatory for a record of discrete datatype to include a member from the discrete field-list through the has_member property? | Can a record of discrete datatype exist without the has_member property linking it to some element of the discrete field-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set of discrete datatype\nDescription: set of discrete datatype is defined as a subclass of set datatype, representing collections where each member belongs to a discrete base type (such as integers or other countable values). This class is explicitly disjoint from set of real datatype, ensuring that no instance can simultaneously be a set of both discrete and real datatypes. The axiom requires that every member of a set of discrete datatype must be of a discrete base type, emphasizing its use for finite or countably infinite elements.\nAxiom: {'subClassOf': ['set datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_member some discrete base type]']}\nGenerated CQs:", "output": "What logical separation does the ontology specify between sets of discrete and sets of real datatypes? | Is any datatype set classified simultaneously as both discrete and real within the ontology? | Which other sets of datatypes are explicitly defined as disjoint with sets of real datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate datatype\nDescription: aggregate datatype is defined as a subclass of generated datatype and is explicitly disjoint with non-aggregate datatype, ensuring that no individual can be both an aggregate and a non-aggregate datatype. It is characterized by having at least one member that is an aggregate generator (has_member some aggregate generator). Commonly referred to as a \"structured datatype,\" this class captures datatypes that are composed of multiple components or members rather than being atomic.\nAxiom: {'subClassOf': ['generated datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_member some aggregate generator]']}\nGenerated CQs:", "output": "How does the ontology differentiate between aggregate datatypes and non-aggregate datatypes? | Is there any datatype that belongs to both aggregate and non-aggregate categories? | Which datatype categories are formally recognized as distinct from aggregate datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: date and time datatype\nDescription: date and time datatype is a subclass of non-numeric ordered primitive datatype, and is explicitly disjoint with ordinal datatype—meaning no instance can simultaneously belong to both classes. Members of this class possess qualities of being exact and potentially unbounded, and they necessarily have members such as date-time units, date-time radices, and date-time factors. The class supports specific operations, including extension, equality checking, ordering, difference calculation, and rounding of date and time values. This formalization ensures a precise and operation-rich definition of datatypes used for representing and manipulating combined date and time information, distinct from ordinal forms of data.\nAxiom: {'subClassOf': ['non-numeric ordered primitive datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_operation some Extend:time&date]', '[has_operation some Equal:time&date]', '[has_operation some InOrder:time&date]', '[has_member some date-time unit]', '[has_operation some Difference:time&date]', '[has_quality some unbounded]', '[has_member some date-time radix]', '[has_quality some exact]', '[has_operation some Round:time&date]', '[has_member some date-time factor]']}\nGenerated CQs:", "output": "How does the ontology differentiate between date and time datatypes and ordinal datatypes? | Is any datatype instance allowed to be classified as both date and time and ordinal at once? | Which datatypes are specified as mutually exclusive with ordinal datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: size\nDescription: size is defined as a subclass of value expression, representing a value-based concept within the ontology. Members of the size class are characterized by having exactly one associated value of type xsd:integer through the has-value property. This means each individual of size must specify a single integer value, reflecting the quantitative measurement that the class is intended to capture.\nAxiom: {'subClassOf': ['value expression'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Does an entity with the 'size' property have exactly one value of type integer? | Is it required that the 'size' attribute for each instance contains only a single integer value? | Can an instance be described as having more than one integer value for the 'size' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: complex datatype\nDescription: complex datatype is defined as a subclass of numeric primitive datatype and is disjoint with numeric ordered primitive datatype—meaning no individual can simultaneously belong to both classes. Members of this class are characterized as numeric, non-ordered, and approximate in nature. They support operations specific to complex numbers, such as reciprocal, negation, square root, multiplication, addition, promotion, and equality (all in the complex domain). Instances of complex datatype must include members such as complex radix and complex factor. This formalization captures the essential characteristics and operations associated with complex numbers in data representation, distinguishing them from ordered numeric primitive datatypes.\nAxiom: {'subClassOf': ['numeric primitive datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_operation some Reciprocal:complex]', '[has_operation some Negate:complex]', '[has_quality some non-ordered]', '[has_member some complex radix]', '[has_quality some numeric]', '[has_operation some SquareRoot:complex]', '[has_operation some Multiply:complex]', '[has_operation some Add:complex]', '[has_quality some approximate]', '[has_operation some Promote:complex]', '[has_member some complex factor]', '[has_operation some Equal:complex]']}\nGenerated CQs:", "output": "What entities are prevented from being both complex datatype and numeric ordered primitive datatype within the ontology? | Is there any overlap permitted between instances of complex datatype and numeric ordered primitive datatype? | Which datatype categories are expressly defined as disjoint with numeric ordered primitive datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence of real datatype\nDescription: sequence of real datatype is a subclass of sequence datatype, characterized by the restriction that its members must be of the real base type. This means every element within a sequence of this type is a real number, ensuring that the sequence contains no members of other datatypes.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some real base type]']}\nGenerated CQs:", "output": "Is sequence of real datatype a specialization of sequence datatype? | Which datatypes fall under the general class of sequence datatype, including sequence of real datatype? | What broader datatype categories encompass sequence of real datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bag datatype\nDescription: bag datatype is defined as a subclass of homogenous unordered aggregate datatype with variable size, and is explicitly disjoint with set datatype, ensuring that no instance can be both a bag and a set. Members of this class are characterized by containing elements (members) from a specified base type as well as from possible bag generators. Bags possess qualities of being non-ordered (element sequence is not significant), non-numeric, and \"exact\" (potentially referring to preserving element multiplicities). Bags support the following operations: Select, Insert, Delete, IsEmpty, Equal, and Serialize. This formalization models bags as flexible, unordered collections that can contain duplicate elements, are distinguished from sets by their handling of element multiplicity, and provide standard collection manipulation operations.\nAxiom: {'subClassOf': ['homogenous  unordered aggregate datatype with variable size'], 'disjointWith': [], 'propertyRestrictions': ['[has_quality some non-ordered]', '[has_operation some Select:bag]', '[has_operation some Insert:bag]', '[has_member some base type]', '[has_operation some Delete:bag]', '[has_operation some IsEmpty:bag]', '[has_operation some Equal:bag]', '[has_member some bag generator]', '[has_quality some non-numeric]', '[has_operation some Serialize:bag]', '[has_quality some exact]']}\nGenerated CQs:", "output": "How does the ontology formally distinguish between bag datatype and set datatype? | Is it allowed for a datatype to be classified as both a bag and a set within the ontology? | What other datatypes, besides set datatype, are declared as mutually exclusive with bag datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: node component\nDescription: node component is defined as a subclass of graph aggregate component and is explicitly disjoint with edge component, meaning an individual cannot simultaneously be a node component and an edge component. This class represents components within a graph structure that function as nodes, distinct from components serving as edges.\nAxiom: {'subClassOf': ['graph aggregate component'], 'disjointWith': []}\nGenerated CQs:", "output": "What is the formal distinction between node component and edge component within the ontology? | Is there any entity that can simultaneously be classified as both node component and edge component? | Which other classes are specified as disjoint with edge component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-numeric primitive datatype\nDescription: non-numeric primitive datatype is a subclass of primitive datatype and is explicitly disjoint with numeric primitive datatype, ensuring no individual can belong to both classes simultaneously. Members of this class must possess at least one quality that is non-numeric, as specified by the existential property restriction [has_quality some non-numeric]. This formalization captures primitive datatypes whose essential characteristics are not quantifiable numerically.\nAxiom: {'subClassOf': ['primitive datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_quality some non-numeric]']}\nGenerated CQs:", "output": "How are non-numeric primitive datatypes and numeric primitive datatypes differentiated within the ontology? | Is there any datatype in the ontology that qualifies as both numeric and non-numeric primitive datatype? | Which datatypes are asserted as disjoint with numeric primitive datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: heterogenous aggregate generator\nDescription: heterogenous aggregate generator is a subclass of aggregate generator and is equivalent to any class that is either a class generator, record generator, or table datatype. Members of this class possess the quality of being heterogenous, indicating that they generate or represent aggregates containing elements of diverse types or structures. This formalization ensures that any heterogenous aggregate generator is characterized by its structural diversity and can functionally align with multiple generator types.\nAxiom: {'subClassOf': [], 'equivalentClass': ['(class generator or record generator or table datatype)'], 'propertyRestrictions': ['[has_quality some heterogenous]']}\nGenerated CQs:", "output": "Is a heterogenous aggregate generator classified as a kind of aggregate generator? | Which aggregate generator types encompass heterogenous aggregate generators as subclasses? | What broader generator categories include heterogenous aggregate generator within their hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous aggregate datatype\nDescription: homogenous aggregate datatype is defined as a subclass of aggregate datatype, and is explicitly disjoint with heterogenous aggregate datatype, ensuring that no individual can belong to both classes simultaneously. Members of this class are characterized by the property that they must have at least one member that is a homogenous aggregate generator. This formalization captures collections whose elements are produced by uniform (homogeneous) mechanisms, distinguishing them from heterogeneous aggregates both in structure and membership requirements.\nAxiom: {'subClassOf': ['aggregate datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_member some homogenous aggregate generator]']}\nGenerated CQs:", "output": "How is the concept of homogenous aggregate datatype differentiated from heterogenous aggregate datatype within the ontology? | Could any datatype be classified simultaneously as both a homogenous aggregate and a heterogenous aggregate? | Which datatypes, in addition to heterogenous aggregate datatype, are specified as disjoint with homogenous aggregate datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: indirect acess property\nDescription: indirect access property is a subclass of access type, and is formally equivalent to any access performed either by value, in an implementation dependent manner, or by position. This means any instance of indirect access property is characterized by one or more of these access forms, distinguishing it from other access type subclasses.\nAxiom: {'subClassOf': ['access type'], 'equivalentClass': []}\nGenerated CQs:", "output": "Is an indirect access property necessarily either an access by value, an implementation dependent access, or a position access? | Is the class of indirect access property equivalent to the union of access by value, implementation dependent access, and position access? | Are there any types of access that are not covered by access by value, implementation dependent access, or position access when defining indirect access property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unbounded above\nDescription: unbounded above is defined as a subclass of unbounded, representing entities that do not have an upper bound. It is explicitly disjoint with unbounded below, ensuring that no individual can simultaneously be both unbounded above and unbounded below. This class characterizes those entities that lack an upper limit but may or may not have a lower bound.\nAxiom: {'subClassOf': ['unbounded'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology establish separation between unbounded above and unbounded below? | Is any entity classified as both unbounded above and unbounded below within the ontology? | Which classes are defined as mutually exclusive with unbounded above? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: approximate\nDescription: approximate is defined as a subclass of exactness, meaning it represents a kind or degree of exactness. It is explicitly disjoint with exact, so no individual can simultaneously be both approximate and exact. This class formalizes the notion of approximation as distinct from strict exactness within the ontology.\nAxiom: {'subClassOf': ['exactness'], 'disjointWith': []}\nGenerated CQs:", "output": "What logical separation is established between approximate and exact in the ontology? | Is it valid for an entity to be classified as both approximate and exact simultaneously? | Which classes are explicitly defined as incompatible with exact? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ordered\nDescription: ordered is defined as a subclass of order, indicating that all instances of ordered are also considered orders according to the ontology. It is explicitly disjoint with non-ordered, meaning that no individual can be simultaneously classified as both ordered and non-ordered. This formalization distinguishes entities that possess or exhibit ordering from those that do not.\nAxiom: {'subClassOf': ['order'], 'disjointWith': []}\nGenerated CQs:", "output": "What formal separation exists between ordered and non-ordered entities within the ontology? | Is any instance permitted to belong simultaneously to both ordered and non-ordered types? | Which classes are declared as disjoint with ordered in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Difference:set\nDescription: Difference:set is defined as a subclass of the difference operation, representing the set-theoretic difference between collections or sets. It is explicitly disjoint with Difference:time&date, so no instance can be both a set difference and a time/date difference. This class captures operations or results concerning the removal of elements from one set that exist in another, and is restricted to set-based contexts.\nAxiom: {'subClassOf': ['difference operation'], 'disjointWith': []}\nGenerated CQs:", "output": "What entities are considered mutually exclusive between Difference:set and Difference:time&date in the ontology? | Is there any instance that could simultaneously belong to both Difference:set and Difference:time&date? | Which classes does the ontology specify as being disjoint with Difference:set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Insert:bag\nDescription: Insert:bag is defined as a subclass of insert operation, signifying that it represents a specific type of insertion action. It is declared disjoint with Insert:table, which means that an instance of Insert:bag cannot simultaneously belong to the Insert:table class. This distinction enforces mutual exclusivity between these two types of insertion operations.\nAxiom: {'subClassOf': ['insert operation'], 'disjointWith': []}\nGenerated CQs:", "output": "What is the ontological distinction between Insert:bag and Insert:table? | Can an individual simultaneously be classified as both Insert:bag and Insert:table? | Which classes are explicitly declared as disjoint with Insert:bag? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NonNegative:integer\nDescription: NonNegative:integer is defined as a subclass of nonNegative operation, representing integers that are greater than or equal to zero. It is formally disjoint with NonNegative:rational, ensuring that no individual can be both a NonNegative:integer and a NonNegative:rational. This class captures the concept of all non-negative integer values, distinguishing them from non-negative rational numbers.\nAxiom: {'subClassOf': ['nonNegative operation'], 'disjointWith': []}\nGenerated CQs:", "output": "What logical separation is asserted between NonNegative:integer and NonNegative:rational within the ontology? | Is there any instance that could simultaneously belong to both NonNegative:integer and NonNegative:rational classes? | Which classes are declared as disjoint with NonNegative:rational in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Serialize:bag\nDescription: Serialize:bag is defined as a subclass of serialize operation, representing a specific type of serialization process. It is explicitly disjoint with Serialize:table, ensuring that no instance can be classified as both Serialize:bag and Serialize:table. This distinction enforces separation between bag-based and table-based serialization methods.\nAxiom: {'subClassOf': ['serialize operation'], 'disjointWith': []}\nGenerated CQs:", "output": "What distinguishes the classes Serialize:bag and Serialize:table within the ontology? | Is it allowed for an instance to be both a Serialize:bag and a Serialize:table? | Which classes are defined to be disjoint with Serialize:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index access\nDescription: index access is defined as a subclass of direct access property and is explicitly disjoint with key access, meaning an individual cannot be both an index access and a key access. This class represents mechanisms or operations that permit direct access to elements based on their positional index within a collection, distinctly separating it from access methods based on explicit keys.\nAxiom: {'subClassOf': ['direct access property'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology differentiate index access from key access? | Is there an entity that can be classified simultaneously as supporting both index access and key access? | Which access types are explicitly defined as incompatible with key access? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: identifier not unique\nDescription: identifier not unique is a subclass of aggregate-imposed identifier uniqueness and is disjoint with identifier unique, meaning no individual can simultaneously be both identifier not unique and identifier unique. This class represents identifiers within an aggregate context that are not required to be unique, distinguishing them from identifiers that have enforced uniqueness at the aggregate level.\nAxiom: {'subClassOf': ['aggregate-imposed identifier uniqueness'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology distinguish between 'identifier not unique' and 'identifier unique'? | Is any instance allowed to have both 'identifier not unique' and 'identifier unique' classifications? | Which classes are specified as mutually exclusive with 'identifier unique'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: component mandatory\nDescription: component mandatory is defined as a subclass of component mandatoriness and is explicitly disjoint with component non-mandatory, ensuring that no individual can simultaneously be both a component mandatory and component non-mandatory. This class characterizes components that are required or obligatory within a given context, distinguishing them from non-mandatory components.\nAxiom: {'subClassOf': ['component mandatoriness'], 'disjointWith': []}\nGenerated CQs:", "output": "What is the formal separation between component mandatory and component non-mandatory in the ontology? | Can an entity be classified as both a mandatory and a non-mandatory component simultaneously? | Which components are explicitly stated as disjoint with component non-mandatory? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: recursive\nDescription: recursive is defined as a subclass of recursiveness, signifying that every instance of recursive inherits properties from recursiveness. It is explicitly disjoint with non-recursive, ensuring that no individual can simultaneously belong to both recursive and non-recursive classes. This formalization distinguishes all recursive instances from those that are non-recursive.\nAxiom: {'subClassOf': ['recursiveness'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology distinguish between recursive and non-recursive classes? | Is any entity classified as both recursive and non-recursive in the ontology? | Which classes are formally specified as disjoint with non-recursive? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive field identifier\nDescription: descriptive field identifier is a subclass of field identifier, and is explicitly disjoint with target field identifier, meaning that no individual can simultaneously be both a descriptive field identifier and a target field identifier. This class represents identifiers that have descriptive purposes, distinguishing them from identifiers that serve as targets. The disjointness axiom enforces a clear conceptual separation between descriptive and target field identifiers within the ontology.\nAxiom: {'subClassOf': ['field identifier'], 'disjointWith': []}\nGenerated CQs:", "output": "Are there any instances that can belong to both descriptive field identifier and target field identifier? | Which classes are asserted to be mutually exclusive with target field identifier? | What formal constraint distinguishes descriptive field identifier from target field identifier in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive record of primitives field component\nDescription: descriptive record of primitives field component is a subclass of labeled dataset descriptive field component. Every instance of this class must be associated, via the property role_of, with at least one record of primitives datatype. This formalization indicates that members play a specific role in describing labeled datasets by being directly linked to data representations consisting of primitive types.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Does every descriptive record of primitives field component necessarily have a role_of relation with some record of primitives datatype? | Are all instances of descriptive record of primitives field component required to participate in at least one role_of relation with a record of primitives datatype? | Is it possible for a descriptive record of primitives field component not to be related via role_of to any record of primitives datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive record of discrete field component\nDescription: descriptive record of discrete field component is a subclass of labeled dataset descriptive field component. It is characterized by the property that it plays some role in relation to a record of discrete datatype, indicating its involvement in describing or annotating fields within a labeled dataset that take on discrete values. This class ensures that its instances are specifically linked to descriptive information about discrete data fields.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[role_of some record of discrete datatype]']}\nGenerated CQs:", "output": "Is every descriptive record of discrete field component classified under labeled dataset descriptive field component? | Which entities fall under the labeled dataset descriptive field component category, such as descriptive record of discrete field component? | What broader categories include descriptive record of discrete field component as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: list specification\nDescription: list specification is defined as a subclass of specification. This means all instances of list specification are also considered specifications. No additional disjointness, property restrictions, or further descriptive details are specified, so the class serves as a specialization of the general concept of specification for use cases where differentiation among specification types is needed.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "output": "Is list specification classified as a type of specification? | What categories of specifications include list specification as a more specific instance? | Which broader specification classes does list specification belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: value space\nDescription: value space is defined as a subclass of specification. This means that every value space is a type of specification, inheriting the general characteristics of specification while representing a distinct concept within that category. No additional distinguishing features or restrictions are asserted by the current axioms.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "output": "What higher-level categories does value space belong to? | Which specifications have value space as a specialized form? | Are all value spaces encompassed within the specification category? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tag-value list\nDescription: tag-value list is defined as a subclass of specification, indicating that it represents a specific kind of specification. This class formalizes entities that provide information or structure through a collection of tags and their corresponding values, typically used to encode attribute data in a structured format.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "output": "What more general categories does tag-value list fall under in the ontology? | Does every tag-value list represent a form of specification? | Which entities are classified as subtypes of specification, such as tag-value list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: direction\nDescription: direction is defined as a subclass of specification. This means that every direction is a specific type of specification, and it inherits all characteristics and properties applicable to specifications in the ontology. No further constraints or descriptions have been provided, so the class serves as a general categorization for directions under the broader concept of specifications.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "output": "What more specific subclasses exist under specification, such as direction? | Does the concept direction fall under the broader category of specification? | Which general categories include direction as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: select-item specification\nDescription: select-item specification is defined as a subclass of specification. This indicates that every select-item specification is a type of specification, inheriting all characteristics of the parent class, with no additional restrictions or distinctions provided in the current formalization. No further disjointness or property constraints are specified.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "output": "Which specific types of specification encompass select-item specification? | What broader specification categories include select-item specification as a subclass? | Is select-item specification categorized under the broader group of specification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: datatype generator\nDescription: datatype generator is defined as a subclass of directive information entity. This indicates that any datatype generator inherits all structural and semantic characteristics of directive information entities, typically representing an information construct that prescribes or instructs the generation of datatypes. No further property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['directive information entity']}\nGenerated CQs:", "output": "Which higher-level categories encompass datatype generator? | What entities are direct or indirect subclasses of directive information entity, specifically including datatype generator? | Is datatype generator included within the broader class of directive information entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: characterizing operation\nDescription: characterizing operation is a subclass of directive information entity. It refers to the set of operations that, either performed on or producing values of a datatype, distinguish that datatype from others with otherwise identical value spaces except potentially for symbol substitution. This class is used to formally capture the unique operational behaviors that define and differentiate datatypes in an information system.\nAxiom: {'subClassOf': ['directive information entity']}\nGenerated CQs:", "output": "Is characterizing operation a more specific kind of directive information entity? | Which broader classifications include characterizing operation as a subclass? | What entities are covered under directive information entity, such as characterizing operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: data representational model\nDescription: data representational model is defined as a subclass of directive information entity. This means any instance of a data representational model is also an instance of directive information entity, inheriting all its properties and characteristics. The class is intended to capture entities that provide structured directives on how data is to be represented or organized.\nAxiom: {'subClassOf': ['directive information entity']}\nGenerated CQs:", "output": "What overarching entity types include data representational model within their classification? | Which entities are categorized as more specific forms of directive information entity, such as data representational model? | Does a data representational model fall under the broader grouping of directive information entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: explicit subtype generator\nDescription: explicit subtype generator is defined as a subclass of subtype generator, meaning every explicit subtype generator is also a subtype generator. No further restrictions or characteristics are specified by the current axioms or descriptions.\nAxiom: {'subClassOf': ['subtype generator']}\nGenerated CQs:", "output": "Which subclasses fall within the category of subtype generator, including explicit subtype generator? | Is explicit subtype generator classified under subtype generator? | What broader classes encompass explicit subtype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: natural number\nDescription: natural number is defined as a subclass of defined datatype, indicating that it represents a specific kind of datatype with well-established properties. Natural numbers typically include non-negative integers (0, 1, 2, ...), and are formally distinguished from other datatypes by their discrete, countable nature. This classification ensures that any individual of the class natural number is treated as a clearly defined, foundational numeric datatype.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "What broader datatype classifications include natural number as a subclass? | Which datatypes encompass natural number as a specialized type? | Is natural number categorized under defined datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: modulo\nDescription: modulo is defined as a subclass of defined datatype, indicating that it represents a specifically characterized datatype within the ontology. No further domain-specific properties or restrictions are specified for this class based on the current axiom.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "What broader categories encompass modulo under defined datatype? | Is modulo classified as a kind of defined datatype? | Which defined datatypes have modulo as a specific subtype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bit\nDescription: bit is defined as a subclass of defined datatype, indicating that it represents a specific, well-defined data value within the ontology. As a data-oriented class, bit inherits all characteristics of defined datatypes but is further specialized for contexts where only binary or distinctly specified data values are relevant.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Is bit classified under the general group of defined datatype? | Which datatypes are more specific types within defined datatype, including bit? | To what broader datatype categories does bit belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bit string\nDescription: bit string is defined as a subclass of defined datatype, representing a specific type of datatype whose values consist of sequences of bits. This classification situates bit string within the hierarchy of datatypes and indicates its specialization for encoding data as ordered collections of binary digits.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "What higher-level datatypes does bit string fall under in the ontology? | Which datatypes are classified as specializations of defined datatype, including bit string? | Is bit string categorized under defined datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: character string\nDescription: character string is defined as a subclass of defined datatype. This means any instance of character string is also recognized as a defined datatype, typically representing a sequence of characters used to encode textual information.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Is character string classified as a subtype of defined datatype? | What general datatypes does character string fall under within the ontology? | Which datatypes are encompassed under defined datatype, including character string? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time interval\nDescription: time interval is defined as a subclass of defined datatype, indicating that it represents a structured data value within the ontology. As a specialized datatype, time interval refers to a span or duration of time, inheriting all properties and constraints applicable to defined datatypes.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Does time interval fall within the category defined by defined datatype? | What specific types are classified under defined datatype, including time interval? | Which broader categories encompass time interval as a specific instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: octet\nDescription: octet is defined as a subclass of defined datatype, establishing it as a specific type of datatype within the ontology. This formalization indicates that any instance of octet must satisfy all constraints applicable to defined datatype, but provides no further restrictions or additional properties beyond this classification.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Is octet a defined subtype within the category of defined datatype? | To which higher-level datatypes does octet belong according to the ontology hierarchy? | Which datatypes are specified as subclasses of defined datatype, including octet? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: octet string\nDescription: octet string is defined as a subclass of defined datatype. This means that octet string represents a specific type of datatype, though its precise structure and constraints are not further elaborated in the current axioms. Members of this class inherit all characteristics of defined datatype.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Which data types fall under the category of defined datatype, such as octet string? | What broader data categories include octet string as a member? | Is octet string classified as a specialized type of defined datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: private\nDescription: private is defined as a subclass of defined datatype, indicating that it represents a specific kind of datatype within the ontology. No additional restrictions or disjointness axioms are specified, so its primary characteristic is its hierarchical relationship as a more specialized form of defined datatype.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Which specific types are classified as defined datatype, such as private? | What broader classes does private belong to in this ontology? | Does private fall under the general category of defined datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: object identifier\nDescription: object identifier is defined as a subclass of defined datatype. This means that every object identifier is a specific type of defined datatype, typically used to uniquely distinguish individual entities or objects within a system or dataset.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Is every object identifier necessarily classified as a defined datatype? | To what broader datatype classes does object identifier belong? | Which defined datatypes have object identifier as a specific specialization? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: stack\nDescription: stack is defined as a subclass of defined generator. This means every stack is a type of defined generator, inheriting all characteristics associated with defined generators. No additional property restrictions, disjointness, or equivalence assertions are specified. This class is intended to capture entities that possess the structural or functional traits of defined generators, refined specifically as stacks.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "Which entities are identified as subclasses under defined generator, such as stack? | Is stack categorized as a specific type of defined generator? | What are the broader categories or superclasses to which stack belongs? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tree\nDescription: tree is defined as a subclass of defined generator. This indicates that any instance of tree is considered a type of defined generator, inheriting all properties and restrictions from that superclass. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "What entities are specified as subclasses of defined generator, such as tree? | Is tree classified as a type of defined generator? | Which broader classes does tree pertain to within the context of defined generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: optional\nDescription: optional is defined as a subclass of defined generator, indicating that every optional is a type of defined generator. This means all individuals classified as optional inherit the properties and restrictions of defined generator, but may have further distinguishing features or constraints specified elsewhere. There are no additional axioms or asserted properties currently restricting the class further.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "Which defined generator types encompass optional as a subclass? | Does optional fall under the defined generator category? | What broader classes include optional within the context of defined generator classifications? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: directed labeled graph datatype generator\nDescription: directed labeled graph datatype generator is a subclass of defined generator. This class represents generators that are specifically designed to produce directed labeled graph datatypes, inheriting the general properties of defined generators while specializing in the context of graph structures with directed edges and labeled nodes or connections.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "Is every directed labeled graph datatype generator inherently classified as a defined generator? | To what higher-level generator classes does directed labeled graph datatype generator belong? | Which specific generator types are categorized under defined generator, such as directed labeled graph datatype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-directed labeled graph generator\nDescription: non-directed labeled graph generator is defined as a subclass of defined generator. This means every non-directed labeled graph generator is a type of defined generator, inheriting its general properties. The class represents entities that produce non-directed graphs in which nodes and/or edges are assigned labels, but with no explicit directionality imposed on the connections.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "What broader generator classifications include non-directed labeled graph generator? | Which generator types are subclasses of defined generator? | Does a non-directed labeled graph generator fall under the category of defined generators? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: vector generator\nDescription: vector generator is a subclass of defined generator, indicating that every vector generator is also a defined generator. No additional constraints or unique characteristics have been specified beyond this hierarchical relationship. The purpose and specific properties of vector generator are inherited from defined generator.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "Which generators fall under the defined generator category, such as vector generator? | What hierarchical categories include vector generator as a member? | Is a vector generator classified as a type of defined generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: procedure generator\nDescription: procedure generator is defined as a subclass of non-aggregate generator. This means that every procedure generator is a specific type of non-aggregate generator, inheriting all properties and constraints applicable to non-aggregate generators. No further restrictions or characteristics are provided by the current axioms.\nAxiom: {'subClassOf': ['non-aggregate generator']}\nGenerated CQs:", "output": "Does a procedure generator fall under the classification of non-aggregate generator? | To which broader generator categories does procedure generator belong? | Which types of generators are specific forms of non-aggregate generator, such as procedure generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: attribute identifier\nDescription: attribute identifier is defined as a subclass of identifier, indicating that every attribute identifier is an identifier with a specific role in distinguishing or denoting attributes within a system. This class inherits all properties associated with identifiers, but specializes them for use in the identification of attributes. No further property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "output": "What higher-level classes is attribute identifier associated with? | Is attribute identifier classified under the broader group of identifier? | Which specific types are encompassed by the identifier category, including attribute identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: parameter identifier\nDescription: parameter identifier is a subclass of identifier. This means every parameter identifier is an identifier, inheriting all its properties and characteristics, but is specifically used to denote or reference parameters (such as in functions or methods). The axiom ensures that all parameter identifiers are included within the broader category of identifiers.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "output": "Is parameter identifier classified as a more specific instance within the category of identifier? | Which subclasses exist under identifier, and does parameter identifier appear among them? | What general categories encompass parameter identifier as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: extended-value identifier\nDescription: extended-value identifier is defined as a subclass of identifier. Members of this class inherit all characteristics of identifiers, serving the purpose of uniquely distinguishing entities, but are further specified as relating to extended-value contexts. No additional property restrictions or disjointness axioms are currently asserted for this class.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "output": "Is every extended-value identifier classified as an identifier? | What higher-level classes does extended-value identifier fall under within the identifier hierarchy? | Which subclasses of identifier encompass extended-value identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: character-set identifier\nDescription: character-set identifier is defined as a subclass of identifier. This means every character-set identifier is an identifier, but with a more specific role, typically used to uniquely represent or designate different character sets within a system or context. There are no further axioms or restrictions specified for this class.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "output": "What broader classes does character-set identifier fall under in the ontology? | Which identifier types include character-set identifier as a specialization? | Is every character-set identifier also categorized as an identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: field identifier\nDescription: field identifier is defined as a subclass of identifier. Members of this class inherit all characteristics of identifiers, specifically representing identifiers that are associated with fields. This formalization ensures field identifiers are treated as a specialized type of identifier, typically used to uniquely reference or denote fields within a given context or system.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "output": "To which higher-level classes is field identifier related? | Does field identifier fall under the broader classification of identifier? | What specific subtypes exist within the identifier category, including field identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: date-time factor\nDescription: date-time factor is defined as a subclass of factor. This means every date-time factor is a type of factor, inheriting its general properties and constraints. No additional disjointness or property restrictions are specified, so instances of date-time factor possess all the characteristics of factors, potentially specializing in aspects related to date or time within their domain.\nAxiom: {'subClassOf': ['factor']}\nGenerated CQs:", "output": "What factors are more specific than factor, such as date-time factor? | Which higher-level categories include date-time factor? | Is date-time factor classified as a type under factor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: scaled factor\nDescription: scaled factor is defined as a subclass of factor. This means that every scaled factor is a specific kind of factor, inheriting all characteristics of factors, but may possess additional properties or constraints related to scaling, depending on further ontology specification. There are no further axioms provided, so this class serves as a specialization for factors that have been subject to scaling.\nAxiom: {'subClassOf': ['factor']}\nGenerated CQs:", "output": "Which subcategories fall under factor, including scaled factor? | Is scaled factor classified as a specific kind of factor? | What broader class does scaled factor conceptually fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real factor\nDescription: real factor is defined as a subclass of factor. This means every real factor is, by definition, a factor, inheriting all characteristics shared by factors in general. There are no further distinguishing restrictions or properties specified, so real factor can be understood as a type of factor without additional specified constraints.\nAxiom: {'subClassOf': ['factor']}\nGenerated CQs:", "output": "Is real factor categorized under the broader class of factor? | Which subclasses comprise the set defined by factor, including real factor? | To which general classes does real factor belong within the context of factors? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: complex factor\nDescription: complex factor is defined as a subclass of factor. This means that every complex factor is a kind of factor, inheriting all properties of the factor class. There are no additional restrictions, disjointness, or property constraints specified for complex factor in the current formalization.\nAxiom: {'subClassOf': ['factor']}\nGenerated CQs:", "output": "What are the broader class hierarchies that complex factor falls under? | Which subclasses are encompassed by factor, such as complex factor? | Does complex factor represent a specific kind under the general category of factor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: graph aggregate component\nDescription: graph aggregate component is defined as a subclass of aggregate field component. This indicates that every graph aggregate component inherits all characteristics of aggregate field components but may have additional specialized properties or constraints. Instances of this class are, therefore, specific types of aggregate field components, potentially involved in representing or handling aggregated data within a graph structure.\nAxiom: {'subClassOf': ['aggregate field component']}\nGenerated CQs:", "output": "Is graph aggregate component classified under the broader category of aggregate field component? | What parent categories encompass graph aggregate component? | Which aggregate field component subclasses include graph aggregate component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: n-adic operation\nDescription: n-adic operation is defined as a subclass of characterizing operation. It represents operations that map ordered n-tuples of values—where each value may belong to a given or parameterized datatype—into a result that is also of the given or a parametric datatype. This class models operations with arity n, generalizing functions over sequences of values and emphasizing their domain and codomain datatype constraints.\nAxiom: {'subClassOf': ['characterizing operation']}\nGenerated CQs:", "output": "Is n-adic operation categorized under characterizing operation? | Which operations are specific types of characterizing operation, such as n-adic operation? | What broader operational categories include n-adic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined generator parameter-list\nDescription: defined generator parameter-list is a subclass of list specification. This means every defined generator parameter-list is a type of list specification, inheriting all its properties and constraints. Individuals in this class are formally recognized as specialized list specifications used for defining generator parameters.\nAxiom: {'subClassOf': ['list specification']}\nGenerated CQs:", "output": "Is defined generator parameter-list categorized under list specification? | What are the more specialized types within list specification, such as defined generator parameter-list? | To which higher-level group does defined generator parameter-list conceptually belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DAG datatype generator\nDescription: DAG datatype generator is defined as a subclass of directed labeled graph datatype generator. Members of this class inherit all properties of directed labeled graph datatype generators, specializing in generating data types based on directed acyclic graph (DAG) structures. This class is used to represent systems or components that produce datatypes structured according to DAGs, ensuring acyclicity and directionality in their outputs.\nAxiom: {'subClassOf': ['directed labeled graph datatype generator']}\nGenerated CQs:", "output": "Is DAG datatype generator classified under directed labeled graph datatype generator? | What broader datatype generator classes include DAG datatype generator? | Which generators are categorized as subclasses of directed labeled graph datatype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: identifier\nDescription: identifier is defined as a subclass of information artifact entity. Members of this class represent informational constructs specifically designed to uniquely distinguish or label entities, concepts, or data within information systems. This formalization means every identifier is categorized under the broader class of information artifact entities, emphasizing its role in conveying and maintaining unique identity information.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "Which higher-level categories encompass identifier? | What types are classified under information artifact entity, including identifier? | Does identifier belong to the broader group of information artifact entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: value expression\nDescription: value expression is a subclass of information artifact entity. This means every value expression is formally classified as a type of information artifact entity, inheriting all its general properties and restrictions. No additional axioms or property restrictions are specified, so value expression is currently distinguished solely by its classification within the ontology hierarchy as a specialized form of information artifact entity.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "Does value expression inherit characteristics from information artifact entity? | Which subclasses are defined within the scope of information artifact entity, such as value expression? | What general class does value expression fall under within the context of information artifact entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: label\nDescription: label is defined as a subclass of information artifact entity, indicating that it represents a type of information artifact. Instances of this class are understood to bear, convey, or represent information, typically serving as markers or identifiers that provide descriptive or categorical details about other entities.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "What are the more general classes that label is classified under? | Is label a specific type of information artifact entity? | Which information artifact entities include label as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: directive information entity\nDescription: directive information entity is defined as a subclass of information artifact entity. This means that every directive information entity is a type of information artifact entity, with no additional property restrictions or disjointness specified. Members of this class represent entities that are informational in nature and classified within the broader category of information artifact entities.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "Which specific subtypes of information artifact entity include directive information entity as a member? | What are the direct and indirect parent classes of directive information entity? | Is directive information entity classified under the broader group of information artifact entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: representation\nDescription: representation is defined as a subclass of information artifact entity, indicating that every instance of representation is an information-based object or artifact. This formalization situates representations within the broader context of informational entities, ensuring that they inherit all characteristic properties of information artifact entities. There are no additional property restrictions or disjointness conditions specified for this class.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "What are the broader categories that encompass representation? | Is representation a more specific type within the category of information artifact entity? | Which subclasses fall under information artifact entity, such as representation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: specification\nDescription: specification is defined as a subclass of information artifact entity. This means every specification is considered a type of information artifact, formally representing structured information or requirements typically used to describe, detail, or govern the properties or behavior of an entity, system, or process.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "What general categories encompass specification in the ontology? | Which entities are recognized as more specific forms of information artifact entity, including specification? | Is specification categorized under information artifact entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: equality\nDescription: equality is defined as a subclass of datatype property, indicating that it represents a specific type of property that links individuals to data values. This classification ensures that equality is used exclusively in contexts appropriate for datatype properties, which relate individuals to literal values rather than to other individuals.\nAxiom: {'subClassOf': ['datatype property']}\nGenerated CQs:", "output": "What are the broader property categories that include equality? | Which datatype properties encompass equality as a more specific type? | Is equality classified as a kind of datatype property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: maximum-size\nDescription: maximum-size is a subclass of size, representing the largest possible or allowable extent within a given context. Any individual classified as maximum-size must also be an instance of size, specifying the upper limit or boundary in measurement or quantity.\nAxiom: {'subClassOf': ['size']}\nGenerated CQs:", "output": "Does maximum-size fall under the broader classification of size? | Which higher-level categories encompass maximum-size? | What are the specific types categorized within size, including maximum-size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: minimum-size\nDescription: minimum-size is defined as a subclass of size, indicating that it represents a more specific concept within the broader category of size. Members of this class inherit all characteristics of size, and are distinguished by representing some form of minimum or least amount within size-related contexts.\nAxiom: {'subClassOf': ['size']}\nGenerated CQs:", "output": "Under which broader category is minimum-size classified? | Which concepts are encompassed within size and include minimum-size as a subclass? | Does minimum-size represent a specialization of size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate generator property\nDescription: aggregate generator property is defined as a subclass of quality, indicating that it represents a specialized type of quality. Members of this class inherit all characteristics of qualities, and specifically pertain to attributes or aspects associated with aggregate generators. No additional restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['quality']}\nGenerated CQs:", "output": "What are the more general categories that encompass aggregate generator property? | Which property types fall under the superclass quality, including aggregate generator property? | Is every aggregate generator property classified under the broader category of quality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: datatype property\nDescription: datatype property is defined as a subclass of quality, indicating that each instance of datatype property inherits characteristics associated with quality. This classification suggests that datatype properties are viewed as specific types of qualities within the ontology.\nAxiom: {'subClassOf': ['quality']}\nGenerated CQs:", "output": "Does every datatype property fall under the category of quality? | Which properties are classified as more specific than quality, including datatype property? | To which upper-level categories does datatype property belong within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: subtype generator\nDescription: subtype generator is defined as a subclass of datatype generator, indicating that every instance of subtype generator is also an instance of datatype generator. This classification specifies that subtype generators operate within the broader framework of datatype generators but may provide more specialized or refined functionality. No additional disjointness or property restrictions are specified.\nAxiom: {'subClassOf': ['datatype generator']}\nGenerated CQs:", "output": "Is subtype generator an example of datatype generator? | Which generators are classified under datatype generator, including subtype generator? | What general generator categories encompass subtype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: date-time unit\nDescription: date-time unit is defined as a subclass of label, indicating that it represents a specific type of label used to denote units of time such as seconds, minutes, or hours in the context of date and time. No additional constraints or disjointness are specified, so its primary distinguishing feature is its specialization from the broader category of label.\nAxiom: {'subClassOf': ['label']}\nGenerated CQs:", "output": "What specific subclasses are classified under label, such as date-time unit? | Which concept categories does date-time unit derive from, including label? | Is date-time unit encompassed within the hierarchy of label? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: date-time radix\nDescription: date-time radix is defined as a subclass of radix. This indicates that any instance of date-time radix inherits all characteristics of radix, while potentially adding more specific constraints or properties relevant to date and time representation bases. No further description or property restrictions are provided.\nAxiom: {'subClassOf': ['radix']}\nGenerated CQs:", "output": "Is date-time radix classified under the broader group of radix? | Which specialized forms are encompassed by the class radix, such as date-time radix? | What larger categories does date-time radix fall under in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: complex radix\nDescription: complex radix is a subclass of radix. This means every complex radix is a type of radix, inheriting all the general properties of radix. There are no additional property restrictions or disjointness axioms specified, so complex radix is simply categorized as a specialized form within the broader radix class.\nAxiom: {'subClassOf': ['radix']}\nGenerated CQs:", "output": "What are the parent categories that encompass complex radix? | Which specific types fall under the broader class of radix? | Is complex radix classified as a subtype under the category of radix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real radix\nDescription: real radix is a subclass of radix, representing those members of radix that have the property of being real. Every real radix is formally included in the broader category of radix, but may possess additional distinguishing characteristics specifying real-valued properties. No further property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['radix']}\nGenerated CQs:", "output": "Does real radix fall under the broader classification of radix? | Which specific types are categorized within radix, such as real radix? | What general classifications encompass real radix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: scaled radix\nDescription: scaled radix is defined as a subclass of radix. This means every instance of scaled radix is also considered a radix. No additional property restrictions or disjointness axioms are specified, so a scaled radix inherits all characteristics of radix, potentially with further differentiation implied by its name or use context.\nAxiom: {'subClassOf': ['radix']}\nGenerated CQs:", "output": "To which overarching categories is scaled radix assigned within the taxonomy? | Which classifications are recognized as specializations of radix, such as scaled radix? | Does scaled radix fall under the broader concept of radix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: factor\nDescription: factor is defined as a subclass of value expression, indicating that every instance of factor is also recognized as a value expression. There are no additional restrictions or disjointness axioms specified, so factor inherits all characteristics of value expressions without further constraints.\nAxiom: {'subClassOf': ['value expression']}\nGenerated CQs:", "output": "To which broader classifications does factor belong within the ontology? | Which entities are classified under value expression, such as factor? | Does every factor represent a form of value expression? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: radix\nDescription: radix is defined as a subclass of value expression. This indicates that any radix is a specific kind of value expression, inheriting all characteristics of value expressions and further specializing their meaning, typically referring to the numerical base in mathematical or computational contexts.\nAxiom: {'subClassOf': ['value expression']}\nGenerated CQs:", "output": "Can radix be classified as a kind of value expression? | Which entities are subclasses under value expression, such as radix? | What are the general categories that radix is a member of within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bound\nDescription: bound is defined as a subclass of value expression, indicating that every instance of bound is also considered a value expression. No further restrictions or disjointness axioms are specified, so the defining characteristic of the bound class is its inheritance from value expression.\nAxiom: {'subClassOf': ['value expression']}\nGenerated CQs:", "output": "Which subclasses fall under value expression, and does bound appear among them? | What general class hierarchies encompass bound, considering its relation to value expression? | Is value expression a broader category that includes bound as a more specific concept? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: edge component\nDescription: edge component is defined as a subclass of graph aggregate component. This means that every edge component is a specialized type of graph aggregate component, inheriting all its characteristics. The class represents a distinct part or module within the broader category of aggregated components in graph structures. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['graph aggregate component']}\nGenerated CQs:", "output": "To what broader structural groups does edge component pertain? | Is edge component included within the hierarchy of graph aggregate component? | Which components are classified as specializations of graph aggregate component, specifically noting edge component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled dataset descriptive field component\nDescription: labeled dataset descriptive field component is defined as a subclass of field component. This means every labeled dataset descriptive field component is by definition a type of field component. No additional property restrictions or disjointness constraints are specified, so its unique characterization is its specialization of the more general field component class.\nAxiom: {'subClassOf': ['field component']}\nGenerated CQs:", "output": "Is every labeled dataset descriptive field component classified under the field component category? | Which components are more specific exemplars of field component, including labeled dataset descriptive field component? | What categories encompass labeled dataset descriptive field component as a more specific element? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled dataset target field component\nDescription: labeled dataset target field component is defined as a subclass of field component. This means every labeled dataset target field component is a specific type of field component, typically representing the target variable in a labeled dataset. No additional property or disjointness restrictions are specified for this class.\nAxiom: {'subClassOf': ['field component']}\nGenerated CQs:", "output": "To which broader groups does labeled dataset target field component belong within the hierarchy of field component? | Is every labeled dataset target field component a specific kind of field component? | Which entities are classified as field component subclasses, such as labeled dataset target field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: add operation\nDescription: add operation is defined as a subclass of dyadic arithmetic operation, indicating that it is an arithmetic operation that takes exactly two arguments. This formalization positions add operation within the hierarchy of arithmetic functions involving pairs of inputs, such as addition in standard mathematics.\nAxiom: {'subClassOf': ['dyadic aritmetic operation']}\nGenerated CQs:", "output": "Which operations are subclasses of dyadic arithmetic operation, such as add operation? | What broader classifications include add operation as a specific example? | Does the add operation fall under the category of dyadic arithmetic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: multiply operation\nDescription: multiply operation is defined as a subclass of dyadic arithmetic operation, indicating that it is an arithmetic operation involving exactly two operands. Instances of this class perform multiplication, processing two input values to produce their product.\nAxiom: {'subClassOf': ['dyadic aritmetic operation']}\nGenerated CQs:", "output": "What broader classes encompass multiply operation in the context of arithmetic operations? | Which operations are defined as specializations of dyadic arithmetic operation, such as multiply operation? | Is multiply operation categorized under dyadic arithmetic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Divide:scaled\nDescription: Divide:scaled is defined as a subclass of dyadic arithmetic operation. This indicates that it represents an arithmetic operation involving two inputs (operands). No further description or distinguishing constraints are specified by the current axioms, so its meaning is inherited from the broader category of dyadic arithmetic operations.\nAxiom: {'subClassOf': ['dyadic aritmetic operation']}\nGenerated CQs:", "output": "What specific operations are subclasses of dyadic arithmetic operation, and does Divide:scaled appear among them? | Which broader arithmetic operation classes include Divide:scaled as a specialized form? | Is Divide:scaled categorized under dyadic arithmetic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: delete operation\nDescription: delete operation is a subclass of dyadic updating operation. This means that every delete operation is considered a specific type of updating operation that involves two entities (typically an object and context). The axiom establishes the hierarchical relationship, indicating that delete operation inherits all structural characteristics of dyadic updating operations.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "Which higher-level operation types encompass delete operation in their hierarchy? | Is every delete operation classified as a kind of dyadic updating operation? | What operations belong under the broader category of dyadic updating operation, specifically including delete operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: insert operation\nDescription: insert operation is defined as a subclass of dyadic updating operation. This means that every insert operation is considered a specific type of dyadic updating operation, typically involving two entities and resulting in an update. No further distinguishing characteristics or property restrictions are specified.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "Which specific operations are recognized under the category of dyadic updating operation? | Is insert operation classified as a kind of dyadic updating operation? | What broader operational categories does insert operation fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Append:sequence\nDescription: Append:sequence is defined as a subclass of dyadic updating operation, meaning it is a specific type of operation that updates data by taking two inputs. This class formalizes the concept of appending one sequence to another as an update, inheriting the general properties of dyadic updating operations.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "Which operations are categorized under dyadic updating operation, such as Append:sequence? | Is Append:sequence classified as a specialized form of dyadic updating operation? | What are the broader classes that encompass Append:sequence? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AttributeFunctionOverride:class\nDescription: AttributeFunctionOverride:class is defined as a subclass of dyadic updating operation. This indicates that any member of AttributeFunctionOverride:class represents a special kind of operation within the scope of dyadic updating, where typically two entities are involved in an updating process. Without further restriction or description, all instances of this class inherit the structural and semantic characteristics of dyadic updating operations.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "Which types exhibit a more specific scope than dyadic updating operation, such as AttributeFunctionOverride:class? | What overarching types does AttributeFunctionOverride:class inherit from within the ontology? | Does AttributeFunctionOverride:class fall under the broader category of dyadic updating operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AttributeReplace:class\nDescription: AttributeReplace:class is defined as a subclass of dyadic updating operation. This means it represents a type of operation that updates data by replacing an attribute, and, as a dyadic operation, it involves two input entities. No further restrictions, disjointness, or property constraints are specified in the axiom, so its primary characterization is as a specialized updating action within the context of dyadic operations.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "Which concepts are more specific forms of dyadic updating operation, such as AttributeReplace:class? | What are the higher-level classes that encompass AttributeReplace:class? | Is AttributeReplace:class categorized under the broader group of dyadic updating operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FieldReplace:record\nDescription: FieldReplace:record is defined as a subclass of dyadic updating operation. This means that it represents a specific type of updating operation involving two arguments or entities. As a subclass, FieldReplace:record inherits all the general characteristics of dyadic updating operations and is further specialized to represent operations where a field in a record is replaced or updated. No additional restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "What higher-level operation types encompass FieldReplace:record? | Is FieldReplace:record categorized under the group of dyadic updating operations? | Which dyadic updating operation subclasses include FieldReplace:record? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: difference operation\nDescription: difference operation is defined as a subclass of dyadic operation, indicating it is a mathematical operation that requires exactly two operands. As a specific type of dyadic operation, the difference operation computes the result by evaluating the \"difference\" between its two input elements, distinguishing it from other dyadic operations such as sum or product.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Which operations are classified as more specific types under dyadic operations, including difference operations? | Does the class of difference operations fall within the broader group of dyadic operations? | What broader operation categories encompass the difference operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic select operation\nDescription: dyadic select operation is defined as a subclass of dyadic operation, signifying that it is a binary operation acting on two operands. No additional constraints or distinguishing characteristics are specified beyond its membership in the broader class of dyadic operations.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Is every dyadic select operation also classified as a dyadic operation? | Which specialized operations fall under the category of dyadic operation, including dyadic select operation? | To what broader classes does dyadic select operation belong within the operation hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic aritmetic operation\nDescription: dyadic arithmetic operation is defined as a subclass of dyadic operation, indicating that every dyadic arithmetic operation involves exactly two inputs (operands). This class specifically focuses on operations in the arithmetic domain (such as addition, subtraction, multiplication, or division), extending the more general concept of dyadic operations by emphasizing their application to arithmetic computations.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Is every dyadic arithmetic operation classified under dyadic operation? | Which broader classes include dyadic arithmetic operation within their hierarchy? | What other subclasses fall under dyadic operation alongside dyadic arithmetic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic logical operation\nDescription: dyadic logical operation is defined as a subclass of dyadic operation, meaning it is an operation that takes exactly two inputs. This class specifically refers to logical operations (such as AND, OR, XOR) applied to two operands, distinguishing it from other kinds of dyadic operations that may not be logical in nature.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Does every dyadic logical operation fall under the category of dyadic operation? | Which specific operations are classified as subclasses of dyadic operation, including dyadic logical operation? | What are the broader categories that encompass dyadic logical operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic set operation\nDescription: dyadic set operation is defined as a subclass of dyadic operation. This class encompasses operations that act on two sets as inputs. Members of this class must satisfy all properties of dyadic operations, specifically within the context of set-theoretic functions or relations.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Which specific types fall under the class dyadic operation, such as dyadic set operation? | What categories are broader than dyadic set operation, including dyadic operation? | Is every dyadic set operation also classified as a dyadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic updating operation\nDescription: dyadic updating operation is defined as a subclass of dyadic operation, indicating that it involves two operands. While specific characteristics are not provided, this class inherits all properties of dyadic operations, typically meaning it operates on pairs of entities or values.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Under which more general operation classifications does dyadic updating operation fall? | Which operations are encompassed by the broader class of dyadic operation, including dyadic updating operation? | Does dyadic updating operation represent a specialized form of dyadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic comparison operation\nDescription: dyadic comparison operation is a subclass of dyadic operation. This class encompasses operations that involve two arguments and perform a comparative evaluation between them. Members of this class, as dyadic operations, specifically relate to comparison tasks (such as \"greater than\", \"less than\", or \"equal to\") applied to pairs of inputs.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Which broader categories encompass dyadic comparison operation? | Are all dyadic comparison operations types of dyadic operations? | What specific operations are classified under dyadic operation, including dyadic comparison operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic retrieve operation\nDescription: dyadic retrieve operation is defined as a subclass of dyadic operation, indicating it is an operation that acts on exactly two inputs or entities. No further distinguishing axioms or properties are specified, so its classification relies solely on this generalization.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "What broader classes does dyadic retrieve operation belong to within the operation hierarchy? | Which types of operations are more specific than dyadic operation, such as dyadic retrieve operation? | Does every dyadic retrieve operation fall under the category of dyadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: equal operation\nDescription: equal operation is defined as a subclass of dyadic comparison operation. This class represents operations that perform a comparison between two entities and evaluate whether they are equal. As a refinement of dyadic comparison operation, equal operation specifically focuses on checking and indicating equality between two operands or values.\nAxiom: {'subClassOf': ['dyadic comparison operation']}\nGenerated CQs:", "output": "What operations fall under the category of dyadic comparison operation, such as equal operation? | Is equal operation classified as a type of dyadic comparison operation? | To which broader operational classes does equal operation belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: in order operation\nDescription: in order operation is defined as a subclass of dyadic comparison operation, indicating that it represents a specific type of comparison involving two entities. As a specialized comparison operation, in order operation inherits all characteristics of dyadic comparison operations but further constrains its meaning to those operations that assess or evaluate entities with respect to their sequence or ordering.\nAxiom: {'subClassOf': ['dyadic comparison operation']}\nGenerated CQs:", "output": "Which operations are recognized as specializations of dyadic comparison operation, such as in order operation? | What broader operation types encompass in order operation? | Does in order operation fall under the category of dyadic comparison operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: isEmpty operation\nDescription: isEmpty operation is defined as a subclass of boolean operation. This indicates that it represents a type of boolean operation, specifically one that evaluates a condition and returns a boolean value. No further restrictions or characteristics are provided by the axiom, so its primary purpose within the ontology is to serve as a specialized form of boolean operation.\nAxiom: {'subClassOf': ['boolean operation']}\nGenerated CQs:", "output": "Are all isEmpty operations classified under the category of boolean operations? | Which operations are considered specializations of boolean operation, such as isEmpty operation? | What broader operation categories encompass isEmpty operation within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: nonNegative operation\nDescription: nonNegative operation is a subclass of boolean operation. Any instance of nonNegative operation is, by definition, a type of boolean operation, inheriting all related properties and constraints. This classification indicates that nonNegative operation participates in logical or truth-value manipulations typical of boolean operations, but may have additional distinguishing characteristics defined outside of the given axioms.\nAxiom: {'subClassOf': ['boolean operation']}\nGenerated CQs:", "output": "Which operations are more specific instances of boolean operation, such as nonNegative operation? | To which broader operation types does nonNegative operation belong? | Is every nonNegative operation encompassed within the category of boolean operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SetOf:set\nDescription: SetOf:set is defined as a subclass of boolean operation, indicating that it represents a form of operation consistent with the principles of Boolean logic. Members of this class inherit properties and constraints applicable to boolean operations. No further description is provided, so the class is formally understood as a type of boolean operation.\nAxiom: {'subClassOf': ['boolean operation']}\nGenerated CQs:", "output": "Does SetOf:set represent a subclass within the domain of boolean operation? | Which boolean operations include SetOf:set as a more specific category? | What are the more general classes that SetOf:set belongs to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: negate operation\nDescription: negate operation is defined as a subclass of monadic operation, meaning it represents an operation that acts on a single operand. As a monadic operation, negate operation typically involves transforming or inverting the value of its sole input.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Which types of operations are classified as specializations of monadic operation, including negate operation? | To which higher-level operation classes does negate operation pertain? | Is every negate operation encompassed within the category of monadic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: promote operation\nDescription: promote operation is classified as a subclass of monadic operation. This indicates that promote operation is an operation involving a single operand or argument, inheriting all characteristics associated with monadic operations. No further distinguishing features or constraints are specified beyond its classification within this hierarchy.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What specific operations are subclasses of monadic operation, including promote operation? | Which broader categories encompass promote operation? | Does promote operation fall under the general category of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: serialize operation\nDescription: serialize operation is defined as a subclass of monadic operation. This means every serialize operation is, by definition, a type of monadic operation, inheriting its general behaviors and properties. There are no additional restrictions or relationships specified.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What specific types of monadic operation include serialize operation as a subclass? | Which general operation categories encompass serialize operation? | Is serialize operation classified under the broader category of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: successor operation\nDescription: successor operation is defined as a subclass of monadic operation. This means that every successor operation is a type of operation that acts on a single argument. No additional restrictions or characteristics are specified, so the class inherits all properties of monadic operations.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What higher-level operation categories does successor operation belong to? | Which specific operations fall under the more general category of monadic operation, such as successor operation? | Is successor operation included in the set of operations classified as monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cast:choice\nDescription: Cast:choice is defined as a subclass of monadic operation, indicating that it inherits all characteristics of monadic operations. This classification ensures that any instance of Cast:choice is considered a specific type of monadic operation, although further distinguishing properties or restrictions are not specified in the given axioms or description.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "To which more general operation classes does Cast:choice belong? | Which operations are classified as specializations of monadic operation, such as Cast:choice? | Does Cast:choice fall under the category of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Dereference:pointer\nDescription: Dereference:pointer is defined as a subclass of monadic operation. This means it represents a specific kind of monadic operation, typically referring to an action that takes a single operand and retrieves the value or object being pointed to by a pointer. Individuals of this class inherently possess the characteristics and constraints of monadic operations.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What general operation categories encompass Dereference:pointer? | Is Dereference:pointer categorized as a type of monadic operation? | Which specific operations are subclasses of monadic operation, such as Dereference:pointer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Discriminant:choice\nDescription: Discriminant:choice is defined as a subclass of monadic operation, indicating that it represents a specific type of operation that acts upon a single operand or input. No further restrictions or disjointness axioms are specified, so it inherits all characteristics of monadic operation while introducing the notion of 'choice' as its distinguishing feature.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Which concepts are more specifically classified than monadic operation, for example, Discriminant:choice? | Is Discriminant:choice categorized under the broader concept of monadic operation? | To what higher-level operational categories does Discriminant:choice belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Extend:time&date\nDescription: Extend:time&date is defined as a subclass of monadic operation, indicating that it represents a single-argument operation within the ontology. No further restrictions or characteristics are specified beyond its placement in the class hierarchy as a specialized form of monadic operation.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What broader category does Extend:time&date belong to within the classification of operations? | Which operations are included as subclasses under monadic operation, such as Extend:time&date? | Is Extend:time&date a specific type of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Invoke:procedure\nDescription: Invoke:procedure is defined as a subclass of monadic operation, indicating that it represents a specific type of operation with a single argument or operand. This classification situates Invoke:procedure within the hierarchy of operations, emphasizing its functionality as a specialized, unary process. No further restrictions or disjoint relationships are specified.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What specific operations are included as subclasses of monadic operation, such as Invoke:procedure? | Is Invoke:procedure categorized under the broader class of monadic operation? | Which more general concepts is Invoke:procedure classified under within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Not:boolean\nDescription: Not:boolean is defined as a subclass of monadic operation, indicating that it is a single-argument logical operation. Members of this class represent logical operations that act on one boolean input to produce a boolean output, specifically performing logical negation.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What are the more general operation types that encompass Not:boolean? | Does Not:boolean fall under the category of monadic operation? | Which operations are classified as subclasses of monadic operation, including Not:boolean? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: monadic aritmetic operation\nDescription: monadic arithmetic operation is defined as a subclass of monadic operation. This means any instance of this class is a monadic operation (an operation with a single operand) specifically within the domain of arithmetic. It inherits all characteristics of monadic operations, restricted to those that perform arithmetic functions. No additional distinguishing axioms or constraints are currently specified.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Is monadic arithmetic operation a specific kind of monadic operation? | Which operations are direct specializations of monadic operation, such as monadic arithmetic operation? | To which broader categories does monadic arithmetic operation belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: monadic retrive operation\nDescription: monadic retrieve operation is defined as a subclass of monadic operation. This means every monadic retrieve operation is a type of monadic operation, inheriting all its characteristics. No further property or restriction axioms are specified, so its definition is limited to this hierarchical relationship.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Which specific operations are encompassed by the category monadic operation, such as monadic retrive operation? | Is monadic retrive operation classified within the broader group of monadic operation? | What more general types does monadic retrive operation fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: map operation\nDescription: map operation is defined as a subclass of monadic operation. This indicates that every map operation is itself a type of monadic operation, inheriting its general properties. The map operation typically represents an action that applies a given function to each element within a structure (such as a list, set, or collection), producing a new structure of the same form with the results. No additional constraints or disjointness axioms are specified.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What more general types include map operation as a member within their hierarchy? | Does map operation fall under the category of monadic operation? | Which operations are classified as specializations of monadic operation, such as map operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boolean operation\nDescription: boolean operation is defined as a subclass of monadic operation. This indicates that every boolean operation is a kind of monadic operation, typically involving a single argument and producing a boolean output (true or false). The class encompasses operations that act on one operand and yield a binary (boolean) result.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Into which broader operation classes does boolean operation fall? | Which operation types are defined as more specific forms within monadic operation, such as boolean operation? | Is every boolean operation classified as a type of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: reciprocial operation\nDescription: reciprocal operation is formally defined as a subclass of monadic arithmetic operation, meaning it is an arithmetic operation that acts on a single operand. This class captures operations whose primary purpose is to return the multiplicative inverse (reciprocal) of their input value.\nAxiom: {'subClassOf': ['monadic aritmetic operation']}\nGenerated CQs:", "output": "Is every reciprocial operation classified under monadic aritmetic operation? | What types of operations are subsumed by monadic aritmetic operation, specifically including reciprocial operation? | Which broader arithmetic operation categories encompass reciprocial operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: round operation\nDescription: round operation is defined as a subclass of monadic arithmetic operation. This means every round operation acts on a single numerical input to produce its output, characterizing it as a unary arithmetic process, such as rounding a number to the nearest integer.\nAxiom: {'subClassOf': ['monadic aritmetic operation']}\nGenerated CQs:", "output": "Is round operation categorized as a type of monadic aritmetic operation? | To which broader operation classes does round operation conceptually relate? | Which operations are classified under monadic aritmetic operation, including round operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SquareRoot:complex\nDescription: SquareRoot:complex is defined as a subclass of monadic arithmetic operation, indicating that it represents an arithmetic operation involving only one operand (monadic) in the context of complex numbers. This class formalizes the concept of computing the square root specifically within the domain of complex arithmetic.\nAxiom: {'subClassOf': ['monadic aritmetic operation']}\nGenerated CQs:", "output": "Which operations are subclasses of monadic aritmetic operation, such as SquareRoot:complex? | Is SquareRoot:complex classified as a specific kind of monadic aritmetic operation? | What more general categories encompass SquareRoot:complex in the context of arithmetic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: monadic select operation\nDescription: monadic select operation is defined as a subclass of monadic retrieve operation. This means every monadic select operation is a type of monadic retrieve operation, inheriting its essential characteristics. No additional property restrictions or disjointness constraints are specified; thus, its definition is strictly as a specialized form of monadic retrieve operation with no further distinguishing axioms.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "To which parent operation class does monadic select operation belong? | Which operations fall under the specialization of monadic retrive operation, such as monadic select operation? | Is monadic select operation categorized as a kind of monadic retrive operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AttributeFunctionInvocation:class\nDescription: AttributeFunctionInvocation:class is defined as a subclass of monadic retrieve operation. This indicates that any instance of AttributeFunctionInvocation:class inherits the characteristics of a monadic retrieve operation, meaning it represents an operation that retrieves a value based on a single operand or argument. The class is intended to capture invocations related to retrieving attributes in a functional, monadic manner.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "Is AttributeFunctionInvocation:class classified under the general category of monadic retrieve operation? | Which specialized forms of monadic retrive operation exist, including AttributeFunctionInvocation:class? | What broader operation categories encompass AttributeFunctionInvocation:class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AttributeSelect:class\nDescription: AttributeSelect:class is defined as a subclass of monadic retrieve operation. This means that any instance of AttributeSelect:class represents a specific type of retrieval operation that acts on a single operand to extract or select an attribute. By inheriting from monadic retrieve operation, AttributeSelect:class is characterized by supporting retrieval actions that involve one input and are focused on obtaining attribute-level data.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "Which operations encompass AttributeSelect:class as a specific type within monadic retrieve operations? | Is AttributeSelect:class classified under monadic retrieve operation? | To what broader categories related to retrieval does AttributeSelect:class belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FieldSelect:record\nDescription: FieldSelect:record is defined as a subclass of monadic retrieve operation, meaning it represents a specialized form of retrieval operation within a monadic (single-argument or single-result) context. No additional restrictions or properties are specified, so any instance of FieldSelect:record is also an instance of monadic retrieve operation, inheriting all its characteristics.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "What more general operations does FieldSelect:record inherit properties from? | Is FieldSelect:record classified as a specialized form of monadic retrive operation? | Which monadic retrive operation subclasses encompass FieldSelect:record? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Head:sequence\nDescription: Head:sequence is defined as a subclass of monadic retrieve operation. This means that every instance of Head:sequence is also considered a monadic retrieve operation, inheriting its fundamental characteristics and constraints. The class does not specify additional axioms or restrictions beyond this hierarchical relationship.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "Does Head:sequence fall under the broader classification of monadic retrive operation? | Which operations are considered more specific variants of monadic retrive operation, such as Head:sequence? | To which general operational categories does Head:sequence belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Tail:sequence\nDescription: Tail:sequence is defined as a subclass of monadic retrieve operation. This classification means that any individual instance of Tail:sequence is also a type of monadic retrieve operation, inheriting its foundational characteristics. In the absence of further description or additional axioms, Tail:sequence is interpreted as a specific kind of retrieval operation within a monadic context, implying it operates under the rules and structure of monads—commonly used in functional programming and computational logic for chaining operations.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "What broader operation categories include Tail:sequence? | Does Tail:sequence fall under the category of monadic retrive operation? | Which operations are considered more specific forms of monadic retrive operation, such as Tail:sequence? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: countable\nDescription: countable is defined as a subclass of cardinality, indicating that it represents a specific type of cardinality. Members of the countable class are characterized by having a cardinality that can be matched with the set of natural numbers, distinguishing them from other forms of cardinality.\nAxiom: {'subClassOf': ['cardinality']}\nGenerated CQs:", "output": "Is every countable entity also classified under cardinality? | Which types are included under the broader category of cardinality, including countable? | To which general concepts does the class countable belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: finite\nDescription: finite is a subclass of cardinality, indicating that it represents the concept of cardinalities that are limited or bounded. Any individual classified as finite is, by definition, also a cardinality but with the additional constraint that its size is not infinite.\nAxiom: {'subClassOf': ['cardinality']}\nGenerated CQs:", "output": "Is finite categorized under the broader concept of cardinality? | What are the more general classes associated with finite? | Which subtypes are encompassed by cardinality, including finite? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: uncountable\nDescription: uncountable is defined as a subclass of cardinality, indicating that it represents a specific type of cardinality. Members of the uncountable class are those cardinalities that cannot be placed into a one-to-one correspondence with the natural numbers, distinguishing them from countable cardinalities.\nAxiom: {'subClassOf': ['cardinality']}\nGenerated CQs:", "output": "Does uncountable represent a more specific form under the general concept of cardinality? | Into which broader classes does uncountable fall within the cardinality hierarchy? | What types of cardinality include uncountable as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bounded below\nDescription: bounded below is a subclass of bounded, representing entities that possess the property of being bounded in a particular way—specifically, from below. Any member of bounded below is, by definition, also a member of bounded.\nAxiom: {'subClassOf': ['bounded']}\nGenerated CQs:", "output": "Which concepts are more specific than bounded, such as bounded below? | Is every instance of bounded below also an instance of bounded? | What broader categories does bounded below belong to within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unbounded below\nDescription: unbounded below is defined as a subclass of unbounded, meaning every instance of unbounded below is also an instance of unbounded. This class represents entities that specifically possess the characteristic of being unbounded on their lower side or extent, while inheriting all properties and restrictions from the broader unbounded class.\nAxiom: {'subClassOf': ['unbounded']}\nGenerated CQs:", "output": "What specific concepts are considered subclasses of unbounded, such as unbounded below? | Is unbounded a broader class that encompasses unbounded below? | Which higher-level categories include unbounded below? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unbounded\nDescription: unbounded is defined as a subclass of boundedness. This indicates that unbounded is a specific type or form of boundedness, and any instance of unbounded is also considered an instance of boundedness. No additional property restrictions or disjointness axioms are specified, so the class is distinguished solely by its hierarchical relation.\nAxiom: {'subClassOf': ['boundedness']}\nGenerated CQs:", "output": "Which subclasses fall under the category of boundedness, including unbounded? | To which more general categories does unbounded belong? | Is unbounded a specialized concept within the broader class of boundedness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: exact\nDescription: exact is defined as a subclass of exactness, indicating that any instance of exact exhibits all characteristics associated with exactness. No additional constraints or distinguishing axioms are specified for this class.\nAxiom: {'subClassOf': ['exactness']}\nGenerated CQs:", "output": "Which classes are subsumed by exactness, including exact? | Under which broader categories does exact fall within the ontology? | What is the hierarchical connection between exact and exactness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-numeric\nDescription: non-numeric is defined as a subclass of numericalness, indicating that every instance of non-numeric falls under the broader concept of numericalness. This class is intended to capture entities that are related to numericalness but are explicitly characterized by the absence of numeric value or representation.\nAxiom: {'subClassOf': ['numericalness']}\nGenerated CQs:", "output": "Does non-numeric fall under the broader classification of numericalness? | What are the broader categories that non-numeric is a part of within this ontology? | Which subclasses does numericalness encompass, specifically including non-numeric? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-ordered\nDescription: non-ordered is defined as a subclass of order. This means that every instance of non-ordered is also an instance of order, but represents a specialized form or category within the broader concept of order. No additional property restrictions or disjointness axioms are specified, so the class is distinguished solely by its hierarchical position as a subclass.\nAxiom: {'subClassOf': ['order']}\nGenerated CQs:", "output": "Which broader types encompass non-ordered within the ontology structure? | What categories fall under order as subclasses, including non-ordered? | Can non-ordered be classified under the concept of order? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:complex\nDescription: Add:complex is defined as a subclass of add operation, indicating that it represents a specific form of addition within the broader category of add operations. This formalization establishes that every instance of add:complex is also inherently an add operation, possibly specialized for use with complex numbers or structures, depending on further specification.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "output": "Which types of add operation include Add:complex as a specialization? | What broader classes encompass Add:complex within the ontology? | Does Add:complex fall under the category of add operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:integer\nDescription: Add:integer is defined as a subclass of add operation, indicating that it specifically represents addition operations where the operands are integers. Any individual that is an instance of Add:integer is inherently an add operation, but specialized for use with integer values.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "output": "Which broader groups encompass Add:integer within the classification hierarchy? | What operations are more specific than add operation, including Add:integer? | Is Add:integer categorized under add operation in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:rational\nDescription: Add:rational is defined as a subclass of add operation, indicating that it represents a specialized type of addition focused on rational numbers. This class inherits all characteristics of add operations and is formally distinguished as pertaining to the addition of rational values.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "output": "What kinds of add operation exist as subclasses, such as Add:rational? | Is add operation a broader class encompassing Add:rational? | Which general classification does Add:rational fall under in the context of operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:real\nDescription: Add:real is defined as a subclass of add operation. This means that every instance of Add:real is an add operation, specifically focused on real numbers. The class inherits all the characteristics of generic add operations, but may specify additional constraints or behaviors relevant to addition in the domain of real numbers. No further restrictions or disjointness axioms are asserted.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "output": "What operations fall under the subclass Add:real within add operation? | Is Add:real categorized as a type of add operation? | Which parent concepts encompass Add:real? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:scaled\nDescription: scaled is defined as a subclass of add operation. This means that any scaled operation is recognized as a specific type of add operation, inheriting all characteristics of add operations while potentially introducing its own specialized behavior or constraints. No further disjointness or property restrictions are specified for this class.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "output": "Is add:scaled categorized as a specialized form of add operation? | What broader operations include add:scaled as a member? | Which subtypes are encompassed by add operation, including add:scaled? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Delete:table\nDescription: Delete:table is defined as a subclass of delete operation. This means that every instance of Delete:table is a specific type of delete operation, inheriting all characteristics of delete operations, and representing deletion actions applied at the table level.\nAxiom: {'subClassOf': ['delete operation']}\nGenerated CQs:", "output": "Is Delete:table categorized under delete operation? | Which operations are classified as subtypes of delete operation, such as Delete:table? | What broader operation category encompasses Delete:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Difference:time&date\nDescription: Difference:time&date is defined as a subclass of difference operation. This class represents operations specifically focused on calculating the difference between temporal values such as times or dates, distinguishing it from other types of difference operations. Members of this class inherit all properties and constraints associated with difference operations, but are restricted to application within time and date contexts.\nAxiom: {'subClassOf': ['difference operation']}\nGenerated CQs:", "output": "Is Difference:time&date categorized as a type of difference operation? | Which higher-level operations does Difference:time&date fall under within the ontology? | What difference operations have Difference:time&date as a more specific subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Select:table\nDescription: Select:table is defined as a subclass of dyadic select operation, indicating that it represents a specific type of select operation involving two inputs or components. This class inherits all the characteristics and constraints of dyadic select operations, and any instance of Select:table is, by definition, also an instance of a dyadic select operation. No additional restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['dyadic select operation']}\nGenerated CQs:", "output": "Which higher-level categories does Select:table fall under within the ontology? | Is Select:table classified as a type of dyadic select operation? | What are the specific select operations categorized under dyadic select operation, such as Select:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:array\nDescription: Equal:array is defined as a subclass of equal operation. This means Equal:array represents a specific type of equality operation, typically involving arrays, and inherits all the general characteristics of equal operations. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which operations are specified as subclasses within equal operation? | Is Equal:array classified under equal operation in the ontology? | What broader operation categories include Equal:array as a specialized form? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:bag\nDescription: Equal:bag is defined as a subclass of equal operation, indicating that it represents a specific type of equality evaluation or operation. Any instance of Equal:bag inherits all characteristics of equal operation, positioning it within the broader context of equality comparisons. There are currently no additional restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which higher-level operation categories encompass Equal:bag? | Is Equal:bag classified under the category of equal operation? | What specific operations are subsumed by equal operation, including Equal:bag? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:boolean\nDescription: Equal:boolean is a subclass of equal operation, representing operations that specifically check or enforce equality between two boolean values. Any individual of this class is an instance of an equal operation, with its domain restricted to boolean-type operands.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which concepts are classified as more specific versions under equal operation, including Equal:boolean? | Into which broader categories can Equal:boolean be grouped? | Does Equal:boolean represent a specialized type of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:character\nDescription: Equal:character is defined as a subclass of equal operation. This means every instance of Equal:character represents a specific kind of equality operation, likely focused on comparing characters. Since it inherits all characteristics of equal operation, Equal:character is used where character equality checks are required.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Is Equal:character classified as a kind of equal operation? | What are the parent classes for Equal:character within the ontology? | Which specific operations fall under the category of equal operation, such as Equal:character? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:choice\nDescription: Equal:choice is a subclass of equal operation, indicating that each instance of Equal:choice is a specialized form of equal operation. No additional restrictions, disjointness, or property constraints are defined for this class, so its characterization is derived solely from its position in the class hierarchy.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Is Equal:choice classified under the broader category of equal operation? | What more general categories encompass Equal:choice within the ontology? | Which operations are considered specializations of equal operation, including Equal:choice? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:class\nDescription: Equal:class is defined as a subclass of equal operation, indicating that every instance of Equal:class is a specific type of equal operation. This formalization ensures that any individual classified as Equal:class must also satisfy the properties and constraints of equal operations within the ontology.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which specific types are classified beneath equal operation, including Equal:class? | Is Equal:class categorized under equal operation? | What operations are broader in scope than Equal:class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:complex\nDescription: Equal:complex is defined as a subclass of equal operation. This means that every instance classified as Equal:complex is, by definition, also an instance of equal operation. No further distinguishing axioms or restrictions are specified for this class beyond its hierarchical placement.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Is Equal:complex categorized under equal operation? | Which equal operations have more specific types such as Equal:complex? | What broader operation classes encapsulate Equal:complex? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:enumerated\nDescription: Equal:enumerated is defined as a subclass of equal operation. This indicates that every instance of Equal:enumerated represents a specific kind of equal operation, inheriting all characteristics of equal operation while potentially introducing further constraints or properties relevant to enumerated equality.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "To what more general operation classes does Equal:enumerated belong? | Does Equal:enumerated represent a specialized form of equal operation? | Which operations are classified as subtypes under equal operation, including Equal:enumerated? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:integer\nDescription: Equal:integer is defined as a subclass of equal operation, indicating that it represents a specialized type of equality operation specifically applied to integers. Any instance of Equal:integer is inherently an equal operation, but it is characterized by its restriction to operands of the integer type.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which subclasses are encompassed by equal operation, such as Equal:integer? | What more general classes include Equal:integer within their hierarchy? | Is Equal:integer categorized under the broader class of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:ordinal\nDescription: Equal:ordinal is defined as a subclass of equal operation, indicating that it specifically represents equality operations within the context of ordinal numbers or positions. Instances of this class inherit all properties of equal operations but are semantically restricted to comparisons involving ordinality.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "What parent operation categories does Equal:ordinal pertain to? | Does Equal:ordinal fall under the category of equal operation? | Which specific operations are specialized forms of equal operation, such as Equal:ordinal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:pointer\nDescription: Equal:pointer is defined as a subclass of equal operation. This means it inherits all characteristics of an equal operation and represents a specific form or type of equality operation within the ontology. There are no further restrictions or differentiating axioms provided, so it can be broadly understood as any equality operation that is categorized or implemented as a \"pointer.\"\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "What specific operations are subclasses of equal operation, including Equal:pointer? | To which higher-level operation types does Equal:pointer belong? | Does Equal:pointer fall under the category of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:procedure\nDescription: Equal:procedure is defined as a subclass of equal operation, indicating that it represents a specific type of equal operation. All instances of Equal:procedure inherit the characteristics and constraints of equal operations. No additional restrictions or properties are specified beyond this subclass relationship.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "What broader classes encompass Equal:procedure within the hierarchy? | Which equal operations have more specific subclasses such as Equal:procedure? | Does Equal:procedure represent a specific type of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:rational\nDescription: Equal:rational is defined as a subclass of equal operation. This means every instance of Equal:rational is also an instance of equal operation, inheriting its properties and characteristics. This class specifically represents the application of equality within the context of rational values, distinguishing it from other types of equal operations.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which operations are categorized as more specific types within equal operation, such as Equal:rational? | To which more general operation classes does Equal:rational belong? | Does Equal:rational fall under the broader concept of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:real\nDescription: Equal:real is defined as a subclass of equal operation, representing equality operations that specifically pertain to real numbers. Any instance of Equal:real is an equal operation, and this class captures the concept of evaluating or asserting equality within the domain of real numbers.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which specific equal operations include Equal:real as a subclass? | What are the broader categories under which Equal:real is organized? | Is Equal:real classified as a kind of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:record\nDescription: Equal:record is defined as a subclass of equal operation, indicating that it represents a specialized form of comparison operation focused on evaluating equality. All instances of Equal:record inherit the characteristics and constraints associated with equal operations.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which entities are direct specializations of equal operation, such as Equal:record? | Does Equal:record fall under the broader class of equal operation? | What general concepts encompass Equal:record in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:scaled\nDescription: Equal:scaled is defined as a subclass of equal operation, meaning it inherits all characteristics of equal operations. This class represents a specific type of equal operation, but is further specialized under the general category of equality operations. There are no additional restrictions or disjointness axioms specified.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which operations are included as subclasses within equal operation, such as Equal:scaled? | To what broader operation categories does Equal:scaled belong according to the ontology? | Is Equal:scaled categorized under equal operation in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:sequence\nDescription: Equal:sequence is defined as a subclass of equal operation, indicating that it represents a specific type of equality operation. Any instance of Equal:sequence is thus an equal operation, inheriting its general characteristics and semantic constraints. No additional restrictions or disjointness axioms are specified, so its primary distinguishing feature is its specialization within the equal operation hierarchy.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which specific operations are categorized as equal operations, such as Equal:sequence? | Does Equal:sequence fall under the category of equal operation? | What broader categories include Equal:sequence as a more specific subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:set\nDescription: Equal:set is defined as a subclass of equal operation. This means that every instance of Equal:set is a type of equal operation, inheriting all characteristics and properties of equal operations. No further constraints or disjointness are specified, so its primary ontological role is to represent a specific kind or subset of equal operations.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which operations are broader in scope than Equal:set under equal operation? | Is Equal:set classified as a subclass within equal operation? | What specific subcategories are encompassed by equal operation, including Equal:set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:discrete\nDescription: Equal:discrete is a subclass of equal operation, representing a specific type of equality operation within the ontology. Any instance classified as Equal:discrete inherently possesses all characteristics of equal operation, but denotes a discrete (distinct and separate) form of equality as opposed to potentially other forms covered under the broader parent class.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Is Equal:discrete classified under the general category of equal operation? | What are the broader operation categories encompassing Equal:discrete? | Which operations are considered specific types within equal operation, such as Equal:discrete? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:table\nDescription: Equal:table is defined as a subclass of equal operation, indicating that it represents a specific type of equal operation within the ontology. There are no further restrictions or disjointness axioms provided, so its characteristics are inherited entirely from equal operation. This formalization ensures that every instance of Equal:table is also considered an instance of equal operation.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Does Equal:table fall under the category of equal operation? | What overarching categories does Equal:table belong to within the ontology? | Which operations are subcategories of equal operation, specifically including Equal:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:time&date\nDescription: Equal:time&date is defined as a subclass of equal operation. This class represents equality operations specifically applied to time and date values, inheriting all characteristics of general equal operations while restricting its domain to temporal data. There are no additional property restrictions or disjointness axioms specified.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Is equal:time&date classified as a type of equal operation? | Which specific operations are categorized under equal operation, such as equal:time&date? | What broader operational categories encompass equal:time&date? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:void\nDescription: Equal:void is defined as a subclass of equal operation, indicating that it represents a specific type of equality operation within the ontology. Instances of Equal:void inherit all characteristics of equal operation but are further specialized to reflect this subclass distinction. No additional constraints or property restrictions are present.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which concepts are included as narrower types under equal operation, such as Equal:void? | Does Equal:void represent a specialized form of equal operation? | Of which broader categories is Equal:void a member in relation to equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:enumerated\nDescription: InOrder:enumerated is defined as a subclass of in order operation. This indicates that it inherits all characteristics of in order operations, and further restricts its members to those specifically classified as InOrder:enumerated. No additional disjointness or property restrictions are specified.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Which specialized operations are classified as in order operation, including InOrder:enumerated? | Does InOrder:enumerated fall under the category of in order operation? | What broader operational classifications include InOrder:enumerated as a subtype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:interger\nDescription: InOrder:integer is defined as a subclass of in order operation. This means every instance of InOrder:integer is also an instance of in order operation, inheriting its properties and characteristics. No additional restrictions or properties are specified.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Does InOrder:integer represent a specific kind of in order operation? | What broader categories does InOrder:integer fall under within in order operation? | Which in order operation subclasses include InOrder:integer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:ordinal\nDescription: InOrder:ordinal is defined as a subclass of in order operation, meaning every instance of InOrder:ordinal is also an instance of in order operation. This class captures operations that are performed in a specific, sequential order, consistent with the broader concept of ordered computational procedures.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Is in order operation a broader category that includes InOrder:ordinal as a specific type? | What are all the subclasses under in order operation, and does that list include InOrder:ordinal? | Which general operations is InOrder:ordinal classified under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:rational\nDescription: InOrder:rational is defined as a subclass of in order operation. This means every instance of InOrder:rational is also an instance of in order operation, inheriting its essential properties and behavioral constraints. There are currently no additional property restrictions or disjointness axioms specified for this class, so its definition is primarily characterized by its position within the hierarchy of ordered operations.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Which general operations encompass InOrder:rational as a subclass? | Is InOrder:rational categorized as a type of in order operation? | What in order operations have InOrder:rational as a more specific instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:real\nDescription: InOrder:real is defined as a subclass of in order operation. This means that every instance of InOrder:real is necessarily an in order operation, inheriting all characteristics and constraints of its parent class. No further distinguishing features or restrictions are specified in the current axiom.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Is InOrder:real classified under in order operation? | What specific types are encompassed by in order operation, including InOrder:real? | Which broader categories subsume InOrder:real in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:scaled\nDescription: InOrder:scaled is defined as a subclass of in order operation, indicating that it represents a specialized type of in order operation. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Which upper-level operations encompass InOrder:scaled? | Does InOrder:scaled fall under the category of in order operation? | What are the specific subtypes classified under in order operation, such as InOrder:scaled? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:time&date\nDescription: InOrder:time&date is defined as a subclass of in order operation. This means that every instance of InOrder:time&date is also an instance of in order operation, inheriting all its characteristics and constraints. The class represents a specific type of in order operation that is distinguished within the ontology for handling operations related to time and date.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Is InOrder:time&date recognized as a specific form of in order operation? | Which in order operations include more specialized types such as InOrder:time&date? | To what higher-level categories does InOrder:time&date belong within the hierarchy of in order operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Insert:table\nDescription: Insert:table is defined as a subclass of insert operation, representing a specialized form of data insertion that specifically targets tables. Any individual of Insert:table is by definition an insert operation, but this class serves to distinguish insert actions that are restricted to table-type data structures.\nAxiom: {'subClassOf': ['insert operation']}\nGenerated CQs:", "output": "What broader categories encompass Insert:table as a member? | Is Insert:table classified as a specific form of insert operation? | Which operations are categorized as specializations of insert operation, including Insert:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:complex\nDescription: Multiply:complex is defined as a subclass of multiply operation, indicating that it represents a specialized form of multiplication specifically applicable to certain contexts (such as complex numbers or more advanced multiplicative structures). As a subclass, all characteristics and constraints of multiply operation apply, while distinguishing multiply:complex as a distinct category within the overall multiplication framework. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "output": "Is multiply:complex classified under multiply operation types? | What operations are considered subclasses of multiply operation? | Which higher-level operation categories encompass multiply:complex? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:integer\nDescription: Multiply:integer is defined as a subclass of multiply operation. This class represents multiplication operations specifically involving integer values, inheriting all properties and constraints of general multiplication operations but restricted to the integer domain.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "output": "Within what more general operation types is Multiply:integer included? | Which specialized operations are considered subclasses of multiply operation, such as Multiply:integer? | Is Multiply:integer classified under the broader category of multiply operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:rational\nDescription: Multiply:rational is a subclass of multiply operation. This class represents multiplication operations where the operands are specifically rational numbers, distinguishing it from multiply operations over other numeric domains.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "output": "What multiply operations encompass multiply:rational as a more specific subcategory? | To which general operation types does multiply:rational belong? | Is multiply:rational included among the operations classified as multiply operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:real\nDescription: Multiply:real is defined as a subclass of multiply operation, indicating that it represents multiplication specifically within the domain of real numbers. Any instance of Multiply:real inherits the characteristics and constraints of the general multiply operation, but is restricted in application to real-valued operands.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "output": "Is Multiply:real categorized as a multiply operation? | Into what broader classes is Multiply:real hierarchically organized? | Which multiply operations encompass Multiply:real as a specialized form? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:scaled\nDescription: Multiply:scaled is defined as a subclass of multiply operation. This indicates that it inherits all characteristics of multiply operations while representing a more specific variant or context of multiplication. No additional restrictions or disjointness axioms are specified. Without a current description, its identity is determined solely by its position in the class hierarchy, denoting a specialized type of multiplication operation.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "output": "Is Multiply:scaled categorized as a type of multiply operation? | Which specific multiply operations include Multiply:scaled as a subclass? | What general multiply operation categories encompass Multiply:scaled? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: And:boolean\nDescription: And:boolean is defined as a subclass of dyadic logical operation, indicating that it is a logical operation involving two operands. This class represents the AND operation, commonly used in logic to yield true only when both input values are true.\nAxiom: {'subClassOf': ['dyadic logical operation']}\nGenerated CQs:", "output": "Which logical operations exist as subclasses of dyadic logical operation, And:boolean among them? | Does And:boolean fall under the classification of dyadic logical operation? | What general categories encompass And:boolean within logical operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Or:boolean\nDescription: Or:boolean is defined as a subclass of dyadic logical operation, representing a logical operation that takes two inputs. It corresponds to the Boolean \"or\" operation, where the result is true if at least one of the inputs is true. Members of this class are restricted to binary (dyadic) logic functions operating under the inclusive disjunction principle.\nAxiom: {'subClassOf': ['dyadic logical operation']}\nGenerated CQs:", "output": "What dyadic logical operations include Or:boolean as a specific type? | Which more general logical operation classes encompass Or:boolean? | Does Or:boolean fall under the general category of dyadic logical operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Fetch:table\nDescription: Fetch:table is defined as a subclass of dyadic retrieve operation, indicating that it represents a specific type of retrieve action that involves two entities. As a specialized dyadic retrieve operation, Fetch:table inherits all the relevant characteristics of such operations within the ontology, distinguishing it from other forms of retrieval actions.\nAxiom: {'subClassOf': ['dyadic retrieve operation']}\nGenerated CQs:", "output": "Is Fetch:table recognized as a specific type of dyadic retrieve operation? | Which broader categories encompass Fetch:table as a member? | What operations are classified under dyadic retrieve operation, including Fetch:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Tag:choice\nDescription: Tag:choice is defined as a subclass of dyadic retrieve operation, indicating that it represents a specific retrieval action involving two inputs or arguments. This class is thus characterized by its relation to operations that retrieve or select information based on two distinct pieces of input, inheriting all properties and restrictions applicable to dyadic retrieve operations.\nAxiom: {'subClassOf': ['dyadic retrieve operation']}\nGenerated CQs:", "output": "To which broader operational category does Tag:choice belong? | Is Tag:choice categorized under dyadic retrieve operation? | Which operations fall under the dyadic retrieve operation class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Intersection:set\nDescription: Intersection:set is defined as a subclass of dyadic set operation, signifying that it operates on two sets. This class represents the set operation that yields a set containing all elements that are common to both input sets. As a dyadic set operation, it explicitly requires two sets as operands and produces a new set consisting only of elements present in both.\nAxiom: {'subClassOf': ['dyadic set operation']}\nGenerated CQs:", "output": "What broader categories encompass Intersection:set within the hierarchy of set operations? | Is Intersection:set classified as a type of dyadic set operation? | Which set operations fall under the category of dyadic set operation, including Intersection:set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Lsln:set\nDescription: Lsln:set is formally defined as a subclass of dyadic set operation, indicating that it represents a type of operation involving two sets. No additional constraints or distinguishing characteristics are specified beyond its categorization under dyadic set operations.\nAxiom: {'subClassOf': ['dyadic set operation']}\nGenerated CQs:", "output": "To which higher-level set operation categories does Lsln:set belong? | Is Lsln:set categorized as a type of dyadic set operation? | What specific set operations are subclasses of dyadic set operation, Lsln:set included? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Subset:set\nDescription: Subset:set is defined as a subclass of dyadic set operation, which means it represents a specific type of set operation that involves two sets. Members of this class pertain to operations that determine whether one set is a subset of another, inheriting all formal properties of dyadic set operations.\nAxiom: {'subClassOf': ['dyadic set operation']}\nGenerated CQs:", "output": "Which specialized operations are contained within the class dyadic set operation? | Is Subset:set categorized under the broader class of dyadic set operation? | Into which higher-level set operation categories does Subset:set fall? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Union:set\nDescription: Union:set is defined as a subclass of dyadic set operation, indicating that it represents a type of set operation involving two sets. Members of this class perform the union operation, which combines all distinct elements from both input sets into a single set. This classification situates Union:set within the broader context of binary operations on sets.\nAxiom: {'subClassOf': ['dyadic set operation']}\nGenerated CQs:", "output": "Which set operations are categorized under dyadic set operation, including Union:set? | Is Union:set classified as a kind of dyadic set operation? | To which upper-level operation types does Union:set belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IsEmpty:bag\nDescription: IsEmpty:bag is defined as a subclass of isEmpty operation. This indicates that IsEmpty:bag represents a specific type of isEmpty operation applied to bags, distinguishing it from other isEmpty operations that may apply to different data structures. Any instance of IsEmpty:bag is necessarily an isEmpty operation, constrained in scope to the context of bags.\nAxiom: {'subClassOf': ['isEmpty operation']}\nGenerated CQs:", "output": "Does IsEmpty:bag fall under the broader classification of isEmpty operation? | What operations are more specific variants of isEmpty operation, such as IsEmpty:bag? | To which upper-level operation categories does IsEmpty:bag pertain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IsEmpty:sequence\nDescription: IsEmpty:sequence is defined as a subclass of the isEmpty operation. This class represents operations that are specific forms of isEmpty, likely indicating procedures to determine whether a sequence is empty. By subclassing isEmpty operation, IsEmpty:sequence inherits all properties and constraints associated with isEmpty operations, but is further specialized to apply specifically to sequences.\nAxiom: {'subClassOf': ['isEmpty operation']}\nGenerated CQs:", "output": "Is IsEmpty:sequence categorized as a specialization of the isEmpty operation? | Which operations encompass IsEmpty:sequence as a more specific form? | What broader operation classes does IsEmpty:sequence fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IsEmpty:table\nDescription: IsEmpty:table is defined as a subclass of the isEmpty operation. This means that it represents a specific isEmpty operation applied to tables, inheriting all general properties of isEmpty operations and specializing them for table data structures. Any instance of IsEmpty:table can be understood as an operation that checks or determines whether a table is empty.\nAxiom: {'subClassOf': ['isEmpty operation']}\nGenerated CQs:", "output": "What higher-level operations encompass IsEmpty:table? | Does IsEmpty:table fall under the broader concept of isEmpty operation? | Which operations are classified as subtypes of isEmpty operation, including IsEmpty:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Select:set\nDescription: Select:set is defined as a subclass of monadic select operation, indicating that it represents a specific type of selection operation that acts on a single input or operand. This formalization ensures that any instance of Select:set inherits the properties and constraints associated with monadic select operations. No further distinguishing characteristics or disjointness conditions are specified.\nAxiom: {'subClassOf': ['monadic select operation']}\nGenerated CQs:", "output": "Which higher-level classes encompass Select:set in the ontology? | Does Select:set represent a specific type of monadic select operation? | What kinds of operations fall under the category of monadic select operation, including Select:set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:complex\nDescription: Negate:complex is formally defined as a subclass of negate operation. This indicates that every instance of Negate:complex is a specific type of negate operation, inheriting all properties and constraints associated with negate operations. No additional distinguishing characteristics or property restrictions are specified at this level.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "output": "What higher-level concepts encompass Negate:complex in this ontology? | Is Negate:complex categorized as a subtype of negate operation? | Within the domain of negate operation, which subordinate classes exist aside from Negate:complex? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:integer\nDescription: Negate:integer is defined as a subclass of negate operation. This class represents the operation of taking an integer and producing its additive inverse (negation). Any instance of Negate:integer is a specific case of a negate operation, restricted to the integer domain.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "output": "Which operations are categorized under negate operation, specifically including Negate:integer? | Is Negate:integer a type of negate operation? | What broader classes does Negate:integer belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:rational\nDescription: Negate:rational is defined as a subclass of negate operation. This class represents operations that perform negation specifically within the domain of rational numbers. Any instance of this class is considered a type of negate operation, formally representing the mathematical action of producing the additive inverse of a rational value.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "output": "What are the broader classes that encompass Negate:rational? | Which specific operations are categorized beneath negate operation, such as Negate:rational? | Does Negate:rational fall under the classification of negate operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:real\nDescription: Negate:real is defined as a subclass of the negate operation. This class represents the negation operation as specifically applied to real numbers, inheriting all constraints and characteristics of the more general negate operation category.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "output": "Under which hierarchical categories can Negate:real be grouped? | Does Negate:real fall under the general class of negate operation? | Which operations are classified as specific types of negate operation, including Negate:real? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:scaled\nDescription: Negate:scaled is defined as a subclass of negate operation. This means that every instance of Negate:scaled is a specific type of negate operation, inheriting all properties and restrictions associated with negate operations. The class is intended to represent a specialized negation process, although additional characteristics would depend on further axioms or descriptions.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "output": "What are the general operation types to which Negate:scaled is related? | Which specific operations are categorized as variants of negate operation, such as Negate:scaled? | Does Negate:scaled fall under the broader classification of negate operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NonNegative:rational\nDescription: NonNegative:rational is defined as a subclass of nonNegative operation. This means every instance of NonNegative:rational is also an instance of nonNegative operation, specifically representing rational values or operations constrained to non-negative results. The class formalizes the distinction between all nonNegative operations and those that pertain strictly to rational (i.e., fractional or whole number) non-negative values.\nAxiom: {'subClassOf': ['nonNegative operation']}\nGenerated CQs:", "output": "Which broader operation classes include NonNegative:rational as a member? | Is NonNegative:rational categorized as a type of nonNegative operation? | What specific operations are subclasses under nonNegative operation, such as NonNegative:rational? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Promote:complex\nDescription: Promote:complex is defined as a subclass of promote operation, indicating that every instance of Promote:complex is also an instance of promote operation. This class inherits all the properties and characteristics of promote operation, while potentially introducing additional specificity or constraints unique to Promote:complex.\nAxiom: {'subClassOf': ['promote operation']}\nGenerated CQs:", "output": "Which promote operations have more specific subclasses, such as Promote:complex? | Under which categories of promote operation does Promote:complex fall? | Is Promote:complex an instance within the promote operation hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Promote:rational\nDescription: Promote:rational is defined as a subclass of the promote operation class. This indicates that every instance of Promote:rational is a specific type of promote operation, inheriting all general characteristics of promote operations. No further restrictions, disjointness, or additional axioms are specified for this class.\nAxiom: {'subClassOf': ['promote operation']}\nGenerated CQs:", "output": "What promote operations have Promote:rational as a specific instance or subclass? | Under which broader operation classes does Promote:rational fall? | Is Promote:rational categorized as a subtype of promote operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Promote:real\nDescription: Promote:real is a subclass of promote operation, indicating that it represents a specialized form of promote operation within the ontology. Any individual classified as Promote:real inherits all characteristics and constraints associated with promote operation. No additional distinguishing axioms or restrictions are currently specified for this class.\nAxiom: {'subClassOf': ['promote operation']}\nGenerated CQs:", "output": "What higher-level classes does Promote:real fall under in the promote operation hierarchy? | Which promote operations encompass subtypes such as Promote:real? | Is Promote:real classified under the category of promote operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Reciprocal:rational\nDescription: Reciprocal:rational is defined as a subclass of reciprocal operation. This means every instance of Reciprocal:rational is a specific type of reciprocal operation, typically involving rational numbers. No additional property restrictions or disjointness axioms are specified, so members of this class inherit all general properties of reciprocal operations.\nAxiom: {'subClassOf': ['reciprocial operation']}\nGenerated CQs:", "output": "Is reciprocal:rational classified under the broader category of reciprocial operation? | Which specific operations are categorized as subtypes of reciprocial operation, and does this include reciprocal:rational? | What are the more general operation classes to which reciprocal:rational belongs? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Reciprocal:real\nDescription: Reciprocal:real is defined as a subclass of reciprocal operation. This class represents the operation of finding the reciprocal specifically within the domain of real numbers. Any instance of Reciprocal:real is a kind of reciprocal operation applied to real numbers.\nAxiom: {'subClassOf': ['reciprocial operation']}\nGenerated CQs:", "output": "Which operations are encompassed as more specific types of reciprocial operation, such as Reciprocal:real? | What are the direct parent categories for Reciprocal:real? | Is Reciprocal:real classified under the broader category of reciprocial operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Reciprocal:complex\nDescription: Reciprocal:complex is defined as a subclass of reciprocal operation. This means every instance of Reciprocal:complex is also a reciprocal operation. The class is characterized by operations that involve computing the reciprocal (multiplicative inverse) specifically within the context of complex numbers.\nAxiom: {'subClassOf': ['reciprocial operation']}\nGenerated CQs:", "output": "What specific operations fall under the category of reciprocial operation, including Reciprocal:complex? | Is Reciprocal:complex classified as a subtype of reciprocial operation? | Which broader operation classes does Reciprocal:complex belong to within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Round:time&date\nDescription: Round:time&date is defined as a subclass of round operation. This means that all instances of Round:time&date are specific types of rounding operations that pertain to time and date values. The class captures rounding processes as applied to temporal data, inheriting all general properties of round operations.\nAxiom: {'subClassOf': ['round operation']}\nGenerated CQs:", "output": "Does Round:time&date fall under the category of round operation? | Which broader operations encompass Round:time&date as a subtype? | What specific types are classified as round operation, and does Round:time&date belong to this group? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Serialize:table\nDescription: Serialize:table is defined as a subclass of serialize operation. This indicates that it represents a specific type of serialization process, inheriting all characteristics of a serialize operation but further specializing to handle table data structures. Any individual of Serialize:table is, by axiom, a serialize operation specifically concerned with tables.\nAxiom: {'subClassOf': ['serialize operation']}\nGenerated CQs:", "output": "What kinds of operations fall under the category of serialize operation, specifically including Serialize:table? | Is Serialize:table categorized as a type of serialize operation? | Which more general operation types encompass Serialize:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Successor:ordinal\nDescription: Successor:ordinal is a subclass of successor operation, representing those operations specifically associated with generating the next ordinal in a well-ordered sequence. Members of this class perform the function of yielding the immediate successor ordinal, as formalized within the framework of ordinal arithmetic.\nAxiom: {'subClassOf': ['successor operation']}\nGenerated CQs:", "output": "Which subclasses are encompassed within the category of successor operation, including Successor:ordinal? | To what broader parent classes does Successor:ordinal belong in the ontology? | Is Successor:ordinal classified as a specific type of successor operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MapToBag:table\nDescription: MapToBag:table is a subclass of map operation, representing a specific type of mapping operation. This class inherits all characteristics of map operations and specifies entities that perform mapping tasks in a tabular context.\nAxiom: {'subClassOf': ['map operation']}\nGenerated CQs:", "output": "What broader operations is MapToBag:table categorized under according to the ontology? | Is MapToBag:table classified under map operation in the ontology? | Which specific operations are included as subclasses of map operation, such as MapToBag:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MapToTable:table\nDescription: MapToTable:table is defined as a subclass of map operation, indicating that it inherits all characteristics of map operations. This class represents a specific type of mapping process with the intended outcome or function directly associated with tables. Individuals of this class are specialized map operations that result in or involve tables as part of their output or transformation.\nAxiom: {'subClassOf': ['map operation']}\nGenerated CQs:", "output": "What broader concepts does MapToTable:table relate to in this context? | Is MapToTable:table classified as a kind of map operation? | Which operations fall under the category of map operation, including MapToTable:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Replace:array\nDescription: Replace:array is defined as a subclass of n-adic operation, signifying that it represents an operation which can take an arbitrary number of arguments. Individuals of this class inherit all properties and constraints associated with n-adic operations, and the class serves to specify operations that involve the replacement of elements within arrays or similar data structures. No further characteristics or constraints are specified beyond its position in the class hierarchy.\nAxiom: {'subClassOf': ['n-adic operation']}\nGenerated CQs:", "output": "Is Replace:array classified as a type of n-adic operation? | What are the specific subtypes of n-adic operation, including Replace:array? | Which broader categories encompass Replace:array? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Empty:bag\nDescription: Empty:bag is defined as a subclass of niladic operation, indicating that it represents an operation which does not require any arguments or inputs. This class models entities or operations that, by their formal definition, do not take parameters.\nAxiom: {'subClassOf': ['niladic operation']}\nGenerated CQs:", "output": "Is Empty:bag classified under niladic operation? | Which operations fall under the category of niladic operation, including Empty:bag? | What higher-level operation categories does Empty:bag belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Empty:sequence\nDescription: Empty:sequence is defined as a subclass of niladic operation, indicating that it represents a special operation that does not take any arguments or inputs. This class characterizes sequences that are inherently empty and do not exhibit any elements or content, consistent with the semantics of niladic operations in formal systems.\nAxiom: {'subClassOf': ['niladic operation']}\nGenerated CQs:", "output": "Is Empty:sequence classified under the category of niladic operation? | Which operations are subclasses of niladic operation, including Empty:sequence? | Which more general operation categories encompass Empty:sequence? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Empty:set\nDescription: Empty:set is defined as a subclass of niladic operation. This means that an empty set inherits all characteristics of niladic operations, which are operations that do not require any operands. The classification suggests that empty:set is conceptualized in an operational framework where no input or elements are involved.\nAxiom: {'subClassOf': ['niladic operation']}\nGenerated CQs:", "output": "Is Empty:set categorized as a type of niladic operation? | What broader classes encompass Empty:set within the hierarchy of niladic operations? | Which specific niladic operations include Empty:set as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Empty:table\nDescription: Empty:table is defined as a subclass of niladic operation, indicating that it represents an operation or entity that does not take any input arguments. As a specific type of niladic operation, Empty:table is characterized by being an operation without operands, typically used to denote or construct an empty table structure within its context.\nAxiom: {'subClassOf': ['niladic operation']}\nGenerated CQs:", "output": "Which niladic operations have Empty:table as a more specific type? | What broader operation categories encompass Empty:table? | Does Empty:table fall under the category of niladic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: key access\nDescription: key access is defined as a subclass of direct access property, meaning it inherits all characteristics of direct access property while representing a more specific type. Members of the key access class pertain to properties or relationships that enable or characterize direct forms of access, distinguished from other access mechanisms by their explicit subclass designation.\nAxiom: {'subClassOf': ['direct access property']}\nGenerated CQs:", "output": "What are the more general property types that encompass key access? | Which access properties fall under the category of direct access property, including key access? | Is key access classified as a direct access property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: access by value\nDescription: access by value is defined as a subclass of indirect access property, indicating that it represents a specific type of indirect access. Any individual classified as access by value inherits all the characteristics of indirect access property, typically referring to situations where access is achieved through the value rather than the reference or pointer itself.\nAxiom: {'subClassOf': ['indirect acess property']}\nGenerated CQs:", "output": "Is access by value categorized under indirect access property? | What more general properties include access by value as a specialization? | Which types of properties fall within the scope of indirect access property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: implementation dependent access\nDescription: implementation dependent access is defined as a subclass of indirect access property, indicating that it inherits all characteristics of indirect access property. This means any instance of implementation dependent access is also considered an indirect access property, but with specific details or constraints determined by the particular implementation. There is no further specification beyond its placement in the class hierarchy.\nAxiom: {'subClassOf': ['indirect acess property']}\nGenerated CQs:", "output": "Which access properties are more specific than indirect access property, such as implementation dependent access? | To which broader types does implementation dependent access conceptually relate? | Does implementation dependent access fall within the category of indirect access property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: position access\nDescription: position access is defined as a subclass of indirect access property, indicating that it represents a type of access property that is not direct but mediated through some intermediary or reference. All instances of position access therefore inherit the characteristics and constraints associated with indirect access property.\nAxiom: {'subClassOf': ['indirect acess property']}\nGenerated CQs:", "output": "Which properties are subclasses under the indirect access property category? | Is position access a type of indirect access property? | What more general property categories does position access belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unordered aggregate\nDescription: unordered aggregate is a subclass of aggregate imposed ordering. This means every unordered aggregate is an aggregate where some ordering has been considered, but specifically, unordered aggregate refers to those aggregates where the order of the constituents is irrelevant or not specified. No additional disjointness or property restrictions are defined.\nAxiom: {'subClassOf': ['aggregate imposed ordering']}\nGenerated CQs:", "output": "Is aggregate imposed ordering a superclass of unordered aggregate? | To which broader aggregation categories does unordered aggregate belong? | Which specific types of aggregate imposed ordering include unordered aggregate as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: identifier unique\nDescription: identifier unique is defined as a subclass of aggregate-imposed identifier uniqueness. This indicates that any individual or instance of identifier unique inherits all properties and constraints of aggregate-imposed identifier uniqueness, implying that the uniqueness of identifiers is imposed at the aggregate level. Without additional description, this class specifically represents entities for which unique identification is ensured by aggregate-imposed mechanisms.\nAxiom: {'subClassOf': ['aggregate-imposed identifier uniqueness']}\nGenerated CQs:", "output": "Does identifier unique fall under the broader classification of aggregate-imposed identifier uniqueness? | What more general categories encompass identifier unique within the ontology? | Which kinds of identifier uniqueness are specified as subclasses of aggregate-imposed identifier uniqueness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: variable size\nDescription: variable size is defined as a subclass of aggregate size. This specifies that any instance of variable size is also an instance of aggregate size, inheriting all its properties and restrictions. No further distinguishing characteristics or disjointness constraints are specified for variable size beyond its hierarchical relationship.\nAxiom: {'subClassOf': ['agregate size']}\nGenerated CQs:", "output": "Which specific types are encompassed by aggregate size, such as variable size? | Does variable size fall under the broader classification of aggregate size? | To what higher-level groups does variable size belong according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: component non-mandatory\nDescription: component non-mandatory is defined as a subclass of component mandatoriness. This classification indicates that component non-mandatory represents components characterized by a specific mandatoriness status, distinguishing them from other types of component mandatoriness. No further restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['component mandatoriness']}\nGenerated CQs:", "output": "What broader mandatoriness categories encompass component non-mandatory? | To which general mandatoriness classifications does component non-mandatory belong? | Which types are more specific than component mandatoriness, including component non-mandatory? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: one dimensional\nDescription: one dimensional is defined as a subclass of dimensionality. This class represents entities or concepts that possess exactly one dimension, distinguishing them from higher-dimensional counterparts. Any individual classified as one dimensional must inherently exhibit characteristics specific to single-dimensionality.\nAxiom: {'subClassOf': ['dimensionality']}\nGenerated CQs:", "output": "Is one dimensional classified as a specialized form under dimensionality? | Which concepts are encompassed under dimensionality, such as one dimensional? | What broader type does one dimensional inherit from in the dimensional hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: two dimensional\nDescription: two dimensional is defined as a subclass of dimensionality. This class represents entities or concepts characterized specifically by having two dimensions (such as length and width), distinguishing them within the broader category of dimensionality.\nAxiom: {'subClassOf': ['dimensionality']}\nGenerated CQs:", "output": "Which general category encompasses two dimensional in the ontology? | Is two dimensional a more specific type of dimensionality? | What are the subclasses categorized under dimensionality, such as two dimensional? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: multi dimensional\nDescription: multi dimensional is defined as a subclass of dimensionality, meaning it represents a specific type or instance within the broader concept of dimensionality. Any entity classified as multi dimensional inherently possesses the quality of having multiple dimensions, as specified by its placement under the dimensionality hierarchy.\nAxiom: {'subClassOf': ['dimensionality']}\nGenerated CQs:", "output": "Is multi dimensional categorized under the broader concept of dimensionality? | To which higher-level classes does multi dimensional belong in the context of dimensionality? | Which subclasses are encompassed by dimensionality, such as multi dimensional? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: heterogenous\nDescription: heterogenous is defined as a subclass of homogenity. This means every heterogenous entity is considered a type of homogenity, establishing a hierarchical relationship in which heterogenous inherits all characteristics of homogenity; however, further distinctions or defining properties are not specified by the current axioms or descriptions.\nAxiom: {'subClassOf': ['homogenity']}\nGenerated CQs:", "output": "What broader classes is heterogenous associated with in the ontology? | Which subclasses fall under the concept of homogenity, such as heterogenous? | Is heterogenous included as a specific type under homogenity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-recursive\nDescription: non-recursive is defined as a subclass of recursiveness, meaning every non-recursive entity is a specific type of recursiveness. This class represents elements that, while related to the broader concept of recursiveness, possess characteristics that distinguish them as non-recursive within that context.\nAxiom: {'subClassOf': ['recursiveness']}\nGenerated CQs:", "output": "Which higher-order classes does non-recursive fall under? | What categories are directly encompassed by recursiveness, including non-recursive? | Is non-recursive categorized under recursiveness as a more specific classification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: structured\nDescription: structured is defined as a subclass of structurness. This indicates that every instance of structured also inherits all characteristics and constraints of structurness. No further properties or restrictions are specified for this class.\nAxiom: {'subClassOf': ['structurness']}\nGenerated CQs:", "output": "Is structurness a direct superclass of structured? | Which higher-level categories encompass the concept of structured? | What more specific classes fall under structurness, such as structured? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unstructured\nDescription: unstructured is defined as a subclass of structurness. This means that every instance of unstructured is also an instance of structurness, inheriting all properties and constraints applicable to structurness. There are no additional property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['structurness']}\nGenerated CQs:", "output": "Which types are categorized more specifically than structurness, such as unstructured? | To what higher-level groupings does unstructured pertain? | Does unstructured fall under the category of structurness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: semi-structured\nDescription: semi-structured is defined as a subclass of structurness. This means that every instance of semi-structured is also an instance of structurness, inheriting its general properties while specializing or refining its concept. No additional property restrictions or disjointness axioms are specified, so the class is characterized primarily by its placement within the structurness hierarchy.\nAxiom: {'subClassOf': ['structurness']}\nGenerated CQs:", "output": "What broader categories encompass semi-structured within the ontology? | Is semi-structured classified as a type of structurness? | Which subclasses of structurness include semi-structured? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unique values\nDescription: unique values is defined as a subclass of uniqueness, indicating that every instance of unique values is also an instance of uniqueness. This classification implies that members of this class represent values that are distinguished by not being duplicated within a given context, enforcing a guarantee of singularity for each value.\nAxiom: {'subClassOf': ['uniqueness']}\nGenerated CQs:", "output": "What are the broader classes that unique values are classified under? | Are unique values considered a specific type of uniqueness? | Which subclasses fall under the category of uniqueness, including unique values? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target field identifier\nDescription: target field identifier is defined as a subclass of field identifier. This means that every target field identifier is a specialized form of field identifier and inherits all its properties and constraints. No additional axioms or distinguishing properties are specified for this class.\nAxiom: {'subClassOf': ['field identifier']}\nGenerated CQs:", "output": "What higher-level field identifiers categorize target field identifier? | Does target field identifier belong to the broader group defined by field identifier? | Which field identifier subtypes encompass target field identifier as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: positive integer\nDescription: positive integer is defined as a subclass of extended datatype, indicating that it is a specialized numerical datatype representing integers greater than zero within the broader category of extended datatypes. No additional constraints or properties are specified beyond this hierarchical relationship.\nAxiom: {'subClassOf': ['extended datatype']}\nGenerated CQs:", "output": "Is positive integer classified as a more specific type under extended datatype? | Which datatypes fall within the category of extended datatype, encompassing positive integer? | What broader datatype groups does positive integer inherit from? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: positive integer range generator\nDescription: positive integer range generator is defined as a subclass of range subtype generator. This class represents generators specifically designed to produce ranges consisting only of positive integers, inheriting all characteristics of range subtype generator while specializing in handling positive integer values.\nAxiom: {'subClassOf': ['range subtype generator']}\nGenerated CQs:", "output": "Is every positive integer range generator categorized under range subtype generator? | Which specialized generators are classified beneath range subtype generator, including positive integer range generator? | Under which broader generator types does positive integer range generator fall? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: return-parameter specification\nDescription: return-parameter specification is a subclass of specification, characterized by having at least one member that is a datatype and at least one associated identifier that qualifies as a parameter identifier. This formalization ensures that every return-parameter specification includes a datatype value and a means of uniquely identifying the parameter, which is essential for describing properties of parameters returned by functions or methods in structured data or APIs.\nAxiom: {'subClassOf': ['specification'], 'propertyRestrictions': ['[has_member some datatype]', '[has_identifier only parameter identifier]']}\nGenerated CQs:", "output": "Must every return-parameter specification have at least one identifier specified via the has_identifier property? | Is it required for a return-parameter specification to possess a parameter identifier through the has_identifier relationship? | Does a return-parameter specification entail the existence of some associated parameter identifier via has_identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: excluding subtype generator\nDescription: excluding subtype generator is defined as a subclass of subtype generator, with the added restriction that it must have at least one member specified by the has_member property, where the member is of the type select-list. This means every instance of excluding subtype generator must be associated with at least one select-list through the has_member property, providing a mechanism for selecting or excluding specific subtypes via a list-based criteria.\nAxiom: {'subClassOf': ['subtype generator'], 'propertyRestrictions': ['[has_member only select-list]']}\nGenerated CQs:", "output": "Does the concept 'excluding subtype generator' necessarily include at least one member from the 'select-list' via the 'has_member' property? | Is it required that every 'excluding subtype generator' entity is related through 'has_member' to an instance belonging to the 'select-list'? | Could an 'excluding subtype generator' exist without linking to at least one element of the 'select-list' through 'has_member'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: selection subtype generator\nDescription: selection subtype generator is defined as a subclass of subtype generator. Any instance of this class must have at least one member that is a select-list, enforced by the property restriction [has_member some select-list]. This ensures that selection subtype generators are specifically characterized by their association with select-list members, distinguishing them from other subtype generators.\nAxiom: {'subClassOf': ['subtype generator'], 'propertyRestrictions': ['[has_member only select-list]']}\nGenerated CQs:", "output": "Does every selection necessarily include at least one member from the select-list? | Is it required for any selection to have a member that is part of the select-list? | Can a selection exist without having any member drawn from the select-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled graph datatype\nDescription: labeled graph datatype is defined as a subclass of defined datatype, with the additional restriction that it must have at least one member produced by a directed labeled graph datatype generator. This means every labeled graph datatype is necessarily structured to include elements generated from a mechanism or process that produces directed labeled graph datatypes, distinguishing it from other defined datatypes that may lack this property.\nAxiom: {'subClassOf': ['defined datatype'], 'propertyRestrictions': ['[has_member only directed labeled graph datatype generator]']}\nGenerated CQs:", "output": "Must every labeled graph with propertyRestrictions have at least one has_member relation to a directed labeled graph datatype generator? | Is it required for any labeled graph with propertyRestrictions to be associated, via has_member, with a directed labeled graph datatype generator? | Can a labeled graph with propertyRestrictions exist without having the has_member property relating it to a directed labeled graph datatype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bag generator\nDescription: bag generator is defined as a subclass of homogenous unordered aggregate generator with variable size and is explicitly disjoint with set generator, indicating that an individual cannot be both a bag generator and a set generator. Members of this class are characterized by generating collections where items may have non-unique values (duplicates are permitted) and the way elements are accessed is implementation dependent. This ensures that bag generators support variable-sized, unordered aggregates allowing repeated elements, with element access properties not universally specified.\nAxiom: {'subClassOf': ['homogenous unordered aggregate generator with variable size'], 'disjointWith': ['set generator'], 'propertyRestrictions': ['[has_quality some non-unique values]', '[has_quality only implementation dependent access]']}\nGenerated CQs:", "output": "Is every bag generator required to have at least one quality associated with implementation dependent access? | Does a bag generator necessarily possess the quality of implementation dependent access through the has_quality property? | Can a bag generator exist without having the has_quality property relating it to implementation dependent access? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record generator\nDescription: record generator is defined as a subclass of heterogenous aggregate generator and is explicitly disjoint with table datatype, ensuring that an individual cannot be both a record generator and a table datatype. Members of the record generator class must possess several qualities: they have a fixed size, are one-dimensional, form an unordered aggregate, support key access, and can contain non-unique values. This formalization captures the characteristic structure of a record generator, emphasizing its fixed, one-dimensional, unordered nature with keyed access and allowance for repeated values.\nAxiom: {'subClassOf': ['heterogenous aggregate generator'], 'disjointWith': ['table datatype'], 'propertyRestrictions': ['[has_quality some one dimensional]', '[has_quality some unordered aggregate]', '[has_quality some key access]', '[has_quality some non-unique values]', '[has_quality only fixed size]']}\nGenerated CQs:", "output": "Is it required that every record generator has at least one quality characterized by a fixed size? | Must a record generator possess the property 'has_quality' with a value of fixed size? | Does the presence of the fixed size quality define the class of record generators with respect to the has_quality property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous unordered aggregate generator with variable size\nDescription: homogenous unordered aggregate generator with variable size is a subclass of homogenous aggregate generator with variable size and is defined as being equivalent to either a bag generator or a set generator. Members of this class are characterized by having the quality of generating unordered aggregates, reflecting that the elements produced do not have intrinsic order. This ontology definition ensures that any homogenous unordered aggregate generator with variable size behaves as a variable-sized aggregate generator whose items are homogeneous and unordered, aligning with the behaviors of both bag generators and set generators.\nAxiom: {'subClassOf': ['homogenous aggregate generator with variable size'], 'equivalentClass': ['(bag generator or set generator)'], 'propertyRestrictions': ['[has_quality only unordered aggregate]']}\nGenerated CQs:", "output": "Does every homogenous unordered aggregate generator necessarily have at least one quality characterized as an unordered aggregate? | Can a homogenous unordered aggregate generator possess the 'has_quality' property only if the quality is of type unordered aggregate? | Is it possible for a homogenous unordered aggregate generator to lack any 'has_quality' relationship to unordered aggregate entities? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: table datatype\nDescription: table datatype is defined as a subclass of heterogenous aggregate datatype, and is explicitly disjoint with record (tuple) datatype, indicating that no instance can simultaneously belong to both classes. Members of the table datatype class are characterized by the following: they always have at least one table generator and a field-list as members; possess the qualities of being exact and non-numeric; and support several specific operations, including IsEmpty, MapToBag, Insert, Select, MapToTable, Delete, Fetch, and Serialize. This formalization distinguishes table datatype from other aggregate types, ensuring that it is uniquely identified by its supported operations, membership requirements, and data qualities.\nAxiom: {'subClassOf': ['heterogenous aggregate datatype'], 'disjointWith': ['record (tuple) datatype'], 'propertyRestrictions': ['[has_member some table generator]', '[has_operation some IsEmpty:table]', '[has_operation some MapToBag:table]', '[has_operation some Insert:table]', '[has_operation some Select:table]', '[has_operation some MapToTable:table]', '[has_quality some exact]', '[has_operation some Delete:table]', '[has_operation some Fetch:table]', '[has_operation some Serialize:table]', '[has_quality some non-numeric]', '[has_member only field-list]']}\nGenerated CQs:", "output": "Is it required that every table has at least one member from the field-list? | Does the definition of a table ensure that it must be associated with some field-list member via the has_member property? | Can a table exist without having any has_member link to a field-list individual? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: enumerated-value identifier\nDescription: enumerated-value identifier is a subclass of identifier, characterized by the restriction that its values must be associated (through the has-value property) with at least one literal value (rdfs:Literal). This formalization ensures that every enumerated-value identifier refers explicitly to a concrete literal value, distinguishing it from other identifiers that may not be directly tied to literal data.\nAxiom: {'subClassOf': ['identifier'], 'propertyRestrictions': ['[has-value only rdfs:Literal]']}\nGenerated CQs:", "output": "Are all enumerated-value identifiers required to have at least one property restriction with a value of type rdfs:Literal? | Is it necessary for every enumerated-value identifier to be associated with a property restriction whose value is a literal? | Does the presence of a property restriction with an rdfs:Literal value characterize all enumerated-value identifiers? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate-imposed identifier uniqueness\nDescription: aggregate-imposed identifier uniqueness is a subclass of aggregate generator property, and is explicitly disjoint with classes such as homogenity, aggregate size, uniqueness, component mandatoriness, structurness, recursiveness, and access type, ensuring mutual exclusivity with these notions. It is defined equivalently as a situation where an identifier may or may not be unique (identifier not unique or identifier unique), capturing precisely those cases where the uniqueness of identifiers is determined at the aggregate level rather than being strictly enforced or absent.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['homogenity', 'agregate size', 'uniqueness', 'component mandatoriness', 'structurness', 'recursiveness', 'access type'], 'equivalentClass': ['(identifier not unique and identifier unique)']}\nGenerated CQs:", "output": "Is aggregate-imposed identifier uniqueness equivalent to the union of identifier not unique and identifier unique? | Can aggregate-imposed identifier uniqueness be completely described as either identifier not unique or identifier unique? | Does aggregate-imposed identifier uniqueness include all instances with identifier unique or identifier not unique, and no others? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: uniqueness\nDescription: uniqueness is defined as a subclass of aggregate generator property and is explicitly disjoint from component mandatoriness, structurness, recursiveness, and access type, meaning no entity can be an instance of both uniqueness and any of these disjoint classes simultaneously. It is equivalent to the presence of either unique values or non-unique values, capturing the property of whether values are distinct or may repeat within an aggregate context. This definition formalizes how uniqueness characterizes and distinguishes value patterns in aggregate generator properties.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['component mandatoriness', 'structurness', 'recursiveness', 'access type'], 'equivalentClass': ['(non-unique values and unique values)']}\nGenerated CQs:", "output": "Is uniqueness equivalent to the class containing either only non-unique values or only unique values? | Can all instances classified as uniqueness be described as those having non-unique values or unique values? | Does the definition of uniqueness encompass exclusively the union of non-unique values and unique values? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: recursiveness\nDescription: recursiveness is defined as a subclass of aggregate generator property, indicating it is a specific kind of property related to aggregate generators. It is explicitly disjoint with access type, meaning no entity can simultaneously be both an access type and exhibit recursiveness. Additionally, recursiveness is formally equivalent to either recursive or non-recursive, fully covering both possibilities as mutually exclusive characteristics within this context.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['access type'], 'equivalentClass': ['(recursive and non-recursive)']}\nGenerated CQs:", "output": "Is recursiveness equivalent to the union of recursive and non-recursive concepts? | Can recursiveness be entirely described as either recursive or non-recursive? | Are all entities classified as recursiveness necessarily either recursive or non-recursive? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: primitive datatype\nDescription: primitive datatype is a subclass of datatype, and is explicitly disjoint from both generated datatype and defined datatype, ensuring that no individual can simultaneously belong to these classes. Members of primitive datatype are characterized by the requirement that they possess at least one quality related to equality (expressed as having some has_quality relationship to equality). This formalization captures the basic, irreducible nature of primitive datatypes, differentiating them from those that are constructed or defined based on other rules.\nAxiom: {'subClassOf': ['datatype'], 'disjointWith': ['generated datatype', 'defined datatype'], 'propertyRestrictions': ['[has_quality only equality]']}\nGenerated CQs:", "output": "Is it required for every instance with a primitive datatype propertyRestriction to possess at least one has_quality relation to equality? | Does the definition of primitive datatype propertyRestrictions ensure that the has_quality property always connects to equality for its instances? | Must all primitive datatype propertyRestrictions have the property has_quality with the value equality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined datatype parameter\nDescription: defined datatype parameter is a subclass of datatype role, representing a parameter that is specifically associated with datatypes. Any member of this class must have an identifier (i.e., satisfy the has_identifier property with respect to some parameter identifier), must be a member of a defined datatype parameter-list, and must play the role_of some datatype. This formalization ensures that a defined datatype parameter is always linked to a datatype and properly identified within a parameter list structure.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[has_identifier some parameter identifier]', '[is_member_of some defined datatype parameter-list]', '[role_of only datatype]']}\nGenerated CQs:", "output": "Is it required that propertyRestrictions always involves at least one role_of relation to a datatype? | Can an entity with propertyRestrictions lack any role_of association to a datatype? | Does the definition of propertyRestrictions entail that there must exist some role_of connection to a datatype for its instances? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: alternative-type\nDescription: alternative-type is defined as a subclass of datatype role. Instances of this class must be the role of at least one datatype and must also be a member of some alternative component. This formalization ensures that alternative-type represents a specialized datatype role that is contextually linked both to specific datatypes and to alternative components.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[role_of some datatype]', '[is_member_of only alternative component]']}\nGenerated CQs:", "output": "Must every alternative-type entity be related via 'is_member_of' to at least one alternative component? | Is it required that an alternative-type individual participate as a member in some alternative component? | Can an alternative-type exist in the ontology without being a member of any alternative component through the 'is_member_of' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: parameter\nDescription: parameter is defined as a subclass of datatype role, representing entities that serve a specific function within a datatype context. Each parameter must be associated with some datatype (via the role_of property) and must have an identifier that is a member of the parameter identifier class. This ensures that every parameter is explicitly linked to the datatype it qualifies and is uniquely identified within the system.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[has_identifier some parameter identifier]', '[role_of only datatype]']}\nGenerated CQs:", "output": "Is it necessary for parameter to have the property propertyRestrictions with some value that plays the role_of a specified datatype? | Can a parameter exist without propertyRestrictions relating to at least one instance of datatype through role_of? | Does every valid parameter exhibit propertyRestrictions to at least one entity classified as datatype by role_of? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: attribute component\nDescription: attribute component is defined as a subclass of datatype role, meaning each attribute component is a specific kind of datatype role. Additionally, attribute component instances are required to be associated with at least one attribute identifier through the has_identifier property. This ensures that every attribute component is uniquely identified by an attribute identifier.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[has_identifier only attribute identifier]']}\nGenerated CQs:", "output": "Is it required for every attribute component to have at least one attribute identifier via the has_identifier property? | Can an attribute component exist without being linked to an attribute identifier through has_identifier? | Must each attribute component be associated with some attribute identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete field-list\nDescription: discrete field-list is a subclass of field-list, defined by the restriction that its members must include at least one discrete field component. This ensures that every instance of discrete field-list contains some element that is characterized as a discrete field component.\nAxiom: {'subClassOf': ['field-list'], 'propertyRestrictions': ['[has_member only discrete field component]']}\nGenerated CQs:", "output": "Must every discrete field-list include at least one member that is a discrete field component? | Is it required for a discrete field-list to have the has_member property relating it to some discrete field component? | Can a discrete field-list exist without having any discrete field component as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unlabeled dataset field-list\nDescription: unlabeled dataset field-list is a subclass of field-list, characterized by the axiom that its members must include at least one labeled dataset descriptive field component through the has_member property. This means any instance of unlabeled dataset field-list is a field-list that necessarily contains some labeled dataset descriptive field components.\nAxiom: {'subClassOf': ['field-list'], 'propertyRestrictions': ['[has_member only labeled dataset descriptive field component]']}\nGenerated CQs:", "output": "Is it required for an unlabeled dataset to include at least one member that is a labeled dataset descriptive field component? | Can an unlabeled dataset have members other than labeled dataset descriptive field components? | Does every unlabeled dataset necessarily relate through 'has_member' to a labeled dataset descriptive field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: attribute-list\nDescription: attribute-list is defined as a subclass of list specification, characterized by the requirement that every attribute-list must have at least one member that is an attribute component. This formalization specifies that the class comprises list specifications whose members necessarily include attribute components.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member only attribute component]']}\nGenerated CQs:", "output": "Is it required that every attribute-list includes at least one component as a member? | Does the existence of a member with the attribute 'component' suffice for something to be classified under attribute-list? | Can an attribute-list be identified solely by having the property 'has_member' with at least one component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: alternative-list\nDescription: alternative-list is defined as a subclass of list specification, incorporating a property restriction requiring that its members must include at least one alternative component. This ensures that any instance of alternative-list represents a list specification whose elements are specifically alternative components.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member only alternative component]']}\nGenerated CQs:", "output": "Must every alternative-list include at least one alternative component as a member? | Is it required that alternative-list items possess a member that is classified as an alternative component? | Does the structure of alternative-list entail having some association with an alternative component through the has_member property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: select-list\nDescription: select-list is defined as a subclass of list specification, representing a specialized type of list that must include at least one member which is a select-item specification. Any instance of select-list is thus required to be a list specification containing one or more select-item specifications as its members.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member only select-item specification]']}\nGenerated CQs:", "output": "Are all individuals in select-list required to have at least one member specified by the property has_member from the select-item specification? | Can an instance belonging to select-list exist without having a member that satisfies the select-item specification through has_member? | Is it necessary for any member of select-list to be linked to some entity defined by the select-item specification via has_member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: enumerated-value-list\nDescription: enumerated-value-list is defined as a subclass of list specification, with the defining property that it must have at least one member that is an enumerated-value identifier. This means any instance of enumerated-value-list is a list specification characterized by containing one or more explicitly enumerated values as its members.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member only enumerated-value identifier]']}\nGenerated CQs:", "output": "Is every member in an enumerated-value-list required to have at least one enumerated-value identified by the 'has_member' property? | Can an enumerated-value-list contain an element that does not meet the identifier criteria via 'has_member'? | Does the definition of enumerated-value-list ensure the inclusion of only those values that are explicitly connected through 'has_member' to a recognized enumerated-value identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: array datatype\nDescription: array datatype is defined as a subclass of homogenous aggregate datatype, and is explicitly disjoint from homogenous aggregate datatype with variable size, indicating arrays have a fixed size. Members of this class possess the following characteristics: they have members of a specific base type, members are indexed (by an index-type list), and an array can be generated by an array generator. Arrays are associated with qualities such as being exact, non-ordered, and non-numeric. They support operations including selection (Select:table), replacement (Replace:array), and testing for equality (Equal:array). These axioms provide a formal definition capturing the essential nature and operational behavior of array datatypes.\nAxiom: {'subClassOf': ['homogenous aggregate datatype'], 'disjointWith': ['homogenous aggregate datatype with variable size'], 'propertyRestrictions': ['[has_operation some Select:table]', '[has_member some index-type list]', '[has_quality some exact]', '[has_operation some Replace:array]', '[has_quality some non-ordered]', '[has_quality some non-numeric]', '[has_operation some Equal:array]', '[has_member some array generator]', '[has_member only base type]']}\nGenerated CQs:", "output": "Must every array have at least one member of the base type? | Does an array necessarily include some value identified by the base type through the property has_member? | Is it required that any instance of array is associated via has_member with at least one instance of the base type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real datatype\nDescription: real datatype is defined as a subclass of numeric ordered primitive datatype and is explicitly disjoint with both integer datatype and rational datatype, ensuring that no individual can be simultaneously classified as a real datatype and either of those classes. Members of this class support a range of operations, including addition (Add), multiplication (Multiply), negation (Negate), reciprocals (Reciprocal), equality comparison (Equal), order comparison (InOrder), and type promotion (Promote), all among real values. Instances of real datatype possess qualities of being unbounded and approximate, distinguishing them from other numeric types. They also include members such as real radix and real factor, further characterizing the structure and application of real datatypes.\nAxiom: {'subClassOf': ['numeric ordered primitive datatype'], 'disjointWith': ['integer datatype', 'rational datatype'], 'propertyRestrictions': ['[has_quality some approximate]', '[has_operation some Negate:real]', '[has_member some real radix]', '[has_quality some unbounded]', '[has_operation some Reciprocal:real]', '[has_operation some InOrder:real]', '[has_operation some Add:real]', '[has_operation some Promote:real]', '[has_operation some Equal:real]', '[has_member some real factor]', '[has_operation only Multiply:real]']}\nGenerated CQs:", "output": "Is it required for a real datatype property to participate in at least one 'has_operation' relation involving the Multiply operation? | Can a real datatype property exist without being associated with the 'has_operation' property to a Multiply operation? | Does the presence of a Multiply operation under the 'has_operation' property suffice to classify a real datatype property under this restriction? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-aggregate generator\nDescription: non-aggregate generator is defined as a subclass of generated datatype generator, and is explicitly disjoint from defined generator, aggregate datatype, and aggregate generator. Every non-aggregate generator is equivalent to being either a choice generator, pointer generator, or procedure generator. This class groups generator types that are not aggregate in nature, thereby excluding those that represent defined, aggregate, or aggregate-related generator functionalities.\nAxiom: {'subClassOf': ['generated datatype generator'], 'disjointWith': ['defined generator', 'aggregate datatype', 'aggregate generator'], 'equivalentClass': ['(choice generator and pointer generator and procedure generator)']}\nGenerated CQs:", "output": "Is a non-aggregate generator necessarily equivalent to either a choice generator, a pointer generator, or a procedure generator? | Is every non-aggregate generator either a choice generator, a pointer generator, or a procedure generator, and vice versa? | Are the classes choice generator, pointer generator, and procedure generator jointly exhaustive and mutually exclusive with respect to non-aggregate generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: numericalness\nDescription: numericalness is a subclass of datatype property that classifies properties as either numeric or non-numeric. It is formally specified to be equivalent to the union of numeric and non-numeric, meaning all members must belong to one of these two categories. Additionally, numericalness is explicitly disjoint with cardinality, order, boundedness, and equality, ensuring these property types are mutually exclusive and no property can simultaneously belong to both numericalness and any of these other classes. This class captures the essential distinction between properties based on their numerical character.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['cardinality', 'order', 'boundedness', 'equality'], 'equivalentClass': ['(numeric and non-numeric)']}\nGenerated CQs:", "output": "Is numericalness defined as the union of numeric and non-numeric entities? | Are all instances of numericalness necessarily either numeric or non-numeric? | Does numericalness encompass all and only those classes that are numeric or non-numeric? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boundedness\nDescription: boundedness is defined as a subclass of datatype property and is explicitly disjoint with equality, indicating that no instance can simultaneously represent boundedness and equality. It is further specified as being equivalent to either bounded or unbounded, meaning every instance of boundedness must fall into one of these two categories. This class formally captures the notion of whether a datatype property exhibits bounds or not, distinguishing it from properties concerning equality.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['equality'], 'equivalentClass': ['(bounded and unbounded)']}\nGenerated CQs:", "output": "Is boundedness defined as the union of bounded and unbounded classes? | Are all instances of boundedness either bounded or unbounded? | Does boundedness include any class other than bounded and unbounded? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real field component\nDescription: real field component is defined as a subclass of primitive field component, disjoint with boolean field component—which ensures that no individual can be both a real field component and a boolean field component simultaneously. Members of this class are further constrained by a property restriction: each real field component must have a role with respect to some real datatype. This means that any real field component always relates in some way to a real (numeric, continuous) datatype, distinguishing it from other types of primitive field components.\nAxiom: {'subClassOf': ['primitive field component'], 'disjointWith': ['boolean field component'], 'propertyRestrictions': ['[role_of only real datatype]']}\nGenerated CQs:", "output": "Does a real field component necessarily play the role of some real datatype? | Is it required for every real field component to be associated, through 'role_of', with at least one instance of real datatype? | Can a real field component exist without participating in the 'role_of' relationship with any real datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: choice datatype\nDescription: choice datatype is a subclass of non-aggregate datatype, characterized by having values that represent a single value selected from a set of alternative datatypes. These alternative datatypes are differentiated by their correspondence to values from a tag-type, known as the tag datatype. Formally, a choice datatype has members such as tag-type, alternative-list, and a choice generator; it is subject to property restrictions requiring qualities such as exactness and being non-ordered. It supports specific operations, including Discriminant:choice, Tag:choice, Cast:choice, and Equal:choice, which facilitate the selection and identification of alternatives by tag values.\nAxiom: {'subClassOf': ['non-aggregate datatype'], 'propertyRestrictions': ['[has_quality some exact]', '[has_operation some Discriminant:choice]', '[has_quality some non-ordered]', '[has_operation some Cast:choice]', '[has_operation some Equal:choice]', '[has_member some tag-type]', '[has_member some alternative-list]', '[has_member some choice generator]', '[has_operation only Tag:choice]']}\nGenerated CQs:", "output": "Is every instance of 'choice' required to have at least one 'has_operation' relation to an entity of type Tag:choice? | Can a 'choice' exist without the 'has_operation' property relating it to Tag:choice? | Do all 'choice' entities necessarily participate in some 'has_operation' association with Tag:choice? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DAG datatype\nDescription: DAG datatype is specified as a subclass of labeled graph datatype, meaning it inherits all characteristics of a labeled graph datatype. Additionally, every DAG datatype must have at least one member that is a DAG datatype generator, as indicated by the property restriction [has_member some DAG datatype generator]. This ensures each instance of DAG datatype is associated with a generator tailored for directed acyclic graph structures.\nAxiom: {'subClassOf': ['labeled graph datatype'], 'propertyRestrictions': ['[has_member only DAG datatype generator]']}\nGenerated CQs:", "output": "Must a DAG datatype always have at least one 'has_member' relationship with a DAG datatype generator? | Can a DAG datatype exist without being associated to any DAG datatype generator through the 'has_member' property? | Is the presence of a 'has_member' link to a DAG datatype generator necessary for every DAG datatype instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: character datatype\nDescription: character datatype is defined as a subclass of non-numeric unordered primitive datatype. It is disjoint with discrete datatype and boolean datatype, ensuring that no datatype can be both a character datatype and either of those types. Members of the character datatype class are characterized by possessing at least one exact quality, supporting the Equal operation restricted to characters, and being associated with at least one character-set identifier. This formalization captures the essential properties of character datatypes, which are used to represent single text characters from specific character sets and are distinct from numeric or logical datatypes.\nAxiom: {'subClassOf': ['non-numeric unordered primitive datatype'], 'disjointWith': ['discrete datatype', 'boolean datatype'], 'propertyRestrictions': ['[has_quality some exact]', '[has_identifier some character-set identifier]', '[has_operation only Equal:character]']}\nGenerated CQs:", "output": "Is every character required to have at least one operation of type 'Equal'? | Does the ontology define that there exists an 'Equal' operation associated with each character via the 'has_operation' property? | Can a character exist without being linked to an 'Equal' operation through 'has_operation'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete datatype\nDescription: discrete datatype is a subclass of non-numeric unordered primitive datatype, and it is explicitly disjoint with boolean datatype, ensuring that no individual can be both a discrete datatype and a boolean datatype. Members of this class must have at least one member from a discrete-value-list, support at least the equality operation (Equal:discrete), and possess the quality of exactness. This formalization captures the distinct, non-numeric, unordered nature of discrete datatypes, characterized by well-defined, separate values and an emphasis on precise equality comparisons.\nAxiom: {'subClassOf': ['non-numeric unordered primitive datatype'], 'disjointWith': ['boolean datatype'], 'propertyRestrictions': ['[has_member some discrete-value-list]', '[has_operation some Equal:discrete]', '[has_quality only exact]']}\nGenerated CQs:", "output": "Is every instance with the discrete datatype required to possess at least one 'has_quality' relationship to 'exact'? | Can an entity classified by the discrete datatype lack any association via 'has_quality' to 'exact'? | Must the discrete datatype always be described by the property 'has_quality' with value 'exact'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: generated datatype generator\nDescription: generated datatype generator is defined as a subclass of datatype generator and is considered equivalent to either a non-aggregate generator or an aggregate generator. Members of this class must be associated, via the is_member_of property, with some generated datatype. The class is also described by the synonym \"datatype constructor.\"\nAxiom: {'subClassOf': ['datatype generator'], 'equivalentClass': ['(non-aggregate generator or aggregate generator)'], 'propertyRestrictions': ['[is_member_of only generated datatype]']}\nGenerated CQs:", "output": "Is it required that an entity classified under 'generated datatype' must be a member of at least one 'generated datatype' instance? | Does every instance of 'generated datatype' participate in the 'is_member_of' relationship with some instance of 'generated datatype'? | Can a 'generated datatype' exist without being linked via 'is_member_of' to any other 'generated datatype'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: integer base datatype\nDescription: integer base datatype is defined as a subclass of base type and is constrained by the axiom that it must play the role of some integer datatype. This means that every instance of integer base datatype is a specific kind of base type that is characterized by being related to at least one integer datatype through the role_of property.\nAxiom: {'subClassOf': ['base type'], 'propertyRestrictions': ['[role_of only integer datatype]']}\nGenerated CQs:", "output": "Is it required that the base datatype 'integer' has at least one role filled by an integer value? | Does every instance of the base datatype 'integer' necessarily possess the property 'role_of' relating it to an integer value? | Can an instance of the base datatype 'integer' exist without the property 'role_of' connecting it to an integer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record of primitives datatype\nDescription: record of primitives datatype is defined as a subclass of record (tuple) datatype. Members of this class are characterized by the property restriction that they must have at least one member that is a primitive field-list. This formalization ensures that any instance of record of primitives datatype represents a structured record whose fields are all of primitive types.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'propertyRestrictions': ['[has_member only primitive field-list]']}\nGenerated CQs:", "output": "Is every record of primitives required to have at least one member that is a primitive listed in the field list? | Does the definition of a record of primitives entail that it must possess a 'has_member' relationship with at least one entity in the primitive field-list? | Can a record of primitives exist without having the 'has_member' property connecting it to an element from the primitive field-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unlabeled dataset record datatype\nDescription: unlabeled dataset record datatype is defined as a subclass of record (tuple) datatype. Members of this class are characterized by the presence of at least one has_member relationship to an unlabeled dataset field-list, meaning each record contains a list of fields but without associated labels. This structure is suitable for representing data records in datasets where attribute names are absent.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'propertyRestrictions': ['[has_member only unlabeled dataset field-list]']}\nGenerated CQs:", "output": "Does every unlabeled dataset record necessarily have at least one has_member relationship to an unlabeled dataset field-list? | Is it required for unlabeled dataset records to include some member from the unlabeled dataset field-list? | Can an unlabeled dataset record exist without being related via has_member to any unlabeled dataset field-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set of integer datatype\nDescription: set of integer datatype is defined as a subclass of set datatype. Each instance of this class is constrained by the requirement that it has members, all of which are from the integer base datatype. This ensures that any individual classified as set of integer datatype can only contain integers as its elements.\nAxiom: {'subClassOf': ['set datatype'], 'propertyRestrictions': ['[has_member only integer base datatype]']}\nGenerated CQs:", "output": "Is it required for a set to include at least one member with an integer base datatype? | Must every instance of the set have the 'has_member' property assigned to some value of type integer? | Can a set of integer datatype propertyRestrictions exist without containing an integer as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: enumerated datatype\nDescription: enumerated datatype is defined as a subclass of non-numeric ordered primitive datatype, and is explicitly disjoint with both date and time datatype and ordinal datatype. As a discrete (synonymously, enumerated) datatype, it is characterized by having an explicit set of member values (enumerated-value-list) and supports specific operations such as equality checking (Equal:enumerated), successor determination (Successor:enumerated), and ordered comparison (InOrder:enumerated). Additionally, every enumerated datatype must possess qualities of being bounded (having finite limits) and exact (precisely defined), ensuring it only allows selection from a strictly defined, ordered set of non-numeric values.\nAxiom: {'subClassOf': ['non-numeric ordered primitive datatype'], 'disjointWith': ['date and time datatype', 'ordinal datatype'], 'propertyRestrictions': ['[has_operation some Equal:enumerated]', '[has_member some enumerated-value-list]', '[has_operation some Successor:enumerated]', '[has_quality some bounded]', '[has_operation some InOrder:enumerated]', '[has_quality only exact]']}\nGenerated CQs:", "output": "Are entities in the enumerated datatype required to have at least one 'has_quality' relationship to 'exact'? | Is it necessary that any instance of the enumerated datatype possesses the property 'has_quality' with the value 'exact'? | Can an instance be part of the enumerated datatype if it lacks the 'has_quality' property relating to 'exact'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: range\nDescription: range is defined as a subclass of value expression. Members of this class are characterized by having at least one association, through the property has_member, to both a lower bound and an upper bound. This formalization ensures that each instance of range must specify some lower and some upper bound, thereby representing a bounded interval or extent within the context of value expressions.\nAxiom: {'subClassOf': ['value expression'], 'propertyRestrictions': ['[has_member some upper bound]', '[has_member only lower bound]']}\nGenerated CQs:", "output": "Is every value of the property 'has_member' required to include at least one instance from the class 'lower bound'? | Does enforcing the property restriction 'has_member some lower bound' ensure that any entity linked by 'has_member' must have a member from the 'lower bound' class? | Can an entity have the 'has_member' property without referencing at least one 'lower bound' individual? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: extended datatype\nDescription: extended datatype is defined as a subclass of data representational model. It is characterized by possessing at least one datatype property (has_quality some datatype property), at least one subtype generator as a member (has_member some subtype generator), at least one value space attribute (has_attribute some value space), and at least one base type as a member (has_member some base type). The class is also associated with the synonym \"subtype\". This formalization ensures that any instance of extended datatype is richly described in terms of qualities, generative subtypes, value domains, and derived from fundamental base types.\nAxiom: {'subClassOf': ['data representational model'], 'propertyRestrictions': ['[has_quality some datatype property]', '[has_member some subtype generator]', '[has_member some base type]', '[has_attribute only value space]']}\nGenerated CQs:", "output": "Is every instance with the 'extended datatype propertyRestrictions' required to have at least one 'has_attribute' in the value space? | Can something classified under 'extended datatype propertyRestrictions' exist without possessing the 'has_attribute' property associated with any value space? | Does the existence of 'has_attribute' with any value from the specified space determine membership in 'extended datatype propertyRestrictions'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence of discrete datatype\nDescription: sequence of discrete datatype is defined as a subclass of sequence datatype, meaning it inherits all characteristics associated with sequence datatypes. Individuals of this class are further characterized by the property that each member of the sequence must be of a discrete base type. This restriction ensures that only elements classified as discrete base types are permitted as members in such sequences, differentiating this class from more general sequence datatypes that may include other types of elements.\nAxiom: {'subClassOf': ['sequence datatype'], 'propertyRestrictions': ['[has_member only discrete base type]']}\nGenerated CQs:", "output": "Must every sequence contain at least one member drawn from the discrete base type? | Is it required that a sequence always includes a value for the property 'has_member' sourced from a discrete base type? | Do all instances of the sequence have at least one association via 'has_member' to an element of the discrete base type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous  unordered aggregate datatype with variable size\nDescription: homogenous unordered aggregate datatype with variable size is a subclass of homogenous aggregate datatype with variable size. Each instance of this class must have at least one member that is an instance of homogenous unordered aggregate generator with variable size. This class groups together collections of elements that are all of the same type, where the order of elements is not significant, and the number of elements may vary.\nAxiom: {'subClassOf': ['homogenous aggregate datatype with variable size'], 'propertyRestrictions': ['[has_member only homogenous unordered aggregate generator with variable size]']}\nGenerated CQs:", "output": "Must a homogenous unordered aggregate datatype with variable size always include at least one homogenous unordered aggregate generator with variable size as a member? | Is it required that every homogenous unordered aggregate datatype with variable size is composed of one or more members which are homogenous unordered aggregate generators with variable size? | Does the presence of a homogenous unordered aggregate generator with variable size as a member determine the classification of a datatype as a homogenous unordered aggregate datatype with variable size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate field component\nDescription: aggregate field component is defined as a subclass of field component and is explicitly disjoint with primitive field component, meaning no instance can belong to both classes simultaneously. Every aggregate field component must play the role of or be associated with some aggregate datatype, as specified by the property restriction (role_of some aggregate datatype). This formalization captures that aggregate field components are complex field components characterized by their association with aggregate datatypes, distinguishing them from primitive field components.\nAxiom: {'subClassOf': ['field component'], 'disjointWith': ['primitive field component'], 'propertyRestrictions': ['[role_of only aggregate datatype]']}\nGenerated CQs:", "output": "Does every aggregate field necessarily include at least one component that plays the role_of some aggregate datatype? | Is it required for an aggregate field to have a component related through role_of to an aggregate datatype? | Can an aggregate field exist without any component that fulfills the role_of some aggregate datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: void datatype\nDescription: void datatype is a subclass of primitive datatype and is explicitly disjoint from non-numeric primitive datatype, numeric primitive datatype, and non-numeric unordered primitive datatype—no individual can belong to more than one of these categories. Members of the void datatype class are characterized by supporting at least the Equal:void operation, meaning comparison for equality is defined. This class formalizes the concept of a primitive datatype that does not represent numeric or non-numeric unordered values, distinguishing it within datatype hierarchies.\nAxiom: {'subClassOf': ['primitive datatype'], 'disjointWith': ['non-numeric primitive datatype', 'numeric primitive datatype', 'non-numeric unordered primitive datatype'], 'propertyRestrictions': ['[has_operation only Equal:void]']}\nGenerated CQs:", "output": "Is it a requirement for any void entity to have at least one has_operation relationship with an instance of Equal:void? | Does every void entity necessarily possess an operation of type Equal:void through the has_operation property? | Can a void exist without the has_operation property relating it to Equal:void? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous aggregate generator\nDescription: homogenous aggregate generator is defined as a subclass of aggregate generator and is equivalent to any generator that is an array generator, bag generator, sequence generator, or set generator. It is explicitly disjoint with heterogenous aggregate generator, meaning that no individual can belong to both classes simultaneously. Members of this class are further characterized by the property restriction that they must have at least one quality that is homogenous, indicating that the elements they generate are of a uniform type or nature.\nAxiom: {'subClassOf': ['aggregate generator'], 'disjointWith': ['heterogenous aggregate generator'], 'equivalentClass': ['(array generator or bag generator or sequence generator or set generator)'], 'propertyRestrictions': ['[has_quality only homogenous]']}\nGenerated CQs:", "output": "Is it required that every aggregate generator possesses the quality of being homogenous? | Does an aggregate generator necessarily exhibit some homogenous characteristic? | Can an aggregate generator be classified as homogenous if it lacks the property 'has_quality' with homogenous? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-numeric ordered primitive datatype\nDescription: non-numeric ordered primitive datatype is a subclass of non-numeric primitive datatype. Members of this class are characterized by possessing the quality of being ordered, meaning their values can be arranged in a specific sequence or order. This formalization specifies that any non-numeric primitive datatype classified here must inherently support order among its instances.\nAxiom: {'subClassOf': ['non-numeric primitive datatype'], 'propertyRestrictions': ['[has_quality only ordered]']}\nGenerated CQs:", "output": "Is it necessary for non-numeric ordered primitive datatype property restrictions to possess the 'has_quality' relationship with at least one instance of 'ordered'? | Can non-numeric ordered primitive datatype property restrictions exist without exhibiting some type of 'ordered' quality? | Does the presence of the 'has_quality' property with 'ordered' define all instances of non-numeric ordered primitive datatype property restrictions? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: direct access property\nDescription: direct access property is a subclass of access type and is disjoint with indirect access property, meaning no property can be both a direct access property and an indirect access property. It is formally defined as being equivalent to either index access or key access, specifying that any direct access property allows retrieval via a direct key or index rather than through intermediary steps.\nAxiom: {'subClassOf': ['access type'], 'disjointWith': ['indirect acess property'], 'equivalentClass': ['(index access and key access)']}\nGenerated CQs:", "output": "Is every instance with direct access property necessarily equivalent to either index access or key access? | Is direct access property defined as the union of index access and key access in the ontology? | Can something possessing direct access property be anything other than index access or key access? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target primitive field component\nDescription: target primitive field component is defined as a subclass of labeled dataset target field component, specializing the notion of dataset fields that serve as targets in labeled datasets. Individuals in this class must play the role of some real, discrete, or boolean datatype, meaning the value types associated with these components are restricted to basic primitive datatypes (real numbers, discrete values, or boolean values). This specification clarifies that target primitive field components are intended for use where target variables are representable by primitive datatypes.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some (real datatype and discrete datatype and boolean datatype)]']}\nGenerated CQs:", "output": "Is every target primitive field component required to participate in the role_of relationship with a real, discrete, or boolean datatype? | Can a target primitive field component have a role_of property with something that is not a real, discrete, or boolean datatype? | Are real datatype, discrete datatype, and boolean datatype the only types permitted in the role_of property for target primitive field components? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target boolean field component\nDescription: target boolean field component is defined as a subclass of labeled dataset target field component. It is further characterized by the restriction that it must play the role of some boolean datatype, meaning instances of this class are components within a labeled dataset that represent target fields specifically associated with boolean data types. This ensures that the target values handled by this component are strictly boolean (i.e., true or false).\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only boolean datatype]']}\nGenerated CQs:", "output": "Is every instance of 'target' required to have the 'component' property with at least one value linked to the role_of property associated with a boolean datatype? | Can 'target' possess the 'component' property only if there is a related role_of property with values of boolean type? | Does the definition of 'target' entail that the 'component' property must always reference some boolean value through the role_of property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target discrete field component\nDescription: target discrete field component is defined as a subclass of labeled dataset target field component. It is characterized by having a role that is associated with some discrete datatype, meaning the data values it represents are distinct and separate (e.g., categories or integers) rather than continuous. This ensures that every target discrete field component specifically involves target fields where the underlying data type is discrete.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only discrete datatype]']}\nGenerated CQs:", "output": "Is it required that every target discrete field component is associated with some role_of discrete datatype? | Can a target discrete field component exist without having the role_of property with a discrete datatype? | Does having the role_of property with at least one discrete datatype qualify an entity as a target discrete field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target real field component\nDescription: target real field component is a subclass of labeled dataset target field component. Individuals of this class are characterized by the restriction that they must play the role of some real datatype. This means that any target real field component represents a field component used as a target in labeled datasets, specifically associated with or representing real-valued data.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only real datatype]']}\nGenerated CQs:", "output": "Is every target real field component required to play the role_of property with at least one real datatype? | Can a target real field component exist without having a role_of relationship to any real datatype? | Does the ontology restrict target real field components to only have role_of relationships with real datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target sequence of real field component\nDescription: target sequence of real field component is a subclass of labeled dataset target field component. Members of this class are characterized by having the role_of some sequence of real datatype, meaning that each instance serves as a target field in a labeled dataset and fills a role associated with a sequence of real numbers (e.g., real-valued vectors or time series). This formalization restricts class membership to those dataset components whose target data are structured as sequences of real numbers.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only sequence of real datatype]']}\nGenerated CQs:", "output": "Is every target sequence of real field component required to be associated by the role_of property with at least one value of the real datatype? | Can a target sequence of real field component exist without possessing the role_of relation to elements of the real type? | Does the class target sequence of real field component necessarily have a role_of property restricted only to instances of the real datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target hierarchical field component\nDescription: target hierarchical field component is defined as a subclass of labeled dataset target field component. Members of this class are further characterized by the axiom that they fulfill the role_of relationship with some instance of either a tree datatype or a directed acyclic graph (DAG) datatype. This indicates that such components specifically serve as target fields in labeled datasets, where the targets are drawn from hierarchical data structures represented as either trees or DAGs.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some (tree datatype and DAG datatype)]']}\nGenerated CQs:", "output": "Is every target hierarchical field component necessarily associated through the 'role_of' property with either a tree datatype or a DAG datatype? | Can a target hierarchical field component have the 'role_of' property linked to both a tree datatype and a DAG datatype? | Does the presence of a 'role_of' relationship to any datatype other than tree or DAG preclude the entity from being classified as a target hierarchical field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target DAG field component\nDescription: target DAG field component is defined as a subclass of labeled dataset target field component and is further characterized by the property restriction that it must serve in the role_of some DAG datatype. This means that any instance of target DAG field component is specifically related to Directed Acyclic Graph (DAG) datatypes, describing target fields in labeled datasets that are intended to represent or interact with DAG structures.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only DAG datatype]']}\nGenerated CQs:", "output": "Is every target DAG field component required to have at least one property that fulfills the role_of some DAG datatype condition? | Can a target DAG field component lack the role_of relationship to any DAG datatype? | Does the existence of a role_of connection to a DAG datatype define the target DAG field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target tree field component\nDescription: target tree field component is defined as a subclass of labeled dataset target field component. Members of this class are characterized by the restriction that they must play the role of some tree datatype. This formalization specifies that any target tree field component is associated with a structure fundamentally based on tree datatypes, differentiating it from other target field components by its reliance on hierarchical or tree-structured data.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only tree datatype]']}\nGenerated CQs:", "output": "Is every target tree field component required to have at least one property that serves the role of some tree datatype? | Can a target tree field component exist without a property that plays the role of a tree datatype? | Does the target tree field component necessarily involve a property that is in the role_of relationship with a tree datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target set of discrete field component\nDescription: target set of discrete field component is defined as a subclass of labeled dataset target field component. Every individual in this class must play the role of some set of discrete datatype, meaning each component serves as a target field in a labeled dataset whose values are constrained to a discrete set. This ensures that the target values for this component are not continuous but instead belong to a well-defined set, aligning with tasks such as multi-class classification in machine learning.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only set of discrete datatype]']}\nGenerated CQs:", "output": "Must every target set of discrete field component have at least one role_of relation to a set of discrete datatype? | Is it required for the target set of discrete field component to be connected, through the role_of property, to a set of discrete datatype? | Does the existence of a target set of discrete field component imply that it plays the role_of with some set of discrete datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target record of primitives field component\nDescription: target record of primitives field component is defined as a subclass of labeled dataset target field component. Every instance of this class has the property that it plays the role_of at least one record of primitives datatype. This formalization ensures that any target record of primitives field component is associated, through the role_of relationship, with data characterized as a record of primitives datatype, linking target fields within labeled datasets to primitive data representations.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only record of primitives datatype]']}\nGenerated CQs:", "output": "Does the target record of primitives require the component property 'role_of' to be associated with at least one individual of type record of primitives datatype? | Is it necessary for each target record of primitives to have the 'role_of' property filled by some record of primitives datatype? | Can a target record of primitives exist without any 'role_of' relationship to a record of primitives datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target record of boolean field component\nDescription: target record of boolean field component is defined as a subclass of labeled dataset target field component. Members of this class are characterized by the property that they play the role_of some record of boolean datatype, indicating that these components specifically serve as targets in datasets where the associated data is restricted to boolean (true/false) values. This formalization ensures that any instance of this class must be linked to records containing only boolean-typed data, supporting clear distinction in data modeling for boolean-labeled target fields.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only record of boolean datatype]']}\nGenerated CQs:", "output": "Is every target record required to have at least one property restriction where the role_of property relates to a record with a boolean datatype? | Can a target record exist without having any role_of property pointing to a record with a boolean value? | Does the ontology allow a target record to have role_of relationships only with records of non-boolean datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target record of discrete field component\nDescription: target record of discrete field component is a subclass of labeled dataset target field component, and is characterized by a property restriction indicating it must play the role of some record of discrete datatype. This means that any instance of this class represents a target field component within a labeled dataset, specifically one that is associated with a record whose datatype is discrete.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only record of discrete datatype]']}\nGenerated CQs:", "output": "Does every target record of a discrete field component necessarily relate via 'propertyRestrictions' to at least one record of a discrete datatype through the role_of property? | Is it required that for each target record of a discrete field component, there exists a property restriction involving role_of some record of a discrete datatype? | Can a target record of a discrete field component exist without being associated, via propertyRestrictions, through role_of, to any record of a discrete datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target structured field component\nDescription: target structured field component is a subclass of labeled dataset target field component. Members of this class are further characterized by the requirement that they play some role in relation to a structured data type; specifically, they must be associated with one or more of the following datatypes: table, array, class, sequence, bag, or set. This definition ensures that any target structured field component is a labeled field designated for structured or collection-type datatypes within the context of a dataset.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some (table datatype and array datatype and class datatype and sequence datatype and bag datatype and set datatype)]']}\nGenerated CQs:", "output": "Is every target structured field component required to have a role_of relationship with at least one of the following datatypes: table, array, class, sequence, bag, or set? | Does the definition of target structured field component necessitate that its role_of property is fulfilled by at least one datatype among table, array, class, sequence, bag, or set? | Can a target structured field component possess a role_of relation to any datatype beyond table, array, class, sequence, bag, or set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive record of boolean field component\nDescription: A descriptive record of boolean field component is defined as a subclass of labeled dataset descriptive field component. Any instance of this class must play the role of some record associated with a boolean datatype, signifying that its descriptive information pertains specifically to data fields that store boolean values.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of only record of boolean datatype]']}\nGenerated CQs:", "output": "Must every descriptive record of a boolean field component have at least one 'role_of' relation to a record of boolean datatype? | Is it required that any descriptive record of a boolean field component be linked by 'role_of' only to records of boolean datatype? | Are there descriptive records of boolean field components that lack any 'role_of' connection with a record of boolean datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive strucured field component\nDescription: descriptive structured field component is defined as a subclass of labeled dataset descriptive field component. It is characterized by having a role that must be associated with at least one of the following datatypes: array datatype, class datatype, sequence datatype, bag datatype, or set datatype. This ensures that instances of descriptive structured field component function specifically in contexts involving structured data representations such as arrays, classes, sequences, bags, or sets.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of some (array datatype and class datatype and sequence datatype and bag datatype and set datatype)]']}\nGenerated CQs:", "output": "Must every descriptive structured field component play a role in at least one array, class, sequence, bag, or set datatype? | Is it required that a descriptive structured field component serves in a role involving only array, class, sequence, bag, or set datatypes? | Can a descriptive structured field component have the role_of property with any datatype type other than array, class, sequence, bag, or set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: procedure-paremeter declaration\nDescription: procedure-parameter declaration is a class characterized by the requirement that its instances must have at least one member that is a parameter and at least one member that is a direction. No superclass is specified, and there are no disjointness axioms defined. This formalization ensures that any individual classified as a procedure-parameter declaration is necessarily associated with both a parameter and a direction through the has_member property.\nAxiom: {'subClassOf': ['specification'], 'propertyRestrictions': ['[has_member some parameter]', '[has_member some direction]']}\nGenerated CQs:", "output": "Is procedure-parameter declaration classified as a kind of specification? | Which specifications include procedure-parameter declaration as a more specific type? | Under what broader concepts can procedure-parameter declaration be grouped in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: datatype role\nDescription: datatype role is defined as a subclass of role, inheriting all characteristics of the broader role class. There are no additional property restrictions specified for datatype role, so its classification is determined solely by its status as a type of role.\nAxiom: {'subClassOf': ['role'], 'propertyRestrictions': ['[role_of some datatype]']}\nGenerated CQs:", "output": "Is it required that every instance with the role 'role_of' is associated with a value of datatype? | Does the property 'role_of' necessarily relate an individual only to values belonging to datatype? | Can an entity be considered within the scope if its 'role_of' relation points to something other than the specified datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: range subtype generator\nDescription: range subtype generator is a class whose members are defined by the existence of at least one relationship via the property has_member to an individual of the class range. This means that any instance of range subtype generator must be associated with at least one range individual. There are no subclass or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['subtype generator'], 'propertyRestrictions': ['[has_member some range]']}\nGenerated CQs:", "output": "Is every range subtype generator necessarily classified as a kind of subtype generator? | Which entities fall under the more specific grouping of subtype generator, such as the range subtype generator? | Into what broader categories within the ontology is range subtype generator subsumed? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-directed labeled graph datatype\nDescription: non-directed labeled graph datatype is defined as a subclass of defined datatype. Any instance of this class must have at least one member that is a graph aggregate component, indicating that its values are aggregates composed of graph elements. This definition formalizes the requirement that all non-directed labeled graph datatypes consist of aggregate components relevant to graph structures.\nAxiom: {'subClassOf': ['defined datatype'], 'propertyRestrictions': ['[has_member some graph aggregate component]', '[has_member some non-directed labeled graph generator]']}\nGenerated CQs:", "output": "Is every non-directed labeled graph required to have at least one member that is a non-directed labeled graph generator? | Can a non-directed labeled graph exist without having a has_member relationship to a non-directed labeled graph generator? | Does the presence of the has_member relationship to a non-directed labeled graph generator define membership within a non-directed labeled graph? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous aggregate generator with variable size\nDescription: A homogenous aggregate generator with variable size is defined as any entity that has the quality of variable size. It is not specified as a subclass of another class, but every instance must possess some quality indicating its size can change or vary.\nAxiom: {'subClassOf': ['homogenous aggregate generator'], 'propertyRestrictions': ['[has_quality some variable size]']}\nGenerated CQs:", "output": "Is homogenous aggregate generator with variable size categorized under homogenous aggregate generator? | Which specific types fall under homogenous aggregate generator, such as those with variable size? | What broader classes encompass homogenous aggregate generator with variable size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: class generator\nDescription: class generator is defined as a subclass of heterogenous aggregate generator and is explicitly disjoint with record generator, ensuring that no individual can simultaneously belong to both classes. Members of this class are characterized by having the following qualities: key access, unordered aggregate structure, allowance of non-unique values, one-dimensionality, and a fixed size. These property restrictions formalize the structural and access properties of the class generator, distinguishing it clearly within the ontology.\nAxiom: {'subClassOf': ['heterogenous aggregate generator'], 'disjointWith': ['record generator', 'table generator'], 'propertyRestrictions': ['[has_quality some key access]', '[has_quality some unordered aggregate]', '[has_quality some non-unique values]', '[has_quality some one dimensional]', '[has_quality some fixed size]']}\nGenerated CQs:", "output": "What formal separation is defined between class generator and table generator in the ontology? | Is there any instance that can be classified as both a class generator and a table generator? | Which other entities are specified as being incompatible with table generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence generator\nDescription: sequence generator is defined as a subclass of homogenous aggregate generator with variable size. Members of this class are characterized by possessing the qualities of: containing non-unique values (allowing repeated elements), forming an ordered aggregate (where the arrangement of elements matters), and supporting access by position (enabling retrieval of elements based on their position in the sequence). There are currently no explicit disjointness restrictions specified for this class.\nAxiom: {'subClassOf': ['homogenous aggregate generator with variable size'], 'disjointWith': ['homogenous unordered aggregate generator with variable size'], 'propertyRestrictions': ['[has_quality some non-unique values]', '[has_quality some ordered aggregate]', '[has_quality some position access]']}\nGenerated CQs:", "output": "What logical separation is defined between sequence generators and homogenous unordered aggregate generators with variable size in the ontology? | Is any system classified as both a sequence generator and a homogenous unordered aggregate generator with variable size? | Which generator classes are declared as incompatible with homogenous unordered aggregate generators with variable size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: pointer generator\nDescription: pointer generator is a class defined by the restriction that its members must be associated with at least one pointer datatype via the property is_member_of. This means that any individual of the pointer generator class must be linked to some instance of pointer datatype, ensuring participation in at least one pointer datatype group. There are no specified superclasses for pointer generator.\nAxiom: {'subClassOf': ['non-aggregate generator'], 'propertyRestrictions': ['[is_member_of some pointer datatype]']}\nGenerated CQs:", "output": "Does pointer generator fall under the classification of non-aggregate generator? | Which types of generators are subclasses of non-aggregate generator, such as pointer generator? | What broader generator categories include pointer generator as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record (tuple) datatype\nDescription: record (tuple) datatype is defined as a subclass of heterogenous aggregate datatype. Instances of this class must possess at least one non-numeric quality, exhibit exactness, and are explicitly non-ordered. Each record (tuple) is composed of members that include at least one record generator and a field-list, reflecting its structure as an aggregation of potentially diverse fields. Additionally, records (tuples) are characterized by operations such as equality comparison (Equal:record) and field replacement (FieldReplace:record), which are applicable specifically to this datatype. These restrictions ensure that records (tuples) function as non-ordered, heterogenous aggregates with field-based structure and well-defined operational behaviors.\nAxiom: {'subClassOf': ['heterogenous aggregate datatype'], 'propertyRestrictions': ['[has_quality some non-numeric]', '[has_operation some Equal:record]', '[has_quality some exact]', '[has_quality some non-ordered]', '[has_member some record generator]', '[has_operation some FieldReplace:record]', '[has_member some field-list]', '[has_operation some FieldSelect:record]']}\nGenerated CQs:", "output": "Is every instance of record (tuple) required to have at least one has_operation property relating to a FieldSelect:record? | Can a record (tuple) exist without any has_operation connection to a FieldSelect:record? | Does the ontology specify that a record (tuple) must always participate in at least one has_operation relationship with a FieldSelect:record? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate imposed ordering\nDescription: aggregate imposed ordering is defined as a subclass of aggregate generator property, and is equivalent to either an ordered aggregate or an unordered aggregate. The class is explicitly disjoint with aggregate-imposed identifier uniqueness, homogenity, agregate size, component mandatoriness, structurness, recursiveness, and access type, guaranteeing that no individual can simultaneously belong to any of these classes. This formalization ensures that aggregate imposed ordering represents a specific generator property related to the ordering characteristic of aggregates, distinct from other aggregate-related properties.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['aggregate-imposed identifier uniqueness', 'homogenity', 'agregate size', 'component mandatoriness', 'structurness', 'recursiveness', 'access type', 'uniqueness'], 'equivalentClass': ['(ordered aggregate or unordered aggregate)']}\nGenerated CQs:", "output": "What classification differentiates aggregate imposed ordering from uniqueness within the ontology? | Is it feasible for a concept to exemplify both aggregate imposed ordering and uniqueness simultaneously? | Which concepts are explicitly incompatible with uniqueness by disjointness declarations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: agregate size\nDescription: aggregate size is defined as a subclass of aggregate generator property and is formally disjoint with the classes uniqueness, component mandatoriness, structurness, and recursiveness—ensuring no individual can belong to aggregate size and any of those classes simultaneously. Furthermore, aggregate size is equivalent to the union of fixed size and variable size, meaning every aggregate size is either a fixed size or a variable size. This class characterizes properties describing whether the size of an aggregate is constant or may vary, distinguishing it from other structural aggregate properties.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['uniqueness', 'component mandatoriness', 'structurness', 'recursiveness', 'access type'], 'equivalentClass': ['(fixed size or variable size)']}\nGenerated CQs:", "output": "What conceptual separation is defined between aggregate size and access type in the ontology? | Is there an instance that can simultaneously belong to both aggregate size and access type categories? | Which ontology categories are specified as disjoint with aggregate size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: structurness\nDescription: structurness is defined as a subclass of aggregate generator property and is mutually exclusive (disjoint) with recursiveness, meaning no instance can simultaneously possess both properties. Structurness is equivalent to the union of structured, unstructured, or semi-structured classes; thus, any entity classified under structurness must be classified as one of these three types and vice versa. This ensures a comprehensive coverage of data organizational forms within the scope of aggregate generator properties, while clearly differentiating from recursive properties.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['recursiveness', 'access type'], 'equivalentClass': ['(structured or unstructured or semi-structured)']}\nGenerated CQs:", "output": "How does the ontology distinguish between structurness and access type? | Is it permissible for an entity to be classified simultaneously as structurness and access type? | Which classes are specified as mutually exclusive with access type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dimensionality\nDescription: dimensionality is defined as a subclass of aggregate generator property, indicating that it represents a specific type of property associated with aggregate generators. This classification establishes that dimensionality inherits all characteristics and constraints of aggregate generator properties, but no additional equivalence to other classes is explicitly specified.\nAxiom: {'subClassOf': ['aggregate generator property'], 'equivalentClass': ['(one dimensional or two dimensional or multi dimensional)']}\nGenerated CQs:", "output": "Is dimensionality equivalent to the union of one dimensional, two dimensional, and multi dimensional classes? | Are all instances of dimensionality necessarily instances of either one dimensional, two dimensional, or multi dimensional? | Does dimensionality include any concepts apart from one dimensional, two dimensional, and multi dimensional? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined datatype\nDescription: defined datatype is a class characterized by the requirement that its members must have at least one has_member relationship to an individual of the class defined generator, and at least one has_member relationship to an individual of the class defined datatype parameter-list. There are no further subclass or property restrictions specified, indicating that the core definition relies on these membership conditions.\nAxiom: {'subClassOf': ['datatype'], 'propertyRestrictions': ['[has_member some defined generator]', '[has_member some defined datatype parameter-list]']}\nGenerated CQs:", "output": "Is defined datatype categorized under the broader class of datatype? | What are the specific subclasses found within datatype, such as defined datatype? | Which higher-level categories does defined datatype belong to in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tag-type\nDescription: tag-type is defined as a subclass of datatype role. This means every instance of tag-type is also an instance of datatype role, inheriting its characteristics, but no additional property restrictions or differentiating axioms are specified for tag-type.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[role_of some datatype]']}\nGenerated CQs:", "output": "Must every tag of type 'propertyRestrictions' necessarily have at least one 'role_of' relationship with some datatype? | Is it required for instances of propertyRestrictions to be associated, via the 'role_of' property, with one or more datatypes? | Can a propertyRestrictions tag exist without participating in a 'role_of' connection to any datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: pointer-element-type\nDescription: pointer-element-type is a class defined by the restriction that its members must play the role of at least one datatype (i.e., each pointer-element-type is characterized as being in the role_of some datatype). No further subclass or disjointness relationships are specified.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[role_of some datatype]']}\nGenerated CQs:", "output": "Is pointer-element-type categorized under the broader class of datatype role? | Which entity types are more specific instances of datatype role, such as pointer-element-type? | What are the parent classes that pointer-element-type is associated with? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: base type\nDescription: base type is defined as a subclass of datatype role, characterized by the property that any base type must be a member of at least one of the following datatypes: array datatype, sequence datatype, bag datatype, set datatype, or extended datatype. This ensures all individuals classified as base type participate in at least one of these specified datatype structures.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[is_member_of some (array datatype or sequence datatype or bag datatype or set datatype or extended datatype)]', '[role_of some datatype]']}\nGenerated CQs:", "output": "Is it required that base type always has the property propertyRestrictions with at least one value of role_of? | Can every instance of base type be associated with propertyRestrictions only if it involves some role_of datatype? | Does the existence of propertyRestrictions on base type guarantee the involvement of role_of datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boolean field-list\nDescription: boolean field-list is defined as a subclass of field-list, where every instance must have at least one member that is a boolean field component. There are no specified disjointness constraints with other classes. This formalizes that a boolean field-list is distinguished by the presence of boolean field components among its members.\nAxiom: {'subClassOf': ['field-list'], 'disjointWith': ['discrete field-list'], 'propertyRestrictions': ['[has_member some boolean field component]']}\nGenerated CQs:", "output": "How does the ontology differentiate boolean field-list from discrete field-list? | Is there a scenario where a field-list instance can be both boolean and discrete? | Which field-list types are declared as mutually exclusive with boolean field-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled dataset field-list\nDescription: labeled dataset field-list is defined as a subclass of field-list, with the additional constraint that every instance must have at least one member that is a labeled dataset target field component. This ensures that any labeled dataset field-list necessarily contains components specifically designated as labeled dataset target field components among its members.\nAxiom: {'subClassOf': ['field-list'], 'propertyRestrictions': ['[has_member some labeled dataset target field component]', '[has_member some labeled dataset descriptive field component]']}\nGenerated CQs:", "output": "Must every labeled dataset include at least one member that is a labeled dataset descriptive field component? | Does a labeled dataset necessarily have a 'has_member' relationship with at least one labeled dataset descriptive field component? | Is it required for every labeled dataset to possess a field that is classified as a labeled dataset descriptive field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: niladic operation\nDescription: niladic operation is defined as a subclass of characterizing operation, meaning it inherits all properties of characterizing operations. It is also explicitly disjoint with n-adic operation, ensuring that no individual can be both a niladic operation and an n-adic operation. This formalization characterizes niladic operation as a distinct type of characterizing operation that is fundamentally separate from operations involving any number of arguments.\nAxiom: {'subClassOf': ['characterizing operation'], 'disjointWith': ['n-adic operation', 'monadic operation']}\nGenerated CQs:", "output": "How are niladic operations and monadic operations conceptually differentiated within the ontology? | Is there any operation that can be classified as both niladic and monadic? | Which operation types are explicitly specified as incompatible with monadic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete-value-list\nDescription: discrete-value-list is defined as a subclass of list specification. This means it represents a specific type of list specification, inheriting all characteristics of list specification, but does not introduce any additional property restrictions or disjointness conditions.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member some discrete-value identifier]']}\nGenerated CQs:", "output": "Is it required that a discrete-value-list always contains at least one member of type discrete-value identifier? | Can a discrete-value-list exist without having any has_member relationship to a discrete-value identifier? | Does the presence of a has_member relationship to a discrete-value identifier define the membership criteria for discrete-value-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined datatype parameter-list\nDescription: defined datatype parameter-list is a subclass of list specification. This means that every defined datatype parameter-list is considered a specific kind of list specification, inheriting all general characteristics of list specifications without introducing any additional property restrictions.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member some defined datatype parameter]']}\nGenerated CQs:", "output": "Is it required for a parameter-list to have at least one has_member relationship with a defined datatype parameter? | Can a parameter-list exist without including any defined datatype parameter as a member? | Does every instance of parameter-list necessarily possess a has_member link with some defined datatype parameter? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index-type list\nDescription: index-type list is defined as a subclass of list specification, indicating that every index-type list is a specialized form of list specification. There are no additional property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member some index-type]']}\nGenerated CQs:", "output": "Must an index-type list always include at least one member that is an index-type? | Can an index-type list be valid if it does not have any member of type index-type? | Is every index-type list required to have the has_member property relating it to an index-type individual? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tree datatype generator\nDescription: tree datatype generator is defined as a subclass of directed labeled graph datatype generator. This indicates that every tree datatype generator is a specialized form of directed labeled graph datatype generator, inheriting its characteristics and constraints. No explicit disjointness with other classes is asserted.\nAxiom: {'subClassOf': ['directed labeled graph datatype generator'], 'disjointWith': ['DAG datatype generator']}\nGenerated CQs:", "output": "What is the ontological distinction between tree datatype generators and DAG datatype generators? | Is there any entity categorized under both tree datatype generator and DAG datatype generator? | Which classes are declared as disjoint with DAG datatype generator in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: scaled datatype\nDescription: scaled datatype is defined as a subclass of numeric ordered primitive datatype, and is explicitly disjoint with integer datatype, meaning an individual cannot simultaneously be an instance of both. Members of scaled datatype are characterized by the presence of certain qualities and members, including some unbounded and exact qualities, as well as the inclusion of scaled radix and scaled factor as members. The class is further defined by its ability to support specific operations: Divide:scaled, Multiply:scaled, Add:scaled, Equal:scaled, Negate:scaled, Round:scaled, and InOrder:scaled. These axioms ensure that any instance of scaled datatype possesses precise numeric capabilities, distinct from integer datatypes, and is designed to support a variety of scaling and arithmetic operations.\nAxiom: {'subClassOf': ['numeric ordered primitive datatype'], 'disjointWith': ['integer datatype', 'rational datatype'], 'propertyRestrictions': ['[has_quality some unbounded]', '[has_operation some Divide:scaled]', '[has_operation some InOrder:scaled]', '[has_operation some Multiply:scaled]', '[has_member some scaled radix]', '[has_quality some exact]', '[has_operation some Negate:scaled]', '[has_operation some Round:scaled]', '[has_operation some Add:scaled]', '[has_member some scaled factor]', '[has_operation some Equal:scaled]']}\nGenerated CQs:", "output": "What ontological distinction is specified between scaled datatypes and rational datatypes? | Is any datatype instance allowed to be classified as both scaled and rational? | Which datatypes are specified as mutually exclusive with rational datatypes in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: rational datatype\nDescription: rational datatype is a subclass of numeric ordered primitive datatype. It possesses numerical, ordered, and exact qualities, indicating its values are precise, can be compared according to an order, and are of a numerical nature. Members of this class support a range of operations restricted to rational types, including addition, multiplication, negation, reciprocation, promoting to a different form, testing equality, ensuring non-negativity, and ordering. These axioms collectively formalize rational datatypes as exact, ordered primitive types over which rational-specific numeric operations are defined.\nAxiom: {'subClassOf': ['numeric ordered primitive datatype'], 'propertyRestrictions': ['[has_operation some Multiply:rational]', '[has_operation some Reciprocal:rational]', '[has_quality some numeric]', '[has_operation some NonNegative:rational]', '[has_quality some ordered]', '[has_operation some Promote:rational]', '[has_operation some Equal:rational]', '[has_operation some Add:rational]', '[has_operation some Negate:rational]', '[has_quality some exact]', '[has_operation some InOrder:rational]', '[has_quality some unbounded]']}\nGenerated CQs:", "output": "Is every instance with the rational datatype required to possess at least one quality via the 'has_quality' property? | Can an entity of rational datatype have the 'has_quality' attribute associated with any type of quality without restriction? | Does the rational datatype necessarily exhibit the existence of some related quality as described by the 'has_quality' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: exactness\nDescription: exactness is defined as a subclass of datatype property, and is designated as disjoint from numericalness, cardinality, boundedness, and equality, ensuring that no individual can belong to both exactness and any of these classes simultaneously. exactness is equivalent to the union of approximate and exact, meaning that any instance of exactness must also be either an instance of approximate or of exact. This models properties that describe whether or not a value or measure is exact or approximate, without overlapping with numericalness, cardinality, boundedness, or equality.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['numericalness', 'cardinality', 'boundedness', 'equality', 'order'], 'equivalentClass': ['(approximate or exact)']}\nGenerated CQs:", "output": "How are the concepts of exactness and order separated within the ontology? | Is there any entity that can be simultaneously classified as exactness and order? | Which classes are specified as incompatible with order in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: order\nDescription: order is a subclass of datatype property, representing properties whose values impose an ordering. It is explicitly disjoint with boundedness, ensuring that no individual can be both an order and a boundedness property. The class is further defined as equivalent to the union of ordered or non-ordered properties, meaning any instance of order must be either ordered or non-ordered, but not both. This characterization distinguishes order as a fundamental property related to the arrangement of data values, distinct from properties concerned with data bounds.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['boundedness', 'equality'], 'equivalentClass': ['(ordered or non-ordered)']}\nGenerated CQs:", "output": "How does the ontology formally differentiate order from equality? | Is it allowable for a concept to be simultaneously classified under both order and equality categories? | Which other mathematical properties are specified as disjoint with equality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete field component\nDescription: discrete field component is defined as a subclass of primitive field component and is explicitly disjoint with boolean field component—no individual can belong to both classes. Every discrete field component must be associated, via the role_of property, with at least one discrete datatype. This ensures that discrete field components specifically relate to discrete datatypes and are distinguished from boolean field components within the ontology.\nAxiom: {'subClassOf': ['primitive field component'], 'disjointWith': ['boolean field component', 'real field component'], 'propertyRestrictions': ['[role_of some discrete datatype]']}\nGenerated CQs:", "output": "Are any entities defined as both discrete field components and real field components? | Which ontology classes are explicitly incompatible with real field components? | What type of exclusivity exists between discrete field components and real field components? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: pointer datatype\nDescription: pointer datatype is a class characterized by several defining properties: it must have at least one member that is a pointer generator and at least one member that is a pointer-element-type. Instances are required to possess the qualities of being non-ordered, non-numeric, and exact. Additionally, pointer datatypes must support the operations \"Equal:pointer\" and \"Dereference:pointer\". No further subclass constraints are specified.\nAxiom: {'subClassOf': ['non-aggregate datatype'], 'propertyRestrictions': ['[has_quality some non-ordered]', '[has_quality some non-numeric]', '[has_member some pointer generator]', '[has_member some pointer-element-type]', '[has_operation some Equal:pointer]', '[has_operation some Dereference:pointer]', '[has_quality some exact]']}\nGenerated CQs:", "output": "Is pointer datatype encompassed by the category of non-aggregate datatype? | Which datatypes are classified as more specific types under non-aggregate datatype, including pointer datatype? | To what broader datatype categories does pointer datatype belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tree datatype\nDescription: tree datatype is defined as a subclass of labeled graph datatype. Every tree datatype is required to have at least one member that is an instance of tree datatype generator, as indicated by the property restriction (has_member some tree datatype generator). There are no explicit disjointness constraints specified for this class. This formalization captures the requirement that tree datatypes are structured within the hierarchy of labeled graph datatypes and are generated or constructed via specific tree datatype generators.\nAxiom: {'subClassOf': ['labeled graph datatype'], 'disjointWith': ['DAG datatype'], 'propertyRestrictions': ['[has_member some tree datatype generator]']}\nGenerated CQs:", "output": "What logical separation is specified between tree datatype and DAG datatype in the ontology? | Is any structure permitted to be classified as both tree datatype and DAG datatype? | Which datatypes are set as disjoint with DAG datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: lower bound\nDescription: lower bound is a class whose instances are required to have exactly one value for the property has-value, and this value must be of type xsd:integer. This ensures each member of lower bound is associated with precisely one integer value.\nAxiom: {'subClassOf': ['bound'], 'propertyRestrictions': ['[has-value exactly 1 xsd:integer]']}\nGenerated CQs:", "output": "Is lower bound categorized as a type of bound? | Which specific subclasses fall under the general class bound? | What broader classes encompass lower bound? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index lowerbound\nDescription: index lowerbound is defined as a subclass of bound. This means that every index lowerbound is a type of bound, inheriting all characteristics and constraints associated with the bound class. There are no additional property restrictions specified for this class.\nAxiom: {'subClassOf': ['bound'], 'propertyRestrictions': ['[has-value exactly 1 xsd:integer]']}\nGenerated CQs:", "output": "Is each instance of index required to have the property lowerbound with exactly one integer value? | Can an index possess more than one lowerbound value assigned as an integer? | Is it necessary that the lowerbound property of index refers to one and only one xsd:integer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined generator\nDescription: defined generator is a subclass of datatype generator. This means every defined generator is necessarily a datatype generator, inheriting all its characteristics, but may also have additional distinguishing properties or constraints not specified here.\nAxiom: {'subClassOf': ['datatype generator'], 'propertyRestrictions': ['[is_member_of some defined datatype]']}\nGenerated CQs:", "output": "Is it necessary for a generator to have the property 'is_member_of' with at least one defined datatype? | Can a generator exist without being a member of any defined datatype? | Does a generator always possess an association to some defined datatype through the 'is_member_of' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real base type\nDescription: real base type is a class whose members are defined by their participation in the role_of property with at least one instance of the real datatype. This means every individual of real base type must be in a role_of relation with some real datatype, but there are no additional subclass relationships or property restrictions specified.\nAxiom: {'subClassOf': ['base type'], 'propertyRestrictions': ['[role_of some real datatype]']}\nGenerated CQs:", "output": "Does real base type fall under the classification of base type? | Which types are directly specified as specializations of base type, such as real base type? | What is the immediate superclass of real base type within the type hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record of real datatype\nDescription: record of real datatype is defined as a subclass of record (tuple) datatype. Any instance of this class must have at least one member that is a real field-list, as specified by the property restriction [has_member some real field-list]. This class represents composite data structures in which at least one component is drawn from the set of real-number-based data fields.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'disjointWith': ['record of discrete datatype'], 'propertyRestrictions': ['[has_member some real field-list]']}\nGenerated CQs:", "output": "How does the ontology differentiate between records of real datatype and records of discrete datatype? | Is there any instance that can be considered both a record of real datatype and a record of discrete datatype? | Which other record types are formally specified as disjoint with records of discrete datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled dataset record datatype\nDescription: labeled dataset record datatype is defined as a subclass of record (tuple) datatype. This means every instance of labeled dataset record datatype is also a record (tuple) datatype, inheriting all characteristics of records, but with additional meaning or usage specific to labeled datasets. No further property restrictions or axioms are specified for this class.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'propertyRestrictions': ['[has_member exactly 1 labeled dataset field-list]']}\nGenerated CQs:", "output": "Is it required that a labeled dataset record contains exactly one has_member property referring to a labeled dataset field-list? | Can a labeled dataset record be associated with more than one labeled dataset field-list via has_member? | Does a labeled dataset record exist if it lacks the has_member relationship with a labeled dataset field-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set of real datatype\nDescription: set of real datatype is a class whose members are collections containing at least one element from the real base type. The only formal restriction is that each instance must have at least one member that is a real base type, ensuring that all such sets are connected to real-numbered data elements.\nAxiom: {'subClassOf': ['set datatype'], 'propertyRestrictions': ['[has_member some real base type]']}\nGenerated CQs:", "output": "Is the set of real datatype encompassed within the set datatype category? | Which datatype classes are direct specializations of set datatype, such as set of real datatype? | To which datatype hierarchies does set of real datatype belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-aggregate datatype\nDescription: non-aggregate datatype is a class whose individuals are required to have at least one member related via the property has_member to an individual of the class non-aggregate generator. There are no specified superclasses. This restriction ensures that every non-aggregate datatype includes at least one non-aggregate generator as a member.\nAxiom: {'subClassOf': ['generated datatype'], 'propertyRestrictions': ['[has_member some non-aggregate generator]']}\nGenerated CQs:", "output": "Does every non-aggregate datatype belong under the category of generated datatype? | Which datatypes are explicitly classified as specializations of generated datatype? | To what higher-level datatype categories does non-aggregate datatype correspond? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ordinal datatype\nDescription: ordinal datatype is defined as a subclass of non-numeric ordered primitive datatype. It is characterized by possessing qualities such as being bounded below, potentially unbounded above, ordered, non-numeric, and exact. Members of this class support specific operations, including having an in-order operation and a successor operation, both tailored for ordinal values. This formalization ensures that ordinal datatypes represent strictly ordered, non-numeric values with well-defined successor functions and clear lower bounds, though they may lack an upper bound.\nAxiom: {'subClassOf': ['non-numeric ordered primitive datatype'], 'propertyRestrictions': ['[has_operation some InOrder:ordinal]', '[has_quality some bounded below]', '[has_quality some unbounded above]', '[has_quality some ordered]', '[has_operation some Successor:ordinal]', '[has_quality some non-numeric]', '[has_quality some exact]', '[has_operation some Equal:ordinal]']}\nGenerated CQs:", "output": "Is it necessary for an entity with ordinal datatype property restrictions to have at least one operation involving equality on an ordinal value? | Does every instance with ordinal datatype property restrictions participate in some operation that uses the 'Equal:ordinal' relation? | Must entities constrained by ordinal datatype property restrictions be associated with a 'has_operation' involving an equal comparison on ordinals? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: datatype\nDescription: datatype is a class characterized by the presence of certain properties: each member must have at least one datatype property (expressed via has_quality), must be associated with at least one characterizing operation (via has_operation), and must have at least one value space attribute (via has_attribute). This formalization ensures that any instance of datatype is inherently linked to specific qualities, operations, and value spaces that define its structure and semantics.\nAxiom: {'subClassOf': ['data representational model'], 'propertyRestrictions': ['[has_quality some datatype property]', '[has_operation some characterizing operation]', '[has_attribute some value space]']}\nGenerated CQs:", "output": "Is datatype categorized under the broader class of data representational model? | Which subclasses constitute the data representational model class, such as datatype? | Of which higher-level concepts is datatype an instance within the domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: numeric ordered primitive datatype\nDescription: numeric ordered primitive datatype is defined as a subclass of numeric primitive datatype. This means that every instance of numeric ordered primitive datatype is also an instance of numeric primitive datatype, inheriting all the characteristics of the parent class. There are no additional property restrictions or axioms further constraining this class.\nAxiom: {'subClassOf': ['numeric primitive datatype'], 'propertyRestrictions': ['[has_quality some ordered]']}\nGenerated CQs:", "output": "Does every 'numeric ordered primitive datatype' instance have at least one 'has_quality' relation to an 'ordered' entity? | Is it mandatory for a 'numeric ordered primitive datatype' to possess a 'has_quality' association with something that is 'ordered'? | Can a 'numeric ordered primitive datatype' exist without being linked via 'has_quality' to any 'ordered' entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence datatype\nDescription: sequence datatype is a subclass of homogenous aggregate datatype with variable size. It is characterized by having members of a base type and potentially a sequence generator. Sequence datatypes are non-ordered, non-numeric collections, and their elements all share the same type. They support operations such as equality checking (Equal:sequence), checking if the sequence is empty (IsEmpty:sequence), obtaining the first element (Head:sequence) or the remainder after the first element (Tail:sequence), and appending new elements (Append:sequence). All members of this class have the qualities of being non-ordered and exact.\nAxiom: {'subClassOf': ['homogenous aggregate datatype with variable size'], 'disjointWith': ['homogenous  unordered aggregate datatype with variable size'], 'propertyRestrictions': ['[has_operation some Equal:sequence]', '[has_quality some exact]', '[has_operation some IsEmpty:sequence]', '[has_quality some non-ordered]', '[has_operation some Head:sequence]', '[has_quality some non-numeric]', '[has_member some base type]', '[has_operation some Append:sequence]', '[has_operation some Tail:sequence]', '[has_member some sequence generator]']}\nGenerated CQs:", "output": "What is the logical separation between sequence datatypes and homogenous unordered aggregate datatypes with variable size? | Is there any datatype that can be classified as both a sequence datatype and a homogenous unordered aggregate datatype with variable size? | Which other datatype categories are formally specified as disjoint with sequence datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set datatype\nDescription: set datatype is a subclass of homogeneous unordered aggregate datatypes with variable size. Members of this class have the qualities of being non-ordered, non-numeric, and exact. A set datatype consists of members that are either of a base type or are generated by a set generator. The class supports fundamental set operations, including union, intersection, difference, subset, equality checking, creating an empty set, and creating a set of sets. These axioms formalize the characteristics and operations that define mathematical sets within a datatype context.\nAxiom: {'subClassOf': ['homogenous  unordered aggregate datatype with variable size'], 'propertyRestrictions': ['[has_quality some non-ordered]', '[has_operation some Lsln:set]', '[has_operation some Intersection:set]', '[has_member some base type]', '[has_operation some SetOf:set]', '[has_member some set generator]', '[has_operation some Equal:class]', '[has_quality some non-numeric]', '[has_quality some exact]', '[has_operation some Empty:set]', '[has_operation some Difference:set]', '[has_operation some Union:set]', '[has_operation some Subset:set]', '[has_operation some Select:set]']}\nGenerated CQs:", "output": "Is it necessary for an entity to have at least one 'has_operation' relationship with an instance of Select:set? | Does every instance within the scope of this ontology perform at least one operation classified under Select:set? | Can an individual possess the 'has_operation' property only if it is associated with the Select:set operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: primitive field component\nDescription: primitive field component is defined as a subclass of field component. This means every primitive field component is also a field component, but no further distinguishing characteristics or property restrictions are specified for this class.\nAxiom: {'subClassOf': ['field component'], 'propertyRestrictions': ['[role_of some primitive datatype]']}\nGenerated CQs:", "output": "Is every primitive field component necessarily associated with a role that plays some primitive datatype? | Must a primitive field component have at least one role linked to a primitive datatype? | Can a primitive field component exist without being connected via 'role_of' to a primitive datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: numeric primitive datatype\nDescription: numeric primitive datatype is a class whose members are entities that possess at least one quality characterized as numeric, as indicated by the property restriction [has_quality some numeric]. There are no asserted superclasses, indicating this class is not explicitly defined as a subclass of any other class in the ontology.\nAxiom: {'subClassOf': ['primitive datatype'], 'propertyRestrictions': ['[has_quality some numeric]']}\nGenerated CQs:", "output": "Is numeric primitive datatype categorized under the broader class of primitive datatype? | Which datatypes are considered specializations of primitive datatype, specifically including numeric primitive datatype? | To which more general datatype groups does numeric primitive datatype belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-numeric unordered primitive datatype\nDescription: non-numeric unordered primitive datatype is defined as a subclass of non-numeric primitive datatype, characterized by the property that its members possess at least one quality of being non-ordered (has_quality some non-ordered). No additional disjointness constraints are declared. This means all individuals in this class are primitive datatypes that are non-numeric and inherently lack an ordering among their values.\nAxiom: {'subClassOf': ['non-numeric primitive datatype'], 'disjointWith': ['non-numeric ordered primitive datatype'], 'propertyRestrictions': ['[has_quality some non-ordered]']}\nGenerated CQs:", "output": "What distinguishes non-numeric unordered primitive datatypes from non-numeric ordered primitive datatypes in the ontology? | Can a primitive datatype be classified as both non-numeric unordered and non-numeric ordered simultaneously? | Which primitive datatypes are defined as disjoint with non-numeric ordered primitive datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: heterogenous aggregate datatype\nDescription: heterogenous aggregate datatype is defined as a class whose members must each have at least one member (via the has_member property) that is an instance of the class heterogenous aggregate generator. This means every instance of heterogenous aggregate datatype is characterized by its association with at least one heterogenous aggregate generator, though no additional axiomatic constraints or superclass relationships are specified for this class.\nAxiom: {'subClassOf': ['aggregate datatype'], 'propertyRestrictions': ['[has_member some heterogenous aggregate generator]']}\nGenerated CQs:", "output": "Is aggregate datatype a more general classification that includes heterogenous aggregate datatype? | Which specific aggregate datatypes are categorized as heterogenous aggregate datatype? | To what broader datatype groups does heterogenous aggregate datatype belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bounded above\nDescription: bounded above is defined as a subclass of bounded, indicating that every instance of bounded above is also an instance of bounded. There are no explicit disjointness restrictions specified for this class. This means any member of bounded above inherits all properties and constraints of bounded, and may have additional distinguishing characteristics not specified here.\nAxiom: {'subClassOf': ['bounded'], 'disjointWith': ['bounded below']}\nGenerated CQs:", "output": "How does the ontology differentiate between entities that are bounded above and those that are bounded below? | Is an entity permitted to belong simultaneously to both the bounded above and bounded below categories? | Which classes, apart from bounded above, are specified as disjoint with bounded below within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bounded\nDescription: bounded is defined as a subclass of boundedness, which means every instance of bounded is necessarily also an instance of boundedness. There are no specified disjointness or additional property restrictions for this class, so its primary characterization is its placement within the hierarchy under boundedness.\nAxiom: {'subClassOf': ['boundedness'], 'disjointWith': ['unbounded']}\nGenerated CQs:", "output": "What is the nature of the distinction between bounded and unbounded entities within the ontology? | Is it permissible for a concept to be classified as both bounded and unbounded simultaneously? | Which classes are formally specified as incompatible with the concept of bounded? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: numeric\nDescription: numeric is defined as a subclass of numericalness, indicating that every instance of numeric is also an instance of numericalness. There are no explicit disjointness axioms specified, so numeric may potentially overlap with other classes unless otherwise stated. This class formalizes the concept of entities possessing numeric or quantitative attributes, within the broader category of numericalness.\nAxiom: {'subClassOf': ['numericalness'], 'disjointWith': ['non-numeric']}\nGenerated CQs:", "output": "What differentiates numeric entities from non-numeric entities in the ontology? | Is there any instance that can simultaneously be classified as numeric and non-numeric? | Which classes have an explicit incompatibility declared with non-numeric? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Delete:bag\nDescription: Delete:bag is defined as a subclass of delete operation, indicating that it inherits all characteristics of delete operations. There are no specified disjointness restrictions for this class.\nAxiom: {'subClassOf': ['delete operation'], 'disjointWith': ['Delete:table']}\nGenerated CQs:", "output": "What distinguishes instances of Delete:bag from those of Delete:table in terms of their classification? | Is there any entity in the ontology that can belong to both Delete:bag and Delete:table simultaneously? | Which classes are asserted to be disjoint with Delete:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Select:array\nDescription: Select:array is defined as a subclass of dyadic select operation. This means that every instance of Select:array is a specific type of dyadic select operation. No additional disjointness or property restrictions are specified for this class.\nAxiom: {'subClassOf': ['dyadic select operation'], 'disjointWith': ['Select:table']}\nGenerated CQs:", "output": "What formal difference is established between Select:array and Select:table in the ontology? | Is there any entity that can simultaneously be an instance of both Select:array and Select:table? | Which classes in the ontology are asserted as mutually exclusive with Select:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Select:bag\nDescription: Select:bag is defined as a subclass of monadic select operation, indicating that every instance of Select:bag represents a specific type of single-argument selection process within the broader category of monadic select operations. There are no explicit disjointness constraints specified for this class.\nAxiom: {'subClassOf': ['monadic select operation'], 'disjointWith': ['Select:set']}\nGenerated CQs:", "output": "How does the ontology distinguish between Select:bag and Select:set? | Is there any instance that can be classified as both Select:bag and Select:set? | Which classes are explicitly specified as disjoint with Select:set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Round:scaled\nDescription: Round:scaled is defined as a subclass of round operation, indicating that it represents a specific type of rounding operation. There are no explicit disjointness constraints with other classes. All instances of Round:scaled are also considered instances of round operation.\nAxiom: {'subClassOf': ['round operation'], 'disjointWith': ['Round:time&date']}\nGenerated CQs:", "output": "How are Round:scaled and Round:time&date conceptually separated within the ontology? | Is any entity allowed to belong simultaneously to both Round:scaled and Round:time&date categories? | Which classes in the ontology are specified as disjoint with Round:time&date? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Successor:enumerated\nDescription: Successor:enumerated is defined as a subclass of successor operation, indicating that every instance of Successor:enumerated is also an instance of successor operation. There are no specified disjointness constraints for this class. This formalization is used to distinguish a specific kind or subset of successor operations, grouped as \"enumerated,\" within the broader successor operation category.\nAxiom: {'subClassOf': ['successor operation'], 'disjointWith': ['Successor:ordinal']}\nGenerated CQs:", "output": "How is the conceptual separation represented between enumerated and ordinal successors in the ontology? | Is it allowable for an entity to be classified as both an enumerated and an ordinal successor? | What are the defined disjoint classes for ordinal successors within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ordered aggregate\nDescription: ordered aggregate is defined as a subclass of aggregate imposed ordering, indicating that it represents a type of aggregate in which an explicit ordering of elements is imposed. There are no disjointness axioms specified, so this class may potentially overlap with other classes unless otherwise stated.\nAxiom: {'subClassOf': ['aggregate imposed ordering'], 'disjointWith': ['unordered aggregate']}\nGenerated CQs:", "output": "How does the ontology distinguish between ordered aggregates and unordered aggregates? | Is there any entity that can simultaneously be classified as both an ordered aggregate and an unordered aggregate? | Which classes are specified as incompatible with unordered aggregate in the ontology structure? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: fixed size\nDescription: fixed size is defined as a subclass of agregate size, indicating that every instance of fixed size is also an instance of agregate size. There are no explicit disjointness constraints specified for this class.\nAxiom: {'subClassOf': ['agregate size'], 'disjointWith': ['variable size']}\nGenerated CQs:", "output": "How does the ontology distinguish between fixed size and variable size entities? | Is it permitted for an entity to be classified as both fixed size and variable size? | Which classes within the ontology are defined as mutually exclusive with variable size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous\nDescription: homogenous is a subclass of homogenity, meaning every instance of homogenous must also be an instance of homogenity. There are no explicit disjointness axioms specified, so individuals of this class are not formally excluded from membership in any other class.\nAxiom: {'subClassOf': ['homogenity'], 'disjointWith': ['heterogenous']}\nGenerated CQs:", "output": "How does the ontology differentiate between homogenous and heterogenous entities? | Is there any entity that can simultaneously belong to both homogenous and heterogenous categories? | Which classes are explicitly specified as mutually exclusive with homogenous? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-unique values\nDescription: non-unique values is defined as a subclass of uniqueness, indicating that it inherits all properties of uniqueness. However, the axiom does not specify any additional distinguishing features or restrictions, and non-unique values is not explicitly disjoint with any other class. This suggests it represents a special case or refinement of uniqueness, where the unique constraints may be relaxed or specifically defined elsewhere.\nAxiom: {'subClassOf': ['uniqueness'], 'disjointWith': ['unique values']}\nGenerated CQs:", "output": "How does the ontology distinguish between non-unique values and unique values? | Is it allowed for a value to be classified as both non-unique and unique simultaneously? | What other types of values, if any, are defined as disjoint with unique values? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target record of reals field component\nDescription: target record of reals field component is a class whose members are characterized by participating in the role_of property with at least one record of real datatype. This means that every instance of this class must function in some role specifically related to a record whose values are of a real datatype.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some record of real datatype]']}\nGenerated CQs:", "output": "Is target record of reals field component classified under labeled dataset target field component? | Which field components are considered more specific than labeled dataset target field component, such as target record of reals field component? | To which broader categories does target record of reals field component belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive record of reals field component\nDescription: descriptive record of reals field component is defined as a subclass of labeled dataset descriptive field component. This means that every instance of descriptive record of reals field component is also considered an instance of labeled dataset descriptive field component. There are no additional property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of some record of real datatype]']}\nGenerated CQs:", "output": "Is every descriptive record of a reals field component required to have at least one 'role_of' relationship with a record of real datatype? | Can a descriptive record of a reals field component exist without being related via 'role_of' to any record of real datatype? | Does the ontology ensure that the presence of the 'role_of' property in a descriptive record of a reals field component necessarily points to an individual of type record of real datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive set of integer field component\nDescription: descriptive set of integer field component is defined as a subclass of labeled dataset descriptive field component. This means every descriptive set of integer field component is inherently a labeled dataset descriptive field component, inheriting all its properties and constraints. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of some set of integer datatype]']}\nGenerated CQs:", "output": "Is every descriptive set of integer field component required to have at least one role_of relationship to a set of integer datatype? | Must all descriptive sets of integer field components be assigned some role_of that connects them with a set of integer datatype? | Does the presence of a role_of link to a set of integer datatype necessarily characterize every descriptive set of integer field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_identifier\nDescription: The property \"has_identifier\" is defined as a sub-property of \"has_attribute\" and does not have explicitly stated characteristics, domain, or range restrictions. It represents an attribute relationship, likely used to associate an entity with a unique identifier, though no inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Which properties are considered subproperties under has_attribute? | Is has_identifier categorized as a subproperty of has_attribute? | Does assigning a has_identifier property inherently assign a has_attribute property as well? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is_member_of\nDescription: The property \"is_member_of\" does not have specified domain or range restrictions and has no special characteristics defined. It is a sub-property of \"attribute_of\" and has \"has_member\" as its inverse property. This property is used to relate an entity to a group or collection to which it belongs.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['attribute_of'], 'inverseOf': []}\nGenerated CQs:", "output": "What is the logical connection between ‘is_member_of’ and ‘has_member’ in the ontology? | If entity A is a member of entity B, does that entail that B has member A according to the ontology? | Which property is declared as the inverse of ‘is_member_of’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_operation\nDescription: The property \"has_operation\" does not have explicitly defined characteristics, domain, or range restrictions. It is declared as a sub-property of \"has_attribute,\" indicating that it inherits the general meaning of associating an attribute with an entity, with a more specific focus on operations. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is every instance of has_operation necessarily an instance of has_attribute? | Which properties are defined as subproperties under has_attribute? | What superproperties are associated with has_operation in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_role\nDescription: The property \"has_role\" has no explicitly defined domain, range, or characteristics. It is a direct subproperty of owl:topObjectProperty, indicating broad applicability between individuals. No inverse property is specified. This property can be used to associate entities with their assigned roles without additional restrictions.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is has_role a specialization of owl:topObjectProperty? | Which properties are classified as subproperties under owl:topObjectProperty? | Does the assertion of has_role between entities entail a more general relationship as defined by owl:topObjectProperty? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: represents\nDescription: The property \"represents\" has no explicitly defined domain, range, or characteristics, and does not specify an inverse property. It is a sub-property of owl:topObjectProperty, indicating it is a very general object property that can relate any two individuals in the ontology. No further semantic constraints are provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is represents a subproperty of any top-level object property in the ontology? | Which properties are classified as superproperties of represents? | Does every use of the represents property imply a relationship defined by the most general object property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: role_of\nDescription: The property \"role_of\" does not have explicitly specified domain or range restrictions and lacks defining characteristics. It is a sub-property of \"owl:topObjectProperty\" and has \"has_role\" as its inverse property. This property is typically used to relate a role to an entity, indicating that the entity plays or fulfills a particular role.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "How are 'role_of' and 'has_role' semantically connected as inverse properties in the ontology? | If entity E is linked to F via 'role_of', does the ontology entail that F is connected to E via 'has_role'? | Which property is defined as the inverse of 'role_of' in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is_operation_of\nDescription: The property \"is_operation_of\" has no explicitly defined domain or range restrictions and does not possess any special logical characteristics. It is defined as a sub-property of \"attribute_of,\" indicating that it represents a specific kind of attributions between entities. Additionally, it has an inverse property \"has_operation,\" establishing a bidirectional relationship between related entities.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['attribute_of'], 'inverseOf': []}\nGenerated CQs:", "output": "How are the properties ‘is_operation_of’ and ‘has_operation’ interconnected in the ontology? | If an entity X is an operation of Y, does it follow that Y has operation X under the ontology’s semantics? | Which property is designated as the inverse of ‘is_operation_of’ in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has-value\nDescription: The property \"has-value\" does not have explicitly defined characteristics, domain, range, super-properties, or inverse properties. This indicates a general-purpose property whose usage and constraints are not restricted by axioms in the current ontology specification.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can anything be the domain of the 'has-value' property, or is its domain truly undefined? | What can be the range of the property 'has-value'? | Is it correct that the property 'has-value' does not have a specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_member\nDescription: The property \"has_member\" has no explicit domain or range restrictions and is not defined with characteristics such as functional or transitive. It is declared as a sub-property of \"has_attribute,\" indicating that it inherits the general semantics of attributive relations. No inverse property is specified. This property is used to relate a group or collection to its members in a manner consistent with general attribute relations.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['has_attribute'], 'inverseOf': []}\nGenerated CQs:", "output": "Is has_member considered a specific type of has_attribute property? | What are the direct superproperties of has_member? | Can 'has_member' relate to any kind of entity as its object, or should there be a defined range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: attribute_of\nDescription: The property \"attribute_of\" has no explicitly defined characteristics, domain, or range restrictions. It is not specified as a sub-property of any other property and does not have an inverse property. This property can be used generally to relate an attribute to any entity without further ontological constraints.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'attribute_of' be associated with values of any type as its object? | Is it correct that the property 'attribute_of' does not have a specified range? | Can 'attribute_of' relate to any type of subject, or is there a restriction on its domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: owl:topObjectProperty\nDescription: The property \"owl:topObjectProperty\" has no specified domain, range, characteristics, super-properties, or inverse property. It is the most general object property in OWL ontologies, capable of relating any pair of individuals without restriction.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What entities can serve as the domain for owl:topObjectProperty? | What can be the range of the property 'owl:topObjectProperty'? | Is it valid for owl:topObjectProperty to lack a specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is-about\nDescription: The property \"is-about\" has no defined characteristics, domain, range, super-properties, or inverse properties. This indicates that it is a general-purpose property without explicit usage constraints or hierarchical relationships in the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "Is is-about classified as a subproperty of owl:topObjectProperty? | Which superproperties are associated with is-about in the ontology? | What subproperties, if any, are defined under owl:topObjectProperty? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is_quality_of\nDescription: The property \"is_quality_of\" has no specified domain, range, characteristics, super-properties, or inverse properties. This indicates it can relate any two individuals without restrictions, and does not inherit constraints or semantics from other properties.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': ['has_quality']}\nGenerated CQs:", "output": "What is the logical connection between ‘is_quality_of’ and ‘has_quality’ as defined in the ontology? | If entity A is related to entity B via ‘is_quality_of’, does this entail that B is related to A via ‘has_quality’? | Which object property is specified as the inverse of ‘is_quality_of’ in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: identifier_for\nDescription: The property \"identifier_for\" has no explicitly defined domain or range restrictions and does not possess special characteristics. It is a sub-property of \"attribute_of\", indicating that it inherits the general meaning of being an attribute but specializes it for identifiers. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['attribute_of'], 'inverseOf': ['has_identifier']}\nGenerated CQs:", "output": "What is the logical correspondence between the properties ‘identifier_for’ and ‘has_identifier’ in the ontology? | If entity A is identified by B using ‘identifier_for’, does it follow that B has A as an identifier via ‘has_identifier’? | Which property operates as the inverse of ‘identifier_for’ in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_quality\nDescription: The property \"has_quality\" has no specified characteristics, domain, range, super-properties, or inverse properties. This generic property is intended to relate an entity to a quality, but its use is unconstrained by axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "Is has_quality a subproperty of owl:topObjectProperty? | Which properties are subproperties of owl:topObjectProperty? | What superproperties does has_quality have within the property hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_attribute\nDescription: The property \"has_attribute\" has no explicitly defined characteristics, domain, or range restrictions. It is a sub-property of \"owl:topObjectProperty,\" suggesting it is a general-purpose object property. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': ['has_attribute']}\nGenerated CQs:", "output": "What is the inverse property associated with ‘has_attribute’ defined in the ontology? | If entity A has an attribute B, can we infer that B has an attribute A within the ontology’s structure? | How does the ontology specify the logical connection between ‘has_attribute’ and its inverse? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: denotes\nDescription: The property \"denotes\" has no defined domain, range, characteristics, super-properties, or inverse properties. It is a generic property with no explicit ontological constraints.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['is-about'], 'inverseOf': []}\nGenerated CQs:", "output": "Which properties are defined as subproperties under is-about, such as denotes? | Does an assertion using denotes also satisfy constraints requiring is-about? | What superproperties are associated with denotes in the ontology hierarchy? "}
