{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Datatype Specification Language Representation\nDescription: Datatype Specification Language Representation is a subclass of representation, characterized by the property that it represents at least one datatype. This class encompasses languages or symbolic forms specifically designed to define, describe, or model datatypes through a formal representation. Every individual in this class must be associated with the representation of some datatype, reflecting its role in specifying datatype structure or characteristics.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[represents some datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of Datatype Specification Language Representation necessarily represent at least one datatype?", "1": "Is it required for any Datatype Specification Language Representation to have the ‘represents’ relationship with a datatype?", "2": "Can a Datatype Specification Language Representation exist without representing any datatype?", "3": "Generated CQs:Is every Datatype Specification Language Representation defined as something that represents a datatype?", "4": "Does the definition of Datatype Specification Language Representation include the requirement to represent a datatype?", "5": "Is it necessary for a concept to be classified as a Datatype Specification Language Representation if it has the property of representing a datatype?", "6": "Generated"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined generator parameter\nDescription: defined generator parameter is a subclass of specification, meaning it inherits all characteristics of the specification class. Additionally, any individual in this class must possess at least one identifier, specified through the property has_identifier and linked to a parameter identifier. This definition ensures that every defined generator parameter instance is uniquely identified in the context of specifications.\nAxiom: {'subClassOf': ['specification'], 'propertyRestrictions': []}\nGenerated CQs:", "generated_outputs": {"0": "Does every defined generator parameter necessarily have at least one identifier associated with it?", "1": "Is it required for a defined generator parameter to possess some value via the has_identifier property?", "2": "Can a defined generator parameter exist without being linked to any parameter identifier?", "3": "://Generated CQs:Is every defined generator parameter classified under the broader category of specification?", "4": "Which specific types are included within the category of specification, such as defined generator parameter?", "5": "What higher-level classes encompass defined generator parameter according to the ontology?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: extending subtype generator\nDescription: extending subtype generator is defined as a subclass of subtype generator. It is characterized by the property restriction that every instance must have at least one member from an extended-value-list. This ensures that individuals of this class are subtype generators specifically connected to one or more extended value lists, reflecting their extended generative capability.\nAxiom: {'subClassOf': ['subtype generator'], 'propertyRestrictions': []}\nGenerated CQs:", "generated_outputs": {"0": "Does every extending subtype generator necessarily involve some entity via the hasMember relationship?", "1": "Is it required for an extending subtype generator to be associated with at least one member through the hasMember property?", "2": "Can an extending subtype generator exist without having any members linked by the hasMember property?", "3": "generated CQ3:Is it possible for an extending subtype generator not to possess any entities related via the hasMember property?", "4": "generated CQ4:Can an extending subtype generator be present if none of its members are associated through the hasMember property?", "5": "generated CQ5:Are all entities linked to an extending"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: size subtype generator\nDescription: size subtype generator is a subclass of subtype generator whose members are characterized by necessarily having at least one associated member of type size. This ensures that any instance of size subtype generator must be linked to one or more sizes, establishing its role in creating subtypes specifically based on size distinctions.\nAxiom: {'subClassOf': ['subtype generator'], 'propertyRestrictions': []}\nGenerated CQs:", "generated_outputs": {"0": "Does every size subtype generator have at least one property linking it to a size?", "1": "Is it required for a size subtype generator to possess some relation to a size entity?", "2": "Can a size subtype generator exist without being connected to any size via a property?", "3": "://CQ3:Is there any instance of a size subtype generator that lacks association with a size through a property?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: array generator\nDescription: array generator is a subclass of homogenous aggregate generator and is explicitly disjoint with homogenous aggregate generator with variable size, ensuring that an instance cannot belong to both classes simultaneously. Members of the array generator class are characterized by possessing certain qualities: they are unordered aggregates, have a fixed size, can be multi-dimensional, allow index-based access, and may contain non-unique values. This combination of properties formally describes the essential characteristics of array generators, distinguishing them from other types of homogenous aggregate generators.\nAxiom: {'subClassOf': ['homogenous aggregate generator'], 'disjointWith': [], 'propertyRestrictions': ['[has_quality some unordered aggregate]', '[has_quality some fixed size]', '[has_quality some multi dimensional]', '[has_quality some index access]', '[has_quality some non-unique values]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology define the separation between array generator and homogenous aggregate generator with variable size?", "1": "Is there any individual that can simultaneously be classified as both an array generator and a homogenous aggregate generator with variable size?", "2": "Which ontological categories are explicitly stated as mutually exclusive with homogenous aggregate generator with variable size?", "3": "_generated_CQ3:Is it permitted for an entity to be categorized under both array generator and homogenous aggregate generator with variable size within the ontology?", "4": "_generated_CQ4:Which entities are recognized as incompatible with homogenous aggregate generator with variable size according to the ontology?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set generator\nDescription: set generator is defined as a subclass of homogenous unordered aggregate generator with variable size. Members of this class are characterized by having the qualities of access by value and containing unique values. This means that each instance generates aggregates where elements are both accessed directly by their value (rather than by reference or position) and all elements within any generated aggregate are unique, with no duplicates permitted.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_quality some access by value]', '[has_quality some unique values]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every set generator necessarily have at least one quality related to unique values?", "1": "Is it required for a set generator to possess the property 'unique values' among its qualities?", "2": "Can a set generator exist without exhibiting the quality of unique values?", "3": "Generated CQs:Must all instances of set generator include some quality specified as unique values?", "4": "Is it mandatory for set generators to have the property 'unique values' as one of their qualities?", "5": "Are there any set generators that do not possess the quality 'unique values'?", "6": "Generated CQs:Is it possible for a set generator to lack"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: table generator\nDescription: table generator is defined as a subclass of heterogenous aggregate generator and is characterized by several property restrictions: it must possess the qualities of having non-unique values, variable size, being an unordered aggregate, and being two dimensional. These constraints specify that any instance of table generator produces or represents a two-dimensional collection of items where elements may repeat, the number of items can vary, the arrangement lacks a specific sequence, and multiple types of elements (heterogeneity) are permitted.\nAxiom: {'subClassOf': ['heterogenous aggregate generator'], 'propertyRestrictions': ['[has_quality some variable size]', '[has_quality some unordered aggregate]', '[has_quality some two dimensional]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every table generator necessarily produce at least one value with the quality 'non-unique'?", "1": "Is it required for all outputs generated by a table generator to have the quality 'non-unique' in some context?", "2": "Can a table generator exist without producing anything classified as 'non-unique' under its has_quality relation?", "3": "Can a table generator output something that does not have the quality 'non-unique', even if other outputs do?", "4": "Can a table generator have outputs that are not categorized as 'non-unique' under the has_quality relationship?", "5": "Must every item produced by a table"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: choice generator\nDescription: choice generator is defined as a subclass of non-aggregate generator. Members of this class are further characterized by the property that they are associated with at least one choice datatype, as expressed by the restriction [is_member_of some choice datatype]. This means any individual classified as a choice generator must participate in or be a member of a choice datatype, distinguishing them from other forms of non-aggregate generators.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[is_member_of some choice datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every choice generator have at least one relationship via ‘is_member_of’ to a choice datatype?", "1": "Is it necessary for a choice generator to be linked to a choice datatype through the ‘is_member_of’ property?", "2": "Can there exist a choice generator without being associated with any choice datatype via ‘is_member_of’?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: class datatype\nDescription: class datatype is a subclass of heterogenous aggregate datatype and is explicitly disjoint with record (tuple) datatype, ensuring that no individual can belong to both classes. Members of class datatype are characterized by the following property restrictions: they must have operations such as AttributeSelect, AttributeReplace, and Equal (each operating on class), must include members such as a class generator and an attribute-list, and must exhibit the qualities of being non-ordered and non-numeric. This formalization distinguishes class datatypes from other aggregates (like records) by their operations and inherent qualities.\nAxiom: {'subClassOf': ['heterogenous aggregate datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_operation some AttributeSelect:class]', '[has_operation some AttributeReplace:class]', '[has_operation some Equal:class]', '[has_member some class generator]', '[has_quality some non-ordered]', '[has_quality some non-numeric]', '[has_member some attribute-list]']}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between class datatype and record (tuple) datatype?", "1": "Is there any instance that could simultaneously be classified under both class datatype and record (tuple) datatype?", "2": "Which ontological categories are specified as incompatible with record (tuple) datatype?://p>"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete-value identifier\nDescription: discrete-value identifier is a subclass of identifier whose instances are constrained to have at least one associated value specified as an rdfs:Literal. This means that every discrete-value identifier must be linked to some literal value (such as a string, number, or date), formalizing the notion of identifiers that represent or encode discrete, literal data.\nAxiom: {'subClassOf': ['identifier'], 'propertyRestrictions': []}\nGenerated CQs:", "generated_outputs": {"0": "Must all discrete-value identifiers be associated with at least one literal value?", "1": "Is it required for each instance of discrete-value identifier to have a property linking it to an rdfs:Literal?", "2": "Can a discrete-value identifier exist without having any literal values assigned through a property?", "3": "://generated by Amane}", "4": "Does the concept of discrete-value identifier necessarily involve a relationship with literal values?", "5": "Does the presence of a property connecting a discrete-value identifier to a literal indicate a fundamental characteristic of this class?", "6": "Is the existence of a literal property value a necessary condition for something to be"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenity\nDescription: homogenity is defined as a subclass of aggregate generator property and is explicitly disjoint with the classes aggregate size, uniqueness, component mandatoriness, structurness, recursiveness, and access type, ensuring that no individual can simultaneously belong to these. It is also equivalent to the union of homogenous or heterogenous, indicating that any instance of homogenity must be categorized as either homogenous or heterogenous with respect to an aggregate generator property.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['agregate size', 'uniqueness', 'component mandatoriness', 'structurness', 'access type'], 'equivalentClass': ['(homogenous or heterogenous)']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology represent the distinction between homogenity and uniqueness?", "1": "Is there any entity classified under both homogenity and uniqueness?", "2": "Which property types are specified as mutually exclusive with uniqueness?", "3": "://www.nluug.nl/", "4": "http://www.nluug.nl/wiki/index.php?title=ObsoleteConcepts#Homogeneity", "5": "https://edamontology.org/2.25/homogenity", "6": "https://edamontology.org/2.25/homogenity", "7": "https://edamontology.org/2.25/homogenity", "8": "https://ed"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: component mandatoriness\nDescription: component mandatoriness is defined as a subclass of aggregate generator property and is explicitly disjoint with structurness, recursiveness, and access type, ensuring no overlap among individuals of these classes. It is equivalent to the union of component mandatory and component non-mandatory, meaning every instance of component mandatoriness must be either component mandatory or component non-mandatory. This class categorizes aggregate generator properties by specifying whether a component is mandatory or not.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['recursiveness', 'access type'], 'equivalentClass': ['(component mandatory or component non-mandatory)']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology represent the distinction between component mandatoriness and access type?", "1": "Is there any individual classified under both component mandatoriness and access type?", "2": "Which concepts are specified as mutually exclusive with access type according to the ontology?", "3": "Generated CQs:Is component mandatoriness considered incompatible with access type within the ontology?", "4": "What other types are declared as incompatible with access type?", "5": "Which categories cannot co-exist with access type according to the ontology's definition?", "6": "Generated CQs:Is component mandatoriness categorized as a distinct concept from access type?", "7": "Which subclasses fall outside"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: access type\nDescription: access type is defined as a subclass of aggregate generator property and is equivalent to the union of direct access property and indirect access property. This means that any instance of access type must be either a direct access property or an indirect access property, and no other properties qualify as access types outside of this definition.\nAxiom: {'subClassOf': [], 'equivalentClass': ['(direct access property or indirect acess property)']}\nGenerated CQs:", "generated_outputs": {"0": "Does every access type necessarily belong to both direct access property and indirect acess property?", "1": "Is access type logically equivalent to the set comprising direct access property and indirect acess property?", "2": "Can access type be defined as the intersection of direct access property and indirect acess property within the ontology?", "3": "Generated CQs:Is access type classified under aggregate generator property?", "4": "Which specific types are encompassed by aggregate generator property, such as access type?", "5": "What broader categories does access type fall under according to the ontology?", "6": "Generated CQs:Are all instances of aggregate generator property also categorized as"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: generated datatype\nDescription: generated datatype is defined as a subclass of datatype and is explicitly disjoint with defined datatype, meaning no individual can be both a generated datatype and a defined datatype. Members of this class are further constrained by the property restriction that each generated datatype must have at least one member (has_member) that is a generated datatype generator. This formalization distinguishes generated datatypes from defined datatypes and ensures their association with specific generating mechanisms.\nAxiom: {'subClassOf': ['datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_member some generated datatype generator]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology distinguish between ‘generated datatype’ and ‘defined datatype’?", "1": "Is it possible for an entity to belong to both ‘generated datatype’ and ‘defined datatype’ classes simultaneously?", "2": "Which ontological categories are specified as mutually exclusive with ‘defined datatype’?", "3": "Generated CQs:Is there any instance that can be classified under both ‘generated datatype’ and ‘defined datatype’?", "4": "What are the opposing classes associated with ‘defined datatype’ within the ontology?", "5": "Generated CQs:Which types are declared incompatible with ‘defined datatype’ according to the ontology?", "6": "Generated C"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: field component\nDescription: field component is defined as a subclass of datatype role. It is further characterized by two property restrictions: every field component must participate in the role_of relationship with at least one datatype, and must have at least one identifier of type field identifier. This formalization ensures that field components are specifically associated with datatypes and are uniquely identifiable within the ontology.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[role_of some datatype]', '[has_identifier some field identifier]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every field component possess at least one has_identifier property value that is a field identifier?", "1": "Is it possible for a field component to exist without any association via the has_identifier property to a field identifier?", "2": "Does the presence of the has_identifier property with a field identifier guarantee that the entity is classified as a field component?", "3": "No additional CQs", "4": "Can a field component ever lack a has_identifier linking it to a field identifier?", "5": "Is having at least one has_identifier relation to a field identifier sufficient for something to be considered a field component?", "6": "Must all entities identified via the has_identifier"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: alternative component\nDescription: alternative component is defined as a subclass of datatype role, characterized by the requirement that it must have at least one member that is a tag-value list and at least one member that is an alternative-type. This means every instance of alternative component is associated with at least one tag-value list and one alternative-type via the has_member property, formalizing its structure as a composition of these elements.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some tag-value list]', '[has_member some alternative-type]']}\nGenerated CQs:", "generated_outputs": {"0": "Does alternative component fall under the broader classification of datatype role?", "1": "What are all subclasses categorized under datatype role, including alternative component?", "2": "Which overarching classes does alternative component inherit from within the current context?", "3": "Generated CQs:Is alternative component classified under the category of datatype role?", "4": "Which entities are encompassed by the concept of datatype role, specifically including alternative component?", "5": "In what higher-level groupings can alternative component be situated according to the ontology?", "6": "Generated CQs:Is alternative component considered a type of datatype role?", "7": "What specific concepts are included as subtypes under datatype role"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index-type\nDescription: index-type is a subclass of datatype role, characterized by specific property restrictions. Any instance of index-type must have as members both an index upperbound and an index lowerbound, indicating the range of allowable index values. Additionally, index-type instances are members of an index-type list and are associated, via the role_of property, with some datatype. This formalization ensures that index-type serves as a role connecting data types to index value ranges, organized within relevant index-type lists.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[has_member some index upperbound]', '[is_member_of some index-type list]', '[has_member some index lowerbound]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every index-type have at least one member that is an index lowerbound?", "1": "Is it possible for an index-type not to have any has_member relationship with an index lowerbound?", "2": "Does the existence of an index-type guarantee the presence of at least one index lowerbound through the has_member property?", "3": "Can an index-type exist without being linked to any index lowerbound via the has_member property?", "4": "Is it necessary for all index-types to have the has_member property connected to at least one index lowerbound?", "5": "Must an index-type always possess the has_member relation with exactly one or more"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real field-list\nDescription: real field-list is defined as a subclass of field-list, explicitly disjoint from boolean field-list and discrete field-list, ensuring no overlap in membership between these types. Members of real field-list are characterized by the property that they contain at least one real field component as a member. This formalization guarantees that any real field-list includes real-valued field components and cannot simultaneously be considered a boolean or discrete field-list.\nAxiom: {'subClassOf': ['field-list'], 'disjointWith': ['boolean field-list'], 'propertyRestrictions': ['[has_member some real field component]']}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between real field-list and discrete field-list within the ontology?", "1": "Is it permitted for an entity to be classified under both real field-list and discrete field-list simultaneously?", "2": "Which classes are specified as mutually exclusive with discrete field-list according to the ontology?_REF>"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: primitive field-list\nDescription: primitive field-list is defined as a subclass of field-list, with the restriction that it must have at least one member that is a primitive field component. This means that every instance of primitive field-list comprises a collection of fields where at least one member is a primitive field component.\nAxiom: {'subClassOf': ['field-list'], 'propertyRestrictions': []}\nGenerated CQs:", "generated_outputs": {"0": "Does every primitive field-list contain at least one property that links it to a primitive field?", "1": "Is it required for a primitive field-list to possess some relationship to a primitive field?", "2": "Can a primitive field-list exist without being associated via any property to a primitive field?", "3": "Generated CQs:Does every primitive field-list contain at least one property that links it to a primitive field?", "4": "Is it required for a primitive field-list to possess some relationship to a primitive field?", "5": "Can a primitive field-list exist without being associated via any property to a primitive field?", "6": "Generated CQs:"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic operation\nDescription: dyadic operation is defined as a subclass of characterizing operation, and is disjoint with niladic operation, monadic operation, and n-adic operation, ensuring that no individual can be simultaneously classified as any of these mutually exclusive operation types. A dyadic operation is characterized by mapping a pair of values from a given datatype to either another value of the same datatype or to a Boolean value. This formalization supports the clear distinction and function of dyadic operations within the hierarchy of operation arities.\nAxiom: {'subClassOf': ['characterizing operation'], 'disjointWith': ['niladic operation', 'n-adic operation']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology distinguish between dyadic operation and monadic operation?", "1": "Is it permitted for an entity to be categorized as both dyadic operation and monadic operation simultaneously?", "2": "Which operational categories are declared incompatible with monadic operation according to the ontology?", "3": "://generated by Amie\">Is there any instance that belongs to both dyadic operation and n-adic operation classes?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: monadic operation\nDescription: monadic operation is defined as a subclass of characterizing operation and is explicitly disjoint with n-adic operation, meaning an operation cannot be both monadic and n-adic. Monadic operations map a value of the given datatype to either another value of the same datatype or to a Boolean value, thus operating on a single input. This distinguishes monadic operations from n-adic operations, which take multiple inputs.\nAxiom: {'subClassOf': ['characterizing operation'], 'disjointWith': []}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between monadic operation and n-adic operation?", "1": "Is there any instance that can simultaneously belong to monadic operation and n-adic operation categories?", "2": "Which other operation types are specified as incompatible with monadic operation?://end hide\nGenerated CQs:Is every n-adic operation categorically distinct from monadic operation?", "3": "Can an entity be classified as both monadic operation and n-adic operation at the same time?", "4": "What ontological distinction does the system draw between monadic operation and n-adic operation?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: procedure-parameter-list\nDescription: procedure-parameter-list is defined as a subclass of list specification, restricted so that it must have at least one member which is a procedure-parameter declaration. This formalization ensures that any instance of procedure-parameter-list represents a list where each member is specifically a declaration pertaining to procedure parameters.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some procedure-paremeter declaration]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every procedure-parameter-list necessarily include at least one procedure-parameter declaration?", "1": "Is procedure-parameter-list categorized under more general concepts such as list specification?", "2": "Which specific types fall under the broader class of list specification, including procedure-parameter-list?://p>", "3": "Is procedure-parameter-list classified as a type of list specification?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: extended-value-list\nDescription: extended-value-list is defined as a subclass of list specification, meaning it inherits the general characteristics of list specifications. Additionally, every member of this class must have at least one associated extended-value identifier, as specified by the property has_identifier. This ensures that all instances of extended-value-list are identifiable through one or more extended-value identifiers.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': []}\nGenerated CQs:", "generated_outputs": {"0": "Does extended-value-list represent a specific type within the broader category of list specification?", "1": "Which types are classified under list specification, including extended-value-list?", "2": "What are the parent categories for extended-value-list in terms of list specification hierarchy?", "3": "Generated CQs:Is extended-value-list categorized under the general concept of list specification?", "4": "To which higher-level concepts does extended-value-list belong within the classification structure?", "5": "How does extended-value-list relate hierarchically to other forms of list specification?", "6": "Generated CQs:What are the subtypes encompassed by list specification, such as extended-value-list"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: field-list\nDescription: field-list is defined as a subclass of list specification, meaning it inherits all properties of a list specification. Additionally, it is characterized by a property restriction: every field-list must have at least one member that is a field component. This ensures that any instance of field-list specifically contains field components as its members.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': []}\nGenerated CQs:", "generated_outputs": {"0": "Does every field-list necessarily include at least one field component among its members?", "1": "Is the presence of a field component required for something to be classified as a field-list?", "2": "Can a field-list exist without having any field components assigned to it?", "3": "://CQs", "4": "CQs", "5": "CQs", "6": "CQs", "7": "CQs", "8": "CQs", "9": "CQs", "10": "CQs", "11": "CQs", "12": "CQs", "13": "CQs", "14": "CQs", "15": "CQs", "16": "CQs", "17": "CQs", "18": "CQs", "19": "CQs"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous aggregate datatype with variable size\nDescription: homogenous aggregate datatype with variable size is a subclass of homogenous aggregate datatype. Each instance in this class is characterized by having at least one member that is a homogenous aggregate generator with variable size. This means members of this class are structured as aggregates comprised of homogeneous components, and the size or number of these components can vary, as generated by the associated generator.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some homogenous aggregate generator with variable size]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of homogenous aggregate datatype with variable size necessarily have at least one member that is a homogenous aggregate generator with variable size?", "1": "Can a homogenous aggregate datatype with variable size exist without possessing any homogenous aggregate generators with variable size as its member?", "2": "Is it required for all homogenous aggregate datatypes with variable size to have the property ‘has_member’ linking them to a homogenous aggregate generator with variable size?", "3": "Can a homogenous aggregate datatype with variable size ever lack any homogenous aggregate generators with variable size among its members?", "4": "Does the presence of the has_member property"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: integer datatype\nDescription: integer datatype is a subclass of numeric ordered primitive datatype, characterized by qualities such as being ordered, numeric, exact, and unbounded. It supports operations including addition, multiplication, negation, equality checking, and ordered comparison among integers, as well as ensuring the existence of non-negative integers. The class is explicitly disjoint with rational datatype, indicating that no individual can be both an integer and a rational that is not an integer. These axioms formalize the mathematical and operational properties unique to the integer datatype.\nAxiom: {'subClassOf': ['numeric ordered primitive datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_operation some NonNegative:integer]', '[has_quality some ordered]', '[has_operation some Equal:integer]', '[has_operation some InOrder:interger]', '[has_quality some numeric]', '[has_quality some exact]', '[has_operation some Add:integer]', '[has_quality some unbounded]', '[has_operation some Multiply:integer]', '[has_operation some Negate:integer]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology distinguish between integer and rational datatypes?", "1": "Is there any instance that can simultaneously belong to both integer and rational datatypes?", "2": "Which classes are specified as mutually exclusive with integer datatype?://en.wikipedia.org/wiki/Integer_(computer science)"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate generator\nDescription: aggregate generator is defined as a subclass of generated datatype generator and is equivalent to any generator that is either an array generator, bag generator, class generator, record generator, sequence generator, set generator, or table generator. This class serves as a synonym for \"aggregate datatype constructor,\" reflecting its role in constructing aggregate or composite datatypes from collections of elements or records.\nAxiom: {'subClassOf': [], 'equivalentClass': ['(array generator or bag generator or class generator or record generator or sequence generator or set generator or table generator)']}\nGenerated CQs:", "generated_outputs": {"0": "What are all the types of generators that are considered equivalent to aggregate generator?", "1": "Is aggregate generator classified under the broader group of generated datatype generators?", "2": "Which specific generator categories are encompassed within aggregate generator according to the equivalence axiom?", "3": "Generated CQs:How does the concept of aggregate generator relate to generated datatype generators through sub-classification?", "4": "Are there any additional generator classes not explicitly listed that fall under generated datatype generators alongside aggregate generator?", "5": "Generated CQs:Is aggregate generator categorized under the broader class of generated datatype generators?", "6": "Which higher-level generator groups include aggregate generator as a member?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: cardinality\nDescription: cardinality is a subclass of datatype property and is disjoint from the classes order, boundedness, and equality, meaning no entity can simultaneously belong to both cardinality and any of these classes. It is formally equivalent to the union of countable, finite, and uncountable, reflecting that cardinality expresses the size or \"number of elements\" in a set, which may be countable, finite, or uncountable. This structure ensures clear differentiation from related set properties such as order, boundedness, and equality.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['order', 'equality'], 'equivalentClass': ['(countable or finite or uncountable)']}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between cardinality and equality within the ontology?", "1": "Is there any instance that can be classified as both cardinality and equality at the same time?", "2": "Which classes are defined as mutually exclusive with equality in the ontology?://endgenerated\nGenerated CQs:Is cardinality categorized under the broader class of datatype property?", "3": "Which subtypes fall under the category of datatype property, including cardinality?", "4": "What higher-level groupings does cardinality belong to within the ontology?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: vector datatype\nDescription: vector datatype is defined as a subclass of array datatype. Every vector datatype must have at least one member that is generated by or corresponds to a vector generator, as specified by the property restriction [has_member some vector generator]. This formalizes vector datatypes as array datatypes with elements produced or related to a specific generation mechanism.\nAxiom: {'subClassOf': ['array datatype'], 'propertyRestrictions': []}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of vector datatype necessarily include at least one member that is a vector generator?", "1": "Is it possible for a vector datatype to exist without having any vector generator as a member?", "2": "Are all members of the vector datatype class required to have the has_member relation to a vector generator?", "3": "No more CQs", "4": "Is vector datatype classified under the broader category of array datatype?", "5": "Which higher-level classes encompass vector datatype within the ontology?", "6": "No more CQs", "7": "Is vector datatype considered a specialized form of array datatype?", "8": "What are the immediate subclasses categorized under array datatype, such as"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boolean field component\nDescription: boolean field component is defined as a subclass of primitive field component and is characterized by the restriction that it must have some relationship (role_of) to a boolean datatype. This means every boolean field component represents or is associated with a value that is strictly of boolean type (such as true or false), distinguishing it from other field components that may represent different primitive datatypes.\nAxiom: {'subClassOf': ['primitive field component'], 'propertyRestrictions': []}\nGenerated CQs:", "generated_outputs": {"0": "Does every boolean field component necessarily participate in at least one role_of property with a boolean datatype?", "1": "Is it required for a boolean field component to be related via role_of to any entity classified under boolean datatype?", "2": "Can a boolean field component exist without being connected through role_of to a boolean datatype?", "3": "Generated CQs:Is there any boolean field component that does not have the role_of property linking it to a boolean datatype?", "4": "Does the existence of a boolean field component guarantee its association with a boolean datatype via the role_of property?", "5": "Must all instances of boolean field component possess at"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: procedure datatype\nDescription: procedure datatype is defined as a subclass of non-aggregate datatype. Instances of this class represent atomic values that are operations (procedures) on values of designated parameter datatypes. A procedure datatype must possess non-numeric, exact, and non-ordered qualities, and it is composed of specific members: a procedure generator, a procedure-parameter list, and a return-parameter specification. It is also characterized by having at least the operations ‘Equal:procedure’ and ‘Invoke:procedure’. This formalization encapsulates all operations on a collection of datatypes, treating each procedure as an indivisible (atomic) value.\nAxiom: {'subClassOf': ['non-aggregate datatype'], 'propertyRestrictions': ['[has_quality some non-numeric]', '[has_member some procedure generator]', '[has_quality some exact]', '[has_member some procedure-parameter-list]', '[has_operation some Equal:procedure]', '[has_quality some non-ordered]', '[has_operation some Invoke:procedure]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of procedure datatype necessarily exhibit at least one quality classified as non-ordered?", "1": "Is it required for procedure datatype to have the has_quality property related to something which is non-ordered?", "2": "Can procedure datatype exist without possessing any non-ordered quality via the has_quality relationship?", "3": "Is it possible for procedure datatype not to have any has_quality connection to a non-ordered entity?", "4": "Is there any procedure datatype that lacks any non-ordered quality through the has_quality property?", "5": "Does procedure datatype always have a has_quality relation to at least one non-ordered thing?", "6": "Can a"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: upper bound\nDescription: upper bound is defined as a subclass of bound, representing a specific type of bound characterized by having exactly one value of type xsd:integer associated through the has-value property. This formalization ensures that every instance of upper bound uniquely specifies a single integer value as its bound.\nAxiom: {'subClassOf': ['bound'], 'propertyRestrictions': []}\nGenerated CQs:", "generated_outputs": {"0": "Does the concept of upper bound fall under the general category of bound?", "1": "Which subclasses are encompassed by bound, including upper bound?", "2": "What broader classes does upper bound belong to within the hierarchy?", "3": "Generated CQs:Is upper bound categorized as a kind of bound?", "4": "Which higher-level classes include upper bound as their member?", "5": "Under what overarching concepts is upper bound classified?", "6": "Generated CQs:Is upper bound a specialized form of bound?", "7": "What more general categories does upper bound pertain to?", "8": "In relation to bound, which subclasses exist alongside upper bound?", "9": "Generated CQ"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index upperbound\nDescription: index upperbound is defined as a subclass of bound, characterized by the property restriction that it must have exactly one value of type xsd:integer. This ensures that any instance of index upperbound represents a unique integer value serving as an upper bound within an indexing context.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has-value exactly 1 xsd:integer]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every instance of index upperbound possess at least one has-value property with an object classified as xsd:integer?", "1": "Is it necessary for index upperbound to have some has-value relation to an entity of type xsd:integer?", "2": "Can index upperbound exist without having any has-value property referencing an xsd:integer?", "3": "Can index upperbound have more than one has-value relationship to an xsd:integer?", "4": "No, the axiom restricts it to exactly one such relationship.", "5": "Does index upperbound always require exactly one has-value connection to an xsd:integer?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boolean datatype\nDescription: boolean datatype is defined as a subclass of non-numeric unordered primitive datatype. It has qualities that are non-ordered, non-numeric, and exact, indicating that boolean values are discrete, precise, and lack inherent ordering or numeric magnitude. Instances of boolean datatype support specific logical operations, including Not, And, Or, and Equal, with all operations yielding boolean results. This formalization captures the core characteristics of the boolean datatype: a primitive type that represents values with two alternatives (typically true and false), distinct from numeric or ordered datatypes, and amenable to fundamental logic operations.\nAxiom: {'subClassOf': ['non-numeric unordered primitive datatype'], 'propertyRestrictions': ['[has_quality some non-ordered]', '[has_quality some non-numeric]', '[has_quality some exact]', '[has_operation some Not:boolean]', '[has_operation some Or:boolean]', '[has_operation some Equal:boolean]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of boolean datatype necessarily have at least one quality that is non-numeric?", "1": "Is it possible for a boolean datatype to exist without being associated with any non-numeric quality?", "2": "Can a boolean datatype have multiple qualities, including those that are not non-numeric?", "3": "Is there any boolean datatype that does not possess any non-numeric quality?", "4": "Does the presence of a non-numeric quality guarantee an instance's classification as a boolean datatype?", "5": "Can a boolean datatype possess no qualities other than non-numeric ones?", "6": "Must all non-numeric qualities belong exclusively to boolean data types"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete base type\nDescription: discrete base type is defined as a subclass of base type, and is disjoint with real base type, ensuring that no individual can belong to both classes simultaneously. Members of this class participate in the role_of relationship with at least one discrete datatype, meaning that every discrete base type must be associated with some discrete datatype. This formalization distinguishes discrete base types from real base types and characterizes them by their association with discrete datatypes.\nAxiom: {'subClassOf': ['base type'], 'disjointWith': [], 'propertyRestrictions': ['[role_of some discrete datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "How are discrete base type and real base type distinguished within the ontology?", "1": "Is there any instance that can simultaneously be classified under both discrete base type and real base type?", "2": "Which ontological categories are explicitly stated as disjoint with real base type?://generated by LAMA (Latino and Monterey AI)"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record of boolean datatype\nDescription: record of boolean datatype is a subclass of record (tuple) datatype, disjoint from both record of real datatype and record of discrete datatype, ensuring that no individual can belong to any two of these classes simultaneously. Members of this class are characterized by having at least one member that is a boolean field-list, meaning each record must include at least one field of boolean type. This enforces that the records grouped under this class are distinguished by containing boolean data fields.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'disjointWith': ['record of real datatype'], 'propertyRestrictions': ['[has_member some boolean field-list]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology define the separation between record of boolean datatype and record of discrete datatype?", "1": "Is it permitted for an instance to simultaneously belong to both record of boolean datatype and record of discrete datatype?", "2": "Which ontological classes are specified as mutually exclusive with record of discrete datatype?_REF>", "3": "GENERATED", "4": "Is there any instance that cannot be classified under either record of boolean datatype or record of discrete datatype?", "5": "GENERATED", "6": "CQ3:Is there any record of discrete datatype that also falls under record of boolean datatype?", "7": "GENERATED", "8": "CQ2:Is record of discrete datatype incompatible with record of"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record of discrete datatype\nDescription: record of discrete datatype is a subclass of record (tuple) datatype, characterized by the requirement that it must have at least one member drawn from a discrete field-list. This ensures that instances of this class represent tuple datatypes whose components include one or more fields with discrete (distinct, countable) values.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'propertyRestrictions': []}\nGenerated CQs:", "generated_outputs": {"0": "Does every record of discrete datatype necessarily contain at least one member from a discrete field-list?", "1": "Is having some discrete field-list property required for being classified as a record of discrete datatype?", "2": "Can an instance of record of discrete datatype exist without any association with a discrete field-list property?", "3": "://end-generated CQs\nGenerated CQs:Is record of discrete datatype limited exclusively to those records where each element comes from a discrete field-list?", "4": "Are all members of a record of discrete datatype restricted to values drawn from a discrete field-list?", "5": "Does membership in a discrete field-list property"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set of discrete datatype\nDescription: set of discrete datatype is defined as a subclass of set datatype, representing collections where each member belongs to a discrete base type (such as integers or other countable values). This class is explicitly disjoint from set of real datatype, ensuring that no instance can simultaneously be a set of both discrete and real datatypes. The axiom requires that every member of a set of discrete datatype must be of a discrete base type, emphasizing its use for finite or countably infinite elements.\nAxiom: {'subClassOf': ['set datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_member some discrete base type]']}\nGenerated CQs:", "generated_outputs": {"0": "What are the logical constraints that separate instances of set of discrete datatype and set of real datatype?", "1": "Is it permitted for an individual to belong simultaneously to both set of discrete datatype and set of real datatype?", "2": "Which classes within the ontology are declared incompatible with set of real datatype?", "3": "Generated CQs:Is there any overlap allowed between set of discrete datatype and set of real datatype in terms of membership?", "4": "Can an element be part of both a set of discrete datatype and a set of real datatype at once?", "5": "How does the ontology enforce the distinction between set of discrete datatype and set of real"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate datatype\nDescription: aggregate datatype is defined as a subclass of generated datatype and is explicitly disjoint with non-aggregate datatype, ensuring that no individual can be both an aggregate and a non-aggregate datatype. It is characterized by having at least one member that is an aggregate generator (has_member some aggregate generator). Commonly referred to as a \"structured datatype,\" this class captures datatypes that are composed of multiple components or members rather than being atomic.\nAxiom: {'subClassOf': ['generated datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_member some aggregate generator]']}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between aggregate datatype and non-aggregate datatype?", "1": "Is it permitted for any instance to belong simultaneously to both aggregate datatype and non-aggregate datatype?", "2": "Which classes are formally specified as incompatible with aggregate datatype within the ontology?://p\">", "3": "#Generated CQs:Is there any instance that can be classified under both aggregate datatype and non-aggregate datatype?", "4": "Which classes are recognized as alternatives to aggregate datatype within the ontology?", "5": "#Generated CQs:Can an entity be categorized exclusively as either aggregate datatype or non-aggregate datatype?", "6": "#Generated CQs"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: date and time datatype\nDescription: date and time datatype is a subclass of non-numeric ordered primitive datatype, and is explicitly disjoint with ordinal datatype—meaning no instance can simultaneously belong to both classes. Members of this class possess qualities of being exact and potentially unbounded, and they necessarily have members such as date-time units, date-time radices, and date-time factors. The class supports specific operations, including extension, equality checking, ordering, difference calculation, and rounding of date and time values. This formalization ensures a precise and operation-rich definition of datatypes used for representing and manipulating combined date and time information, distinct from ordinal forms of data.\nAxiom: {'subClassOf': ['non-numeric ordered primitive datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_operation some Extend:time&date]', '[has_operation some Equal:time&date]', '[has_operation some InOrder:time&date]', '[has_member some date-time unit]', '[has_operation some Difference:time&date]', '[has_quality some unbounded]', '[has_member some date-time radix]', '[has_quality some exact]', '[has_operation some Round:time&date]', '[has_member some date-time factor]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of date and time datatype require at least one member of date-time radix?", "1": "Is it necessary for any date and time datatype to include a date-time radix among its members?", "2": "Can a date and time datatype exist without having any date-time radix as a member?", "3": "...", "4": "Generated CQs:Is there any date and time datatype that does not possess the property has_member relating to date-time radix?", "5": "Are all entities associated via the has_member property with date and time datatype also linked to at least one date-time radix?", "6": "Does the existence of a date and time datatype imply"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: size\nDescription: size is defined as a subclass of value expression, representing a value-based concept within the ontology. Members of the size class are characterized by having exactly one associated value of type xsd:integer through the has-value property. This means each individual of size must specify a single integer value, reflecting the quantitative measurement that the class is intended to capture.\nAxiom: {'subClassOf': ['value expression'], 'propertyRestrictions': []}\nGenerated CQs:", "generated_outputs": {"0": "Must every instance of size have at least one value via the has-value property?", "1": "Is it necessary for any size to possess some value through has-value?", "2": "Does the existence of size imply the presence of at least one value linked by has-value?", "3": "Can there be a size without any values associated through the has-value property?", "4": "Is it possible for size to exist without being connected to any value via the has-value relationship?", "5": "Must all instances of size have the has-value property applied to them?", "6": "Are all sizes required to be related to at least one value via the has-value property?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: complex datatype\nDescription: complex datatype is defined as a subclass of numeric primitive datatype and is disjoint with numeric ordered primitive datatype—meaning no individual can simultaneously belong to both classes. Members of this class are characterized as numeric, non-ordered, and approximate in nature. They support operations specific to complex numbers, such as reciprocal, negation, square root, multiplication, addition, promotion, and equality (all in the complex domain). Instances of complex datatype must include members such as complex radix and complex factor. This formalization captures the essential characteristics and operations associated with complex numbers in data representation, distinguishing them from ordered numeric primitive datatypes.\nAxiom: {'subClassOf': ['numeric primitive datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_operation some Reciprocal:complex]', '[has_operation some Negate:complex]', '[has_quality some non-ordered]', '[has_member some complex radix]', '[has_quality some numeric]', '[has_operation some SquareRoot:complex]', '[has_operation some Multiply:complex]', '[has_operation some Add:complex]', '[has_quality some approximate]', '[has_operation some Promote:complex]', '[has_member some complex factor]', '[has_operation some Equal:complex]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology specify the relationship between complex datatype and numeric ordered primitive datatype?", "1": "Is there any instance that belongs to both complex datatype and numeric ordered primitive datatype?", "2": "Which classes are declared as mutually exclusive with numeric ordered primitive datatype?://php/stop/", "3": "Generated CQs:Is complex datatype classified under the broader category of numeric primitive datatype?", "4": "What higher-level categories encompass complex datatype within the ontology?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence of real datatype\nDescription: sequence of real datatype is a subclass of sequence datatype, characterized by the restriction that its members must be of the real base type. This means every element within a sequence of this type is a real number, ensuring that the sequence contains no members of other datatypes.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some real base type]']}\nGenerated CQs:", "generated_outputs": {"0": "Does sequence of real datatype fall under the broader category of sequence datatype?", "1": "Which specific types are classified as subclasses of sequence datatype?", "2": "What general categories encompass sequence of real datatype?_REF>", "3": "Does sequence datatype include sequence of real datatype as one of its subtypes?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bag datatype\nDescription: bag datatype is defined as a subclass of homogenous unordered aggregate datatype with variable size, and is explicitly disjoint with set datatype, ensuring that no instance can be both a bag and a set. Members of this class are characterized by containing elements (members) from a specified base type as well as from possible bag generators. Bags possess qualities of being non-ordered (element sequence is not significant), non-numeric, and \"exact\" (potentially referring to preserving element multiplicities). Bags support the following operations: Select, Insert, Delete, IsEmpty, Equal, and Serialize. This formalization models bags as flexible, unordered collections that can contain duplicate elements, are distinguished from sets by their handling of element multiplicity, and provide standard collection manipulation operations.\nAxiom: {'subClassOf': ['homogenous  unordered aggregate datatype with variable size'], 'disjointWith': [], 'propertyRestrictions': ['[has_quality some non-ordered]', '[has_operation some Select:bag]', '[has_operation some Insert:bag]', '[has_member some base type]', '[has_operation some Delete:bag]', '[has_operation some IsEmpty:bag]', '[has_operation some Equal:bag]', '[has_member some bag generator]', '[has_quality some non-numeric]', '[has_operation some Serialize:bag]', '[has_quality some exact]']}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between bag datatype and set datatype?", "1": "Is there any instance that simultaneously belongs to both bag datatype and set datatype?", "2": "Which ontological classes are stated as mutually exclusive with set datatype?://output3", "3": "Is it required for every set datatype to have at least one counterpart categorized under bag datatype?", "4": "Can something belong to bag datatype if it does not also fall into set datatype?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: node component\nDescription: node component is defined as a subclass of graph aggregate component and is explicitly disjoint with edge component, meaning an individual cannot simultaneously be a node component and an edge component. This class represents components within a graph structure that function as nodes, distinct from components serving as edges.\nAxiom: {'subClassOf': ['graph aggregate component'], 'disjointWith': []}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between node component and edge component?", "1": "Is it possible for an entity to belong to both node component and edge component classes?", "2": "Which other classes are specified as mutually exclusive with node component in this ontology?://en.wikipedia.org/wiki/Graph_(data)", "3": "Graph data may refer to data represented as a graph, where nodes represent entities or concepts, and edges connect them to indicate relationships. The structure can be directed, undirected, weighted, or unweighted, depending on the application. Graph data types include network graphs, hypergraphs, and multigraphs. Graph"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-numeric primitive datatype\nDescription: non-numeric primitive datatype is a subclass of primitive datatype and is explicitly disjoint with numeric primitive datatype, ensuring no individual can belong to both classes simultaneously. Members of this class must possess at least one quality that is non-numeric, as specified by the existential property restriction [has_quality some non-numeric]. This formalization captures primitive datatypes whose essential characteristics are not quantifiable numerically.\nAxiom: {'subClassOf': ['primitive datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_quality some non-numeric]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology define the separation between non-numeric primitive datatype and numeric primitive datatype?", "1": "Is it possible for an entity to have both qualities assigned from non-numeric and numeric primitive datatype categories?", "2": "Which specific classes are defined as mutually exclusive with numeric primitive datatype?://p>Generated CQs:Is there any instance that cannot be classified under either non-numeric or numeric primitive datatype due to their defined exclusivity?", "3": "What are the two types of primitive datatypes recognized within the ontology, and how do they relate to each other?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: heterogenous aggregate generator\nDescription: heterogenous aggregate generator is a subclass of aggregate generator and is equivalent to any class that is either a class generator, record generator, or table datatype. Members of this class possess the quality of being heterogenous, indicating that they generate or represent aggregates containing elements of diverse types or structures. This formalization ensures that any heterogenous aggregate generator is characterized by its structural diversity and can functionally align with multiple generator types.\nAxiom: {'subClassOf': [], 'equivalentClass': ['(class generator or record generator or table datatype)'], 'propertyRestrictions': ['[has_quality some heterogenous]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every heterogenous aggregate generator necessarily participate in at least one instance of has_quality with a value of heterogenous?", "1": "Is it required for heterogenous aggregate generators to have the heterogenous quality via the property has_quality?", "2": "Can a heterogenous aggregate generator exist without possessing the heterogenous quality through the has_quality relationship?", "3": "Generated CQ3:Is there any heterogenous aggregate generator that does not exhibit the heterogenous quality via the has_quality property?", "4": "Generated CQ4:Are all instances of heterogenous aggregate generator characterized solely by their participation in the has_quality relation with the heterogenous quality?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous aggregate datatype\nDescription: homogenous aggregate datatype is defined as a subclass of aggregate datatype, and is explicitly disjoint with heterogenous aggregate datatype, ensuring that no individual can belong to both classes simultaneously. Members of this class are characterized by the property that they must have at least one member that is a homogenous aggregate generator. This formalization captures collections whose elements are produced by uniform (homogeneous) mechanisms, distinguishing them from heterogeneous aggregates both in structure and membership requirements.\nAxiom: {'subClassOf': ['aggregate datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_member some homogenous aggregate generator]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology specify the separation between homogenous aggregate datatype and heterogenous aggregate datatype?", "1": "Is there any instance that can simultaneously be classified under both homogenous aggregate datatype and heterogenous aggregate datatype?", "2": "Which data types are formally stated as mutually exclusive with homogenous aggregate datatype?://end-generatedCQs\nGenerated CQs:Is it possible for an entity to be categorized as both homogenous aggregate datatype and heterogenous aggregate datatype?", "3": "What are the different data type categories that cannot coexist with homogenous aggregate datatype according to the ontology?", "4": "Which aggregate datatypes are declared incompatible"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: indirect acess property\nDescription: indirect access property is a subclass of access type, and is formally equivalent to any access performed either by value, in an implementation dependent manner, or by position. This means any instance of indirect access property is characterized by one or more of these access forms, distinguishing it from other access type subclasses.\nAxiom: {'subClassOf': ['access type'], 'equivalentClass': []}\nGenerated CQs:", "generated_outputs": {"0": "Does indirect access property fall under the broader category of access type?", "1": "Which specific types are classified as more specialized than access type, such as indirect access property?", "2": "What general categories encompass indirect access property within the ontology?", "3": "Generated CQs:Is indirect access property categorized under access type?", "4": "Which concepts are encompassed by access type, including indirect access property?", "5": "Under what higher-level classifications does indirect access property fall?", "6": "Generated CQs:Is indirect access property categorized under access type?", "7": "Which concepts are encompassed by access type, including indirect access property?", "8": "Under"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unbounded above\nDescription: unbounded above is defined as a subclass of unbounded, representing entities that do not have an upper bound. It is explicitly disjoint with unbounded below, ensuring that no individual can simultaneously be both unbounded above and unbounded below. This class characterizes those entities that lack an upper limit but may or may not have a lower bound.\nAxiom: {'subClassOf': ['unbounded'], 'disjointWith': []}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between unbounded above and unbounded below?", "1": "Is there any instance that can belong to both unbounded above and unbounded below classes?", "2": "Which classes are specified as mutually exclusive with unbounded above within the ontology?://en.wikipedia.org/wiki/Unbounded#Mathematics\">http://en.wikipedia.org/wiki/Unbounded#Mathematics\">wikipedia.org/wiki/Unbounded#Mathematics\nGenerated CQs:Is unbounded above classified under the broader category of unbounded?", "3": "Which subclasses fall under the category of unbounded, specifically including unbounded above?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: approximate\nDescription: approximate is defined as a subclass of exactness, meaning it represents a kind or degree of exactness. It is explicitly disjoint with exact, so no individual can simultaneously be both approximate and exact. This class formalizes the notion of approximation as distinct from strict exactness within the ontology.\nAxiom: {'subClassOf': ['exactness'], 'disjointWith': []}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology distinguish between approximate and exact concepts?", "1": "Is there any instance that can belong to both approximate and exact categories?", "2": "Which classes are specified as mutually exclusive with approximate?", "3": "://generated by LAMA 1.4.0.0\">Are approximate and exact classified as disjoint types according to the ontology?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ordered\nDescription: ordered is defined as a subclass of order, indicating that all instances of ordered are also considered orders according to the ontology. It is explicitly disjoint with non-ordered, meaning that no individual can be simultaneously classified as both ordered and non-ordered. This formalization distinguishes entities that possess or exhibit ordering from those that do not.\nAxiom: {'subClassOf': ['order'], 'disjointWith': []}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation is specified between ‘ordered’ and ‘non-ordered’ classes?", "1": "Is any instance allowed to belong to both the categories ‘ordered’ and ‘non-ordered’?", "2": "Which ontological classes are declared incompatible with ‘ordered’?_REF_1}"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Difference:set\nDescription: Difference:set is defined as a subclass of the difference operation, representing the set-theoretic difference between collections or sets. It is explicitly disjoint with Difference:time&date, so no instance can be both a set difference and a time/date difference. This class captures operations or results concerning the removal of elements from one set that exist in another, and is restricted to set-based contexts.\nAxiom: {'subClassOf': ['difference operation'], 'disjointWith': []}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between Difference:set and Difference:time&date within the ontology?", "1": "Is there any instance that simultaneously belongs to both Difference:set and Difference:time&date categories?", "2": "Which classes are specified as disjoint with Difference:set in this ontology?", "3": "1) Does Difference/set intersect with Difference:time&date at any point?", "4": "2) How does the ontology define the exclusivity between Difference:set and Difference:time&date?", "5": "3) Are all instances of Difference:set necessarily distinct from those categorized under Difference:time&date?", "6": "4) Which other classes"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Insert:bag\nDescription: Insert:bag is defined as a subclass of insert operation, signifying that it represents a specific type of insertion action. It is declared disjoint with Insert:table, which means that an instance of Insert:bag cannot simultaneously belong to the Insert:table class. This distinction enforces mutual exclusivity between these two types of insertion operations.\nAxiom: {'subClassOf': ['insert operation'], 'disjointWith': []}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation is specified between Insert:bag and Insert:table?", "1": "Is there any instance that can concurrently be classified under both Insert:bag and Insert:table?", "2": "Which classes are declared incompatible with Insert:bag within this ontology?://endignore\nGenerated CQs:Is Insert:bag considered incompatible with Insert:column according to the ontology?", "3": "What other categories are explicitly distinguished from Insert:bag in this context?", "4": "Which entities are asserted not to coexist with Insert:bag in the ontology?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NonNegative:integer\nDescription: NonNegative:integer is defined as a subclass of nonNegative operation, representing integers that are greater than or equal to zero. It is formally disjoint with NonNegative:rational, ensuring that no individual can be both a NonNegative:integer and a NonNegative:rational. This class captures the concept of all non-negative integer values, distinguishing them from non-negative rational numbers.\nAxiom: {'subClassOf': ['nonNegative operation'], 'disjointWith': []}\nGenerated CQs:", "generated_outputs": {"0": "What logical distinction exists between NonNegative:integer and NonNegative:rational within the ontology?", "1": "Is any instance permitted to belong simultaneously to both NonNegative:integer and NonNegative:rational classes?", "2": "Which classes are explicitly stated as disjoint with NonNegative:integer?://end-hidden/>"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Serialize:bag\nDescription: Serialize:bag is defined as a subclass of serialize operation, representing a specific type of serialization process. It is explicitly disjoint with Serialize:table, ensuring that no instance can be classified as both Serialize:bag and Serialize:table. This distinction enforces separation between bag-based and table-based serialization methods.\nAxiom: {'subClassOf': ['serialize operation'], 'disjointWith': []}\nGenerated CQs:", "generated_outputs": {"0": "What ontological relationship is specified between Serialize:bag and Serialize:table?", "1": "Is there any instance that can belong to both Serialize:bag and Serialize:table classes?", "2": "Which classes are asserted as mutually exclusive with Serialize:bag?://end-generated-QA\nGenerated CQs:Is Serialize:bag categorized under the broader class of serialize operation?", "3": "Which subclasses fall within the category of serialize operation, including Serialize:bag?", "4": "What higher-level categories does Serialize:bag inherit from?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index access\nDescription: index access is defined as a subclass of direct access property and is explicitly disjoint with key access, meaning an individual cannot be both an index access and a key access. This class represents mechanisms or operations that permit direct access to elements based on their positional index within a collection, distinctly separating it from access methods based on explicit keys.\nAxiom: {'subClassOf': ['direct access property'], 'disjointWith': []}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between index access and key access in the ontology?", "1": "Is there any instance that can simultaneously belong to both index access and key access categories?", "2": "Which classes are specified as mutually exclusive with key access?://text/plain\">", "3": "Is index access classified under the broader category of direct access property?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: identifier not unique\nDescription: identifier not unique is a subclass of aggregate-imposed identifier uniqueness and is disjoint with identifier unique, meaning no individual can simultaneously be both identifier not unique and identifier unique. This class represents identifiers within an aggregate context that are not required to be unique, distinguishing them from identifiers that have enforced uniqueness at the aggregate level.\nAxiom: {'subClassOf': ['aggregate-imposed identifier uniqueness'], 'disjointWith': []}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology define the relationship between identifier not unique and identifier unique?", "1": "Is there any instance that belongs to both identifier not unique and identifier unique classes?", "2": "Which classes are specified as mutually exclusive with identifier unique according to the ontology?://text/plain\nGenerated CQs:Is it possible for an identifier to be classified under both identifier not unique and identifier unique?", "3": "What concepts are defined as incompatible with identifier unique within the ontology?", "4": "Can an entity simultaneously be recognized as identifier not unique and identifier unique?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: component mandatory\nDescription: component mandatory is defined as a subclass of component mandatoriness and is explicitly disjoint with component non-mandatory, ensuring that no individual can simultaneously be both a component mandatory and component non-mandatory. This class characterizes components that are required or obligatory within a given context, distinguishing them from non-mandatory components.\nAxiom: {'subClassOf': ['component mandatoriness'], 'disjointWith': []}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology distinguish between component mandatory and component non-mandatory?", "1": "Is there any instance that can belong to both component mandatory and component non-mandatory classes simultaneously?", "2": "Which other classes are specified as disjoint with component mandatory in the ontology?://stop\nGenerated CQs:Is component mandatory classified under the broader category of component mandatoriness?", "3": "What types fall under component mandatoriness, including component mandatory?", "4": "Which higher-level concepts encompass component mandatory within the ontology?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: recursive\nDescription: recursive is defined as a subclass of recursiveness, signifying that every instance of recursive inherits properties from recursiveness. It is explicitly disjoint with non-recursive, ensuring that no individual can simultaneously belong to both recursive and non-recursive classes. This formalization distinguishes all recursive instances from those that are non-recursive.\nAxiom: {'subClassOf': ['recursiveness'], 'disjointWith': []}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between recursive and non-recursive concepts within the ontology?", "1": "Is there any instance that can be classified as both recursive and non-recursive?", "2": "Which classes are specified as mutually exclusive with non-recursive?", "3": "://p>"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive field identifier\nDescription: descriptive field identifier is a subclass of field identifier, and is explicitly disjoint with target field identifier, meaning that no individual can simultaneously be both a descriptive field identifier and a target field identifier. This class represents identifiers that have descriptive purposes, distinguishing them from identifiers that serve as targets. The disjointness axiom enforces a clear conceptual separation between descriptive and target field identifiers within the ontology.\nAxiom: {'subClassOf': ['field identifier'], 'disjointWith': []}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology distinguish between descriptive field identifiers and target field identifiers?", "1": "Is there any overlap allowed between descriptive field identifiers and target field identifiers?", "2": "Which classes are defined as mutually exclusive with target field identifiers in this ontology?", "3": "Generated CQs:Is there any overlap allowed between descriptive field identifiers and target field identifiers?", "4": "Which classes are defined as mutually exclusive with target field identifiers in this ontology?", "5": "What is the ontological relationship established between descriptive field identifiers and target field identifiers?", "6": "Generated CQs:What is the ontological relationship established between descriptive field identifiers and target field identifiers?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive record of primitives field component\nDescription: descriptive record of primitives field component is a subclass of labeled dataset descriptive field component. Every instance of this class must be associated, via the property role_of, with at least one record of primitives datatype. This formalization indicates that members play a specific role in describing labeled datasets by being directly linked to data representations consisting of primitive types.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': []}\nGenerated CQs:", "generated_outputs": {"0": "Does every descriptive record of primitives field component necessarily have the 'role_of' property linking it to some record of primitives datatype?", "1": "Is it required for any descriptive record of primitives field component to participate in the 'role_of' relation with a record of primitives datatype?", "2": "Can there exist a descriptive record of primitives field component without being related through the 'role_of' property to any record of primitives datatype?", "3": "...", "4": "Does the presence of the 'role_of' property connecting a descriptive record of primitives field component to a record of primitives datatype guarantee membership in the descriptive record of primitives field component class?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive record of discrete field component\nDescription: descriptive record of discrete field component is a subclass of labeled dataset descriptive field component. It is characterized by the property that it plays some role in relation to a record of discrete datatype, indicating its involvement in describing or annotating fields within a labeled dataset that take on discrete values. This class ensures that its instances are specifically linked to descriptive information about discrete data fields.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[role_of some record of discrete datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Does descriptive record of discrete field component fall under the broader classification of labeled dataset descriptive field component?", "1": "Which types of descriptive field components include descriptive record of discrete field component as a more specific instance?", "2": "What higher-level categories encompass descriptive record of discrete field component within the context of labeled datasets?", "3": "Generated CQs:Is descriptive record of discrete field component classified under labeled dataset descriptive field component?", "4": "What specific subclasses are included within labeled dataset descriptive field component, such as descriptive record of discrete field component?", "5": "Under which overarching classes does descriptive record of discrete field component fall within the ontology?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: list specification\nDescription: list specification is defined as a subclass of specification. This means all instances of list specification are also considered specifications. No additional disjointness, property restrictions, or further descriptive details are specified, so the class serves as a specialization of the general concept of specification for use cases where differentiation among specification types is needed.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types fall under the category of specification, such as list specification?", "1": "What broader classes does list specification belong to within the hierarchy?", "2": "Is list specification classified under the more general category of specification?", "3": "Generated CQs:Is list specification categorized as a type of specification?", "4": "Which concepts are encompassed by specification, including list specification?", "5": "Does list specification represent a specialized form of specification?", "6": "Generated CQs:What higher-level categories include list specification as their member?", "7": "How do list specification and specification relate in terms of classification?", "8": "Is list specification a subtype of specification?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: value space\nDescription: value space is defined as a subclass of specification. This means that every value space is a type of specification, inheriting the general characteristics of specification while representing a distinct concept within that category. No additional distinguishing features or restrictions are asserted by the current axioms.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "generated_outputs": {"0": "Which entities fall under the category of specification, including value space?", "1": "Is value space classified as a form of specification?", "2": "What broader classes encompass value space according to the ontology?://www.obofoundry.org/wiki/index.php?page=EDAM&amp;conceptId=http://edamontology.topbraid.com/ValueSpace", "3": "Are all specifications necessarily equivalent to at least one value space?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tag-value list\nDescription: tag-value list is defined as a subclass of specification, indicating that it represents a specific kind of specification. This class formalizes entities that provide information or structure through a collection of tags and their corresponding values, typically used to encode attribute data in a structured format.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "generated_outputs": {"0": "Which types are encompassed within the category of specification, such as tag-value list?", "1": "Is every tag-value list classified under the broader group of specification?", "2": "What higher-level categories does tag-value list belong to according to the ontology?", "3": "Generated CQs:Is tag-value list categorized as a type of specification?", "4": "Which more general concepts include tag-value list as a specialized instance?", "5": "Generated CQs:What are all the subclasses included under specification, specifically including tag-value list?", "6": "Generated CQs:Can a tag-value list be considered a form of specification?", "7": "Generated CQ"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: direction\nDescription: direction is defined as a subclass of specification. This means that every direction is a specific type of specification, and it inherits all characteristics and properties applicable to specifications in the ontology. No further constraints or descriptions have been provided, so the class serves as a general categorization for directions under the broader concept of specifications.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "generated_outputs": {"0": "Which concepts fall under the category of specification, such as direction?", "1": "Is direction classified as a more specific form within the broader group of specification?", "2": "What higher-level categories encompass direction within the ontology?://generated by AskQuestions 1.0 (https://github.com/AskQuestions/AQ4O)", "3": "CQ3: Which concepts are subsumed by specification, including direction?", "4": "CQ2: Is direction considered a narrower instance of specification?", "5": "CQ1: What broader classes include direction as a member?", "6": "CQ4: Does the category specification encompass direction"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: select-item specification\nDescription: select-item specification is defined as a subclass of specification. This indicates that every select-item specification is a type of specification, inheriting all characteristics of the parent class, with no additional restrictions or distinctions provided in the current formalization. No further disjointness or property constraints are specified.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "generated_outputs": {"0": "Which broader classes does select-item specification belong to within the ontology?", "1": "Is select-item specification categorized under the general concept of specification?", "2": "What specific types fall under the category of specification, such as select-item specification?", "3": "Is select-item specification classified as a form of specification?", "4": "What higher-level concepts encompass select-item specification?", "5": "Does select-item specification represent a more specialized kind within the overall classification of specification?", "6": "Which subtypes are recognized under the overarching group of specification, including select-item specification?", "7": "Is select-item specification included among the specifications listed in the ontology?", "8": "Under which general categories does"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: datatype generator\nDescription: datatype generator is defined as a subclass of directive information entity. This indicates that any datatype generator inherits all structural and semantic characteristics of directive information entities, typically representing an information construct that prescribes or instructs the generation of datatypes. No further property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['directive information entity']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes encompass datatype generator within the ontology?", "1": "Is datatype generator classified under the category of directive information entity?", "2": "Which specific types fall under directive information entity, including datatype generator?", "3": "Generated CQs:Is datatype generator categorized as a subtype of directive information entity?", "4": "What general categories does datatype generator inherit from in the ontology?", "5": "Generated CQs:How does the classification structure relate datatype generator to directive information entity?", "6": "Does the concept of datatype generator belong to the set of directive information entity subclasses?", "7": "Generated CQs:Which superclasses are associated with datatype generator, specifically directive"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: characterizing operation\nDescription: characterizing operation is a subclass of directive information entity. It refers to the set of operations that, either performed on or producing values of a datatype, distinguish that datatype from others with otherwise identical value spaces except potentially for symbol substitution. This class is used to formally capture the unique operational behaviors that define and differentiate datatypes in an information system.\nAxiom: {'subClassOf': ['directive information entity']}\nGenerated CQs:", "generated_outputs": {"0": "Which entities are subclasses of directive information entity, including characterizing operation?", "1": "Is every characterizing operation classified under directive information entity?", "2": "What broader categories does characterizing operation fall within?://generated by EDAtoolbox v1.0.0.1 - please do not modify this line.", "3": "Is characterizing operation categorized as a type of directive information entity?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: data representational model\nDescription: data representational model is defined as a subclass of directive information entity. This means any instance of a data representational model is also an instance of directive information entity, inheriting all its properties and characteristics. The class is intended to capture entities that provide structured directives on how data is to be represented or organized.\nAxiom: {'subClassOf': ['directive information entity']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types are classified under directive information entity, such as data representational model?", "1": "Is every data representational model categorized within the broader group of directive information entity?", "2": "What higher-level categories encompass data representational model?://generated from CQs", "3": "Is data representational model included among the subclasses of directive information entity?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: explicit subtype generator\nDescription: explicit subtype generator is defined as a subclass of subtype generator, meaning every explicit subtype generator is also a subtype generator. No further restrictions or characteristics are specified by the current axioms or descriptions.\nAxiom: {'subClassOf': ['subtype generator']}\nGenerated CQs:", "generated_outputs": {"0": "What higher-level categories encompass explicit subtype generators?", "1": "Which concepts are classified under subtype generator, such as explicit subtype generators?", "2": "Is explicit subtype generator categorized under the broader class of subtype generator?", "3": "Generated CQs:Is explicit subtype generator considered a more specific form of subtype generator?", "4": "What subtypes fall within the category of subtype generator, including explicit subtype generators?", "5": "Generated CQs:How does the ontology relate explicit subtype generators to the parent concept subtype generator?", "6": "Generated CQs:Which types are included under the subtype generator classification, for instance, explicit subtype generators?", "7": "Generated C"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: natural number\nDescription: natural number is defined as a subclass of defined datatype, indicating that it represents a specific kind of datatype with well-established properties. Natural numbers typically include non-negative integers (0, 1, 2, ...), and are formally distinguished from other datatypes by their discrete, countable nature. This classification ensures that any individual of the class natural number is treated as a clearly defined, foundational numeric datatype.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "generated_outputs": {"0": "What higher-level classes encompass natural number within the ontology?", "1": "Is natural number categorized under defined datatype?", "2": "Which subclasses fall under the defined datatype category, including natural number?", "3": "Generated CQs:Is natural number classified as a type of defined datatype?", "4": "What broader concepts does natural number belong to within the ontology?", "5": "Generated CQs:Which parent categories include natural number among their members?", "6": "Does natural number fall under the more general class defined datatype?", "7": "Generated CQs:Are all instances of natural number also classified under defined datatype?", "8": "What are the specific subtypes included in defined"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: modulo\nDescription: modulo is defined as a subclass of defined datatype, indicating that it represents a specifically characterized datatype within the ontology. No further domain-specific properties or restrictions are specified for this class based on the current axiom.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "generated_outputs": {"0": "What higher-level classes does modulo belong to?", "1": "Which subclasses fall under defined datatype, including modulo?", "2": "Is modulo categorized under the broader class of defined datatype?://php.ini\nGenerated CQs:Is modulo classified as a more specific form of defined datatype?", "3": "What types are encompassed by defined datatype, such as modulo?", "4": "Which superclasses are associated with modulo in the ontology?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bit\nDescription: bit is defined as a subclass of defined datatype, indicating that it represents a specific, well-defined data value within the ontology. As a data-oriented class, bit inherits all characteristics of defined datatypes but is further specialized for contexts where only binary or distinctly specified data values are relevant.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "generated_outputs": {"0": "What broader categories encompass bit?", "1": "Which subclasses fall under defined datatype, such as bit?", "2": "Is bit categorized under defined datatype?", "3": "Generated CQs:Is bit classified as a type of defined datatype?", "4": "What general types does bit inherit from within the ontology?", "5": "Does bit represent a more specific form of defined datatype?", "6": "Generated CQs:Is bit recognized as a subtype of defined datatype?", "7": "Which higher-level classes include bit among their subtypes?", "8": "Can bit be considered a specialized instance of defined datatype?", "9": "Generated CQs:Under what overarching categories"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bit string\nDescription: bit string is defined as a subclass of defined datatype, representing a specific type of datatype whose values consist of sequences of bits. This classification situates bit string within the hierarchy of datatypes and indicates its specialization for encoding data as ordered collections of binary digits.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes encompass bit string as a member?", "1": "Which subclasses are included under defined datatype, such as bit string?", "2": "Is bit string classified as a more specific instance of defined datatype?", "3": "Does the concept of bit string fall under defined datatype?", "4": "Are all bit string instances also categorized as defined datatype?", "5": "What are the direct superclasses associated with bit string?", "6": "Can bit string be considered a kind of defined datatype?", "7": "Which higher-level categories does bit string belong to?", "8": "Does bit string have any parent concepts other than defined datatype?", "9": "Under which overarching class is bit string organized?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: character string\nDescription: character string is defined as a subclass of defined datatype. This means any instance of character string is also recognized as a defined datatype, typically representing a sequence of characters used to encode textual information.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "generated_outputs": {"0": "What broader categories include character string within their classification?", "1": "Is character string classified under the more general category of defined datatype?", "2": "Which specific subclasses are encompassed by defined datatype, such as character string?", "3": "Does character string fall under the broader class of defined datatype?", "4": "What higher-level concepts does character string inherit from according to the ontology?", "5": "Is defined datatype a supercategory for character string?", "6": "To which overarching classes can character string be assigned?", "7": "Can character string be categorized as a type of defined datatype?", "8": "Which entities are considered specializations of defined datatype, including character string?", "9": "Under"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time interval\nDescription: time interval is defined as a subclass of defined datatype, indicating that it represents a structured data value within the ontology. As a specialized datatype, time interval refers to a span or duration of time, inheriting all properties and constraints applicable to defined datatypes.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes does time interval fall under according to the ontology?", "1": "Which specific concepts are categorized as subtypes of defined datatype, such as time interval?", "2": "Is time interval classified as a more specific form of defined datatype?", "3": "Generated CQs:Is time interval encompassed by the category of defined datatype?", "4": "What general categories include time interval as their member?", "5": "Which subclasses are directly associated with defined datatype, including time interval?", "6": "Generated CQs:Does time interval exist within the scope of defined datatype?", "7": "Which higher-level concepts has time interval been assigned as a subtype"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: octet\nDescription: octet is defined as a subclass of defined datatype, establishing it as a specific type of datatype within the ontology. This formalization indicates that any instance of octet must satisfy all constraints applicable to defined datatype, but provides no further restrictions or additional properties beyond this classification.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific datatypes are classified under defined datatype, such as octet?", "1": "Is octet categorized under the broader class of defined datatype?", "2": "What general classes encompass octet within the ontology?", "3": "Generated CQs:Can an entity be considered an octet if it does not fall under defined datatype?", "4": "Which higher-level categories include octet as their member?", "5": "Does octet represent a more specialized form of defined datatype?", "6": "Generated CQs:Is octet recognized as a particular kind of defined datatype?", "7": "What lower-level concepts are included within defined datatype, for example octet?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: octet string\nDescription: octet string is defined as a subclass of defined datatype. This means that octet string represents a specific type of datatype, though its precise structure and constraints are not further elaborated in the current axioms. Members of this class inherit all characteristics of defined datatype.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "generated_outputs": {"0": "Which broader classes encompass octet string within the ontology?", "1": "Is octet string categorized under defined datatype?", "2": "What specific subclasses fall under defined datatype, including octet string?", "3": "Generated CQs:Is octet string classified as a more specialized form of defined datatype?", "4": "Which types are directly included in defined datatype, such as octet string?", "5": "Generated CQs:Does defined datatype include octet string among its subclasses?", "6": "What general categories does octet string inherit from in the ontology?", "7": "Generated CQs:What are the parent categories for octet string according to the ontology"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: private\nDescription: private is defined as a subclass of defined datatype, indicating that it represents a specific kind of datatype within the ontology. No additional restrictions or disjointness axioms are specified, so its primary characteristic is its hierarchical relationship as a more specialized form of defined datatype.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "generated_outputs": {"0": "What broader categories encompass the concept 'private' within the ontology?", "1": "Which concepts are classified under 'defined datatype', including 'private'?", "2": "Is every instance of 'private' necessarily an instance of 'defined datatype'?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: object identifier\nDescription: object identifier is defined as a subclass of defined datatype. This means that every object identifier is a specific type of defined datatype, typically used to uniquely distinguish individual entities or objects within a system or dataset.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes encompass object identifier?", "1": "Which identifiers are categorized under defined datatype?", "2": "Is object identifier classified as a kind of defined datatype?", "3": "Generated CQs:Is object identifier classified as a type of defined datatype?", "4": "Which subclasses fall under defined datatype, including object identifier?", "5": "What parent categories does object identifier have within the context of datatypes?", "6": "Generated CQs:Does object identifier represent a more specific form of defined datatype?", "7": "To which higher-level datatypes can object identifier be related?", "8": "Is object identifier included among the subtypes of defined datatype?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: stack\nDescription: stack is defined as a subclass of defined generator. This means every stack is a type of defined generator, inheriting all characteristics associated with defined generators. No additional property restrictions, disjointness, or equivalence assertions are specified. This class is intended to capture entities that possess the structural or functional traits of defined generators, refined specifically as stacks.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes does'stack' belong to within the ontology?", "1": "Is'stack' categorized under the more general group of defined generator?", "2": "Which specific types fall under the concept of defined generator, such as'stack'?://end-generated CQs\nThis will ensure that output is in the format: Q1", "3": "Q2", "4": "Q3  and there are exactly three questions, with no extra text and pipe (`", "5": "`) used as separator. Stop generation after the third question. 2019-11-19T10:53:46+00:00\nIs"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tree\nDescription: tree is defined as a subclass of defined generator. This indicates that any instance of tree is considered a type of defined generator, inheriting all properties and restrictions from that superclass. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes encompass tree within the ontology?", "1": "Is tree classified under the more general category of defined generator?", "2": "Which specific types fall under the category of defined generator, including tree?", "3": "Generated CQs:Does tree represent a specialized kind of defined generator?", "4": "What subclasses are encompassed by defined generator, such as tree?", "5": "Generated CQs:Is tree categorized as a particular form of defined generator?", "6": "Which higher-level categories include tree among their members, specifically defined generator?", "7": "Generated CQs:Can tree be seen as a special case within defined generator?", "8": "Under which overarching"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: optional\nDescription: optional is defined as a subclass of defined generator, indicating that every optional is a type of defined generator. This means all individuals classified as optional inherit the properties and restrictions of defined generator, but may have further distinguishing features or constraints specified elsewhere. There are no additional axioms or asserted properties currently restricting the class further.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "generated_outputs": {"0": "Which generators are more specific than defined generator, such as optional?", "1": "Is optional categorized under the broader class of defined generator?", "2": "What higher-level classes include optional within their hierarchy?", "3": "Generated CQs:Is optional encompassed as a subtype of defined generator?", "4": "Which subcategories fall under defined generator, including optional?", "5": "Generated CQs:Is optional considered a specialized form of defined generator?", "6": "Generated CQs:What general categories does optional fall under in this context?", "7": "Generated CQs:Does the classification structure specify optional as a special case of defined generator?", "8": "Generated CQ"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: directed labeled graph datatype generator\nDescription: directed labeled graph datatype generator is a subclass of defined generator. This class represents generators that are specifically designed to produce directed labeled graph datatypes, inheriting the general properties of defined generators while specializing in the context of graph structures with directed edges and labeled nodes or connections.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes encompass directed labeled graph datatype generator?", "1": "Is defined generator a more specific type than directed labeled graph datatype generator?", "2": "Which generators fall under the category defined generator, including directed labeled graph datatype generator?", "3": "Generated CQs:Is defined generator a more specific type than directed labeled graph datatype generator?", "4": "Which generators fall under the category defined generator, including directed labeled graph datatype generator?", "5": "What broader categories include directed labeled graph datatype generator within their classification hierarchy?", "6": "Generated CQs:Which generators are classified as subtypes of defined generator, such as directed labeled graph datatype generator?", "7": "Does"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-directed labeled graph generator\nDescription: non-directed labeled graph generator is defined as a subclass of defined generator. This means every non-directed labeled graph generator is a type of defined generator, inheriting its general properties. The class represents entities that produce non-directed graphs in which nodes and/or edges are assigned labels, but with no explicit directionality imposed on the connections.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "generated_outputs": {"0": "Which generators encompass non-directed labeled graph generator as a specialized instance?", "1": "Is non-directed labeled graph generator categorized under the broader class of defined generator?", "2": "What specific types fall within the category of defined generator, such as non-directed labeled graph generator?", "3": "Is non-directed labeled graph generator classified as a kind of defined generator?", "4": "Which more general classes does non-directed labeled graph generator belong to?", "5": "Does non-directed labeled graph generator fit into the category of defined generator?", "6": "What higher-level categories include non-directed labeled graph generator as a member?", "7": "Is defined generator a parent concept for non-directed labeled graph"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: vector generator\nDescription: vector generator is a subclass of defined generator, indicating that every vector generator is also a defined generator. No additional constraints or unique characteristics have been specified beyond this hierarchical relationship. The purpose and specific properties of vector generator are inherited from defined generator.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "generated_outputs": {"0": "What types fall under defined generator, such as vector generator?", "1": "Which broader categories include vector generator within their classification?", "2": "Is vector generator categorized as a type of defined generator?://endgenerated\nIs vector generator categorized as a type of defined generator?", "3": "Which broader categories include vector generator within their classification?", "4": "What types fall under defined generator, such as vector generator?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: procedure generator\nDescription: procedure generator is defined as a subclass of non-aggregate generator. This means that every procedure generator is a specific type of non-aggregate generator, inheriting all properties and constraints applicable to non-aggregate generators. No further restrictions or characteristics are provided by the current axioms.\nAxiom: {'subClassOf': ['non-aggregate generator']}\nGenerated CQs:", "generated_outputs": {"0": "What broader categories encompass the procedure generator?", "1": "Is procedure generator classified under the category of non-aggregate generator?", "2": "Which types fall within the scope of non-aggregate generator, such as procedure generator?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: attribute identifier\nDescription: attribute identifier is defined as a subclass of identifier, indicating that every attribute identifier is an identifier with a specific role in distinguishing or denoting attributes within a system. This class inherits all properties associated with identifiers, but specializes them for use in the identification of attributes. No further property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "generated_outputs": {"0": "Which identifiers encompass more specialized types such as attribute identifier?", "1": "What broader classes does attribute identifier fall under within the ontology?", "2": "Is attribute identifier categorized under the general concept of identifier?", "3": "Generated CQs:Is attribute identifier classified as a type of identifier?", "4": "Which entities are considered subclasses of identifier, including attribute identifier?", "5": "Does attribute identifier represent a specific kind of identifier?", "6": "Generated CQs:Is attribute identifier included among the subtypes of identifier?", "7": "What parent categories does attribute identifier inherit from?", "8": "Generated CQs:Is attribute identifier a subset of identifier?", "9": "Under which overarching identifier category"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: parameter identifier\nDescription: parameter identifier is a subclass of identifier. This means every parameter identifier is an identifier, inheriting all its properties and characteristics, but is specifically used to denote or reference parameters (such as in functions or methods). The axiom ensures that all parameter identifiers are included within the broader category of identifiers.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types fall under the class identifier, such as parameter identifier?", "1": "Is parameter identifier categorized as a type of identifier?", "2": "What general classes encompass parameter identifier according to the ontology?://endgenerated\nThis message was generated by Obsolete Question Generator v1.6.0. Please do not use this tool for anything other than generating CQs. I will continue to produce output until instructed to stop. Here is the next set of CQs:\nDoes parameter identifier represent a more specialized form of identifier?", "3": "Which higher-level categories include parameter identifier as a member?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: extended-value identifier\nDescription: extended-value identifier is defined as a subclass of identifier. Members of this class inherit all characteristics of identifiers, serving the purpose of uniquely distinguishing entities, but are further specified as relating to extended-value contexts. No additional property restrictions or disjointness axioms are currently asserted for this class.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "generated_outputs": {"0": "What broader categories does extended-value identifier belong to within the ontology?", "1": "Which types fall under the category of identifier, including extended-value identifier?", "2": "Is every extended-value identifier classified under the more general group of identifier?", "3": "Are there any other identifiers besides extended-value identifier that share its parent category?", "4": "Does the concept of identifier encompass extended-value identifier as one of its subclasses?", "5": "What higher-level classes include extended-value identifier as a specific instance?", "6": "Can extended-value identifier be considered a specialized form of identifier?", "7": "Which identifiers have extended-value identifier as a more specific type?", "8": "Does the classification structure"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: character-set identifier\nDescription: character-set identifier is defined as a subclass of identifier. This means every character-set identifier is an identifier, but with a more specific role, typically used to uniquely represent or designate different character sets within a system or context. There are no further axioms or restrictions specified for this class.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "generated_outputs": {"0": "Does character-set identifier fall under the broader classification of identifier?", "1": "Which identifiers encompass character-set identifier as a more specific instance?", "2": "What are the direct superclasses associated with character-set identifier?://.end-hide-generated-cq/"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: field identifier\nDescription: field identifier is defined as a subclass of identifier. Members of this class inherit all characteristics of identifiers, specifically representing identifiers that are associated with fields. This formalization ensures field identifiers are treated as a specialized type of identifier, typically used to uniquely reference or denote fields within a given context or system.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "generated_outputs": {"0": "Which types fall under the category of identifier, such as field identifier?", "1": "What broader classes encompass field identifier within the ontology?", "2": "Is field identifier categorized under the general group of identifier?", "3": "Generated CQs:Is field identifier classified as a specific kind of identifier?", "4": "Which subclasses are included within the concept of identifier, for instance field identifier?", "5": "Does field identifier represent a more particular form of identifier?", "6": "Generated CQs:Is field identifier recognized as a subtype of identifier?", "7": "Under which parent categories does field identifier fall according to the ontology structure?", "8": "Can field identifier be viewed as a specialization"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: date-time factor\nDescription: date-time factor is defined as a subclass of factor. This means every date-time factor is a type of factor, inheriting its general properties and constraints. No additional disjointness or property restrictions are specified, so instances of date-time factor possess all the characteristics of factors, potentially specializing in aspects related to date or time within their domain.\nAxiom: {'subClassOf': ['factor']}\nGenerated CQs:", "generated_outputs": {"0": "Which broader categories include date-time factor?", "1": "Is date-time factor classified under the category of factor?", "2": "What specific types fall within the factor class, such as date-time factor?", "3": "Generated CQs:Does date-time factor represent a more specialized form of factor?", "4": "Which higher-level classes encompass date-time factor?", "5": "Is date-time factor categorized as a kind of factor?", "6": "Generated CQs:Is date-time factor identified as a particular instance of factor?", "7": "Which subclasses are included under factor, such as date-time factor?", "8": "Generated CQs:What overarching group does date-time factor"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: scaled factor\nDescription: scaled factor is defined as a subclass of factor. This means that every scaled factor is a specific kind of factor, inheriting all characteristics of factors, but may possess additional properties or constraints related to scaling, depending on further ontology specification. There are no further axioms provided, so this class serves as a specialization for factors that have been subject to scaling.\nAxiom: {'subClassOf': ['factor']}\nGenerated CQs:", "generated_outputs": {"0": "Does scaled factor fall under the broader classification of factor?", "1": "Which types of factor include scaled factor as a more specific category?", "2": "What higher-level categories does scaled factor belong to within the ontology?", "3": "+ Is scaled factor categorized under the general concept of factor?", "4": "+ What subtypes are encompassed by factor, specifically including scaled factor?", "5": "+ To which overarching classes is scaled factor hierarchically related?", "6": "+ Can scaled factor be seen as a form of factor?", "7": "+ In what ways does scaled factor relate to its parent category factor?", "8": "+ Does the hierarchy include any other subclasses besides"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real factor\nDescription: real factor is defined as a subclass of factor. This means every real factor is, by definition, a factor, inheriting all characteristics shared by factors in general. There are no further distinguishing restrictions or properties specified, so real factor can be understood as a type of factor without additional specified constraints.\nAxiom: {'subClassOf': ['factor']}\nGenerated CQs:", "generated_outputs": {"0": "Which broader classes encompass real factor within their classification?", "1": "Is real factor categorized under the class of factor?", "2": "What specific types fall under the category of factor, including real factor?", "3": "1 person found this response useful", "4": "(0 votes)  # Ontology Engineering\nGenerated CQs:Is real factor classified as a type of factor?", "5": "Which entities are considered more specific forms of factor, such as real factor?", "6": "To which overarching categories does real factor belong according to the ontology?", "7": "0 people found this response useful", "8": "(0 votes)  # Ontology Engineering\nGenerated C"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: complex factor\nDescription: complex factor is defined as a subclass of factor. This means that every complex factor is a kind of factor, inheriting all properties of the factor class. There are no additional restrictions, disjointness, or property constraints specified for complex factor in the current formalization.\nAxiom: {'subClassOf': ['factor']}\nGenerated CQs:", "generated_outputs": {"0": "What broader categories encompass complex factor?", "1": "Is complex factor categorized under the general concept of factor?", "2": "Which specific types fall within the category of factor, including complex factor?://output3", "3": "Is complex factor classified as a type of factor?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: graph aggregate component\nDescription: graph aggregate component is defined as a subclass of aggregate field component. This indicates that every graph aggregate component inherits all characteristics of aggregate field components but may have additional specialized properties or constraints. Instances of this class are, therefore, specific types of aggregate field components, potentially involved in representing or handling aggregated data within a graph structure.\nAxiom: {'subClassOf': ['aggregate field component']}\nGenerated CQs:", "generated_outputs": {"0": "Which more general categories encompass graph aggregate component?", "1": "Is graph aggregate component classified under aggregate field component?", "2": "What specific components fall under the category of aggregate field component, including graph aggregate component?", "3": "Generated CQs:Is graph aggregate component categorized as a type of aggregate field component?", "4": "Which broader classes include graph aggregate component as a member?", "5": "Generated CQs:What higher-level concepts does graph aggregate component inherit from?", "6": "Does the classification of graph aggregate component fall under aggregate field component?", "7": "Generated CQs:Which subtypes are contained within aggregate field component, such as graph aggregate component"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: n-adic operation\nDescription: n-adic operation is defined as a subclass of characterizing operation. It represents operations that map ordered n-tuples of values—where each value may belong to a given or parameterized datatype—into a result that is also of the given or a parametric datatype. This class models operations with arity n, generalizing functions over sequences of values and emphasizing their domain and codomain datatype constraints.\nAxiom: {'subClassOf': ['characterizing operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which broader operational categories encompass n-adic operation?", "1": "What are all subclasses categorized under characterizing operation, including n-adic operation?", "2": "Is every n-adic operation classified as a type of characterizing operation?", "3": "Generated CQs:Is n-adic operation a specific form within the category of characterizing operation?", "4": "Which higher-level concepts does n-adic operation fall under in terms of operational classification?", "5": "Can n-adic operation be identified as a subset of characterizing operation?", "6": "Generated CQs:Is n-adic operation a more specialized instance within the"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined generator parameter-list\nDescription: defined generator parameter-list is a subclass of list specification. This means every defined generator parameter-list is a type of list specification, inheriting all its properties and constraints. Individuals in this class are formally recognized as specialized list specifications used for defining generator parameters.\nAxiom: {'subClassOf': ['list specification']}\nGenerated CQs:", "generated_outputs": {"0": "What higher-level classes encompass defined generator parameter-list?", "1": "Is defined generator parameter-list classified under the broader category of list specification?", "2": "Which specific types fall within list specification, including defined generator parameter-list?://output.txt\nGenerated CQs:Is defined generator parameter-list categorized under list specification?", "3": "What are the direct subclasses included within list specification, such as defined generator parameter-list?", "4": "To which parent categories does defined generator parameter-list belong?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DAG datatype generator\nDescription: DAG datatype generator is defined as a subclass of directed labeled graph datatype generator. Members of this class inherit all properties of directed labeled graph datatype generators, specializing in generating data types based on directed acyclic graph (DAG) structures. This class is used to represent systems or components that produce datatypes structured according to DAGs, ensuring acyclicity and directionality in their outputs.\nAxiom: {'subClassOf': ['directed labeled graph datatype generator']}\nGenerated CQs:", "generated_outputs": {"0": "Which higher-level categories encompass DAG datatype generator?", "1": "Is DAG datatype generator classified under the broader category of directed labeled graph datatype generator?", "2": "What specific instances fall within directed labeled graph datatype generator, including DAG datatype generator?", "3": "Generated CQs:Is DAG datatype generator categorized under directed labeled graph datatype generator?", "4": "Which broader classes does DAG datatype generator belong to?", "5": "Generated CQs:What are the direct parent categories for DAG datatype generator?", "6": "Does DAG datatype generator have a more general classification than directed labeled graph datatype generator?", "7": "Generated CQs:Is DAG datatype generator included in the set of directed"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: identifier\nDescription: identifier is defined as a subclass of information artifact entity. Members of this class represent informational constructs specifically designed to uniquely distinguish or label entities, concepts, or data within information systems. This formalization means every identifier is categorized under the broader class of information artifact entities, emphasizing its role in conveying and maintaining unique identity information.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "generated_outputs": {"0": "What are all the subclasses present under information artifact entity, including identifier?", "1": "Is identifier classified as a type of information artifact entity?", "2": "Which higher-level categories encompass identifier within the ontology?://end-generated-CQs\nGenerated CQs:Which general categories does identifier fall under according to the ontology structure?", "3": "Is identifier considered a specific instance of information artifact entity?", "4": "What are the direct parent classes for identifier within the ontology?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: value expression\nDescription: value expression is a subclass of information artifact entity. This means every value expression is formally classified as a type of information artifact entity, inheriting all its general properties and restrictions. No additional axioms or property restrictions are specified, so value expression is currently distinguished solely by its classification within the ontology hierarchy as a specialized form of information artifact entity.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "generated_outputs": {"0": "Which entities are more specific than information artifact entity, such as value expression?", "1": "What broader categories encompass value expression according to the ontology?", "2": "Is value expression categorized under information artifact entity?", "3": "Generated CQs:Is value expression classified as a type of information artifact entity?", "4": "Which higher-level concepts does value expression fall under in this ontology?", "5": "Does value expression represent a specialization of information artifact entity?", "6": "Generated CQs:Is value expression a narrower concept included within information artifact entity?", "7": "Which lower-level categories are covered by information artifact entity, such as value expression?", "8": "Generated CQs:"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: label\nDescription: label is defined as a subclass of information artifact entity, indicating that it represents a type of information artifact. Instances of this class are understood to bear, convey, or represent information, typically serving as markers or identifiers that provide descriptive or categorical details about other entities.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes encompass label within the ontology?", "1": "Is every instance of label classified under information artifact entity?", "2": "Which specific types fall under the category of information artifact entity, such as label?", "3": "Is information artifact entity a more general concept than label?", "4": "What categories does label belong to according to the hierarchy?", "5": "Does label fall under the classification of information artifact entity?", "6": "Which entities are direct specializations of information artifact entity, including label?", "7": "Can label be categorized as a kind of information artifact entity?", "8": "What general categories include label among their members?", "9": "Are there any higher-level concepts beyond"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: directive information entity\nDescription: directive information entity is defined as a subclass of information artifact entity. This means that every directive information entity is a type of information artifact entity, with no additional property restrictions or disjointness specified. Members of this class represent entities that are informational in nature and classified within the broader category of information artifact entities.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "generated_outputs": {"0": "What higher-level categories encompass directive information entity?", "1": "Is directive information entity categorized under information artifact entity?", "2": "Which specific entities fall under the class of information artifact entity, such as directive information entity?", "3": "Generated CQs:Is directive information entity a more specialized form of information artifact entity?", "4": "What general classes does directive information entity inherit from?", "5": "Generated CQs:Does directive information entity belong to the group of information artifact entity types?", "6": "Which entities are classified as specializations of information artifact entity, including directive information entity?", "7": "Generated CQs:What broader classes include directive information entity as"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: representation\nDescription: representation is defined as a subclass of information artifact entity, indicating that every instance of representation is an information-based object or artifact. This formalization situates representations within the broader context of informational entities, ensuring that they inherit all characteristic properties of information artifact entities. There are no additional property restrictions or disjointness conditions specified for this class.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes encompass representation within the ontology?", "1": "Is representation classified under the category of information artifact entity?", "2": "Which specific types fall under the general concept of information artifact entity, including representation?", "3": "Generated CQs:Is representation categorized as a kind of information artifact entity?", "4": "Which higher-level categories does representation belong to in the ontology?", "5": "What concepts are more specific than information artifact entity, such as representation?", "6": "Generated CQs:Can representation be considered a specialization of information artifact entity?", "7": "What general classifications include representation as a subtype?", "8": "Does representation represent a particular form"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: specification\nDescription: specification is defined as a subclass of information artifact entity. This means every specification is considered a type of information artifact, formally representing structured information or requirements typically used to describe, detail, or govern the properties or behavior of an entity, system, or process.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "generated_outputs": {"0": "What higher-level classes encompass specification within the ontology?", "1": "Is specification classified under the broader category of information artifact entity?", "2": "Which entities are categorized directly below information artifact entity, including specification?", "3": "Generated CQs:Is specification included among the types of information artifact entity?", "4": "What specific concepts fall under the umbrella of information artifact entity, such as specification?", "5": "Generated CQs:Which general categories does specification fall under within the ontology?", "6": "Does specification represent a specialized form of information artifact entity?", "7": "Generated CQs:Is information artifact entity a more comprehensive class than specification?", "8": "Under which overarching classification"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: equality\nDescription: equality is defined as a subclass of datatype property, indicating that it represents a specific type of property that links individuals to data values. This classification ensures that equality is used exclusively in contexts appropriate for datatype properties, which relate individuals to literal values rather than to other individuals.\nAxiom: {'subClassOf': ['datatype property']}\nGenerated CQs:", "generated_outputs": {"0": "What higher-level categories does the property 'equality' belong to within the ontology?", "1": "Which property types are encompassed by 'datatype property', including 'equality'?", "2": "Is 'equality' classified under the broader category of 'datatype property'?", "3": "Is 'equality' categorized under the more general concept of 'property'?", "4": "Which subproperties fall under 'property', such as 'equality'?", "5": "What overarching groups include 'property', specifically referencing 'equality'?", "6": "Does 'equality' represent a specialized form of 'property'?", "7": "How does the class hierarchy structure relate 'equality' to its parent category?", "8": "Is"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: maximum-size\nDescription: maximum-size is a subclass of size, representing the largest possible or allowable extent within a given context. Any individual classified as maximum-size must also be an instance of size, specifying the upper limit or boundary in measurement or quantity.\nAxiom: {'subClassOf': ['size']}\nGenerated CQs:", "generated_outputs": {"0": "Does maximum-size fall under the category of size?", "1": "Which subclasses are encompassed by size, including maximum-size?", "2": "What broader classes does maximum-size inherit from?", "3": "Generated CQs:Is maximum-size categorized as a type of size?", "4": "To which higher-level concepts is maximum-size related via subclassification?", "5": "Generated CQs:Which entities are more specific than size, such as maximum-size?", "6": "Generated CQs:Can maximum-size be seen as a particular form of size?", "7": "Generated CQs:What general types include maximum-size as a specialized concept?", "8": "Generated CQ"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: minimum-size\nDescription: minimum-size is defined as a subclass of size, indicating that it represents a more specific concept within the broader category of size. Members of this class inherit all characteristics of size, and are distinguished by representing some form of minimum or least amount within size-related contexts.\nAxiom: {'subClassOf': ['size']}\nGenerated CQs:", "generated_outputs": {"0": "Which subclasses are encompassed by the category size, such as minimum-size?", "1": "What higher-level categories include minimum-size as a member?", "2": "Is minimum-size categorized under the general concept of size?://p>"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate generator property\nDescription: aggregate generator property is defined as a subclass of quality, indicating that it represents a specialized type of quality. Members of this class inherit all characteristics of qualities, and specifically pertain to attributes or aspects associated with aggregate generators. No additional restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['quality']}\nGenerated CQs:", "generated_outputs": {"0": "What higher-level categories encompass aggregate generator property?", "1": "Is aggregate generator property categorized under the broader class of quality?", "2": "Which properties fall within the category of quality, including aggregate generator property?://en.wikipedia.org/wiki/Aggregate_generator#Formal_definition\">https://en.wikipedia.org/wiki/Aggregate_generator#Formal_definition</a></ref>. It is used to describe the relationship between a generator and its aggregate, indicating how the generator contributes to forming the aggregate. This property formalizes the concept of aggregation and has no further specification beyond its definition as a quality property."}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: datatype property\nDescription: datatype property is defined as a subclass of quality, indicating that each instance of datatype property inherits characteristics associated with quality. This classification suggests that datatype properties are viewed as specific types of qualities within the ontology.\nAxiom: {'subClassOf': ['quality']}\nGenerated CQs:", "generated_outputs": {"0": "What broader categories does datatype property fall under according to the ontology?", "1": "Is datatype property classified as a type of quality?", "2": "Which subclasses are encompassed by the category quality, including datatype property?", "3": "+ more +", "4": "+ no more  +", "5": "Generated CQs:Is datatype property categorized under the general concept of quality?", "6": "What higher-level classes include datatype property within their hierarchy?", "7": "Does datatype property represent a specialized form of quality?", "8": "+ more +", "9": "+ no more  +", "10": "Generated CQs:Is datatype property considered a specific kind of quality?", "11": "Which concepts are classified as sub"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: subtype generator\nDescription: subtype generator is defined as a subclass of datatype generator, indicating that every instance of subtype generator is also an instance of datatype generator. This classification specifies that subtype generators operate within the broader framework of datatype generators but may provide more specialized or refined functionality. No additional disjointness or property restrictions are specified.\nAxiom: {'subClassOf': ['datatype generator']}\nGenerated CQs:", "generated_outputs": {"0": "What general categories does subtype generator fall under?", "1": "Which entities are classified as subtypes of datatype generator?", "2": "Is subtype generator categorized as a specific kind of datatype generator?", "3": "Generated CQs:Is subtype generator included as a special form of datatype generator?", "4": "What higher-level classes encompass subtype generator?", "5": "Generated CQs:Does subtype generator represent a particular type of datatype generator?", "6": "Under which overarching groupings can subtype generator be placed?", "7": "Generated CQs:How does subtype generator relate hierarchically to datatype generator?", "8": "Generated CQs:Which subclasses are directly associated with datatype"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: date-time unit\nDescription: date-time unit is defined as a subclass of label, indicating that it represents a specific type of label used to denote units of time such as seconds, minutes, or hours in the context of date and time. No additional constraints or disjointness are specified, so its primary distinguishing feature is its specialization from the broader category of label.\nAxiom: {'subClassOf': ['label']}\nGenerated CQs:", "generated_outputs": {"0": "Which subclasses fall under the class label, including date-time unit?", "1": "Is date-time unit categorized as a more specific form of label?", "2": "What higher-level classes does date-time unit belong to within the ontology?://generated by AskOntologyEngineer 1.0.6 //end-generated */*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: date-time radix\nDescription: date-time radix is defined as a subclass of radix. This indicates that any instance of date-time radix inherits all characteristics of radix, while potentially adding more specific constraints or properties relevant to date and time representation bases. No further description or property restrictions are provided.\nAxiom: {'subClassOf': ['radix']}\nGenerated CQs:", "generated_outputs": {"0": "What broader categories does date-time radix fall under within the context of radices?", "1": "Is radix a parent class encompassing date-time radix as one of its subclasses?", "2": "Which specialized types of radix include date-time radix as a member?", "3": "#OntologyProcessing #RadixTypes #DateAndTimeRepresentation\"", "4": "#OntologyEngineering\"", "5": "#SubclassRelationship\"", "6": "#ClassificationSystem\"", "7": "#DataRepresentation\"", "8": "#KnowledgeOrganization\"", "9": "#InformationModeling\"", "10": "#ConceptualStructure\"", "11": "#DomainSpecificity\"", "12": "#CategoryMembership\"", "13": "#TypeInference\"", "14": "#"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: complex radix\nDescription: complex radix is a subclass of radix. This means every complex radix is a type of radix, inheriting all the general properties of radix. There are no additional property restrictions or disjointness axioms specified, so complex radix is simply categorized as a specialized form within the broader radix class.\nAxiom: {'subClassOf': ['radix']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes encompass complex radix?", "1": "Which types fall under the category of radix, including complex radix?", "2": "Is complex radix classified under the overarching group of radix?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real radix\nDescription: real radix is a subclass of radix, representing those members of radix that have the property of being real. Every real radix is formally included in the broader category of radix, but may possess additional distinguishing characteristics specifying real-valued properties. No further property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['radix']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes encompass real radix within the hierarchy?", "1": "Is real radix categorized under radix?", "2": "Which subclasses fall under the class radix, including real radix?", "3": "Generated CQs:Is real radix considered a more specific type within radix?", "4": "What higher-level categories does real radix belong to?", "5": "Generated CQs:Is radix the overarching group that includes real radix as a member?", "6": "Which types are encompassed by radix, such as real radix?", "7": "Generated CQs:Which radices are classified as subtypes of radix, specifically including real radix?", "8": "Does real radix fall under the general"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: scaled radix\nDescription: scaled radix is defined as a subclass of radix. This means every instance of scaled radix is also considered a radix. No additional property restrictions or disjointness axioms are specified, so a scaled radix inherits all characteristics of radix, potentially with further differentiation implied by its name or use context.\nAxiom: {'subClassOf': ['radix']}\nGenerated CQs:", "generated_outputs": {"0": "Which subclasses fall under radix, including scaled radix?", "1": "Is radix a more general category than scaled radix?", "2": "What broader classes encompass scaled radix within the ontology?", "3": "Generated CQs:What higher-level classifications include scaled radix?", "4": "Does scaled radix belong to the group of radices?", "5": "Which entities are categorized as specialized forms of radix, such as scaled radix?", "6": "Generated CQs:Is scaled radix classified under the general concept of radix?", "7": "What specific types of radix does the ontology define, including scaled radix?", "8": "Generated CQs:Can scaled radix be seen as a kind of"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: factor\nDescription: factor is defined as a subclass of value expression, indicating that every instance of factor is also recognized as a value expression. There are no additional restrictions or disjointness axioms specified, so factor inherits all characteristics of value expressions without further constraints.\nAxiom: {'subClassOf': ['value expression']}\nGenerated CQs:", "generated_outputs": {"0": "Which entities are classified under value expression, such as factor?", "1": "Is factor categorized within the broader class of value expression?", "2": "What higher-level concepts encompass factor according to the ontology?", "3": "Generated CQs:Is factor an example of a value expression?", "4": "Which subclasses fall under the category of value expression, including factor?", "5": "Generated CQs:What more general classes does factor belong to within this context?", "6": "Generated CQs:Does the concept factor fit into the classification of value expression?", "7": "Generated CQs:Is factor included as a specific type of value expression?", "8": "Generated CQ"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: radix\nDescription: radix is defined as a subclass of value expression. This indicates that any radix is a specific kind of value expression, inheriting all characteristics of value expressions and further specializing their meaning, typically referring to the numerical base in mathematical or computational contexts.\nAxiom: {'subClassOf': ['value expression']}\nGenerated CQs:", "generated_outputs": {"0": "Which subclasses are encompassed within value expression, including radix?", "1": "Is radix classified under the broader group of value expression?", "2": "What more general categories does radix belong to according to the ontology?", "3": "Generated CQs:Is radix categorized as a type of value expression?", "4": "Which higher-level classes include radix as a member?", "5": "Generated CQs:What are the direct superclasses for radix in this ontology?", "6": "Does radix fall under the category of value expression?", "7": "Generated CQs:Which entities are considered more specific than value expression, such as radix?", "8": "Generated CQs:Are"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bound\nDescription: bound is defined as a subclass of value expression, indicating that every instance of bound is also considered a value expression. No further restrictions or disjointness axioms are specified, so the defining characteristic of the bound class is its inheritance from value expression.\nAxiom: {'subClassOf': ['value expression']}\nGenerated CQs:", "generated_outputs": {"0": "Which subclasses are included within the category of value expressions?", "1": "Is bound categorized under the broader class of value expression?", "2": "What higher-level classes does bound fall into?", "3": "Generated CQs:Is bound classified as a type of value expression?", "4": "Which entities are more specific forms of value expression such as bound?", "5": "Generated CQs:What general categories encompass bound within the ontology?", "6": "Generated CQs:Is bound represented as a specialized kind of value expression?", "7": "Generated CQs:Under which overarching concepts is bound organized?", "8": "Generated CQs:Does bound belong to the group of"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: edge component\nDescription: edge component is defined as a subclass of graph aggregate component. This means that every edge component is a specialized type of graph aggregate component, inheriting all its characteristics. The class represents a distinct part or module within the broader category of aggregated components in graph structures. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['graph aggregate component']}\nGenerated CQs:", "generated_outputs": {"0": "Which types fall under the category of graph aggregate component?", "1": "Is edge component classified as a more specific form of graph aggregate component?", "2": "What higher-level categories does edge component belong to according to the ontology?", "3": "Generated CQs:What entities encompass edge component within their subclasses?", "4": "Does edge component represent a particular kind of graph aggregate component?", "5": "Which broader classes include edge component as a member?", "6": "Generated CQs:Is edge component categorized under the general concept of graph aggregate component?", "7": "Which subcategories are recognized for graph aggregate component, including edge component?", "8": "Generated CQs:Can"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled dataset descriptive field component\nDescription: labeled dataset descriptive field component is defined as a subclass of field component. This means every labeled dataset descriptive field component is by definition a type of field component. No additional property restrictions or disjointness constraints are specified, so its unique characterization is its specialization of the more general field component class.\nAxiom: {'subClassOf': ['field component']}\nGenerated CQs:", "generated_outputs": {"0": "What higher-level classes does labeled dataset descriptive field component fall under?", "1": "Which entities are classified as subclasses within field component, including labeled dataset descriptive field component?", "2": "Is labeled dataset descriptive field component categorized under the broader class of field component?", "3": "Is labeled dataset descriptive field component encompassed by the category of field component?", "4": "What overarching categories include labeled dataset descriptive field component as a member?", "5": "Which superclasses does labeled dataset descriptive field component inherit from?", "6": "Does labeled dataset descriptive field component belong to any higher-order classification besides field component?", "7": "Which specific types are encompassed by field component, such as"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled dataset target field component\nDescription: labeled dataset target field component is defined as a subclass of field component. This means every labeled dataset target field component is a specific type of field component, typically representing the target variable in a labeled dataset. No additional property or disjointness restrictions are specified for this class.\nAxiom: {'subClassOf': ['field component']}\nGenerated CQs:", "generated_outputs": {"0": "What higher-level categories does labeled dataset target field component fall under?", "1": "Which entities are classified as more specialized types within field component, such as labeled dataset target field component?", "2": "Is labeled dataset target field component categorized under the broader group of field components?", "3": "Generated CQs:Is labeled dataset target field component included as a kind of field component?", "4": "Which broader classes encompass labeled dataset target field component?", "5": "What are the direct superclasses for labeled dataset target field component?", "6": "Generated CQs:Is labeled dataset target field component a more specific form of field component?", "7": "What subclasses are"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: add operation\nDescription: add operation is defined as a subclass of dyadic arithmetic operation, indicating that it is an arithmetic operation that takes exactly two arguments. This formalization positions add operation within the hierarchy of arithmetic functions involving pairs of inputs, such as addition in standard mathematics.\nAxiom: {'subClassOf': ['dyadic aritmetic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of add operation fall under the category of dyadic arithmetic operation?", "1": "Which specific types are encompassed by dyadic arithmetic operation, including add operation?", "2": "What broader classes does add operation inherit from in the context of arithmetic operations?", "3": "Generated CQs:Is add operation classified as a kind of dyadic arithmetic operation?", "4": "Which subclasses are included within the category of dyadic arithmetic operation, such as add operation?", "5": "To which higher-level concepts does add operation belong in terms of arithmetic operations?", "6": "Generated CQs:What more general categories does add operation pertain"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: multiply operation\nDescription: multiply operation is defined as a subclass of dyadic arithmetic operation, indicating that it is an arithmetic operation involving exactly two operands. Instances of this class perform multiplication, processing two input values to produce their product.\nAxiom: {'subClassOf': ['dyadic aritmetic operation']}\nGenerated CQs:", "generated_outputs": {"0": "What are all the subclasses categorized under dyadic arithmetic operation, such as multiply operation?", "1": "Does multiply operation fall within the broader classification of dyadic arithmetic operation?", "2": "Which higher-level classes encompass multiply operation?_REF]\">", "3": "Generated CQs:What are all the subclasses included under dyadic arithmetic operation, specifically including multiply operation?", "4": "Is multiply operation classified as a type of dyadic arithmetic operation?", "5": "Which parent categories does multiply operation belong to within the ontology?", "6": "Generated CQs:Is multiply operation more general than some specific instances of dyadic arithmetic operation?", "7": "What operations are"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Divide:scaled\nDescription: Divide:scaled is defined as a subclass of dyadic arithmetic operation. This indicates that it represents an arithmetic operation involving two inputs (operands). No further description or distinguishing constraints are specified by the current axioms, so its meaning is inherited from the broader category of dyadic arithmetic operations.\nAxiom: {'subClassOf': ['dyadic aritmetic operation']}\nGenerated CQs:", "generated_outputs": {"0": "What specific types fall under the category of dyadic arithmetic operation, such as Divide:scaled?", "1": "Which higher-level categories encompass Divide:scaled within the arithmetic hierarchy?", "2": "Is Divide:scaled classified as a kind of dyadic arithmetic operation?://end-narrativeCQs", "3": "//generated on Sep 18, 2023, 1:11:34 (UTC) //output by org.apache.jena.reasonerasiappliedtoOntologygenerator.v0.1.2 // // // // // // // // // // // // // // // // // // //"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: delete operation\nDescription: delete operation is a subclass of dyadic updating operation. This means that every delete operation is considered a specific type of updating operation that involves two entities (typically an object and context). The axiom establishes the hierarchical relationship, indicating that delete operation inherits all structural characteristics of dyadic updating operations.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which types of updating operation include delete operation as a specialization?", "1": "What higher-level categories does delete operation fall under within updating operations?", "2": "Is delete operation categorized under dyadic updating operation?", "3": "Generated CQs:Is delete operation classified as a kind of dyadic updating operation?", "4": "Which broader classes encompass delete operation in the ontology?", "5": "Can delete operation be regarded as a more specific instance of dyadic updating operation?", "6": "Generated CQs:What are the direct subclasses included in the category of dyadic updating operation?", "7": "Does the concept delete operation belong to the group of dyadic updating operations?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: insert operation\nDescription: insert operation is defined as a subclass of dyadic updating operation. This means that every insert operation is considered a specific type of dyadic updating operation, typically involving two entities and resulting in an update. No further distinguishing characteristics or property restrictions are specified.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "generated_outputs": {"0": "What higher-level operational categories encompass insert operations?", "1": "Is insert operation categorized under the broader class of dyadic updating operation?", "2": "Which specific types fall within the category of dyadic updating operation, including insert operation?", "3": ": : :", "4": "Is insert operation classified as a kind of dyadic updating operation?", "5": "What general classes does insert operation inherit from?", "6": ": : :", "7": "Does the concept of dyadic updating operation include insert operation as one of its subtypes?", "8": ": :", "9": "Are there any additional operational subclasses beyond insert operation under dyadic updating operation?", "10": ": :", "11": "# Ontology"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Append:sequence\nDescription: Append:sequence is defined as a subclass of dyadic updating operation, meaning it is a specific type of operation that updates data by taking two inputs. This class formalizes the concept of appending one sequence to another as an update, inheriting the general properties of dyadic updating operations.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which types are specified as subclasses within the category of dyadic updating operation?", "1": "Does Append:sequence fall under the broader classification of dyadic updating operation?", "2": "What higher-level categories encompass Append:sequence according to its definition?://en.wikipedia.org/wiki/Append_(data_operation)"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AttributeFunctionOverride:class\nDescription: AttributeFunctionOverride:class is defined as a subclass of dyadic updating operation. This indicates that any member of AttributeFunctionOverride:class represents a special kind of operation within the scope of dyadic updating, where typically two entities are involved in an updating process. Without further restriction or description, all instances of this class inherit the structural and semantic characteristics of dyadic updating operations.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "generated_outputs": {"0": "What broader operational categories encompass AttributeFunctionOverride:class?", "1": "Is AttributeFunctionOverride classified under the category of dyadic updating operations?", "2": "Which specific subclasses fall under dyadic updating operation, including AttributeFunctionOverride?", "3": "1.0; m3r13y; Generated on Dec 23,'23,12:36 AM", "4": "2.0; m3r13y; Generated on Dec 23,'23,12:36 AM", "5": "3.0; m3r13y; Generated on Dec 23,'23,12:36 AM", "6": "4."}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AttributeReplace:class\nDescription: AttributeReplace:class is defined as a subclass of dyadic updating operation. This means it represents a type of operation that updates data by replacing an attribute, and, as a dyadic operation, it involves two input entities. No further restrictions, disjointness, or property constraints are specified in the axiom, so its primary characterization is as a specialized updating action within the context of dyadic operations.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific updating operations are encompassed by dyadic updating operation, including AttributeReplace:class?", "1": "What higher-level categories does AttributeReplace:class fall under within the ontology?", "2": "Is AttributeReplace:class classified as a form of dyadic updating operation?", "3": "0 comments", "4": "history - Charles Leutelt (01/03/2024)", "5": "generated CQs", "6": "www.obolibrary.org", "7": "license: CC-BY 4.0", "8": "output format: OWL", "9": "version: 1.2.3"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FieldReplace:record\nDescription: FieldReplace:record is defined as a subclass of dyadic updating operation. This means that it represents a specific type of updating operation involving two arguments or entities. As a subclass, FieldReplace:record inherits all the general characteristics of dyadic updating operations and is further specialized to represent operations where a field in a record is replaced or updated. No additional restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "generated_outputs": {"0": "Does FieldReplace:record fall under the broader classification of dyadic updating operation?", "1": "What are the more specific types included within the category of dyadic updating operation, such as FieldReplace:record?", "2": "Which higher-level classes encompass FieldReplace:record according to the ontology?://p>", "3": "Is every instance of FieldReplace:record categorized under dyadic updating operation?", "4": "Is dyadic updating operation a parent class for FieldReplace:record?", "5": "Which subclasses are directly associated with the concept of dyadic updating operation, including FieldReplace:record?", "6": "What"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: difference operation\nDescription: difference operation is defined as a subclass of dyadic operation, indicating it is a mathematical operation that requires exactly two operands. As a specific type of dyadic operation, the difference operation computes the result by evaluating the \"difference\" between its two input elements, distinguishing it from other dyadic operations such as sum or product.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which higher-level classes encompass difference operation?", "1": "Does every instance of difference operation belong to the category of dyadic operation?", "2": "What specific types fall under the broader class of dyadic operation, including difference operation?://p>"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic select operation\nDescription: dyadic select operation is defined as a subclass of dyadic operation, signifying that it is a binary operation acting on two operands. No additional constraints or distinguishing characteristics are specified beyond its membership in the broader class of dyadic operations.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "What are the direct superclasses associated with dyadic select operation?", "1": "Is dyadic select operation classified under the category of dyadic operation?", "2": "Which specific types fall within the broader group of dyadic operation, such as dyadic select operation?", "3": "+CQ3:Is dyadic operation a more general type encompassing dyadic select operation?", "4": "+CQ4Which higher-level categories include dyadic select operation as a member?", "5": "+CQ5+Are all instances of dyadic select operation also categorized under dyadic operation?", "6": "+CQ6+Can dyadic select operation be"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic aritmetic operation\nDescription: dyadic arithmetic operation is defined as a subclass of dyadic operation, indicating that every dyadic arithmetic operation involves exactly two inputs (operands). This class specifically focuses on operations in the arithmetic domain (such as addition, subtraction, multiplication, or division), extending the more general concept of dyadic operations by emphasizing their application to arithmetic computations.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types fall under the category of dyadic operation?", "1": "Is dyadic arithmetic operation classified within the broader group of dyadic operations?", "2": "What higher-level categories encompass dyadic arithmetic operation?_REF />"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic logical operation\nDescription: dyadic logical operation is defined as a subclass of dyadic operation, meaning it is an operation that takes exactly two inputs. This class specifically refers to logical operations (such as AND, OR, XOR) applied to two operands, distinguishing it from other kinds of dyadic operations that may not be logical in nature.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types are encompassed within the category of dyadic operation, such as dyadic logical operation?", "1": "Is every instance of dyadic logical operation classified under dyadic operation?", "2": "What broader operational categories does dyadic logical operation fall into?://end-generated CQs\nGenerated CQs:Is every instance of dyadic logical operation categorized under the broader class of dyadic operation?", "3": "Which higher-level classes include dyadic logical operation as a more specific type?", "4": "What are the subclasses that fall under the category of dyadic operation, including dyadic logical operation?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic set operation\nDescription: dyadic set operation is defined as a subclass of dyadic operation. This class encompasses operations that act on two sets as inputs. Members of this class must satisfy all properties of dyadic operations, specifically within the context of set-theoretic functions or relations.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "What are the more specific types classified under dyadic operation, such as dyadic set operation?", "1": "Which general categories encompass dyadic set operation within the ontology?", "2": "Is every instance of dyadic set operation also considered a type of dyadic operation?", "3": "# Ontology # Competency Questions # Generated CQs:What are the more specific types classified under dyadic operation, such as dyadic set operation?", "4": "Which general categories encompass dyadic set operation within the ontology?", "5": "Is every instance of dyadic set operation also considered a type of dyadic operation?", "6": "# Ontology # Compet"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic updating operation\nDescription: dyadic updating operation is defined as a subclass of dyadic operation, indicating that it involves two operands. While specific characteristics are not provided, this class inherits all properties of dyadic operations, typically meaning it operates on pairs of entities or values.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which types fall under the category of dyadic operation, such as dyadic updating operation?", "1": "Is dyadic updating operation categorized as a type of dyadic operation?", "2": "What broader classes encompass dyadic updating operation within the hierarchy?  # Ontology Engineering\nAnswered CQs:Is dyadic updating operation classified as a kind of dyadic operation?", "3": "Which specific operations are included under the general category of dyadic operation, such as dyadic updating operation?", "4": "Does dyadic updating operation represent a more specialized form of dyadic operation? # Ontology Engineering\nGenerated CQs:Is dy"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic comparison operation\nDescription: dyadic comparison operation is a subclass of dyadic operation. This class encompasses operations that involve two arguments and perform a comparative evaluation between them. Members of this class, as dyadic operations, specifically relate to comparison tasks (such as \"greater than\", \"less than\", or \"equal to\") applied to pairs of inputs.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which higher-level categories encompass dyadic comparison operation?", "1": "What are all specific types classified under dyadic operation, including dyadic comparison operation?", "2": "Is dyadic comparison operation categorized as a type of dyadic operation?", "3": "Does every instance of dyadic comparison operation fall within the broader group of dyadic operation?", "4": "How does dyadic comparison operation relate hierarchically to dyadic operation?", "5": "Which general classes include dyadic comparison operation as a member?", "6": "Can dyadic comparison operation be seen as a specialized form of dyadic operation?", "7": "Which more abstract concepts does dy"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic retrieve operation\nDescription: dyadic retrieve operation is defined as a subclass of dyadic operation, indicating it is an operation that acts on exactly two inputs or entities. No further distinguishing axioms or properties are specified, so its classification relies solely on this generalization.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which operations fall under the category of dyadic operation, such as dyadic retrieve operation?", "1": "Is every dyadic retrieve operation categorized as a type of dyadic operation?", "2": "What broader classes encompass dyadic retrieve operation within the ontology?", "3": "Generated CQs:Is dyadic retrieve operation classified as a specific form of dyadic operation?", "4": "Which subclasses are included under dyadic operation, for example dyadic retrieve operation?", "5": "Generated CQs:What more general concepts does dyadic retrieve operation inherit from in the ontology?", "6": "Generated CQs:Does dyadic operation encompass categories like dyadic"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: equal operation\nDescription: equal operation is defined as a subclass of dyadic comparison operation. This class represents operations that perform a comparison between two entities and evaluate whether they are equal. As a refinement of dyadic comparison operation, equal operation specifically focuses on checking and indicating equality between two operands or values.\nAxiom: {'subClassOf': ['dyadic comparison operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific comparison operations fall under the category of dyadic comparison operation?", "1": "Is equal operation classified as a type of dyadic comparison operation?", "2": "What broader operational categories encompass equal operation within the ontology?", "3": "Is equal operation more general than dyadic comparison operation?", "4": "Which higher-level comparisons include equal operation as a specialization?", "5": "Does equal operation belong to the group of dyadic comparison operations?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: in order operation\nDescription: in order operation is defined as a subclass of dyadic comparison operation, indicating that it represents a specific type of comparison involving two entities. As a specialized comparison operation, in order operation inherits all characteristics of dyadic comparison operations but further constrains its meaning to those operations that assess or evaluate entities with respect to their sequence or ordering.\nAxiom: {'subClassOf': ['dyadic comparison operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which comparison operation types are more specific than dyadic comparison operation, such as in order operation?", "1": "What broader operational categories encompass in order operation within comparison operations?", "2": "Is in order operation classified under the general category of dyadic comparison operation?://apiary.io/0004c6e7-1a0d-40f2-a3b9-b5e8a2efaaea\">"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: isEmpty operation\nDescription: isEmpty operation is defined as a subclass of boolean operation. This indicates that it represents a type of boolean operation, specifically one that evaluates a condition and returns a boolean value. No further restrictions or characteristics are provided by the axiom, so its primary purpose within the ontology is to serve as a specialized form of boolean operation.\nAxiom: {'subClassOf': ['boolean operation']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes encompass isEmpty operation?", "1": "Is every instance of isEmpty operation classified under boolean operation?", "2": "Which operations fall under the category of boolean operation, including isEmpty operation?://end-generated:CQs\nGenerated CQs:Is empty operation categorized under the class of boolean operation?", "3": "What specific subclasses are included within the group of boolean operations, such as isEmpty operation?", "4": "Which higher-level categories does isEmpty operation belong to according to the ontology?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: nonNegative operation\nDescription: nonNegative operation is a subclass of boolean operation. Any instance of nonNegative operation is, by definition, a type of boolean operation, inheriting all related properties and constraints. This classification indicates that nonNegative operation participates in logical or truth-value manipulations typical of boolean operations, but may have additional distinguishing characteristics defined outside of the given axioms.\nAxiom: {'subClassOf': ['boolean operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types are encompassed within the category of boolean operation, such as nonNegative operation?", "1": "Is every nonNegative operation classified under the broader group of boolean operation?", "2": "To what higher-level classes does nonNegative operation belong according to the hierarchy?://end-generated-CQs\nGenerated CQs:Is nonNegative operation categorized under the general class of boolean operation?", "3": "Which more specific operations fall under the category of boolean operation, including nonNegative operation?", "4": "What overarching classes include nonNegative operation as a member?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SetOf:set\nDescription: SetOf:set is defined as a subclass of boolean operation, indicating that it represents a form of operation consistent with the principles of Boolean logic. Members of this class inherit properties and constraints applicable to boolean operations. No further description is provided, so the class is formally understood as a type of boolean operation.\nAxiom: {'subClassOf': ['boolean operation']}\nGenerated CQs:", "generated_outputs": {"0": "What are all subclasses classified under boolean operation, such as setOf:set?", "1": "Which higher-level categories encompass setOf:set within their classification?", "2": "Is setOf:set categorized under the broader group of boolean operation?://end-narrative-cq"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: negate operation\nDescription: negate operation is defined as a subclass of monadic operation, meaning it represents an operation that acts on a single operand. As a monadic operation, negate operation typically involves transforming or inverting the value of its sole input.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "What higher-level classes encompass negate operation within the ontology?", "1": "Is negate operation classified under the broader category of monadic operation?", "2": "Which specific operations are categorized as subtypes of monadic operation, including negate operation?", "3": "#OntologyProcessing #OperationClassification", "4": "#NegateOperation", "5": "#MonadicOperation", "6": "#SubclassRelationship", "7": "#CognitiveArchitecture", "8": "#KnowledgeRepresentation", "9": "#QuestionAnswering", "10": "#SemanticWeb", "11": "#OntologyEngineering", "12": "#OperationType", "13": "#HigherLevelCategory", "14": "#MonadicOperation", "15": "#SpecificOperations", "16": "#SubtypeRelationship", "17": "#OntologyConstruction", "18": "#Operation"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: promote operation\nDescription: promote operation is classified as a subclass of monadic operation. This indicates that promote operation is an operation involving a single operand or argument, inheriting all characteristics associated with monadic operations. No further distinguishing features or constraints are specified beyond its classification within this hierarchy.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "What specific types fall under monadic operation, such as promote operation?", "1": "Is every promote operation categorized as a form of monadic operation?", "2": "Which broader classes encompass promote operation within the context of monadic operations?", "3": "Generated CQs:Is promote operation classified as a type of monadic operation?", "4": "What general categories does promote operation fall under according to the ontology?", "5": "Does the concept of promote operation fit within the definition of monadic operation?", "6": "Generated CQs:Is promote operation included within the set of monadic operations?", "7": "Which concepts are more specific than monadic operation, such as"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: serialize operation\nDescription: serialize operation is defined as a subclass of monadic operation. This means every serialize operation is, by definition, a type of monadic operation, inheriting its general behaviors and properties. There are no additional restrictions or relationships specified.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which operations are classified under the category of monadic operation, such as serialize operation?", "1": "Is serialize operation categorized within the broader class of monadic operation?", "2": "What higher-level classes encompass serialize operation according to the ontology?", "3": "Generated CQs:Is serialize operation considered a specialized form of monadic operation?", "4": "Which specific instances fall under the umbrella of monadic operation, including serialize operation?", "5": "Generated CQs:What overarching categories does serialize operation belong to within the context of operations?", "6": "Generated CQs:Can serialize operation be regarded as a more detailed instance of monadic operation?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: successor operation\nDescription: successor operation is defined as a subclass of monadic operation. This means that every successor operation is a type of operation that acts on a single argument. No additional restrictions or characteristics are specified, so the class inherits all properties of monadic operations.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "What general classes does successor operation fall under?", "1": "Which specific types are encompassed within monadic operation, including successor operation?", "2": "Is successor operation categorized under the broader class of monadic operation?://end-hide\nGenerated CQs:Is successor operation classified as a kind of monadic operation?", "3": "What are the direct subclasses of monadic operation, such as successor operation?", "4": "To which higher-level categories does successor operation pertain according to its classification?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cast:choice\nDescription: Cast:choice is defined as a subclass of monadic operation, indicating that it inherits all characteristics of monadic operations. This classification ensures that any instance of Cast:choice is considered a specific type of monadic operation, although further distinguishing properties or restrictions are not specified in the given axioms or description.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which higher-level categories include Cast:choice?", "1": "Is Cast:choice classified under monadic operation?", "2": "What are the subclasses encompassed within monadic operation, including Cast:choice?", "3": "Generated CQs:Is Cast:choice categorized as a type of monadic operation?", "4": "Which broader classes does Cast:choice fall under?", "5": "Generated CQs:What are the parent concepts for Cast:choice within the ontology?", "6": "Generated CQs:Does Cast:choice represent a specialization of monadic operation?", "7": "Generated CQs:Which entities are more general than Cast:choice according to"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Dereference:pointer\nDescription: Dereference:pointer is defined as a subclass of monadic operation. This means it represents a specific kind of monadic operation, typically referring to an action that takes a single operand and retrieves the value or object being pointed to by a pointer. Individuals of this class inherently possess the characteristics and constraints of monadic operations.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which types are recognized as subclasses within monadic operation, such as dereference:pointer?", "1": "Is dereference:pointer classified under the broader category of monadic operation?", "2": "What higher-level categories encompass dereference:pointer?://php }\">"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Discriminant:choice\nDescription: Discriminant:choice is defined as a subclass of monadic operation, indicating that it represents a specific type of operation that acts upon a single operand or input. No further restrictions or disjointness axioms are specified, so it inherits all characteristics of monadic operation while introducing the notion of 'choice' as its distinguishing feature.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which higher-level categories encompass Discriminant:choice?", "1": "Is every instance of Discriminant:choice classified under monadic operation?", "2": "What are the more specialized types included within monadic operation such as Discriminant:choice?", "3": "Generated CQs:Is Discriminant:choice categorized under the broader class of monadic operation?", "4": "Which general operations have Discriminant:choice as a specific instance?", "5": "Generated CQs:What are the direct superclasses associated with Discriminant:choice?", "6": "Generated CQs:Is Discriminant:choice a specialization of monadic operation?", "7": "Generated CQs:"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Extend:time&date\nDescription: Extend:time&date is defined as a subclass of monadic operation, indicating that it represents a single-argument operation within the ontology. No further restrictions or characteristics are specified beyond its placement in the class hierarchy as a specialized form of monadic operation.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which operations are categorized under monadic operation, such as Extend:time&date?", "1": "Is Extend:time&date classified as a type of monadic operation?", "2": "What broader operational categories encompass Extend:time&date?://end hide\nAnswered CQs:Is Extend:time&date classified as a type of monadic operation?", "3": "Which operations are more specific than monadic operation, including Extend:time&date?", "4": "Does Extend:time&date fall under the category of monadic operation?", "5": "Which classes are encompassed by monadic operation, such as Extend:"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Invoke:procedure\nDescription: Invoke:procedure is defined as a subclass of monadic operation, indicating that it represents a specific type of operation with a single argument or operand. This classification situates Invoke:procedure within the hierarchy of operations, emphasizing its functionality as a specialized, unary process. No further restrictions or disjoint relationships are specified.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which higher-level categories does Invoke:procedure fall under?", "1": "Is Invoke:procedure categorized as a type of monadic operation?", "2": "What concepts are encompassed within the category of monadic operation, including Invoke:procedure?", "3": "0 additional CQs ('Is Invoke:procedure classified under the broader group of monadic operation?' has been generated)", "4": "1:CQ:Is Invoke:procedure an instance of monadic operation?", "5": "2:CQ:What specific subtypes are included within monadic operation, such as Invoke:procedure?", "6": "3:CQ:Does Invoke:procedure represent"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Not:boolean\nDescription: Not:boolean is defined as a subclass of monadic operation, indicating that it is a single-argument logical operation. Members of this class represent logical operations that act on one boolean input to produce a boolean output, specifically performing logical negation.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types are classified under monadic operation, such as Not:boolean?", "1": "What broader operational categories encompass Not:boolean?", "2": "Is Not:boolean categorized under the general concept of monadic operation?://end hidegeneratedCQs\nGenerated CQs:What broader classes does Not:boolean fall into within the ontology structure?", "3": "Does Not:boolean belong to any subcategory of monadic operation?", "4": "Which higher-level concepts include Not:boolean as a member?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: monadic aritmetic operation\nDescription: monadic arithmetic operation is defined as a subclass of monadic operation. This means any instance of this class is a monadic operation (an operation with a single operand) specifically within the domain of arithmetic. It inherits all characteristics of monadic operations, restricted to those that perform arithmetic functions. No additional distinguishing axioms or constraints are currently specified.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which higher-level categories include monadic arithmetic operation?", "1": "Does every monadic arithmetic operation fall under the broader classification of monadic operation?", "2": "What specific types of monadic operation encompass monadic arithmetic operation?", "3": "Is monadic arithmetic operation categorized as a kind of monadic operation?", "4": "Which general classes does monadic arithmetic operation belong to?", "5": "Can monadic arithmetic operation be considered a more specialized form of monadic operation?", "6": "Which operations are classified as subtypes of monadic operation, including monadic arithmetic operation?", "7": "Does monadic operation encompass monadic arithmetic operation as one of its subclasses?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: monadic retrive operation\nDescription: monadic retrieve operation is defined as a subclass of monadic operation. This means every monadic retrieve operation is a type of monadic operation, inheriting all its characteristics. No further property or restriction axioms are specified, so its definition is limited to this hierarchical relationship.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types fall under the category of monadic operation, such as monadic retrieve operation?", "1": "Is monadic retrieve operation classified as a more general form of monadic operation?", "2": "To which higher-level categories does monadic retrieve operation belong within the context of operations?://p>", "3": "# generated CQs end"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: map operation\nDescription: map operation is defined as a subclass of monadic operation. This indicates that every map operation is itself a type of monadic operation, inheriting its general properties. The map operation typically represents an action that applies a given function to each element within a structure (such as a list, set, or collection), producing a new structure of the same form with the results. No additional constraints or disjointness axioms are specified.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which higher-level categories encompass map operation?", "1": "Is map operation classified under the broader category of monadic operation?", "2": "What specific operations fall within monadic operation, such as map operation?_REF>", "3": "#map_operation", "4": "map operation", "5": "monadic operation", "6": "#monadic_operation", "7": "subclassOf", "8": "monadic operation", "9": "Is map operation categorized under monadic operation?", "10": "Which types are more specialized than monadic operation, including map operation?", "11": "#map_operation", "12": "map operation", "13": "subclassOf", "14": "monadic operation", "15": "Is map operation a narrower concept than monadic operation?", "16": "#monadic_operation"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boolean operation\nDescription: boolean operation is defined as a subclass of monadic operation. This indicates that every boolean operation is a kind of monadic operation, typically involving a single argument and producing a boolean output (true or false). The class encompasses operations that act on one operand and yield a binary (boolean) result.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "What higher-level classes does boolean operation inherit from?", "1": "Which specific types fall under monadic operation, such as boolean operation?", "2": "Is boolean operation categorized under the broader class of monadic operation?_REF_1}"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: reciprocial operation\nDescription: reciprocal operation is formally defined as a subclass of monadic arithmetic operation, meaning it is an arithmetic operation that acts on a single operand. This class captures operations whose primary purpose is to return the multiplicative inverse (reciprocal) of their input value.\nAxiom: {'subClassOf': ['monadic aritmetic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which broader classes encompass reciprocal operation within the context of arithmetic operations?", "1": "Is every reciprocal operation classified under the category of monadic arithmetic operation?", "2": "What specific types are included in the set of monadic arithmetic operations, such as reciprocal operation?", "3": "Generated CQs:Is reciprocal operation categorized under the general concept of monadic aritmetic operation?", "4": "Which higher-level categories does reciprocal operation fall into within arithmetic operations?", "5": "Does reciprocal operation represent a specialized instance of monadic aritmetic operation?", "6": "Generated CQs:Is reciprocal operation a more specific form of monadic ar"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: round operation\nDescription: round operation is defined as a subclass of monadic arithmetic operation. This means every round operation acts on a single numerical input to produce its output, characterizing it as a unary arithmetic process, such as rounding a number to the nearest integer.\nAxiom: {'subClassOf': ['monadic aritmetic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types fall under monadic arithmetic operation, including round operation?", "1": "Is round operation classified under the broader category of monadic arithmetic operation?", "2": "What are the parent categories for round operation within the context of arithmetic operations?", "3": "Generated CQs:Is round operation categorized under monadic arithmetic operation?", "4": "Which more general concepts encompass round operation within the domain of arithmetic operations?", "5": "Generated CQs:What subcategories exist within monadic arithmetic operation, specifically including round operation?", "6": "Generated CQs:Does round operation represent a type of monadic arithmetic operation?", "7": "Generated CQs:Is"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SquareRoot:complex\nDescription: SquareRoot:complex is defined as a subclass of monadic arithmetic operation, indicating that it represents an arithmetic operation involving only one operand (monadic) in the context of complex numbers. This class formalizes the concept of computing the square root specifically within the domain of complex arithmetic.\nAxiom: {'subClassOf': ['monadic aritmetic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types fall under the category of monadic arithmetic operations, including SquareRoot:complex?", "1": "Is SquareRoot:complex classified as a type of monadic arithmetic operation?", "2": "What broader operational categories encompass SquareRoot:complex?://php/n\">"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: monadic select operation\nDescription: monadic select operation is defined as a subclass of monadic retrieve operation. This means every monadic select operation is a type of monadic retrieve operation, inheriting its essential characteristics. No additional property restrictions or disjointness constraints are specified; thus, its definition is strictly as a specialized form of monadic retrieve operation with no further distinguishing axioms.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes encompass monadic select operation within the ontology?", "1": "Which specific operations fall under the category of monadic retrieve operation, such as monadic select operation?", "2": "Is monadic select operation classified as a type of monadic retrieve operation?", "3": "Generated CQs:Is monadic select operation categorized under monadic retrive operation?", "4": "Which general operational categories include monadic select operation as a member?", "5": "What more general concepts does monadic select operation pertain to within this context?", "6": "Generated CQs:Is monadic select operation included as a subtype of mon"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AttributeFunctionInvocation:class\nDescription: AttributeFunctionInvocation:class is defined as a subclass of monadic retrieve operation. This indicates that any instance of AttributeFunctionInvocation:class inherits the characteristics of a monadic retrieve operation, meaning it represents an operation that retrieves a value based on a single operand or argument. The class is intended to capture invocations related to retrieving attributes in a functional, monadic manner.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "generated_outputs": {"0": "What higher-level classes encompass AttributeFunctionInvocation:class?", "1": "Which operations are categorized under monadic retrieval operations such as AttributeFunctionInvocation:class?", "2": "Is AttributeFunctionInvocation:class classified under the broader category of monadic retrieve operation?://endgenerated\nAre there any subclasses included within the class monadic retrieve operation, specifically AttributeFunctionInvocation:class?", "3": "Does AttributeFunctionInvocation:class fall under the general classification of monadic retrive operation?", "4": "Which types are more specific than monadic retrieve operation, including AttributeFunctionInvocation:class?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AttributeSelect:class\nDescription: AttributeSelect:class is defined as a subclass of monadic retrieve operation. This means that any instance of AttributeSelect:class represents a specific type of retrieval operation that acts on a single operand to extract or select an attribute. By inheriting from monadic retrieve operation, AttributeSelect:class is characterized by supporting retrieval actions that involve one input and are focused on obtaining attribute-level data.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "generated_outputs": {"0": "What broader operational categories encompass AttributeSelect:class?", "1": "Which operations fall under the category of monadic retrieve operation, including AttributeSelect:class?", "2": "Is AttributeSelect:class classified as a specialized form of monadic retrieve operation?", "3": "Generated CQs:Is AttributeSelect:class categorized under the general class of monadic retrieve operation?", "4": "What specific subclasses are included within monadic retrieve operation, such as AttributeSelect:class?", "5": "Generated CQs:To which higher-level retrieve operation groups does AttributeSelect:class belong?", "6": "Generated CQs:Does AttributeSelect:class fit into the subcategory of monadic retrieve operation"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FieldSelect:record\nDescription: FieldSelect:record is defined as a subclass of monadic retrieve operation, meaning it represents a specialized form of retrieval operation within a monadic (single-argument or single-result) context. No additional restrictions or properties are specified, so any instance of FieldSelect:record is also an instance of monadic retrieve operation, inheriting all its characteristics.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific operations fall under the category of monadic retrieve operation, such as FieldSelect:record?", "1": "Is FieldSelect:record classified as a type of monadic retrieve operation?", "2": "What broader operational categories include FieldSelect:record as a member?://end-generated-Q&A\nGenerated CQs:Is FieldSelect:record categorized under the general class of monadic retrieve operation?", "3": "Which higher-level classes encompass FieldSelect:record?", "4": "What more specific instances of monadic retrieve operation include FieldSelect:record?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Head:sequence\nDescription: Head:sequence is defined as a subclass of monadic retrieve operation. This means that every instance of Head:sequence is also considered a monadic retrieve operation, inheriting its fundamental characteristics and constraints. The class does not specify additional axioms or restrictions beyond this hierarchical relationship.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which operations are more specific than monadic retrive operation?", "1": "Is Head:sequence classified under the broader category of monadic retrieve operation?", "2": "What higher-level categories encompass Head:sequence within the ontology?://text/plain\">", "3": "#generated by AskQuestions 1.0.2#version=3.5.7\nNext message: How does the ontology represent the relationship between Head:sequence and monadic retrive operation?", "4": "Does Head:sequence fall under the classification of monadic retrieve operation?", "5": "Which subclasses are categorized under monadic retrieve operation?", "6": "#generated by Ask"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Tail:sequence\nDescription: Tail:sequence is defined as a subclass of monadic retrieve operation. This classification means that any individual instance of Tail:sequence is also a type of monadic retrieve operation, inheriting its foundational characteristics. In the absence of further description or additional axioms, Tail:sequence is interpreted as a specific kind of retrieval operation within a monadic context, implying it operates under the rules and structure of monads—commonly used in functional programming and computational logic for chaining operations.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which general categories encompass Tail:sequence?", "1": "What are all subclasses categorized under monadic retrive operation, including Tail:sequence?", "2": "Does Tail:sequence fall under the broader class of monadic retrive operation?", "3": "Generated CQs:Is Tail:sequence classified as a type of monadic retrive operation?", "4": "Which more general concepts does Tail:sequence inherit from in this domain?", "5": "Are there other entities that are subclasses of monadic retrive operation besides Tail:sequence?", "6": "Generated CQs:Is Tail:sequence classified as a type of monadic retrive operation?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: countable\nDescription: countable is defined as a subclass of cardinality, indicating that it represents a specific type of cardinality. Members of the countable class are characterized by having a cardinality that can be matched with the set of natural numbers, distinguishing them from other forms of cardinality.\nAxiom: {'subClassOf': ['cardinality']}\nGenerated CQs:", "generated_outputs": {"0": "Which broader categories encompass countable?", "1": "Is countable classified under the category of cardinality?", "2": "What specific concepts fall within the scope of cardinality, such as countable?", "3": "Generated CQs:Is countable categorized as a form of cardinality?", "4": "Which general classes include countable as a member?", "5": "Generated CQs:What broader groupings does countable belong to within the context of cardinality?", "6": "Generated CQs:Does countable represent a more specialized kind of cardinality?", "7": "Generated CQs:Is countable recognized as a subtype of cardinality?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: finite\nDescription: finite is a subclass of cardinality, indicating that it represents the concept of cardinalities that are limited or bounded. Any individual classified as finite is, by definition, also a cardinality but with the additional constraint that its size is not infinite.\nAxiom: {'subClassOf': ['cardinality']}\nGenerated CQs:", "generated_outputs": {"0": "Which concepts fall under the category of cardinality, such as finite?", "1": "What broader classifications does finite belong to within the context of cardinality?", "2": "Is finite categorized under the more general class of cardinality?", "3": "Generated CQs:Is finite considered a specific form of cardinality?", "4": "Which subclasses are encompassed by cardinality, including finite?", "5": "How does finite relate hierarchically to cardinality?", "6": "Generated CQs:Is finite encompassed by the overarching concept of cardinality?", "7": "Which higher-level classes does finite inherit from in this domain?", "8": "Generated CQs:What overarching"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: uncountable\nDescription: uncountable is defined as a subclass of cardinality, indicating that it represents a specific type of cardinality. Members of the uncountable class are those cardinalities that cannot be placed into a one-to-one correspondence with the natural numbers, distinguishing them from countable cardinalities.\nAxiom: {'subClassOf': ['cardinality']}\nGenerated CQs:", "generated_outputs": {"0": "Which broader classes encompass uncountable within their classification?", "1": "Is uncountable categorized under the general concept of cardinality?", "2": "What subtypes are present within cardinality, specifically including uncountable?", "3": "Generated CQs:Is uncountable classified as a form of cardinality?", "4": "Which higher-level concepts include uncountable among their subclasses?", "5": "What distinct subclasses fall under cardinality, such as uncountable?", "6": "Generated CQs:Is uncountable more specialized than cardinality?", "7": "Which specific types are included within cardinality, particularly uncountable?", "8": "Generated CQ"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bounded below\nDescription: bounded below is a subclass of bounded, representing entities that possess the property of being bounded in a particular way—specifically, from below. Any member of bounded below is, by definition, also a member of bounded.\nAxiom: {'subClassOf': ['bounded']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes encompass bounded below within their classification?", "1": "Which concepts are defined as more specific types under bounded, such as bounded below?", "2": "Does bounded include bounded below as one of its subclasses?://p>"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unbounded below\nDescription: unbounded below is defined as a subclass of unbounded, meaning every instance of unbounded below is also an instance of unbounded. This class represents entities that specifically possess the characteristic of being unbounded on their lower side or extent, while inheriting all properties and restrictions from the broader unbounded class.\nAxiom: {'subClassOf': ['unbounded']}\nGenerated CQs:", "generated_outputs": {"0": "Does 'unbounded below' fall under the category of 'unbounded'?", "1": "Which subclasses are encompassed by 'unbounded', such as 'unbounded below'?", "2": "What broader classes does 'unbounded below' belong to within this context?", "3": "Generated CQs:What higher-level categories include 'unbounded below' as a member?", "4": "Is 'unbounded below' classified as a type of 'unbounded'?", "5": "To which overarching concepts is 'unbounded below' hierarchically related?", "6": "Generated CQs:Is 'unbounded below' categorized under the broader concept"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unbounded\nDescription: unbounded is defined as a subclass of boundedness. This indicates that unbounded is a specific type or form of boundedness, and any instance of unbounded is also considered an instance of boundedness. No additional property restrictions or disjointness axioms are specified, so the class is distinguished solely by its hierarchical relation.\nAxiom: {'subClassOf': ['boundedness']}\nGenerated CQs:", "generated_outputs": {"0": "Which entities are classified under boundedness, including unbounded?", "1": "Is every instance of unbounded necessarily an instance of boundedness?", "2": "What broader categories encompass unbounded within the context of boundedness?", "3": "Generated CQs:Does unbounded fall under the general classification of boundedness?", "4": "Which subclasses are encompassed by boundedness, specifically including unbounded?", "5": "Under which overarching concepts is unbounded categorized relative to boundedness?", "6": "Generated CQs:Is unbounded a more specific concept than boundedness?", "7": "Which higher-level classes include unbounded within their scope?", "8": "Generated CQs"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: exact\nDescription: exact is defined as a subclass of exactness, indicating that any instance of exact exhibits all characteristics associated with exactness. No additional constraints or distinguishing axioms are specified for this class.\nAxiom: {'subClassOf': ['exactness']}\nGenerated CQs:", "generated_outputs": {"0": "Which concepts fall under the category of exactness?", "1": "Is exactness classified as a more general concept than exact?", "2": "What broader categories encompass the concept of exact?", "3": "Generated CQs:Is exactness categorized under the broader concept of exact?", "4": "Which subclasses are included within the concept of exactness?", "5": "Generated CQs:What higher-level categories does exact belong to?", "6": "Does the classification include exact as a specific type of exactness?", "7": "Generated CQs:Are there any instances of exactness that do not fall into the category of exact?", "8": "Which types of exactness include"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-numeric\nDescription: non-numeric is defined as a subclass of numericalness, indicating that every instance of non-numeric falls under the broader concept of numericalness. This class is intended to capture entities that are related to numericalness but are explicitly characterized by the absence of numeric value or representation.\nAxiom: {'subClassOf': ['numericalness']}\nGenerated CQs:", "generated_outputs": {"0": "What higher-level categories does non-numeric fall under within the ontology?", "1": "Which concepts are classified under numericalness, such as non-numeric?", "2": "Is non-numeric categorized as a specific type of numericalness?", "3": "Generated CQs:Is non-numeric considered a more specialized form of numericalness?", "4": "What subclasses are encompassed by numericalness, including non-numeric?", "5": "Generated CQs:Is numericalness a broader concept that includes non-numeric?", "6": "Generated CQs:Which overarching classes include non-numeric as a member?", "7": "Generated CQs:Is non-numeric classified"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-ordered\nDescription: non-ordered is defined as a subclass of order. This means that every instance of non-ordered is also an instance of order, but represents a specialized form or category within the broader concept of order. No additional property restrictions or disjointness axioms are specified, so the class is distinguished solely by its hierarchical position as a subclass.\nAxiom: {'subClassOf': ['order']}\nGenerated CQs:", "generated_outputs": {"0": "Does non-ordered fall under the broader classification of order?", "1": "Which specific types are encompassed by the general category order, such as non-ordered?", "2": "What higher-level categories does non-ordered belong to according to the ontology?", "3": "Generated CQs:What parent classes does non-ordered have within the ontology?", "4": "Is non-ordered categorized as a kind of order?", "5": "Which subclasses are classified directly below order, including non-ordered?", "6": "Generated CQs:Is non-ordered a more specific type than order?", "7": "What concepts are considered narrower specializations of"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:complex\nDescription: Add:complex is defined as a subclass of add operation, indicating that it represents a specific form of addition within the broader category of add operations. This formalization establishes that every instance of add:complex is also inherently an add operation, possibly specialized for use with complex numbers or structures, depending on further specification.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "generated_outputs": {"0": "What general operational categories encompass Add:complex?", "1": "Which types are more specific than add operation, including Add:complex?", "2": "Is Add:complex classified under the broader group of add operation?", "3": "No further questions from this set.", "4": "Is Add:complex a specific kind of add operation?", "5": "No further questions from this set.", "6": "Which higher-level concepts does Add:complex fall under within the context of operations?", "7": "No further questions from this set.", "8": "Can Add:complex be categorized under the broader class of add operation?", "9": "No further questions from this set.", "10": "What are the direct subclasses"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:integer\nDescription: Add:integer is defined as a subclass of add operation, indicating that it specifically represents addition operations where the operands are integers. Any individual that is an instance of Add:integer is inherently an add operation, but specialized for use with integer values.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes encompass Add:integer within the ontology?", "1": "Is every instance of Add:integer classified under the category of add operation?", "2": "Which specific types fall under the general class of add operation, including Add:integer?", "3": "Generated CQs:Is Add:integer categorized as a type of add operation?", "4": "What higher-level concepts does Add:integer belong to according to the ontology structure?", "5": "Generated CQs:Which subcategories are included within the add operation group, such as Add:integer?", "6": "Generated CQs:Does the concept Add:integer represent a more specialized form of"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:rational\nDescription: Add:rational is defined as a subclass of add operation, indicating that it represents a specialized type of addition focused on rational numbers. This class inherits all characteristics of add operations and is formally distinguished as pertaining to the addition of rational values.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types are classified under the category of add operation, such as Add:rational?", "1": "Is Add:rational categorized as a more general form of add operation?", "2": "What broader classes does Add:rational fall within according to the ontology?://p>", "3": "Generated CQs:What higher-level groupings encompass Add:rational within the hierarchy?", "4": "Does Add:rational belong to the class of add operation?", "5": "Generated CQs:Is Add:rational included among the subclasses of add operation?", "6": "Generated CQs:Which entities are encompassed by the category of add operation,"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:real\nDescription: Add:real is defined as a subclass of add operation. This means that every instance of Add:real is an add operation, specifically focused on real numbers. The class inherits all the characteristics of generic add operations, but may specify additional constraints or behaviors relevant to addition in the domain of real numbers. No further restrictions or disjointness axioms are asserted.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types fall under the category of add operation, such as Add:real?", "1": "What higher-level categories encompass Add:real within the context of mathematical operations?", "2": "Is Add:real classified as a kind of add operation?://p>", "3": "Generated CQs:Is Add:real categorized under the broader concept of add operation?", "4": "Which higher-level classes include Add:real among their instances or subclasses?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:scaled\nDescription: scaled is defined as a subclass of add operation. This means that any scaled operation is recognized as a specific type of add operation, inheriting all characteristics of add operations while potentially introducing its own specialized behavior or constraints. No further disjointness or property restrictions are specified for this class.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which broader classes encompass scaled within their classification?", "1": "Is scaled categorized under the general concept of add operation?", "2": "What specific instances fall under the category of add operation, including scaled?", "3": "Is it accurate to state that scaled represents a more detailed form of add operation?", "4": "Which higher-level categories does scaled belong to according to the ontology structure?", "5": "Does scaled inherit properties from its parent class, add operation?", "6": "To which overarching groupings does scaled pertain in terms of operational types?", "7": "Are there other subclasses identified directly beneath add operation besides scaled?", "8": "Can scaled be viewed as a particular kind of"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Delete:table\nDescription: Delete:table is defined as a subclass of delete operation. This means that every instance of Delete:table is a specific type of delete operation, inheriting all characteristics of delete operations, and representing deletion actions applied at the table level.\nAxiom: {'subClassOf': ['delete operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which types fall under the category of delete operation, such as Delete:table?", "1": "Is Delete:table classified as a kind of delete operation?", "2": "What broader operational categories encompass Delete:table?://end-hidegeneratedCQs", "3": "Is Delete:table included within the set of delete operations?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Difference:time&date\nDescription: Difference:time&date is defined as a subclass of difference operation. This class represents operations specifically focused on calculating the difference between temporal values such as times or dates, distinguishing it from other types of difference operations. Members of this class inherit all properties and constraints associated with difference operations, but are restricted to application within time and date contexts.\nAxiom: {'subClassOf': ['difference operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types fall under the category of difference operation, including Difference:time&date?", "1": "What broader classes encompass Difference:time&date within the ontology?", "2": "Is Difference:time&date classified under the general category of difference operation?://end-narrativeCQs", "3": "Generated CQs:Is Difference:time&date categorized as a type of difference operation?", "4": "Which higher-level categories does Difference:time&date fall into according to the ontology?", "5": "Can instances of Difference:time&date be considered specialized forms of difference operation?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Select:table\nDescription: Select:table is defined as a subclass of dyadic select operation, indicating that it represents a specific type of select operation involving two inputs or components. This class inherits all the characteristics and constraints of dyadic select operations, and any instance of Select:table is, by definition, also an instance of a dyadic select operation. No additional restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['dyadic select operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which types of select operation encompass Select:table?", "1": "Is Select:table classified under the broader category of dyadic select operation?", "2": "What more general categories does Select:table fall into according to the ontology?://end-hidegeneratedCQs", "3": "### Generated CQs:Is Select:table categorized as a kind of dyadic select operation?", "4": "Which subclasses are included within the group of dyadic select operations, specifically including Select:table?", "5": "What higher-level concepts encompass Select:table according to the ontology structure?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:array\nDescription: Equal:array is defined as a subclass of equal operation. This means Equal:array represents a specific type of equality operation, typically involving arrays, and inherits all the general characteristics of equal operations. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which types of equal operation include subclasses such as Equal:array?", "1": "What broader categories encompass Equal:array within the context of equal operations?", "2": "Is Equal:array classified under the more general concept of equal operation?", "3": "1. How does Equal:array relate hierarchically to other equal operations?", "4": "2. Which higher-level classes does Equal:array fall into when considering equal operations?", "5": "3. Does every instance of Equal:array also belong to the category of equal operation?", "6": "4. Under which overarching concepts is Equal:array categorized among equal operations?", "7": "5"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:bag\nDescription: Equal:bag is defined as a subclass of equal operation, indicating that it represents a specific type of equality evaluation or operation. Any instance of Equal:bag inherits all characteristics of equal operation, positioning it within the broader context of equality comparisons. There are currently no additional restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "What general classes does Equal:bag fall under according to the ontology?", "1": "Is Equal:bag classified as a more specific form of equal operation?", "2": "Which subclasses are encompassed by the concept of equal operation?://en.wikipedia.org/wiki/Bag_(set)"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:boolean\nDescription: Equal:boolean is a subclass of equal operation, representing operations that specifically check or enforce equality between two boolean values. Any individual of this class is an instance of an equal operation, with its domain restricted to boolean-type operands.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types are included under the category of equal operation, such as Equal:boolean?", "1": "What broader classes encompass Equal:boolean within the ontology?", "2": "Is Equal:boolean classified as a more specialized form of equal operation?://en.wikipedia.org/wiki/Boolean_algebra#Equality", "3": "http://www.cs.nyu.edu/pipermail/fowldl-l/2008q2/000134.html", "4": "https://www.w3.org/TR/owl2-webontology/", "5": "https://www.w3.org/2004/03/OWL#subClassOf", "6": "https://edasymbol.org/standard"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:character\nDescription: Equal:character is defined as a subclass of equal operation. This means every instance of Equal:character represents a specific kind of equality operation, likely focused on comparing characters. Since it inherits all characteristics of equal operation, Equal:character is used where character equality checks are required.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "What higher-level categories encompass Equal:character?", "1": "Is Equal:character categorized under the broader class of equal operations?", "2": "Which types fall under the category of equal operation, including Equal:character?://end//php //MQV3CQGenerator v1.0.0//php if (!defined('MQV3CQGenerator')) exit;?>"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:choice\nDescription: Equal:choice is a subclass of equal operation, indicating that each instance of Equal:choice is a specialized form of equal operation. No additional restrictions, disjointness, or property constraints are defined for this class, so its characterization is derived solely from its position in the class hierarchy.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which operations are classified under the broader category of equal operation, such as Equal:choice?", "1": "What higher-level categories encompass Equal:choice within the ontology?", "2": "Is Equal:choice categorized as a type of equal operation?://en.wikipedia.org/wiki/Equality_(data)"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:class\nDescription: Equal:class is defined as a subclass of equal operation, indicating that every instance of Equal:class is a specific type of equal operation. This formalization ensures that any individual classified as Equal:class must also satisfy the properties and constraints of equal operations within the ontology.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "What are the direct superclasses associated with Equal:class?", "1": "Which subclasses fall under the category of equal operation, such as Equal:class?", "2": "Does Equal:class represent a more specialized form of equal operation?", "3": "Is Equal:class categorized as a kind of equal operation?", "4": "Is equal operation a broader class encompassing Equal:class?", "5": "What higher-level classes does Equal:class inherit from?", "6": "Can Equal:class be seen as a subtype of equal operation?", "7": "Which broader concepts include Equal:class as a member?", "8": "Does Equal:class have any parent categories beyond itself?", "9": "Is there another"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:complex\nDescription: Equal:complex is defined as a subclass of equal operation. This means that every instance classified as Equal:complex is, by definition, also an instance of equal operation. No further distinguishing axioms or restrictions are specified for this class beyond its hierarchical placement.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "What broader operational categories encompass Equal:complex?", "1": "Which specific operations fall under the category of equal operation, including Equal:complex?", "2": "Is Equal:complex categorized under the general concept of equal operation?", "3": "No additional CQs", "4": "Does Equal:complex belong to the set of equal operations?", "5": "Are all instances of Equal:complex included within equal operation?", "6": "No additional CQs", "7": "Which parent classes does Equal:complex inherit from?", "8": "Can Equal:complex be considered a type of equal operation?", "9": "Is Equal:complex classified under equal operation?", "10": "What concepts are more specific than equal"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:enumerated\nDescription: Equal:enumerated is defined as a subclass of equal operation. This indicates that every instance of Equal:enumerated represents a specific kind of equal operation, inheriting all characteristics of equal operation while potentially introducing further constraints or properties relevant to enumerated equality.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "Does Equal:enumerated fall under the category of equal operations?", "1": "Which types are encompassed within equal operation, such as Equal:enumerated?", "2": "What broader classes does Equal:enumerated inherit from?://end-generatedCQs\nGenerated CQs:Is Equal:enumerated classified under the more general concept of equal operation?", "3": "Which subclasses are included within equal operation, like Equal:enumerated?", "4": "What overarching categories does Equal:enumerated belong to?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:integer\nDescription: Equal:integer is defined as a subclass of equal operation, indicating that it represents a specialized type of equality operation specifically applied to integers. Any instance of Equal:integer is inherently an equal operation, but it is characterized by its restriction to operands of the integer type.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which types are more specific than equal operation, such as Equal:integer?", "1": "What general categories encompass Equal:integer within the ontology?", "2": "Is Equal:integer classified under the broader concept of equal operation?:// end-generated-cq/"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:ordinal\nDescription: Equal:ordinal is defined as a subclass of equal operation, indicating that it specifically represents equality operations within the context of ordinal numbers or positions. Instances of this class inherit all properties of equal operations but are semantically restricted to comparisons involving ordinality.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types fall under the category of equal operation, such as Equal:ordinal?", "1": "What general categories encompass Equal:ordinal in the hierarchy of equal operations?", "2": "Is Equal:ordinal classified as a more specialized form of equal operation?", "3": "0 comments", "4": "report this answer\nGenerated CQs:Is Equal:ordinal categorized as a type of equal operation?", "5": "Which broader classes does Equal:ordinal belong to within the ontology?", "6": "Under what overarching concepts is Equal:ordinal subsumed?", "7": "0 comments", "8": "report this answer\nGenerated CQs:Is Equal:ordinal categorized as a type"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:pointer\nDescription: Equal:pointer is defined as a subclass of equal operation. This means it inherits all characteristics of an equal operation and represents a specific form or type of equality operation within the ontology. There are no further restrictions or differentiating axioms provided, so it can be broadly understood as any equality operation that is categorized or implemented as a \"pointer.\"\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which operations are more specialized than equal operation, such as Equal:pointer?", "1": "Is Equal:pointer classified under the broader category of equal operation?", "2": "What general categories encompass Equal:pointer as a member?://api/3rdparty/stop\nGenerated CQs:What are the superclasses of Equal:pointer according to the ontology?", "3": "Does Equal:pointer fall under the classification of equal operation?", "4": "Which subclasses are included in the class equal operation, specifically including Equal:pointer?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:procedure\nDescription: Equal:procedure is defined as a subclass of equal operation, indicating that it represents a specific type of equal operation. All instances of Equal:procedure inherit the characteristics and constraints of equal operations. No additional restrictions or properties are specified beyond this subclass relationship.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which procedures fall under the category of equal operation?", "1": "Is Equal:procedure classified as a kind of equal operation?", "2": "What broader operational classes does Equal:procedure belong to?://php/endif; //-->"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:rational\nDescription: Equal:rational is defined as a subclass of equal operation. This means every instance of Equal:rational is also an instance of equal operation, inheriting its properties and characteristics. This class specifically represents the application of equality within the context of rational values, distinguishing it from other types of equal operations.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "Does Equal:rational fall under the broader classification of equal operation?", "1": "Which specific types are categorized as subtypes of equal operation, such as Equal:rational?", "2": "To what higher-level concepts does Equal:rational belong according to the ontology?", "3": "Generated CQs:What overarching categories encompass Equal:rational within the ontology?", "4": "Is Equal:rational classified under the category of equal operation?", "5": "Generated CQs:Is Equal:rational included among the instances or subclasses of equal operation?", "6": "Generated CQs:Which more general classes does Equal:rational pertain to?", "7": "Generated CQs"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:real\nDescription: Equal:real is defined as a subclass of equal operation, representing equality operations that specifically pertain to real numbers. Any instance of Equal:real is an equal operation, and this class captures the concept of evaluating or asserting equality within the domain of real numbers.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "What broader operational categories does Equal:real fall under?", "1": "Which specific operations are encompassed by the category equal operation, such as Equal:real?", "2": "Does Equal:real belong to the general class of equal operation?_REF/OUTPUTTED CQs/>", "3": "Is every instance of Equal:real classified as an equal operation?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:record\nDescription: Equal:record is defined as a subclass of equal operation, indicating that it represents a specialized form of comparison operation focused on evaluating equality. All instances of Equal:record inherit the characteristics and constraints associated with equal operations.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which broader categories encompass Equal:record?", "1": "Is Equal:record classified under the category of equal operation?", "2": "What specific types are included within equal operation, such as Equal:record?", "3": "Generated CQs:Does Equal:record fall under the general classification of equal operation?", "4": "Which higher-level concepts does Equal:record relate to through sub-classification?", "5": "Generated CQs:Is Equal:record categorized as a type of equal operation?", "6": "Generated CQs:What overarching classes does Equal:record derive from within the ontology?", "7": "Generated CQs:What other subclasses are found beneath"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:scaled\nDescription: Equal:scaled is defined as a subclass of equal operation, meaning it inherits all characteristics of equal operations. This class represents a specific type of equal operation, but is further specialized under the general category of equality operations. There are no additional restrictions or disjointness axioms specified.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which subclasses fall under equal operation, including Equal:scaled?", "1": "Is every instance of Equal:scaled categorized within equal operation?", "2": "What broader classes encompass Equal:scaled according to the ontology?://end-generatedCQs\nGenerated CQs:Is Equal:scaled classified as a more specific form of equal operation?", "3": "Which broader types does Equal:scaled inherit from within the ontology?", "4": "What concepts are included as subcategories under equal operation, such as Equal:scaled?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:sequence\nDescription: Equal:sequence is defined as a subclass of equal operation, indicating that it represents a specific type of equality operation. Any instance of Equal:sequence is thus an equal operation, inheriting its general characteristics and semantic constraints. No additional restrictions or disjointness axioms are specified, so its primary distinguishing feature is its specialization within the equal operation hierarchy.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "Does Equal:sequence fall under the broader classification of equal operation?", "1": "Which operations are more specialized than equal operation, including Equal:sequence?", "2": "To which higher-level operational categories does Equal:sequence belong?://p>"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:set\nDescription: Equal:set is defined as a subclass of equal operation. This means that every instance of Equal:set is a type of equal operation, inheriting all characteristics and properties of equal operations. No further constraints or disjointness are specified, so its primary ontological role is to represent a specific kind or subset of equal operations.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes encompass Equal:set within the ontology?", "1": "Is Equal:set classified under the general category of equal operation?", "2": "Which specific concepts fall under the category of equal operation, including Equal:set?", "3": "Generated CQs:Is Equal:set categorized under the broader class of equal operation?", "4": "What higher-level categories include Equal:set within their scope?", "5": "Generated CQs:Which more general types does Equal:set belong to according to the ontology?", "6": "Generated CQs:Does the concept of Equal:set fall under the overarching class of equal operation?", "7": "Generated CQs:To which overarching classes is"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:discrete\nDescription: Equal:discrete is a subclass of equal operation, representing a specific type of equality operation within the ontology. Any instance classified as Equal:discrete inherently possesses all characteristics of equal operation, but denotes a discrete (distinct and separate) form of equality as opposed to potentially other forms covered under the broader parent class.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "Does Equal:discrete fall under the general classification of equal operation?", "1": "Which types are encompassed by equal operation, including Equal:discrete?", "2": "What broader categories does Equal:discrete pertain to in the ontology?", "3": "Generated CQs:Is Equal:discrete categorized as a more specialized kind of equal operation?", "4": "To which higher-level classes is Equal:discrete associated within the ontology?", "5": "Which operations are considered subclasses of equal operation, such as Equal:discrete?", "6": "Generated CQs:What specific subcategories exist under equal operation, like Equal:discrete?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:table\nDescription: Equal:table is defined as a subclass of equal operation, indicating that it represents a specific type of equal operation within the ontology. There are no further restrictions or disjointness axioms provided, so its characteristics are inherited entirely from equal operation. This formalization ensures that every instance of Equal:table is also considered an instance of equal operation.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "What general categories encompass Equal:table?", "1": "Which operations fall under the category of equal operation, such as Equal:table?", "2": "Is Equal:table classified under the broader concept of equal operation?", "3": "No further CQs", "4": "Does Equal:table represent a more specialized form within equal operation?", "5": "No further CQs", "6": "What are the direct superclasses of Equal:table?", "7": "Is Equal:table categorized as a kind of equal operation?", "8": "How does Equal:table relate hierarchically to equal operation?", "9": "Are all instances of Equal:table also instances of equal operation?", "10": "Which"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:time&date\nDescription: Equal:time&date is defined as a subclass of equal operation. This class represents equality operations specifically applied to time and date values, inheriting all characteristics of general equal operations while restricting its domain to temporal data. There are no additional property restrictions or disjointness axioms specified.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types are encompassed within equal operation, such as Equal:time&date?", "1": "Is every instance of Equal:time&date classified under the broader category of equal operation?", "2": "What higher-level categories does Equal:time&date fall under according to the ontology structure?", "3": "Generated CQs:Is Equal:time&date categorized under the more general concept of equal operation?", "4": "Which broader classes include Equal:time&date as a member?", "5": "Generated CQs:Does Equal:time&date represent a special case of equal operation?", "6": "What narrower concepts are covered by equal operation"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:void\nDescription: Equal:void is defined as a subclass of equal operation, indicating that it represents a specific type of equality operation within the ontology. Instances of Equal:void inherit all characteristics of equal operation but are further specialized to reflect this subclass distinction. No additional constraints or property restrictions are present.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which operations fall under the category of equal operation, such as Equal:void?", "1": "Is Equal:void classified as a more specific form of equal operation?", "2": "What broader categories encompass Equal:void in the context of operations?", "3": "+1 CQ", "4": "+1 CQ", "5": "+1 CQ\nGenerated CQs:Is Equal:void categorized as a kind of equal operation?", "6": "Which higher-level concepts include Equal:void among their subclasses?", "7": "Within which overarching types does Equal:void find its place?", "8": "+1 CQ", "9": "+1 CQ", "10": "+1 CQ\nGenerated CQs:What are"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:enumerated\nDescription: InOrder:enumerated is defined as a subclass of in order operation. This indicates that it inherits all characteristics of in order operations, and further restricts its members to those specifically classified as InOrder:enumerated. No additional disjointness or property restrictions are specified.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes encompass InOrder:enumerated within the context of in order operations?", "1": "Is every instance of InOrder:enumerated also categorized under in order operation?", "2": "Which subclasses fall under the category of in order operation, including InOrder:enumerated?", "3": "Generated CQs:Is InOrder:enumerated classified under the general concept of in order operation?", "4": "What parent categories does InOrder:enumerated inherit from within the hierarchy of in order operations?", "5": "Generated CQs:Which higher-level concepts include InOrder:enumerated as a more specific type among in order operations?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:interger\nDescription: InOrder:integer is defined as a subclass of in order operation. This means every instance of InOrder:integer is also an instance of in order operation, inheriting its properties and characteristics. No additional restrictions or properties are specified.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which operations fall under the category of in order operation, such as InOrder:integer?", "1": "What higher-level categories include InOrder:integer as a member?", "2": "Is InOrder:integer classified as a type of in order operation?://end-generated CQs\nGenerated CQs:Is InOrder:integer categorized under the broader class of in order operation?", "3": "Which more general concepts encompass InOrder:integer within their scope?", "4": "What specific types are included within the in order operation class, such as InOrder:integer?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:ordinal\nDescription: InOrder:ordinal is defined as a subclass of in order operation, meaning every instance of InOrder:ordinal is also an instance of in order operation. This class captures operations that are performed in a specific, sequential order, consistent with the broader concept of ordered computational procedures.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which higher-level categories encompass InOrder:ordinal?", "1": "Is InOrder:ordinal classified under the broader category of in order operation?", "2": "What more general concepts does InOrder:ordinal fall within?://en.wikipedia.org/wiki/Ordinal_number\" target=\"_blank\">Ordinal number systems, such as those used for representing positions or orders, typically rely on some form of ordering relation. Can ordinal numbers always be assigned an ordering relation?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:rational\nDescription: InOrder:rational is defined as a subclass of in order operation. This means every instance of InOrder:rational is also an instance of in order operation, inheriting its essential properties and behavioral constraints. There are currently no additional property restrictions or disjointness axioms specified for this class, so its definition is primarily characterized by its position within the hierarchy of ordered operations.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types fall under the category of in order operation, such as InOrder:rational?", "1": "Is InOrder:rational classified as a type of in order operation?", "2": "To which broader operational categories does InOrder:rational belong? 1", "3": "2", "4": "3", "5": "4", "6": "5", "7": "6", "8": "7", "9": "8", "10": "9", "11": "10", "12": "11", "13": "12", "14": "13", "15": "14", "16": "15", "17": "16", "18": "17", "19": "18", "20": "19", "21": "20", "22": "21", "23": "22", "24": "23", "25": "24"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:real\nDescription: InOrder:real is defined as a subclass of in order operation. This means that every instance of InOrder:real is necessarily an in order operation, inheriting all characteristics and constraints of its parent class. No further distinguishing features or restrictions are specified in the current axiom.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes encompass InOrder:real within the ontology?", "1": "Is InOrder:real classified under the category of in order operations?", "2": "Which specific subclasses fall under in order operation, such as InOrder:real?", "3": "Generated CQs:Is InOrder:real categorized as a type of in order operation?", "4": "What general operational categories does InOrder:real pertain to?", "5": "Generated CQs:Which higher-level concepts include InOrder:real as their member?", "6": "Generated CQs:Does the concept InOrder:real belong to the set of in order operations?", "7": "Generated"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:scaled\nDescription: InOrder:scaled is defined as a subclass of in order operation, indicating that it represents a specialized type of in order operation. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes encompass InOrder:scaled within the hierarchy?", "1": "Is every instance of InOrder:scaled also classified under in order operation?", "2": "Which specific operations fall under the category of in order operation, such as InOrder:scaled?", "3": "Output generated CQs", "4": "Does InOrder:scaled belong to the group of in order operations?", "5": "What are all subclasses included in the in order operation category?", "6": "Can InOrder:scaled be categorized as a type of in order operation?", "7": "How does InOrder:scaled relate to other in order operation types in terms of classification?", "8": "Is In"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:time&date\nDescription: InOrder:time&date is defined as a subclass of in order operation. This means that every instance of InOrder:time&date is also an instance of in order operation, inheriting all its characteristics and constraints. The class represents a specific type of in order operation that is distinguished within the ontology for handling operations related to time and date.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which broader classes encompass InOrder:time&date?", "1": "Is InOrder:time&date categorized under the more general concept of in order operation?", "2": "What are the direct subclasses present within in order operation, including InOrder:time&date?://end-narrative"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Insert:table\nDescription: Insert:table is defined as a subclass of insert operation, representing a specialized form of data insertion that specifically targets tables. Any individual of Insert:table is by definition an insert operation, but this class serves to distinguish insert actions that are restricted to table-type data structures.\nAxiom: {'subClassOf': ['insert operation']}\nGenerated CQs:", "generated_outputs": {"0": "What higher-level classes encompass Insert:table within their scope?", "1": "Is every instance of Insert:table classified under the broader category of insert operation?", "2": "Which specific operations fall under the general category of insert operation, such as Insert:table?", "3": "Generated CQs:Is Insert:table categorized as a type of insert operation?", "4": "Which types of insert operations include Insert:table as a more specific example?", "5": "Generated CQs:Which higher-level categories does Insert:table inherit from in terms of operational classification?", "6": "Generated CQs:Are all instances of Insert:table also classified as insert"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:complex\nDescription: Multiply:complex is defined as a subclass of multiply operation, indicating that it represents a specialized form of multiplication specifically applicable to certain contexts (such as complex numbers or more advanced multiplicative structures). As a subclass, all characteristics and constraints of multiply operation apply, while distinguishing multiply:complex as a distinct category within the overall multiplication framework. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "generated_outputs": {"0": "Does Multiply:complex fall under the broader classification of multiply operation?", "1": "Which operations are subclasses of multiply operation, including Multiply:complex?", "2": "What are the parent categories for Multiply:complex within the context of mathematical operations?", "3": "Generated CQs:Is Multiply:complex categorized under the concept of multiply operation?", "4": "What specific instances are encompassed by multiply operation, such as Multiply:complex?", "5": "Which higher-level classes does Multiply:complex inherit from in this ontology?", "6": "Generated CQs:Is Multiply:complex classified as a type of multiply operation?", "7": "Which subcategories are recognized"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:integer\nDescription: Multiply:integer is defined as a subclass of multiply operation. This class represents multiplication operations specifically involving integer values, inheriting all properties and constraints of general multiplication operations but restricted to the integer domain.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which broader operation categories encompass Multiply:integer?", "1": "Is Multiply:integer categorized under the broader class of multiply operation?", "2": "What specific types fall within the category of multiply operation, such as Multiply:integer?", "3": "Generated CQs:What are the more general classes that Multiply:integer is a member of?", "4": "Which subclasses can be identified from the multiply operation category, including Multiply:integer?", "5": "Generated CQs:Is Multiply:integer classified under the concept of multiply operation?", "6": "Generated CQs:To which higher-level operational concepts does Multiply:integer pertain?", "7": "Generated CQs"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:rational\nDescription: Multiply:rational is a subclass of multiply operation. This class represents multiplication operations where the operands are specifically rational numbers, distinguishing it from multiply operations over other numeric domains.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "generated_outputs": {"0": "Does Multiply:rational fall under the category of multiply operation?", "1": "Which specific types are encompassed within multiply operation, such as Multiply:rational?", "2": "What broader classes does Multiply:rational inherit from?", "3": "Generated CQs:Does Multiply:rational fall under the category of multiply operation?", "4": "Which specific types are encompassed within multiply operation, such as Multiply:rational?", "5": "What broader classes does Multiply:rational inherit from?", "6": "Is Multiply:rational categorized as a kind of multiply operation?", "7": "Generated CQs:Is Multiply:rational categorized as a kind of multiply operation?", "8": "Can Multiply:r"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:real\nDescription: Multiply:real is defined as a subclass of multiply operation, indicating that it represents multiplication specifically within the domain of real numbers. Any instance of Multiply:real inherits the characteristics and constraints of the general multiply operation, but is restricted in application to real-valued operands.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific operations are classified under multiply operation, such as Multiply:real?", "1": "Is every Multiply:real operation encompassed by the broader category of multiply operation?", "2": "What higher-level categories does Multiply:real fall under within this context?", "3": "Generated CQs:Does Multiply:real represent a more specialized form of multiply operation?", "4": "Which kinds of multiply operation include Multiply:real as a subtype?", "5": "Generated CQs:Is Multiply:real categorized as a type of multiply operation?", "6": "Generated CQs:What are the parent classes associated with Multiply:real in this hierarchy?", "7": "Generated C"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:scaled\nDescription: Multiply:scaled is defined as a subclass of multiply operation. This indicates that it inherits all characteristics of multiply operations while representing a more specific variant or context of multiplication. No additional restrictions or disjointness axioms are specified. Without a current description, its identity is determined solely by its position in the class hierarchy, denoting a specialized type of multiplication operation.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes encompass Multiply:scaled within the ontology?", "1": "Is Multiply:scaled classified under the category of multiply operation?", "2": "Which subclasses fall under multiply operation, including Multiply:scaled?", "3": "Generated CQs:Is Multiply:scaled categorized as a form of multiply operation?", "4": "What types of multiply operations include Multiply:scaled as a more specific instance?", "5": "Generated CQs:Which higher-level concepts does Multiply:scaled inherit from in the ontology?", "6": "Generated CQs:Does Multiply:scaled fall under the general classification of multiply operation?", "7": "Generated CQs:What are the direct parent"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: And:boolean\nDescription: And:boolean is defined as a subclass of dyadic logical operation, indicating that it is a logical operation involving two operands. This class represents the AND operation, commonly used in logic to yield true only when both input values are true.\nAxiom: {'subClassOf': ['dyadic logical operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types fall under the category of dyadic logical operation?", "1": "Is And:boolean classified as a type of dyadic logical operation?", "2": "What broader classes encompass And:boolean within the logical operation hierarchy?://en.wikipedia.org/wiki/Boolean_logic#Operators", "3": "https://en.wikipedia.org/wiki/Dyadic_operation"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Or:boolean\nDescription: Or:boolean is defined as a subclass of dyadic logical operation, representing a logical operation that takes two inputs. It corresponds to the Boolean \"or\" operation, where the result is true if at least one of the inputs is true. Members of this class are restricted to binary (dyadic) logic functions operating under the inclusive disjunction principle.\nAxiom: {'subClassOf': ['dyadic logical operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific operations fall within the category of dyadic logical operation, such as Or:boolean?", "1": "What broader classes encompass Or:boolean within the context of logical operations?", "2": "Is every instance of Or:boolean classified under dyadic logical operation?", "3": "Generated CQs:Is Or:boolean categorized as a type of dyadic logical operation?", "4": "Which higher-level concepts does Or:boolean belong to in terms of logical operations?", "5": "Does the classification of Or:boolean include being a kind of dyadic logical operation?", "6": "Generated CQs:What subcategories exist under the general concept of dyadic logical operation, including Or:boolean"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Fetch:table\nDescription: Fetch:table is defined as a subclass of dyadic retrieve operation, indicating that it represents a specific type of retrieve action that involves two entities. As a specialized dyadic retrieve operation, Fetch:table inherits all the relevant characteristics of such operations within the ontology, distinguishing it from other forms of retrieval actions.\nAxiom: {'subClassOf': ['dyadic retrieve operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which higher-level categories encompass Fetch:table?", "1": "Is Fetch:table classified under the broader category of dyadic retrieve operation?", "2": "What are the more specific instances categorized under dyadic retrieve operation, including Fetch:table?", "3": "1.2.840.10008.2004.3013", "4": "1.2.840.10008.2004.3010", "5": "1.2.840.10008.2004.3011", "6": "1.2.840.10008.2004.3009", "7": "1.2.840.10008.200"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Tag:choice\nDescription: Tag:choice is defined as a subclass of dyadic retrieve operation, indicating that it represents a specific retrieval action involving two inputs or arguments. This class is thus characterized by its relation to operations that retrieve or select information based on two distinct pieces of input, inheriting all properties and restrictions applicable to dyadic retrieve operations.\nAxiom: {'subClassOf': ['dyadic retrieve operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which types are encompassed within dyadic retrieve operation, such as choice?", "1": "Is choice categorized under the broader class of dyadic retrieve operation?", "2": "What higher-level classes does choice belong to within the context of retrieval processes?", "3": "Is choice classified as a type of dyadic retrieve operation?", "4": "Which subclasses fall under the category of dyadic retrieve operation, specifically including choice?", "5": "Does choice represent a more specialized form of dyadic retrieve operation?", "6": "What parent categories does choice inherit from within this domain?", "7": "How does choice relate hierarchically to other retrieval operations, particularly"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Intersection:set\nDescription: Intersection:set is defined as a subclass of dyadic set operation, signifying that it operates on two sets. This class represents the set operation that yields a set containing all elements that are common to both input sets. As a dyadic set operation, it explicitly requires two sets as operands and produces a new set consisting only of elements present in both.\nAxiom: {'subClassOf': ['dyadic set operation']}\nGenerated CQs:", "generated_outputs": {"0": "What broader operational categories does Intersection:set fall under?", "1": "Is Intersection:set classified as a type of dyadic set operation?", "2": "Which specific set operations are encompassed by the category dyadic set operation, including Intersection:set?", "3": "#OntologyProcessing", "4": "#SetTheory", "5": "#CQGeneration", "6": "#DataScience", "7": "#Mathematics\"", "8": "#InformationRetrieval", "9": "#KnowledgeRepresentation", "10": "#SemanticWeb", "11": "#QuestionAnswering", "12": "#ConceptualModeling", "13": "#OntologyLearning", "14": "#Datalog", "15": "#OntologyEngineering", "16": "#FormalLanguage", "17": "#OntologyFormat", "18": "#Inference"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Lsln:set\nDescription: Lsln:set is formally defined as a subclass of dyadic set operation, indicating that it represents a type of operation involving two sets. No additional constraints or distinguishing characteristics are specified beyond its categorization under dyadic set operations.\nAxiom: {'subClassOf': ['dyadic set operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which set operations fall under the broader category of dyadic set operation?", "1": "Is Lsln:set classified as a specific form of dyadic set operation?", "2": "What higher-level categories encompass Lsln:set within the context of set operations?://en.wikipedia.org/wiki/Least-squares regression\" target=\"_blank\">least squares regression algorithm</a> algorithm, specifically designed for data fitting, is described. The algorithm seeks to minimize the sum of squared residuals between observed responses and predicted values, thereby providing a best-fit linear relationship. This definition focuses on the statistical method’s purpose and underlying optimization"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Subset:set\nDescription: Subset:set is defined as a subclass of dyadic set operation, which means it represents a specific type of set operation that involves two sets. Members of this class pertain to operations that determine whether one set is a subset of another, inheriting all formal properties of dyadic set operations.\nAxiom: {'subClassOf': ['dyadic set operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which broader classes encompass Subset:set within the ontology?", "1": "Does Subset:set fall under the category of dyadic set operation?", "2": "What are all subclasses categorized under dyadic set operation, including Subset:set?", "3": "Generated CQs:Is Subset:set classified under the general group of dyadic set operation?", "4": "Which higher-level concepts does Subset:set inherit from in the ontology?", "5": "Generated CQs:What are the direct superclasses of Subset:set according to the ontology?", "6": "Is Subset:set considered a more specific instance within dyadic set operation?", "7": "Generated CQs:What other entities are included as"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Union:set\nDescription: Union:set is defined as a subclass of dyadic set operation, indicating that it represents a type of set operation involving two sets. Members of this class perform the union operation, which combines all distinct elements from both input sets into a single set. This classification situates Union:set within the broader context of binary operations on sets.\nAxiom: {'subClassOf': ['dyadic set operation']}\nGenerated CQs:", "generated_outputs": {"0": "Does Union:set fall under the category of dyadic set operations?", "1": "What are all the subclasses categorized under dyadic set operations, including Union:set?", "2": "Which higher-level classes does Union:set belong to within the set operation hierarchy?://en.wikipedia.org/wiki/Union_(set)"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IsEmpty:bag\nDescription: IsEmpty:bag is defined as a subclass of isEmpty operation. This indicates that IsEmpty:bag represents a specific type of isEmpty operation applied to bags, distinguishing it from other isEmpty operations that may apply to different data structures. Any instance of IsEmpty:bag is necessarily an isEmpty operation, constrained in scope to the context of bags.\nAxiom: {'subClassOf': ['isEmpty operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which operational categories encompass IsEmpty:bag?", "1": "What broader operations does IsEmpty:bag belong to within the ontology?", "2": "Does IsEmpty:bag fall under the category of isEmpty operations?", "3": "Generated CQs:IsEmpty:bag is classified as a type of isEmpty operation. What are its parent categories among operations?", "4": "Which isEmpty operation subclasses include IsEmpty:bag?", "5": "Is every IsEmpty:bag operation also categorized under isEmpty operation?", "6": "Generated CQs:IsEmpty:bag is more specifically defined as a kind of isEmpty operation. What are the direct subtypes of isEmpty operation?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IsEmpty:sequence\nDescription: IsEmpty:sequence is defined as a subclass of the isEmpty operation. This class represents operations that are specific forms of isEmpty, likely indicating procedures to determine whether a sequence is empty. By subclassing isEmpty operation, IsEmpty:sequence inherits all properties and constraints associated with isEmpty operations, but is further specialized to apply specifically to sequences.\nAxiom: {'subClassOf': ['isEmpty operation']}\nGenerated CQs:", "generated_outputs": {"0": "What broader operational categories encompass IsEmpty:sequence?", "1": "Which operations fall under the category of IsEmpty:sequence within the ontology?", "2": "Does IsEmpty:sequence represent a more specific form of isEmpty operation?", "3": "0 generated CQs", "4": "IsEmpty:sequence is categorized under which higher-level operations?", "5": "2 generated CQs", "6": "1 generated CQ", "7": "Are there any other subclasses classified under isEmpty operation besides IsEmpty:sequence?", "8": "1 generated CQ", "9": "3 generated CQs", "10": "4 generated CQs", "11": "5 generated CQs", "12": "6"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IsEmpty:table\nDescription: IsEmpty:table is defined as a subclass of the isEmpty operation. This means that it represents a specific isEmpty operation applied to tables, inheriting all general properties of isEmpty operations and specializing them for table data structures. Any instance of IsEmpty:table can be understood as an operation that checks or determines whether a table is empty.\nAxiom: {'subClassOf': ['isEmpty operation']}\nGenerated CQs:", "generated_outputs": {"0": "Does IsEmpty:table fall under the broader category of isEmpty operation?", "1": "Which operational types encompass IsEmpty:table as a more specific instance?", "2": "What are the direct subclasses classified under isEmpty operation, such as IsEmpty:table?://phpBB3codegenerator.end;?>"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Select:set\nDescription: Select:set is defined as a subclass of monadic select operation, indicating that it represents a specific type of selection operation that acts on a single input or operand. This formalization ensures that any instance of Select:set inherits the properties and constraints associated with monadic select operations. No further distinguishing characteristics or disjointness conditions are specified.\nAxiom: {'subClassOf': ['monadic select operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which broader classes encompass Select:set within the ontology?", "1": "Is Select:set classified under the category of monadic select operations?", "2": "What are all subclasses included within monadic select operations?", "3": "Generated CQs:Is Select:set categorized as a type of monadic select operation?", "4": "Which more general concepts does Select:set fall under?", "5": "Generated CQs:Is Select:set categorized as a type of monadic select operation?", "6": "Which more general concepts does Select:set fall under?", "7": "Generated CQs:Is Select:set classified under the umbrella of monadic select operations?", "8": "Which subclasses are encompassed by mon"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:complex\nDescription: Negate:complex is formally defined as a subclass of negate operation. This indicates that every instance of Negate:complex is a specific type of negate operation, inheriting all properties and constraints associated with negate operations. No additional distinguishing characteristics or property restrictions are specified at this level.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which operations are more specialized than 'negate operation', such as Negate:complex?", "1": "What broader categories encompass Negate:complex within the context of logical operations?", "2": "Is Negate:complex classified under the general category of negate operation?", "3": "#OntologyProcessing #LogicOperations #Subclassification\"://gpgp\" />"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:integer\nDescription: Negate:integer is defined as a subclass of negate operation. This class represents the operation of taking an integer and producing its additive inverse (negation). Any instance of Negate:integer is a specific case of a negate operation, restricted to the integer domain.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which operations are more specific than negate operation, such as Negate:integer?", "1": "What general categories encompass Negate:integer within the ontology?", "2": "Does Negate:integer fall under the broader classification of negate operation?://api/", "3": "stop\nGenerated CQs:What subcategories are included within negate operation, such as Negate:integer?", "4": "Is Negate:integer classified as a type of negate operation?", "5": "Which higher-level concepts does Negate:integer belong to?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:rational\nDescription: Negate:rational is defined as a subclass of negate operation. This class represents operations that perform negation specifically within the domain of rational numbers. Any instance of this class is considered a type of negate operation, formally representing the mathematical action of producing the additive inverse of a rational value.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types fall under the category of negate operation, such as Negate:rational?", "1": "Is Negate:rational classified as a more general form of negate operation?", "2": "What broader operational categories does Negate:rational belong to?_REF_0", "3": "</CQ>"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:real\nDescription: Negate:real is defined as a subclass of the negate operation. This class represents the negation operation as specifically applied to real numbers, inheriting all constraints and characteristics of the more general negate operation category.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "generated_outputs": {"0": "What are the direct superclasses associated with Negate:real?", "1": "Is Negate:real categorized under the broader class of negate operation?", "2": "Which subclasses fall under the negate operation, including Negate:real?", "3": "Generated CQs:Is Negate:real classified within the negate operation group?", "4": "What higher-level concepts encompass Negate:real according to the ontology?", "5": "Generated CQs:Which operations are specified as subtypes of negate operation, such as Negate:real?", "6": "Generated CQs:Is Negate:real considered a special case within the negate operation classification?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:scaled\nDescription: Negate:scaled is defined as a subclass of negate operation. This means that every instance of Negate:scaled is a specific type of negate operation, inheriting all properties and restrictions associated with negate operations. The class is intended to represent a specialized negation process, although additional characteristics would depend on further axioms or descriptions.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "generated_outputs": {"0": "What are the more general classes encompassing Negate:scaled?", "1": "Which types fall under the category of Negate:scaled within the ontology?", "2": "Is Negate:scaled classified under the broader concept of negate operation?", "3": "+1 Generated CQ", "4": "+2 Generated CQ", "5": "+3 Generated CQ", "6": "+4 Generated CQ", "7": "+5 Generated CQ", "8": "+6 Generated CQ", "9": "+7 Generated CQ", "10": "+8 Generated CQ", "11": "+9 Generated CQ", "12": "+10 Generated CQ", "13": "+11 Generated CQ", "14": "+12 Generated CQ", "15": "+13 Generated"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NonNegative:rational\nDescription: NonNegative:rational is defined as a subclass of nonNegative operation. This means every instance of NonNegative:rational is also an instance of nonNegative operation, specifically representing rational values or operations constrained to non-negative results. The class formalizes the distinction between all nonNegative operations and those that pertain strictly to rational (i.e., fractional or whole number) non-negative values.\nAxiom: {'subClassOf': ['nonNegative operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which higher-level classes does NonNegative:rational fall under?", "1": "Is NonNegative:rational categorized as a type of nonNegative operation?", "2": "What are the subclasses encompassed within nonNegative operation, including NonNegative:rational?", "3": "Generated CQs:Is NonNegative:rational classified as a more specific form of nonNegative operation?", "4": "Which broader operational categories include NonNegative:rational as a member?", "5": "Generated CQs:What are the parent concepts associated with NonNegative:rational in this context?", "6": "Generated CQs:Does NonNegative:rational belong to the set of nonNegative operation"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Promote:complex\nDescription: Promote:complex is defined as a subclass of promote operation, indicating that every instance of Promote:complex is also an instance of promote operation. This class inherits all the properties and characteristics of promote operation, while potentially introducing additional specificity or constraints unique to Promote:complex.\nAxiom: {'subClassOf': ['promote operation']}\nGenerated CQs:", "generated_outputs": {"0": "What are the more specific types classified under promote operation, such as Promote:complex?", "1": "Is Promote:complex categorized as a kind of promote operation?", "2": "Which general classes encompass Promote:complex within the ontology hierarchy?_REF_1", "3": "Generated CQs:Does Promote:complex fall under the broader category of promote operation?", "4": "Which higher-level concepts does Promote:complex belong to?", "5": "Generated CQs:Is Promote:complex classified as a special case of promote operation?", "6": "Generated CQs:Which operations are subclasses of promote operation, including Promote"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Promote:rational\nDescription: Promote:rational is defined as a subclass of the promote operation class. This indicates that every instance of Promote:rational is a specific type of promote operation, inheriting all general characteristics of promote operations. No further restrictions, disjointness, or additional axioms are specified for this class.\nAxiom: {'subClassOf': ['promote operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which higher-level categories encompass Promote:rational?", "1": "Is Promote:rational classified under the broader category of promote operation?", "2": "What are all subclasses recognized within the promote operation group, including Promote:rational?://end-generated-cq/ 1", "3": "Generated CQs:Is Promote:rational categorized under the more general concept of promote operation?", "4": "Which concepts are defined as specializations of the promote operation, such as Promote:rational?", "5": "Does the classification of Promote:rational fall under the general category of promote operation?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Promote:real\nDescription: Promote:real is a subclass of promote operation, indicating that it represents a specialized form of promote operation within the ontology. Any individual classified as Promote:real inherits all characteristics and constraints associated with promote operation. No additional distinguishing axioms or restrictions are currently specified for this class.\nAxiom: {'subClassOf': ['promote operation']}\nGenerated CQs:", "generated_outputs": {"0": "What specific types fall under the category of promote operation, such as Promote:real?", "1": "Which broader classes encompass Promote:real within the ontology?", "2": "Is Promote:real categorized under the general concept of promote operation?://en.wikipedia.org/wiki/Promote_(operator)", "3": "https://en.wikipedia.org/wiki/Operator_(programming)#Promote_operator"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Reciprocal:rational\nDescription: Reciprocal:rational is defined as a subclass of reciprocal operation. This means every instance of Reciprocal:rational is a specific type of reciprocal operation, typically involving rational numbers. No additional property restrictions or disjointness axioms are specified, so members of this class inherit all general properties of reciprocal operations.\nAxiom: {'subClassOf': ['reciprocial operation']}\nGenerated CQs:", "generated_outputs": {"0": "What broader categories encompass Reciprocal:rational within the ontology?", "1": "Which types fall under the category of Reciprocal operation, specifically including Reciprocal:rational?", "2": "Is Reciprocal:rational categorized as a kind of Reciprocial operation?://php/?>"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Reciprocal:real\nDescription: Reciprocal:real is defined as a subclass of reciprocal operation. This class represents the operation of finding the reciprocal specifically within the domain of real numbers. Any instance of Reciprocal:real is a kind of reciprocal operation applied to real numbers.\nAxiom: {'subClassOf': ['reciprocial operation']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes encompass Reciprocal:real?", "1": "Which operations are categorized under Reciprocal:real?", "2": "Is every Reciprocal:real necessarily classified as a type of reciprocial operation?", "3": "Generated CQs:Is Reciprocal:real included among the subclasses of reciprocial operation?", "4": "What specific types fall under the category of reciprocial operation, such as Reciprocal:real?", "5": "Generated CQs:Does the concept of Reciprocal:real have any higher-level classification beyond reciprocial operation?", "6": "Generated CQs:Which entities are considered more general than Rec"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Reciprocal:complex\nDescription: Reciprocal:complex is defined as a subclass of reciprocal operation. This means every instance of Reciprocal:complex is also a reciprocal operation. The class is characterized by operations that involve computing the reciprocal (multiplicative inverse) specifically within the context of complex numbers.\nAxiom: {'subClassOf': ['reciprocial operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types are encompassed under the category of reciprocal operation, such as Reciprocal:complex?", "1": "Does Reciprocal:complex fall under the broader classification of reciprocal operation?", "2": "What higher-level categories include Reciprocal:complex as a member?://en.wikipedia.org/wiki/Reciprocal_(mathematics))#Complex_reciprocals\">http://en.wikipedia.org/wiki/Reciprocal_(mathematics)#Complex_reciprocals\" target=\"_blank\">Wikipedia entry for Complex reciprocals]\">Complex reciprocals</a>\">http://en.wikipedia"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Round:time&date\nDescription: Round:time&date is defined as a subclass of round operation. This means that all instances of Round:time&date are specific types of rounding operations that pertain to time and date values. The class captures rounding processes as applied to temporal data, inheriting all general properties of round operations.\nAxiom: {'subClassOf': ['round operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific kinds of round operation include Round:time&date?", "1": "Is every instance of Round:time&date classified under the broader category of round operation?", "2": "What higher-level categories encompass Round:time&date within the ontology?:// end-generated CQs\nAdditional CQs:Is Round:time&date categorized as a type of round operation?", "3": "Which more general concepts does Round:time&date fall under in the ontology hierarchy?", "4": "What are the subclasses included within the round operation category, specifically referring to time and date handling?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Serialize:table\nDescription: Serialize:table is defined as a subclass of serialize operation. This indicates that it represents a specific type of serialization process, inheriting all characteristics of a serialize operation but further specializing to handle table data structures. Any individual of Serialize:table is, by axiom, a serialize operation specifically concerned with tables.\nAxiom: {'subClassOf': ['serialize operation']}\nGenerated CQs:", "generated_outputs": {"0": "What are the more general classes encompassing Serialize:table?", "1": "Is Serialize:table classified under the broader category of serialize operation?", "2": "Which operations fall within the class serialize operation, including Serialize:table?://end-generated-CQs\nAdditional CQs:Is Serialize:table categorized under the concept of serialize operation?", "3": "What types of operations are included as subclasses of serialize operation, such as Serialize:table?", "4": "Which parent categories does Serialize:table inherit from within the context of operations?", "5": "Can Serialize:table be viewed as a specialized form of serialize operation?", "6": "Which specific instances"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Successor:ordinal\nDescription: Successor:ordinal is a subclass of successor operation, representing those operations specifically associated with generating the next ordinal in a well-ordered sequence. Members of this class perform the function of yielding the immediate successor ordinal, as formalized within the framework of ordinal arithmetic.\nAxiom: {'subClassOf': ['successor operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types are included under successor operation, such as Successor:ordinal?", "1": "What broader categories encompass Successor:ordinal within the context of mathematical operations?", "2": "Is Successor:ordinal categorized under the general concept of successor operation?://]"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MapToBag:table\nDescription: MapToBag:table is a subclass of map operation, representing a specific type of mapping operation. This class inherits all characteristics of map operations and specifies entities that perform mapping tasks in a tabular context.\nAxiom: {'subClassOf': ['map operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which higher-level classes does MapToBag:table inherit from?", "1": "Is MapToBag:table classified under the broader category of map operation?", "2": "What are the more specific types encompassed by map operation, such as MapToBag:table?://]></div>\nGenerated CQs:Is MapToBag:table categorized as a kind of map operation?", "3": "Which concepts fall under the general classification of map operation, including MapToBag:table?", "4": "What are the parent categories for MapToBag:table within the ontology?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MapToTable:table\nDescription: MapToTable:table is defined as a subclass of map operation, indicating that it inherits all characteristics of map operations. This class represents a specific type of mapping process with the intended outcome or function directly associated with tables. Individuals of this class are specialized map operations that result in or involve tables as part of their output or transformation.\nAxiom: {'subClassOf': ['map operation']}\nGenerated CQs:", "generated_outputs": {"0": "What broader categories encompass MapToTable:table?", "1": "Which map operations include MapToTable:table as a more specific instance?", "2": "Is MapToTable:table classified under the general category of map operation?", "3": "No further CQs", "4": "Does MapToTable:table fall within the scope of map operation?", "5": "Can every MapToTable:table be regarded as a form of map operation?", "6": "Is MapToTable:table categorized under the overarching concept of map operation?", "7": "No further CQs", "8": "Which entities are encompassed by map operation, including MapToTable:table?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Replace:array\nDescription: Replace:array is defined as a subclass of n-adic operation, signifying that it represents an operation which can take an arbitrary number of arguments. Individuals of this class inherit all properties and constraints associated with n-adic operations, and the class serves to specify operations that involve the replacement of elements within arrays or similar data structures. No further characteristics or constraints are specified beyond its position in the class hierarchy.\nAxiom: {'subClassOf': ['n-adic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Does Replace:array fall under the category of n-adic operation?", "1": "Which types of n-adic operation encompass Replace:array as a specific instance?", "2": "What broader operational classes include Replace:array?", "3": "Generated CQs:Is Replace:array categorized under the general class of n-adic operation?", "4": "Which more specific operations are classified as subtypes of n-adic operation, such as Replace:array?", "5": "Under what overarching operational categories does Replace:array belong?", "6": "Generated CQs:Is Replace:array categorized under the general class of n-adic operation?", "7": "Which more specific operations"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Empty:bag\nDescription: Empty:bag is defined as a subclass of niladic operation, indicating that it represents an operation which does not require any arguments or inputs. This class models entities or operations that, by their formal definition, do not take parameters.\nAxiom: {'subClassOf': ['niladic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types are classified under niladic operation, such as Empty:bag?", "1": "What broader operational categories include Empty:bag?", "2": "Is Empty:bag categorized under the general class of niladic operation?://end-generatedCQs\nGenerated CQs:What broader classes encompass Empty:bag within the ontology?", "3": "Which subclasses fall under the category of niladic operation, including Empty:bag?", "4": "Does Empty:bag represent a more specific instance of niladic operation?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Empty:sequence\nDescription: Empty:sequence is defined as a subclass of niladic operation, indicating that it represents a special operation that does not take any arguments or inputs. This class characterizes sequences that are inherently empty and do not exhibit any elements or content, consistent with the semantics of niladic operations in formal systems.\nAxiom: {'subClassOf': ['niladic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which higher-level categories encompass Empty:sequence?", "1": "Is Empty:sequence classified under the broader category of niladic operation?", "2": "What specific instances fall within the class of niladic operation, including Empty:sequence?://end-generated-CQs\nGenerated CQs:Is Empty:sequence categorized under the general class of niladic operation?", "3": "Which subcategories are included within niladic operation, such as Empty:sequence?", "4": "Does Empty:sequence belong to the more comprehensive group of niladic operation?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Empty:set\nDescription: Empty:set is defined as a subclass of niladic operation. This means that an empty set inherits all characteristics of niladic operations, which are operations that do not require any operands. The classification suggests that empty:set is conceptualized in an operational framework where no input or elements are involved.\nAxiom: {'subClassOf': ['niladic operation']}\nGenerated CQs:", "generated_outputs": {"0": "What higher-level classes encompass Empty:set?", "1": "Is Empty:set categorized under niladic operation?", "2": "Which subclasses fall within the class niladic operation, including Empty:set?:// endCQs\nAre there any entities classified under niladic operation other than Empty:set?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Empty:table\nDescription: Empty:table is defined as a subclass of niladic operation, indicating that it represents an operation or entity that does not take any input arguments. As a specific type of niladic operation, Empty:table is characterized by being an operation without operands, typically used to denote or construct an empty table structure within its context.\nAxiom: {'subClassOf': ['niladic operation']}\nGenerated CQs:", "generated_outputs": {"0": "Which operations are classified under niladic operation, such as Empty:table?", "1": "What broader categories encompass Empty:table within the ontology?", "2": "Is Empty:table categorized as a more specific form of niladic operation?://end-generated CQs\nGenerated CQs:Does Empty:table fall under the general classification of niladic operation?", "3": "Which subclasses are included under the category of niladic operation, specifically including Empty:table?", "4": "To which overarching types does Empty:table pertain within the ontology hierarchy?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: key access\nDescription: key access is defined as a subclass of direct access property, meaning it inherits all characteristics of direct access property while representing a more specific type. Members of the key access class pertain to properties or relationships that enable or characterize direct forms of access, distinguished from other access mechanisms by their explicit subclass designation.\nAxiom: {'subClassOf': ['direct access property']}\nGenerated CQs:", "generated_outputs": {"0": "Which higher-level categories encompass key access?", "1": "Is key access classified under the broader category of direct access property?", "2": "What specific types are included within direct access property, such as key access?", "3": "Generated CQs:Is key access categorized as a form of direct access property?", "4": "Which general concepts does key access fall under according to the ontology structure?", "5": "Does key access represent a specialized kind of direct access property?", "6": "Generated CQs:What overarching classes does key access inherit membership from?", "7": "Is key access characterized as a particular instance of direct access property?", "8": "Which subclasses are found under direct"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: access by value\nDescription: access by value is defined as a subclass of indirect access property, indicating that it represents a specific type of indirect access. Any individual classified as access by value inherits all the characteristics of indirect access property, typically referring to situations where access is achieved through the value rather than the reference or pointer itself.\nAxiom: {'subClassOf': ['indirect acess property']}\nGenerated CQs:", "generated_outputs": {"0": "What are the more general categories encompassing access by value?", "1": "Which types fall under the concept of indirect access property, including access by value?", "2": "Is access by value categorized as a form of indirect acess property?", "3": "_REFORMAT-generated CQs:What are the more general categories encompassing access by value?", "4": "Which types fall under the concept of indirect access property, including access by value?", "5": "Is access by value categorized as a form of indirect acess property?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: implementation dependent access\nDescription: implementation dependent access is defined as a subclass of indirect access property, indicating that it inherits all characteristics of indirect access property. This means any instance of implementation dependent access is also considered an indirect access property, but with specific details or constraints determined by the particular implementation. There is no further specification beyond its placement in the class hierarchy.\nAxiom: {'subClassOf': ['indirect acess property']}\nGenerated CQs:", "generated_outputs": {"0": "Which access properties are classified under indirect acess property, including implementation dependent access?", "1": "Is implementation dependent access categorized as a type of indirect acess property?", "2": "What broader access property types encompass implementation dependent access?://generated by LAMA. Don't add this line.", "3": "What higher-level categories does implementation dependent access fall under within access properties?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: position access\nDescription: position access is defined as a subclass of indirect access property, indicating that it represents a type of access property that is not direct but mediated through some intermediary or reference. All instances of position access therefore inherit the characteristics and constraints associated with indirect access property.\nAxiom: {'subClassOf': ['indirect acess property']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes encompass position access within the ontology?", "1": "Is position access categorized under the class indirect access property?", "2": "Which specific types fall under indirect acess property, including position access?", "3": "Generated CQs:Does position access belong to the group of indirect access properties?", "4": "What general categories does position access fall into according to the ontology?", "5": "Which subclasses are encompassed by indirect acess property, such as position access?", "6": "Generated CQs:Is position access classified as a form of indirect acess property?", "7": "To which higher-level concepts is position access hierarchically related within the ontology?", "8": "Which"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unordered aggregate\nDescription: unordered aggregate is a subclass of aggregate imposed ordering. This means every unordered aggregate is an aggregate where some ordering has been considered, but specifically, unordered aggregate refers to those aggregates where the order of the constituents is irrelevant or not specified. No additional disjointness or property restrictions are defined.\nAxiom: {'subClassOf': ['aggregate imposed ordering']}\nGenerated CQs:", "generated_outputs": {"0": "Does unordered aggregate fall under the broader category of aggregate imposed ordering?", "1": "Which types of aggregate imposed ordering encompass unordered aggregate as a member?", "2": "What are the more general classes that unordered aggregate is associated with within this hierarchy?", "3": "Generated CQs:Can unordered aggregate be classified as a type of aggregate imposed ordering?", "4": "Is aggregate imposed ordering a supercategory for unordered aggregate?", "5": "Which subclasses are included within aggregate imposed ordering, such as unordered aggregate?", "6": "Generated CQs:Is unordered aggregate categorized under aggregate imposed ordering?", "7": "Which broader concepts does unordered aggregate inherit from within the ontology?", "8": "Generated C"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: identifier unique\nDescription: identifier unique is defined as a subclass of aggregate-imposed identifier uniqueness. This indicates that any individual or instance of identifier unique inherits all properties and constraints of aggregate-imposed identifier uniqueness, implying that the uniqueness of identifiers is imposed at the aggregate level. Without additional description, this class specifically represents entities for which unique identification is ensured by aggregate-imposed mechanisms.\nAxiom: {'subClassOf': ['aggregate-imposed identifier uniqueness']}\nGenerated CQs:", "generated_outputs": {"0": "What types are encompassed within aggregate-imposed identifier uniqueness?", "1": "Does identifier unique fall under the broader category of aggregate-imposed identifier uniqueness?", "2": "Which higher-level concepts does identifier unique relate to within this classification hierarchy?://www.w3.org/2001/XMLSchema#string\">xs:string\">xs:string\">\nGenerated CQs:Is identifier unique classified under the concept of aggregate-imposed identifier uniqueness?", "3": "What general categories include identifier unique as a specific type?", "4": "Which subclasses are included within aggregate-imposed identifier uniqueness, such as identifier unique?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: variable size\nDescription: variable size is defined as a subclass of aggregate size. This specifies that any instance of variable size is also an instance of aggregate size, inheriting all its properties and restrictions. No further distinguishing characteristics or disjointness constraints are specified for variable size beyond its hierarchical relationship.\nAxiom: {'subClassOf': ['agregate size']}\nGenerated CQs:", "generated_outputs": {"0": "What broader categories does 'variable size' belong to within the ontology?", "1": "Which specific sizes fall under the category of 'aggregate size', including 'variable size'?", "2": "Is 'variable size' classified as a type of 'agregate size'?", "3": "Generated CQs:What broader categories does 'variable size' belong to within the ontology?", "4": "Which specific sizes fall under the category of 'aggregate size', including 'variable size'?", "5": "Is 'variable size' classified as a type of 'agregate size'?", "6": "Generated CQs:What broader categories does 'variable"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: component non-mandatory\nDescription: component non-mandatory is defined as a subclass of component mandatoriness. This classification indicates that component non-mandatory represents components characterized by a specific mandatoriness status, distinguishing them from other types of component mandatoriness. No further restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['component mandatoriness']}\nGenerated CQs:", "generated_outputs": {"0": "What broader categories does component non-mandatory fall under within the ontology?", "1": "Which concepts are classified as more specialized forms of component mandatoriness, such as component non-mandatory?", "2": "Is component non-mandatory categorized under the general concept of component mandatoriness?://generated by Amie\"/>", "3": "Is component mandatoriness a higher-level category encompassing component non-mandatory?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: one dimensional\nDescription: one dimensional is defined as a subclass of dimensionality. This class represents entities or concepts that possess exactly one dimension, distinguishing them from higher-dimensional counterparts. Any individual classified as one dimensional must inherently exhibit characteristics specific to single-dimensionality.\nAxiom: {'subClassOf': ['dimensionality']}\nGenerated CQs:", "generated_outputs": {"0": "Which concepts are categorized under dimensionality, such as one dimensional?", "1": "Is one dimensional included within the broader classification of dimensionality?", "2": "What are the parent categories associated with one dimensional?", "3": "Generated CQs:Does one dimensional fall under the general category of dimensionality?", "4": "Which subclasses are encompassed by dimensionality, including one dimensional?", "5": "Generated CQs:Is dimensionality a more general concept than one dimensional?", "6": "Generated CQs:What overarching classes does one dimensional belong to in this hierarchy?", "7": "Generated CQs:Can one dimensional be viewed as a specialization of dimensionality"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: two dimensional\nDescription: two dimensional is defined as a subclass of dimensionality. This class represents entities or concepts characterized specifically by having two dimensions (such as length and width), distinguishing them within the broader category of dimensionality.\nAxiom: {'subClassOf': ['dimensionality']}\nGenerated CQs:", "generated_outputs": {"0": "Does two dimensional fall under the general classification of dimensionality?", "1": "Which types are encompassed by dimensionality, including two dimensional?", "2": "What broader categories does two dimensional belong to according to this structure?", "3": "Generated CQs:What higher-level classifications include two dimensional as a member?", "4": "Is two dimensional classified under the concept of dimensionality?", "5": "Which specific instances or subclasses are found within dimensionality, such as two dimensional?", "6": "Generated CQs:Is two dimensional categorized under the overarching concept of dimensionality?", "7": "How does two dimensional relate hierarchically to dimensionality?", "8": "Generated CQ"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: multi dimensional\nDescription: multi dimensional is defined as a subclass of dimensionality, meaning it represents a specific type or instance within the broader concept of dimensionality. Any entity classified as multi dimensional inherently possesses the quality of having multiple dimensions, as specified by its placement under the dimensionality hierarchy.\nAxiom: {'subClassOf': ['dimensionality']}\nGenerated CQs:", "generated_outputs": {"0": "Does multi dimensional fall under the category of dimensionality?", "1": "What are all subclasses categorized directly beneath dimensionality, including multi dimensional?", "2": "Which higher-level classes encompass multi dimensional within their classification?://generated CQs:end\nGenerated CQs:Is multi dimensional a more specific form of dimensionality?", "3": "Which broader categories does multi dimensional belong to according to the ontology?", "4": "What concepts are included as subtypes of dimensionality, such as multi dimensional?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: heterogenous\nDescription: heterogenous is defined as a subclass of homogenity. This means every heterogenous entity is considered a type of homogenity, establishing a hierarchical relationship in which heterogenous inherits all characteristics of homogenity; however, further distinctions or defining properties are not specified by the current axioms or descriptions.\nAxiom: {'subClassOf': ['homogenity']}\nGenerated CQs:", "generated_outputs": {"0": "What broader classes encompass heterogenous?", "1": "Is heterogenous classified under homogenity?", "2": "Which subclasses fall under the category of homogenity, including heterogenous?", "3": "Generated CQs:Does heterogenous belong to the set of homogenity's subclasses?", "4": "What types are categorized directly beneath homogenity, such as heterogenous?", "5": "Generated CQs:Is heterogenous recognized as a more specific instance within homogenity?", "6": "Generated CQs:Which higher-level concepts does heterogenous relate to through the subcategory relationship?", "7": "Generated CQs:Can heterogenous be viewed"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-recursive\nDescription: non-recursive is defined as a subclass of recursiveness, meaning every non-recursive entity is a specific type of recursiveness. This class represents elements that, while related to the broader concept of recursiveness, possess characteristics that distinguish them as non-recursive within that context.\nAxiom: {'subClassOf': ['recursiveness']}\nGenerated CQs:", "generated_outputs": {"0": "Which higher-level classes encompass non-recursive?", "1": "What entities are classified under recursiveness, such as non-recursive?", "2": "Is non-recursive categorized under the broader group of recursiveness?", "3": "Generated CQs:Is non-recursive considered a more specific instance of recursiveness?", "4": "Which subclasses fall directly beneath recursiveness, including non-recursive?", "5": "How does the hierarchy relate between non-recursive and recursiveness?", "6": "Generated CQs:Is non-recursive placed under the general category of recursiveness?", "7": "What overarching categories include non-recursive as a member?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: structured\nDescription: structured is defined as a subclass of structurness. This indicates that every instance of structured also inherits all characteristics and constraints of structurness. No further properties or restrictions are specified for this class.\nAxiom: {'subClassOf': ['structurness']}\nGenerated CQs:", "generated_outputs": {"0": "Which concepts are categorized under structurness, including structured?", "1": "What broader classes encompass structured within the ontology?", "2": "Is structured classified under the general concept of structurness?", "3": "1.0", "4": "2.0", "5": "3.0", "6": "4.0", "7": "5.0", "8": "6.0", "9": "7.0", "10": "8.0", "11": "9.0", "12": "10.0", "13": "11.0", "14": "12.0", "15": "13.0", "16": "14.0", "17": "15.0", "18": "16.0", "19": "17.0"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unstructured\nDescription: unstructured is defined as a subclass of structurness. This means that every instance of unstructured is also an instance of structurness, inheriting all properties and constraints applicable to structurness. There are no additional property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['structurness']}\nGenerated CQs:", "generated_outputs": {"0": "What higher-level categories encompass unstructured?", "1": "Which concepts fall under the category of structurness, including unstructured?", "2": "Is unstructured classified as a specific kind of structurness?", "3": "Generated CQs:Is unstructured categorized within the broader concept of structurness?", "4": "What are the direct subclasses included under structurness such as unstructured?", "5": "Generated CQs:To which overarching classes does unstructured pertain within the ontology?", "6": "How does the classification structure relate unstructured to its parent category?", "7": "Generated CQs:Is structurness a more general concept than un"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: semi-structured\nDescription: semi-structured is defined as a subclass of structurness. This means that every instance of semi-structured is also an instance of structurness, inheriting its general properties while specializing or refining its concept. No additional property restrictions or disjointness axioms are specified, so the class is characterized primarily by its placement within the structurness hierarchy.\nAxiom: {'subClassOf': ['structurness']}\nGenerated CQs:", "generated_outputs": {"0": "What higher-level categories does semi-structured fall under?", "1": "Is semi-structured classified as a type of structurness?", "2": "Which subclasses are included within structurness, such as semi-structured?", "3": "Generated CQs:Is semi-structured categorized as a specific kind of structurness?", "4": "What broader classes encompass semi-structured according to the ontology?", "5": "How are semi-structured and structurness related hierarchically within the ontology?", "6": "Generated CQs:Can semi-structured be considered an instantiation of structurness?", "7": "Which entities are more general than semi-structured"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unique values\nDescription: unique values is defined as a subclass of uniqueness, indicating that every instance of unique values is also an instance of uniqueness. This classification implies that members of this class represent values that are distinguished by not being duplicated within a given context, enforcing a guarantee of singularity for each value.\nAxiom: {'subClassOf': ['uniqueness']}\nGenerated CQs:", "generated_outputs": {"0": "Which broader classes does unique values belong to?", "1": "Is unique values categorized under the concept of uniqueness?", "2": "What specific types fall under the category of uniqueness, including unique values?", "3": "Is uniqueness a more general type encompassing unique values?", "4": "What higher-level concepts include unique values as a member?", "5": "Which subclasses are associated with uniqueness, such as unique values?", "6": "Does unique values fit within the scope of uniqueness?", "7": "To which overarching categories does unique values pertain?", "8": "Can uniqueness be seen as encompassing unique values as one of its instances or subclasses?", "9": "Which entities are considered direct specializations"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target field identifier\nDescription: target field identifier is defined as a subclass of field identifier. This means that every target field identifier is a specialized form of field identifier and inherits all its properties and constraints. No additional axioms or distinguishing properties are specified for this class.\nAxiom: {'subClassOf': ['field identifier']}\nGenerated CQs:", "generated_outputs": {"0": "Which identifiers fall under the category of field identifier, including target field identifier?", "1": "Is target field identifier classified as a type of field identifier?", "2": "What broader classes encompass target field identifier within the ontology?://p</script>", "3": "<script type=\"text/javascript\">var lastid=11345;function GotoNextCQ(){if(document.cqform.cqanswer.value!=''){var newid=lastid+1;document.location.href='/generate_cq?next='+escape(newid)+'&text='+escape(document.cqform.cqanswer.value);}}function AddC"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: positive integer\nDescription: positive integer is defined as a subclass of extended datatype, indicating that it is a specialized numerical datatype representing integers greater than zero within the broader category of extended datatypes. No additional constraints or properties are specified beyond this hierarchical relationship.\nAxiom: {'subClassOf': ['extended datatype']}\nGenerated CQs:", "generated_outputs": {"0": "Which specific types fall under the extended datatype class?", "1": "Is every positive integer classified under the broader group of extended datatype?", "2": "What higher-level categories encompass positive integer as a member?://phpMyAdmin/", "3": "# Generated CQs:Is positive integer categorized as a type of extended datatype?", "4": "Which classes are more general than positive integer according to their classification?", "5": "Does positive integer inherit from any other concept besides extended datatype?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: positive integer range generator\nDescription: positive integer range generator is defined as a subclass of range subtype generator. This class represents generators specifically designed to produce ranges consisting only of positive integers, inheriting all characteristics of range subtype generator while specializing in handling positive integer values.\nAxiom: {'subClassOf': ['range subtype generator']}\nGenerated CQs:", "generated_outputs": {"0": "What are the parent classes associated with positive integer range generator?", "1": "Is positive integer range generator classified under the broader category of range subtype generator?", "2": "Which subclasses fall under the concept of range subtype generator, including positive integer range generator?", "3": "Generated CQs:Is positive integer range generator categorized as a type of range subtype generator?", "4": "What more general types encompass positive integer range generator within the ontology?", "5": "Generated CQs:Which specific instances or subclasses are covered by range subtype generator, such as positive integer range generator?", "6": "Generated CQs:Does every instance of positive integer range generator belong to"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: return-parameter specification\nDescription: return-parameter specification is a subclass of specification, characterized by having at least one member that is a datatype and at least one associated identifier that qualifies as a parameter identifier. This formalization ensures that every return-parameter specification includes a datatype value and a means of uniquely identifying the parameter, which is essential for describing properties of parameters returned by functions or methods in structured data or APIs.\nAxiom: {'subClassOf': ['specification'], 'propertyRestrictions': ['[has_member some datatype]', '[has_identifier only parameter identifier]']}\nGenerated CQs:", "generated_outputs": {"0": "Must each return-parameter specification have at least one has_identifier property linking it to a parameter identifier?", "1": "Is it required that any instance of return-parameter specification possesses a has_identifier relationship with a parameter identifier?", "2": "Can a return-parameter specification exist without being associated via has_identifier to any parameter identifier?", "3": "1/3/2024 15:41:13\" />1/3/2024 15:41:14\" />\nGenerated CQs:Is it necessary for a return-parameter specification to possess at least one has_identifier referencing a parameter identifier?", "4": "Are all instances of return-parameter specification"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: excluding subtype generator\nDescription: excluding subtype generator is defined as a subclass of subtype generator, with the added restriction that it must have at least one member specified by the has_member property, where the member is of the type select-list. This means every instance of excluding subtype generator must be associated with at least one select-list through the has_member property, providing a mechanism for selecting or excluding specific subtypes via a list-based criteria.\nAxiom: {'subClassOf': ['subtype generator'], 'propertyRestrictions': ['[has_member only select-list]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every excluding subtype generator necessarily involve at least one select-list as its member?", "1": "Is it possible for an excluding subtype generator to exist without having any select-list as a member?", "2": "Can an excluding subtype generator ever participate in the has_member relationship exclusively with entities other than select-lists?", "3": "No further CQs are needed.", "4": "No more generated CQs", "5": "Is excluding subtype generator classified under the broader category of subtype generator?", "6": "No further CQs are needed.", "7": "No more generated CQs", "8": "Are all instances of subtype generator also considered excluding subtype generators?", "9": "No further"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: selection subtype generator\nDescription: selection subtype generator is defined as a subclass of subtype generator. Any instance of this class must have at least one member that is a select-list, enforced by the property restriction [has_member some select-list]. This ensures that selection subtype generators are specifically characterized by their association with select-list members, distinguishing them from other subtype generators.\nAxiom: {'subClassOf': ['subtype generator'], 'propertyRestrictions': ['[has_member only select-list]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every selection subtype generator necessarily have at least one member associated via the has_member property that is a select-list?", "1": "Is it required for a selection subtype generator to possess any select-list as its has_member?", "2": "Can a selection subtype generator exist without having any select-list as a has_member?", "3": "Is it necessary for a selection subtype generator to include select-lists through the has_member relationship?", "4": "Does the definition of selection subtype generator mandate the presence of select-lists as has_member properties?", "5": "Must all selection subtype generators have select-lists linked via the has_member property?", "6": "Are there any"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled graph datatype\nDescription: labeled graph datatype is defined as a subclass of defined datatype, with the additional restriction that it must have at least one member produced by a directed labeled graph datatype generator. This means every labeled graph datatype is necessarily structured to include elements generated from a mechanism or process that produces directed labeled graph datatypes, distinguishing it from other defined datatypes that may lack this property.\nAxiom: {'subClassOf': ['defined datatype'], 'propertyRestrictions': ['[has_member only directed labeled graph datatype generator]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every labeled graph datatype require at least one member produced by a directed labeled graph datatype generator?", "1": "Is it possible for a labeled graph datatype to exist without having any members generated by a directed labeled graph datatype generator?", "2": "Can a labeled graph datatype be considered valid if none of its members are derived from a directed labeled graph datatype generator?", "3": "Is there any labeled graph datatype that does not satisfy the condition of having at least one member produced by a directed labeled graph datatype generator?", "4": "Does every labeled graph datatype necessarily possess some member generated by a directed labeled graph datatype generator?", "5": "Must all instances of labeled"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bag generator\nDescription: bag generator is defined as a subclass of homogenous unordered aggregate generator with variable size and is explicitly disjoint with set generator, indicating that an individual cannot be both a bag generator and a set generator. Members of this class are characterized by generating collections where items may have non-unique values (duplicates are permitted) and the way elements are accessed is implementation dependent. This ensures that bag generators support variable-sized, unordered aggregates allowing repeated elements, with element access properties not universally specified.\nAxiom: {'subClassOf': ['homogenous unordered aggregate generator with variable size'], 'disjointWith': ['set generator'], 'propertyRestrictions': ['[has_quality some non-unique values]', '[has_quality only implementation dependent access]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology define the relationship between bag generator and set generator?", "1": "Is there any instance that can simultaneously belong to both bag generator and set generator classes?", "2": "Which classes are asserted as disjoint with set generator within the ontology?://api.markdownlint.io/MDL-1001</code></pre>\nGenerated CQs:Is it possible for an object to be classified under both bag generator and set generator categories?", "3": "What other entities are declared incompatible with set generator according to the ontology?", "4": "Which classes are formally distinguished from set generator in the ontology?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record generator\nDescription: record generator is defined as a subclass of heterogenous aggregate generator and is explicitly disjoint with table datatype, ensuring that an individual cannot be both a record generator and a table datatype. Members of the record generator class must possess several qualities: they have a fixed size, are one-dimensional, form an unordered aggregate, support key access, and can contain non-unique values. This formalization captures the characteristic structure of a record generator, emphasizing its fixed, one-dimensional, unordered nature with keyed access and allowance for repeated values.\nAxiom: {'subClassOf': ['heterogenous aggregate generator'], 'disjointWith': ['table datatype'], 'propertyRestrictions': ['[has_quality some one dimensional]', '[has_quality some unordered aggregate]', '[has_quality some key access]', '[has_quality some non-unique values]', '[has_quality only fixed size]']}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between record generators and data types such as table?", "1": "Is it permitted for any instance to belong to both the record generator category and table type?", "2": "Which classes are specified as incompatible with table within this ontology?", "3": "Generated CQs:Is there any overlap allowed between the record generator group and the table data type?", "4": "Which concepts are mutually exclusive with respect to table in the ontology?", "5": "Can a single entity simultaneously qualify as both a record generator and a table?", "6": "Generated CQs:Is it possible for an item to be classified under both record generator and table categories?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous unordered aggregate generator with variable size\nDescription: homogenous unordered aggregate generator with variable size is a subclass of homogenous aggregate generator with variable size and is defined as being equivalent to either a bag generator or a set generator. Members of this class are characterized by having the quality of generating unordered aggregates, reflecting that the elements produced do not have intrinsic order. This ontology definition ensures that any homogenous unordered aggregate generator with variable size behaves as a variable-sized aggregate generator whose items are homogeneous and unordered, aligning with the behaviors of both bag generators and set generators.\nAxiom: {'subClassOf': ['homogenous aggregate generator with variable size'], 'equivalentClass': ['(bag generator or set generator)'], 'propertyRestrictions': ['[has_quality only unordered aggregate]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of homogenous unordered aggregate generator with variable size necessarily have at least one quality property classified as an unordered aggregate?", "1": "Is it required for homogenous unordered aggregate generator with variable size to possess some form of has_quality relation to an unordered aggregate?", "2": "Can a homogenous unordered aggregate generator with variable size exist without possessing any has_quality property indicating an unordered aggregate?", "3": "Generated CQs:Is there any homogenous unordered aggregate generator with variable size that does not satisfy the condition of having at least one quality property marked as an unordered aggregate?", "4": "Are all instances of homogenous unordered aggregate generator with"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: table datatype\nDescription: table datatype is defined as a subclass of heterogenous aggregate datatype, and is explicitly disjoint with record (tuple) datatype, indicating that no instance can simultaneously belong to both classes. Members of the table datatype class are characterized by the following: they always have at least one table generator and a field-list as members; possess the qualities of being exact and non-numeric; and support several specific operations, including IsEmpty, MapToBag, Insert, Select, MapToTable, Delete, Fetch, and Serialize. This formalization distinguishes table datatype from other aggregate types, ensuring that it is uniquely identified by its supported operations, membership requirements, and data qualities.\nAxiom: {'subClassOf': ['heterogenous aggregate datatype'], 'disjointWith': ['record (tuple) datatype'], 'propertyRestrictions': ['[has_member some table generator]', '[has_operation some IsEmpty:table]', '[has_operation some MapToBag:table]', '[has_operation some Insert:table]', '[has_operation some Select:table]', '[has_operation some MapToTable:table]', '[has_quality some exact]', '[has_operation some Delete:table]', '[has_operation some Fetch:table]', '[has_operation some Serialize:table]', '[has_quality some non-numeric]', '[has_member only field-list]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology specify the relationship between table datatype and record (tuple) datatype?", "1": "Is there any instance that can be classified under both table datatype and record (tuple) datatype?", "2": "Which datatypes are declared as mutually exclusive with record (tuple) datatype?", "3": "Generated CQs:Is table datatype considered incompatible with record (tuple) datatype according to the ontology?", "4": "What are the logical alternatives for record (tuple) datatype within the ontology?", "5": "Which classes are excluded from being equivalent to record (tuple) datatype?", "6": "Generated CQs:Is record (tuple) datatype incompatible with table datatype"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: enumerated-value identifier\nDescription: enumerated-value identifier is a subclass of identifier, characterized by the restriction that its values must be associated (through the has-value property) with at least one literal value (rdfs:Literal). This formalization ensures that every enumerated-value identifier refers explicitly to a concrete literal value, distinguishing it from other identifiers that may not be directly tied to literal data.\nAxiom: {'subClassOf': ['identifier'], 'propertyRestrictions': ['[has-value only rdfs:Literal]']}\nGenerated CQs:", "generated_outputs": {"0": "Must all enumerated-value identifiers have at least one value associated via the 'has-value' property to a literal?", "1": "Is it required for an enumerated-value identifier to link to any literal through 'has-value'?", "2": "Can an enumerated-value identifier exist without being connected to any literal via the 'has-value' relationship?", "3": "Does the presence of 'has-value' linking to literals define an enumerated-value identifier?", "4": "Is the absence of 'has-value' connecting to literals sufficient to disqualify something as an enumerated-value identifier?", "5": "Must an enumerated-value identifier always possess some 'has-value' relationship to literals"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate-imposed identifier uniqueness\nDescription: aggregate-imposed identifier uniqueness is a subclass of aggregate generator property, and is explicitly disjoint with classes such as homogenity, aggregate size, uniqueness, component mandatoriness, structurness, recursiveness, and access type, ensuring mutual exclusivity with these notions. It is defined equivalently as a situation where an identifier may or may not be unique (identifier not unique or identifier unique), capturing precisely those cases where the uniqueness of identifiers is determined at the aggregate level rather than being strictly enforced or absent.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['homogenity', 'agregate size', 'uniqueness', 'component mandatoriness', 'structurness', 'recursiveness', 'access type'], 'equivalentClass': ['(identifier not unique and identifier unique)']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology represent the distinction between aggregate-imposed identifier uniqueness and uniqueness?", "1": "Is there any instance classified under both aggregate-imposed identifier uniqueness and uniqueness?", "2": "Which concepts are declared as mutually exclusive with uniqueness within the ontology?_REF>", "3": "Generated CQs:Is aggregate-imposed identifier uniqueness categorized under the broader class of aggregate generator property?", "4": "What properties fall under the category of aggregate generator property, including aggregate-imposed identifier uniqueness?", "5": "Which higher-level categories encompass aggregate-imposed identifier uniqueness?", "6": "Generated CQs:Is aggregate-imposed identifier uniqueness distinct from uniqueness according to the ontology"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: uniqueness\nDescription: uniqueness is defined as a subclass of aggregate generator property and is explicitly disjoint from component mandatoriness, structurness, recursiveness, and access type, meaning no entity can be an instance of both uniqueness and any of these disjoint classes simultaneously. It is equivalent to the presence of either unique values or non-unique values, capturing the property of whether values are distinct or may repeat within an aggregate context. This definition formalizes how uniqueness characterizes and distinguishes value patterns in aggregate generator properties.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['component mandatoriness', 'structurness', 'recursiveness', 'access type'], 'equivalentClass': ['(non-unique values and unique values)']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology represent the logical equivalence between uniqueness and the combination of non-unique and unique values?", "1": "Is it correct that uniqueness is defined as the intersection of non-unique values and unique values?", "2": "Can uniqueness be formally expressed as the union of non-unique values and unique values according to the ontology?", "3": "1. Does the concept of uniqueness encompass both instances where values are unique and cases where they are not unique?", "4": "2. Can uniqueness be classified under the broader category of those concepts that are exclusively either non-unique or unique values?", "5": "3. Are all entities"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: recursiveness\nDescription: recursiveness is defined as a subclass of aggregate generator property, indicating it is a specific kind of property related to aggregate generators. It is explicitly disjoint with access type, meaning no entity can simultaneously be both an access type and exhibit recursiveness. Additionally, recursiveness is formally equivalent to either recursive or non-recursive, fully covering both possibilities as mutually exclusive characteristics within this context.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['access type'], 'equivalentClass': ['(recursive and non-recursive)']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology define the relationship between recursiveness and access type?", "1": "Is there any instance that can be classified under both recursiveness and access type?", "2": "Which classes are specified as mutually exclusive with access type in the ontology?://generated by Amie Antworten.0.1.3.7.4.8.2.2.1.6.5.10.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: primitive datatype\nDescription: primitive datatype is a subclass of datatype, and is explicitly disjoint from both generated datatype and defined datatype, ensuring that no individual can simultaneously belong to these classes. Members of primitive datatype are characterized by the requirement that they possess at least one quality related to equality (expressed as having some has_quality relationship to equality). This formalization captures the basic, irreducible nature of primitive datatypes, differentiating them from those that are constructed or defined based on other rules.\nAxiom: {'subClassOf': ['datatype'], 'disjointWith': ['generated datatype', 'defined datatype'], 'propertyRestrictions': ['[has_quality only equality]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology define the separation between primitive datatype and defined datatype?", "1": "Is there any instance that can be classified under both primitive datatype and defined datatype?", "2": "Which classes are specified as disjoint with defined datatype?", "3": "Generated CQs:Is there any instance that can be classified under both generated datatype and primitive datatype?", "4": "Which classes are declared as mutually exclusive with generated datatype?", "5": "CQs:What is the precise relationship established between primitive datatype and generated datatype within the ontology?", "6": "Generated CQs:Does the ontology restrict membership of primitive datatype solely through its property restrictions?", "7": "CQs"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined datatype parameter\nDescription: defined datatype parameter is a subclass of datatype role, representing a parameter that is specifically associated with datatypes. Any member of this class must have an identifier (i.e., satisfy the has_identifier property with respect to some parameter identifier), must be a member of a defined datatype parameter-list, and must play the role_of some datatype. This formalization ensures that a defined datatype parameter is always linked to a datatype and properly identified within a parameter list structure.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[has_identifier some parameter identifier]', '[is_member_of some defined datatype parameter-list]', '[role_of only datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every defined datatype parameter participate in at least one instance of the role_of relationship with a datatype?", "1": "Is it necessary for defined datatype parameters to be related via role_of to any datatype?", "2": "Can there exist a defined datatype parameter without being connected as role_of to any datatype?", "3": "No further questions from this user.", "4": "No more questions from this user.", "5": "Does defined datatype parameter require participation in the role_of relation with exactly one datatype?", "6": "Can defined datatype parameter be involved in the role_of relationship with multiple datatypes?", "7": "Must defined datatype parameter have exactly one datatype participating through the role_of"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: alternative-type\nDescription: alternative-type is defined as a subclass of datatype role. Instances of this class must be the role of at least one datatype and must also be a member of some alternative component. This formalization ensures that alternative-type represents a specialized datatype role that is contextually linked both to specific datatypes and to alternative components.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[role_of some datatype]', '[is_member_of only alternative component]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of alternative-type necessarily participate in the is_member_of relation with at least one alternative component?", "1": "Is it required for something to be classified as alternative-type if it has the property is_member_of set to an alternative component?", "2": "Can an alternative-type exist without being related via is_member_of to any alternative component?", "3": "Generated CQs:Is there any alternative-type that does not have the is_member_of property linking it to an alternative component?", "4": "Can an entity be considered an alternative-type without being associated through the is_member_of property to an alternative component?", "5": "Does the definition"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: parameter\nDescription: parameter is defined as a subclass of datatype role, representing entities that serve a specific function within a datatype context. Each parameter must be associated with some datatype (via the role_of property) and must have an identifier that is a member of the parameter identifier class. This ensures that every parameter is explicitly linked to the datatype it qualifies and is uniquely identified within the system.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[has_identifier some parameter identifier]', '[role_of only datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every parameter necessarily participate in at least one role_of relationship with a datatype?", "1": "Is it required for a parameter to be connected via role_of to exactly one datatype?", "2": "Can a parameter exist without being related through role_of to any datatype?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: attribute component\nDescription: attribute component is defined as a subclass of datatype role, meaning each attribute component is a specific kind of datatype role. Additionally, attribute component instances are required to be associated with at least one attribute identifier through the has_identifier property. This ensures that every attribute component is uniquely identified by an attribute identifier.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[has_identifier only attribute identifier]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every attribute component have at least one identifier via the has_identifier property?", "1": "Is it necessary for an attribute component to be linked to some attribute identifier through has_identifier?", "2": "Can an attribute component exist without being associated with any attribute identifier via has_identifier?", "3": "No additional CQs", "4": "Does the existence of an attribute component imply the presence of at least one attribute identifier related by has_identifier?", "5": "No additional CQs", "6": "Must all entities connected to an attribute component via has_identifier be attribute identifiers?", "7": "No additional CQs", "8": "Can an attribute component have more than one attribute identifier associated with"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete field-list\nDescription: discrete field-list is a subclass of field-list, defined by the restriction that its members must include at least one discrete field component. This ensures that every instance of discrete field-list contains some element that is characterized as a discrete field component.\nAxiom: {'subClassOf': ['field-list'], 'propertyRestrictions': ['[has_member only discrete field component]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every discrete field-list necessarily contain at least one member that is a discrete field component?", "1": "Can a discrete field-list exist without having any discrete field components as members?", "2": "Is it required for a discrete field-list to have at least one has_member relationship with a discrete field component?", "3": "Generated CQs:Is every discrete field-list classified under the broader category of field-list?", "4": "Which types are more specific than field-list, such as discrete field-list?", "5": "What higher-level classes encompass discrete field-list within the hierarchy?", "6": "Generated CQs:Is discrete field-list categorized as a type"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unlabeled dataset field-list\nDescription: unlabeled dataset field-list is a subclass of field-list, characterized by the axiom that its members must include at least one labeled dataset descriptive field component through the has_member property. This means any instance of unlabeled dataset field-list is a field-list that necessarily contains some labeled dataset descriptive field components.\nAxiom: {'subClassOf': ['field-list'], 'propertyRestrictions': ['[has_member only labeled dataset descriptive field component]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every member of an unlabeled dataset field-list necessarily have at least one labeled dataset descriptive field component?", "1": "Is it required for an unlabeled dataset field-list to contain a labeled dataset descriptive field component as a member?", "2": "Can an unlabeled dataset field-list exist without having any labeled dataset descriptive field component among its members?", "3": "(generated)", "4": "(generated)", "5": "(generated)", "6": "(generated)", "7": "(generated)", "8": "(generated)", "9": "(generated)", "10": "(generated)", "11": "(generated)", "12": "(generated)", "13": "(generated)", "14": "(generated)", "15": "(generated)", "16": "(generated"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: attribute-list\nDescription: attribute-list is defined as a subclass of list specification, characterized by the requirement that every attribute-list must have at least one member that is an attribute component. This formalization specifies that the class comprises list specifications whose members necessarily include attribute components.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member only attribute component]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every attribute-list require at least one member that is an attribute component?", "1": "Is it necessary for an attribute-list to have some attribute component as a member?", "2": "Can an attribute-list exist without having any attribute component among its members?", "3": "Generated CQs:Must all attribute-lists possess at least one has_member relationship with an attribute component?", "4": "Does the definition of attribute-list imply the presence of attribute components through the has_member property?", "5": "Are there any attribute-lists that lack a has_member connection to an attribute component?", "6": "Generated CQs:Is it possible for an attribute-list not"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: alternative-list\nDescription: alternative-list is defined as a subclass of list specification, incorporating a property restriction requiring that its members must include at least one alternative component. This ensures that any instance of alternative-list represents a list specification whose elements are specifically alternative components.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member only alternative component]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every member of the alternative-list class necessarily have at least one has_member relationship with an alternative component?", "1": "Is it required for alternative-list instances to possess some alternative component via the has_member property?", "2": "Can alternative-list exist without being linked through has_member to any alternative component?", "3": "#OntologyGeneration #AlternativeList #PropertyRestriction\"", "4": "#AlternativeComponent #HasMember\"", "5": "#AlternativeList #PropertyRestriction\"", "6": "#AlternativeComponent #HasMember\"", "7": "#AlternativeList #ExistenceDependency\"", "8": "#AlternativeComponent #HasMember\"\"", "9": "#AlternativeList #ExistenceDependency\""}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: select-list\nDescription: select-list is defined as a subclass of list specification, representing a specialized type of list that must include at least one member which is a select-item specification. Any instance of select-list is thus required to be a list specification containing one or more select-item specifications as its members.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member only select-item specification]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every select-list necessarily have at least one has_member property related to a select-item specification?", "1": "Is it possible for a select-list to exist without being associated via has_member to any select-item specification?", "2": "Can a select-list ever lack the has_member relationship to some select-item specification?", "3": "Does the existence of a select-list guarantee the presence of a select-item specification through the has_member property?", "4": "Is having at least one select-item specification as a has_member necessary for an entity to be classified as a select-list?", "5": "Must all instances of select-list possess the has_member relation to some select"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: enumerated-value-list\nDescription: enumerated-value-list is defined as a subclass of list specification, with the defining property that it must have at least one member that is an enumerated-value identifier. This means any instance of enumerated-value-list is a list specification characterized by containing one or more explicitly enumerated values as its members.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member only enumerated-value identifier]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every enumerated-value-list necessarily include at least one member that is an enumerated-value identifier?", "1": "Is it possible for an enumerated-value-list to exist without having any has_member relation to an enumerated-value identifier?", "2": "Can an enumerated-value-list ever contain a value other than an enumerated-value identifier as a member?", "3": "Is it required for all members of an enumerated-value-list to be identified as enumerated-value identifiers?", "4": "Can an enumerated-value-list have members that are not categorized as enumerated-value identifiers?", "5": "Does the presence of the has_member property linking to enumerated-value identifier guarantee that an enumerated-value-list exists?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: array datatype\nDescription: array datatype is defined as a subclass of homogenous aggregate datatype, and is explicitly disjoint from homogenous aggregate datatype with variable size, indicating arrays have a fixed size. Members of this class possess the following characteristics: they have members of a specific base type, members are indexed (by an index-type list), and an array can be generated by an array generator. Arrays are associated with qualities such as being exact, non-ordered, and non-numeric. They support operations including selection (Select:table), replacement (Replace:array), and testing for equality (Equal:array). These axioms provide a formal definition capturing the essential nature and operational behavior of array datatypes.\nAxiom: {'subClassOf': ['homogenous aggregate datatype'], 'disjointWith': ['homogenous aggregate datatype with variable size'], 'propertyRestrictions': ['[has_operation some Select:table]', '[has_member some index-type list]', '[has_quality some exact]', '[has_operation some Replace:array]', '[has_quality some non-ordered]', '[has_quality some non-numeric]', '[has_operation some Equal:array]', '[has_member some array generator]', '[has_member only base type]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology distinguish between array datatype and homogenous aggregate datatype with variable size?", "1": "Is there any instance that belongs simultaneously to both array datatype and homogenous aggregate datatype with variable size?", "2": "Which classes are specified as mutually exclusive with homogenous aggregate datatype with variable size?://end-hidegeneratedCQs\nGenerated CQs:Is array datatype classified under homogenous aggregate datatype?", "3": "What broader categories encompass array datatype within the hierarchy?", "4": "Which types fall under the category of homogenous aggregate datatype, including array datatype?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real datatype\nDescription: real datatype is defined as a subclass of numeric ordered primitive datatype and is explicitly disjoint with both integer datatype and rational datatype, ensuring that no individual can be simultaneously classified as a real datatype and either of those classes. Members of this class support a range of operations, including addition (Add), multiplication (Multiply), negation (Negate), reciprocals (Reciprocal), equality comparison (Equal), order comparison (InOrder), and type promotion (Promote), all among real values. Instances of real datatype possess qualities of being unbounded and approximate, distinguishing them from other numeric types. They also include members such as real radix and real factor, further characterizing the structure and application of real datatypes.\nAxiom: {'subClassOf': ['numeric ordered primitive datatype'], 'disjointWith': ['integer datatype', 'rational datatype'], 'propertyRestrictions': ['[has_quality some approximate]', '[has_operation some Negate:real]', '[has_member some real radix]', '[has_quality some unbounded]', '[has_operation some Reciprocal:real]', '[has_operation some InOrder:real]', '[has_operation some Add:real]', '[has_operation some Promote:real]', '[has_operation some Equal:real]', '[has_member some real factor]', '[has_operation only Multiply:real]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology specify the relationship between real datatype and rational datatype?", "1": "Is there any instance that can belong to both real datatype and rational datatype?", "2": "Which data types are declared as mutually exclusive with rational datatype?", "3": "_REF\">"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-aggregate generator\nDescription: non-aggregate generator is defined as a subclass of generated datatype generator, and is explicitly disjoint from defined generator, aggregate datatype, and aggregate generator. Every non-aggregate generator is equivalent to being either a choice generator, pointer generator, or procedure generator. This class groups generator types that are not aggregate in nature, thereby excluding those that represent defined, aggregate, or aggregate-related generator functionalities.\nAxiom: {'subClassOf': ['generated datatype generator'], 'disjointWith': ['defined generator', 'aggregate datatype', 'aggregate generator'], 'equivalentClass': ['(choice generator and pointer generator and procedure generator)']}\nGenerated CQs:", "generated_outputs": {"0": "Must every non-aggregate generator necessarily fall into one of the categories—choice generator, pointer generator, or procedure generator?", "1": "Is it possible for a generator to be classified as both a non-aggregate generator and neither a choice generator nor a pointer generator?", "2": "Does the equivalence relationship between non-aggregate generator and the union of choice generator, pointer generator, and procedure generator hold true?", "3": "No additional CQs", "4": "Is there any instance that belongs exclusively to the set of choice generators but cannot be considered a non-aggregate generator according to this definition?", "5": "Can a generator qualify as a non-ag"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: numericalness\nDescription: numericalness is a subclass of datatype property that classifies properties as either numeric or non-numeric. It is formally specified to be equivalent to the union of numeric and non-numeric, meaning all members must belong to one of these two categories. Additionally, numericalness is explicitly disjoint with cardinality, order, boundedness, and equality, ensuring these property types are mutually exclusive and no property can simultaneously belong to both numericalness and any of these other classes. This class captures the essential distinction between properties based on their numerical character.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['cardinality', 'order', 'boundedness', 'equality'], 'equivalentClass': ['(numeric and non-numeric)']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology define the relationship between numericalness and cardinality?", "1": "Is there any instance that can be classified under both numericalness and cardinality?", "2": "Which property classes are declared as mutually exclusive with cardinality?", "3": "://end-generatedCQs\nGenerated CQs:Is numericalness categorized under the broader class of datatype property?", "4": "What specific subclasses fall under the category of datatype property, such as numericalness?", "5": "Which higher-level groups encompass numericalness within the ontology structure?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boundedness\nDescription: boundedness is defined as a subclass of datatype property and is explicitly disjoint with equality, indicating that no instance can simultaneously represent boundedness and equality. It is further specified as being equivalent to either bounded or unbounded, meaning every instance of boundedness must fall into one of these two categories. This class formally captures the notion of whether a datatype property exhibits bounds or not, distinguishing it from properties concerning equality.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['equality'], 'equivalentClass': ['(bounded and unbounded)']}\nGenerated CQs:", "generated_outputs": {"0": "How are boundedness and unboundedness related as classes within the ontology?", "1": "Is there any instance that belongs exclusively to both boundedness and unboundedness categories?", "2": "Which classes are explicitly stated as mutually exclusive with boundedness?_REF>", "3": "Generated CQs:Is boundedness classified under the broader category of datatype property?", "4": "What specific subcategories does datatype property encompass, including boundedness?", "5": "Which higher-level concepts include boundedness as a subclass?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real field component\nDescription: real field component is defined as a subclass of primitive field component, disjoint with boolean field component—which ensures that no individual can be both a real field component and a boolean field component simultaneously. Members of this class are further constrained by a property restriction: each real field component must have a role with respect to some real datatype. This means that any real field component always relates in some way to a real (numeric, continuous) datatype, distinguishing it from other types of primitive field components.\nAxiom: {'subClassOf': ['primitive field component'], 'disjointWith': ['boolean field component'], 'propertyRestrictions': ['[role_of only real datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology specify the separation between real field components and boolean field components?", "1": "Is there any instance that can be classified as both a real field component and a boolean field component?", "2": "Which classes are formally stated as mutually exclusive with boolean field component within the ontology?://text/plain\nGenerated CQs:What is the exact logical distinction made between real field component and boolean field component in the ontology?", "3": "Can an entity belong to both real field component and boolean field component categories at the same time according to the ontology?", "4": "Which data types or classes are explicitly declared incompatible with boolean"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: choice datatype\nDescription: choice datatype is a subclass of non-aggregate datatype, characterized by having values that represent a single value selected from a set of alternative datatypes. These alternative datatypes are differentiated by their correspondence to values from a tag-type, known as the tag datatype. Formally, a choice datatype has members such as tag-type, alternative-list, and a choice generator; it is subject to property restrictions requiring qualities such as exactness and being non-ordered. It supports specific operations, including Discriminant:choice, Tag:choice, Cast:choice, and Equal:choice, which facilitate the selection and identification of alternatives by tag values.\nAxiom: {'subClassOf': ['non-aggregate datatype'], 'propertyRestrictions': ['[has_quality some exact]', '[has_operation some Discriminant:choice]', '[has_quality some non-ordered]', '[has_operation some Cast:choice]', '[has_operation some Equal:choice]', '[has_member some tag-type]', '[has_member some alternative-list]', '[has_member some choice generator]', '[has_operation only Tag:choice]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of choice datatype necessarily have at least one has_member relation to a choice generator?", "1": "Is it required for a choice datatype to be associated with a choice generator via the has_member property?", "2": "Can a choice datatype exist without any choice generators linked through has_member?", "3": "# Generated CQs:Must all entities classified as choice datatype possess the has_member relationship to at least one choice generator?", "4": "Does the presence of a choice generator as a member via has_member define a choice datatype?", "5": "Are there any choice datatypes that lack the has_member connection to a choice generator?", "6": "#"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DAG datatype\nDescription: DAG datatype is specified as a subclass of labeled graph datatype, meaning it inherits all characteristics of a labeled graph datatype. Additionally, every DAG datatype must have at least one member that is a DAG datatype generator, as indicated by the property restriction [has_member some DAG datatype generator]. This ensures each instance of DAG datatype is associated with a generator tailored for directed acyclic graph structures.\nAxiom: {'subClassOf': ['labeled graph datatype'], 'propertyRestrictions': ['[has_member only DAG datatype generator]']}\nGenerated CQs:", "generated_outputs": {"0": "Must any DAG datatype include at least one has_member relationship to a DAG datatype generator?", "1": "Is it possible for a DAG datatype not to possess a has_member relation with a DAG datatype generator?", "2": "Does the presence of a DAG datatype imply the existence of a DAG datatype generator through the has_member property?_REF1_3</div>"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: character datatype\nDescription: character datatype is defined as a subclass of non-numeric unordered primitive datatype. It is disjoint with discrete datatype and boolean datatype, ensuring that no datatype can be both a character datatype and either of those types. Members of the character datatype class are characterized by possessing at least one exact quality, supporting the Equal operation restricted to characters, and being associated with at least one character-set identifier. This formalization captures the essential properties of character datatypes, which are used to represent single text characters from specific character sets and are distinct from numeric or logical datatypes.\nAxiom: {'subClassOf': ['non-numeric unordered primitive datatype'], 'disjointWith': ['discrete datatype', 'boolean datatype'], 'propertyRestrictions': ['[has_quality some exact]', '[has_identifier some character-set identifier]', '[has_operation only Equal:character]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology specify the separation between character datatype and discrete datatype?", "1": "Is there any instance classified under both character datatype and discrete datatype simultaneously?", "2": "Which ontological classes are declared incompatible with discrete datatype?", "3": "Generated CQs:Is it allowed for a datatype to belong to both character datatype and boolean datatype categories?", "4": "What differentiates character datatype from boolean datatype within the ontology?", "5": "Which other datatype classes are explicitly stated as incompatible with boolean datatype?", "6": "Generated CQs:Is it permitted for a datatype to be categorized under both character datatype and discrete datatype?", "7": "Which classes are defined as mutually exclusive"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete datatype\nDescription: discrete datatype is a subclass of non-numeric unordered primitive datatype, and it is explicitly disjoint with boolean datatype, ensuring that no individual can be both a discrete datatype and a boolean datatype. Members of this class must have at least one member from a discrete-value-list, support at least the equality operation (Equal:discrete), and possess the quality of exactness. This formalization captures the distinct, non-numeric, unordered nature of discrete datatypes, characterized by well-defined, separate values and an emphasis on precise equality comparisons.\nAxiom: {'subClassOf': ['non-numeric unordered primitive datatype'], 'disjointWith': ['boolean datatype'], 'propertyRestrictions': ['[has_member some discrete-value-list]', '[has_operation some Equal:discrete]', '[has_quality only exact]']}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between discrete datatype and boolean datatype within the ontology?", "1": "Is any instance allowed to simultaneously belong to both discrete datatype and boolean datatype classes?", "2": "Which classes are specified as incompatible with boolean datatype?://p", "3": "Generated CQs:Is discrete datatype classified under the broader category of non-numeric unordered primitive datatype?", "4": "What specific subtypes fall under non-numeric unordered primitive datatype, such as discrete datatype?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: generated datatype generator\nDescription: generated datatype generator is defined as a subclass of datatype generator and is considered equivalent to either a non-aggregate generator or an aggregate generator. Members of this class must be associated, via the is_member_of property, with some generated datatype. The class is also described by the synonym \"datatype constructor.\"\nAxiom: {'subClassOf': ['datatype generator'], 'equivalentClass': ['(non-aggregate generator or aggregate generator)'], 'propertyRestrictions': ['[is_member_of only generated datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "What types of entities are classified as generated datatype generators through their membership in generated datatype?", "1": "Is every generated datatype generator necessarily associated via ‘is_member_of’ with at least one generated datatype?", "2": "Does being a member of generated datatype suffice for an entity to qualify as a generated datatype generator?", "3": "Generated CQs:Is generated datatype generator identical to the set of all entities that have the ‘is_member_of’ relation to at least one generated datatype?", "4": "Can anything be a generated datatype generator if it does not participate in the ‘is_member_of’ relationship with any generated datatype?", "5": "Are"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: integer base datatype\nDescription: integer base datatype is defined as a subclass of base type and is constrained by the axiom that it must play the role of some integer datatype. This means that every instance of integer base datatype is a specific kind of base type that is characterized by being related to at least one integer datatype through the role_of property.\nAxiom: {'subClassOf': ['base type'], 'propertyRestrictions': ['[role_of only integer datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every integer base datatype participate in the role_of relationship with at least one integer datatype?", "1": "Is it necessary for an integer base datatype to have the role_of property connected to an integer datatype?", "2": "Can an integer base datatype exist without being associated via role_of to any integer datatype?", "3": "Generated CQ3:Is it possible for an integer base datatype to lack any role_of connections to integer datatypes?", "4": "Generated CQ4:Are all instances of integer base datatype required to have the role_of property linking them to at least one integer datatype?", "5": "Generated CQ5:Does the existence of"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record of primitives datatype\nDescription: record of primitives datatype is defined as a subclass of record (tuple) datatype. Members of this class are characterized by the property restriction that they must have at least one member that is a primitive field-list. This formalization ensures that any instance of record of primitives datatype represents a structured record whose fields are all of primitive types.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'propertyRestrictions': ['[has_member only primitive field-list]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of record of primitives datatype necessarily possess at least one has_member relationship to a primitive field-list?", "1": "Is it required for record of primitives datatype to have some associated primitive field-list through the has_member property?", "2": "Can record of primitives datatype exist without being linked via has_member to a primitive field-list?", "3": "+Is record of primitives datatype considered a subtype where each occurrence must include at least one primitive field-list as a has_member?", "4": "+Can record of primitives datatype be classified under those entities which always contain some primitive field-list via the has_member property?", "5": "+Must all instances of"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unlabeled dataset record datatype\nDescription: unlabeled dataset record datatype is defined as a subclass of record (tuple) datatype. Members of this class are characterized by the presence of at least one has_member relationship to an unlabeled dataset field-list, meaning each record contains a list of fields but without associated labels. This structure is suitable for representing data records in datasets where attribute names are absent.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'propertyRestrictions': ['[has_member only unlabeled dataset field-list]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of unlabeled dataset record datatype necessarily have at least one member related via has_member to an unlabeled dataset field-list?", "1": "Is it required for an unlabeled dataset record datatype to possess any property linkages to unlabeled dataset field-lists through has_member?", "2": "Can an unlabeled dataset record datatype exist without having any has_member connection to an unlabeled dataset field-list?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set of integer datatype\nDescription: set of integer datatype is defined as a subclass of set datatype. Each instance of this class is constrained by the requirement that it has members, all of which are from the integer base datatype. This ensures that any individual classified as set of integer datatype can only contain integers as its elements.\nAxiom: {'subClassOf': ['set datatype'], 'propertyRestrictions': ['[has_member only integer base datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every member of the set of integer datatype property restriction have at least one value that is an integer base datatype?", "1": "Is it possible for the set of integer datatype property restriction to exist without referencing any integer base datatype?", "2": "Does the existence of the set of integer datatype property restriction imply the presence of some integer base datatype as a member through the ‘has_member’ relationship?", "3": "Can the set of integer datatype property restriction ever reference something other than an integer base datatype via the ‘has_member’ property?", "4": "Is there any instance of the set of integer datatype property restriction where no integer base datatype is"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: enumerated datatype\nDescription: enumerated datatype is defined as a subclass of non-numeric ordered primitive datatype, and is explicitly disjoint with both date and time datatype and ordinal datatype. As a discrete (synonymously, enumerated) datatype, it is characterized by having an explicit set of member values (enumerated-value-list) and supports specific operations such as equality checking (Equal:enumerated), successor determination (Successor:enumerated), and ordered comparison (InOrder:enumerated). Additionally, every enumerated datatype must possess qualities of being bounded (having finite limits) and exact (precisely defined), ensuring it only allows selection from a strictly defined, ordered set of non-numeric values.\nAxiom: {'subClassOf': ['non-numeric ordered primitive datatype'], 'disjointWith': ['date and time datatype', 'ordinal datatype'], 'propertyRestrictions': ['[has_operation some Equal:enumerated]', '[has_member some enumerated-value-list]', '[has_operation some Successor:enumerated]', '[has_quality some bounded]', '[has_operation some InOrder:enumerated]', '[has_quality only exact]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology distinguish between enumerated datatype and ordinal datatype?", "1": "Is there any instance that can simultaneously belong to both enumerated datatype and ordinal datatype?", "2": "Which classes are specified as mutually exclusive with ordinal datatype?://p>Generated CQs:Is enumerated datatype classified under non-numeric ordered primitive datatype?", "3": "What subtypes fall within the category of non-numeric ordered primitive datatype, including enumerated datatype?", "4": "Which broader categories encompass enumerated datatype?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: range\nDescription: range is defined as a subclass of value expression. Members of this class are characterized by having at least one association, through the property has_member, to both a lower bound and an upper bound. This formalization ensures that each instance of range must specify some lower and some upper bound, thereby representing a bounded interval or extent within the context of value expressions.\nAxiom: {'subClassOf': ['value expression'], 'propertyRestrictions': ['[has_member some upper bound]', '[has_member only lower bound]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every member associated with a range via 'has_member' be a lower bound?", "1": "Is it possible for a range to have any member other than a lower bound through 'has_member'?", "2": "Does the presence of 'has_member' with a lower bound guarantee membership in the range?", "3": "Generated CQs:Is there any entity that can participate in a 'has_member' relationship with a range but is not a lower bound?", "4": "Can a range possess members that are not classified as lower bounds via the 'has_member' property?", "5": "Are all entities linked to a range via 'has"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: extended datatype\nDescription: extended datatype is defined as a subclass of data representational model. It is characterized by possessing at least one datatype property (has_quality some datatype property), at least one subtype generator as a member (has_member some subtype generator), at least one value space attribute (has_attribute some value space), and at least one base type as a member (has_member some base type). The class is also associated with the synonym \"subtype\". This formalization ensures that any instance of extended datatype is richly described in terms of qualities, generative subtypes, value domains, and derived from fundamental base types.\nAxiom: {'subClassOf': ['data representational model'], 'propertyRestrictions': ['[has_quality some datatype property]', '[has_member some subtype generator]', '[has_member some base type]', '[has_attribute only value space]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every extended datatype necessarily have at least one attribute related to a value space?", "1": "Is it possible for an extended datatype to exist without having any has_attribute link to a value space?", "2": "Can an extended datatype possess more than one has_attribute relationship to a value space?", "3": "Generated CQs:Is every extended datatype required to have exactly one value space via the has_attribute property?", "4": "Are there any extended datatypes that may or must not relate to multiple value spaces through the has_attribute relation?", "5": "Does the definition of extended datatype allow for each instance to have only one value space associated with it via"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence of discrete datatype\nDescription: sequence of discrete datatype is defined as a subclass of sequence datatype, meaning it inherits all characteristics associated with sequence datatypes. Individuals of this class are further characterized by the property that each member of the sequence must be of a discrete base type. This restriction ensures that only elements classified as discrete base types are permitted as members in such sequences, differentiating this class from more general sequence datatypes that may include other types of elements.\nAxiom: {'subClassOf': ['sequence datatype'], 'propertyRestrictions': ['[has_member only discrete base type]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of sequence of discrete datatype necessarily have at least one has_member relation to some discrete base type?", "1": "Is it required for any entity classified as a sequence of discrete datatype to possess a has_member connection to a discrete base type?", "2": "Can a sequence of discrete datatype exist without being linked via has_member to any discrete base type?", "3": "Generated CQs:Is sequence of discrete datatype categorized under the broader class of sequence datatype?", "4": "Which specific subtypes fall within sequence datatype, including sequence of discrete datatype?", "5": "What higher-level categories encompass sequence of discrete datatype?", "6": "Generated CQs:"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous  unordered aggregate datatype with variable size\nDescription: homogenous unordered aggregate datatype with variable size is a subclass of homogenous aggregate datatype with variable size. Each instance of this class must have at least one member that is an instance of homogenous unordered aggregate generator with variable size. This class groups together collections of elements that are all of the same type, where the order of elements is not significant, and the number of elements may vary.\nAxiom: {'subClassOf': ['homogenous aggregate datatype with variable size'], 'propertyRestrictions': ['[has_member only homogenous unordered aggregate generator with variable size]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every homogenous unordered aggregate datatype with variable size include at least one member that is a homogenous unordered aggregate generator with variable size?", "1": "Is it possible for a homogenous unordered aggregate datatype with variable size to exist without any associated members from the set of homogenous unordered aggregate generators with variable size?", "2": "Can a homogenous unordered aggregate datatype with variable size ever lack the property \"has_member\" linking it to some homogenous unordered aggregate generator with variable size?", "3": "Does the definition of homogenous unordered aggregate datatype with variable size require the presence of at least one has_member relation to a homogenous unordered"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate field component\nDescription: aggregate field component is defined as a subclass of field component and is explicitly disjoint with primitive field component, meaning no instance can belong to both classes simultaneously. Every aggregate field component must play the role of or be associated with some aggregate datatype, as specified by the property restriction (role_of some aggregate datatype). This formalization captures that aggregate field components are complex field components characterized by their association with aggregate datatypes, distinguishing them from primitive field components.\nAxiom: {'subClassOf': ['field component'], 'disjointWith': ['primitive field component'], 'propertyRestrictions': ['[role_of only aggregate datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology specify the distinction between aggregate field component and primitive field component?", "1": "Is there any instance that can simultaneously be classified under both aggregate field component and primitive field component?", "2": "Which classes are formally stated as mutually exclusive with primitive field component within the ontology?://en.wikipedia.org/wiki/Aggregate_(data)"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: void datatype\nDescription: void datatype is a subclass of primitive datatype and is explicitly disjoint from non-numeric primitive datatype, numeric primitive datatype, and non-numeric unordered primitive datatype—no individual can belong to more than one of these categories. Members of the void datatype class are characterized by supporting at least the Equal:void operation, meaning comparison for equality is defined. This class formalizes the concept of a primitive datatype that does not represent numeric or non-numeric unordered values, distinguishing it within datatype hierarchies.\nAxiom: {'subClassOf': ['primitive datatype'], 'disjointWith': ['non-numeric primitive datatype', 'numeric primitive datatype', 'non-numeric unordered primitive datatype'], 'propertyRestrictions': ['[has_operation only Equal:void]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology define the relationship between void datatype and non-numeric ordered primitive datatype?", "1": "Is there any instance that belongs to both void datatype and non-numeric ordered primitive datatype simultaneously?", "2": "Which classes are specified as mutually exclusive with void datatype?_REF>", "3": "Generated CQs:Is void datatype classified under the broader category of non-numeric ordered primitive datatype?", "4": "What types are declared incompatible with non-numeric ordered primitive datatype according to the ontology?", "5": "Which entities cannot coexist as instances of void datatype and non-numeric ordered primitive datatype?", "6": "Generated CQs:Is void datatype"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous aggregate generator\nDescription: homogenous aggregate generator is defined as a subclass of aggregate generator and is equivalent to any generator that is an array generator, bag generator, sequence generator, or set generator. It is explicitly disjoint with heterogenous aggregate generator, meaning that no individual can belong to both classes simultaneously. Members of this class are further characterized by the property restriction that they must have at least one quality that is homogenous, indicating that the elements they generate are of a uniform type or nature.\nAxiom: {'subClassOf': ['aggregate generator'], 'disjointWith': ['heterogenous aggregate generator'], 'equivalentClass': ['(array generator or bag generator or sequence generator or set generator)'], 'propertyRestrictions': ['[has_quality only homogenous]']}\nGenerated CQs:", "generated_outputs": {"0": "What logical distinction exists between homogenous aggregate generators and heterogenous aggregate generators?", "1": "Is it permitted for an entity to be classified as both a homogenous aggregate generator and a heterogenous aggregate generator?", "2": "Which ontological categories are specified as mutually exclusive with homogenous aggregate generator?://generated by Rationale\nThe first question clarifies the separation between homogenous and heterogenous aggregate generators. The second question assesses whether there's overlap between these two types, while the third lists all categories that cannot coexist with homogenous aggregate generator."}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-numeric ordered primitive datatype\nDescription: non-numeric ordered primitive datatype is a subclass of non-numeric primitive datatype. Members of this class are characterized by possessing the quality of being ordered, meaning their values can be arranged in a specific sequence or order. This formalization specifies that any non-numeric primitive datatype classified here must inherently support order among its instances.\nAxiom: {'subClassOf': ['non-numeric primitive datatype'], 'propertyRestrictions': ['[has_quality only ordered]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of non-numeric ordered primitive datatype necessarily have at least one quality that is ordered?", "1": "Is it required for non-numeric ordered primitive datatype to possess some form of the has_quality property with an ordered value?", "2": "Can non-numeric ordered primitive datatype exist without exhibiting the has_quality relationship to something ordered?", "3": "Generated CQs:Is non-numeric ordered primitive datatype categorized under the broader group of non-numeric primitive datatypes?", "4": "What types of non-numeric primitive datatypes encompass non-numeric ordered primitive datatype as a more specific type?", "5": "Which higher-level classes include"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: direct access property\nDescription: direct access property is a subclass of access type and is disjoint with indirect access property, meaning no property can be both a direct access property and an indirect access property. It is formally defined as being equivalent to either index access or key access, specifying that any direct access property allows retrieval via a direct key or index rather than through intermediary steps.\nAxiom: {'subClassOf': ['access type'], 'disjointWith': ['indirect acess property'], 'equivalentClass': ['(index access and key access)']}\nGenerated CQs:", "generated_outputs": {"0": "How are direct access property and index access differentiated within the ontology?", "1": "Is there any property classified as both direct access property and index access simultaneously?", "2": "Which properties are specified as equivalent to key access in this ontology?", "3": "Generated CQs:Is direct access property logically incompatible with key access according to the ontology?", "4": "Can a single property instance belong to both direct access property and key access categories?", "5": "Which concepts are defined as mutually exclusive with key access in the ontology?", "6": "Generated CQs:Is indirect acess property ontologically distinct from direct access property?", "7": "Are all instances of indirect acess property guaranteed"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target primitive field component\nDescription: target primitive field component is defined as a subclass of labeled dataset target field component, specializing the notion of dataset fields that serve as targets in labeled datasets. Individuals in this class must play the role of some real, discrete, or boolean datatype, meaning the value types associated with these components are restricted to basic primitive datatypes (real numbers, discrete values, or boolean values). This specification clarifies that target primitive field components are intended for use where target variables are representable by primitive datatypes.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some (real datatype and discrete datatype and boolean datatype)]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every target primitive field component necessarily participate in at least one instance of the role_of property with a datatype?", "1": "Is it required that all target primitive field components have a relationship via role_of to either real, discrete, or boolean datatypes?", "2": "Can a target primitive field component exist without being linked through role_of to any datatype classified as real, discrete, or boolean?", "3": "Generated CQs:Is it possible for a target primitive field component to not have any role_of relation to real, discrete, or boolean datatypes?", "4": "Does the existence of a target primitive field component guarantee the presence of"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target boolean field component\nDescription: target boolean field component is defined as a subclass of labeled dataset target field component. It is further characterized by the restriction that it must play the role of some boolean datatype, meaning instances of this class are components within a labeled dataset that represent target fields specifically associated with boolean data types. This ensures that the target values handled by this component are strictly boolean (i.e., true or false).\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only boolean datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every instance of target boolean field component participate in the property 'role_of' with at least one boolean datatype?", "1": "Is it required for a target boolean field component to have the role 'role_of' assigned to a boolean datatype?", "2": "Can a target boolean field component exist without being related via the 'role_of' property to any boolean datatype?", "3": "No more CQs", "4": "Is it required for a target boolean field component to have the role 'role_of' assigned to a boolean datatype?", "5": "Can a target boolean field component exist without being related via the 'role_of' property to any"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target discrete field component\nDescription: target discrete field component is defined as a subclass of labeled dataset target field component. It is characterized by having a role that is associated with some discrete datatype, meaning the data values it represents are distinct and separate (e.g., categories or integers) rather than continuous. This ensures that every target discrete field component specifically involves target fields where the underlying data type is discrete.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only discrete datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every target discrete field component necessarily have at least one role associated with a discrete datatype?", "1": "Is it possible for a target discrete field component to exist without any property connection to a discrete datatype via 'role_of'?", "2": "Can a target discrete field component be present if none of its roles link to a discrete datatype?", "3": "Generated CQs:Is it necessary for all target discrete field components to participate in the 'role_of' relationship with at least one discrete datatype?", "4": "Does every instance of target discrete field component require a 'role_of' association with a discrete datatype?", "5": "Must a target"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target real field component\nDescription: target real field component is a subclass of labeled dataset target field component. Individuals of this class are characterized by the restriction that they must play the role of some real datatype. This means that any target real field component represents a field component used as a target in labeled datasets, specifically associated with or representing real-valued data.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only real datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every target real field component have at least one property restriction involving the 'role_of' relationship to real datatype?", "1": "Is it required for a target real field component to participate in the 'role_of' relation with real datatype?", "2": "Can a target real field component exist without being related via 'role_of' to real datatype?", "3": "No further CQs", "4": "Does the existence of a target real field component guarantee the presence of at least one 'role_of' link to real datatype?", "5": "Must all instances of target real field component satisfy the condition that they are connected through 'role_of' to"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target sequence of real field component\nDescription: target sequence of real field component is a subclass of labeled dataset target field component. Members of this class are characterized by having the role_of some sequence of real datatype, meaning that each instance serves as a target field in a labeled dataset and fills a role associated with a sequence of real numbers (e.g., real-valued vectors or time series). This formalization restricts class membership to those dataset components whose target data are structured as sequences of real numbers.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only sequence of real datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every target sequence of real field component necessarily participate in at least one role_of relationship with a sequence of real datatype?", "1": "Is it required for a target sequence of real field component to have the property role_of applied to something classified as a sequence of real datatype?", "2": "Can a target sequence of real field component exist without being related via role_of to any sequence of real datatype?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target hierarchical field component\nDescription: target hierarchical field component is defined as a subclass of labeled dataset target field component. Members of this class are further characterized by the axiom that they fulfill the role_of relationship with some instance of either a tree datatype or a directed acyclic graph (DAG) datatype. This indicates that such components specifically serve as target fields in labeled datasets, where the targets are drawn from hierarchical data structures represented as either trees or DAGs.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some (tree datatype and DAG datatype)]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every target hierarchical field component necessarily participate in the role_of property with at least one tree datatype?", "1": "Is it required for a target hierarchical field component to have the role_of relation to any DAG datatype?", "2": "Can a target hierarchical field component exist without being associated via role_of to both a tree and a DAG?", "3": "Is it sufficient for a target hierarchical field component to exhibit the role_of property with either a tree or a DAG datatype?", "4": "Can a target hierarchical field component be related through role_of exclusively to DAG datatypes or tree datatypes?", "5": "Does participation in the role_of property with DAG"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target DAG field component\nDescription: target DAG field component is defined as a subclass of labeled dataset target field component and is further characterized by the property restriction that it must serve in the role_of some DAG datatype. This means that any instance of target DAG field component is specifically related to Directed Acyclic Graph (DAG) datatypes, describing target fields in labeled datasets that are intended to represent or interact with DAG structures.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only DAG datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every target DAG field component participate in at least one role_of relationship with a DAG datatype?", "1": "Is there any target DAG field component that does not have the role_of property associated with a DAG datatype?", "2": "Can a target DAG field component exist without being linked via the role_of property to a DAG datatype?", "3": "Generated CQ3:Is participation in the role_of property with a DAG datatype required for a target DAG field component?", "4": "Generated CQ4:Can a target DAG field component possess the role_of property even if no DAG datatype is involved?", "5": "Generated CQ5:Does the existence"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target tree field component\nDescription: target tree field component is defined as a subclass of labeled dataset target field component. Members of this class are characterized by the restriction that they must play the role of some tree datatype. This formalization specifies that any target tree field component is associated with a structure fundamentally based on tree datatypes, differentiating it from other target field components by its reliance on hierarchical or tree-structured data.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only tree datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every target tree field component necessarily participate in at least one instance of the 'role_of' property related to tree datatype?", "1": "Is participation in the 'role_of' relationship with tree datatype required for something to be classified as a target tree field component?", "2": "Can a target tree field component exist without having the 'role_of' property connected to any tree datatype?", "3": ":// end of generated CQs\nGenerated CQs:Is it necessary for a target tree field component to have a relation through 'role_of' to a tree datatype?", "4": "Does every target tree field component require involvement"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target set of discrete field component\nDescription: target set of discrete field component is defined as a subclass of labeled dataset target field component. Every individual in this class must play the role of some set of discrete datatype, meaning each component serves as a target field in a labeled dataset whose values are constrained to a discrete set. This ensures that the target values for this component are not continuous but instead belong to a well-defined set, aligning with tasks such as multi-class classification in machine learning.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only set of discrete datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of target set of discrete field component necessarily have the property 'role_of' linking it to at least one set of discrete datatype?", "1": "Is it required that any target set of discrete field component participates in the 'role_of' relationship with a set of discrete datatype?", "2": "Can a target set of discrete field component exist without having the 'role_of' property associated with a set of discrete datatype?", "3": "Generated CQs:Is target set of discrete field component classified under the broader category of labeled dataset target field component?", "4": "What higher-level categories does target set of discrete field component"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target record of primitives field component\nDescription: target record of primitives field component is defined as a subclass of labeled dataset target field component. Every instance of this class has the property that it plays the role_of at least one record of primitives datatype. This formalization ensures that any target record of primitives field component is associated, through the role_of relationship, with data characterized as a record of primitives datatype, linking target fields within labeled datasets to primitive data representations.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only record of primitives datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every target record of primitives field component be related via the role_of property to some record of primitives datatype?", "1": "Is there any target record of primitives field component without a role_of link to a record of primitives datatype?", "2": "Can a target record of primitives field component exist independently of having a role_of connection to a record of primitives datatype?", "3": "No further CQs", "4": "Does the presence of the role_of property connecting a target record of primitives field component to a record of primitives datatype guarantee its classification under target record of primitives field component?", "5": "No further CQs", "6": "Is being linked via role"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target record of boolean field component\nDescription: target record of boolean field component is defined as a subclass of labeled dataset target field component. Members of this class are characterized by the property that they play the role_of some record of boolean datatype, indicating that these components specifically serve as targets in datasets where the associated data is restricted to boolean (true/false) values. This formalization ensures that any instance of this class must be linked to records containing only boolean-typed data, supporting clear distinction in data modeling for boolean-labeled target fields.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only record of boolean datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every target record of boolean field component necessarily participate in at least one 'role_of' relationship with a record of boolean datatype?", "1": "Is it required for a target record of boolean field component to have the 'role_of' property connected to a record that is a boolean datatype?", "2": "Can a target record of boolean field component exist without being related via 'role_of' to a record classified under boolean datatype?", "3": "No further CQs", "4": "Generated CQs:Can a target record of boolean field component be present if there is no 'role_of' relationship established between itself and a record of"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target record of discrete field component\nDescription: target record of discrete field component is a subclass of labeled dataset target field component, and is characterized by a property restriction indicating it must play the role of some record of discrete datatype. This means that any instance of this class represents a target field component within a labeled dataset, specifically one that is associated with a record whose datatype is discrete.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only record of discrete datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every target record of discrete field component necessarily have at least one role_of relation to a record of discrete datatype?", "1": "Is it required for a target record of discrete field component to participate as a record of discrete datatype via the role_of property?", "2": "Can a target record of discrete field component exist without being related to any record of discrete datatype through the role_of property?", "3": "Generated CQs:Is it necessary for a target record of discrete field component to have the property 'role_of' connected to some record of discrete datatype?", "4": "Does having the 'role_of' property linked to"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target structured field component\nDescription: target structured field component is a subclass of labeled dataset target field component. Members of this class are further characterized by the requirement that they play some role in relation to a structured data type; specifically, they must be associated with one or more of the following datatypes: table, array, class, sequence, bag, or set. This definition ensures that any target structured field component is a labeled field designated for structured or collection-type datatypes within the context of a dataset.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some (table datatype and array datatype and class datatype and sequence datatype and bag datatype and set datatype)]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every target structured field component participate in at least one relationship involving a datatype classified as either a table, array, class, sequence, bag, or set?", "1": "Is it necessary for all instances of target structured field component to have the property ‘role_of’ connected to a datatype categorized under table, array, class, sequence, bag, or set?", "2": "Can a target structured field component exist without being linked via ‘role_of’ to any datatype that falls into the categories of table, array, class, sequence, bag, or set?", "3": "Is it sufficient for a target structured field component to"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive record of boolean field component\nDescription: A descriptive record of boolean field component is defined as a subclass of labeled dataset descriptive field component. Any instance of this class must play the role of some record associated with a boolean datatype, signifying that its descriptive information pertains specifically to data fields that store boolean values.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of only record of boolean datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every descriptive record of boolean field component necessarily have at least one role associated with a record of boolean datatype?", "1": "Is it required for a descriptive record of boolean field component to participate in the role_of property with a record of boolean datatype?", "2": "Can a descriptive record of boolean field component exist without being linked via the role_of property to any record of boolean datatype?", "3": "No more CQs", "4": "Is there any descriptive record of boolean field component that does not fulfill the role_of property restriction regarding records of boolean datatype?", "5": "Yes", "6": "Can a descriptive record of boolean field component have multiple roles associated with"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive strucured field component\nDescription: descriptive structured field component is defined as a subclass of labeled dataset descriptive field component. It is characterized by having a role that must be associated with at least one of the following datatypes: array datatype, class datatype, sequence datatype, bag datatype, or set datatype. This ensures that instances of descriptive structured field component function specifically in contexts involving structured data representations such as arrays, classes, sequences, bags, or sets.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of some (array datatype and class datatype and sequence datatype and bag datatype and set datatype)]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every instance of descriptive structured field component have the property 'role_of' linked to at least one datatype chosen from array datatype, class datatype, sequence datatype, bag datatype, or set datatype?", "1": "Is it required for descriptive structured field component to possess 'role_of' relations to any of array datatype, class datatype, sequence datatype, bag datatype, or set datatype?", "2": "Can a descriptive structured field component exist without being related via 'role_of' to either array datatype, class datatype, sequence datatype, bag datatype, or set datatype?", "3": "No further questions from this user.", "4": "Generated CQ"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: procedure-paremeter declaration\nDescription: procedure-parameter declaration is a class characterized by the requirement that its instances must have at least one member that is a parameter and at least one member that is a direction. No superclass is specified, and there are no disjointness axioms defined. This formalization ensures that any individual classified as a procedure-parameter declaration is necessarily associated with both a parameter and a direction through the has_member property.\nAxiom: {'subClassOf': ['specification'], 'propertyRestrictions': ['[has_member some parameter]', '[has_member some direction]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of procedure-parameter declaration also fall under specification?", "1": "Which specific types are classified as subclasses within specification, including procedure-parameter declaration?", "2": "What broader categories encompass procedure-parameter declaration?://end:CQs\nGenerated CQs:Is procedure-parameter declaration categorized under the more general group called specification?", "3": "Which higher-level classes does procedure-parameter declaration inherit from?", "4": "What concepts are included within the category of specification, specifically including procedure-parameter declaration?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: datatype role\nDescription: datatype role is defined as a subclass of role, inheriting all characteristics of the broader role class. There are no additional property restrictions specified for datatype role, so its classification is determined solely by its status as a type of role.\nAxiom: {'subClassOf': ['role'], 'propertyRestrictions': ['[role_of some datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of datatype role necessarily participate in at least one role_of relationship with a datatype?", "1": "Is it required that a datatype role has a role_of connection to a datatype?", "2": "Can a datatype role exist without being linked via role_of to any datatype?", "3": "Generated CQ3:Is it possible for a datatype role not to have the property role_of associated with any datatype?", "4": "Generated CQ4:Can a datatype role possess the role_of property for more than one datatype?", "5": "Generated CQ5:Are there any datatype roles that do not relate to at least one datatype through the role"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: range subtype generator\nDescription: range subtype generator is a class whose members are defined by the existence of at least one relationship via the property has_member to an individual of the class range. This means that any instance of range subtype generator must be associated with at least one range individual. There are no subclass or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['subtype generator'], 'propertyRestrictions': ['[has_member some range]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of range subtype generator necessarily participate as a member through the 'has_member' property in relation to some range?", "1": "Is it required that all entities classified as range subtype generator have at least one 'has_member' connection to a range?", "2": "Can a range subtype generator exist without being related to any range via the 'has_member' property?", "3": "Generated CQs:Is there any instance of range subtype generator that does not have a 'has_member' relationship to at least one range?", "4": "Does the definition of range subtype generator include entities that do not serve as members of"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-directed labeled graph datatype\nDescription: non-directed labeled graph datatype is defined as a subclass of defined datatype. Any instance of this class must have at least one member that is a graph aggregate component, indicating that its values are aggregates composed of graph elements. This definition formalizes the requirement that all non-directed labeled graph datatypes consist of aggregate components relevant to graph structures.\nAxiom: {'subClassOf': ['defined datatype'], 'propertyRestrictions': ['[has_member some graph aggregate component]', '[has_member some non-directed labeled graph generator]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every value associated with the non-directed labeled graph datatype property restriction require at least one has_member relation to a non-directed labeled graph generator?", "1": "Is it necessary for a non-directed labeled graph datatype to possess the has_member property linking it to any non-directed labeled graph generator?", "2": "Can a non-directed labeled graph datatype exist without having any has_member relationship established with a non-directed labeled graph generator?", "3": "Is there any scenario where a non-directed labeled graph datatype does not satisfy the condition that it has the has_member property pointing to a non-directed labeled graph generator?", "4": "Can a non-directed labeled graph datatype"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous aggregate generator with variable size\nDescription: A homogenous aggregate generator with variable size is defined as any entity that has the quality of variable size. It is not specified as a subclass of another class, but every instance must possess some quality indicating its size can change or vary.\nAxiom: {'subClassOf': ['homogenous aggregate generator'], 'propertyRestrictions': ['[has_quality some variable size]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every homogenous aggregate generator include instances classified as homogenous aggregate generators with variable size?", "1": "Is homogenous aggregate generator with variable size considered a more specific type within the broader category of homogenous aggregate generator?", "2": "What subtypes fall under homogenous aggregate generator, including homogenous aggregate generator with variable size?", "3": "Generated CQs:Is homogenous aggregate generator with variable size categorized as a subtype of homogenous aggregate generator?", "4": "Which higher-level classes encompass homogenous aggregate generator with variable size?", "5": "What are all the subclasses identified beneath homogenous aggregate generator, specifically including homogenous aggregate"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: class generator\nDescription: class generator is defined as a subclass of heterogenous aggregate generator and is explicitly disjoint with record generator, ensuring that no individual can simultaneously belong to both classes. Members of this class are characterized by having the following qualities: key access, unordered aggregate structure, allowance of non-unique values, one-dimensionality, and a fixed size. These property restrictions formalize the structural and access properties of the class generator, distinguishing it clearly within the ontology.\nAxiom: {'subClassOf': ['heterogenous aggregate generator'], 'disjointWith': ['record generator', 'table generator'], 'propertyRestrictions': ['[has_quality some key access]', '[has_quality some unordered aggregate]', '[has_quality some non-unique values]', '[has_quality some one dimensional]', '[has_quality some fixed size]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology represent the distinction between class generators and table generators?", "1": "Is there any instance that could be classified under both class generator and table generator categories?", "2": "Which entities are specified as disjoint with table generator according to the ontology?", "3": "Generated CQs:Is there any instance that could be classified under both class generator and record generator categories?", "4": "Which classes are declared as mutually exclusive with record generator in the ontology?", "5": "What is the logical separation established between class generator and record generator?", "6": "Generated CQs:What are the distinct types of data generators recognized by the ontology, particularly excluding class"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence generator\nDescription: sequence generator is defined as a subclass of homogenous aggregate generator with variable size. Members of this class are characterized by possessing the qualities of: containing non-unique values (allowing repeated elements), forming an ordered aggregate (where the arrangement of elements matters), and supporting access by position (enabling retrieval of elements based on their position in the sequence). There are currently no explicit disjointness restrictions specified for this class.\nAxiom: {'subClassOf': ['homogenous aggregate generator with variable size'], 'disjointWith': ['homogenous unordered aggregate generator with variable size'], 'propertyRestrictions': ['[has_quality some non-unique values]', '[has_quality some ordered aggregate]', '[has_quality some position access]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology distinguish between sequence generators and homogenous unordered aggregate generators?", "1": "Is there any instance that can belong to both sequence generator and homogenous unordered aggregate generator categories?", "2": "Which classes are declared incompatible with homogenous unordered aggregate generator within the ontology?", "3": "Generated CQs:Is it possible for an entity to be classified under both sequence generator and homogenous unordered aggregate generator?", "4": "What concepts are explicitly stated as mutually exclusive with homogenous unordered aggregate generator?", "5": "Which types are prohibited from being assigned simultaneously to sequence generator and homogenous unordered aggregate generator?", "6": "Generated CQs:Can a single"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: pointer generator\nDescription: pointer generator is a class defined by the restriction that its members must be associated with at least one pointer datatype via the property is_member_of. This means that any individual of the pointer generator class must be linked to some instance of pointer datatype, ensuring participation in at least one pointer datatype group. There are no specified superclasses for pointer generator.\nAxiom: {'subClassOf': ['non-aggregate generator'], 'propertyRestrictions': ['[is_member_of some pointer datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every pointer generator necessarily have the property 'is_member_of' applied to at least one instance of pointer datatype?", "1": "Is it required for a pointer generator to be related through 'is_member_of' to a pointer datatype?", "2": "Can a pointer generator exist without being connected to any pointer datatype via the 'is_member_of' property?", "3": "Does this condition restrict all possible entities classified as pointer generators to those which are members of at least one pointer datatype according to 'is_member_of'?", "4": "Must each pointer generator possess the 'is_member_of' relation linking it to a pointer datatype?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record (tuple) datatype\nDescription: record (tuple) datatype is defined as a subclass of heterogenous aggregate datatype. Instances of this class must possess at least one non-numeric quality, exhibit exactness, and are explicitly non-ordered. Each record (tuple) is composed of members that include at least one record generator and a field-list, reflecting its structure as an aggregation of potentially diverse fields. Additionally, records (tuples) are characterized by operations such as equality comparison (Equal:record) and field replacement (FieldReplace:record), which are applicable specifically to this datatype. These restrictions ensure that records (tuples) function as non-ordered, heterogenous aggregates with field-based structure and well-defined operational behaviors.\nAxiom: {'subClassOf': ['heterogenous aggregate datatype'], 'propertyRestrictions': ['[has_quality some non-numeric]', '[has_operation some Equal:record]', '[has_quality some exact]', '[has_quality some non-ordered]', '[has_member some record generator]', '[has_operation some FieldReplace:record]', '[has_member some field-list]', '[has_operation some FieldSelect:record]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of record (tuple) datatype necessarily participate in at least one has_operation relationship with FieldSelect:record?", "1": "Is it required for a record (tuple) datatype to have the operation FieldSelect:record associated with it?", "2": "Can a record (tuple) datatype exist without being related via has_operation to FieldSelect:record?", "3": "_REF\">"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate imposed ordering\nDescription: aggregate imposed ordering is defined as a subclass of aggregate generator property, and is equivalent to either an ordered aggregate or an unordered aggregate. The class is explicitly disjoint with aggregate-imposed identifier uniqueness, homogenity, agregate size, component mandatoriness, structurness, recursiveness, and access type, guaranteeing that no individual can simultaneously belong to any of these classes. This formalization ensures that aggregate imposed ordering represents a specific generator property related to the ordering characteristic of aggregates, distinct from other aggregate-related properties.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['aggregate-imposed identifier uniqueness', 'homogenity', 'agregate size', 'component mandatoriness', 'structurness', 'recursiveness', 'access type', 'uniqueness'], 'equivalentClass': ['(ordered aggregate or unordered aggregate)']}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between aggregate imposed ordering and uniqueness within the ontology?", "1": "Is it possible for a concept to simultaneously be classified under both aggregate imposed ordering and uniqueness?", "2": "Which ontological categories are specified as mutually exclusive with aggregate imposed ordering?://end-generated-CQs\nGenerated CQs:Is aggregate imposed ordering categorized as a member of the aggregate generator property group?", "3": "What higher-level concepts encompass aggregate imposed ordering within the ontology structure?", "4": "Which properties fall under the category of aggregate generator property, including aggregate imposed ordering?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: agregate size\nDescription: aggregate size is defined as a subclass of aggregate generator property and is formally disjoint with the classes uniqueness, component mandatoriness, structurness, and recursiveness—ensuring no individual can belong to aggregate size and any of those classes simultaneously. Furthermore, aggregate size is equivalent to the union of fixed size and variable size, meaning every aggregate size is either a fixed size or a variable size. This class characterizes properties describing whether the size of an aggregate is constant or may vary, distinguishing it from other structural aggregate properties.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['uniqueness', 'component mandatoriness', 'structurness', 'recursiveness', 'access type'], 'equivalentClass': ['(fixed size or variable size)']}\nGenerated CQs:", "generated_outputs": {"0": "How are aggregate size and fixed size related within the ontology?", "1": "Is every instance of aggregate size necessarily also an instance of fixed size?", "2": "Which classes are specified as equivalent to aggregate size in this ontology?", "3": "Generated CQs:Is aggregate size classified under access type?", "4": "What concepts are asserted to be mutually exclusive with access type?", "5": "Generated CQs:What are the distinct categories that cannot coexist with access type according to the ontology?", "6": "Generated CQs:Does the ontology permit instances that are both aggregate size and access type?", "7": "Generated CQs:Which properties are defined"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: structurness\nDescription: structurness is defined as a subclass of aggregate generator property and is mutually exclusive (disjoint) with recursiveness, meaning no instance can simultaneously possess both properties. Structurness is equivalent to the union of structured, unstructured, or semi-structured classes; thus, any entity classified under structurness must be classified as one of these three types and vice versa. This ensures a comprehensive coverage of data organizational forms within the scope of aggregate generator properties, while clearly differentiating from recursive properties.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['recursiveness', 'access type'], 'equivalentClass': ['(structured or unstructured or semi-structured)']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology represent the exclusion between structurness and access type?", "1": "Is it possible for a single concept to belong to both structurness and access type categories?", "2": "Which concepts are defined as disjoint with access type according to the ontology?", "3": "Generated CQs:Is it possible for a single concept to belong to both structurness and recursiveness categories?", "4": "What logical separation exists between structurness and recursiveness in the ontology?", "5": "Which properties are specified as disjoint with recursiveness?", "6": "Generated CQs:Is it possible for a single concept to belong to both structurness"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dimensionality\nDescription: dimensionality is defined as a subclass of aggregate generator property, indicating that it represents a specific type of property associated with aggregate generators. This classification establishes that dimensionality inherits all characteristics and constraints of aggregate generator properties, but no additional equivalence to other classes is explicitly specified.\nAxiom: {'subClassOf': ['aggregate generator property'], 'equivalentClass': ['(one dimensional or two dimensional or multi dimensional)']}\nGenerated CQs:", "generated_outputs": {"0": "What are the equivalent forms for dimensionality within the ontology?", "1": "Is every instance of dimensionality necessarily either one-dimensional, two-dimensional, or multi-dimensional?", "2": "Does dimensionality encompass exactly those concepts classified under one-dimensional, two-dimensional, or multi-dimensional categories?://\nGenerated CQs:Is dimensionality categorized under the broader class of aggregate generator property?", "3": "Which types fall under aggregate generator property, including dimensionality?", "4": "What are the parent categories that encompass dimensionality within this ontology?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined datatype\nDescription: defined datatype is a class characterized by the requirement that its members must have at least one has_member relationship to an individual of the class defined generator, and at least one has_member relationship to an individual of the class defined datatype parameter-list. There are no further subclass or property restrictions specified, indicating that the core definition relies on these membership conditions.\nAxiom: {'subClassOf': ['datatype'], 'propertyRestrictions': ['[has_member some defined generator]', '[has_member some defined datatype parameter-list]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every defined datatype possess at least one member through the has_member property that is a defined generator?", "1": "Is it possible for a defined datatype to exist without having any has_member relation to a defined generator?", "2": "Does the presence of a defined generator as a member fulfill the requirements of a defined datatype?", "3": "Can a defined datatype still qualify if it lacks any defined generator as a member via has_member?", "4": "Are all defined datatypes required to contain at least one entity related to them via has_member that is also a defined generator?", "5": "Is there any defined datatype that cannot serve as a member for another"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tag-type\nDescription: tag-type is defined as a subclass of datatype role. This means every instance of tag-type is also an instance of datatype role, inheriting its characteristics, but no additional property restrictions or differentiating axioms are specified for tag-type.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[role_of some datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Does tag-type fall under the broader category of datatype role?", "1": "Which roles are classified as subtypes of datatype role, including tag-type?", "2": "What higher-level categories encompass tag-type within the ontology?", "3": "Generated CQs:Is tag-type categorized as a specific form of datatype role?", "4": "Which entities are more general than tag-type according to their classification hierarchy?", "5": "Under which overarching groupings does tag-type belong?", "6": "Generated CQs:Is tag-type included among the instances of datatype role?", "7": "Which types are covered by the concept of datatype role, specifically referencing tag-type?", "8": "Does tag-type"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: pointer-element-type\nDescription: pointer-element-type is a class defined by the restriction that its members must play the role of at least one datatype (i.e., each pointer-element-type is characterized as being in the role_of some datatype). No further subclass or disjointness relationships are specified.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[role_of some datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of pointer-element-type necessarily participate in the role_of property with at least one datatype?", "1": "Is it required for a pointer-element-type to have the role_of relationship with any datatype?", "2": "Can a pointer-element-type exist without being related through role_of to a datatype?", "3": "Generated CQs:Does pointer-element-type fall under the broader classification of datatype role?", "4": "Which specific classes are categorized as datatype roles, including pointer-element-type?", "5": "What overarching roles encompass pointer-element-type within their hierarchy?", "6": "Generated CQs:Is every pointer-element-type classified under datatype role?", "7": "How does"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: base type\nDescription: base type is defined as a subclass of datatype role, characterized by the property that any base type must be a member of at least one of the following datatypes: array datatype, sequence datatype, bag datatype, set datatype, or extended datatype. This ensures all individuals classified as base type participate in at least one of these specified datatype structures.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[is_member_of some (array datatype or sequence datatype or bag datatype or set datatype or extended datatype)]', '[role_of some datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every base type have at least one relationship through the role_of property to a datatype?", "1": "Is it necessary for a base type to be associated with a datatype via the role_of property?", "2": "Does the presence of a base type imply the existence of a corresponding datatype linked by role_of?", "3": "No further questions by AndrewLimsay1.  ### Generated CQs:Is it required that each base type participates in the role_of relation with at least one datatype?", "4": "Can a base type exist without being related to any datatype via the role_of property?", "5": "Must a base type always have a"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boolean field-list\nDescription: boolean field-list is defined as a subclass of field-list, where every instance must have at least one member that is a boolean field component. There are no specified disjointness constraints with other classes. This formalizes that a boolean field-list is distinguished by the presence of boolean field components among its members.\nAxiom: {'subClassOf': ['field-list'], 'disjointWith': ['discrete field-list'], 'propertyRestrictions': ['[has_member some boolean field component]']}\nGenerated CQs:", "generated_outputs": {"0": "Does any individual can simultaneously belong to both the boolean field-list class and discrete field-list class?", "1": "Which data types are formally excluded from being members of either boolean field-list or discrete field-list?", "2": "Is there a logical separation imposed between boolean field-list and discrete field-list within the ontology?://endgenerated\nGenerated CQs:Is it possible for an entity to be classified under both boolean field-list and discrete field-list?", "3": "What are the categories that cannot coexist with boolean field-list in the ontology?", "4": "How does the ontology define the distinction between boolean field-list and discrete field-list"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled dataset field-list\nDescription: labeled dataset field-list is defined as a subclass of field-list, with the additional constraint that every instance must have at least one member that is a labeled dataset target field component. This ensures that any labeled dataset field-list necessarily contains components specifically designated as labeled dataset target field components among its members.\nAxiom: {'subClassOf': ['field-list'], 'propertyRestrictions': ['[has_member some labeled dataset target field component]', '[has_member some labeled dataset descriptive field component]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every labeled dataset field-list contain at least one has_member relationship to a labeled dataset descriptive field component?", "1": "Is it necessary for a labeled dataset field-list to possess a has_member property linking to a labeled dataset descriptive field component?", "2": "Can a labeled dataset field-list exist without having any has_member relation to a labeled dataset descriptive field component?", "3": "Is it possible for a labeled dataset field-list not to include any has_member connection to a labeled dataset descriptive field component?", "4": "Are all labeled dataset field-list instances required to be associated via the has_member property to at least one labeled dataset descriptive field component?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: niladic operation\nDescription: niladic operation is defined as a subclass of characterizing operation, meaning it inherits all properties of characterizing operations. It is also explicitly disjoint with n-adic operation, ensuring that no individual can be both a niladic operation and an n-adic operation. This formalization characterizes niladic operation as a distinct type of characterizing operation that is fundamentally separate from operations involving any number of arguments.\nAxiom: {'subClassOf': ['characterizing operation'], 'disjointWith': ['n-adic operation', 'monadic operation']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology represent the distinction between niladic operation and monadic operation?", "1": "Is there any instance that can simultaneously belong to both niladic operation and monadic operation categories?", "2": "Which classes are specified as mutually exclusive with monadic operation in the ontology?", "3": "://generated by AskQ&A 1.0 (https://github.com/leogallardo/AskQANDA)"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete-value-list\nDescription: discrete-value-list is defined as a subclass of list specification. This means it represents a specific type of list specification, inheriting all characteristics of list specification, but does not introduce any additional property restrictions or disjointness conditions.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member some discrete-value identifier]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every member of a discrete-value-list have at least one has_member relation to a discrete-value identifier?", "1": "Is it required for a discrete-value-list to include at least one value from the set of discrete-value identifiers via the has_member property?", "2": "Can a discrete-value-list exist without having any has_member relationship established with a discrete-value identifier?", "3": "# Generated CQs:Does a discrete-value-list necessarily contain at least one item linked through the has_member property to a discrete-value identifier?", "4": "Is it necessary for each discrete-value-list to possess at least one has_member connection to a discrete-value"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined datatype parameter-list\nDescription: defined datatype parameter-list is a subclass of list specification. This means that every defined datatype parameter-list is considered a specific kind of list specification, inheriting all general characteristics of list specifications without introducing any additional property restrictions.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member some defined datatype parameter]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every defined datatype parameter-list necessarily include at least one defined datatype parameter as a member?", "1": "Is it required for a defined datatype parameter-list to have has_member relation with defined datatype parameter?", "2": "Can a defined datatype parameter-list exist without being associated via the has_member property to any defined datatype parameter?", "3": "No further CQs", "4": "Must defined datatype parameter-list always possess a has_member relationship linking it to some defined datatype parameter?", "5": "Are all instances of defined datatype parameter-list linked through the has_member property to some defined datatype parameter?", "6": "Does defined datatype parameter-list entail the existence of at least one"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index-type list\nDescription: index-type list is defined as a subclass of list specification, indicating that every index-type list is a specialized form of list specification. There are no additional property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member some index-type]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every index-type list include at least one member that is an index-type?", "1": "Is it required for an index-type list to have any index-type as its member?", "2": "Can an index-type list exist without having any index-type as a member?", "3": "(CQ3) Does the existence of an index-type list necessarily imply the presence of an index-type among its members?", "4": "(CQ4) Must all instances of index-type list possess at least one index-type as a member?", "5": "(CQ5) Are there any index-type lists that do not contain any index-types as their"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tree datatype generator\nDescription: tree datatype generator is defined as a subclass of directed labeled graph datatype generator. This indicates that every tree datatype generator is a specialized form of directed labeled graph datatype generator, inheriting its characteristics and constraints. No explicit disjointness with other classes is asserted.\nAxiom: {'subClassOf': ['directed labeled graph datatype generator'], 'disjointWith': ['DAG datatype generator']}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation is established between tree datatype generator and DAG datatype generator within the ontology?", "1": "Is it permissible for any individual to belong simultaneously to both tree datatype generator and DAG datatype generator categories?", "2": "Which datatypes are explicitly declared as mutually exclusive with DAG datatype generator?", "3": "1/0 Generation terminated. Outputting three questions as requested.", "4": "2/0 Generation terminated. Outputting three questions as requested.", "5": "3/0 Generation terminated. Outputting three questions as requested.", "6": "4/0 Generation terminated. Outputting three questions as requested.", "7": "5/0 Generation terminated"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: scaled datatype\nDescription: scaled datatype is defined as a subclass of numeric ordered primitive datatype, and is explicitly disjoint with integer datatype, meaning an individual cannot simultaneously be an instance of both. Members of scaled datatype are characterized by the presence of certain qualities and members, including some unbounded and exact qualities, as well as the inclusion of scaled radix and scaled factor as members. The class is further defined by its ability to support specific operations: Divide:scaled, Multiply:scaled, Add:scaled, Equal:scaled, Negate:scaled, Round:scaled, and InOrder:scaled. These axioms ensure that any instance of scaled datatype possesses precise numeric capabilities, distinct from integer datatypes, and is designed to support a variety of scaling and arithmetic operations.\nAxiom: {'subClassOf': ['numeric ordered primitive datatype'], 'disjointWith': ['integer datatype', 'rational datatype'], 'propertyRestrictions': ['[has_quality some unbounded]', '[has_operation some Divide:scaled]', '[has_operation some InOrder:scaled]', '[has_operation some Multiply:scaled]', '[has_member some scaled radix]', '[has_quality some exact]', '[has_operation some Negate:scaled]', '[has_operation some Round:scaled]', '[has_operation some Add:scaled]', '[has_member some scaled factor]', '[has_operation some Equal:scaled]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology distinguish between scaled datatype and rational datatype?", "1": "Is there any instance that can belong to both scaled datatype and rational datatype at the same time?", "2": "Which classes are specified as disjoint with rational datatype?", "3": "_generated_CQ3:Is there any property restriction that differentiates scaled datatype from integer datatype?", "4": "_generated_CQ4:Can an entity be classified under both scaled datatype and integer datatype simultaneously?", "5": "_generated_CQ5:Which data types are formally incompatible with integer datatype according to the ontology?", "6": "_generated_CQ6:Is scaled datatype asserted as a subclass of integer datatype"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: rational datatype\nDescription: rational datatype is a subclass of numeric ordered primitive datatype. It possesses numerical, ordered, and exact qualities, indicating its values are precise, can be compared according to an order, and are of a numerical nature. Members of this class support a range of operations restricted to rational types, including addition, multiplication, negation, reciprocation, promoting to a different form, testing equality, ensuring non-negativity, and ordering. These axioms collectively formalize rational datatypes as exact, ordered primitive types over which rational-specific numeric operations are defined.\nAxiom: {'subClassOf': ['numeric ordered primitive datatype'], 'propertyRestrictions': ['[has_operation some Multiply:rational]', '[has_operation some Reciprocal:rational]', '[has_quality some numeric]', '[has_operation some NonNegative:rational]', '[has_quality some ordered]', '[has_operation some Promote:rational]', '[has_operation some Equal:rational]', '[has_operation some Add:rational]', '[has_operation some Negate:rational]', '[has_quality some exact]', '[has_operation some InOrder:rational]', '[has_quality some unbounded]']}\nGenerated CQs:", "generated_outputs": {"0": "Does rational datatype fall under the broader classification of numeric ordered primitive datatype?", "1": "Which specific subclasses are encompassed within numeric ordered primitive datatype, such as rational datatype?", "2": "What general classes does rational datatype inherit from in terms of data type hierarchy?://p>", "3": "Generated CQs:Is every instance of rational datatype also categorized as a numeric ordered primitive datatype?", "4": "What overarching classes include rational datatype as a specialized subtype?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: exactness\nDescription: exactness is defined as a subclass of datatype property, and is designated as disjoint from numericalness, cardinality, boundedness, and equality, ensuring that no individual can belong to both exactness and any of these classes simultaneously. exactness is equivalent to the union of approximate and exact, meaning that any instance of exactness must also be either an instance of approximate or of exact. This models properties that describe whether or not a value or measure is exact or approximate, without overlapping with numericalness, cardinality, boundedness, or equality.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['numericalness', 'cardinality', 'boundedness', 'equality', 'order'], 'equivalentClass': ['(approximate or exact)']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology specify the relationship between exactness and order?", "1": "Is there any instance that can be classified under both exactness and order concurrently?", "2": "Which property classes are declared as incompatible with order according to the ontology?", "3": "Generated CQs:Is there any instance that can be classified under both exactness and cardinality at the same time?", "4": "What are the property classes that are explicitly stated as mutually exclusive with cardinality?", "5": "Which property classes have been identified as incompatible with cardinality within the ontology?", "6": "Generated CQs:Is there any instance that can be classified under both exactness"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: order\nDescription: order is a subclass of datatype property, representing properties whose values impose an ordering. It is explicitly disjoint with boundedness, ensuring that no individual can be both an order and a boundedness property. The class is further defined as equivalent to the union of ordered or non-ordered properties, meaning any instance of order must be either ordered or non-ordered, but not both. This characterization distinguishes order as a fundamental property related to the arrangement of data values, distinct from properties concerned with data bounds.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['boundedness', 'equality'], 'equivalentClass': ['(ordered or non-ordered)']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology define the distinction between the ‘order’ property and the ‘equality’ property?", "1": "Is there any instance that can simultaneously belong to both the ‘order’ property and the ‘equality’ property?", "2": "Which ontological classes are specified as mutually exclusive with ‘equality’?", "3": "Generated CQs:Is there any instance that can simultaneously belong to both the ‘order’ property and the ‘boundedness’ property?", "4": "What are all the properties that are declared as incompatible with ‘order’ within this ontology?", "5": "Which classes are stated as disjoint with respect to ‘order’"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete field component\nDescription: discrete field component is defined as a subclass of primitive field component and is explicitly disjoint with boolean field component—no individual can belong to both classes. Every discrete field component must be associated, via the role_of property, with at least one discrete datatype. This ensures that discrete field components specifically relate to discrete datatypes and are distinguished from boolean field components within the ontology.\nAxiom: {'subClassOf': ['primitive field component'], 'disjointWith': ['boolean field component', 'real field component'], 'propertyRestrictions': ['[role_of some discrete datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every discrete field component have at least one association through the role_of property to a discrete datatype?", "1": "Is it required for a discrete field component to participate in the role_of relationship with any discrete datatype?", "2": "Can a discrete field component exist without being related to any discrete datatype via role_of?", "3": "No additional CQs", "4": "Does the presence of a discrete field component necessarily imply the existence of at least one discrete datatype linked via role_of?", "5": "Must all instances of discrete field component possess a connection to a discrete datatype through the role_of property?", "6": "Is it possible for a discrete field component to"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: pointer datatype\nDescription: pointer datatype is a class characterized by several defining properties: it must have at least one member that is a pointer generator and at least one member that is a pointer-element-type. Instances are required to possess the qualities of being non-ordered, non-numeric, and exact. Additionally, pointer datatypes must support the operations \"Equal:pointer\" and \"Dereference:pointer\". No further subclass constraints are specified.\nAxiom: {'subClassOf': ['non-aggregate datatype'], 'propertyRestrictions': ['[has_quality some non-ordered]', '[has_quality some non-numeric]', '[has_member some pointer generator]', '[has_member some pointer-element-type]', '[has_operation some Equal:pointer]', '[has_operation some Dereference:pointer]', '[has_quality some exact]']}\nGenerated CQs:", "generated_outputs": {"0": "What broader data type categories does pointer datatype belong to?", "1": "Is pointer datatype classified under the category of aggregate datatype?", "2": "Which specific data types fall within the aggregate datatype group, including pointer datatype?", "3": "Generated CQs:Is pointer datatype categorized as a kind of aggregate datatype?", "4": "Which general classes encompass pointer datatype, specifically including aggregate datatype?", "5": "Does pointer datatype represent a more specialized form of aggregate datatype?", "6": "Generated CQs:Does pointer datatype fall under the aggregate datatype classification?", "7": "What overarching categories include pointer datatype among their members, such as aggregate datatype?", "8": "Is pointer datatype considered"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tree datatype\nDescription: tree datatype is defined as a subclass of labeled graph datatype. Every tree datatype is required to have at least one member that is an instance of tree datatype generator, as indicated by the property restriction (has_member some tree datatype generator). There are no explicit disjointness constraints specified for this class. This formalization captures the requirement that tree datatypes are structured within the hierarchy of labeled graph datatypes and are generated or constructed via specific tree datatype generators.\nAxiom: {'subClassOf': ['labeled graph datatype'], 'disjointWith': ['DAG datatype'], 'propertyRestrictions': ['[has_member some tree datatype generator]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology distinguish between tree datatype and DAG datatype?", "1": "Is there any data type classified under both tree datatype and DAG datatype?", "2": "Which data types are explicitly declared as incompatible with DAG datatype?://text/plain\" style=\"font-family: monospace;\">generated CQs:Is tree datatype recognized as a distinct concept separate from graph datatype?", "3": "What categories are mutually exclusive with graph datatype?", "4": "Which classes are formally differentiated from graph datatype?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: lower bound\nDescription: lower bound is a class whose instances are required to have exactly one value for the property has-value, and this value must be of type xsd:integer. This ensures each member of lower bound is associated with precisely one integer value.\nAxiom: {'subClassOf': ['bound'], 'propertyRestrictions': ['[has-value exactly 1 xsd:integer]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of lower bound necessarily possess at least one has-value property with a value of type xsd:integer?", "1": "Is it possible for any lower bound not to have the has-value property assigned to an xsd:integer?", "2": "Are all values associated with the has-value property of a lower bound strictly typed as xsd:integer?", "3": "Can a lower bound exist without having exactly one has-value property linked to an xsd:integer?", "4": "Does the existence of a lower bound imply the presence of a single has-value relationship involving an xsd:integer?", "5": "Must every lower bound contain"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index lowerbound\nDescription: index lowerbound is defined as a subclass of bound. This means that every index lowerbound is a type of bound, inheriting all characteristics and constraints associated with the bound class. There are no additional property restrictions specified for this class.\nAxiom: {'subClassOf': ['bound'], 'propertyRestrictions': ['[has-value exactly 1 xsd:integer]']}\nGenerated CQs:", "generated_outputs": {"0": "Does index lowerbound necessarily have at least one value that is an integer?", "1": "Is it required that each instance of index lowerbound possesses some integer value through the has-value property?", "2": "Can index lowerbound exist without having any integer assigned via has-value?", "3": "No further CQs", "4": "Does index lowerbound have more than one value associated with the has-value property that is not an integer?", "5": "Can index lowerbound ever have multiple values linked to the has-value property where those values are integers?", "6": "No further CQs", "7": "Must every value assigned to index lowerbound through the has-value property"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined generator\nDescription: defined generator is a subclass of datatype generator. This means every defined generator is necessarily a datatype generator, inheriting all its characteristics, but may also have additional distinguishing properties or constraints not specified here.\nAxiom: {'subClassOf': ['datatype generator'], 'propertyRestrictions': ['[is_member_of some defined datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Does a defined generator always produce at least one member from a defined datatype?", "1": "Is it required for any output of a defined generator to be associated with a defined datatype via the ‘is_member_of’ property?", "2": "Can a defined generator exist without having any output linked to a defined datatype through ‘is_member_of’?", "3": "Is it necessary for every output generated by a defined generator to belong to a defined datatype according to ‘is_member_of’?", "4": "Must each output produced by a defined generator be connected to a defined datatype via the ‘is_member_of’ property?", "5": "Does every output generated by"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real base type\nDescription: real base type is a class whose members are defined by their participation in the role_of property with at least one instance of the real datatype. This means every individual of real base type must be in a role_of relation with some real datatype, but there are no additional subclass relationships or property restrictions specified.\nAxiom: {'subClassOf': ['base type'], 'propertyRestrictions': ['[role_of some real datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "What broader categories include real base type within their classification?", "1": "Is real base type categorized under base type?", "2": "Which subclasses fall directly under base type, such as real base type?", "3": "Generated CQs:Is real base type classified as a more specific form of base type?", "4": "What types encompass real base type as a direct subclass?", "5": "Generated CQs:Is base type a generalization of real base type?", "6": "Which parent classes does real base type inherit from?", "7": "Generated CQs:Is real base type included among the subclasses of base type?", "8": "What entities have base type as a superclass"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record of real datatype\nDescription: record of real datatype is defined as a subclass of record (tuple) datatype. Any instance of this class must have at least one member that is a real field-list, as specified by the property restriction [has_member some real field-list]. This class represents composite data structures in which at least one component is drawn from the set of real-number-based data fields.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'disjointWith': ['record of discrete datatype'], 'propertyRestrictions': ['[has_member some real field-list]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology distinguish between record of real datatype and record of discrete datatype?", "1": "Is it permitted for any entity to belong simultaneously to both record of real datatype and record of discrete datatype?", "2": "Which classes are explicitly stated as disjoint with record of real datatype within the ontology?", "3": "Generated CQs:Is there any instance that can be classified under both record of real datatype and record of discrete datatype?", "4": "What types of data structures are formally incompatible with record of real datatype?", "5": "Can a record of real datatype ever overlap with record of discrete datatype in terms of membership?", "6": "Generated CQs:"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled dataset record datatype\nDescription: labeled dataset record datatype is defined as a subclass of record (tuple) datatype. This means every instance of labeled dataset record datatype is also a record (tuple) datatype, inheriting all characteristics of records, but with additional meaning or usage specific to labeled datasets. No further property restrictions or axioms are specified for this class.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'propertyRestrictions': ['[has_member exactly 1 labeled dataset field-list]']}\nGenerated CQs:", "generated_outputs": {"0": "Does labeled dataset record datatype necessarily have at least one member which is a labeled dataset field-list?", "1": "Is it required for every labeled dataset record datatype to include exactly one labeled dataset field-list among its members?", "2": "Can a labeled dataset record datatype exist without having any labeled dataset field-list as a member?", "3": "no more", "4": "Is it possible for a labeled dataset record datatype to have more than one labeled dataset field-list as a member?", "5": "can a labeled dataset record datatype have multiple labeled dataset field-lists associated with it through the has_member property?", "6": "Must each labeled dataset record datatype have only one labeled"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set of real datatype\nDescription: set of real datatype is a class whose members are collections containing at least one element from the real base type. The only formal restriction is that each instance must have at least one member that is a real base type, ensuring that all such sets are connected to real-numbered data elements.\nAxiom: {'subClassOf': ['set datatype'], 'propertyRestrictions': ['[has_member some real base type]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every individual belonging to the set of real datatype necessarily possess at least one member that is a real base type?", "1": "Is it required for any set classified as a set of real datatype to have a has_member relationship with a real base type?", "2": "Can a set of real datatype exist without having any real base types as its members?", "3": "Is there any instance of the set of real datatype that does not satisfy the propertyRestriction '[has_member some real base type]'?", "4": "Is membership in the set of real datatype contingent upon having at least one real base type through the has_member relation?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-aggregate datatype\nDescription: non-aggregate datatype is a class whose individuals are required to have at least one member related via the property has_member to an individual of the class non-aggregate generator. There are no specified superclasses. This restriction ensures that every non-aggregate datatype includes at least one non-aggregate generator as a member.\nAxiom: {'subClassOf': ['generated datatype'], 'propertyRestrictions': ['[has_member some non-aggregate generator]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of non-aggregate datatype necessarily participate in the has_member relationship with at least one non-aggregate generator?", "1": "Is it required for a non-aggregate datatype to have the has_member property connected to any non-aggregate generator?", "2": "Can a non-aggregate datatype exist without being associated through has_member to a non-aggregate generator?", "3": "Generated CQs:Is non-aggregate generator a type of entity that must appear as a value for the has_member property in instances of non-aggregate datatype?", "4": "Does the presence of non-aggregate generator as a has_member fulfill the property"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ordinal datatype\nDescription: ordinal datatype is defined as a subclass of non-numeric ordered primitive datatype. It is characterized by possessing qualities such as being bounded below, potentially unbounded above, ordered, non-numeric, and exact. Members of this class support specific operations, including having an in-order operation and a successor operation, both tailored for ordinal values. This formalization ensures that ordinal datatypes represent strictly ordered, non-numeric values with well-defined successor functions and clear lower bounds, though they may lack an upper bound.\nAxiom: {'subClassOf': ['non-numeric ordered primitive datatype'], 'propertyRestrictions': ['[has_operation some InOrder:ordinal]', '[has_quality some bounded below]', '[has_quality some unbounded above]', '[has_quality some ordered]', '[has_operation some Successor:ordinal]', '[has_quality some non-numeric]', '[has_quality some exact]', '[has_operation some Equal:ordinal]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of ordinal datatype necessarily possess at least one quality that is 'exact'?", "1": "Is it required that all ordinal datatype entities are associated with exactly one 'exact' quality?", "2": "Can an ordinal datatype exist without any 'exact' quality assigned to it?", "3": "Is it necessary for ordinal datatype to have exactly one 'exact' property or no 'exact' properties at all?", "4": "Can an ordinal datatype have more than one 'exact' quality, or must it have exactly one?", "5": "Does every ordinal datatype always have either zero or one 'exact' quality?", "6": "Must an ordinal datatype be linked"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: datatype\nDescription: datatype is a class characterized by the presence of certain properties: each member must have at least one datatype property (expressed via has_quality), must be associated with at least one characterizing operation (via has_operation), and must have at least one value space attribute (via has_attribute). This formalization ensures that any instance of datatype is inherently linked to specific qualities, operations, and value spaces that define its structure and semantics.\nAxiom: {'subClassOf': ['data representational model'], 'propertyRestrictions': ['[has_quality some datatype property]', '[has_operation some characterizing operation]', '[has_attribute some value space]']}\nGenerated CQs:", "generated_outputs": {"0": "Does datatype fall under the category of data representational models?", "1": "What are all subclasses categorized within data representational models, including datatype?", "2": "Which broader classes encompass datatype?://p1\nGenerated CQs:Is datatype classified as a type of data representational model?", "3": "What more general concepts does datatype belong to?", "4": "Which specific instances or subtypes can be identified from data representational model, such as datatype?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: numeric ordered primitive datatype\nDescription: numeric ordered primitive datatype is defined as a subclass of numeric primitive datatype. This means that every instance of numeric ordered primitive datatype is also an instance of numeric primitive datatype, inheriting all the characteristics of the parent class. There are no additional property restrictions or axioms further constraining this class.\nAxiom: {'subClassOf': ['numeric primitive datatype'], 'propertyRestrictions': ['[has_quality some ordered]']}\nGenerated CQs:", "generated_outputs": {"0": "Does numeric ordered primitive datatype fall under the broader classification of numeric primitive datatype?", "1": "Which specific types are encompassed within numeric primitive datatype, including numeric ordered primitive datatype?", "2": "What higher-level classes does numeric ordered primitive datatype inherit from?_REF_0"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence datatype\nDescription: sequence datatype is a subclass of homogenous aggregate datatype with variable size. It is characterized by having members of a base type and potentially a sequence generator. Sequence datatypes are non-ordered, non-numeric collections, and their elements all share the same type. They support operations such as equality checking (Equal:sequence), checking if the sequence is empty (IsEmpty:sequence), obtaining the first element (Head:sequence) or the remainder after the first element (Tail:sequence), and appending new elements (Append:sequence). All members of this class have the qualities of being non-ordered and exact.\nAxiom: {'subClassOf': ['homogenous aggregate datatype with variable size'], 'disjointWith': ['homogenous  unordered aggregate datatype with variable size'], 'propertyRestrictions': ['[has_operation some Equal:sequence]', '[has_quality some exact]', '[has_operation some IsEmpty:sequence]', '[has_quality some non-ordered]', '[has_operation some Head:sequence]', '[has_quality some non-numeric]', '[has_member some base type]', '[has_operation some Append:sequence]', '[has_operation some Tail:sequence]', '[has_member some sequence generator]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology define the relationship between sequence datatype and homogenous ordered aggregate datatype?", "1": "Which aggregate datatypes are explicitly stated as disjoint with sequence datatype?", "2": "Are there any other aggregate datatypes classified as disjoint with sequence datatype beyond homogenous unordered aggregate datatype?", "3": "Generated CQs:Is it correct that no individual can belong simultaneously to both sequence datatype and homogenous ordered aggregate datatype?", "4": "Which classes are specified as mutually exclusive with sequence datatype within the ontology?", "5": "Can a single entity be recognized as both a sequence datatype and a homogenous ordered aggregate datatype?", "6": "Generated CQs:What are"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set datatype\nDescription: set datatype is a subclass of homogeneous unordered aggregate datatypes with variable size. Members of this class have the qualities of being non-ordered, non-numeric, and exact. A set datatype consists of members that are either of a base type or are generated by a set generator. The class supports fundamental set operations, including union, intersection, difference, subset, equality checking, creating an empty set, and creating a set of sets. These axioms formalize the characteristics and operations that define mathematical sets within a datatype context.\nAxiom: {'subClassOf': ['homogenous  unordered aggregate datatype with variable size'], 'propertyRestrictions': ['[has_quality some non-ordered]', '[has_operation some Lsln:set]', '[has_operation some Intersection:set]', '[has_member some base type]', '[has_operation some SetOf:set]', '[has_member some set generator]', '[has_operation some Equal:class]', '[has_quality some non-numeric]', '[has_quality some exact]', '[has_operation some Empty:set]', '[has_operation some Difference:set]', '[has_operation some Union:set]', '[has_operation some Subset:set]', '[has_operation some Select:set]']}\nGenerated CQs:", "generated_outputs": {"0": "Does set datatype fall under the category of homogenous unordered aggregate datatypes with variable size?", "1": "Which aggregate data types are subclasses of homogenous unordered aggregate datatypes with variable size, specifically including set datatype?", "2": "What broader classes does set datatype inherit from within the domain of aggregate datatypes?://end-generatedCQs\nGenerated CQs:Is every instance of set datatype classified as a homogenous unordered aggregate datatype with variable size?", "3": "What specific subtypes belong to the group of homogenous unordered aggregate datatypes with variable size, such as set datatype?", "4": "Does the classification of set"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: primitive field component\nDescription: primitive field component is defined as a subclass of field component. This means every primitive field component is also a field component, but no further distinguishing characteristics or property restrictions are specified for this class.\nAxiom: {'subClassOf': ['field component'], 'propertyRestrictions': ['[role_of some primitive datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every primitive field component participate in at least one instance of role_of with a primitive datatype?", "1": "Is it possible for a primitive field component to have the property role_of without being associated with any primitive datatype?", "2": "Can a primitive field component exist if it does not use the role_of property with a primitive datatype?", "3": "Generated CQs:Is there any primitive field component that has the role_of property restricted exclusively to primitive datatypes?", "4": "Does having the role_of property assigned solely to primitive datatypes characterize a primitive field component?", "5": "Are all instances of role_of for a primitive field component"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: numeric primitive datatype\nDescription: numeric primitive datatype is a class whose members are entities that possess at least one quality characterized as numeric, as indicated by the property restriction [has_quality some numeric]. There are no asserted superclasses, indicating this class is not explicitly defined as a subclass of any other class in the ontology.\nAxiom: {'subClassOf': ['primitive datatype'], 'propertyRestrictions': ['[has_quality some numeric]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every instance of numeric primitive datatype necessarily have at least one quality classified as numeric?", "1": "Is it required for numeric primitive datatype to possess some form of the has_quality relation to numeric?", "2": "Can a numeric primitive datatype exist without having any qualities associated through has_quality as numeric?", "3": "://textual representation datatype']", "4": "textual representation datatype'", "5": "text format'\nGenerated CQs:Is textual representation datatype a more specific type under the broader category of data format?", "6": "Which types fall under the classification of data format, specifically including textual representation datatype?", "7": "What general categories encompass textual representation datatype within the"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-numeric unordered primitive datatype\nDescription: non-numeric unordered primitive datatype is defined as a subclass of non-numeric primitive datatype, characterized by the property that its members possess at least one quality of being non-ordered (has_quality some non-ordered). No additional disjointness constraints are declared. This means all individuals in this class are primitive datatypes that are non-numeric and inherently lack an ordering among their values.\nAxiom: {'subClassOf': ['non-numeric primitive datatype'], 'disjointWith': ['non-numeric ordered primitive datatype'], 'propertyRestrictions': ['[has_quality some non-ordered]']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology specify the distinction between non-numeric unordered and non-numeric ordered primitive datatypes?", "1": "Is there any instance that can simultaneously belong to both non-numeric unordered and non-numeric ordered primitive datatype categories?", "2": "Which classes are asserted to be mutually exclusive with non-numeric ordered primitive datatype within the ontology?", "3": "Generated CQs:Is non-numeric ordered primitive datatype formally defined as the complement of non-numeric unordered primitive datatype?", "4": "What other concepts are classified as disjoint with non-numeric ordered primitive datatype according to the ontology?", "5": "Can a concept be categorized as either"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: heterogenous aggregate datatype\nDescription: heterogenous aggregate datatype is defined as a class whose members must each have at least one member (via the has_member property) that is an instance of the class heterogenous aggregate generator. This means every instance of heterogenous aggregate datatype is characterized by its association with at least one heterogenous aggregate generator, though no additional axiomatic constraints or superclass relationships are specified for this class.\nAxiom: {'subClassOf': ['aggregate datatype'], 'propertyRestrictions': ['[has_member some heterogenous aggregate generator]']}\nGenerated CQs:", "generated_outputs": {"0": "Does heterogenous aggregate datatype fall under the broader category of aggregate datatype?", "1": "Which specific datatypes are classified as subtypes within aggregate datatype, including heterogenous aggregate datatype?", "2": "What higher-level categories encompass heterogenous aggregate datatype?://generated CQ3:Is heterogenous aggregate datatype categorized as a type of aggregate datatype?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bounded above\nDescription: bounded above is defined as a subclass of bounded, indicating that every instance of bounded above is also an instance of bounded. There are no explicit disjointness restrictions specified for this class. This means any member of bounded above inherits all properties and constraints of bounded, and may have additional distinguishing characteristics not specified here.\nAxiom: {'subClassOf': ['bounded'], 'disjointWith': ['bounded below']}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between bounded above and bounded below within the ontology?", "1": "Is there any entity classified simultaneously as both bounded above and bounded below?", "2": "Which classes are declared incompatible with bounded above?", "3": "://p>Generated CQs:Is bounded above categorized under the broader concept of bounded?", "4": "What are the more general categories that encompass bounded above?", "5": "Which subclasses fall under the category of bounded?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bounded\nDescription: bounded is defined as a subclass of boundedness, which means every instance of bounded is necessarily also an instance of boundedness. There are no specified disjointness or additional property restrictions for this class, so its primary characterization is its placement within the hierarchy under boundedness.\nAxiom: {'subClassOf': ['boundedness'], 'disjointWith': ['unbounded']}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between bounded and unbounded in the ontology?", "1": "Is it permitted for an entity to simultaneously belong to both bounded and unbounded classes?", "2": "Which concepts are explicitly stated as mutually exclusive with bounded within the ontology?", "3": "://php-internal-cmd.php?cmd=generate_cq&text=Is+bounded+defined+as+the+complement+of+unbounded+in+this+ontology?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: numeric\nDescription: numeric is defined as a subclass of numericalness, indicating that every instance of numeric is also an instance of numericalness. There are no explicit disjointness axioms specified, so numeric may potentially overlap with other classes unless otherwise stated. This class formalizes the concept of entities possessing numeric or quantitative attributes, within the broader category of numericalness.\nAxiom: {'subClassOf': ['numericalness'], 'disjointWith': ['non-numeric']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology define the distinction between numeric and non-numeric?", "1": "Is there any overlap allowed between numeric and non-numeric categories?", "2": "Which classes are explicitly declared as disjoint from numeric?://end-generatedCQs\nGenerated CQs:Is numeric categorized under the broader class of numericalness?", "3": "What higher-level concepts encompass numeric as a member?", "4": "Which subclasses fall under the general classification of numericalness, including numeric?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Delete:bag\nDescription: Delete:bag is defined as a subclass of delete operation, indicating that it inherits all characteristics of delete operations. There are no specified disjointness restrictions for this class.\nAxiom: {'subClassOf': ['delete operation'], 'disjointWith': ['Delete:table']}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between Delete:bag and Delete:table within the ontology?", "1": "Is any entity allowed to simultaneously belong to both Delete:bag and Delete:table categories?", "2": "Which classes are declared incompatible with Delete:table according to the ontology?", "3": "# Generated CQs #... (stop generating after the third question)  ### Answer1:CQs:Is any entity allowed to simultaneously belong to both Delete:bag and Delete:table categories?", "4": "Which classes are declared incompatible with Delete:table according to the ontology?", "5": "Can a single instance exist in both Delete:bag and Delete:"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Select:array\nDescription: Select:array is defined as a subclass of dyadic select operation. This means that every instance of Select:array is a specific type of dyadic select operation. No additional disjointness or property restrictions are specified for this class.\nAxiom: {'subClassOf': ['dyadic select operation'], 'disjointWith': ['Select:table']}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between Select:array and Select:table within the ontology?", "1": "Is there any instance that can simultaneously belong to both Select:array and Select:table categories?", "2": "Which classes are explicitly stated as disjoint from Select:array?://endCQs\nGenerated CQs:How does the ontology define the relationship between Select:array and Select:table in terms of disjunctive constraints?", "3": "Can a single entity be classified under either Select:array or Select:table but not both?", "4": "What are the classes whose membership is mutually exclusive with Select:array"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Select:bag\nDescription: Select:bag is defined as a subclass of monadic select operation, indicating that every instance of Select:bag represents a specific type of single-argument selection process within the broader category of monadic select operations. There are no explicit disjointness constraints specified for this class.\nAxiom: {'subClassOf': ['monadic select operation'], 'disjointWith': ['Select:set']}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between Select:bag and Select:set in the ontology?", "1": "Is any entity classified under both Select:bag and Select:set simultaneously?", "2": "Which classes are explicitly stated as mutually exclusive with Select:bag?://php//end-narrative-cq/", "3": "Generated CQs:Is there any object that can belong to both Select:bag and Select:set categories according to the ontology?", "4": "Which entities are formally differentiated from Select:bag in the ontology?", "5": "Generated CQs:How does the ontology define the relationship between Select:bag and Select:set in terms of"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Round:scaled\nDescription: Round:scaled is defined as a subclass of round operation, indicating that it represents a specific type of rounding operation. There are no explicit disjointness constraints with other classes. All instances of Round:scaled are also considered instances of round operation.\nAxiom: {'subClassOf': ['round operation'], 'disjointWith': ['Round:time&date']}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between Round:scaled and Round:time&date within the ontology?", "1": "Is there any instance that can simultaneously belong to both Round:scaled and Round:time&date categories?", "2": "Which classes are formally distinguished from Round:scaled according to the ontology's specification?://phpMyAdminSQL query generated: SELECT DISTINCT D1.value FROM axiom_owl2sql D0, axiom_class_name D1 WHERE D0.id = D1.class_id AND D0.text = 'Round:scaled' UNION SELECT DISTINCT D1.value FROM axiom_class_name D0, axiom_dis"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Successor:enumerated\nDescription: Successor:enumerated is defined as a subclass of successor operation, indicating that every instance of Successor:enumerated is also an instance of successor operation. There are no specified disjointness constraints for this class. This formalization is used to distinguish a specific kind or subset of successor operations, grouped as \"enumerated,\" within the broader successor operation category.\nAxiom: {'subClassOf': ['successor operation'], 'disjointWith': ['Successor:ordinal']}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between Successor:enumerated and Successor:ordinal?", "1": "Is any individual classified as both Successor:enumerated and Successor:ordinal simultaneously?", "2": "Which classes are identified as mutually exclusive with Successor:enumerated?://end-avoid narrative questions + axioms.", "3": "Don't generate unnecessary text.", "4": "Output only the three questions, separated by `", "5": "` (pipe with spaces).Stop generation after the third question.  Is it correct that Successor:enumerated is a subclass of Successor:enumered?", "6": "Does Successor:enumered"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ordered aggregate\nDescription: ordered aggregate is defined as a subclass of aggregate imposed ordering, indicating that it represents a type of aggregate in which an explicit ordering of elements is imposed. There are no disjointness axioms specified, so this class may potentially overlap with other classes unless otherwise stated.\nAxiom: {'subClassOf': ['aggregate imposed ordering'], 'disjointWith': ['unordered aggregate']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology distinguish between ordered aggregate and unordered aggregate?", "1": "Is there any instance that can belong to both ordered aggregate and unordered aggregate simultaneously?", "2": "Which aggregate types are explicitly declared as mutually exclusive with ordered aggregate?", "3": "://en.wikipedia.org/wiki/Ordered_aggregate\">https://en.wikipedia.org/wiki/Ordered_aggregate</a>"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: fixed size\nDescription: fixed size is defined as a subclass of agregate size, indicating that every instance of fixed size is also an instance of agregate size. There are no explicit disjointness constraints specified for this class.\nAxiom: {'subClassOf': ['agregate size'], 'disjointWith': ['variable size']}\nGenerated CQs:", "generated_outputs": {"0": "What logical separation exists between 'fixed size' and 'variable size' within the ontology?", "1": "Is there any instance that can simultaneously belong to both 'fixed size' and 'variable size'?", "2": "Which classes are explicitly declared as mutually exclusive with 'fixed size'?", "3": "1", "4": "2", "5": "3", "6": "4", "7": "5", "8": "6", "9": "7", "10": "8", "11": "9", "12": "10", "13": "11", "14": "12", "15": "13", "16": "14", "17": "15", "18": "16", "19": "17", "20": "18", "21": "19", "22": "20", "23": "21", "24": "22"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous\nDescription: homogenous is a subclass of homogenity, meaning every instance of homogenous must also be an instance of homogenity. There are no explicit disjointness axioms specified, so individuals of this class are not formally excluded from membership in any other class.\nAxiom: {'subClassOf': ['homogenity'], 'disjointWith': ['heterogenous']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology distinguish between homogenous and heterogenous concepts?", "1": "Is there any instance that can simultaneously belong to both homogenous and heterogenous classes?", "2": "Which classes within the ontology are defined as mutually exclusive with heterogenous?", "3": "1/0 (generate)://end-narrativeQandA"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-unique values\nDescription: non-unique values is defined as a subclass of uniqueness, indicating that it inherits all properties of uniqueness. However, the axiom does not specify any additional distinguishing features or restrictions, and non-unique values is not explicitly disjoint with any other class. This suggests it represents a special case or refinement of uniqueness, where the unique constraints may be relaxed or specifically defined elsewhere.\nAxiom: {'subClassOf': ['uniqueness'], 'disjointWith': ['unique values']}\nGenerated CQs:", "generated_outputs": {"0": "How are non-unique values distinguished from unique values within the ontology?", "1": "Is there any instance that can simultaneously belong to both non-unique values and unique values categories?", "2": "Which classes are specified as mutually exclusive with unique values?_REF_1</a>", "3": "&nbsp;", "4": "Is non-unique values classified under the broader category of uniqueness?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target record of reals field component\nDescription: target record of reals field component is a class whose members are characterized by participating in the role_of property with at least one record of real datatype. This means that every instance of this class must function in some role specifically related to a record whose values are of a real datatype.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some record of real datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every target record of reals field component necessarily have the role_of property applied to at least one record of real datatype?", "1": "Is it required for target records of real field components to participate as role_of in records of real datatype?", "2": "Can a target record of reals field component exist without being linked through role_of to any record of real datatype?", "3": "1st CQ, 2nd CQ, 3rd CQ://endgenerated\nGenerated CQs:Is every target record of reals field component associated with at least one entity via the role_of property that"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive record of reals field component\nDescription: descriptive record of reals field component is defined as a subclass of labeled dataset descriptive field component. This means that every instance of descriptive record of reals field component is also considered an instance of labeled dataset descriptive field component. There are no additional property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of some record of real datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Does every descriptive record of reals field component necessarily have the role_of property linked to at least one record of real datatype?", "1": "Is it required for a descriptive record of reals field component to participate in the role_of relationship with a record of real datatype?", "2": "Can a descriptive record of reals field component exist without having any associated records of real datatype through the role_of property?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive set of integer field component\nDescription: descriptive set of integer field component is defined as a subclass of labeled dataset descriptive field component. This means every descriptive set of integer field component is inherently a labeled dataset descriptive field component, inheriting all its properties and constraints. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of some set of integer datatype]']}\nGenerated CQs:", "generated_outputs": {"0": "Must every instance of descriptive set of integer field component have at least one role_of relation to set of integer datatype?", "1": "Is it necessary for descriptive set of integer field component to participate in the role_of relationship with set of integer datatype?", "2": "Does the presence of the role_of property connecting descriptive set of integer field component to set of integer datatype guarantee membership in descriptive set of integer field component?", "3": "Can a descriptive set of integer field component exist without being related via role_of to set of integer datatype?", "4": "Can a descriptive set of integer field component exist if it does not have the role_of property linking"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_identifier\nDescription: The property \"has_identifier\" is defined as a sub-property of \"has_attribute\" and does not have explicitly stated characteristics, domain, or range restrictions. It represents an attribute relationship, likely used to associate an entity with a unique identifier, though no inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "generated_outputs": {"0": "What are the superproperties associated with ‘has_identifier’?", "1": "Which properties are classified as subproperties under ‘has_attribute’?", "2": "Does ‘has_identifier’ fall within the hierarchy defined by ‘has_attribute’?://", "3": "generated CQs:Is there any higher-level property encompassing both ‘has_attribute’ and ‘has_identifier’?", "4": "Which entities can serve as the domain for the property ‘has_identifier’?", "5": "Is it correct that the property ‘has_identifier’ does not specify a particular domain?", "6": "Can anything other than the specified class use the property ‘has_identifier’?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is_member_of\nDescription: The property \"is_member_of\" does not have specified domain or range restrictions and has no special characteristics defined. It is a sub-property of \"attribute_of\" and has \"has_member\" as its inverse property. This property is used to relate an entity to a group or collection to which it belongs.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['attribute_of'], 'inverseOf': []}\nGenerated CQs:", "generated_outputs": {"0": "What are all the properties that are considered subproperties of ‘attribute_of’, including ‘is_member_of’?", "1": "Which property is declared as the superproperty of ‘is_member_of’ within this ontology?", "2": "Is ‘is_member_of’ classified as a specialized form of ‘attribute_of’ according to the ontology?", "3": "Is ‘attribute_of’ identified as a more general property compared to ‘is_member_of’?", "4": "Can we infer that if X is_member_of Y, then Y attribute_of X?", "5": "What is the direct superproperty associated with ‘is_member_of’?", "6": "Does the ontology"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_operation\nDescription: The property \"has_operation\" does not have explicitly defined characteristics, domain, or range restrictions. It is declared as a sub-property of \"has_attribute,\" indicating that it inherits the general meaning of associating an attribute with an entity, with a more specific focus on operations. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "generated_outputs": {"0": "What are the super-properties associated with ‘has_operation’ in this ontology?", "1": "Is every instance of ‘has_operation’ also classified under ‘has_attribute’?", "2": "Which properties are considered subproperties of ‘has_attribute’?://php/3}", "3": "Can entities related via ‘has_operation’ be connected through any other property besides ‘has_attribute’?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_role\nDescription: The property \"has_role\" has no explicitly defined domain, range, or characteristics. It is a direct subproperty of owl:topObjectProperty, indicating broad applicability between individuals. No inverse property is specified. This property can be used to associate entities with their assigned roles without additional restrictions.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "generated_outputs": {"0": "What are the superproperties associated with ‘has_role’ in this ontology?", "1": "Is there any entity that does not have a role assigned through either ‘has_role’ or its inverse?", "2": "Which properties are considered subproperties under ‘owl:topObjectProperty’, such as ‘has_role’?", "3": "Is it correct that the property ‘has_role’ does not specify a domain?", "4": "Can ‘has_role’ be used with subjects other than those specified in its domain?", "5": "What types of objects can serve as the range for the property ‘has_role’?", "6": "Is it accurate that the property ‘"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: represents\nDescription: The property \"represents\" has no explicitly defined domain, range, or characteristics, and does not specify an inverse property. It is a sub-property of owl:topObjectProperty, indicating it is a very general object property that can relate any two individuals in the ontology. No further semantic constraints are provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "generated_outputs": {"0": "What types of entities can serve as the subject for the property'represents'?", "1": "What kinds of values can appear as the range for the property'represents'?", "2": "Can'represents' have a range other than what is currently specified?", "3": "Can'represents' be used with subjects that do not fall into any particular class?", "4": "Is there any restriction on the domains associated with the property'represents'?", "5": "Is it correct that the property'represents' does not have a specified domain?", "6": "Is it accurate that the"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: role_of\nDescription: The property \"role_of\" does not have explicitly specified domain or range restrictions and lacks defining characteristics. It is a sub-property of \"owl:topObjectProperty\" and has \"has_role\" as its inverse property. This property is typically used to relate a role to an entity, indicating that the entity plays or fulfills a particular role.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "generated_outputs": {"0": "What are all the properties that are defined as inverses for ‘role_of’?", "1": "If entity A has the role_of property value B, does this entail that B has the has_role property value A?", "2": "Which property serves as the inverse of ‘role_of’ within this ontology?", "3": "http://www.w3.org/2002/07/owl#topObjectProperty", "4": "http://www.geneontology.org/formulas/role_of", "5": "http://www.geneontology.org/formulas/has_role", "6": "role_of", "7": "has_role", "8": "owl:topObjectProperty", "9": "role_of", "10": "has_role"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is_operation_of\nDescription: The property \"is_operation_of\" has no explicitly defined domain or range restrictions and does not possess any special logical characteristics. It is defined as a sub-property of \"attribute_of,\" indicating that it represents a specific kind of attributions between entities. Additionally, it has an inverse property \"has_operation,\" establishing a bidirectional relationship between related entities.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['attribute_of'], 'inverseOf': []}\nGenerated CQs:", "generated_outputs": {"0": "What is the ontological connection between ‘is_operation_of’ and ‘has_operation’ properties?", "1": "If entity A is the operation of B via ‘is_operation_of’, can we infer that B has operation A through ‘has_operation’?", "2": "Which property serves as the inverse for ‘is_operation_of’ in this context?://endignore\nAre there any additional properties beyond ‘is_operation_of’ and ‘has_operation’ that form part of the transitive link between entities in the ontology?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has-value\nDescription: The property \"has-value\" does not have explicitly defined characteristics, domain, range, super-properties, or inverse properties. This indicates a general-purpose property whose usage and constraints are not restricted by axioms in the current ontology specification.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "generated_outputs": {"0": "Can 'has-value' relate to subjects other than those specified?", "1": "What types of entities can serve as the subject for the property 'has-value'?", "2": "Is it correct that the property 'has-value' has no specific domain?", "3": "Are there any restrictions on what can act as the value associated with 'has-value'?", "4": "Can the property 'has-value' have any type of object as its value?", "5": "Is it correct that the property 'has-value' has no specified range?", "6": "Is it possible for 'has-value' to link to entities outside the given range?", "7": "Does the property '"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_member\nDescription: The property \"has_member\" has no explicit domain or range restrictions and is not defined with characteristics such as functional or transitive. It is declared as a sub-property of \"has_attribute,\" indicating that it inherits the general semantics of attributive relations. No inverse property is specified. This property is used to relate a group or collection to its members in a manner consistent with general attribute relations.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['has_attribute'], 'inverseOf': []}\nGenerated CQs:", "generated_outputs": {"0": "What are the superproperties associated with ‘has_member’ within the ontology?", "1": "Is ‘has_member’ classified as a type of ‘has_attribute’?", "2": "Which properties are identified as subproperties under ‘has_attribute’?://api.ai2text.org\nGenerated CQs:Is ‘has_member’ considered a more specific form of ‘has_attribute’?", "3": "What higher-level categories encompass the property ‘has_member’?", "4": "Which properties are broader than ‘has_member’ within this context?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: attribute_of\nDescription: The property \"attribute_of\" has no explicitly defined characteristics, domain, or range restrictions. It is not specified as a sub-property of any other property and does not have an inverse property. This property can be used generally to relate an attribute to any entity without further ontological constraints.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "generated_outputs": {"0": "Can 'attribute_of' be applied to entities outside its current domain?", "1": "Is there any entity that cannot serve as the subject for 'attribute_of'?", "2": "What types of objects are permitted as the range of 'attribute_of'?", "3": "Can 'attribute_of' have a range other than what is currently specified?", "4": "Are there any specific classes that must serve as the domain of 'attribute_of'?", "5": "Is it correct that 'attribute_of' does not specify a domain?", "6": "What entities may act as the domain for the property 'attribute_of'?", "7": "Should 'attribute_of' always have a domain defined within"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: owl:topObjectProperty\nDescription: The property \"owl:topObjectProperty\" has no specified domain, range, characteristics, super-properties, or inverse property. It is the most general object property in OWL ontologies, capable of relating any pair of individuals without restriction.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "generated_outputs": {"0": "What are all possible values for the domain of the property 'owl:topObjectProperty'?", "1": "Is it correct that the property 'owl:topObjectProperty' does not have a defined domain?", "2": "Can the property 'owl:topObjectProperty' have a range other than None?", "3": "http://www.w3.org/2002/07/owl#topObjectProperty", "4": "http://www.w3.org/2002/12/swrl/XML#ClassAtom", "5": "owl:topObjectProperty", "6": "owl:topObjectProperty", "7": "owl:topObjectProperty", "8": "owl:topDataFactory", "9": "owl:top"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is-about\nDescription: The property \"is-about\" has no defined characteristics, domain, range, super-properties, or inverse properties. This indicates that it is a general-purpose property without explicit usage constraints or hierarchical relationships in the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "generated_outputs": {"0": "Can every instance of 'is-about' also be considered as 'owl:topObjectProperty'?", "1": "Which object properties are subproperties under owl:topObjectProperty?", "2": "Is 'is-about' classified as a specific type of owl:topObjectProperty?://php }\">", "3": "Generated CQs:What broader property does 'is-about' inherit from within the ontology?", "4": "Does 'is-about' fall under the category of object properties represented by owl:topObjectProperty?", "5": "What more general property includes 'is-about' among its subproperties?"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is_quality_of\nDescription: The property \"is_quality_of\" has no specified domain, range, characteristics, super-properties, or inverse properties. This indicates it can relate any two individuals without restrictions, and does not inherit constraints or semantics from other properties.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': ['has_quality']}\nGenerated CQs:", "generated_outputs": {"0": "Can 'is_quality_of' have a value that is not an instance of 'None', given its current range specification?", "1": "Is it correct that the property 'is_quality_of' has no defined range?", "2": "What entities are permitted as the domain for the property 'is_quality_of'?", "3": "Is it accurate that the property 'is_quality_of' does not specify a domain?", "4": "Can anything serve as the range for the property 'is_quality_of'?", "5": "Does the property 'is_quality_of' allow instances where the subject has no specific type assigned?", "6": "Is it correct that the property 'is_quality"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: identifier_for\nDescription: The property \"identifier_for\" has no explicitly defined domain or range restrictions and does not possess special characteristics. It is a sub-property of \"attribute_of\", indicating that it inherits the general meaning of being an attribute but specializes it for identifiers. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['attribute_of'], 'inverseOf': ['has_identifier']}\nGenerated CQs:", "generated_outputs": {"0": "What is the relationship between the properties ‘identifier_for’ and ‘has_identifier’ within the ontology?", "1": "If entity A uses ‘identifier_for’ on entity B, can we infer that B has an identifier from A through the ‘has_identifier’ property?", "2": "Which property acts as the inverse of ‘identifier_for’ according to the ontology?", "3": "generated CQs end here. 28 Mar 2024\nGenerated CQs:Is every use of the property ‘identifier_for’ equivalent to some application of ‘has_identifier’ in reverse?", "4": "What is the formal inverse relationship defined between ‘identifier"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_quality\nDescription: The property \"has_quality\" has no specified characteristics, domain, range, super-properties, or inverse properties. This generic property is intended to relate an entity to a quality, but its use is unconstrained by axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "generated_outputs": {"0": "Can 'has_quality' be used as a subproperty for any other property?", "1": "Which properties are considered subproperties under owl:topObjectProperty?", "2": "Is it correct that every instance of 'has_quality' also counts as an instance of owl:topObjectProperty?://end-narrative-cq"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_attribute\nDescription: The property \"has_attribute\" has no explicitly defined characteristics, domain, or range restrictions. It is a sub-property of \"owl:topObjectProperty,\" suggesting it is a general-purpose object property. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': ['has_attribute']}\nGenerated CQs:", "generated_outputs": {"0": "How does the ontology represent the relationship between ‘has_attribute’ and ‘has_attribute’ through their inverses?", "1": "If entity A has attribute B, what are the possible entities related via the inverse of ‘has_attribute’ for B?", "2": "Is there any instance where entity A has attribute B if entity B does not have attribute A according to the ontology?", "3": "Is the property 'has_attribute' equivalent to its inverse 'has_attribute'?", "4": "Can we infer that having attribute X implies being attributed by Y whenever X has_attribute Y?", "5": "Does the ontology assert that every entity A attributed to Y also attributes"}}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: denotes\nDescription: The property \"denotes\" has no defined domain, range, characteristics, super-properties, or inverse properties. It is a generic property with no explicit ontological constraints.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['is-about'], 'inverseOf': []}\nGenerated CQs:", "generated_outputs": {"0": "What can be the range for the property 'denotes'?", "1": "Is it correct that the property 'denotes' does not have a specified range?", "2": "Can 'denotes' be used with any type of subject?", "3": "Generated CQs:Is there any constraint on what entities can serve as subjects for the property 'denotes'?", "4": "Does the property 'denotes' apply exclusively to instances without a defined class?", "5": "Generated CQs:Is it accurate that the property 'denotes' has no domain specified?", "6": "Generated CQs:Can 'denotes' be associated with anything as"}}
