{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CarnivorousPlant\nDescription: CarnivorousPlant is defined as a subclass of plant whose members are characterized by possessing the ability to consume animals; specifically, each member must eat at least some animals. This distinguishes CarnivorousPlant from other plants by its unique adaptation for animal consumption.\nAxiom: {'subClassOf': ['plant'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Must every CarnivorousPlant have at least one instance of 'eats' relating to an animal? | Is it required for CarnivorousPlants to exhibit the 'eats' property with some animal? | Does the existence of a CarnivorousPlant imply that it consumes at least one animal through the 'eats' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phloem\nDescription: Phloem is defined as a subclass of PlantParts and is characterized by being a proper part of some Stem. This formalization specifies that every instance of Phloem must be a plant part that exists as a structural component within a stem, reflecting its biological role in the transport system of plants.\nAxiom: {'subClassOf': ['PlantParts'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is it required that every instance of Phloem is a proper part of some Stem? | Is the relationship ‘is-proper-part-of’ between Phloem and Stem necessarily present for each Phloem? | Can there exist a Phloem that is not a proper part of any Stem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: leaf\nDescription: leaf is defined as a subclass of PlantParts and is characterized by the property restriction that each leaf must be part of either a twig or a branch. This formalization specifies that leaves are plant structures specifically found as components of twigs or branches, aligning with the description that leaves are parts of branches.\nAxiom: {'subClassOf': ['PlantParts'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Must a leaf always be part of a twig or a branch according to the ontology? | Can a leaf exist without being part of either a twig or a branch? | Are twigs and branches the only structures to which a leaf may belong as a part? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: carnivore\nDescription: carnivore is defined as a subclass of animal and is disjoint with herbivore, meaning that no individual can be both a carnivore and a herbivore. It is equivalent to the class of animals whose diet consists exclusively of other animals or of parts derived from animals (i.e., they eat only animals or only things that are part of animals). This formalization captures the precise biological definition: carnivores are exactly those animals that eat only animals or animal parts.\nAxiom: {'subClassOf': ['animal'], 'disjointWith': [], 'equivalentClass': ['([eats only animal] or [eats only [is-part-of some animal]])']}\nGenerated CQs:", "output": "What logical separation is specified between carnivore and herbivore within the ontology? | Is it permissible for an entity to be classified as both a carnivore and a herbivore? | Which classes are formally identified as disjoint with carnivore? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: lion\nDescription: lion is defined as a subclass of animal, with dietary restrictions stating that it eats only herbivores, and among its possible prey, it is known to eat impalas. This means any individual classified as a lion is exclusively a consumer of herbivores, consistent with its role as a carnivorous predator in ecological systems. The description affirms that lions are animals that restrict their diet strictly to herbivorous species.\nAxiom: {'subClassOf': ['animal'], 'propertyRestrictions': ['[eats some Impala]']}\nGenerated CQs:", "output": "Is every entity that a lion eats required to be a herbivore within the ontology? | Can a lion consume anything other than a herbivore according to the defined restrictions? | Does the ontology restrict lion's diet exclusively to entities classified as herbivores? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: animal\nDescription: animal is defined as a class that is explicitly disjoint with plant, meaning no individual can simultaneously be both an animal and a plant. This formalization ensures clear separation between instances of animals and plants within the ontology.\nAxiom: {'disjointWith': []}\nGenerated CQs:", "output": "What constraints prevent an entity from being both an animal and a plant in the ontology? | Is it allowed for an organism to be classified simultaneously as animal and plant within AfricanWildlifeOntology1? | Which other classes, aside from animal, are specified as disjoint with plant in AfricanWildlifeOntology1? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Berry\nDescription: Berry is defined as a subclass of FruitingBody, meaning every berry is a type of fruiting body. The class Berry encompasses all fruit structures that meet this ontological classification; no further restrictions or distinguishing characteristics are specified beyond their membership in the FruitingBody category.\nAxiom: {'subClassOf': ['FruitingBody']}\nGenerated CQs:", "output": "Which broader categories encompass Berry? | What types are included under FruitingBody, such as Berry? | Is Berry classified as a specialized kind of FruitingBody? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Apple\nDescription: Apple is defined as a subclass of FruitingBody, indicating that every apple is a specific type of fruiting body. This classification positions apple within the broader category of organisms or structures that produce fruit, consistent with its botanical role as the edible fruit of certain plants.\nAxiom: {'subClassOf': ['FruitingBody']}\nGenerated CQs:", "output": "Is Apple categorized under FruitingBody in the ontology? | What higher-level classes does Apple belong to according to the ontology? | Which entities are specified as subclasses of FruitingBody, such as Apple? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Grass\nDescription: Grass is defined as a subclass of plant, meaning all instances of grass are considered plants. No additional disjointness or property restrictions are specified, so grass inherits all general properties of the plant class. This class encompasses all plant entities characterized as grass.\nAxiom: {'subClassOf': ['plant']}\nGenerated CQs:", "output": "Which types of plant include Grass as a specialization? | Is every Grass instance also categorized under plant in the ontology? | What higher-level classes encompass Grass according to the ontology structure? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tree\nDescription: tree is defined as a subclass of plant, specifically within the plant kingdom. Trees are characterized as a distinct type of plant, aligning taxonomically as members of the broader plant group.\nAxiom: {'subClassOf': ['plant']}\nGenerated CQs:", "output": "Is tree a specialized type of plant? | Which broader classes encompass tree within the ontology? | What are all the subclasses classified under plant, specifically including tree? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Elephant\nDescription: Elephant is defined as a subclass of herbivore, indicating that all elephants are herbivorous animals. This formalization ensures that any individual classified as an elephant is necessarily a herbivore. If further biological or behavioral characteristics are provided, they can be incorporated to enhance the class description.\nAxiom: {'subClassOf': ['herbivore']}\nGenerated CQs:", "output": "Which animal classes are direct specializations of herbivore? | Is Elephant categorized under the class herbivore? | What broader groups encompass Elephant within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FruitingBody\nDescription: FruitingBody is defined as a subclass of PlantParts, meaning it represents a specific type of plant part within the ontology. This class is intended to capture plant structures specialized for producing and containing reproductive structures, typically involved in fruit or spore formation.\nAxiom: {'subClassOf': ['PlantParts']}\nGenerated CQs:", "output": "What are the specific types categorized within PlantParts, such as FruitingBody? | Which more general groups encompass FruitingBody in the ontology? | Does FruitingBody fall under the broader classification of PlantParts? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Root\nDescription: Root is defined as a subclass of PlantParts, indicating that every root is considered a type of plant part. This classification situates roots within the broader structural components of plants.\nAxiom: {'subClassOf': ['PlantParts']}\nGenerated CQs:", "output": "Does Root belong to the class hierarchy defined by PlantParts? | Which subclasses are included under PlantParts, specifically referencing Root? | Which broader classes encompass Root within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Stem\nDescription: Stem is defined as a subclass of PlantParts, indicating that every stem is categorized as a type of plant part. No further property restrictions or disjointness axioms are specified, so this class represents the general concept of a stem within the broader hierarchy of plant anatomical structures.\nAxiom: {'subClassOf': ['PlantParts']}\nGenerated CQs:", "output": "Which more general categories encompass Stem? | What plant part subclasses are present within PlantParts, such as Stem? | Is Stem classified as a type of PlantParts? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Twig\nDescription: Twig is formally defined as a subclass of PlantParts, indicating that every twig is considered a part of a plant. This classification ensures that only plant part entities can be recognized as twigs within the ontology.\nAxiom: {'subClassOf': ['PlantParts']}\nGenerated CQs:", "output": "To which higher-level classifications does Twig conceptually belong? | Is Twig categorized under the broader group of PlantParts? | Which entities are classified as more specific forms of PlantParts, such as Twig? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Impala\nDescription: Impala is defined as a subclass of animal. It is an African antelope, as described in external resources such as Wikipedia. This classification indicates that all individuals of the class impala are animals, specifically belonging to the group of antelopes native to Africa.\nAxiom: {'subClassOf': ['animal']}\nGenerated CQs:", "output": "What are the subclasses found under animal, and is Impala among them? | Which broader classes include Impala as an instance or subclass? | Is Impala classified as a type of animal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RockDassie\nDescription: RockDassie is defined as a subclass of animal. Members of this class are characterized by their diet, which mainly consists of grasses and broad-leafed plants. Further information about RockDassie can be found at http://en.wikipedia.org/wiki/Rock_Hyrax.\nAxiom: {'subClassOf': ['animal']}\nGenerated CQs:", "output": "To which higher-level groups does RockDassie pertain? | What instances fall under the category animal, specifically including RockDassie? | Is animal a broader classification that encompasses RockDassie? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Parsnip\nDescription: Parsnip is defined as a subclass of Root, which means every parsnip is formally classified as a type of root. This class inherits all characteristics of roots, establishing parsnip as a specific instance within the broader root category.\nAxiom: {'subClassOf': ['Root']}\nGenerated CQs:", "output": "What broader classes encompass Parsnip within the ontology? | Which entities fall under the subclassification of Root? | Is Parsnip classified as a type of Root? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Palmtree\nDescription: Palmtree is defined as a subclass of plant and is explicitly disjoint with tree, ensuring that no individual can be both a palmtree and a tree. Members of this class are characterized by the property restriction that they do not possess branches (i.e., each palmtree has no part that is a branch). This formalization distinguishes palmtrees from other trees and plants in the ontology, emphasizing their unique morphological trait of being branchless.\nAxiom: {'subClassOf': ['plant'], 'disjointWith': ['tree'], 'propertyRestrictions': ['[has-part only not branch]']}\nGenerated CQs:", "output": "Is it necessary that a Palmtree contains some parts that are not branches? | Can a Palmtree exist without having any part that is a branch? | Are there parts of a Palmtree that must be from categories other than branches? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: branch\nDescription: branch is defined as a subclass of PlantParts and must be part of some tree, according to the property restriction. The class is described as representing branches, which are components of trees. This formalization ensures that any individual classified as a branch is recognized as a type of plant part specifically serving as a structural component of a tree.\nAxiom: {'subClassOf': ['PlantParts'], 'propertyRestrictions': ['[is-part-of only tree]']}\nGenerated CQs:", "output": "Is it necessary for a branch to have the property 'is-part-of' with at least one tree? | Does every branch participate in the 'is-part-of' relationship with a tree in the ontology? | Must a branch always be included as part of a tree according to the property restriction? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Omnivore\nDescription: Omnivore is defined as a subclass of animal, disjoint with both carnivore and herbivore, meaning no individual can be both an omnivore and either a carnivore or herbivore. An individual is classified as an omnivore if it eats some animal matter, some plant matter, and also consumes something that is part of an animal or a plant. This formalization captures the core characteristic of omnivores: they are animals that include both animal- and plant-based items in their diet, and their consumption encompasses components from both kingdoms.\nAxiom: {'subClassOf': ['animal'], 'disjointWith': ['carnivore', 'herbivore'], 'equivalentClass': ['([eats only animal] and [eats only plant] and [eats some ([is-part-of only animal] or [is-part-of only plant])])']}\nGenerated CQs:", "output": "Is every Omnivore required to eat at least one animal, one plant, and something that is part of an animal or part of a plant? | Is Omnivore equivalent to the intersection of entities that eat animals, eat plants, and eat parts of either animals or plants? | Must an entity eat both animals and plants, as well as something that is a part of an animal or a part of a plant, to be classified as an Omnivore? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: giraffe\nDescription: giraffe is defined as a subclass of animal, disjoint with lion—meaning an individual cannot be both a giraffe and a lion. Members of this class are herbivores that eat exclusively leaves or twigs, as reflected by the restriction that giraffes only consume these plant parts. This ensures that any individual identified as a giraffe must have a diet limited to leaves and twigs.\nAxiom: {'subClassOf': ['animal'], 'disjointWith': ['lion'], 'propertyRestrictions': ['[eats some (Twig or leaf)]']}\nGenerated CQs:", "output": "Is a giraffe limited to eating only twigs or leaves, excluding all other food types? | Does the ontology constrain giraffes so that any food they consume must be either a twig or a leaf? | Can a giraffe, according to the ontology, have an 'eats' relation to anything other than twigs or leaves? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tasty-plant\nDescription: tasty-plant is defined as a subclass of plant, indicating that every tasty-plant is a type of plant. There are no additional constraints or distinguishing properties specified by the axiom beyond its membership in the broader plant class.\nAxiom: {'subClassOf': ['plant', '([eaten-by some carnivore] and [eaten-by some herbivore])']}\nGenerated CQs:", "output": "Which kinds of organisms eat tasty-plants, specifically distinguishing between carnivores and herbivores? | Is tasty-plant classified under things that are consumed by both carnivores and herbivores? | What plant subclasses are eaten by both members of carnivorous and herbivorous species? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Xylem\nDescription: Xylem is defined as a subclass of PlantParts, meaning every xylem is necessarily a part of a plant. There are currently no additional property restrictions specified for xylem in this definition.\nAxiom: {'subClassOf': ['PlantParts'], 'propertyRestrictions': ['[is-proper-part-of some Stem]']}\nGenerated CQs:", "output": "Is it necessary for Xylem to be a proper part of some Stem? | Can Xylem exist without being a proper part of any Stem? | Does every instance of Xylem participate as a proper part in at least one Stem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Warthog\nDescription: Warthog is defined as a subclass of animal, indicating that every warthog is an animal and inherits all general characteristics of animals. No further distinguishing properties, relationships, or restrictions are specified for this class.\nAxiom: {'subClassOf': ['animal', '([eats some FruitingBody] and [eats some Grass] and [eats some Root] and [eats some animal])']}\nGenerated CQs:", "output": "Which kinds of food items are necessary to classify an animal as a Warthog in the ontology? | Is an individual that eats fruiting bodies, grass, roots, and animals a type of Warthog? | What dietary requirements define the Warthog subclass within the AfricanWildlifeOntology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: herbivore\nDescription: herbivore is defined as a subclass of animal. This means every herbivore is an animal, but no additional axioms such as equivalent classes or property restrictions are specified for this class. The description is limited to its taxonomic placement within animals, with no further formal constraints described.\nAxiom: {'subClassOf': ['animal'], 'equivalentClass': ['([eats only plant] or [eats only [is-part-of some plant]])']}\nGenerated CQs:", "output": "Is every herbivore in the ontology necessarily restricted to eating only plants or only entities that are part of a plant? | Is a herbivore defined as a class whose diet consists exclusively of either plants or things that include some part of a plant? | Is herbivore logically equivalent to the union of animals that eat only plants and those that eat only things with at least one part being a plant? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PlantParts\nDescription: PlantParts is a subclass of owl:Thing, representing a general category for all entities considered parts of plants. There are no additional property restrictions or specific characteristics defined for this class in the current axiomatization.\nAxiom: {'subClassOf': ['owl:Thing'], 'propertyRestrictions': ['[is-proper-part-of some plant]']}\nGenerated CQs:", "output": "Is every instance of PlantParts required to be a proper part of some plant? | Can a PlantPart exist without being a proper part of any plant? | Does the ontology allow for PlantParts that are not associated by the 'is-proper-part-of' property to a plant? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is-proper-part-of\nDescription: The property \"is-proper-part-of\" is an irreflexive property, meaning no entity can be a proper part of itself. It does not have explicitly defined domain or range restrictions. This property is a subproperty of \"is-part-of,\" indicating a more specific parthood relation where the part is strictly contained within another entity. No inverse property is specified.\nAxiom: {'characteristics': ['Irreflexive'], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is every instance of is-proper-part-of also an instance of is-part-of? | Which properties are defined as subproperties of is-part-of? | What superproperties does is-proper-part-of possess within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: eaten-by\nDescription: The property \"eaten-by\" has no explicit domain, range, characteristics, or super-properties defined. It is specified as the inverse of the property \"eats,\" indicating that if entity A is eaten by entity B, then entity B eats entity A. No further semantic constraints are applied.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What is the logical connection between ‘eaten-by’ and ‘eats’ in the ontology? | If animal A is eaten by animal B, does the ontology entail that B eats A? | Which property is recognized as the inverse of ‘eaten-by’ in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has-part\nDescription: The property \"has-part\" is defined as transitive, allowing relationships to propagate along chains of connections. It has no explicitly defined domain or range restrictions, indicating it can relate any entities. \"has-part\" has \"is-part-of\" as its inverse property, but it is not specified as a sub-property of any other property. This property is typically used to express part-whole relationships between entities.\nAxiom: {'characteristics': ['Transitive'], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "How are the properties ‘has-part’ and ‘is-part-of’ related in the ontology? | If entity A has-part entity B, does it follow that entity B is-part-of entity A? | Which property acts as the inverse of ‘has-part’ in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is-part-of\nDescription: The property \"is-part-of\" is defined as both transitive and reflexive, meaning that if an entity is part of another, and that entity is part of a third, then the first is part of the third, and every entity is considered part of itself. There are no explicit domain or range restrictions, no super-properties, and no defined inverse property. This property is typically used to represent part-whole relationships within the ontology.\nAxiom: {'characteristics': ['Transitive', 'Reflexive'], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it entailed that for any individual, the is-part-of property connects the individual to itself? | Does the is-part-of relation infer indirect part-whole associations through its transitivity? | Can 'is-part-of' be associated with entities of any type as its subject? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: eats\nDescription: The property \"eats\" has no specified characteristics, domain, range, super-properties, or inverse properties. It is an unconstrained property, allowing broad use without restrictions on the types of subjects or objects it can relate.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['(animal or plant or [is-part-of some animal] or [is-part-of some plant])'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'eats' relate to objects that are not an animal, plant, or a part of either within the AfricanWildlifeOntology1 domain? | Is there any entity within AfricanWildlifeOntology1 that is not allowed as the range of the property 'eats'? | What types of entities can serve as the range for the 'eats' property in AfricanWildlifeOntology1? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AlarmClockRinging\nDescription: AlarmClockRinging is defined as a subclass of Ringing, representing a specific ringing event. Its defining characteristic is that the agent responsible for the ringing must be an instance of AlarmClock. This ensures that any event classified as AlarmClockRinging involves an alarm clock as the source of the ringing.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[hasAgent some AlarmClock]']}\nGenerated CQs:", "output": "Is AlarmClockRinging classified under the broader category of Ringing? | Which specific types fall under Ringing, including AlarmClockRinging? | In which higher-level categories can AlarmClockRinging be placed? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PhysiologicalMeasurement\nDescription: PhysiologicalMeasurement is defined as a subclass of Measurement, representing a specialized form of measurement that pertains exclusively to patients. Any instance of PhysiologicalMeasurement must refer only to a patient, ensuring that this class captures measurements that specifically describe physiological characteristics or parameters observed in patient individuals.\nAxiom: {'subClassOf': ['Measurement'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is every instance of PhysiologicalMeasurement required to refer exclusively to entities classified as Patient? | Can a PhysiologicalMeasurement ever refer to an entity that is not a Patient? | Does the property 'refersTo' on PhysiologicalMeasurement restrict its range to only those individuals categorized as Patient? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DoorOpen\nDescription: DoorOpen is defined as a subclass of Open, representing a specific type of open state. It is further characterized by the property restriction that it must have some agent which is a Door. This means that instances of DoorOpen denote situations or events where the entity being open is specifically a Door.\nAxiom: {'subClassOf': ['Open'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Must every instance of DoorOpen involve at least one Door as the agent? | Is it possible for DoorOpen to occur without a Door being the agent? | Does DoorOpen require that the property 'hasAgent' be associated with a Door? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SkinTemperature\nDescription: SkinTemperature is defined as a subclass of PhysiologicalMeasurement, representing a specific type of physiological measurement. Members of this class are constrained by the property restriction that they must have exactly one hasTemperature property value, which must be a literal (e.g., a numerical value). This formalization ensures that any instance of SkinTemperature uniquely and quantifiably indicates the temperature measured on the skin.\nAxiom: {'subClassOf': ['PhysiologicalMeasurement'], 'propertyRestrictions': ['[hasTemperature some rdfs:Literal]']}\nGenerated CQs:", "output": "Is it necessary for every SkinTemperature instance to have exactly one associated hasTemperature value? | Can a SkinTemperature be characterized by more or less than one hasTemperature property? | Does the ontology allow SkinTemperature individuals to have more than one or no hasTemperature assignments? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: KettleOff\nDescription: KettleOff is defined as a subclass of Off, representing situations or states where something is powered down or inactive. It is characterized by the additional property that its agent must be some instance of Kettle, indicating that only kettles can be agents in this context. This class ensures that any instance of KettleOff specifically refers to a kettle that is in the \"off\" state.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[hasAgent some Kettle]']}\nGenerated CQs:", "output": "Is KettleOff categorized as a more specific form of Off? | Which Off states include KettleOff as a subclass? | To which parent classes does KettleOff belong within the system? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NoiseLevel\nDescription: NoiseLevel is defined as a subclass of AmbientMeasurement, indicating that it represents a specific type of measurement related to environmental conditions. Every instance of NoiseLevel must have exactly one associated value via the hasNoiseLevel property, and this value must be a literal (e.g., a number or string representing the measured noise). This formalization ensures each NoiseLevel measurement uniquely records a single quantifiable noise value.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[hasNoiseLevel exactly 1]', '[hasNoiseLevel some rdfs:Literal]']}\nGenerated CQs:", "output": "Does NoiseLevel fall under the broader category of AmbientMeasurement? | Which measurement types are classified as more specific forms of AmbientMeasurement, including NoiseLevel? | What are the more general classes that contain NoiseLevel? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Event\nDescription: Event is a class characterized by property restrictions that enforce temporal precision. Each instance of Event must have exactly one startTime, which must be of type time:Instant, and exactly one duration, which must be of type time:DurationDescription. These constraints ensure that every Event is uniquely defined by both a specific starting instant and a specific duration, providing an unambiguous temporal identity for each Event.\nAxiom: {'propertyRestrictions': ['[startTime only time:Instant]', '[duration only time:DurationDescription]', '[duration exactly 1 time:DurationDescription]']}\nGenerated CQs:", "output": "Is every Event required to have exactly one startTime that is an instance of time:Instant? | Can an Event have more or fewer than one associated startTime? | Does the ontology prevent an Event from having multiple or no startTime values at all? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Active\nDescription: Active is defined as a subclass of State. This means that any instance of Active is also an instance of State, representing a particular condition or mode within the broader context of states. Active inherits all general properties and constraints of State, distinguishing itself as a specific form or type of state.\nAxiom: {'subClassOf': ['State']}\nGenerated CQs:", "output": "Does Active fall under the general classification of State? | Which entities are recognized as specific forms of State, such as Active? | What broader groupings encompass the concept of Active in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Apnea\nDescription: Apnea is defined as a subclass of State, indicating that it represents a specific type of state or condition. Individuals classified as Apnea are instances where an organism is in a particular state, typically characterized by the temporary cessation of breathing. This classification ensures that Apnea is formally recognized as a distinct physiological state within the ontology.\nAxiom: {'subClassOf': ['State']}\nGenerated CQs:", "output": "What broader classes does Apnea fall under in the hierarchy? | Which conditions are subclasses under the State category, such as Apnea? | Is Apnea categorized as a specific type of State? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Arousal\nDescription: Arousal is defined as a subclass of State, representing a specific type of state within the ontology. Members of the Arousal class inherit all characteristics of State, indicating that arousal denotes a particular condition or status, although no further differentiating axioms or property restrictions are specified.\nAxiom: {'subClassOf': ['State']}\nGenerated CQs:", "output": "What subclasses are present within the concept of State, such as Arousal? | Is Arousal categorized under the broader class of State? | Which higher-level classes encompass Arousal as a more specific instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MoveLimb\nDescription: MoveLimb is defined as a subclass of State, indicating that it represents a specific type of state within the ontology. This class characterizes conditions or situations involving the movement of a limb, and inherits all general properties applicable to State. There are no additional restrictions or disjointness axioms specified for MoveLimb.\nAxiom: {'subClassOf': ['State']}\nGenerated CQs:", "output": "What types of State include MoveLimb as a more specialized concept? | Is MoveLimb a specific instance within the broader category of State? | Which higher-level categories conceptually include MoveLimb? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Posture\nDescription: Posture is defined as a subclass of State, meaning any instance of Posture is also an instance of State. This class represents the particular physical alignment or arrangement of an organism or object. The lack of disjointness or additional restrictions indicates Posture is broadly characterized within the hierarchy of states or conditions.\nAxiom: {'subClassOf': ['State']}\nGenerated CQs:", "output": "Which general classifications encompass Posture in this hierarchy? | Is Posture considered a more specific form within the broader category of State? | What are the different subclasses identified under State, including Posture? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Rest\nDescription: Rest is defined as a subclass of State, indicating that it represents a specific type of state within the ontology. No further restrictions or properties are specified, and it is annotated with the comment \"DTI-2.\"\nAxiom: {'subClassOf': ['State']}\nGenerated CQs:", "output": "Which broader categories encompass the concept of Rest? | What more specific concepts fall under the category of State, such as Rest? | Is Rest classified as a type of State? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AlarmClock\nDescription: AlarmClock is defined as a subclass of Object. This classification indicates that every instance of AlarmClock is an Object, inheriting all associated characteristics. No additional properties or constraints are specified in the current axiom or description.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "What types are covered under the broader class Object, including AlarmClock? | Which more general classes encompass AlarmClock within the ontology? | Is AlarmClock classified as a type of Object? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Appliance\nDescription: Appliance is defined as a subclass of Object, indicating that every appliance is an object within the domain. This class encompasses all physical objects designed to perform specific functions, typically in a household or industrial setting. No further restrictions or specializations are specified in the current axioms.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "Is Appliance classified as a specialized form of Object? | Into which higher-level categories can Appliance be organized? | Which entities fall under the broader class of Object and include Appliance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Book\nDescription: Book is defined as a subclass of Object. This formalization states that every Book is an Object, inheriting all general characteristics of Objects. No further restrictions or distinguishing properties are specified in the current axiom or description.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "To which general types or categories does Book belong in the ontology? | Which entities are categorized as specializations of Object, including Book? | Is Book classified as a more specific type under the broader category of Object? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Bucket\nDescription: Bucket is defined as a subclass of Object. This means that every instance of Bucket is considered an Object, inheriting all the general properties and constraints associated with Objects. Since no additional restrictions or relations are specified, Bucket serves as a more specific type of Object without further distinguishing characteristics in this formalization.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "To which higher-level classes does Bucket belong? | Is Bucket categorized under the broader concept of Object? | What kinds of Objects include Bucket as a more specific type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cup\nDescription: Cup is defined as a subclass of Object. This means every cup is considered an object, inheriting all properties and characteristics associated with objects. No additional distinguishing characteristics or property restrictions are specified for the class at this level.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "What are the parent categories that encompass Cup? | Is Cup a specific type within the broader category of Object? | Which subclasses are classified under Object, including Cup? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cuttlery\nDescription: Cuttlery is defined as a subclass of Object, representing items that fall within the broader category of objects. At present, there are no additional restrictions or characteristics specified, so any individual member of Cuttlery must be an Object. Further distinctions or properties distinguishing Cuttlery from other Objects are not provided in the current axiom.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "To which higher-level groupings can Cuttlery be assigned? | What are the more specialized categories that fall under Object, such as Cuttlery? | Does Cuttlery belong to the broader class of Object? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Door\nDescription: Door is defined as a subclass of Object. This establishes that every Door is considered an Object within the ontology, inheriting all characteristics and properties assigned to Object. No additional restrictions or disjointness axioms are specified, so the class serves as a general categorization for any entity that can be considered a door.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "Is Door classified as a specific kind of Object? | Which specialized types fall under the broader class of Object, including Door? | What are the more encompassing categories to which Door belongs? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DoorBell\nDescription: DoorBell is defined as a subclass of Object, indicating it is a physical entity or artifact. This class encompasses all entities recognized as doorbells, but no further axiomatic constraints or distinguishing characteristics are specified. Members of this class inherit general properties of objects.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "Is DoorBell classified as a specific type of Object? | Which entities are defined as subcategories under Object, such as DoorBell? | What are the higher-level classes that DoorBell is associated with? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Furniture\nDescription: Furniture is defined as a subclass of Object, indicating that all pieces of furniture are considered objects. This classification positions furniture within a broader category of tangible entities that have physical presence, without specifying further characteristics or restrictions.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "Is Furniture classified under the broader category of Object? | Among the subclasses of Object, does Furniture appear as a member? | Which categories encompass Furniture as a more general class, including Object? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Glass\nDescription: Glass is defined as a subclass of Object, meaning it represents a specific kind of object within the ontology. No further restrictions or disjointness are specified, so any individual classified as Glass inherits all the properties of Object.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "Can Glass be classified as a kind of Object? | What entities are classified as specializations of Object, such as Glass? | Which higher-level categories include Glass within their hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: KitchenPress\nDescription: KitchenPress is defined as a subclass of Object, indicating that it represents a specific type of object within the ontology. No additional axioms or restrictions are specified, so individuals of this class inherit all properties of Object without further distinguishing characteristics.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "Is KitchenPress classified under the broader category of Object? | What higher-level groupings encompass KitchenPress within the ontology? | Which items fall under Object, specifically including KitchenPress? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Mop\nDescription: mop is defined as a subclass of Object. This means that every mop is considered to be an Object within the ontology, inheriting all characteristics associated with objects. There are currently no further restrictions or differentiating axioms specified for the mop class.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "Which items are categorized more specifically than Object, including Mop? | What broader categories encompass the concept of Mop? | Does Mop fall under the general classification of Object? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Plate\nDescription: Plate is defined as a subclass of Object. This means that every instance of Plate is also an instance of Object, inheriting all properties and characteristics associated with Object. No further restrictions or characteristics are specified for Plate beyond its classification as an Object.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "What broader classes include Plate as a member? | Which concepts fall under the category of Object, such as Plate? | Is Plate classified as a type of Object? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RemoteControl\nDescription: RemoteControl is defined as a subclass of Object, indicating that all remote controls are considered objects within the ontology. This class captures entities that serve as physical devices used to control other systems or appliances remotely. There are currently no additional property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "Which entities are defined as more specific types within the Object category, including RemoteControl? | To what higher-level classifications does RemoteControl belong? | Is RemoteControl classified under the broader class of Object? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Telephone\nDescription: Telephone is defined as a subclass of Object, establishing it as a specific type of object. No further restrictions or relationships are specified, so any individual classified as a Telephone is understood to be an object according to the current ontology.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "Does Telephone fall under the broader classification of Object? | What are the immediate parent classes of Telephone in the ontology? | Which specific subclasses are encompassed within Object, such as Telephone? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: WaterCan\nDescription: WaterCan is defined as a subclass of Object. This means every water can is formally recognized as an Object within the ontology. No additional axioms or property restrictions are specified, so WaterCan inherits all general characteristics of Object, serving as a specialized type of Object.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "To what broader categories does WaterCan belong within the ontology? | Is Object a generalization that includes WaterCan as a specific instance? | What items are considered more specific than Object, such as WaterCan? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Window\nDescription: Window is defined as a subclass of Object, indicating that every Window is an Object. No further distinguishing characteristics or constraints are specified beyond this general classification.\nAxiom: {'subClassOf': ['Object']}\nGenerated CQs:", "output": "What overarching categories does Window fit into? | Which entities fall under Object, including Window? | Is Window classified within the broader group of Object? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AnswerPhoneCall\nDescription: AnswerPhoneCall is defined as a subclass of TelephoneInteraction, indicating that it represents a specialized form of interaction involving telephones. Any individual classified as an AnswerPhoneCall inherently fulfills the characteristics and constraints of a TelephoneInteraction, but is specifically focused on the activity of answering a phone call.\nAxiom: {'subClassOf': ['TelephoneInteraction']}\nGenerated CQs:", "output": "What are the direct parent categories of AnswerPhoneCall? | Does AnswerPhoneCall fall under the general category of TelephoneInteraction? | Which specific types are encompassed by TelephoneInteraction, such as AnswerPhoneCall? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MakePhoneCall\nDescription: MakePhoneCall is defined as a subclass of TelephoneInteraction, indicating that it represents a specific type of interaction conducted via telephone. Any instance classified as MakePhoneCall necessarily inherits all characteristics of TelephoneInteraction, distinguishing itself as an interaction where a phone call is made.\nAxiom: {'subClassOf': ['TelephoneInteraction']}\nGenerated CQs:", "output": "What broader interaction types encompass MakePhoneCall within their classification? | Is every MakePhoneCall event classified under TelephoneInteraction? | Which specific interactions are categorized as subtypes of TelephoneInteraction, such as MakePhoneCall? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AtomicActivity\nDescription: AtomicActivity is defined as a subclass of Activity. This indicates that every AtomicActivity is an Activity, but it may possess more specific properties or constraints not captured at the Activity level. No additional axioms or restrictions are provided, so AtomicActivity serves as a specialized categorization within the broader class of activities.\nAxiom: {'subClassOf': ['Activity']}\nGenerated CQs:", "output": "Which types fall under Activity and encompass AtomicActivity as a subcategory? | What overarching types does AtomicActivity derive from within the ontology hierarchy? | Is AtomicActivity classified under the broader group of Activity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ComplexActivity\nDescription: ComplexActivity is defined as a subclass of Activity, meaning every ComplexActivity is an Activity. No additional property restrictions or disjointness axioms are specified, indicating that ComplexActivity inherits all characteristics of Activity but may represent more specialized or structured forms of activities.\nAxiom: {'subClassOf': ['Activity']}\nGenerated CQs:", "output": "Is ComplexActivity classified under the broader category of Activity? | What are the general categories that ComplexActivity falls under? | Which subclasses are encompassed within Activity, specifically including ComplexActivity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Bathroom\nDescription: Bathroom is defined as a subclass of Room, establishing that every bathroom is a specialized type of room. No additional axioms or property restrictions are specified, so its distinguishing characteristic is solely its classification within the broader category of rooms.\nAxiom: {'subClassOf': ['Room']}\nGenerated CQs:", "output": "What specific spaces are considered subclasses of Room, such as Bathroom? | Is Bathroom classified under the general category of Room? | Which broader categories include Bathroom as a more specific type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Bedroom\nDescription: Bedroom is defined as a subclass of Room, indicating that every instance of Bedroom is also an instance of Room. This classification structurally organizes Bedroom within the broader hierarchy of building spaces, emphasizing that a Bedroom inherits all general characteristics of a Room while potentially possessing more specific properties related to its intended use as a sleeping area.\nAxiom: {'subClassOf': ['Room']}\nGenerated CQs:", "output": "What higher-level categories encompass Bedroom according to the ontology? | Is Bedroom classified as a specific type within the broader concept of Room? | Which subcategories are present under the class Room, including Bedroom? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Kitchen\nDescription: Kitchen is defined as a subclass of Room, indicating that every kitchen is considered a type of room within an environment. No additional property restrictions or relationships are specified in the axiom, so the class primarily inherits general characteristics of rooms while denoting its specific use as a kitchen.\nAxiom: {'subClassOf': ['Room']}\nGenerated CQs:", "output": "What are the specific types that fall under Room, such as Kitchen? | Is Kitchen classified within the broader category of Room? | Which general categories include Kitchen as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LivingRoom\nDescription: LivingRoom is defined as a subclass of Room, representing a specific type of room within a structure. This classification indicates that every instance of LivingRoom is necessarily an instance of Room, inheriting all properties and constraints that apply to Room. No further distinguishing axioms or restrictions are present beyond this subclass relationship.\nAxiom: {'subClassOf': ['Room']}\nGenerated CQs:", "output": "What specific types fall under the broader category of Room, such as LivingRoom? | Which general categories encompass the concept of a LivingRoom? | Is every LivingRoom classified as a kind of Room? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Bed\nDescription: Bed is formally defined as a subclass of Furniture, indicating that every instance of Bed is also an instance of Furniture. This classification situates Bed within the broader category of items intended for furnishing interior spaces. No additional axioms or restrictions are specified.\nAxiom: {'subClassOf': ['Furniture']}\nGenerated CQs:", "output": "Does Bed fall under the category of Furniture? | What are the broader categories that the concept Bed is grouped under? | Which items are classified as subtypes of Furniture, including Bed? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Chair\nDescription: Chair is defined as a subclass of Furniture, indicating that every Chair is a type of Furniture. This formalization situates Chair within a broader hierarchy of household or office items intended for use and support. Without additional restrictions or properties, the class encompasses any object recognized as a Chair within the general category of Furniture.\nAxiom: {'subClassOf': ['Furniture']}\nGenerated CQs:", "output": "Is Chair categorized under broader classes such as Furniture? | What general classes encompass Chair within their classification hierarchy? | What items are classified as more specific types of Furniture, including Chair? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Couch\nDescription: Couch is defined as a subclass of Furniture, indicating that every couch is a type of furniture. No additional property, disjointness, or restriction axioms are specified, so the class inherits all general characteristics of furniture but is specifically dedicated to couches.\nAxiom: {'subClassOf': ['Furniture']}\nGenerated CQs:", "output": "To which broader classification does Couch belong in the context of furnishings? | Is Couch an instance within the general class of Furniture? | What are the direct subcategories of Furniture, including Couch? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Table\nDescription: Table is defined as a subclass of Furniture, meaning every instance of Table is also considered an instance of Furniture. No additional property restrictions or disjointness axioms are specified, so the class captures any furniture item that qualifies as a table within the ontology.\nAxiom: {'subClassOf': ['Furniture']}\nGenerated CQs:", "output": "Is Table classified under the broader category of Furniture? | What higher-level groups does Table belong to in the context of this ontology? | Which types fall under the category Furniture, including Table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: BedExit\nDescription: BedExit is defined as a subclass of ComplexActivity, indicating that it represents a type of complex action or event. Individuals belonging to this class participate in multifaceted activities related to the process of exiting a bed. The classification ensures that any instance of BedExit is recognized specifically as a form of ComplexActivity.\nAxiom: {'subClassOf': ['ComplexActivity']}\nGenerated CQs:", "output": "What higher-level activity categories include BedExit as a specialized instance? | Which activities are categorized as more specific forms of ComplexActivity, including BedExit? | Does BedExit fall under the broader classification of ComplexActivity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Fall\nDescription: Fall is defined as a subclass of ComplexActivity, indicating it is categorized as a type of complex activity. The current description notes that a fall occurs \"if not supported by LCS\" (likely referring to 'Lowering Control System' or a similar support mechanism), implying the event is characterized by the absence of this support during the occurrence. No disjointness or specific property restrictions have been asserted for this class.\nAxiom: {'subClassOf': ['ComplexActivity']}\nGenerated CQs:", "output": "Of which more general categories is Fall a constituent member? | Is Fall classified under the broader type of ComplexActivity? | What specific activities are categorized as subclasses of ComplexActivity, including Fall? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FoodAndDrinkConsumption\nDescription: FoodAndDrinkConsumption is defined as a subclass of ComplexActivity. This class represents activities that involve the intake or consumption of food and/or drink, and it inherits all characteristics of ComplexActivity. No further property restrictions or disjointness axioms are specified, so its definition is based solely on its placement in the activity hierarchy.\nAxiom: {'subClassOf': ['ComplexActivity']}\nGenerated CQs:", "output": "Does FoodAndDrinkConsumption fall under the classification of ComplexActivity? | To which broader activity types is FoodAndDrinkConsumption related? | Which activities are encompassed by ComplexActivity, including FoodAndDrinkConsumption? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Nap\nDescription: Nap is defined as a subclass of ComplexActivity, indicating that it is a type of complex activity within the ontology. As a ComplexActivity, a nap is considered to involve multiple components or steps beyond a simple action, distinguishing it from more basic activities. No further restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['ComplexActivity']}\nGenerated CQs:", "output": "What broader activities encompass Nap as a more specific subtype? | Is Nap categorized as an instance of ComplexActivity? | Which activities are considered subtypes under ComplexActivity, such as Nap? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NightSleep\nDescription: NightSleep is defined as a subclass of ComplexActivity, representing the entire sleep episode experienced during the night, including any relevant inferences or processes that occur throughout the sleep period. This class formalization associates NightSleep with complex activities and ensures its distinction by emphasizing the inclusion of all inferable events or activities occurring during sleep.\nAxiom: {'subClassOf': ['ComplexActivity']}\nGenerated CQs:", "output": "Is NightSleep categorized under the broader class of ComplexActivity? | What specific activities are classified as subclasses of ComplexActivity, including NightSleep? | Which overarching activity classes does NightSleep pertain to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PrepareDrink\nDescription: PrepareDrink is defined as a subclass of ComplexActivity, indicating that it represents a type of complex activity within the ontological model. Instances of PrepareDrink inherit all characteristics of ComplexActivity and specifically pertain to the processes and actions involved in preparing a drink. The class does not impose further restrictions or differentiators beyond its place in the activity hierarchy.\nAxiom: {'subClassOf': ['ComplexActivity']}\nGenerated CQs:", "output": "What general categories encompass the activity PrepareDrink? | Which activities are direct specializations of ComplexActivity, such as PrepareDrink? | Is PrepareDrink classified as a more specific activity under the broader ComplexActivity category? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PrepareMeal\nDescription: PrepareMeal is defined as a subclass of ComplexActivity, indicating that it represents a type of activity characterized by having multiple interrelated actions or steps. Any instance of PrepareMeal is therefore also an instance of ComplexActivity, situating meal preparation as a process that involves several coordinated activities.\nAxiom: {'subClassOf': ['ComplexActivity']}\nGenerated CQs:", "output": "To which higher-level classes does PrepareMeal belong? | Is PrepareMeal categorized as a type of ComplexActivity? | Which activities are direct subtypes of ComplexActivity, including PrepareMeal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SocialInteraction\nDescription: SocialInteraction is defined as a subclass of ComplexActivity. This specifies that every instance of SocialInteraction is a type of ComplexActivity, indicating that social interactions are considered to involve multiple, coordinated actions or processes. No further restrictions or elaborations are provided, so the class is characterized primarily by its inherited properties from ComplexActivity.\nAxiom: {'subClassOf': ['ComplexActivity']}\nGenerated CQs:", "output": "Which activities are specified as subtypes of ComplexActivity, including SocialInteraction? | Does SocialInteraction fall under the broader classification of ComplexActivity? | What are the more inclusive activity categories that encompass SocialInteraction? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TableExit\nDescription: TableExit is defined as a subclass of ComplexActivity, indicating that every TableExit is a specific type of ComplexActivity. No additional property restrictions, disjointness, or further subclass relations are specified, so individuals of the TableExit class inherit all the general characteristics and behaviors attributed to ComplexActivity. This class is currently characterized solely by its hierarchical relation within the ontology.\nAxiom: {'subClassOf': ['ComplexActivity']}\nGenerated CQs:", "output": "What general categories encompass TableExit as a specialized activity? | Which activities are direct or indirect subclasses of ComplexActivity, including TableExit? | Is TableExit classified under the broader category of ComplexActivity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Carer\nDescription: Carer is defined as a subclass of Person, indicating that every Carer is also a Person. No further axioms or property restrictions are specified, so a Carer inherits all characteristics of Person without additional differentiating features in this definition.\nAxiom: {'subClassOf': ['Person']}\nGenerated CQs:", "output": "Are all Carers considered instances of the broader category Person? | Which specific roles fall under the classification of Person, such as Carer? | To which general classes does Carer belong within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Clinician\nDescription: Clinician is defined as a subclass of Person, indicating that every clinician is a person. No further axioms or property restrictions are specified, so the class currently serves as a specialization of Person without additional constraints.\nAxiom: {'subClassOf': ['Person']}\nGenerated CQs:", "output": "Which subclasses fall under the category of Person, including Clinician? | Is Clinician categorized under the broader class of Person? | To which higher-level classes does Clinician belong within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Patient\nDescription: Patient is defined as a subclass of Person, representing individuals who are receiving or registered to receive medical care or treatment. Any individual designated as a Patient is inherently a Person.\nAxiom: {'subClassOf': ['Person']}\nGenerated CQs:", "output": "What specific categories, such as Patient, are encompassed under the Person class? | Within which broader classes is Patient hierarchically included? | Does Patient fall under the general classification of Person? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ChangeOrientation\nDescription: ChangeOrientation is defined as a subclass of AtomicActivity, indicating that it represents a specific, indivisible type of activity within the domain. While the current description provides a brief comment (\"WIMU\"), no detailed explanation is available. Based on its name and axiom, ChangeOrientation likely refers to an atomic activity where the orientation of an entity is altered.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Which specific activities are considered subtypes of AtomicActivity, such as ChangeOrientation? | Under which broader activity classification does ChangeOrientation fall? | Is ChangeOrientation categorized under AtomicActivity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ChangePosture\nDescription: ChangePosture is defined as a subclass of AtomicActivity, indicating it represents an elementary, indivisible activity within the ontology. While the current description only notes \"WIMU,\" this class structurally inherits all characteristics of AtomicActivity and is intended to capture specific activities related to posture changes.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Does ChangePosture fall under the broader classification of AtomicActivity? | What specific activities are included within the category of AtomicActivity, such as ChangePosture? | Which higher-level categories encompass ChangePosture in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DialNumber\nDescription: DialNumber is defined as a subclass of AtomicActivity. This means that every instance of DialNumber is also an instance of AtomicActivity. There are no further restrictions or disjointness axioms specified, so DialNumber inherits all characteristics of AtomicActivity without additional distinguishing features. This class is intended to represent the fundamental activity of dialing a number, which is atomic in nature within the modeled domain.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Which activities fall under the category of AtomicActivity, including DialNumber? | Is DialNumber regarded as a specific kind of AtomicActivity? | What broader activity classifications does DialNumber belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Drink\nDescription: Drink is defined as a subclass of AtomicActivity, indicating that it represents a fundamental activity that cannot be further decomposed into simpler actions. This class encompasses all actions entailing the act of consuming liquids, and inherits general properties and constraints from AtomicActivity.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Is Drink categorized under the broader class of AtomicActivity? | Which general activity types encompass Drink? | What specific activities are included within AtomicActivity, such as Drink? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Eat\nDescription: Eat is defined as a subclass of AtomicActivity, indicating that it represents a fundamental, indivisible activity within the ontology. Any instance of Eat must also be an instance of AtomicActivity. No further constraints or characteristics are specified.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Is Eat an instance of the more general class AtomicActivity? | Under which broader activity classes does Eat fall? | What other activities, alongside Eat, are classified as specializations of AtomicActivity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PhysicalActivity\nDescription: PhysicalActivity is defined as a subclass of AtomicActivity. This classification indicates that any instance of PhysicalActivity is also an instance of AtomicActivity, inheriting all its properties and constraints. PhysicalActivity, therefore, represents a specific kind of AtomicActivity, typically involving bodily movement or exertion. No other disjointness or additional property restrictions are specified for this class.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Which activities are more specific than AtomicActivity, including PhysicalActivity? | Is PhysicalActivity classified under the broader category of AtomicActivity? | To which higher-level categories does PhysicalActivity belong within the activity hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PickUpPhone\nDescription: PickUpPhone is defined as a subclass of AtomicActivity, indicating that it represents an indivisible, fundamental action within a larger process or workflow. This classification implies that PickUpPhone is treated as a single, non-decomposable activity in the ontology. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Is PickUpPhone classified under the broader group of AtomicActivity? | Into what higher-level categories is PickUpPhone organized? | Which activities are specified as subclasses of AtomicActivity, including PickUpPhone? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sleep\nDescription: Sleep is defined as a subclass of AtomicActivity, indicating that it represents a fundamental, indivisible type of activity within the given ontology. The current description (\"Gear 4 / DTI-2\") provides domain-specific or contextual labeling but does not further characterize the nature of Sleep. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Which activities are categorized under AtomicActivity, such as Sleep? | What broader activity categories include Sleep as a member? | Is Sleep classified as a specific kind of AtomicActivity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Speak\nDescription: Speak is defined as a subclass of AtomicActivity, indicating that it represents a specific, indivisible action within the ontology. Any instance of Speak is necessarily an AtomicActivity, but not all AtomicActivities are instances of Speak. No additional property restrictions or class relationships are specified for Speak in the current axiom.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Is Speak classified as a specific kind of AtomicActivity? | What distinct activities fall under the category of AtomicActivity, including Speak? | Which broader categories encompass the activity Speak? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: State\nDescription: State is defined as a subclass of AtomicActivity, indicating that every State represents an atomic (indivisible) activity within a given framework. This classification positions State as a fundamental unit of activity, inheriting all characteristics and constraints of AtomicActivity.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Which activity types fall under the general class of AtomicActivity, including State? | Is State classified as a specialized form of AtomicActivity? | What are the broader categories that encompass State? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: StepCounting\nDescription: StepCounting is defined as a subclass of AtomicActivity, indicating that it represents a specific, indivisible type of activity. The class is annotated with the comment \"WIMU,\" which may refer to its association with wearable inertial measurement unit systems, commonly used for tracking activity metrics such as steps. No further property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Is StepCounting a more specific form of AtomicActivity? | Which activities fall under the scope of AtomicActivity, such as StepCounting? | To what higher-level categories is StepCounting classified? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: UseObject\nDescription: UseObject is defined as a subclass of AtomicActivity, indicating that it represents a specific type of atomic activity within the ontology. By this axiom, all instances of UseObject inherit the general properties and constraints of AtomicActivity, situating UseObject as a more specialized activity focused on the usage of objects.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Which specific activities are categorized as subtypes of AtomicActivity, such as UseObject? | Is UseObject classified under AtomicActivity in the ontology? | To which broader activity classes does UseObject belong according to the ontology structure? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Walk\nDescription: Walk is defined as a subclass of AtomicActivity, indicating that walking is considered a fundamental unit of activity within the ontology. No additional property restrictions or disjointness axioms are specified, so Walk inherits all characteristics of AtomicActivity, serving to represent the act of walking as a basic type of activity.\nAxiom: {'subClassOf': ['AtomicActivity']}\nGenerated CQs:", "output": "Is Walk classified under the broader group of AtomicActivity? | Which more general category does Walk directly belong to? | What are the specific activities that fall under AtomicActivity, such as Walk? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Closed\nDescription: Closed is defined as a subclass of ObjectEvent, indicating that it represents a specific type of event involving an object. Any individual belonging to the class Closed is inherently classified as an ObjectEvent, inheriting all of its characteristics. No additional distinguishing restrictions or properties are specified for Closed beyond its relationship to ObjectEvent.\nAxiom: {'subClassOf': ['ObjectEvent']}\nGenerated CQs:", "output": "Which concepts are more specific instances of ObjectEvent, such as Closed? | What overarching categories encompass Closed within the ontology? | Is Closed classified under the broader category of ObjectEvent? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Off\nDescription: Off is defined as a subclass of ObjectEvent. This means every instance of Off is also an instance of ObjectEvent, inheriting all its properties and restrictions. The class Off is used to represent events where an object is turned off or ceases to be active. There are no further property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['ObjectEvent']}\nGenerated CQs:", "output": "Which broader event categories encompass Off? | Is Off classified as a specialization of ObjectEvent? | What specific types are included under ObjectEvent, such as Off? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: On\nDescription: On is defined as a subclass of ObjectEvent, meaning that all instances of On are specific types of ObjectEvent. This classification indicates that On inherits all characteristics of ObjectEvent, serving as a more specialized concept within the event hierarchy. No additional property restrictions or disjointness axioms are specified for On.\nAxiom: {'subClassOf': ['ObjectEvent']}\nGenerated CQs:", "output": "What specific events are classified as subclasses of ObjectEvent, such as On? | Which broader event classes include On as a subtype? | Is On categorized under ObjectEvent as a more specialized concept? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Open\nDescription: Open is defined as a subclass of ObjectEvent. This means that every instance of Open is also an instance of ObjectEvent, situating it within the broader context of events involving objects. No additional characteristics or constraints beyond its classification under ObjectEvent are specified.\nAxiom: {'subClassOf': ['ObjectEvent']}\nGenerated CQs:", "output": "What higher-level groupings include Open as a member? | Which instances are classified as subtypes of ObjectEvent, such as Open? | Does Open fall under the wider class of ObjectEvent? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ringing\nDescription: Ringing is defined as a subclass of ObjectEvent. This means that any instance of Ringing is also an instance of ObjectEvent, capturing events specifically characterized as ringing occurrences. No further restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['ObjectEvent']}\nGenerated CQs:", "output": "Does Ringing fall under the category of ObjectEvent? | What overarching categories is Ringing associated with? | Which events are considered more specific types within ObjectEvent, including Ringing? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cooker\nDescription: Cooker is defined as a subclass of Appliance. This class encompasses all appliances that are specifically designed for cooking functions, such as stoves, ovens, and similar equipment. Every instance of Cooker is, by definition, also an Appliance.\nAxiom: {'subClassOf': ['Appliance']}\nGenerated CQs:", "output": "What higher-level categories does Cooker belong to within the classification hierarchy? | Is Cooker classified under the broader group of Appliance? | Which types fall under the category of Appliance, specifically including Cooker? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Fridge\nDescription: Fridge is defined as a subclass of Appliance, indicating that every instance of Fridge is also an Appliance. This formalization groups fridges within the broader category of appliances, without imposing additional constraints or property restrictions specific to fridges.\nAxiom: {'subClassOf': ['Appliance']}\nGenerated CQs:", "output": "Which specific appliances include Fridge as a type? | To which broader categories is Fridge hierarchically related? | Does Fridge fall under the general classification of Appliance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Kettle\nDescription: Kettle is defined as a subclass of Appliance, indicating that every kettle is considered a type of appliance. Currently, there are no additional property restrictions or disjointness axioms specified for this class, so its definition is based solely on its classification as an appliance.\nAxiom: {'subClassOf': ['Appliance']}\nGenerated CQs:", "output": "Which higher-level classes does Kettle inherit from? | What specific types are categorized as subclasses of Appliance, such as Kettle? | Does Kettle fall under the broader grouping of Appliance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TV\nDescription: TV is defined as a subclass of Appliance. This means that every instance of TV is also considered an Appliance, inheriting all general characteristics of Appliances. No further restrictions, disjointness, or property constraints are specified.\nAxiom: {'subClassOf': ['Appliance']}\nGenerated CQs:", "output": "To which broader classes does TV belong within the ontology hierarchy? | Is TV categorized as a more specific type under Appliance? | Which appliances include TV as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: WashingMachine\nDescription: WashingMachine is defined as a subclass of Appliance, indicating that all washing machines are considered a type of appliance. No further restrictions or relationships are specified in the current axioms. This class is used to represent devices designed for cleaning laundry.\nAxiom: {'subClassOf': ['Appliance']}\nGenerated CQs:", "output": "Is WashingMachine classified as a type of Appliance? | What are the more general classes that WashingMachine is a member of? | Which categories encompass WashingMachine as a more specialized instance, including Appliance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cycling\nDescription: Cycling is defined as a subclass of OutdoorPhysicalActivity, meaning that it is classified as a type of physical activity that takes place outdoors. This formalization indicates that all instances of Cycling are also instances of OutdoorPhysicalActivity, inheriting its general characteristics.\nAxiom: {'subClassOf': ['OutdoorPhysicalActivity']}\nGenerated CQs:", "output": "Is Cycling classified as a specialized form of OutdoorPhysicalActivity? | Which specific activities fall under the category of OutdoorPhysicalActivity, such as Cycling? | What broader activity categories does Cycling fall under in this context? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Running\nDescription: Running is defined as a subclass of OutdoorPhysicalActivity, indicating that all instances of Running are considered outdoor physical activities. This formalization situates Running within the broader context of activities performed outdoors that involve physical exertion.\nAxiom: {'subClassOf': ['OutdoorPhysicalActivity']}\nGenerated CQs:", "output": "Is Running classified under the broader category of OutdoorPhysicalActivity? | What specific types fall under OutdoorPhysicalActivity, such as Running? | Which higher-level activity classes does Running belong to within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DangerousBedExit\nDescription: DangerousBedExit is defined as a subclass of BedExit. This indicates that every instance of DangerousBedExit is also an instance of BedExit, but captures those bed exit events that are specifically characterized as dangerous or high-risk. No further distinguishing axioms or property restrictions are specified beyond its position in the class hierarchy.\nAxiom: {'subClassOf': ['BedExit']}\nGenerated CQs:", "output": "What are the direct parent classes for DangerousBedExit in the ontology? | Is DangerousBedExit classified under the broader category of BedExit? | Which specific types fall under BedExit, including DangerousBedExit? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LongBedExit\nDescription: LongBedExit is defined as a subclass of BedExit. This indicates that every instance of LongBedExit is also an instance of BedExit, inheriting all characteristics and restrictions that apply to BedExit, while potentially having additional distinguishing properties or constraints specific to LongBedExit.\nAxiom: {'subClassOf': ['BedExit']}\nGenerated CQs:", "output": "What more specific types are included within BedExit, such as LongBedExit? | Does LongBedExit fall under the broader classification of BedExit? | Which general categories encompass LongBedExit in the hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NightRoomVisit\nDescription: NightRoomVisit is defined as a subclass of BedExit, indicating that every instance of NightRoomVisit is also a kind of BedExit. This class represents events where an individual exits their bed specifically for a room visit during the night, inheriting all the characteristics and properties of BedExit while providing a more specific context for nighttime occurrences.\nAxiom: {'subClassOf': ['BedExit']}\nGenerated CQs:", "output": "Which specific activities are categorized under BedExit, such as NightRoomVisit? | What broader event types encompass NightRoomVisit? | Are all NightRoomVisit instances considered examples of BedExit? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FaceToFaceInteraction\nDescription: FaceToFaceInteraction is a subclass of SocialInteraction, representing social interactions that occur when participants are physically present with each other. Individuals in this class engage in direct, co-located communication, distinguishing them from remote or mediated interactions.\nAxiom: {'subClassOf': ['SocialInteraction']}\nGenerated CQs:", "output": "In terms of broader classifications, what is the parent category for FaceToFaceInteraction? | Is every FaceToFaceInteraction categorized as a form of SocialInteraction? | Which specific interactions fall under SocialInteraction, such as FaceToFaceInteraction? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TelephoneInteraction\nDescription: TelephoneInteraction is defined as a subclass of SocialInteraction, indicating that it represents a specific type of social exchange occurring via telephone communication. Members of this class participate in interactions where the primary medium is a telephone, distinguishing them from other forms of social interaction such as face-to-face conversations or electronic messaging.\nAxiom: {'subClassOf': ['SocialInteraction']}\nGenerated CQs:", "output": "Which specific interactions are classified as types of SocialInteraction, including TelephoneInteraction? | What broader interaction categories encompass TelephoneInteraction within the ontology? | Is TelephoneInteraction categorized under the broader class of SocialInteraction? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HaveBreakfast\nDescription: HaveBreakfast is defined as a subclass of HaveMeal, indicating that every instance of HaveBreakfast is also an instance of HaveMeal. This class represents the specific act or event of having breakfast, distinguished from other types of meals by its subclass relationship. No additional constraints or disjointness axioms are specified.\nAxiom: {'subClassOf': ['HaveMeal']}\nGenerated CQs:", "output": "Which actions are considered specific types of HaveMeal, such as HaveBreakfast? | Under which broader activities does HaveBreakfast fall? | Is HaveMeal a more general class that includes HaveBreakfast? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HaveDinner\nDescription: HaveDinner is defined as a subclass of HaveMeal, meaning that every instance of HaveDinner is also an instance of HaveMeal. This class represents the specific type of meal event that occurs during dinner, distinguishing it from other meal occasions within the broader category of meals.\nAxiom: {'subClassOf': ['HaveMeal']}\nGenerated CQs:", "output": "Which specific activities are categorized under HaveMeal, such as HaveDinner? | What broader event types encompass HaveDinner? | Is HaveDinner classified as a type of HaveMeal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HaveLunch\nDescription: HaveLunch is defined as a subclass of HaveMeal, indicating that every instance of HaveLunch is also an instance of HaveMeal. This class represents activities or events specifically related to having lunch, distinguishing them from other types of meals. No additional restrictions or properties are imposed beyond this hierarchical relationship.\nAxiom: {'subClassOf': ['HaveMeal']}\nGenerated CQs:", "output": "Which meal-related activities are categorized as more specific types beneath HaveMeal, such as HaveLunch? | To what broader meal categories can HaveLunch be assigned? | Does HaveLunch fall under the classification of HaveMeal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HaveDrink\nDescription: HaveDrink is a subclass of FoodAndDrinkConsumption, representing events or actions where an individual consumes a beverage. Any instance of HaveDrink is, by definition, a specific type of food and drink consumption activity, emphasizing the act of drinking over eating.\nAxiom: {'subClassOf': ['FoodAndDrinkConsumption']}\nGenerated CQs:", "output": "Which specific actions fall under FoodAndDrinkConsumption, including HaveDrink? | Is HaveDrink categorized as a kind of FoodAndDrinkConsumption? | What broader classifications encompass HaveDrink? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HaveMeal\nDescription: HaveMeal is defined as a subclass of FoodAndDrinkConsumption, representing instances where an individual engages in the act of consuming food and drink. Members of this class inherit all characteristics and constraints attributed to food and drink consumption activities.\nAxiom: {'subClassOf': ['FoodAndDrinkConsumption']}\nGenerated CQs:", "output": "Is HaveMeal classified under the broader concept of FoodAndDrinkConsumption? | What specific activities are categorized as types of FoodAndDrinkConsumption, such as HaveMeal? | Which overarching groups does HaveMeal fall within in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HaveSnack\nDescription: HaveSnack is defined as a subclass of FoodAndDrinkConsumption, meaning any instance of HaveSnack is also an instance of FoodAndDrinkConsumption. This class represents events or activities where snacks are consumed, distinguishing it from other forms of food and drink consumption.\nAxiom: {'subClassOf': ['FoodAndDrinkConsumption']}\nGenerated CQs:", "output": "Which higher-level categories include HaveSnack within their classification? | What types of activities are more specific instances of FoodAndDrinkConsumption, such as HaveSnack? | Does HaveSnack fall under the category of FoodAndDrinkConsumption? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Outdoors\nDescription: Outdoors is defined as a subclass of InLocation, indicating that it represents a specific type of location. Any instance of Outdoors is by definition also an instance of InLocation, capturing places or areas that are external to buildings or structures. The class formalizes the concept of being in an open, outside environment.\nAxiom: {'subClassOf': ['InLocation']}\nGenerated CQs:", "output": "What broader location categories does Outdoors fall under? | Is Outdoors a more specific instance within the scope of InLocation? | Which locations are encompassed by InLocation, including Outdoors? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IndoorPhysicalActivity\nDescription: IndoorPhysicalActivity is defined as a subclass of PhysicalActivity. This class encompasses physical activities that are specifically performed indoors, distinguishing them from outdoor or unspecified-location activities. Any individual classified as IndoorPhysicalActivity is, by definition, a type of PhysicalActivity but is further characterized by its occurrence within indoor environments.\nAxiom: {'subClassOf': ['PhysicalActivity']}\nGenerated CQs:", "output": "What broader categories does IndoorPhysicalActivity belong to within the ontology? | Does IndoorPhysicalActivity fall under the classification of PhysicalActivity? | Which activities are classified as subtypes of PhysicalActivity, including IndoorPhysicalActivity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: OutdoorPhysicalActivity\nDescription: OutdoorPhysicalActivity is defined as a subclass of PhysicalActivity. This class encompasses all forms of physical activity that take place outdoors, distinguishing it from indoor activities. Members of this class inherit all characteristics of PhysicalActivity, but are specifically constrained by their outdoor context.\nAxiom: {'subClassOf': ['PhysicalActivity']}\nGenerated CQs:", "output": "Which subclasses classify under PhysicalActivity, such as OutdoorPhysicalActivity? | Does OutdoorPhysicalActivity fall under the category of PhysicalActivity? | What broader activity classifications encompass OutdoorPhysicalActivity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LongNap\nDescription: LongNap is defined as a subclass of Nap, representing nap instances with a duration longer than 30 minutes. This class is used to categorize naps that exceed the typical short duration, allowing formal distinction within the Nap hierarchy based on temporal length.\nAxiom: {'subClassOf': ['Nap']}\nGenerated CQs:", "output": "Is LongNap categorized as a type of Nap? | What broader groupings does LongNap fall under? | Which variations of Nap include LongNap as a specific instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NapAfterLunch\nDescription: NapAfterLunch is defined as a subclass of Nap, indicating that every instance of NapAfterLunch is also an instance of Nap. This class specifies naps that occur specifically after lunch, distinguishing them from naps taken at other times.\nAxiom: {'subClassOf': ['Nap']}\nGenerated CQs:", "output": "What kinds of Naps are defined, including NapAfterLunch? | Is NapAfterLunch categorized as a specific type of Nap? | Which broader classes encompass NapAfterLunch? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LongTableExit\nDescription: LongTableExit is defined as a subclass of TableExit. This means that every LongTableExit is a kind of TableExit, inheriting all properties and constraints of TableExit, and can be used wherever a TableExit is required. No further distinguishing characteristics or restrictions are specified for LongTableExit beyond this subclass relationship.\nAxiom: {'subClassOf': ['TableExit']}\nGenerated CQs:", "output": "To what broader categories does LongTableExit belong based on its classification? | Is LongTableExit classified as a more specific type under TableExit? | Which types are classified as subcategories of TableExit, such as LongTableExit? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Moving\nDescription: Moving is defined as a subclass of Active, indicating that all instances of Moving are also considered Active. This classification captures entities or processes characterized by being in a state of action or motion, forming a specific subset within the broader category of Active phenomena.\nAxiom: {'subClassOf': ['Active']}\nGenerated CQs:", "output": "What are the higher-level classes that encompass Moving? | Is Moving a more specific category under the broader class of Active? | Which subclasses are defined within the class Active, such as Moving? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NightBathroomVisit\nDescription: NightBathroomVisit is defined as a subclass of NightRoomVisit. This means every instance of NightBathroomVisit is also considered an instance of NightRoomVisit, specifying that the visit occurs during the night and takes place specifically in a bathroom. No additional restrictions or properties are provided.\nAxiom: {'subClassOf': ['NightRoomVisit']}\nGenerated CQs:", "output": "Which visit types are defined as more specific forms of NightRoomVisit, such as NightBathroomVisit? | To which overarching categories does NightBathroomVisit belong within the context of night-time visits? | Is NightBathroomVisit classified under the broader group of NightRoomVisit? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NightKitchenVisit\nDescription: NightKitchenVisit is defined as a subclass of NightRoomVisit. This means every NightKitchenVisit is a type of NightRoomVisit, inheriting all characteristics associated with NightRoomVisit, but specifically refers to visits to the kitchen that occur at night. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['NightRoomVisit']}\nGenerated CQs:", "output": "What general categories encompass NightKitchenVisit? | Which visit types fall under the broader classification of NightRoomVisit? | Is NightKitchenVisit a more specific form of NightRoomVisit? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NightLivingRoomVisit\nDescription: NightLivingRoomVisit is defined as a subclass of NightRoomVisit. This denotes that every instance of a NightLivingRoomVisit is also an instance of NightRoomVisit, typically representing visits to a living room that occur specifically during nighttime. No further property or disjointness constraints are specified in the current axioms.\nAxiom: {'subClassOf': ['NightRoomVisit']}\nGenerated CQs:", "output": "Is NightRoomVisit a more general category that includes NightLivingRoomVisit? | What broader classes does NightLivingRoomVisit fall under? | Which specific instances or subclasses are encompassed by NightRoomVisit? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Object\nDescription: Object is defined as a subclass of Entity. This relationship indicates that every instance of Object is also considered an Entity, inheriting all general characteristics associated with Entity. No other constraints or differentiating axioms are specified for Object.\nAxiom: {'subClassOf': ['Entity']}\nGenerated CQs:", "output": "What are all the subclasses categorized under Entity? | Is Object a specialized form of Entity? | Which general groupings does Object fall under within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Person\nDescription: Person is defined as a subclass of Entity, meaning every individual categorized as a Person is also considered an Entity. No additional property restrictions or disjointness axioms are specified, so the class Person serves as a general categorization for entities recognized as people.\nAxiom: {'subClassOf': ['Entity']}\nGenerated CQs:", "output": "Does the Person class fall under the more general Entity category? | What broader groupings encompass the Person class? | Which classes are direct specializations within the Entity category, such as Person? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Place\nDescription: Place is defined as a subclass of Entity, meaning every instance of Place is also an Entity. This class represents physical or conceptual locations or areas, but no further restrictions, relationships, or properties are currently specified.\nAxiom: {'subClassOf': ['Entity']}\nGenerated CQs:", "output": "Is every Place categorized under the broader class of Entity? | Which subclasses are defined within the Entity category, such as Place? | What general classes does the concept Place belong to in the ontology hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PrepareHotTea\nDescription: PrepareHotTea is defined as a subclass of PrepareDrink, indicating that it represents a specialized form of drink preparation activity. Any instance of PrepareHotTea is inherently an instance of PrepareDrink, specifically concerned with the preparation of hot tea. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['PrepareDrink']}\nGenerated CQs:", "output": "Which subclasses are defined under PrepareDrink, including PrepareHotTea? | What more general activity categories encompass PrepareHotTea? | Does PrepareHotTea belong to the set of activities classified as PrepareDrink? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Room\nDescription: Room is defined as a subclass of Place, indicating that every Room is a specific type of Place. This classification implies that all characteristics of Place are inherited by Room, allowing it to be used wherever a Place is referenced within the ontology. No additional restrictions or distinguishing axioms are specified for Room.\nAxiom: {'subClassOf': ['Place']}\nGenerated CQs:", "output": "Which higher-level categories encompass Room? | What are all subcategories defined within Place, such as Room? | Is Room classified under the broader category of Place? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SittingToStanding\nDescription: SittingToStanding is defined as a subclass of ChangePosture, representing the specific process or action in which an individual transitions from a sitting position to a standing position. As a more specialized posture change, every instance of SittingToStanding inherently qualifies as an instance of ChangePosture.\nAxiom: {'subClassOf': ['ChangePosture']}\nGenerated CQs:", "output": "Which posture change actions are categorized under ChangePosture, including SittingToStanding? | What general types or categories is SittingToStanding a more specific instance of? | Does SittingToStanding belong within the broader classification of ChangePosture? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: StandingToSitting\nDescription: StandingToSitting is defined as a subclass of ChangePosture. This class represents the action or process in which an individual moves from a standing position to a sitting position. All instances of StandingToSitting are, by definition, specific forms of posture change.\nAxiom: {'subClassOf': ['ChangePosture']}\nGenerated CQs:", "output": "Which general posture-changing categories include StandingToSitting as a member? | Is StandingToSitting an example of a specific type within the broader ChangePosture category? | What are the more specialized forms of ChangePosture, such as StandingToSitting? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Activity\nDescription: Activity is defined as a subclass of Event, representing occurrences or happenings that necessarily involve agents. Every instance of Activity must have at least one agent that is a Person and, in particular, must have exactly one Person as an agent. This ensures that any Activity is specifically characterized by the participation of one and only one Person as its agent.\nAxiom: {'subClassOf': ['Event'], 'propertyRestrictions': ['[hasAgent exactly 1 Person]', '[hasAgent only Person]']}\nGenerated CQs:", "output": "Must every Activity involve at least one Person as an agent? | Is it required for an Activity to have the property 'hasAgent' assigned to a Person? | Does the existence of an Activity necessarily imply the involvement of some Person through the 'hasAgent' relationship? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ObjectEvent\nDescription: ObjectEvent is defined as a subclass of Event. It is characterized by property restrictions specifying that it must have exactly one agent, and this agent must be an instance of Object. In other words, every ObjectEvent is an Event that is uniquely and explicitly associated with a single Object as its agent. This ensures that no ObjectEvent can exist without, or with more than one, Object agent.\nAxiom: {'subClassOf': ['Event'], 'propertyRestrictions': ['[hasAgent exactly 1 Object]', '[hasAgent only Object]']}\nGenerated CQs:", "output": "Is every ObjectEvent necessarily associated with at least one agent via the 'hasAgent' property? | Can an ObjectEvent exist without having some object linked as its agent through 'hasAgent'? | Does the occurrence of an ObjectEvent guarantee the involvement of an object as its agent? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AmbientMeasurement\nDescription: AmbientMeasurement is defined as a subclass of Measurement, representing measurements that specifically pertain only to Room. The property restriction ensures that any AmbientMeasurement instance exclusively refers to a Room, formalizing that ambient measurements are contextually bound to indoor environments such as rooms.\nAxiom: {'subClassOf': ['Measurement'], 'propertyRestrictions': ['[refersTo some Room]']}\nGenerated CQs:", "output": "Is it required that AmbientMeasurement refers exclusively to a Room? | Can AmbientMeasurement ever refer to an entity other than Room? | Are all entities referred to by AmbientMeasurement instances necessarily Rooms? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DoorClosed\nDescription: DoorClosed is defined as a subclass of Closed and is characterized by the restriction that it must have at least one agent that is a Door (hasAgent some Door). This means that DoorClosed instances represent situations or states in which something closed specifically involves a Door as the acting agent.\nAxiom: {'subClassOf': ['Closed'], 'propertyRestrictions': ['[hasAgent only Door]']}\nGenerated CQs:", "output": "Is it required that DoorClosed must have the hasAgent property associated with at least one Door? | Can DoorClosed occur without any Door being specified as an agent? | Does every instance of DoorClosed necessarily have a Door as its agent through the hasAgent property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SkinConductivity\nDescription: SkinConductivity is defined as a subclass of PhysiologicalMeasurement. Members of this class are characterized by the requirement that they possess exactly one value for the property hasConductivity, and this value must be a literal (such as a numerical measurement). This ensures that each instance of SkinConductivity represents a specific, literal-based conductivity measurement associated with physiological data.\nAxiom: {'subClassOf': ['PhysiologicalMeasurement'], 'propertyRestrictions': ['[hasConductivity exactly 1]', '[hasConductivity some rdfs:Literal]']}\nGenerated CQs:", "output": "Is SkinConductivity restricted to having only hasConductivity values that are literals? | Can SkinConductivity possess a hasConductivity value that is not an rdfs:Literal? | Must every hasConductivity relation for SkinConductivity point exclusively to an rdfs:Literal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NearObject\nDescription: NearObject is defined as a subclass of InLocation and is characterized by the property restriction that it must have at least one objectLocalisation relationship to an instance of Object. This means every NearObject instance is localized in space relative to some object, capturing the notion of proximity in an ontological context.\nAxiom: {'subClassOf': ['InLocation'], 'propertyRestrictions': ['[objectLocalisation only Object]']}\nGenerated CQs:", "output": "Is it required that a NearObject must have at least one object localisation relating to an Object? | Can every NearObject be associated with some instance of Object via the objectLocalisation property? | Does the NearObject class necessitate the existence of the objectLocalisation property connecting it to an Object? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LightLevel\nDescription: LightLevel is defined as a subclass of AmbientMeasurement. Every instance of LightLevel is required to have exactly one value for the property hasLightLevel, and this value must be of type rdfs:Literal. This ensures that each LightLevel measurement precisely captures a single ambient light value.\nAxiom: {'subClassOf': ['AmbientMeasurement'], 'propertyRestrictions': ['[hasLightLevel exactly 1]', '[hasLightLevel only rdfs:Literal]']}\nGenerated CQs:", "output": "Is it necessary for a LightLevel to have at least one value for the property 'hasLightLevel'? | Does every instance of LightLevel require association with some literal value through 'hasLightLevel'? | Can a LightLevel exist without being linked to any literal value by the 'hasLightLevel' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sitting\nDescription: Sitting is defined as a subclass of Posture, representing a specific body position. It is further characterized by a property restriction requiring that the object of sitting must be localized on some instance of Furniture. This means that every instance of Sitting involves an association with a piece of furniture, reflecting the typical context in which the sitting posture occurs.\nAxiom: {'subClassOf': ['Posture'], 'propertyRestrictions': ['[objectLocalisation only Furniture]']}\nGenerated CQs:", "output": "Is it necessary for a Sitting instance to have the objectLocalisation property linked to some Furniture? | Does every Sitting require at least one associated Furniture through the objectLocalisation property? | Can a Sitting exist without any objectLocalisation relation to Furniture? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Measurement\nDescription: Measurement is defined as a subclass of Event, representing occurrences that quantify some aspect of an entity. Each Measurement is formally restricted to refer to exactly one Entity (and only Entities) and must possess exactly one value (which must be of type rdfs:Literal). Additionally, every Measurement has a quality associated with it, and this quality must be a PhysicalQuality. These constraints ensure that a Measurement clearly and unambiguously describes a single, quantifiable property of a specific entity.\nAxiom: {'subClassOf': ['Event'], 'propertyRestrictions': ['[hasQuality only PhysicalQuality]', '[refersTo exactly 1 Entity]', '[hasValue exactly 1]', '[hasValue some rdfs:Literal]', '[refersTo only Entity]', '[hasQuality exactly 1 PhysicalQuality]']}\nGenerated CQs:", "output": "Must every Measurement have exactly one associated PhysicalQuality through the hasQuality property? | Is it possible for a Measurement to have more than one PhysicalQuality linked by the hasQuality relation? | Does the ontology restrict Measurement instances to relate via hasQuality to one and only one PhysicalQuality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PhoneRinging\nDescription: PhoneRinging is defined as a subclass of Ringing, indicating that every instance of PhoneRinging is also necessarily an instance of Ringing. There are no additional property restrictions specified, so the class is characterized solely by its place within the class hierarchy.\nAxiom: {'subClassOf': ['Ringing'], 'propertyRestrictions': ['[hasAgent some Telephone]']}\nGenerated CQs:", "output": "Is it required that each PhoneRinging event involves at least one agent that is a Telephone? | Can a PhoneRinging event occur without being associated with a Telephone agent through the hasAgent property? | Does the occurrence of PhoneRinging always necessitate a Telephone participating as the agent via hasAgent? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InLocation\nDescription: InLocation is a class whose instances are characterized by having a roomLocalisation relationship to at least one Room. This means that every individual belonging to InLocation must be associated with some Room via the roomLocalisation property. No other subclass or disjointness axioms are specified.\nAxiom: {'subClassOf': ['AtomicActivity'], 'propertyRestrictions': ['[roomLocalisation some Room]']}\nGenerated CQs:", "output": "Does every instance of InLocation represent a form of AtomicActivity? | What are the more specific activities classified under AtomicActivity, such as InLocation? | Which upper-level activity categories include InLocation as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HeartRate\nDescription: HeartRate is a class defined by the restriction that each individual must have exactly one value for the property hasRate, and that this value must be specified (i.e., there exists at least one hasRate value of type rdfs:Literal). This ensures that every instance of HeartRate is associated with a single, explicit rate value expressed as a literal.\nAxiom: {'subClassOf': ['PhysiologicalMeasurement'], 'propertyRestrictions': ['[hasRate exactly 1]', '[hasRate some rdfs:Literal]']}\nGenerated CQs:", "output": "Does HeartRate fall under the classification of PhysiologicalMeasurement? | Which specific measurements are recognized as subtypes of PhysiologicalMeasurement, including HeartRate? | What broader measurement categories encompass HeartRate? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InRoom\nDescription: InRoom is a class defined by the property restriction that its instances must have a roomLocalisation relationship to at least one instance of Place. This means any individual classified as InRoom is characterized by being associated with some Place through the roomLocalisation property, indicating its presence within a room or localized environment.\nAxiom: {'subClassOf': ['InLocation'], 'propertyRestrictions': ['[roomLocalisation some Place]']}\nGenerated CQs:", "output": "Does InRoom represent a more specific instance within the broader InLocation category? | What are the direct subclasses that fall under InLocation, such as InRoom? | Which higher-level categories encompass InRoom as a subcategory? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: KettleOn\nDescription: KettleOn is a class defined by the property restriction that any member must have at least one agent that is a Kettle. There are no specified superclasses. This means that every instance of KettleOn is characterized by being associated with at least one Kettle through the hasAgent property.\nAxiom: {'subClassOf': ['On'], 'propertyRestrictions': ['[hasAgent some Kettle]']}\nGenerated CQs:", "output": "Does KettleOn represent a specific instance within the broader class On? | Which situations classified as On also include KettleOn as a specialized case? | What general categories encompass KettleOn within the hierarchy of On? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Lying\nDescription: Lying is defined as a subclass of Posture, indicating that it represents a specific type of posture. There are no additional property restrictions specified for this class, so it inherits all general properties of posture without further constraints.\nAxiom: {'subClassOf': ['Posture'], 'propertyRestrictions': ['[objectLocalisation some Furniture]']}\nGenerated CQs:", "output": "Is it required that any instance of Lying must have an object localisation within some Furniture? | Can an Lying activity occur without involving the localisation of an object related to Furniture? | Does every Lying instance necessarily involve the localisation of an object that is classified as Furniture? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasAgent\nDescription: The property \"hasAgent\" has no explicitly defined domain, range, or special characteristics. It is a sub-property of \"owl:topObjectProperty,\" making it a generalized object property. The inverse property is specified as \"isAgentIn,\" indicating that \"hasAgent\" links entities to their associated agents, while \"isAgentIn\" expresses the reverse relationship.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "What is the ontological connection between the ‘hasAgent’ and ‘isAgentIn’ properties? | If entity A has an agent B, does this entail in the ontology that B is an agent in A? | Which property acts as the inverse of ‘hasAgent’ in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasNoiseLevel\nDescription: The property \"hasNoiseLevel\" inherits from the more general property \"hasValue\" and does not have explicitly defined characteristics, domain, or range restrictions. It is intended to associate an entity with its noise level, but the precise classes or datatypes involved are not restricted by axioms. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is hasNoiseLevel considered a subproperty of hasValue in the ontology? | Which properties are defined as subproperties under hasValue? | Does using hasNoiseLevel always entail the use of hasValue? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasValue\nDescription: The property \"hasValue\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. As specified by its axioms, no constraints are currently imposed on its use, so its purpose and applicable contexts are not restricted within the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'hasValue' be associated with any value, or is its range undefined? | Is it correct that the property 'hasValue' does not have any domain specified? | Is it accurate that the property 'hasValue' does not specify any range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: roomLocalisation\nDescription: The property \"roomLocalisation\" has no explicitly defined characteristics, domain, or range constraints, and is not specified as a sub-property or inverse of any other property. Based on its name, it is likely intended to associate entities with their location within a room, but no further semantic or structural restrictions are currently defined.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'roomLocalisation' has no specified domain? | What can be the range of the property 'roomLocalisation'? | Can 'roomLocalisation' be used with subjects of any class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: objectLocalisation\nDescription: The property \"objectLocalisation\" has no explicitly defined domain or range restrictions and no formally specified characteristics. It is not declared as a sub-property of any other property nor does it have an inverse property. Its intended use is not further described by the available axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of values can serve as the range for the property 'objectLocalisation'? | What entities can serve as the domain for the property 'objectLocalisation'? | Are there any classes that should not be used as the subject of 'objectLocalisation'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: isAgentIn\nDescription: The property \"isAgentIn\" has no explicitly specified domain, range, or characteristics. It is defined as a subproperty of owl:topObjectProperty, indicating it is a general object property without further restrictions. No inverse property is declared.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "Is isAgentIn categorized as a subproperty within the hierarchy of owl:topObjectProperty? | Is it correct that 'isAgentIn' does not specify a domain? | What entities can be the domain of the property 'isAgentIn'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: duration\nDescription: The property \"duration\" has no specified characteristics, domain, range, super-properties, or inverse property. It is a general property whose usage is not restricted to any particular class or value type in the current ontology specification.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'duration' be associated with values of any type as its range? | Should 'duration' be associated with any particular class as its domain? | Is it possible for the property 'duration' to have a specific domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: refersTo\nDescription: The property \"refersTo\" has no specified domain, range, characteristics, super-properties, or inverse properties. This indicates that it can be used to relate any two entities without formal restrictions. No additional description is provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'refersTo' does not have a specified domain? | What possible classes can be the domain of the property 'refersTo'? | Can anything serve as the range for the property 'refersTo', or should it be restricted? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasQuality\nDescription: The property \"hasQuality\" does not specify any explicit characteristics, domain, or range restrictions, nor does it define any super-properties or inverse properties. It is typically used to associate an entity with a quality, although no further constraints are currently imposed by its axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'hasQuality' be applied to subjects of any type, or is there an implicit restriction? | Is it correct that the property 'hasQuality' has no specified domain? | What types of values are permissible as the range for the property 'hasQuality'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: startTime\nDescription: The property \"startTime\" has no explicitly defined characteristics, domain or range restrictions, super-properties, or inverse properties. Its usage context and intended meaning are not further specified by current axioms. This property may be intended to capture the starting time of an event or process, but no formal constraints are applied.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What can be the range of the property 'startTime'? | Can 'startTime' be associated as a property of any entity type? | Is it correct that the property 'startTime' has no specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasRate\nDescription: The property \"hasRate\" has no specified characteristics, domain, or range constraints. It does not inherit from any super-properties and does not have an inverse property defined. This indicates that \"hasRate\" can be used flexibly between any types of entities without restriction.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasValue'], 'inverseOf': []}\nGenerated CQs:", "output": "Is hasValue a superproperty of hasRate? | Which subproperties are contained within hasValue? | Are all uses of hasRate implicitly instances of hasValue according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasLightLevel\nDescription: The property \"hasLightLevel\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. No further constraints or relationships are specified by the given axiom.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasValue'], 'inverseOf': []}\nGenerated CQs:", "output": "Is hasValue a superproperty of hasLightLevel? | Which properties are defined as subproperties of hasValue within the ontology? | Do all instances of hasLightLevel also satisfy the conditions of hasValue? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasConductivity\nDescription: The property \"hasConductivity\" does not have any explicitly defined characteristics, domain, range, super-properties, or inverse properties. Its usage and restrictions are not specified by the provided axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasValue'], 'inverseOf': []}\nGenerated CQs:", "output": "Does the presence of the hasConductivity property guarantee the presence of the hasValue property? | Which properties are defined as subproperties under hasValue within the ontology? | Is hasValue a direct superproperty of hasConductivity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasTemperature\nDescription: The property \"hasTemperature\" has no explicitly defined characteristics, domain, or range restrictions. It is not specified as a sub-property of any other property, nor does it have an inverse property. This suggests that \"hasTemperature\" can relate any two individuals or values without restriction.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasValue'], 'inverseOf': []}\nGenerated CQs:", "output": "Does the use of hasTemperature always entail the use of hasValue? | Is hasValue considered a superproperty of hasTemperature in the ontology? | Which subproperties fall under hasValue, including hasTemperature? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: return-parameter specification\nDescription: return-parameter specification is a subclass of specification, characterized by having at least one member that is a datatype and at least one associated identifier that qualifies as a parameter identifier. This formalization ensures that every return-parameter specification includes a datatype value and a means of uniquely identifying the parameter, which is essential for describing properties of parameters returned by functions or methods in structured data or APIs.\nAxiom: {'subClassOf': ['specification'], 'propertyRestrictions': ['[has_identifier some parameter identifier]']}\nGenerated CQs:", "output": "Is every return-parameter specification required to have at least one member of type datatype via the has_member property? | Can a return-parameter specification exist without being associated with any datatype through the has_member relation? | Does the ontology allow a return-parameter specification to have has_member only for datatype instances? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: excluding subtype generator\nDescription: excluding subtype generator is defined as a subclass of subtype generator, with the added restriction that it must have at least one member specified by the has_member property, where the member is of the type select-list. This means every instance of excluding subtype generator must be associated with at least one select-list through the has_member property, providing a mechanism for selecting or excluding specific subtypes via a list-based criteria.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some select-list]']}\nGenerated CQs:", "output": "Does excluding subtype generator fall under the category of subtype generator? | What specific subclasses are identified within subtype generator, apart from excluding subtype generator? | Which broader types does excluding subtype generator pertain to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: selection subtype generator\nDescription: selection subtype generator is defined as a subclass of subtype generator. Any instance of this class must have at least one member that is a select-list, enforced by the property restriction [has_member some select-list]. This ensures that selection subtype generators are specifically characterized by their association with select-list members, distinguishing them from other subtype generators.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some select-list]']}\nGenerated CQs:", "output": "Does selection subtype generator fall under the broader category of subtype generator? | What specific types are encompassed by subtype generator, including selection subtype generator? | Which higher-level categories include selection subtype generator as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled graph datatype\nDescription: labeled graph datatype is defined as a subclass of defined datatype, with the additional restriction that it must have at least one member produced by a directed labeled graph datatype generator. This means every labeled graph datatype is necessarily structured to include elements generated from a mechanism or process that produces directed labeled graph datatypes, distinguishing it from other defined datatypes that may lack this property.\nAxiom: {'subClassOf': ['defined datatype'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Must every labeled graph with propertyRestrictions have at least one has_member relation to a directed labeled graph datatype generator? | Is it required for any labeled graph with propertyRestrictions to be associated, via has_member, with a directed labeled graph datatype generator? | Can a labeled graph with propertyRestrictions exist without having the has_member property relating it to a directed labeled graph datatype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bag generator\nDescription: bag generator is defined as a subclass of homogenous unordered aggregate generator with variable size and is explicitly disjoint with set generator, indicating that an individual cannot be both a bag generator and a set generator. Members of this class are characterized by generating collections where items may have non-unique values (duplicates are permitted) and the way elements are accessed is implementation dependent. This ensures that bag generators support variable-sized, unordered aggregates allowing repeated elements, with element access properties not universally specified.\nAxiom: {'subClassOf': ['homogenous unordered aggregate generator with variable size'], 'disjointWith': [], 'propertyRestrictions': ['[has_quality some non-unique values]', '[has_quality some implementation dependent access]']}\nGenerated CQs:", "output": "How does the ontology differentiate between bag generators and set generators? | Is there any instance that can simultaneously belong to both bag generator and set generator classes? | Which classes are explicitly stated as disjoint with set generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record generator\nDescription: record generator is defined as a subclass of heterogenous aggregate generator and is explicitly disjoint with table datatype, ensuring that an individual cannot be both a record generator and a table datatype. Members of the record generator class must possess several qualities: they have a fixed size, are one-dimensional, form an unordered aggregate, support key access, and can contain non-unique values. This formalization captures the characteristic structure of a record generator, emphasizing its fixed, one-dimensional, unordered nature with keyed access and allowance for repeated values.\nAxiom: {'subClassOf': ['heterogenous aggregate generator'], 'disjointWith': [], 'propertyRestrictions': ['[has_quality some fixed size]', '[has_quality some one dimensional]', '[has_quality some unordered aggregate]', '[has_quality some key access]', '[has_quality some non-unique values]']}\nGenerated CQs:", "output": "What logical separation exists between the record generator and table datatype classes in the ontology? | Can an entity simultaneously be classified as both a record generator and a table datatype? | Which ontology classes are declared as disjoint with the table datatype class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous unordered aggregate generator with variable size\nDescription: homogenous unordered aggregate generator with variable size is a subclass of homogenous aggregate generator with variable size and is defined as being equivalent to either a bag generator or a set generator. Members of this class are characterized by having the quality of generating unordered aggregates, reflecting that the elements produced do not have intrinsic order. This ontology definition ensures that any homogenous unordered aggregate generator with variable size behaves as a variable-sized aggregate generator whose items are homogeneous and unordered, aligning with the behaviors of both bag generators and set generators.\nAxiom: {'subClassOf': [], 'equivalentClass': ['(bag generator or set generator)'], 'propertyRestrictions': ['[has_quality some unordered aggregate]']}\nGenerated CQs:", "output": "Does a homogenous unordered aggregate generator with variable size constitute a specific kind of homogenous aggregate generator with variable size? | Which aggregate generators with variable size fall under the category of homogenous aggregate generator with variable size, including homogenous unordered aggregate generator with variable size? | What broader aggregate generator classes encompass homogenous unordered aggregate generator with variable size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: table datatype\nDescription: table datatype is defined as a subclass of heterogenous aggregate datatype, and is explicitly disjoint with record (tuple) datatype, indicating that no instance can simultaneously belong to both classes. Members of the table datatype class are characterized by the following: they always have at least one table generator and a field-list as members; possess the qualities of being exact and non-numeric; and support several specific operations, including IsEmpty, MapToBag, Insert, Select, MapToTable, Delete, Fetch, and Serialize. This formalization distinguishes table datatype from other aggregate types, ensuring that it is uniquely identified by its supported operations, membership requirements, and data qualities.\nAxiom: {'subClassOf': ['heterogenous aggregate datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_member some table generator]', '[has_operation some IsEmpty:table]', '[has_operation some MapToBag:table]', '[has_operation some Insert:table]', '[has_operation some Select:table]', '[has_operation some MapToTable:table]', '[has_member some field-list]', '[has_quality some exact]', '[has_operation some Delete:table]', '[has_operation some Fetch:table]', '[has_operation some Serialize:table]', '[has_quality some non-numeric]']}\nGenerated CQs:", "output": "How is the relationship between table datatype and record (tuple) datatype defined in the ontology? | Is there any datatype that qualifies as both table datatype and record (tuple) datatype? | Which datatypes are explicitly specified as incompatible with record (tuple) datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: enumerated-value identifier\nDescription: enumerated-value identifier is a subclass of identifier, characterized by the restriction that its values must be associated (through the has-value property) with at least one literal value (rdfs:Literal). This formalization ensures that every enumerated-value identifier refers explicitly to a concrete literal value, distinguishing it from other identifiers that may not be directly tied to literal data.\nAxiom: {'subClassOf': ['identifier'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Are all enumerated-value identifiers required to have at least one property restriction with a value of type rdfs:Literal? | Is it necessary for every enumerated-value identifier to be associated with a property restriction whose value is a literal? | Does the presence of a property restriction with an rdfs:Literal value characterize all enumerated-value identifiers? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate-imposed identifier uniqueness\nDescription: aggregate-imposed identifier uniqueness is a subclass of aggregate generator property, and is explicitly disjoint with classes such as homogenity, aggregate size, uniqueness, component mandatoriness, structurness, recursiveness, and access type, ensuring mutual exclusivity with these notions. It is defined equivalently as a situation where an identifier may or may not be unique (identifier not unique or identifier unique), capturing precisely those cases where the uniqueness of identifiers is determined at the aggregate level rather than being strictly enforced or absent.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['homogenity', 'agregate size', 'uniqueness', 'component mandatoriness', 'structurness', 'recursiveness'], 'equivalentClass': ['(identifier not unique or identifier unique)']}\nGenerated CQs:", "output": "What is the formal differentiation between aggregate-imposed identifier uniqueness and access type in the ontology? | Is it allowable for an entity to be classified as both aggregate-imposed identifier uniqueness and access type? | Which other classes in the ontology are specified to be incompatible with access type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: agregate size\nDescription: aggregate size is a subclass of aggregate generator property and is formally equivalent to either fixed size or variable size, indicating that it refers to the characteristic of an aggregate having a specified or changeable quantity of components. It is explicitly disjoint with uniqueness, component mandatoriness, structurness, recursiveness, and access type, ensuring that no instance can simultaneously belong to these classes. This class is used to describe whether an aggregate maintains a constant number of elements or allows its size to vary.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['uniqueness', 'component mandatoriness', 'recursiveness', 'access type'], 'equivalentClass': ['(fixed size or variable size)']}\nGenerated CQs:", "output": "What logical separation is defined between agregate size and structurness in the ontology? | Is there any entity that can simultaneously possess agregate size and structurness? | Which classes within the ontology are explicitly incompatible with agregate size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: component mandatoriness\nDescription: component mandatoriness is defined as a subclass of aggregate generator property and is explicitly disjoint with structurness, recursiveness, and access type, ensuring no overlap among individuals of these classes. It is equivalent to the union of component mandatory and component non-mandatory, meaning every instance of component mandatoriness must be either component mandatory or component non-mandatory. This class categorizes aggregate generator properties by specifying whether a component is mandatory or not.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['recursiveness', 'access type'], 'equivalentClass': ['(component mandatory or component non-mandatory)']}\nGenerated CQs:", "output": "How does the ontology distinguish between component mandatoriness and structurness? | Is there any entity that can simultaneously possess both component mandatoriness and structurness? | Which concepts are defined as mutually exclusive with structurness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: recursiveness\nDescription: recursiveness is defined as a subclass of aggregate generator property, indicating it is a specific kind of property related to aggregate generators. It is explicitly disjoint with access type, meaning no entity can simultaneously be both an access type and exhibit recursiveness. Additionally, recursiveness is formally equivalent to either recursive or non-recursive, fully covering both possibilities as mutually exclusive characteristics within this context.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': [], 'equivalentClass': ['(recursive or non-recursive)']}\nGenerated CQs:", "output": "What differentiates recursiveness from access type according to the ontology? | Is it permissible for an entity to be classified as both recursiveness and access type? | Which ontology classes are shown as incompatible with access type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: generated datatype\nDescription: generated datatype is defined as a subclass of datatype and is explicitly disjoint with defined datatype, meaning no individual can be both a generated datatype and a defined datatype. Members of this class are further constrained by the property restriction that each generated datatype must have at least one member (has_member) that is a generated datatype generator. This formalization distinguishes generated datatypes from defined datatypes and ensures their association with specific generating mechanisms.\nAxiom: {'subClassOf': ['datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_member some generated datatype generator]']}\nGenerated CQs:", "output": "How does the ontology distinguish between generated datatype and defined datatype? | Is any entity allowed to be classified simultaneously as a generated datatype and a defined datatype? | Which datatypes are specified as being mutually exclusive with generated datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: alternative-type\nDescription: alternative-type is defined as a subclass of datatype role. Instances of this class must be the role of at least one datatype and must also be a member of some alternative component. This formalization ensures that alternative-type represents a specialized datatype role that is contextually linked both to specific datatypes and to alternative components.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[role_of some datatype]', '[is_member_of some alternative component]']}\nGenerated CQs:", "output": "Does alternative-type fall under the broader class of datatype role? | Which kinds of entities are recognized as subclasses of datatype role, and does that include alternative-type? | What are all the general categories (superclasses) that alternative-type is grouped within? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: parameter\nDescription: parameter is defined as a subclass of datatype role, representing entities that serve a specific function within a datatype context. Each parameter must be associated with some datatype (via the role_of property) and must have an identifier that is a member of the parameter identifier class. This ensures that every parameter is explicitly linked to the datatype it qualifies and is uniquely identified within the system.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[has_identifier some parameter identifier]']}\nGenerated CQs:", "output": "Is it necessary for parameter to have the property propertyRestrictions with some value that plays the role_of a specified datatype? | Can a parameter exist without propertyRestrictions relating to at least one instance of datatype through role_of? | Does every valid parameter exhibit propertyRestrictions to at least one entity classified as datatype by role_of? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: attribute component\nDescription: attribute component is defined as a subclass of datatype role, meaning each attribute component is a specific kind of datatype role. Additionally, attribute component instances are required to be associated with at least one attribute identifier through the has_identifier property. This ensures that every attribute component is uniquely identified by an attribute identifier.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_identifier some attribute identifier]']}\nGenerated CQs:", "output": "What broader categories encompass attribute component according to the ontology? | Which entities are more general than attribute component, including datatype role? | Are attribute component types always considered forms of datatype role? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boolean field-list\nDescription: boolean field-list is a subclass of field-list and is explicitly disjoint with discrete field-list, ensuring no instance can be both a boolean field-list and a discrete field-list. Every boolean field-list must include at least one member that is a boolean field component, establishing that the primary distinguishing feature of this class is the presence of boolean field components among its members.\nAxiom: {'subClassOf': ['field-list'], 'disjointWith': [], 'propertyRestrictions': ['[has_member some boolean field component]']}\nGenerated CQs:", "output": "How does the ontology differentiate boolean field-list from discrete field-list? | Is there a scenario where a field-list instance can be both boolean and discrete? | Which field-list types are declared as mutually exclusive with boolean field-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unlabeled dataset field-list\nDescription: unlabeled dataset field-list is a subclass of field-list, characterized by the axiom that its members must include at least one labeled dataset descriptive field component through the has_member property. This means any instance of unlabeled dataset field-list is a field-list that necessarily contains some labeled dataset descriptive field components.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some labeled dataset descriptive field component]']}\nGenerated CQs:", "output": "Is every unlabeled dataset field-list included under the general category of field-list? | What specific types of field-list include unlabeled dataset field-list as a subclass? | Which broader groupings encompass the unlabeled dataset field-list concept? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic operation\nDescription: dyadic operation is defined as a subclass of characterizing operation, and is disjoint with niladic operation, monadic operation, and n-adic operation, ensuring that no individual can be simultaneously classified as any of these mutually exclusive operation types. A dyadic operation is characterized by mapping a pair of values from a given datatype to either another value of the same datatype or to a Boolean value. This formalization supports the clear distinction and function of dyadic operations within the hierarchy of operation arities.\nAxiom: {'subClassOf': ['characterizing operation'], 'disjointWith': ['niladic operation', 'monadic operation']}\nGenerated CQs:", "output": "What is the ontological separation between dyadic operation and n-adic operation? | Is any mathematical operation classified as both a dyadic operation and an n-adic operation? | Which operation types are stated as disjoint with n-adic operation in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: niladic operation\nDescription: niladic operation is defined as a subclass of characterizing operation and is explicitly disjoint with both monadic operation and n-adic operation, ensuring that an operation cannot simultaneously belong to these classes. Niladic operations are characterized by yielding values of a given datatype, typically without requiring any input arguments.\nAxiom: {'subClassOf': ['characterizing operation'], 'disjointWith': ['n-adic operation']}\nGenerated CQs:", "output": "How are niladic operations and monadic operations conceptually differentiated within the ontology? | Is there any operation that can be classified as both niladic and monadic? | Which operation types are explicitly specified as incompatible with monadic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: monadic operation\nDescription: monadic operation is defined as a subclass of characterizing operation and is explicitly disjoint with n-adic operation, meaning an operation cannot be both monadic and n-adic. Monadic operations map a value of the given datatype to either another value of the same datatype or to a Boolean value, thus operating on a single input. This distinguishes monadic operations from n-adic operations, which take multiple inputs.\nAxiom: {'subClassOf': ['characterizing operation'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology formally distinguish between monadic operations and n-adic operations? | Is it permitted for an operation to be both monadic and n-adic simultaneously within the ontology framework? | Which types of operations are specified as being mutually exclusive with n-adic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: enumerated-value-list\nDescription: enumerated-value-list is defined as a subclass of list specification, with the defining property that it must have at least one member that is an enumerated-value identifier. This means any instance of enumerated-value-list is a list specification characterized by containing one or more explicitly enumerated values as its members.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is every member in an enumerated-value-list required to have at least one enumerated-value identified by the 'has_member' property? | Can an enumerated-value-list contain an element that does not meet the identifier criteria via 'has_member'? | Does the definition of enumerated-value-list ensure the inclusion of only those values that are explicitly connected through 'has_member' to a recognized enumerated-value identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tree datatype generator\nDescription: tree datatype generator is defined as a subclass of directed labeled graph datatype generator, meaning it inherits all structural properties of directed labeled graphs. Additionally, it is explicitly disjoint with DAG datatype generator, indicating that no datatype generator can be both a tree and a directed acyclic graph (DAG) generator at the same time. This class represents datatype generators that output trees, which are specialized directed labeled graphs, ensuring a clear distinction from generators that produce more general acyclic structures.\nAxiom: {'subClassOf': ['directed labeled graph datatype generator'], 'disjointWith': []}\nGenerated CQs:", "output": "What is the ontological distinction between tree datatype generators and DAG datatype generators? | Is there any entity categorized under both tree datatype generator and DAG datatype generator? | Which classes are declared as disjoint with DAG datatype generator in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real datatype\nDescription: real datatype is defined as a subclass of numeric ordered primitive datatype and is explicitly disjoint with both integer datatype and rational datatype, ensuring that no individual can be simultaneously classified as a real datatype and either of those classes. Members of this class support a range of operations, including addition (Add), multiplication (Multiply), negation (Negate), reciprocals (Reciprocal), equality comparison (Equal), order comparison (InOrder), and type promotion (Promote), all among real values. Instances of real datatype possess qualities of being unbounded and approximate, distinguishing them from other numeric types. They also include members such as real radix and real factor, further characterizing the structure and application of real datatypes.\nAxiom: {'subClassOf': ['numeric ordered primitive datatype'], 'disjointWith': ['rational datatype'], 'propertyRestrictions': ['[has_operation some Multiply:real]', '[has_quality some approximate]', '[has_operation some Negate:real]', '[has_member some real radix]', '[has_quality some unbounded]', '[has_operation some Reciprocal:real]', '[has_operation some InOrder:real]', '[has_operation some Add:real]', '[has_operation some Promote:real]', '[has_operation some Equal:real]', '[has_member some real factor]']}\nGenerated CQs:", "output": "How does the ontology differentiate between real datatype and integer datatype? | Is there any datatype that can belong to both real and integer datatypes concurrently? | Which datatypes are explicitly marked as incompatible with integer datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-aggregate generator\nDescription: non-aggregate generator is defined as a subclass of generated datatype generator, and is explicitly disjoint from defined generator, aggregate datatype, and aggregate generator. Every non-aggregate generator is equivalent to being either a choice generator, pointer generator, or procedure generator. This class groups generator types that are not aggregate in nature, thereby excluding those that represent defined, aggregate, or aggregate-related generator functionalities.\nAxiom: {'subClassOf': ['generated datatype generator'], 'disjointWith': ['defined generator', 'aggregate datatype'], 'equivalentClass': ['(choice generator or pointer generator or procedure generator)']}\nGenerated CQs:", "output": "What logical separation is formalized between non-aggregate generators and aggregate generators in the ontology? | Is any device allowed to be classified as both a non-aggregate generator and an aggregate generator simultaneously? | Which generator types, other than aggregate generators, are specified to be disjoint with non-aggregate generators? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: numericalness\nDescription: numericalness is a subclass of datatype property that classifies properties as either numeric or non-numeric. It is formally specified to be equivalent to the union of numeric and non-numeric, meaning all members must belong to one of these two categories. Additionally, numericalness is explicitly disjoint with cardinality, order, boundedness, and equality, ensuring these property types are mutually exclusive and no property can simultaneously belong to both numericalness and any of these other classes. This class captures the essential distinction between properties based on their numerical character.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['cardinality', 'order', 'equality'], 'equivalentClass': ['(numeric or non-numeric)']}\nGenerated CQs:", "output": "How does the ontology differentiate between numericalness and boundedness? | Is it allowed for an entity to possess both numericalness and boundedness simultaneously? | Which classes are explicitly marked as disjoint with boundedness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: order\nDescription: order is defined as a subclass of datatype property, meaning it is a specific kind of property whose value is a data value (as opposed to an object property). It is explicitly disjoint from the classes boundedness and equality, ensuring that no property instance can simultaneously be classified under these categories. Furthermore, order is equivalent to the union of ordered and non-ordered, indicating that any property that falls under the order class must be characterized as either ordered or non-ordered, and these two subclasses exhaust all possibilities for order. This structure formally differentiates order-related properties from those related to boundedness or equality.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['equality'], 'equivalentClass': ['(ordered or non-ordered)']}\nGenerated CQs:", "output": "What logical constraint separates order from boundedness within the ontology? | Is any entity allowed to belong to both order and boundedness categories simultaneously? | Which other concepts are formally specified as disjoint with boundedness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete field component\nDescription: discrete field component is a subclass of primitive field component and is explicitly disjoint with both real field component and boolean field component, ensuring that no individual can be classified as more than one of these types. Members of this class are characterized by their relationship to discrete datatypes, as every discrete field component must play the role of some discrete datatype. This formalization distinguishes discrete field components from other primitive field components based on their association with discrete data.\nAxiom: {'subClassOf': ['primitive field component'], 'disjointWith': ['real field component'], 'propertyRestrictions': ['[role_of some discrete datatype]']}\nGenerated CQs:", "output": "How does the ontology express the separation between discrete field components and boolean field components? | Is any field component allowed to be both a discrete field component and a boolean field component? | Which classes are identified as mutually exclusive to discrete field components? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: choice datatype\nDescription: choice datatype is a subclass of non-aggregate datatype, characterized by having values that represent a single value selected from a set of alternative datatypes. These alternative datatypes are differentiated by their correspondence to values from a tag-type, known as the tag datatype. Formally, a choice datatype has members such as tag-type, alternative-list, and a choice generator; it is subject to property restrictions requiring qualities such as exactness and being non-ordered. It supports specific operations, including Discriminant:choice, Tag:choice, Cast:choice, and Equal:choice, which facilitate the selection and identification of alternatives by tag values.\nAxiom: {'subClassOf': ['non-aggregate datatype'], 'propertyRestrictions': ['[has_quality some exact]', '[has_operation some Discriminant:choice]', '[has_quality some non-ordered]', '[has_operation some Tag:choice]', '[has_operation some Cast:choice]', '[has_operation some Equal:choice]', '[has_member some alternative-list]', '[has_member some choice generator]']}\nGenerated CQs:", "output": "Is every instance of 'choice' required to have at least one 'has_member' relationship to a 'tag-type'? | Can a 'choice' exist without being associated with any 'tag-type' via 'has_member'? | Does the ontology stipulate that 'choice' entities necessarily feature at least one 'has_member' link to a 'tag-type' entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DAG datatype\nDescription: DAG datatype is specified as a subclass of labeled graph datatype, meaning it inherits all characteristics of a labeled graph datatype. Additionally, every DAG datatype must have at least one member that is a DAG datatype generator, as indicated by the property restriction [has_member some DAG datatype generator]. This ensures each instance of DAG datatype is associated with a generator tailored for directed acyclic graph structures.\nAxiom: {'subClassOf': ['labeled graph datatype'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Must a DAG datatype always have at least one 'has_member' relationship with a DAG datatype generator? | Can a DAG datatype exist without being associated to any DAG datatype generator through the 'has_member' property? | Is the presence of a 'has_member' link to a DAG datatype generator necessary for every DAG datatype instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: lower bound\nDescription: lower bound is defined as a subclass of bound, representing a specific type of bound that is associated with exactly one integer value via the has-value property. This restriction ensures that each lower bound instance is uniquely identified by a single integer.\nAxiom: {'subClassOf': ['bound'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is there a requirement that lower bound has exactly one propertyRestriction with a value of type xsd:integer? | Can an instance of lower bound have more than one propertyRestriction with a value of type xsd:integer? | Is it possible for lower bound to have no propertyRestriction with a value of type xsd:integer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index lowerbound\nDescription: index lowerbound is a subclass of bound, representing a specific type of boundary. It is characterized by the property restriction that it must have exactly one value of type xsd:integer, indicating the precise lower limit or starting point within an index or range. This formalization ensures that each instance of index lowerbound uniquely defines a single integer value as its boundary.\nAxiom: {'subClassOf': ['bound'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is each instance of index required to have the property lowerbound with exactly one integer value? | Can an index possess more than one lowerbound value assigned as an integer? | Is it necessary that the lowerbound property of index refers to one and only one xsd:integer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: generated datatype generator\nDescription: generated datatype generator is defined as a subclass of datatype generator and is considered equivalent to either a non-aggregate generator or an aggregate generator. Members of this class must be associated, via the is_member_of property, with some generated datatype. The class is also described by the synonym \"datatype constructor.\"\nAxiom: {'subClassOf': ['datatype generator'], 'equivalentClass': ['(non-aggregate generator or aggregate generator)'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is it required that an entity classified under 'generated datatype' must be a member of at least one 'generated datatype' instance? | Does every instance of 'generated datatype' participate in the 'is_member_of' relationship with some instance of 'generated datatype'? | Can a 'generated datatype' exist without being linked via 'is_member_of' to any other 'generated datatype'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: integer base datatype\nDescription: integer base datatype is defined as a subclass of base type and is constrained by the axiom that it must play the role of some integer datatype. This means that every instance of integer base datatype is a specific kind of base type that is characterized by being related to at least one integer datatype through the role_of property.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[role_of some integer datatype]']}\nGenerated CQs:", "output": "Is integer base datatype categorized under the broader base type classification? | Which datatypes are more specific than base type, such as integer base datatype? | To which higher-level types does integer base datatype conceptually pertain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record of real datatype\nDescription: record of real datatype is defined as a subclass of record (tuple) datatype, and is explicitly disjoint with record of discrete datatype, ensuring that no individual can belong to both categories. Members of this class are characterized by the presence of at least one member field (has_member) that is of real type within its field-list. This constrains records in this class to contain real-valued data fields, distinguishing them from records composed entirely of discrete datatypes.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_member some real field-list]']}\nGenerated CQs:", "output": "How does the ontology differentiate between records of real datatype and records of discrete datatype? | Is there any instance that can be considered both a record of real datatype and a record of discrete datatype? | Which other record types are formally specified as disjoint with records of discrete datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled dataset record datatype\nDescription: labeled dataset record datatype is defined as a subclass of record (tuple) datatype. Each instance must have exactly one member, specified by the has_member property, which must be a labeled dataset field-list. This ensures that every labeled dataset record datatype represents a tuple structure with a precisely defined schema for its contents.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is it required that a labeled dataset record contains exactly one has_member property referring to a labeled dataset field-list? | Can a labeled dataset record be associated with more than one labeled dataset field-list via has_member? | Does a labeled dataset record exist if it lacks the has_member relationship with a labeled dataset field-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set of integer datatype\nDescription: set of integer datatype is defined as a subclass of set datatype. Each instance of this class is constrained by the requirement that it has members, all of which are from the integer base datatype. This ensures that any individual classified as set of integer datatype can only contain integers as its elements.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some integer base datatype]']}\nGenerated CQs:", "output": "Is set datatype a broader category that encompasses set of integer datatype? | Which datatypes are more specific than set datatype, such as set of integer datatype? | What general datatype groupings include set of integer datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: enumerated datatype\nDescription: enumerated datatype is defined as a subclass of non-numeric ordered primitive datatype, and is explicitly disjoint with both date and time datatype and ordinal datatype. As a discrete (synonymously, enumerated) datatype, it is characterized by having an explicit set of member values (enumerated-value-list) and supports specific operations such as equality checking (Equal:enumerated), successor determination (Successor:enumerated), and ordered comparison (InOrder:enumerated). Additionally, every enumerated datatype must possess qualities of being bounded (having finite limits) and exact (precisely defined), ensuring it only allows selection from a strictly defined, ordered set of non-numeric values.\nAxiom: {'subClassOf': ['non-numeric ordered primitive datatype'], 'disjointWith': ['ordinal datatype'], 'propertyRestrictions': ['[has_operation some Equal:enumerated]', '[has_member some enumerated-value-list]', '[has_operation some Successor:enumerated]', '[has_quality some bounded]', '[has_operation some InOrder:enumerated]', '[has_quality some exact]']}\nGenerated CQs:", "output": "What is the formal distinction between the enumerated datatype and the date and time datatype within the ontology? | Is it allowed for a datatype to be classified as both enumerated and date and time? | Which datatypes are explicitly set as disjoint with the date and time datatype in this model? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: size\nDescription: size is defined as a subclass of value expression, representing a value-based concept within the ontology. Members of the size class are characterized by having exactly one associated value of type xsd:integer through the has-value property. This means each individual of size must specify a single integer value, reflecting the quantitative measurement that the class is intended to capture.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has-value exactly 1 xsd:integer]']}\nGenerated CQs:", "output": "Is size categorized under value expression? | What broader category encompasses size in this ontology? | Which more specific concepts are grouped as subtypes of value expression, such as size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: extended datatype\nDescription: extended datatype is defined as a subclass of data representational model. It is characterized by possessing at least one datatype property (has_quality some datatype property), at least one subtype generator as a member (has_member some subtype generator), at least one value space attribute (has_attribute some value space), and at least one base type as a member (has_member some base type). The class is also associated with the synonym \"subtype\". This formalization ensures that any instance of extended datatype is richly described in terms of qualities, generative subtypes, value domains, and derived from fundamental base types.\nAxiom: {'subClassOf': ['data representational model'], 'propertyRestrictions': ['[has_quality some datatype property]', '[has_member some subtype generator]', '[has_member some base type]']}\nGenerated CQs:", "output": "Is every instance with the 'extended datatype propertyRestrictions' required to have at least one 'has_attribute' in the value space? | Can something classified under 'extended datatype propertyRestrictions' exist without possessing the 'has_attribute' property associated with any value space? | Does the existence of 'has_attribute' with any value from the specified space determine membership in 'extended datatype propertyRestrictions'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence of discrete datatype\nDescription: sequence of discrete datatype is defined as a subclass of sequence datatype, meaning it inherits all characteristics associated with sequence datatypes. Individuals of this class are further characterized by the property that each member of the sequence must be of a discrete base type. This restriction ensures that only elements classified as discrete base types are permitted as members in such sequences, differentiating this class from more general sequence datatypes that may include other types of elements.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some discrete base type]']}\nGenerated CQs:", "output": "Is sequence of discrete datatype classified as a kind of sequence datatype? | Which datatypes are more specific instances under the category of sequence datatype? | To which higher-level datatype categories does sequence of discrete datatype belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous  unordered aggregate datatype with variable size\nDescription: homogenous unordered aggregate datatype with variable size is a subclass of homogenous aggregate datatype with variable size. Each instance of this class must have at least one member that is an instance of homogenous unordered aggregate generator with variable size. This class groups together collections of elements that are all of the same type, where the order of elements is not significant, and the number of elements may vary.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some homogenous unordered aggregate generator with variable size]']}\nGenerated CQs:", "output": "Does every homogenous unordered aggregate datatype with variable size fall under the classification of homogenous aggregate datatype with variable size? | Which aggregate datatypes with variable size encompass homogenous unordered variants as specific types? | What are the more general datatype categories that include homogenous unordered aggregate datatype with variable size as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: node component\nDescription: node component is defined as a subclass of graph aggregate component and is explicitly disjoint with edge component, meaning an individual cannot simultaneously be a node component and an edge component. This class represents components within a graph structure that function as nodes, distinct from components serving as edges.\nAxiom: {'subClassOf': ['graph aggregate component'], 'disjointWith': []}\nGenerated CQs:", "output": "What is the formal distinction between node component and edge component within the ontology? | Is there any entity that can simultaneously be classified as both node component and edge component? | Which other classes are specified as disjoint with edge component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: void datatype\nDescription: void datatype is a subclass of primitive datatype and is explicitly disjoint from non-numeric primitive datatype, numeric primitive datatype, and non-numeric unordered primitive datatype—no individual can belong to more than one of these categories. Members of the void datatype class are characterized by supporting at least the Equal:void operation, meaning comparison for equality is defined. This class formalizes the concept of a primitive datatype that does not represent numeric or non-numeric unordered values, distinguishing it within datatype hierarchies.\nAxiom: {'subClassOf': ['primitive datatype'], 'disjointWith': ['non-numeric primitive datatype', 'numeric primitive datatype'], 'propertyRestrictions': ['[has_operation some Equal:void]']}\nGenerated CQs:", "output": "How does the ontology differentiate between void datatypes and non-numeric unordered primitive datatypes? | Is there any datatype that can simultaneously be classified as both a void datatype and a non-numeric unordered primitive datatype? | Which additional datatypes are defined as mutually exclusive with non-numeric unordered primitive datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous aggregate generator\nDescription: homogenous aggregate generator is defined as a subclass of aggregate generator and is equivalent to any generator that is an array generator, bag generator, sequence generator, or set generator. It is explicitly disjoint with heterogenous aggregate generator, meaning that no individual can belong to both classes simultaneously. Members of this class are further characterized by the property restriction that they must have at least one quality that is homogenous, indicating that the elements they generate are of a uniform type or nature.\nAxiom: {'subClassOf': ['aggregate generator'], 'disjointWith': [], 'equivalentClass': ['(array generator or bag generator or sequence generator or set generator)'], 'propertyRestrictions': ['[has_quality some homogenous]']}\nGenerated CQs:", "output": "What is the nature of the disjointness between homogenous aggregate generators and heterogenous aggregate generators? | Is it permissible for an entity to be classified as both a homogenous aggregate generator and a heterogenous aggregate generator? | Which types of generators are explicitly defined as disjoint with homogenous aggregate generators within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-numeric ordered primitive datatype\nDescription: non-numeric ordered primitive datatype is a subclass of non-numeric primitive datatype. Members of this class are characterized by possessing the quality of being ordered, meaning their values can be arranged in a specific sequence or order. This formalization specifies that any non-numeric primitive datatype classified here must inherently support order among its instances.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_quality some ordered]']}\nGenerated CQs:", "output": "Is every non-numeric ordered primitive datatype encompassed within the category of non-numeric primitive datatype? | Which datatypes are classified as specializations under non-numeric primitive datatype, such as non-numeric ordered primitive datatype? | To which broader datatype categories does non-numeric ordered primitive datatype belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: direct access property\nDescription: direct access property is a subclass of access type and is disjoint with indirect access property, meaning no property can be both a direct access property and an indirect access property. It is formally defined as being equivalent to either index access or key access, specifying that any direct access property allows retrieval via a direct key or index rather than through intermediary steps.\nAxiom: {'subClassOf': ['access type'], 'disjointWith': [], 'equivalentClass': ['(index access or key access)']}\nGenerated CQs:", "output": "Is any property classified as both a direct access property and an indirect access property within the ontology? | Which properties are explicitly specified as disjoint with indirect access properties? | What is the ontological distinction between direct access property and indirect access property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bounded above\nDescription: bounded above is defined as a subclass of bounded, representing objects or sets that possess an upper bound. It is explicitly disjoint with bounded below, ensuring no individual can simultaneously be both bounded above and bounded below. This means any member of this class is characterized by having an upper bound but not a lower bound within the context of the ontology.\nAxiom: {'subClassOf': ['bounded'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology differentiate between entities that are bounded above and those that are bounded below? | Is an entity permitted to belong simultaneously to both the bounded above and bounded below categories? | Which classes, apart from bounded above, are specified as disjoint with bounded below within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unbounded above\nDescription: unbounded above is defined as a subclass of unbounded, representing entities that do not have an upper bound. It is explicitly disjoint with unbounded below, ensuring that no individual can simultaneously be both unbounded above and unbounded below. This class characterizes those entities that lack an upper limit but may or may not have a lower bound.\nAxiom: {'subClassOf': ['unbounded'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology establish separation between unbounded above and unbounded below? | Is any entity classified as both unbounded above and unbounded below within the ontology? | Which classes are defined as mutually exclusive with unbounded above? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bounded\nDescription: bounded is defined as a subclass of boundedness, representing entities that possess the property of being bounded. It is explicitly disjoint with unbounded, ensuring that no individual can be simultaneously classified as both bounded and unbounded. This classification enforces a strict separation between bounded and unbounded entities within the ontology.\nAxiom: {'subClassOf': ['boundedness'], 'disjointWith': []}\nGenerated CQs:", "output": "What is the nature of the distinction between bounded and unbounded entities within the ontology? | Is it permissible for a concept to be classified as both bounded and unbounded simultaneously? | Which classes are formally specified as incompatible with the concept of bounded? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: approximate\nDescription: approximate is defined as a subclass of exactness, meaning it represents a kind or degree of exactness. It is explicitly disjoint with exact, so no individual can simultaneously be both approximate and exact. This class formalizes the notion of approximation as distinct from strict exactness within the ontology.\nAxiom: {'subClassOf': ['exactness'], 'disjointWith': []}\nGenerated CQs:", "output": "What logical separation is established between approximate and exact in the ontology? | Is it valid for an entity to be classified as both approximate and exact simultaneously? | Which classes are explicitly defined as incompatible with exact? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: numeric\nDescription: numeric is defined as a subclass of numericalness, representing entities characterized by having numerical properties. It is explicitly disjoint with non-numeric, ensuring that no individual can simultaneously belong to both numeric and non-numeric classes. This formalization distinguishes numeric entities, which possess quantifiable or number-based characteristics, from those lacking such numerical nature.\nAxiom: {'subClassOf': ['numericalness'], 'disjointWith': []}\nGenerated CQs:", "output": "What differentiates numeric entities from non-numeric entities in the ontology? | Is there any instance that can simultaneously be classified as numeric and non-numeric? | Which classes have an explicit incompatibility declared with non-numeric? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ordered\nDescription: ordered is defined as a subclass of order, indicating that all instances of ordered are also considered orders according to the ontology. It is explicitly disjoint with non-ordered, meaning that no individual can be simultaneously classified as both ordered and non-ordered. This formalization distinguishes entities that possess or exhibit ordering from those that do not.\nAxiom: {'subClassOf': ['order'], 'disjointWith': []}\nGenerated CQs:", "output": "What formal separation exists between ordered and non-ordered entities within the ontology? | Is any instance permitted to belong simultaneously to both ordered and non-ordered types? | Which classes are declared as disjoint with ordered in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Delete:bag\nDescription: Delete:bag is defined as a subclass of delete operation, indicating that it represents a specific type of deletion action. It is also explicitly disjoint with Delete:table, ensuring that no individual can be both a Delete:bag and a Delete:table operation. This formalization distinguishes Delete:bag as a unique deletion process within the ontology, separate from deletion operations targeting tables.\nAxiom: {'subClassOf': ['delete operation'], 'disjointWith': []}\nGenerated CQs:", "output": "What distinguishes instances of Delete:bag from those of Delete:table in terms of their classification? | Is there any entity in the ontology that can belong to both Delete:bag and Delete:table simultaneously? | Which classes are asserted to be disjoint with Delete:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Difference:set\nDescription: Difference:set is defined as a subclass of the difference operation, representing the set-theoretic difference between collections or sets. It is explicitly disjoint with Difference:time&date, so no instance can be both a set difference and a time/date difference. This class captures operations or results concerning the removal of elements from one set that exist in another, and is restricted to set-based contexts.\nAxiom: {'subClassOf': ['difference operation'], 'disjointWith': []}\nGenerated CQs:", "output": "What entities are considered mutually exclusive between Difference:set and Difference:time&date in the ontology? | Is there any instance that could simultaneously belong to both Difference:set and Difference:time&date? | Which classes does the ontology specify as being disjoint with Difference:set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Select:array\nDescription: Select:array is defined as a subclass of dyadic select operation, indicating it is a specific kind of select operation involving two operands. It is explicitly disjoint with Select:table, ensuring no individual can be both a Select:array and a Select:table. This class is used to represent select operations that specifically operate on array data structures, and not on tables.\nAxiom: {'subClassOf': ['dyadic select operation'], 'disjointWith': []}\nGenerated CQs:", "output": "What formal difference is established between Select:array and Select:table in the ontology? | Is there any entity that can simultaneously be an instance of both Select:array and Select:table? | Which classes in the ontology are asserted as mutually exclusive with Select:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Insert:bag\nDescription: Insert:bag is defined as a subclass of insert operation, signifying that it represents a specific type of insertion action. It is declared disjoint with Insert:table, which means that an instance of Insert:bag cannot simultaneously belong to the Insert:table class. This distinction enforces mutual exclusivity between these two types of insertion operations.\nAxiom: {'subClassOf': ['insert operation'], 'disjointWith': []}\nGenerated CQs:", "output": "What is the ontological distinction between Insert:bag and Insert:table? | Can an individual simultaneously be classified as both Insert:bag and Insert:table? | Which classes are explicitly declared as disjoint with Insert:bag? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Select:bag\nDescription: Select:bag is defined as a subclass of monadic select operation, indicating that it represents a form of selection operation that applies to a single argument within a computational or logical context. It is explicitly disjoint with Select:set, ensuring that no instance can simultaneously be both a Select:bag and a Select:set. This conceptual separation enforces that Select:bag and Select:set represent fundamentally distinct kinds of select operations.\nAxiom: {'subClassOf': ['monadic select operation'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology distinguish between Select:bag and Select:set? | Is there any instance that can be classified as both Select:bag and Select:set? | Which classes are explicitly specified as disjoint with Select:set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NonNegative:integer\nDescription: NonNegative:integer is defined as a subclass of nonNegative operation, representing integers that are greater than or equal to zero. It is formally disjoint with NonNegative:rational, ensuring that no individual can be both a NonNegative:integer and a NonNegative:rational. This class captures the concept of all non-negative integer values, distinguishing them from non-negative rational numbers.\nAxiom: {'subClassOf': ['nonNegative operation'], 'disjointWith': []}\nGenerated CQs:", "output": "What logical separation is asserted between NonNegative:integer and NonNegative:rational within the ontology? | Is there any instance that could simultaneously belong to both NonNegative:integer and NonNegative:rational classes? | Which classes are declared as disjoint with NonNegative:rational in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Round:scaled\nDescription: Round:scaled is defined as a subclass of round operation, and it is explicitly disjoint with Round:time&date, meaning no entity can be an instance of both classes simultaneously. Members of the Round:scaled class represent rounding operations that are specifically not applicable to time or date values, but instead pertain to other types of values handled in scaled or quantitative contexts.\nAxiom: {'subClassOf': ['round operation'], 'disjointWith': []}\nGenerated CQs:", "output": "How are Round:scaled and Round:time&date conceptually separated within the ontology? | Is any entity allowed to belong simultaneously to both Round:scaled and Round:time&date categories? | Which classes in the ontology are specified as disjoint with Round:time&date? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Serialize:bag\nDescription: Serialize:bag is defined as a subclass of serialize operation, representing a specific type of serialization process. It is explicitly disjoint with Serialize:table, ensuring that no instance can be classified as both Serialize:bag and Serialize:table. This distinction enforces separation between bag-based and table-based serialization methods.\nAxiom: {'subClassOf': ['serialize operation'], 'disjointWith': []}\nGenerated CQs:", "output": "What distinguishes the classes Serialize:bag and Serialize:table within the ontology? | Is it allowed for an instance to be both a Serialize:bag and a Serialize:table? | Which classes are defined to be disjoint with Serialize:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Successor:enumerated\nDescription: Successor:enumerated is defined as a subclass of the successor operation, indicating it represents a specific type or aspect of the successor process. It is explicitly disjoint with Successor:ordinal, which formally ensures that no individual can be both a member of Successor:enumerated and Successor:ordinal simultaneously. This separation captures distinct interpretations or instances of successor within the relevant domain.\nAxiom: {'subClassOf': ['successor operation'], 'disjointWith': []}\nGenerated CQs:", "output": "How is the conceptual separation represented between enumerated and ordinal successors in the ontology? | Is it allowable for an entity to be classified as both an enumerated and an ordinal successor? | What are the defined disjoint classes for ordinal successors within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index access\nDescription: index access is defined as a subclass of direct access property and is explicitly disjoint with key access, meaning an individual cannot be both an index access and a key access. This class represents mechanisms or operations that permit direct access to elements based on their positional index within a collection, distinctly separating it from access methods based on explicit keys.\nAxiom: {'subClassOf': ['direct access property'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology differentiate index access from key access? | Is there an entity that can be classified simultaneously as supporting both index access and key access? | Which access types are explicitly defined as incompatible with key access? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ordered aggregate\nDescription: ordered aggregate is defined as a subclass of aggregate imposed ordering, meaning it inherits all properties of aggregates that have a specific ordering structure. It is explicitly disjoint with unordered aggregate, indicating that no individual can simultaneously be both an ordered and an unordered aggregate. This formalization captures the distinction between collections with an inherent order and those without, ensuring that ordered aggregates maintain a structured sequence among their elements.\nAxiom: {'subClassOf': ['aggregate imposed ordering'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology distinguish between ordered aggregates and unordered aggregates? | Is there any entity that can simultaneously be classified as both an ordered aggregate and an unordered aggregate? | Which classes are specified as incompatible with unordered aggregate in the ontology structure? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: identifier not unique\nDescription: identifier not unique is a subclass of aggregate-imposed identifier uniqueness and is disjoint with identifier unique, meaning no individual can simultaneously be both identifier not unique and identifier unique. This class represents identifiers within an aggregate context that are not required to be unique, distinguishing them from identifiers that have enforced uniqueness at the aggregate level.\nAxiom: {'subClassOf': ['aggregate-imposed identifier uniqueness'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology distinguish between 'identifier not unique' and 'identifier unique'? | Is any instance allowed to have both 'identifier not unique' and 'identifier unique' classifications? | Which classes are specified as mutually exclusive with 'identifier unique'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: fixed size\nDescription: fixed size is defined as a subclass of aggregate size, representing a type of size where the measurement remains constant. It is explicitly disjoint with variable size, indicating that no entity can simultaneously be considered both fixed size and variable size. This ensures that fixed size aggregates maintain a consistent value and cannot change over time or context.\nAxiom: {'subClassOf': ['agregate size'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology distinguish between fixed size and variable size entities? | Is it permitted for an entity to be classified as both fixed size and variable size? | Which classes within the ontology are defined as mutually exclusive with variable size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: component mandatory\nDescription: component mandatory is defined as a subclass of component mandatoriness and is explicitly disjoint with component non-mandatory, ensuring that no individual can simultaneously be both a component mandatory and component non-mandatory. This class characterizes components that are required or obligatory within a given context, distinguishing them from non-mandatory components.\nAxiom: {'subClassOf': ['component mandatoriness'], 'disjointWith': []}\nGenerated CQs:", "output": "What is the formal separation between component mandatory and component non-mandatory in the ontology? | Can an entity be classified as both a mandatory and a non-mandatory component simultaneously? | Which components are explicitly stated as disjoint with component non-mandatory? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous\nDescription: homogenous is defined as a subclass of homogenity, indicating that all instances of this class exhibit uniformity in composition or character. It is explicitly disjoint with heterogenous—no individual can be both homogenous and heterogenous—ensuring a clear distinction between classes characterized by uniformity and those characterized by diversity.\nAxiom: {'subClassOf': ['homogenity'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology differentiate between homogenous and heterogenous entities? | Is there any entity that can simultaneously belong to both homogenous and heterogenous categories? | Which classes are explicitly specified as mutually exclusive with homogenous? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: recursive\nDescription: recursive is defined as a subclass of recursiveness, signifying that every instance of recursive inherits properties from recursiveness. It is explicitly disjoint with non-recursive, ensuring that no individual can simultaneously belong to both recursive and non-recursive classes. This formalization distinguishes all recursive instances from those that are non-recursive.\nAxiom: {'subClassOf': ['recursiveness'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology distinguish between recursive and non-recursive classes? | Is any entity classified as both recursive and non-recursive in the ontology? | Which classes are formally specified as disjoint with non-recursive? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-unique values\nDescription: non-unique values is defined as a subclass of uniqueness, but is explicitly disjoint with unique values, meaning no instance can be both a non-unique value and a unique value. This class captures those values that do not fulfill the criteria for uniqueness within a given context, thereby representing data elements that may have duplicates or repeated entries within a dataset or collection.\nAxiom: {'subClassOf': ['uniqueness'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology distinguish between non-unique values and unique values? | Is it allowed for a value to be classified as both non-unique and unique simultaneously? | What other types of values, if any, are defined as disjoint with unique values? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive field identifier\nDescription: descriptive field identifier is a subclass of field identifier, and is explicitly disjoint with target field identifier, meaning that no individual can simultaneously be both a descriptive field identifier and a target field identifier. This class represents identifiers that have descriptive purposes, distinguishing them from identifiers that serve as targets. The disjointness axiom enforces a clear conceptual separation between descriptive and target field identifiers within the ontology.\nAxiom: {'subClassOf': ['field identifier'], 'disjointWith': []}\nGenerated CQs:", "output": "Are there any instances that can belong to both descriptive field identifier and target field identifier? | Which classes are asserted to be mutually exclusive with target field identifier? | What formal constraint distinguishes descriptive field identifier from target field identifier in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: list specification\nDescription: list specification is defined as a subclass of specification. This means all instances of list specification are also considered specifications. No additional disjointness, property restrictions, or further descriptive details are specified, so the class serves as a specialization of the general concept of specification for use cases where differentiation among specification types is needed.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "output": "Which broader specification classes does list specification belong to? | What categories of specifications include list specification as a more specific instance? | Is list specification classified as a type of specification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: value space\nDescription: value space is defined as a subclass of specification. This means that every value space is a type of specification, inheriting the general characteristics of specification while representing a distinct concept within that category. No additional distinguishing features or restrictions are asserted by the current axioms.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "output": "What higher-level categories does value space belong to? | Which specifications have value space as a specialized form? | Are all value spaces encompassed within the specification category? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tag-value list\nDescription: tag-value list is defined as a subclass of specification, indicating that it represents a specific kind of specification. This class formalizes entities that provide information or structure through a collection of tags and their corresponding values, typically used to encode attribute data in a structured format.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "output": "Does every tag-value list represent a form of specification? | What more general categories does tag-value list fall under in the ontology? | Which entities are classified as subtypes of specification, such as tag-value list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: direction\nDescription: direction is defined as a subclass of specification. This means that every direction is a specific type of specification, and it inherits all characteristics and properties applicable to specifications in the ontology. No further constraints or descriptions have been provided, so the class serves as a general categorization for directions under the broader concept of specifications.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "output": "What more specific subclasses exist under specification, such as direction? | Which general categories include direction as a member? | Does the concept direction fall under the broader category of specification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: select-item specification\nDescription: select-item specification is defined as a subclass of specification. This indicates that every select-item specification is a type of specification, inheriting all characteristics of the parent class, with no additional restrictions or distinctions provided in the current formalization. No further disjointness or property constraints are specified.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "output": "Which specific types of specification encompass select-item specification? | What broader specification categories include select-item specification as a subclass? | Is select-item specification categorized under the broader group of specification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: datatype generator\nDescription: datatype generator is defined as a subclass of directive information entity. This indicates that any datatype generator inherits all structural and semantic characteristics of directive information entities, typically representing an information construct that prescribes or instructs the generation of datatypes. No further property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['directive information entity']}\nGenerated CQs:", "output": "Which higher-level categories encompass datatype generator? | Is datatype generator included within the broader class of directive information entity? | What entities are direct or indirect subclasses of directive information entity, specifically including datatype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: characterizing operation\nDescription: characterizing operation is a subclass of directive information entity. It refers to the set of operations that, either performed on or producing values of a datatype, distinguish that datatype from others with otherwise identical value spaces except potentially for symbol substitution. This class is used to formally capture the unique operational behaviors that define and differentiate datatypes in an information system.\nAxiom: {'subClassOf': ['directive information entity']}\nGenerated CQs:", "output": "Is characterizing operation a more specific kind of directive information entity? | What entities are covered under directive information entity, such as characterizing operation? | Which broader classifications include characterizing operation as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: data representational model\nDescription: data representational model is defined as a subclass of directive information entity. This means any instance of a data representational model is also an instance of directive information entity, inheriting all its properties and characteristics. The class is intended to capture entities that provide structured directives on how data is to be represented or organized.\nAxiom: {'subClassOf': ['directive information entity']}\nGenerated CQs:", "output": "What overarching entity types include data representational model within their classification? | Which entities are categorized as more specific forms of directive information entity, such as data representational model? | Does a data representational model fall under the broader grouping of directive information entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: explicit subtype generator\nDescription: explicit subtype generator is defined as a subclass of subtype generator, meaning every explicit subtype generator is also a subtype generator. No further restrictions or characteristics are specified by the current axioms or descriptions.\nAxiom: {'subClassOf': ['subtype generator']}\nGenerated CQs:", "output": "Is explicit subtype generator classified under subtype generator? | What broader classes encompass explicit subtype generator? | Which subclasses fall within the category of subtype generator, including explicit subtype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: natural number\nDescription: natural number is defined as a subclass of defined datatype, indicating that it represents a specific kind of datatype with well-established properties. Natural numbers typically include non-negative integers (0, 1, 2, ...), and are formally distinguished from other datatypes by their discrete, countable nature. This classification ensures that any individual of the class natural number is treated as a clearly defined, foundational numeric datatype.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "What broader datatype classifications include natural number as a subclass? | Is natural number categorized under defined datatype? | Which datatypes encompass natural number as a specialized type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: modulo\nDescription: modulo is defined as a subclass of defined datatype, indicating that it represents a specifically characterized datatype within the ontology. No further domain-specific properties or restrictions are specified for this class based on the current axiom.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Which defined datatypes have modulo as a specific subtype? | What broader categories encompass modulo under defined datatype? | Is modulo classified as a kind of defined datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bit\nDescription: bit is defined as a subclass of defined datatype, indicating that it represents a specific, well-defined data value within the ontology. As a data-oriented class, bit inherits all characteristics of defined datatypes but is further specialized for contexts where only binary or distinctly specified data values are relevant.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Which datatypes are more specific types within defined datatype, including bit? | To what broader datatype categories does bit belong? | Is bit classified under the general group of defined datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bit string\nDescription: bit string is defined as a subclass of defined datatype, representing a specific type of datatype whose values consist of sequences of bits. This classification situates bit string within the hierarchy of datatypes and indicates its specialization for encoding data as ordered collections of binary digits.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Which datatypes are classified as specializations of defined datatype, including bit string? | Is bit string categorized under defined datatype? | What higher-level datatypes does bit string fall under in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: character string\nDescription: character string is defined as a subclass of defined datatype. This means any instance of character string is also recognized as a defined datatype, typically representing a sequence of characters used to encode textual information.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Is character string classified as a subtype of defined datatype? | What general datatypes does character string fall under within the ontology? | Which datatypes are encompassed under defined datatype, including character string? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time interval\nDescription: time interval is defined as a subclass of defined datatype, indicating that it represents a structured data value within the ontology. As a specialized datatype, time interval refers to a span or duration of time, inheriting all properties and constraints applicable to defined datatypes.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Does time interval fall within the category defined by defined datatype? | What specific types are classified under defined datatype, including time interval? | Which broader categories encompass time interval as a specific instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: octet\nDescription: octet is defined as a subclass of defined datatype, establishing it as a specific type of datatype within the ontology. This formalization indicates that any instance of octet must satisfy all constraints applicable to defined datatype, but provides no further restrictions or additional properties beyond this classification.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "To which higher-level datatypes does octet belong according to the ontology hierarchy? | Which datatypes are specified as subclasses of defined datatype, including octet? | Is octet a defined subtype within the category of defined datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: octet string\nDescription: octet string is defined as a subclass of defined datatype. This means that octet string represents a specific type of datatype, though its precise structure and constraints are not further elaborated in the current axioms. Members of this class inherit all characteristics of defined datatype.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "What broader data categories include octet string as a member? | Which data types fall under the category of defined datatype, such as octet string? | Is octet string classified as a specialized type of defined datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: private\nDescription: private is defined as a subclass of defined datatype, indicating that it represents a specific kind of datatype within the ontology. No additional restrictions or disjointness axioms are specified, so its primary characteristic is its hierarchical relationship as a more specialized form of defined datatype.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Does private fall under the general category of defined datatype? | Which specific types are classified as defined datatype, such as private? | What broader classes does private belong to in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: object identifier\nDescription: object identifier is defined as a subclass of defined datatype. This means that every object identifier is a specific type of defined datatype, typically used to uniquely distinguish individual entities or objects within a system or dataset.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Is every object identifier necessarily classified as a defined datatype? | To what broader datatype classes does object identifier belong? | Which defined datatypes have object identifier as a specific specialization? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: stack\nDescription: stack is defined as a subclass of defined generator. This means every stack is a type of defined generator, inheriting all characteristics associated with defined generators. No additional property restrictions, disjointness, or equivalence assertions are specified. This class is intended to capture entities that possess the structural or functional traits of defined generators, refined specifically as stacks.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "Is stack categorized as a specific type of defined generator? | What are the broader categories or superclasses to which stack belongs? | Which entities are identified as subclasses under defined generator, such as stack? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tree\nDescription: tree is defined as a subclass of defined generator. This indicates that any instance of tree is considered a type of defined generator, inheriting all properties and restrictions from that superclass. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "Is tree classified as a type of defined generator? | Which broader classes does tree pertain to within the context of defined generator? | What entities are specified as subclasses of defined generator, such as tree? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: optional\nDescription: optional is defined as a subclass of defined generator, indicating that every optional is a type of defined generator. This means all individuals classified as optional inherit the properties and restrictions of defined generator, but may have further distinguishing features or constraints specified elsewhere. There are no additional axioms or asserted properties currently restricting the class further.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "Does optional fall under the defined generator category? | What broader classes include optional within the context of defined generator classifications? | Which defined generator types encompass optional as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: directed labeled graph datatype generator\nDescription: directed labeled graph datatype generator is a subclass of defined generator. This class represents generators that are specifically designed to produce directed labeled graph datatypes, inheriting the general properties of defined generators while specializing in the context of graph structures with directed edges and labeled nodes or connections.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "To what higher-level generator classes does directed labeled graph datatype generator belong? | Which specific generator types are categorized under defined generator, such as directed labeled graph datatype generator? | Is every directed labeled graph datatype generator inherently classified as a defined generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-directed labeled graph generator\nDescription: non-directed labeled graph generator is defined as a subclass of defined generator. This means every non-directed labeled graph generator is a type of defined generator, inheriting its general properties. The class represents entities that produce non-directed graphs in which nodes and/or edges are assigned labels, but with no explicit directionality imposed on the connections.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "What broader generator classifications include non-directed labeled graph generator? | Which generator types are subclasses of defined generator? | Does a non-directed labeled graph generator fall under the category of defined generators? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: vector generator\nDescription: vector generator is a subclass of defined generator, indicating that every vector generator is also a defined generator. No additional constraints or unique characteristics have been specified beyond this hierarchical relationship. The purpose and specific properties of vector generator are inherited from defined generator.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "Is a vector generator classified as a type of defined generator? | Which generators fall under the defined generator category, such as vector generator? | What hierarchical categories include vector generator as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: procedure generator\nDescription: procedure generator is defined as a subclass of non-aggregate generator. This means that every procedure generator is a specific type of non-aggregate generator, inheriting all properties and constraints applicable to non-aggregate generators. No further restrictions or characteristics are provided by the current axioms.\nAxiom: {'subClassOf': ['non-aggregate generator']}\nGenerated CQs:", "output": "Does a procedure generator fall under the classification of non-aggregate generator? | Which types of generators are specific forms of non-aggregate generator, such as procedure generator? | To which broader generator categories does procedure generator belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: attribute identifier\nDescription: attribute identifier is defined as a subclass of identifier, indicating that every attribute identifier is an identifier with a specific role in distinguishing or denoting attributes within a system. This class inherits all properties associated with identifiers, but specializes them for use in the identification of attributes. No further property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "output": "Which specific types are encompassed by the identifier category, including attribute identifier? | What higher-level classes is attribute identifier associated with? | Is attribute identifier classified under the broader group of identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: parameter identifier\nDescription: parameter identifier is a subclass of identifier. This means every parameter identifier is an identifier, inheriting all its properties and characteristics, but is specifically used to denote or reference parameters (such as in functions or methods). The axiom ensures that all parameter identifiers are included within the broader category of identifiers.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "output": "Which subclasses exist under identifier, and does parameter identifier appear among them? | What general categories encompass parameter identifier as a member? | Is parameter identifier classified as a more specific instance within the category of identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: extended-value identifier\nDescription: extended-value identifier is defined as a subclass of identifier. Members of this class inherit all characteristics of identifiers, serving the purpose of uniquely distinguishing entities, but are further specified as relating to extended-value contexts. No additional property restrictions or disjointness axioms are currently asserted for this class.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "output": "What higher-level classes does extended-value identifier fall under within the identifier hierarchy? | Which subclasses of identifier encompass extended-value identifier? | Is every extended-value identifier classified as an identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: character-set identifier\nDescription: character-set identifier is defined as a subclass of identifier. This means every character-set identifier is an identifier, but with a more specific role, typically used to uniquely represent or designate different character sets within a system or context. There are no further axioms or restrictions specified for this class.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "output": "Is every character-set identifier also categorized as an identifier? | Which identifier types include character-set identifier as a specialization? | What broader classes does character-set identifier fall under in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: field identifier\nDescription: field identifier is defined as a subclass of identifier. Members of this class inherit all characteristics of identifiers, specifically representing identifiers that are associated with fields. This formalization ensures field identifiers are treated as a specialized type of identifier, typically used to uniquely reference or denote fields within a given context or system.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "output": "To which higher-level classes is field identifier related? | Does field identifier fall under the broader classification of identifier? | What specific subtypes exist within the identifier category, including field identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: date-time factor\nDescription: date-time factor is defined as a subclass of factor. This means every date-time factor is a type of factor, inheriting its general properties and constraints. No additional disjointness or property restrictions are specified, so instances of date-time factor possess all the characteristics of factors, potentially specializing in aspects related to date or time within their domain.\nAxiom: {'subClassOf': ['factor']}\nGenerated CQs:", "output": "Which higher-level categories include date-time factor? | What factors are more specific than factor, such as date-time factor? | Is date-time factor classified as a type under factor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: scaled factor\nDescription: scaled factor is defined as a subclass of factor. This means that every scaled factor is a specific kind of factor, inheriting all characteristics of factors, but may possess additional properties or constraints related to scaling, depending on further ontology specification. There are no further axioms provided, so this class serves as a specialization for factors that have been subject to scaling.\nAxiom: {'subClassOf': ['factor']}\nGenerated CQs:", "output": "What broader class does scaled factor conceptually fall under? | Is scaled factor classified as a specific kind of factor? | Which subcategories fall under factor, including scaled factor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real factor\nDescription: real factor is defined as a subclass of factor. This means every real factor is, by definition, a factor, inheriting all characteristics shared by factors in general. There are no further distinguishing restrictions or properties specified, so real factor can be understood as a type of factor without additional specified constraints.\nAxiom: {'subClassOf': ['factor']}\nGenerated CQs:", "output": "Is real factor categorized under the broader class of factor? | Which subclasses comprise the set defined by factor, including real factor? | To which general classes does real factor belong within the context of factors? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: complex factor\nDescription: complex factor is defined as a subclass of factor. This means that every complex factor is a kind of factor, inheriting all properties of the factor class. There are no additional restrictions, disjointness, or property constraints specified for complex factor in the current formalization.\nAxiom: {'subClassOf': ['factor']}\nGenerated CQs:", "output": "What are the broader class hierarchies that complex factor falls under? | Which subclasses are encompassed by factor, such as complex factor? | Does complex factor represent a specific kind under the general category of factor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: graph aggregate component\nDescription: graph aggregate component is defined as a subclass of aggregate field component. This indicates that every graph aggregate component inherits all characteristics of aggregate field components but may have additional specialized properties or constraints. Instances of this class are, therefore, specific types of aggregate field components, potentially involved in representing or handling aggregated data within a graph structure.\nAxiom: {'subClassOf': ['aggregate field component']}\nGenerated CQs:", "output": "Which aggregate field component subclasses include graph aggregate component? | What parent categories encompass graph aggregate component? | Is graph aggregate component classified under the broader category of aggregate field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: n-adic operation\nDescription: n-adic operation is defined as a subclass of characterizing operation. It represents operations that map ordered n-tuples of values—where each value may belong to a given or parameterized datatype—into a result that is also of the given or a parametric datatype. This class models operations with arity n, generalizing functions over sequences of values and emphasizing their domain and codomain datatype constraints.\nAxiom: {'subClassOf': ['characterizing operation']}\nGenerated CQs:", "output": "Which operations are specific types of characterizing operation, such as n-adic operation? | What broader operational categories include n-adic operation? | Is n-adic operation categorized under characterizing operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined generator parameter-list\nDescription: defined generator parameter-list is a subclass of list specification. This means every defined generator parameter-list is a type of list specification, inheriting all its properties and constraints. Individuals in this class are formally recognized as specialized list specifications used for defining generator parameters.\nAxiom: {'subClassOf': ['list specification']}\nGenerated CQs:", "output": "Is defined generator parameter-list categorized under list specification? | To which higher-level group does defined generator parameter-list conceptually belong? | What are the more specialized types within list specification, such as defined generator parameter-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DAG datatype generator\nDescription: DAG datatype generator is defined as a subclass of directed labeled graph datatype generator. Members of this class inherit all properties of directed labeled graph datatype generators, specializing in generating data types based on directed acyclic graph (DAG) structures. This class is used to represent systems or components that produce datatypes structured according to DAGs, ensuring acyclicity and directionality in their outputs.\nAxiom: {'subClassOf': ['directed labeled graph datatype generator']}\nGenerated CQs:", "output": "Which generators are categorized as subclasses of directed labeled graph datatype generator? | What broader datatype generator classes include DAG datatype generator? | Is DAG datatype generator classified under directed labeled graph datatype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: identifier\nDescription: identifier is defined as a subclass of information artifact entity. Members of this class represent informational constructs specifically designed to uniquely distinguish or label entities, concepts, or data within information systems. This formalization means every identifier is categorized under the broader class of information artifact entities, emphasizing its role in conveying and maintaining unique identity information.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "What types are classified under information artifact entity, including identifier? | Which higher-level categories encompass identifier? | Does identifier belong to the broader group of information artifact entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: value expression\nDescription: value expression is a subclass of information artifact entity. This means every value expression is formally classified as a type of information artifact entity, inheriting all its general properties and restrictions. No additional axioms or property restrictions are specified, so value expression is currently distinguished solely by its classification within the ontology hierarchy as a specialized form of information artifact entity.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "Which subclasses are defined within the scope of information artifact entity, such as value expression? | What general class does value expression fall under within the context of information artifact entity? | Does value expression inherit characteristics from information artifact entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: label\nDescription: label is defined as a subclass of information artifact entity, indicating that it represents a type of information artifact. Instances of this class are understood to bear, convey, or represent information, typically serving as markers or identifiers that provide descriptive or categorical details about other entities.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "Which information artifact entities include label as a subclass? | Is label a specific type of information artifact entity? | What are the more general classes that label is classified under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: directive information entity\nDescription: directive information entity is defined as a subclass of information artifact entity. This means that every directive information entity is a type of information artifact entity, with no additional property restrictions or disjointness specified. Members of this class represent entities that are informational in nature and classified within the broader category of information artifact entities.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "Is directive information entity classified under the broader group of information artifact entity? | Which specific subtypes of information artifact entity include directive information entity as a member? | What are the direct and indirect parent classes of directive information entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: representation\nDescription: representation is defined as a subclass of information artifact entity, indicating that every instance of representation is an information-based object or artifact. This formalization situates representations within the broader context of informational entities, ensuring that they inherit all characteristic properties of information artifact entities. There are no additional property restrictions or disjointness conditions specified for this class.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "What are the broader categories that encompass representation? | Is representation a more specific type within the category of information artifact entity? | Which subclasses fall under information artifact entity, such as representation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: specification\nDescription: specification is defined as a subclass of information artifact entity. This means every specification is considered a type of information artifact, formally representing structured information or requirements typically used to describe, detail, or govern the properties or behavior of an entity, system, or process.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "Which entities are recognized as more specific forms of information artifact entity, including specification? | Is specification categorized under information artifact entity? | What general categories encompass specification in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: equality\nDescription: equality is defined as a subclass of datatype property, indicating that it represents a specific type of property that links individuals to data values. This classification ensures that equality is used exclusively in contexts appropriate for datatype properties, which relate individuals to literal values rather than to other individuals.\nAxiom: {'subClassOf': ['datatype property']}\nGenerated CQs:", "output": "Is equality classified as a kind of datatype property? | Which datatype properties encompass equality as a more specific type? | What are the broader property categories that include equality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: maximum-size\nDescription: maximum-size is a subclass of size, representing the largest possible or allowable extent within a given context. Any individual classified as maximum-size must also be an instance of size, specifying the upper limit or boundary in measurement or quantity.\nAxiom: {'subClassOf': ['size']}\nGenerated CQs:", "output": "Does maximum-size fall under the broader classification of size? | Which higher-level categories encompass maximum-size? | What are the specific types categorized within size, including maximum-size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: minimum-size\nDescription: minimum-size is defined as a subclass of size, indicating that it represents a more specific concept within the broader category of size. Members of this class inherit all characteristics of size, and are distinguished by representing some form of minimum or least amount within size-related contexts.\nAxiom: {'subClassOf': ['size']}\nGenerated CQs:", "output": "Does minimum-size represent a specialization of size? | Which concepts are encompassed within size and include minimum-size as a subclass? | Under which broader category is minimum-size classified? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate generator property\nDescription: aggregate generator property is defined as a subclass of quality, indicating that it represents a specialized type of quality. Members of this class inherit all characteristics of qualities, and specifically pertain to attributes or aspects associated with aggregate generators. No additional restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['quality']}\nGenerated CQs:", "output": "What are the more general categories that encompass aggregate generator property? | Which property types fall under the superclass quality, including aggregate generator property? | Is every aggregate generator property classified under the broader category of quality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: datatype property\nDescription: datatype property is defined as a subclass of quality, indicating that each instance of datatype property inherits characteristics associated with quality. This classification suggests that datatype properties are viewed as specific types of qualities within the ontology.\nAxiom: {'subClassOf': ['quality']}\nGenerated CQs:", "output": "Which properties are classified as more specific than quality, including datatype property? | Does every datatype property fall under the category of quality? | To which upper-level categories does datatype property belong within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: subtype generator\nDescription: subtype generator is defined as a subclass of datatype generator, indicating that every instance of subtype generator is also an instance of datatype generator. This classification specifies that subtype generators operate within the broader framework of datatype generators but may provide more specialized or refined functionality. No additional disjointness or property restrictions are specified.\nAxiom: {'subClassOf': ['datatype generator']}\nGenerated CQs:", "output": "Which generators are classified under datatype generator, including subtype generator? | Is subtype generator an example of datatype generator? | What general generator categories encompass subtype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: date-time unit\nDescription: date-time unit is defined as a subclass of label, indicating that it represents a specific type of label used to denote units of time such as seconds, minutes, or hours in the context of date and time. No additional constraints or disjointness are specified, so its primary distinguishing feature is its specialization from the broader category of label.\nAxiom: {'subClassOf': ['label']}\nGenerated CQs:", "output": "Is date-time unit encompassed within the hierarchy of label? | What specific subclasses are classified under label, such as date-time unit? | Which concept categories does date-time unit derive from, including label? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: date-time radix\nDescription: date-time radix is defined as a subclass of radix. This indicates that any instance of date-time radix inherits all characteristics of radix, while potentially adding more specific constraints or properties relevant to date and time representation bases. No further description or property restrictions are provided.\nAxiom: {'subClassOf': ['radix']}\nGenerated CQs:", "output": "What larger categories does date-time radix fall under in this ontology? | Which specialized forms are encompassed by the class radix, such as date-time radix? | Is date-time radix classified under the broader group of radix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: complex radix\nDescription: complex radix is a subclass of radix. This means every complex radix is a type of radix, inheriting all the general properties of radix. There are no additional property restrictions or disjointness axioms specified, so complex radix is simply categorized as a specialized form within the broader radix class.\nAxiom: {'subClassOf': ['radix']}\nGenerated CQs:", "output": "What are the parent categories that encompass complex radix? | Which specific types fall under the broader class of radix? | Is complex radix classified as a subtype under the category of radix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real radix\nDescription: real radix is a subclass of radix, representing those members of radix that have the property of being real. Every real radix is formally included in the broader category of radix, but may possess additional distinguishing characteristics specifying real-valued properties. No further property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['radix']}\nGenerated CQs:", "output": "Which specific types are categorized within radix, such as real radix? | What general classifications encompass real radix? | Does real radix fall under the broader classification of radix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: scaled radix\nDescription: scaled radix is defined as a subclass of radix. This means every instance of scaled radix is also considered a radix. No additional property restrictions or disjointness axioms are specified, so a scaled radix inherits all characteristics of radix, potentially with further differentiation implied by its name or use context.\nAxiom: {'subClassOf': ['radix']}\nGenerated CQs:", "output": "Which classifications are recognized as specializations of radix, such as scaled radix? | To which overarching categories is scaled radix assigned within the taxonomy? | Does scaled radix fall under the broader concept of radix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: factor\nDescription: factor is defined as a subclass of value expression, indicating that every instance of factor is also recognized as a value expression. There are no additional restrictions or disjointness axioms specified, so factor inherits all characteristics of value expressions without further constraints.\nAxiom: {'subClassOf': ['value expression']}\nGenerated CQs:", "output": "Does every factor represent a form of value expression? | Which entities are classified under value expression, such as factor? | To which broader classifications does factor belong within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: radix\nDescription: radix is defined as a subclass of value expression. This indicates that any radix is a specific kind of value expression, inheriting all characteristics of value expressions and further specializing their meaning, typically referring to the numerical base in mathematical or computational contexts.\nAxiom: {'subClassOf': ['value expression']}\nGenerated CQs:", "output": "Can radix be classified as a kind of value expression? | What are the general categories that radix is a member of within the ontology? | Which entities are subclasses under value expression, such as radix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bound\nDescription: bound is defined as a subclass of value expression, indicating that every instance of bound is also considered a value expression. No further restrictions or disjointness axioms are specified, so the defining characteristic of the bound class is its inheritance from value expression.\nAxiom: {'subClassOf': ['value expression']}\nGenerated CQs:", "output": "Which subclasses fall under value expression, and does bound appear among them? | What general class hierarchies encompass bound, considering its relation to value expression? | Is value expression a broader category that includes bound as a more specific concept? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: edge component\nDescription: edge component is defined as a subclass of graph aggregate component. This means that every edge component is a specialized type of graph aggregate component, inheriting all its characteristics. The class represents a distinct part or module within the broader category of aggregated components in graph structures. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['graph aggregate component']}\nGenerated CQs:", "output": "To what broader structural groups does edge component pertain? | Which components are classified as specializations of graph aggregate component, specifically noting edge component? | Is edge component included within the hierarchy of graph aggregate component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled dataset descriptive field component\nDescription: labeled dataset descriptive field component is defined as a subclass of field component. This means every labeled dataset descriptive field component is by definition a type of field component. No additional property restrictions or disjointness constraints are specified, so its unique characterization is its specialization of the more general field component class.\nAxiom: {'subClassOf': ['field component']}\nGenerated CQs:", "output": "What categories encompass labeled dataset descriptive field component as a more specific element? | Which components are more specific exemplars of field component, including labeled dataset descriptive field component? | Is every labeled dataset descriptive field component classified under the field component category? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled dataset target field component\nDescription: labeled dataset target field component is defined as a subclass of field component. This means every labeled dataset target field component is a specific type of field component, typically representing the target variable in a labeled dataset. No additional property or disjointness restrictions are specified for this class.\nAxiom: {'subClassOf': ['field component']}\nGenerated CQs:", "output": "Which entities are classified as field component subclasses, such as labeled dataset target field component? | To which broader groups does labeled dataset target field component belong within the hierarchy of field component? | Is every labeled dataset target field component a specific kind of field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: add operation\nDescription: add operation is defined as a subclass of dyadic arithmetic operation, indicating that it is an arithmetic operation that takes exactly two arguments. This formalization positions add operation within the hierarchy of arithmetic functions involving pairs of inputs, such as addition in standard mathematics.\nAxiom: {'subClassOf': ['dyadic aritmetic operation']}\nGenerated CQs:", "output": "Which operations are subclasses of dyadic arithmetic operation, such as add operation? | Does the add operation fall under the category of dyadic arithmetic operations? | What broader classifications include add operation as a specific example? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: multiply operation\nDescription: multiply operation is defined as a subclass of dyadic arithmetic operation, indicating that it is an arithmetic operation involving exactly two operands. Instances of this class perform multiplication, processing two input values to produce their product.\nAxiom: {'subClassOf': ['dyadic aritmetic operation']}\nGenerated CQs:", "output": "Is multiply operation categorized under dyadic arithmetic operation? | What broader classes encompass multiply operation in the context of arithmetic operations? | Which operations are defined as specializations of dyadic arithmetic operation, such as multiply operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Divide:scaled\nDescription: Divide:scaled is defined as a subclass of dyadic arithmetic operation. This indicates that it represents an arithmetic operation involving two inputs (operands). No further description or distinguishing constraints are specified by the current axioms, so its meaning is inherited from the broader category of dyadic arithmetic operations.\nAxiom: {'subClassOf': ['dyadic aritmetic operation']}\nGenerated CQs:", "output": "Which broader arithmetic operation classes include Divide:scaled as a specialized form? | What specific operations are subclasses of dyadic arithmetic operation, and does Divide:scaled appear among them? | Is Divide:scaled categorized under dyadic arithmetic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: delete operation\nDescription: delete operation is a subclass of dyadic updating operation. This means that every delete operation is considered a specific type of updating operation that involves two entities (typically an object and context). The axiom establishes the hierarchical relationship, indicating that delete operation inherits all structural characteristics of dyadic updating operations.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "What operations belong under the broader category of dyadic updating operation, specifically including delete operation? | Which higher-level operation types encompass delete operation in their hierarchy? | Is every delete operation classified as a kind of dyadic updating operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: insert operation\nDescription: insert operation is defined as a subclass of dyadic updating operation. This means that every insert operation is considered a specific type of dyadic updating operation, typically involving two entities and resulting in an update. No further distinguishing characteristics or property restrictions are specified.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "What broader operational categories does insert operation fall under? | Is insert operation classified as a kind of dyadic updating operation? | Which specific operations are recognized under the category of dyadic updating operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Append:sequence\nDescription: Append:sequence is defined as a subclass of dyadic updating operation, meaning it is a specific type of operation that updates data by taking two inputs. This class formalizes the concept of appending one sequence to another as an update, inheriting the general properties of dyadic updating operations.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "Is Append:sequence classified as a specialized form of dyadic updating operation? | Which operations are categorized under dyadic updating operation, such as Append:sequence? | What are the broader classes that encompass Append:sequence? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AttributeFunctionOverride:class\nDescription: AttributeFunctionOverride:class is defined as a subclass of dyadic updating operation. This indicates that any member of AttributeFunctionOverride:class represents a special kind of operation within the scope of dyadic updating, where typically two entities are involved in an updating process. Without further restriction or description, all instances of this class inherit the structural and semantic characteristics of dyadic updating operations.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "Does AttributeFunctionOverride:class fall under the broader category of dyadic updating operation? | What overarching types does AttributeFunctionOverride:class inherit from within the ontology? | Which types exhibit a more specific scope than dyadic updating operation, such as AttributeFunctionOverride:class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AttributeReplace:class\nDescription: AttributeReplace:class is defined as a subclass of dyadic updating operation. This means it represents a type of operation that updates data by replacing an attribute, and, as a dyadic operation, it involves two input entities. No further restrictions, disjointness, or property constraints are specified in the axiom, so its primary characterization is as a specialized updating action within the context of dyadic operations.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "Is AttributeReplace:class categorized under the broader group of dyadic updating operations? | What are the higher-level classes that encompass AttributeReplace:class? | Which concepts are more specific forms of dyadic updating operation, such as AttributeReplace:class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FieldReplace:record\nDescription: FieldReplace:record is defined as a subclass of dyadic updating operation. This means that it represents a specific type of updating operation involving two arguments or entities. As a subclass, FieldReplace:record inherits all the general characteristics of dyadic updating operations and is further specialized to represent operations where a field in a record is replaced or updated. No additional restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "What higher-level operation types encompass FieldReplace:record? | Which dyadic updating operation subclasses include FieldReplace:record? | Is FieldReplace:record categorized under the group of dyadic updating operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: difference operation\nDescription: difference operation is defined as a subclass of dyadic operation, indicating it is a mathematical operation that requires exactly two operands. As a specific type of dyadic operation, the difference operation computes the result by evaluating the \"difference\" between its two input elements, distinguishing it from other dyadic operations such as sum or product.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Which operations are classified as more specific types under dyadic operations, including difference operations? | What broader operation categories encompass the difference operation? | Does the class of difference operations fall within the broader group of dyadic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic select operation\nDescription: dyadic select operation is defined as a subclass of dyadic operation, signifying that it is a binary operation acting on two operands. No additional constraints or distinguishing characteristics are specified beyond its membership in the broader class of dyadic operations.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Is every dyadic select operation also classified as a dyadic operation? | Which specialized operations fall under the category of dyadic operation, including dyadic select operation? | To what broader classes does dyadic select operation belong within the operation hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic aritmetic operation\nDescription: dyadic arithmetic operation is defined as a subclass of dyadic operation, indicating that every dyadic arithmetic operation involves exactly two inputs (operands). This class specifically focuses on operations in the arithmetic domain (such as addition, subtraction, multiplication, or division), extending the more general concept of dyadic operations by emphasizing their application to arithmetic computations.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "What other subclasses fall under dyadic operation alongside dyadic arithmetic operation? | Is every dyadic arithmetic operation classified under dyadic operation? | Which broader classes include dyadic arithmetic operation within their hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic logical operation\nDescription: dyadic logical operation is defined as a subclass of dyadic operation, meaning it is an operation that takes exactly two inputs. This class specifically refers to logical operations (such as AND, OR, XOR) applied to two operands, distinguishing it from other kinds of dyadic operations that may not be logical in nature.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "What are the broader categories that encompass dyadic logical operation? | Does every dyadic logical operation fall under the category of dyadic operation? | Which specific operations are classified as subclasses of dyadic operation, including dyadic logical operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic set operation\nDescription: dyadic set operation is defined as a subclass of dyadic operation. This class encompasses operations that act on two sets as inputs. Members of this class must satisfy all properties of dyadic operations, specifically within the context of set-theoretic functions or relations.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Which specific types fall under the class dyadic operation, such as dyadic set operation? | What categories are broader than dyadic set operation, including dyadic operation? | Is every dyadic set operation also classified as a dyadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic updating operation\nDescription: dyadic updating operation is defined as a subclass of dyadic operation, indicating that it involves two operands. While specific characteristics are not provided, this class inherits all properties of dyadic operations, typically meaning it operates on pairs of entities or values.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Does dyadic updating operation represent a specialized form of dyadic operation? | Which operations are encompassed by the broader class of dyadic operation, including dyadic updating operation? | Under which more general operation classifications does dyadic updating operation fall? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic comparison operation\nDescription: dyadic comparison operation is a subclass of dyadic operation. This class encompasses operations that involve two arguments and perform a comparative evaluation between them. Members of this class, as dyadic operations, specifically relate to comparison tasks (such as \"greater than\", \"less than\", or \"equal to\") applied to pairs of inputs.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Which broader categories encompass dyadic comparison operation? | What specific operations are classified under dyadic operation, including dyadic comparison operation? | Are all dyadic comparison operations types of dyadic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic retrieve operation\nDescription: dyadic retrieve operation is defined as a subclass of dyadic operation, indicating it is an operation that acts on exactly two inputs or entities. No further distinguishing axioms or properties are specified, so its classification relies solely on this generalization.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "What broader classes does dyadic retrieve operation belong to within the operation hierarchy? | Does every dyadic retrieve operation fall under the category of dyadic operation? | Which types of operations are more specific than dyadic operation, such as dyadic retrieve operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: equal operation\nDescription: equal operation is defined as a subclass of dyadic comparison operation. This class represents operations that perform a comparison between two entities and evaluate whether they are equal. As a refinement of dyadic comparison operation, equal operation specifically focuses on checking and indicating equality between two operands or values.\nAxiom: {'subClassOf': ['dyadic comparison operation']}\nGenerated CQs:", "output": "Is equal operation classified as a type of dyadic comparison operation? | To which broader operational classes does equal operation belong? | What operations fall under the category of dyadic comparison operation, such as equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: in order operation\nDescription: in order operation is defined as a subclass of dyadic comparison operation, indicating that it represents a specific type of comparison involving two entities. As a specialized comparison operation, in order operation inherits all characteristics of dyadic comparison operations but further constrains its meaning to those operations that assess or evaluate entities with respect to their sequence or ordering.\nAxiom: {'subClassOf': ['dyadic comparison operation']}\nGenerated CQs:", "output": "Does in order operation fall under the category of dyadic comparison operation? | What broader operation types encompass in order operation? | Which operations are recognized as specializations of dyadic comparison operation, such as in order operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: isEmpty operation\nDescription: isEmpty operation is defined as a subclass of boolean operation. This indicates that it represents a type of boolean operation, specifically one that evaluates a condition and returns a boolean value. No further restrictions or characteristics are provided by the axiom, so its primary purpose within the ontology is to serve as a specialized form of boolean operation.\nAxiom: {'subClassOf': ['boolean operation']}\nGenerated CQs:", "output": "What broader operation categories encompass isEmpty operation within the ontology? | Are all isEmpty operations classified under the category of boolean operations? | Which operations are considered specializations of boolean operation, such as isEmpty operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: nonNegative operation\nDescription: nonNegative operation is a subclass of boolean operation. Any instance of nonNegative operation is, by definition, a type of boolean operation, inheriting all related properties and constraints. This classification indicates that nonNegative operation participates in logical or truth-value manipulations typical of boolean operations, but may have additional distinguishing characteristics defined outside of the given axioms.\nAxiom: {'subClassOf': ['boolean operation']}\nGenerated CQs:", "output": "Is every nonNegative operation encompassed within the category of boolean operation? | To which broader operation types does nonNegative operation belong? | Which operations are more specific instances of boolean operation, such as nonNegative operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SetOf:set\nDescription: SetOf:set is defined as a subclass of boolean operation, indicating that it represents a form of operation consistent with the principles of Boolean logic. Members of this class inherit properties and constraints applicable to boolean operations. No further description is provided, so the class is formally understood as a type of boolean operation.\nAxiom: {'subClassOf': ['boolean operation']}\nGenerated CQs:", "output": "Does SetOf:set represent a subclass within the domain of boolean operation? | Which boolean operations include SetOf:set as a more specific category? | What are the more general classes that SetOf:set belongs to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: negate operation\nDescription: negate operation is defined as a subclass of monadic operation, meaning it represents an operation that acts on a single operand. As a monadic operation, negate operation typically involves transforming or inverting the value of its sole input.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Is every negate operation encompassed within the category of monadic operations? | To which higher-level operation classes does negate operation pertain? | Which types of operations are classified as specializations of monadic operation, including negate operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: promote operation\nDescription: promote operation is classified as a subclass of monadic operation. This indicates that promote operation is an operation involving a single operand or argument, inheriting all characteristics associated with monadic operations. No further distinguishing features or constraints are specified beyond its classification within this hierarchy.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What specific operations are subclasses of monadic operation, including promote operation? | Which broader categories encompass promote operation? | Does promote operation fall under the general category of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: serialize operation\nDescription: serialize operation is defined as a subclass of monadic operation. This means every serialize operation is, by definition, a type of monadic operation, inheriting its general behaviors and properties. There are no additional restrictions or relationships specified.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Is serialize operation classified under the broader category of monadic operation? | Which general operation categories encompass serialize operation? | What specific types of monadic operation include serialize operation as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: successor operation\nDescription: successor operation is defined as a subclass of monadic operation. This means that every successor operation is a type of operation that acts on a single argument. No additional restrictions or characteristics are specified, so the class inherits all properties of monadic operations.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What higher-level operation categories does successor operation belong to? | Is successor operation included in the set of operations classified as monadic operation? | Which specific operations fall under the more general category of monadic operation, such as successor operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cast:choice\nDescription: Cast:choice is defined as a subclass of monadic operation, indicating that it inherits all characteristics of monadic operations. This classification ensures that any instance of Cast:choice is considered a specific type of monadic operation, although further distinguishing properties or restrictions are not specified in the given axioms or description.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Does Cast:choice fall under the category of monadic operation? | Which operations are classified as specializations of monadic operation, such as Cast:choice? | To which more general operation classes does Cast:choice belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Dereference:pointer\nDescription: Dereference:pointer is defined as a subclass of monadic operation. This means it represents a specific kind of monadic operation, typically referring to an action that takes a single operand and retrieves the value or object being pointed to by a pointer. Individuals of this class inherently possess the characteristics and constraints of monadic operations.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What general operation categories encompass Dereference:pointer? | Which specific operations are subclasses of monadic operation, such as Dereference:pointer? | Is Dereference:pointer categorized as a type of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Discriminant:choice\nDescription: Discriminant:choice is defined as a subclass of monadic operation, indicating that it represents a specific type of operation that acts upon a single operand or input. No further restrictions or disjointness axioms are specified, so it inherits all characteristics of monadic operation while introducing the notion of 'choice' as its distinguishing feature.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "To what higher-level operational categories does Discriminant:choice belong? | Which concepts are more specifically classified than monadic operation, for example, Discriminant:choice? | Is Discriminant:choice categorized under the broader concept of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Extend:time&date\nDescription: Extend:time&date is defined as a subclass of monadic operation, indicating that it represents a single-argument operation within the ontology. No further restrictions or characteristics are specified beyond its placement in the class hierarchy as a specialized form of monadic operation.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What broader category does Extend:time&date belong to within the classification of operations? | Which operations are included as subclasses under monadic operation, such as Extend:time&date? | Is Extend:time&date a specific type of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Invoke:procedure\nDescription: Invoke:procedure is defined as a subclass of monadic operation, indicating that it represents a specific type of operation with a single argument or operand. This classification situates Invoke:procedure within the hierarchy of operations, emphasizing its functionality as a specialized, unary process. No further restrictions or disjoint relationships are specified.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What specific operations are included as subclasses of monadic operation, such as Invoke:procedure? | Which more general concepts is Invoke:procedure classified under within the ontology? | Is Invoke:procedure categorized under the broader class of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Not:boolean\nDescription: Not:boolean is defined as a subclass of monadic operation, indicating that it is a single-argument logical operation. Members of this class represent logical operations that act on one boolean input to produce a boolean output, specifically performing logical negation.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Does Not:boolean fall under the category of monadic operation? | What are the more general operation types that encompass Not:boolean? | Which operations are classified as subclasses of monadic operation, including Not:boolean? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: monadic aritmetic operation\nDescription: monadic arithmetic operation is defined as a subclass of monadic operation. This means any instance of this class is a monadic operation (an operation with a single operand) specifically within the domain of arithmetic. It inherits all characteristics of monadic operations, restricted to those that perform arithmetic functions. No additional distinguishing axioms or constraints are currently specified.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Is monadic arithmetic operation a specific kind of monadic operation? | Which operations are direct specializations of monadic operation, such as monadic arithmetic operation? | To which broader categories does monadic arithmetic operation belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: monadic retrive operation\nDescription: monadic retrieve operation is defined as a subclass of monadic operation. This means every monadic retrieve operation is a type of monadic operation, inheriting all its characteristics. No further property or restriction axioms are specified, so its definition is limited to this hierarchical relationship.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What more general types does monadic retrive operation fall under? | Is monadic retrive operation classified within the broader group of monadic operation? | Which specific operations are encompassed by the category monadic operation, such as monadic retrive operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: map operation\nDescription: map operation is defined as a subclass of monadic operation. This indicates that every map operation is itself a type of monadic operation, inheriting its general properties. The map operation typically represents an action that applies a given function to each element within a structure (such as a list, set, or collection), producing a new structure of the same form with the results. No additional constraints or disjointness axioms are specified.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What more general types include map operation as a member within their hierarchy? | Does map operation fall under the category of monadic operation? | Which operations are classified as specializations of monadic operation, such as map operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boolean operation\nDescription: boolean operation is defined as a subclass of monadic operation. This indicates that every boolean operation is a kind of monadic operation, typically involving a single argument and producing a boolean output (true or false). The class encompasses operations that act on one operand and yield a binary (boolean) result.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Which operation types are defined as more specific forms within monadic operation, such as boolean operation? | Into which broader operation classes does boolean operation fall? | Is every boolean operation classified as a type of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: reciprocial operation\nDescription: reciprocal operation is formally defined as a subclass of monadic arithmetic operation, meaning it is an arithmetic operation that acts on a single operand. This class captures operations whose primary purpose is to return the multiplicative inverse (reciprocal) of their input value.\nAxiom: {'subClassOf': ['monadic aritmetic operation']}\nGenerated CQs:", "output": "Is every reciprocial operation classified under monadic aritmetic operation? | What types of operations are subsumed by monadic aritmetic operation, specifically including reciprocial operation? | Which broader arithmetic operation categories encompass reciprocial operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: round operation\nDescription: round operation is defined as a subclass of monadic arithmetic operation. This means every round operation acts on a single numerical input to produce its output, characterizing it as a unary arithmetic process, such as rounding a number to the nearest integer.\nAxiom: {'subClassOf': ['monadic aritmetic operation']}\nGenerated CQs:", "output": "Which operations are classified under monadic aritmetic operation, including round operation? | To which broader operation classes does round operation conceptually relate? | Is round operation categorized as a type of monadic aritmetic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SquareRoot:complex\nDescription: SquareRoot:complex is defined as a subclass of monadic arithmetic operation, indicating that it represents an arithmetic operation involving only one operand (monadic) in the context of complex numbers. This class formalizes the concept of computing the square root specifically within the domain of complex arithmetic.\nAxiom: {'subClassOf': ['monadic aritmetic operation']}\nGenerated CQs:", "output": "Which operations are subclasses of monadic aritmetic operation, such as SquareRoot:complex? | Is SquareRoot:complex classified as a specific kind of monadic aritmetic operation? | What more general categories encompass SquareRoot:complex in the context of arithmetic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: monadic select operation\nDescription: monadic select operation is defined as a subclass of monadic retrieve operation. This means every monadic select operation is a type of monadic retrieve operation, inheriting its essential characteristics. No additional property restrictions or disjointness constraints are specified; thus, its definition is strictly as a specialized form of monadic retrieve operation with no further distinguishing axioms.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "Which operations fall under the specialization of monadic retrive operation, such as monadic select operation? | Is monadic select operation categorized as a kind of monadic retrive operation? | To which parent operation class does monadic select operation belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AttributeFunctionInvocation:class\nDescription: AttributeFunctionInvocation:class is defined as a subclass of monadic retrieve operation. This indicates that any instance of AttributeFunctionInvocation:class inherits the characteristics of a monadic retrieve operation, meaning it represents an operation that retrieves a value based on a single operand or argument. The class is intended to capture invocations related to retrieving attributes in a functional, monadic manner.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "What broader operation categories encompass AttributeFunctionInvocation:class? | Which specialized forms of monadic retrive operation exist, including AttributeFunctionInvocation:class? | Is AttributeFunctionInvocation:class classified under the general category of monadic retrieve operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AttributeSelect:class\nDescription: AttributeSelect:class is defined as a subclass of monadic retrieve operation. This means that any instance of AttributeSelect:class represents a specific type of retrieval operation that acts on a single operand to extract or select an attribute. By inheriting from monadic retrieve operation, AttributeSelect:class is characterized by supporting retrieval actions that involve one input and are focused on obtaining attribute-level data.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "Which operations encompass AttributeSelect:class as a specific type within monadic retrieve operations? | Is AttributeSelect:class classified under monadic retrieve operation? | To what broader categories related to retrieval does AttributeSelect:class belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FieldSelect:record\nDescription: FieldSelect:record is defined as a subclass of monadic retrieve operation, meaning it represents a specialized form of retrieval operation within a monadic (single-argument or single-result) context. No additional restrictions or properties are specified, so any instance of FieldSelect:record is also an instance of monadic retrieve operation, inheriting all its characteristics.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "Is FieldSelect:record classified as a specialized form of monadic retrive operation? | Which monadic retrive operation subclasses encompass FieldSelect:record? | What more general operations does FieldSelect:record inherit properties from? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Head:sequence\nDescription: Head:sequence is defined as a subclass of monadic retrieve operation. This means that every instance of Head:sequence is also considered a monadic retrieve operation, inheriting its fundamental characteristics and constraints. The class does not specify additional axioms or restrictions beyond this hierarchical relationship.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "Does Head:sequence fall under the broader classification of monadic retrive operation? | To which general operational categories does Head:sequence belong? | Which operations are considered more specific variants of monadic retrive operation, such as Head:sequence? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Tail:sequence\nDescription: Tail:sequence is defined as a subclass of monadic retrieve operation. This classification means that any individual instance of Tail:sequence is also a type of monadic retrieve operation, inheriting its foundational characteristics. In the absence of further description or additional axioms, Tail:sequence is interpreted as a specific kind of retrieval operation within a monadic context, implying it operates under the rules and structure of monads—commonly used in functional programming and computational logic for chaining operations.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "Does Tail:sequence fall under the category of monadic retrive operation? | What broader operation categories include Tail:sequence? | Which operations are considered more specific forms of monadic retrive operation, such as Tail:sequence? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: countable\nDescription: countable is defined as a subclass of cardinality, indicating that it represents a specific type of cardinality. Members of the countable class are characterized by having a cardinality that can be matched with the set of natural numbers, distinguishing them from other forms of cardinality.\nAxiom: {'subClassOf': ['cardinality']}\nGenerated CQs:", "output": "To which general concepts does the class countable belong? | Is every countable entity also classified under cardinality? | Which types are included under the broader category of cardinality, including countable? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: finite\nDescription: finite is a subclass of cardinality, indicating that it represents the concept of cardinalities that are limited or bounded. Any individual classified as finite is, by definition, also a cardinality but with the additional constraint that its size is not infinite.\nAxiom: {'subClassOf': ['cardinality']}\nGenerated CQs:", "output": "What are the more general classes associated with finite? | Which subtypes are encompassed by cardinality, including finite? | Is finite categorized under the broader concept of cardinality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: uncountable\nDescription: uncountable is defined as a subclass of cardinality, indicating that it represents a specific type of cardinality. Members of the uncountable class are those cardinalities that cannot be placed into a one-to-one correspondence with the natural numbers, distinguishing them from countable cardinalities.\nAxiom: {'subClassOf': ['cardinality']}\nGenerated CQs:", "output": "Does uncountable represent a more specific form under the general concept of cardinality? | What types of cardinality include uncountable as a subclass? | Into which broader classes does uncountable fall within the cardinality hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bounded below\nDescription: bounded below is a subclass of bounded, representing entities that possess the property of being bounded in a particular way—specifically, from below. Any member of bounded below is, by definition, also a member of bounded.\nAxiom: {'subClassOf': ['bounded']}\nGenerated CQs:", "output": "Which concepts are more specific than bounded, such as bounded below? | What broader categories does bounded below belong to within the ontology? | Is every instance of bounded below also an instance of bounded? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unbounded below\nDescription: unbounded below is defined as a subclass of unbounded, meaning every instance of unbounded below is also an instance of unbounded. This class represents entities that specifically possess the characteristic of being unbounded on their lower side or extent, while inheriting all properties and restrictions from the broader unbounded class.\nAxiom: {'subClassOf': ['unbounded']}\nGenerated CQs:", "output": "What specific concepts are considered subclasses of unbounded, such as unbounded below? | Is unbounded a broader class that encompasses unbounded below? | Which higher-level categories include unbounded below? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unbounded\nDescription: unbounded is defined as a subclass of boundedness. This indicates that unbounded is a specific type or form of boundedness, and any instance of unbounded is also considered an instance of boundedness. No additional property restrictions or disjointness axioms are specified, so the class is distinguished solely by its hierarchical relation.\nAxiom: {'subClassOf': ['boundedness']}\nGenerated CQs:", "output": "Is unbounded a specialized concept within the broader class of boundedness? | To which more general categories does unbounded belong? | Which subclasses fall under the category of boundedness, including unbounded? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: exact\nDescription: exact is defined as a subclass of exactness, indicating that any instance of exact exhibits all characteristics associated with exactness. No additional constraints or distinguishing axioms are specified for this class.\nAxiom: {'subClassOf': ['exactness']}\nGenerated CQs:", "output": "Under which broader categories does exact fall within the ontology? | What is the hierarchical connection between exact and exactness? | Which classes are subsumed by exactness, including exact? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-numeric\nDescription: non-numeric is defined as a subclass of numericalness, indicating that every instance of non-numeric falls under the broader concept of numericalness. This class is intended to capture entities that are related to numericalness but are explicitly characterized by the absence of numeric value or representation.\nAxiom: {'subClassOf': ['numericalness']}\nGenerated CQs:", "output": "Does non-numeric fall under the broader classification of numericalness? | What are the broader categories that non-numeric is a part of within this ontology? | Which subclasses does numericalness encompass, specifically including non-numeric? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-ordered\nDescription: non-ordered is defined as a subclass of order. This means that every instance of non-ordered is also an instance of order, but represents a specialized form or category within the broader concept of order. No additional property restrictions or disjointness axioms are specified, so the class is distinguished solely by its hierarchical position as a subclass.\nAxiom: {'subClassOf': ['order']}\nGenerated CQs:", "output": "What categories fall under order as subclasses, including non-ordered? | Can non-ordered be classified under the concept of order? | Which broader types encompass non-ordered within the ontology structure? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:complex\nDescription: Add:complex is defined as a subclass of add operation, indicating that it represents a specific form of addition within the broader category of add operations. This formalization establishes that every instance of add:complex is also inherently an add operation, possibly specialized for use with complex numbers or structures, depending on further specification.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "output": "What broader classes encompass Add:complex within the ontology? | Which types of add operation include Add:complex as a specialization? | Does Add:complex fall under the category of add operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:integer\nDescription: Add:integer is defined as a subclass of add operation, indicating that it specifically represents addition operations where the operands are integers. Any individual that is an instance of Add:integer is inherently an add operation, but specialized for use with integer values.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "output": "Is Add:integer categorized under add operation in the ontology? | Which broader groups encompass Add:integer within the classification hierarchy? | What operations are more specific than add operation, including Add:integer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:rational\nDescription: Add:rational is defined as a subclass of add operation, indicating that it represents a specialized type of addition focused on rational numbers. This class inherits all characteristics of add operations and is formally distinguished as pertaining to the addition of rational values.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "output": "Is add operation a broader class encompassing Add:rational? | What kinds of add operation exist as subclasses, such as Add:rational? | Which general classification does Add:rational fall under in the context of operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:real\nDescription: Add:real is defined as a subclass of add operation. This means that every instance of Add:real is an add operation, specifically focused on real numbers. The class inherits all the characteristics of generic add operations, but may specify additional constraints or behaviors relevant to addition in the domain of real numbers. No further restrictions or disjointness axioms are asserted.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "output": "What operations fall under the subclass Add:real within add operation? | Is Add:real categorized as a type of add operation? | Which parent concepts encompass Add:real? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:scaled\nDescription: scaled is defined as a subclass of add operation. This means that any scaled operation is recognized as a specific type of add operation, inheriting all characteristics of add operations while potentially introducing its own specialized behavior or constraints. No further disjointness or property restrictions are specified for this class.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "output": "Is add:scaled categorized as a specialized form of add operation? | What broader operations include add:scaled as a member? | Which subtypes are encompassed by add operation, including add:scaled? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Delete:table\nDescription: Delete:table is defined as a subclass of delete operation. This means that every instance of Delete:table is a specific type of delete operation, inheriting all characteristics of delete operations, and representing deletion actions applied at the table level.\nAxiom: {'subClassOf': ['delete operation']}\nGenerated CQs:", "output": "Which operations are classified as subtypes of delete operation, such as Delete:table? | What broader operation category encompasses Delete:table? | Is Delete:table categorized under delete operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Difference:time&date\nDescription: Difference:time&date is defined as a subclass of difference operation. This class represents operations specifically focused on calculating the difference between temporal values such as times or dates, distinguishing it from other types of difference operations. Members of this class inherit all properties and constraints associated with difference operations, but are restricted to application within time and date contexts.\nAxiom: {'subClassOf': ['difference operation']}\nGenerated CQs:", "output": "Which higher-level operations does Difference:time&date fall under within the ontology? | Is Difference:time&date categorized as a type of difference operation? | What difference operations have Difference:time&date as a more specific subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Select:table\nDescription: Select:table is defined as a subclass of dyadic select operation, indicating that it represents a specific type of select operation involving two inputs or components. This class inherits all the characteristics and constraints of dyadic select operations, and any instance of Select:table is, by definition, also an instance of a dyadic select operation. No additional restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['dyadic select operation']}\nGenerated CQs:", "output": "What are the specific select operations categorized under dyadic select operation, such as Select:table? | Which higher-level categories does Select:table fall under within the ontology? | Is Select:table classified as a type of dyadic select operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:array\nDescription: Equal:array is defined as a subclass of equal operation. This means Equal:array represents a specific type of equality operation, typically involving arrays, and inherits all the general characteristics of equal operations. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "What broader operation categories include Equal:array as a specialized form? | Which operations are specified as subclasses within equal operation? | Is Equal:array classified under equal operation in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:bag\nDescription: Equal:bag is defined as a subclass of equal operation, indicating that it represents a specific type of equality evaluation or operation. Any instance of Equal:bag inherits all characteristics of equal operation, positioning it within the broader context of equality comparisons. There are currently no additional restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Is Equal:bag classified under the category of equal operation? | What specific operations are subsumed by equal operation, including Equal:bag? | Which higher-level operation categories encompass Equal:bag? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:boolean\nDescription: Equal:boolean is a subclass of equal operation, representing operations that specifically check or enforce equality between two boolean values. Any individual of this class is an instance of an equal operation, with its domain restricted to boolean-type operands.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Into which broader categories can Equal:boolean be grouped? | Which concepts are classified as more specific versions under equal operation, including Equal:boolean? | Does Equal:boolean represent a specialized type of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:character\nDescription: Equal:character is defined as a subclass of equal operation. This means every instance of Equal:character represents a specific kind of equality operation, likely focused on comparing characters. Since it inherits all characteristics of equal operation, Equal:character is used where character equality checks are required.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "What are the parent classes for Equal:character within the ontology? | Is Equal:character classified as a kind of equal operation? | Which specific operations fall under the category of equal operation, such as Equal:character? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:choice\nDescription: Equal:choice is a subclass of equal operation, indicating that each instance of Equal:choice is a specialized form of equal operation. No additional restrictions, disjointness, or property constraints are defined for this class, so its characterization is derived solely from its position in the class hierarchy.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which operations are considered specializations of equal operation, including Equal:choice? | Is Equal:choice classified under the broader category of equal operation? | What more general categories encompass Equal:choice within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:class\nDescription: Equal:class is defined as a subclass of equal operation, indicating that every instance of Equal:class is a specific type of equal operation. This formalization ensures that any individual classified as Equal:class must also satisfy the properties and constraints of equal operations within the ontology.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Is Equal:class categorized under equal operation? | Which specific types are classified beneath equal operation, including Equal:class? | What operations are broader in scope than Equal:class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:complex\nDescription: Equal:complex is defined as a subclass of equal operation. This means that every instance classified as Equal:complex is, by definition, also an instance of equal operation. No further distinguishing axioms or restrictions are specified for this class beyond its hierarchical placement.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Is Equal:complex categorized under equal operation? | What broader operation classes encapsulate Equal:complex? | Which equal operations have more specific types such as Equal:complex? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:enumerated\nDescription: Equal:enumerated is defined as a subclass of equal operation. This indicates that every instance of Equal:enumerated represents a specific kind of equal operation, inheriting all characteristics of equal operation while potentially introducing further constraints or properties relevant to enumerated equality.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which operations are classified as subtypes under equal operation, including Equal:enumerated? | To what more general operation classes does Equal:enumerated belong? | Does Equal:enumerated represent a specialized form of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:integer\nDescription: Equal:integer is defined as a subclass of equal operation, indicating that it represents a specialized type of equality operation specifically applied to integers. Any instance of Equal:integer is inherently an equal operation, but it is characterized by its restriction to operands of the integer type.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which subclasses are encompassed by equal operation, such as Equal:integer? | Is Equal:integer categorized under the broader class of equal operation? | What more general classes include Equal:integer within their hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:ordinal\nDescription: Equal:ordinal is defined as a subclass of equal operation, indicating that it specifically represents equality operations within the context of ordinal numbers or positions. Instances of this class inherit all properties of equal operations but are semantically restricted to comparisons involving ordinality.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "What parent operation categories does Equal:ordinal pertain to? | Does Equal:ordinal fall under the category of equal operation? | Which specific operations are specialized forms of equal operation, such as Equal:ordinal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:pointer\nDescription: Equal:pointer is defined as a subclass of equal operation. This means it inherits all characteristics of an equal operation and represents a specific form or type of equality operation within the ontology. There are no further restrictions or differentiating axioms provided, so it can be broadly understood as any equality operation that is categorized or implemented as a \"pointer.\"\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Does Equal:pointer fall under the category of equal operation? | What specific operations are subclasses of equal operation, including Equal:pointer? | To which higher-level operation types does Equal:pointer belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:procedure\nDescription: Equal:procedure is defined as a subclass of equal operation, indicating that it represents a specific type of equal operation. All instances of Equal:procedure inherit the characteristics and constraints of equal operations. No additional restrictions or properties are specified beyond this subclass relationship.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "What broader classes encompass Equal:procedure within the hierarchy? | Does Equal:procedure represent a specific type of equal operation? | Which equal operations have more specific subclasses such as Equal:procedure? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:rational\nDescription: Equal:rational is defined as a subclass of equal operation. This means every instance of Equal:rational is also an instance of equal operation, inheriting its properties and characteristics. This class specifically represents the application of equality within the context of rational values, distinguishing it from other types of equal operations.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Does Equal:rational fall under the broader concept of equal operation? | Which operations are categorized as more specific types within equal operation, such as Equal:rational? | To which more general operation classes does Equal:rational belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:real\nDescription: Equal:real is defined as a subclass of equal operation, representing equality operations that specifically pertain to real numbers. Any instance of Equal:real is an equal operation, and this class captures the concept of evaluating or asserting equality within the domain of real numbers.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which specific equal operations include Equal:real as a subclass? | What are the broader categories under which Equal:real is organized? | Is Equal:real classified as a kind of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:record\nDescription: Equal:record is defined as a subclass of equal operation, indicating that it represents a specialized form of comparison operation focused on evaluating equality. All instances of Equal:record inherit the characteristics and constraints associated with equal operations.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "What general concepts encompass Equal:record in the ontology? | Which entities are direct specializations of equal operation, such as Equal:record? | Does Equal:record fall under the broader class of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:scaled\nDescription: Equal:scaled is defined as a subclass of equal operation, meaning it inherits all characteristics of equal operations. This class represents a specific type of equal operation, but is further specialized under the general category of equality operations. There are no additional restrictions or disjointness axioms specified.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which operations are included as subclasses within equal operation, such as Equal:scaled? | Is Equal:scaled categorized under equal operation in the ontology? | To what broader operation categories does Equal:scaled belong according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:sequence\nDescription: Equal:sequence is defined as a subclass of equal operation, indicating that it represents a specific type of equality operation. Any instance of Equal:sequence is thus an equal operation, inheriting its general characteristics and semantic constraints. No additional restrictions or disjointness axioms are specified, so its primary distinguishing feature is its specialization within the equal operation hierarchy.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Does Equal:sequence fall under the category of equal operation? | Which specific operations are categorized as equal operations, such as Equal:sequence? | What broader categories include Equal:sequence as a more specific subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:set\nDescription: Equal:set is defined as a subclass of equal operation. This means that every instance of Equal:set is a type of equal operation, inheriting all characteristics and properties of equal operations. No further constraints or disjointness are specified, so its primary ontological role is to represent a specific kind or subset of equal operations.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which operations are broader in scope than Equal:set under equal operation? | Is Equal:set classified as a subclass within equal operation? | What specific subcategories are encompassed by equal operation, including Equal:set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:discrete\nDescription: Equal:discrete is a subclass of equal operation, representing a specific type of equality operation within the ontology. Any instance classified as Equal:discrete inherently possesses all characteristics of equal operation, but denotes a discrete (distinct and separate) form of equality as opposed to potentially other forms covered under the broader parent class.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "What are the broader operation categories encompassing Equal:discrete? | Which operations are considered specific types within equal operation, such as Equal:discrete? | Is Equal:discrete classified under the general category of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:table\nDescription: Equal:table is defined as a subclass of equal operation, indicating that it represents a specific type of equal operation within the ontology. There are no further restrictions or disjointness axioms provided, so its characteristics are inherited entirely from equal operation. This formalization ensures that every instance of Equal:table is also considered an instance of equal operation.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which operations are subcategories of equal operation, specifically including Equal:table? | What overarching categories does Equal:table belong to within the ontology? | Does Equal:table fall under the category of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:time&date\nDescription: Equal:time&date is defined as a subclass of equal operation. This class represents equality operations specifically applied to time and date values, inheriting all characteristics of general equal operations while restricting its domain to temporal data. There are no additional property restrictions or disjointness axioms specified.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which specific operations are categorized under equal operation, such as equal:time&date? | Is equal:time&date classified as a type of equal operation? | What broader operational categories encompass equal:time&date? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:void\nDescription: Equal:void is defined as a subclass of equal operation, indicating that it represents a specific type of equality operation within the ontology. Instances of Equal:void inherit all characteristics of equal operation but are further specialized to reflect this subclass distinction. No additional constraints or property restrictions are present.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which concepts are included as narrower types under equal operation, such as Equal:void? | Of which broader categories is Equal:void a member in relation to equal operation? | Does Equal:void represent a specialized form of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:enumerated\nDescription: InOrder:enumerated is defined as a subclass of in order operation. This indicates that it inherits all characteristics of in order operations, and further restricts its members to those specifically classified as InOrder:enumerated. No additional disjointness or property restrictions are specified.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "What broader operational classifications include InOrder:enumerated as a subtype? | Which specialized operations are classified as in order operation, including InOrder:enumerated? | Does InOrder:enumerated fall under the category of in order operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:interger\nDescription: InOrder:integer is defined as a subclass of in order operation. This means every instance of InOrder:integer is also an instance of in order operation, inheriting its properties and characteristics. No additional restrictions or properties are specified.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Does InOrder:integer represent a specific kind of in order operation? | What broader categories does InOrder:integer fall under within in order operation? | Which in order operation subclasses include InOrder:integer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:ordinal\nDescription: InOrder:ordinal is defined as a subclass of in order operation, meaning every instance of InOrder:ordinal is also an instance of in order operation. This class captures operations that are performed in a specific, sequential order, consistent with the broader concept of ordered computational procedures.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Which general operations is InOrder:ordinal classified under? | Is in order operation a broader category that includes InOrder:ordinal as a specific type? | What are all the subclasses under in order operation, and does that list include InOrder:ordinal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:rational\nDescription: InOrder:rational is defined as a subclass of in order operation. This means every instance of InOrder:rational is also an instance of in order operation, inheriting its essential properties and behavioral constraints. There are currently no additional property restrictions or disjointness axioms specified for this class, so its definition is primarily characterized by its position within the hierarchy of ordered operations.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "What in order operations have InOrder:rational as a more specific instance? | Is InOrder:rational categorized as a type of in order operation? | Which general operations encompass InOrder:rational as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:real\nDescription: InOrder:real is defined as a subclass of in order operation. This means that every instance of InOrder:real is necessarily an in order operation, inheriting all characteristics and constraints of its parent class. No further distinguishing features or restrictions are specified in the current axiom.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Which broader categories subsume InOrder:real in the ontology? | Is InOrder:real classified under in order operation? | What specific types are encompassed by in order operation, including InOrder:real? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:scaled\nDescription: InOrder:scaled is defined as a subclass of in order operation, indicating that it represents a specialized type of in order operation. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Which upper-level operations encompass InOrder:scaled? | Does InOrder:scaled fall under the category of in order operation? | What are the specific subtypes classified under in order operation, such as InOrder:scaled? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:time&date\nDescription: InOrder:time&date is defined as a subclass of in order operation. This means that every instance of InOrder:time&date is also an instance of in order operation, inheriting all its characteristics and constraints. The class represents a specific type of in order operation that is distinguished within the ontology for handling operations related to time and date.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Which in order operations include more specialized types such as InOrder:time&date? | To what higher-level categories does InOrder:time&date belong within the hierarchy of in order operation? | Is InOrder:time&date recognized as a specific form of in order operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Insert:table\nDescription: Insert:table is defined as a subclass of insert operation, representing a specialized form of data insertion that specifically targets tables. Any individual of Insert:table is by definition an insert operation, but this class serves to distinguish insert actions that are restricted to table-type data structures.\nAxiom: {'subClassOf': ['insert operation']}\nGenerated CQs:", "output": "Which operations are categorized as specializations of insert operation, including Insert:table? | Is Insert:table classified as a specific form of insert operation? | What broader categories encompass Insert:table as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:complex\nDescription: Multiply:complex is defined as a subclass of multiply operation, indicating that it represents a specialized form of multiplication specifically applicable to certain contexts (such as complex numbers or more advanced multiplicative structures). As a subclass, all characteristics and constraints of multiply operation apply, while distinguishing multiply:complex as a distinct category within the overall multiplication framework. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "output": "What operations are considered subclasses of multiply operation? | Is multiply:complex classified under multiply operation types? | Which higher-level operation categories encompass multiply:complex? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:integer\nDescription: Multiply:integer is defined as a subclass of multiply operation. This class represents multiplication operations specifically involving integer values, inheriting all properties and constraints of general multiplication operations but restricted to the integer domain.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "output": "Is Multiply:integer classified under the broader category of multiply operation? | Which specialized operations are considered subclasses of multiply operation, such as Multiply:integer? | Within what more general operation types is Multiply:integer included? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:rational\nDescription: Multiply:rational is a subclass of multiply operation. This class represents multiplication operations where the operands are specifically rational numbers, distinguishing it from multiply operations over other numeric domains.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "output": "To which general operation types does multiply:rational belong? | Is multiply:rational included among the operations classified as multiply operation? | What multiply operations encompass multiply:rational as a more specific subcategory? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:real\nDescription: Multiply:real is defined as a subclass of multiply operation, indicating that it represents multiplication specifically within the domain of real numbers. Any instance of Multiply:real inherits the characteristics and constraints of the general multiply operation, but is restricted in application to real-valued operands.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "output": "Is Multiply:real categorized as a multiply operation? | Into what broader classes is Multiply:real hierarchically organized? | Which multiply operations encompass Multiply:real as a specialized form? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:scaled\nDescription: Multiply:scaled is defined as a subclass of multiply operation. This indicates that it inherits all characteristics of multiply operations while representing a more specific variant or context of multiplication. No additional restrictions or disjointness axioms are specified. Without a current description, its identity is determined solely by its position in the class hierarchy, denoting a specialized type of multiplication operation.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "output": "What general multiply operation categories encompass Multiply:scaled? | Which specific multiply operations include Multiply:scaled as a subclass? | Is Multiply:scaled categorized as a type of multiply operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: And:boolean\nDescription: And:boolean is defined as a subclass of dyadic logical operation, indicating that it is a logical operation involving two operands. This class represents the AND operation, commonly used in logic to yield true only when both input values are true.\nAxiom: {'subClassOf': ['dyadic logical operation']}\nGenerated CQs:", "output": "Does And:boolean fall under the classification of dyadic logical operation? | Which logical operations exist as subclasses of dyadic logical operation, And:boolean among them? | What general categories encompass And:boolean within logical operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Or:boolean\nDescription: Or:boolean is defined as a subclass of dyadic logical operation, representing a logical operation that takes two inputs. It corresponds to the Boolean \"or\" operation, where the result is true if at least one of the inputs is true. Members of this class are restricted to binary (dyadic) logic functions operating under the inclusive disjunction principle.\nAxiom: {'subClassOf': ['dyadic logical operation']}\nGenerated CQs:", "output": "Does Or:boolean fall under the general category of dyadic logical operation? | Which more general logical operation classes encompass Or:boolean? | What dyadic logical operations include Or:boolean as a specific type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Fetch:table\nDescription: Fetch:table is defined as a subclass of dyadic retrieve operation, indicating that it represents a specific type of retrieve action that involves two entities. As a specialized dyadic retrieve operation, Fetch:table inherits all the relevant characteristics of such operations within the ontology, distinguishing it from other forms of retrieval actions.\nAxiom: {'subClassOf': ['dyadic retrieve operation']}\nGenerated CQs:", "output": "Is Fetch:table recognized as a specific type of dyadic retrieve operation? | What operations are classified under dyadic retrieve operation, including Fetch:table? | Which broader categories encompass Fetch:table as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Tag:choice\nDescription: Tag:choice is defined as a subclass of dyadic retrieve operation, indicating that it represents a specific retrieval action involving two inputs or arguments. This class is thus characterized by its relation to operations that retrieve or select information based on two distinct pieces of input, inheriting all properties and restrictions applicable to dyadic retrieve operations.\nAxiom: {'subClassOf': ['dyadic retrieve operation']}\nGenerated CQs:", "output": "Is Tag:choice categorized under dyadic retrieve operation? | To which broader operational category does Tag:choice belong? | Which operations fall under the dyadic retrieve operation class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Intersection:set\nDescription: Intersection:set is defined as a subclass of dyadic set operation, signifying that it operates on two sets. This class represents the set operation that yields a set containing all elements that are common to both input sets. As a dyadic set operation, it explicitly requires two sets as operands and produces a new set consisting only of elements present in both.\nAxiom: {'subClassOf': ['dyadic set operation']}\nGenerated CQs:", "output": "Which set operations fall under the category of dyadic set operation, including Intersection:set? | Is Intersection:set classified as a type of dyadic set operation? | What broader categories encompass Intersection:set within the hierarchy of set operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Lsln:set\nDescription: Lsln:set is formally defined as a subclass of dyadic set operation, indicating that it represents a type of operation involving two sets. No additional constraints or distinguishing characteristics are specified beyond its categorization under dyadic set operations.\nAxiom: {'subClassOf': ['dyadic set operation']}\nGenerated CQs:", "output": "Is Lsln:set categorized as a type of dyadic set operation? | What specific set operations are subclasses of dyadic set operation, Lsln:set included? | To which higher-level set operation categories does Lsln:set belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Subset:set\nDescription: Subset:set is defined as a subclass of dyadic set operation, which means it represents a specific type of set operation that involves two sets. Members of this class pertain to operations that determine whether one set is a subset of another, inheriting all formal properties of dyadic set operations.\nAxiom: {'subClassOf': ['dyadic set operation']}\nGenerated CQs:", "output": "Into which higher-level set operation categories does Subset:set fall? | Is Subset:set categorized under the broader class of dyadic set operation? | Which specialized operations are contained within the class dyadic set operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Union:set\nDescription: Union:set is defined as a subclass of dyadic set operation, indicating that it represents a type of set operation involving two sets. Members of this class perform the union operation, which combines all distinct elements from both input sets into a single set. This classification situates Union:set within the broader context of binary operations on sets.\nAxiom: {'subClassOf': ['dyadic set operation']}\nGenerated CQs:", "output": "To which upper-level operation types does Union:set belong? | Which set operations are categorized under dyadic set operation, including Union:set? | Is Union:set classified as a kind of dyadic set operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IsEmpty:bag\nDescription: IsEmpty:bag is defined as a subclass of isEmpty operation. This indicates that IsEmpty:bag represents a specific type of isEmpty operation applied to bags, distinguishing it from other isEmpty operations that may apply to different data structures. Any instance of IsEmpty:bag is necessarily an isEmpty operation, constrained in scope to the context of bags.\nAxiom: {'subClassOf': ['isEmpty operation']}\nGenerated CQs:", "output": "To which upper-level operation categories does IsEmpty:bag pertain? | What operations are more specific variants of isEmpty operation, such as IsEmpty:bag? | Does IsEmpty:bag fall under the broader classification of isEmpty operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IsEmpty:sequence\nDescription: IsEmpty:sequence is defined as a subclass of the isEmpty operation. This class represents operations that are specific forms of isEmpty, likely indicating procedures to determine whether a sequence is empty. By subclassing isEmpty operation, IsEmpty:sequence inherits all properties and constraints associated with isEmpty operations, but is further specialized to apply specifically to sequences.\nAxiom: {'subClassOf': ['isEmpty operation']}\nGenerated CQs:", "output": "What broader operation classes does IsEmpty:sequence fall under? | Is IsEmpty:sequence categorized as a specialization of the isEmpty operation? | Which operations encompass IsEmpty:sequence as a more specific form? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IsEmpty:table\nDescription: IsEmpty:table is defined as a subclass of the isEmpty operation. This means that it represents a specific isEmpty operation applied to tables, inheriting all general properties of isEmpty operations and specializing them for table data structures. Any instance of IsEmpty:table can be understood as an operation that checks or determines whether a table is empty.\nAxiom: {'subClassOf': ['isEmpty operation']}\nGenerated CQs:", "output": "Which operations are classified as subtypes of isEmpty operation, including IsEmpty:table? | Does IsEmpty:table fall under the broader concept of isEmpty operation? | What higher-level operations encompass IsEmpty:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Select:set\nDescription: Select:set is defined as a subclass of monadic select operation, indicating that it represents a specific type of selection operation that acts on a single input or operand. This formalization ensures that any instance of Select:set inherits the properties and constraints associated with monadic select operations. No further distinguishing characteristics or disjointness conditions are specified.\nAxiom: {'subClassOf': ['monadic select operation']}\nGenerated CQs:", "output": "Does Select:set represent a specific type of monadic select operation? | What kinds of operations fall under the category of monadic select operation, including Select:set? | Which higher-level classes encompass Select:set in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:complex\nDescription: Negate:complex is formally defined as a subclass of negate operation. This indicates that every instance of Negate:complex is a specific type of negate operation, inheriting all properties and constraints associated with negate operations. No additional distinguishing characteristics or property restrictions are specified at this level.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "output": "Within the domain of negate operation, which subordinate classes exist aside from Negate:complex? | What higher-level concepts encompass Negate:complex in this ontology? | Is Negate:complex categorized as a subtype of negate operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:integer\nDescription: Negate:integer is defined as a subclass of negate operation. This class represents the operation of taking an integer and producing its additive inverse (negation). Any instance of Negate:integer is a specific case of a negate operation, restricted to the integer domain.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "output": "Is Negate:integer a type of negate operation? | Which operations are categorized under negate operation, specifically including Negate:integer? | What broader classes does Negate:integer belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:rational\nDescription: Negate:rational is defined as a subclass of negate operation. This class represents operations that perform negation specifically within the domain of rational numbers. Any instance of this class is considered a type of negate operation, formally representing the mathematical action of producing the additive inverse of a rational value.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "output": "What are the broader classes that encompass Negate:rational? | Which specific operations are categorized beneath negate operation, such as Negate:rational? | Does Negate:rational fall under the classification of negate operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:real\nDescription: Negate:real is defined as a subclass of the negate operation. This class represents the negation operation as specifically applied to real numbers, inheriting all constraints and characteristics of the more general negate operation category.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "output": "Which operations are classified as specific types of negate operation, including Negate:real? | Does Negate:real fall under the general class of negate operation? | Under which hierarchical categories can Negate:real be grouped? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:scaled\nDescription: Negate:scaled is defined as a subclass of negate operation. This means that every instance of Negate:scaled is a specific type of negate operation, inheriting all properties and restrictions associated with negate operations. The class is intended to represent a specialized negation process, although additional characteristics would depend on further axioms or descriptions.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "output": "Does Negate:scaled fall under the broader classification of negate operation? | Which specific operations are categorized as variants of negate operation, such as Negate:scaled? | What are the general operation types to which Negate:scaled is related? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NonNegative:rational\nDescription: NonNegative:rational is defined as a subclass of nonNegative operation. This means every instance of NonNegative:rational is also an instance of nonNegative operation, specifically representing rational values or operations constrained to non-negative results. The class formalizes the distinction between all nonNegative operations and those that pertain strictly to rational (i.e., fractional or whole number) non-negative values.\nAxiom: {'subClassOf': ['nonNegative operation']}\nGenerated CQs:", "output": "Is NonNegative:rational categorized as a type of nonNegative operation? | Which broader operation classes include NonNegative:rational as a member? | What specific operations are subclasses under nonNegative operation, such as NonNegative:rational? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Promote:complex\nDescription: Promote:complex is defined as a subclass of promote operation, indicating that every instance of Promote:complex is also an instance of promote operation. This class inherits all the properties and characteristics of promote operation, while potentially introducing additional specificity or constraints unique to Promote:complex.\nAxiom: {'subClassOf': ['promote operation']}\nGenerated CQs:", "output": "Under which categories of promote operation does Promote:complex fall? | Is Promote:complex an instance within the promote operation hierarchy? | Which promote operations have more specific subclasses, such as Promote:complex? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Promote:rational\nDescription: Promote:rational is defined as a subclass of the promote operation class. This indicates that every instance of Promote:rational is a specific type of promote operation, inheriting all general characteristics of promote operations. No further restrictions, disjointness, or additional axioms are specified for this class.\nAxiom: {'subClassOf': ['promote operation']}\nGenerated CQs:", "output": "Is Promote:rational categorized as a subtype of promote operation? | What promote operations have Promote:rational as a specific instance or subclass? | Under which broader operation classes does Promote:rational fall? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Promote:real\nDescription: Promote:real is a subclass of promote operation, indicating that it represents a specialized form of promote operation within the ontology. Any individual classified as Promote:real inherits all characteristics and constraints associated with promote operation. No additional distinguishing axioms or restrictions are currently specified for this class.\nAxiom: {'subClassOf': ['promote operation']}\nGenerated CQs:", "output": "Is Promote:real classified under the category of promote operation? | Which promote operations encompass subtypes such as Promote:real? | What higher-level classes does Promote:real fall under in the promote operation hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Reciprocal:rational\nDescription: Reciprocal:rational is defined as a subclass of reciprocal operation. This means every instance of Reciprocal:rational is a specific type of reciprocal operation, typically involving rational numbers. No additional property restrictions or disjointness axioms are specified, so members of this class inherit all general properties of reciprocal operations.\nAxiom: {'subClassOf': ['reciprocial operation']}\nGenerated CQs:", "output": "Which specific operations are categorized as subtypes of reciprocial operation, and does this include reciprocal:rational? | Is reciprocal:rational classified under the broader category of reciprocial operation? | What are the more general operation classes to which reciprocal:rational belongs? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Reciprocal:real\nDescription: Reciprocal:real is defined as a subclass of reciprocal operation. This class represents the operation of finding the reciprocal specifically within the domain of real numbers. Any instance of Reciprocal:real is a kind of reciprocal operation applied to real numbers.\nAxiom: {'subClassOf': ['reciprocial operation']}\nGenerated CQs:", "output": "Is Reciprocal:real classified under the broader category of reciprocial operation? | What are the direct parent categories for Reciprocal:real? | Which operations are encompassed as more specific types of reciprocial operation, such as Reciprocal:real? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Reciprocal:complex\nDescription: Reciprocal:complex is defined as a subclass of reciprocal operation. This means every instance of Reciprocal:complex is also a reciprocal operation. The class is characterized by operations that involve computing the reciprocal (multiplicative inverse) specifically within the context of complex numbers.\nAxiom: {'subClassOf': ['reciprocial operation']}\nGenerated CQs:", "output": "Which broader operation classes does Reciprocal:complex belong to within the ontology? | What specific operations fall under the category of reciprocial operation, including Reciprocal:complex? | Is Reciprocal:complex classified as a subtype of reciprocial operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Round:time&date\nDescription: Round:time&date is defined as a subclass of round operation. This means that all instances of Round:time&date are specific types of rounding operations that pertain to time and date values. The class captures rounding processes as applied to temporal data, inheriting all general properties of round operations.\nAxiom: {'subClassOf': ['round operation']}\nGenerated CQs:", "output": "Does Round:time&date fall under the category of round operation? | What specific types are classified as round operation, and does Round:time&date belong to this group? | Which broader operations encompass Round:time&date as a subtype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Serialize:table\nDescription: Serialize:table is defined as a subclass of serialize operation. This indicates that it represents a specific type of serialization process, inheriting all characteristics of a serialize operation but further specializing to handle table data structures. Any individual of Serialize:table is, by axiom, a serialize operation specifically concerned with tables.\nAxiom: {'subClassOf': ['serialize operation']}\nGenerated CQs:", "output": "Is Serialize:table categorized as a type of serialize operation? | Which more general operation types encompass Serialize:table? | What kinds of operations fall under the category of serialize operation, specifically including Serialize:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Successor:ordinal\nDescription: Successor:ordinal is a subclass of successor operation, representing those operations specifically associated with generating the next ordinal in a well-ordered sequence. Members of this class perform the function of yielding the immediate successor ordinal, as formalized within the framework of ordinal arithmetic.\nAxiom: {'subClassOf': ['successor operation']}\nGenerated CQs:", "output": "Which subclasses are encompassed within the category of successor operation, including Successor:ordinal? | To what broader parent classes does Successor:ordinal belong in the ontology? | Is Successor:ordinal classified as a specific type of successor operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MapToBag:table\nDescription: MapToBag:table is a subclass of map operation, representing a specific type of mapping operation. This class inherits all characteristics of map operations and specifies entities that perform mapping tasks in a tabular context.\nAxiom: {'subClassOf': ['map operation']}\nGenerated CQs:", "output": "Which specific operations are included as subclasses of map operation, such as MapToBag:table? | What broader operations is MapToBag:table categorized under according to the ontology? | Is MapToBag:table classified under map operation in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MapToTable:table\nDescription: MapToTable:table is defined as a subclass of map operation, indicating that it inherits all characteristics of map operations. This class represents a specific type of mapping process with the intended outcome or function directly associated with tables. Individuals of this class are specialized map operations that result in or involve tables as part of their output or transformation.\nAxiom: {'subClassOf': ['map operation']}\nGenerated CQs:", "output": "Is MapToTable:table classified as a kind of map operation? | What broader concepts does MapToTable:table relate to in this context? | Which operations fall under the category of map operation, including MapToTable:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Replace:array\nDescription: Replace:array is defined as a subclass of n-adic operation, signifying that it represents an operation which can take an arbitrary number of arguments. Individuals of this class inherit all properties and constraints associated with n-adic operations, and the class serves to specify operations that involve the replacement of elements within arrays or similar data structures. No further characteristics or constraints are specified beyond its position in the class hierarchy.\nAxiom: {'subClassOf': ['n-adic operation']}\nGenerated CQs:", "output": "What are the specific subtypes of n-adic operation, including Replace:array? | Which broader categories encompass Replace:array? | Is Replace:array classified as a type of n-adic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Empty:bag\nDescription: Empty:bag is defined as a subclass of niladic operation, indicating that it represents an operation which does not require any arguments or inputs. This class models entities or operations that, by their formal definition, do not take parameters.\nAxiom: {'subClassOf': ['niladic operation']}\nGenerated CQs:", "output": "Is Empty:bag classified under niladic operation? | What higher-level operation categories does Empty:bag belong to? | Which operations fall under the category of niladic operation, including Empty:bag? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Empty:sequence\nDescription: Empty:sequence is defined as a subclass of niladic operation, indicating that it represents a special operation that does not take any arguments or inputs. This class characterizes sequences that are inherently empty and do not exhibit any elements or content, consistent with the semantics of niladic operations in formal systems.\nAxiom: {'subClassOf': ['niladic operation']}\nGenerated CQs:", "output": "Is Empty:sequence classified under the category of niladic operation? | Which operations are subclasses of niladic operation, including Empty:sequence? | Which more general operation categories encompass Empty:sequence? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Empty:set\nDescription: Empty:set is defined as a subclass of niladic operation. This means that an empty set inherits all characteristics of niladic operations, which are operations that do not require any operands. The classification suggests that empty:set is conceptualized in an operational framework where no input or elements are involved.\nAxiom: {'subClassOf': ['niladic operation']}\nGenerated CQs:", "output": "Which specific niladic operations include Empty:set as a subclass? | What broader classes encompass Empty:set within the hierarchy of niladic operations? | Is Empty:set categorized as a type of niladic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Empty:table\nDescription: Empty:table is defined as a subclass of niladic operation, indicating that it represents an operation or entity that does not take any input arguments. As a specific type of niladic operation, Empty:table is characterized by being an operation without operands, typically used to denote or construct an empty table structure within its context.\nAxiom: {'subClassOf': ['niladic operation']}\nGenerated CQs:", "output": "Which niladic operations have Empty:table as a more specific type? | What broader operation categories encompass Empty:table? | Does Empty:table fall under the category of niladic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: key access\nDescription: key access is defined as a subclass of direct access property, meaning it inherits all characteristics of direct access property while representing a more specific type. Members of the key access class pertain to properties or relationships that enable or characterize direct forms of access, distinguished from other access mechanisms by their explicit subclass designation.\nAxiom: {'subClassOf': ['direct access property']}\nGenerated CQs:", "output": "Is key access classified as a direct access property? | Which access properties fall under the category of direct access property, including key access? | What are the more general property types that encompass key access? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: access by value\nDescription: access by value is defined as a subclass of indirect access property, indicating that it represents a specific type of indirect access. Any individual classified as access by value inherits all the characteristics of indirect access property, typically referring to situations where access is achieved through the value rather than the reference or pointer itself.\nAxiom: {'subClassOf': ['indirect acess property']}\nGenerated CQs:", "output": "What more general properties include access by value as a specialization? | Is access by value categorized under indirect access property? | Which types of properties fall within the scope of indirect access property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: implementation dependent access\nDescription: implementation dependent access is defined as a subclass of indirect access property, indicating that it inherits all characteristics of indirect access property. This means any instance of implementation dependent access is also considered an indirect access property, but with specific details or constraints determined by the particular implementation. There is no further specification beyond its placement in the class hierarchy.\nAxiom: {'subClassOf': ['indirect acess property']}\nGenerated CQs:", "output": "To which broader types does implementation dependent access conceptually relate? | Which access properties are more specific than indirect access property, such as implementation dependent access? | Does implementation dependent access fall within the category of indirect access property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: position access\nDescription: position access is defined as a subclass of indirect access property, indicating that it represents a type of access property that is not direct but mediated through some intermediary or reference. All instances of position access therefore inherit the characteristics and constraints associated with indirect access property.\nAxiom: {'subClassOf': ['indirect acess property']}\nGenerated CQs:", "output": "What more general property categories does position access belong to? | Is position access a type of indirect access property? | Which properties are subclasses under the indirect access property category? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unordered aggregate\nDescription: unordered aggregate is a subclass of aggregate imposed ordering. This means every unordered aggregate is an aggregate where some ordering has been considered, but specifically, unordered aggregate refers to those aggregates where the order of the constituents is irrelevant or not specified. No additional disjointness or property restrictions are defined.\nAxiom: {'subClassOf': ['aggregate imposed ordering']}\nGenerated CQs:", "output": "To which broader aggregation categories does unordered aggregate belong? | Which specific types of aggregate imposed ordering include unordered aggregate as a subclass? | Is aggregate imposed ordering a superclass of unordered aggregate? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: identifier unique\nDescription: identifier unique is defined as a subclass of aggregate-imposed identifier uniqueness. This indicates that any individual or instance of identifier unique inherits all properties and constraints of aggregate-imposed identifier uniqueness, implying that the uniqueness of identifiers is imposed at the aggregate level. Without additional description, this class specifically represents entities for which unique identification is ensured by aggregate-imposed mechanisms.\nAxiom: {'subClassOf': ['aggregate-imposed identifier uniqueness']}\nGenerated CQs:", "output": "What more general categories encompass identifier unique within the ontology? | Does identifier unique fall under the broader classification of aggregate-imposed identifier uniqueness? | Which kinds of identifier uniqueness are specified as subclasses of aggregate-imposed identifier uniqueness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: variable size\nDescription: variable size is defined as a subclass of aggregate size. This specifies that any instance of variable size is also an instance of aggregate size, inheriting all its properties and restrictions. No further distinguishing characteristics or disjointness constraints are specified for variable size beyond its hierarchical relationship.\nAxiom: {'subClassOf': ['agregate size']}\nGenerated CQs:", "output": "Which specific types are encompassed by aggregate size, such as variable size? | To what higher-level groups does variable size belong according to the ontology? | Does variable size fall under the broader classification of aggregate size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: component non-mandatory\nDescription: component non-mandatory is defined as a subclass of component mandatoriness. This classification indicates that component non-mandatory represents components characterized by a specific mandatoriness status, distinguishing them from other types of component mandatoriness. No further restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['component mandatoriness']}\nGenerated CQs:", "output": "Which types are more specific than component mandatoriness, including component non-mandatory? | To which general mandatoriness classifications does component non-mandatory belong? | What broader mandatoriness categories encompass component non-mandatory? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: one dimensional\nDescription: one dimensional is defined as a subclass of dimensionality. This class represents entities or concepts that possess exactly one dimension, distinguishing them from higher-dimensional counterparts. Any individual classified as one dimensional must inherently exhibit characteristics specific to single-dimensionality.\nAxiom: {'subClassOf': ['dimensionality']}\nGenerated CQs:", "output": "Which concepts are encompassed under dimensionality, such as one dimensional? | Is one dimensional classified as a specialized form under dimensionality? | What broader type does one dimensional inherit from in the dimensional hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: two dimensional\nDescription: two dimensional is defined as a subclass of dimensionality. This class represents entities or concepts characterized specifically by having two dimensions (such as length and width), distinguishing them within the broader category of dimensionality.\nAxiom: {'subClassOf': ['dimensionality']}\nGenerated CQs:", "output": "What are the subclasses categorized under dimensionality, such as two dimensional? | Is two dimensional a more specific type of dimensionality? | Which general category encompasses two dimensional in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: multi dimensional\nDescription: multi dimensional is defined as a subclass of dimensionality, meaning it represents a specific type or instance within the broader concept of dimensionality. Any entity classified as multi dimensional inherently possesses the quality of having multiple dimensions, as specified by its placement under the dimensionality hierarchy.\nAxiom: {'subClassOf': ['dimensionality']}\nGenerated CQs:", "output": "Is multi dimensional categorized under the broader concept of dimensionality? | To which higher-level classes does multi dimensional belong in the context of dimensionality? | Which subclasses are encompassed by dimensionality, such as multi dimensional? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: heterogenous\nDescription: heterogenous is defined as a subclass of homogenity. This means every heterogenous entity is considered a type of homogenity, establishing a hierarchical relationship in which heterogenous inherits all characteristics of homogenity; however, further distinctions or defining properties are not specified by the current axioms or descriptions.\nAxiom: {'subClassOf': ['homogenity']}\nGenerated CQs:", "output": "What broader classes is heterogenous associated with in the ontology? | Is heterogenous included as a specific type under homogenity? | Which subclasses fall under the concept of homogenity, such as heterogenous? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-recursive\nDescription: non-recursive is defined as a subclass of recursiveness, meaning every non-recursive entity is a specific type of recursiveness. This class represents elements that, while related to the broader concept of recursiveness, possess characteristics that distinguish them as non-recursive within that context.\nAxiom: {'subClassOf': ['recursiveness']}\nGenerated CQs:", "output": "Is non-recursive categorized under recursiveness as a more specific classification? | What categories are directly encompassed by recursiveness, including non-recursive? | Which higher-order classes does non-recursive fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: structured\nDescription: structured is defined as a subclass of structurness. This indicates that every instance of structured also inherits all characteristics and constraints of structurness. No further properties or restrictions are specified for this class.\nAxiom: {'subClassOf': ['structurness']}\nGenerated CQs:", "output": "Which higher-level categories encompass the concept of structured? | Is structurness a direct superclass of structured? | What more specific classes fall under structurness, such as structured? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unstructured\nDescription: unstructured is defined as a subclass of structurness. This means that every instance of unstructured is also an instance of structurness, inheriting all properties and constraints applicable to structurness. There are no additional property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['structurness']}\nGenerated CQs:", "output": "Does unstructured fall under the category of structurness? | To what higher-level groupings does unstructured pertain? | Which types are categorized more specifically than structurness, such as unstructured? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: semi-structured\nDescription: semi-structured is defined as a subclass of structurness. This means that every instance of semi-structured is also an instance of structurness, inheriting its general properties while specializing or refining its concept. No additional property restrictions or disjointness axioms are specified, so the class is characterized primarily by its placement within the structurness hierarchy.\nAxiom: {'subClassOf': ['structurness']}\nGenerated CQs:", "output": "Is semi-structured classified as a type of structurness? | What broader categories encompass semi-structured within the ontology? | Which subclasses of structurness include semi-structured? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unique values\nDescription: unique values is defined as a subclass of uniqueness, indicating that every instance of unique values is also an instance of uniqueness. This classification implies that members of this class represent values that are distinguished by not being duplicated within a given context, enforcing a guarantee of singularity for each value.\nAxiom: {'subClassOf': ['uniqueness']}\nGenerated CQs:", "output": "Are unique values considered a specific type of uniqueness? | What are the broader classes that unique values are classified under? | Which subclasses fall under the category of uniqueness, including unique values? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target field identifier\nDescription: target field identifier is defined as a subclass of field identifier. This means that every target field identifier is a specialized form of field identifier and inherits all its properties and constraints. No additional axioms or distinguishing properties are specified for this class.\nAxiom: {'subClassOf': ['field identifier']}\nGenerated CQs:", "output": "Does target field identifier belong to the broader group defined by field identifier? | Which field identifier subtypes encompass target field identifier as a member? | What higher-level field identifiers categorize target field identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: positive integer\nDescription: positive integer is defined as a subclass of extended datatype, indicating that it is a specialized numerical datatype representing integers greater than zero within the broader category of extended datatypes. No additional constraints or properties are specified beyond this hierarchical relationship.\nAxiom: {'subClassOf': ['extended datatype']}\nGenerated CQs:", "output": "Which datatypes fall within the category of extended datatype, encompassing positive integer? | What broader datatype groups does positive integer inherit from? | Is positive integer classified as a more specific type under extended datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: positive integer range generator\nDescription: positive integer range generator is defined as a subclass of range subtype generator. This class represents generators specifically designed to produce ranges consisting only of positive integers, inheriting all characteristics of range subtype generator while specializing in handling positive integer values.\nAxiom: {'subClassOf': ['range subtype generator']}\nGenerated CQs:", "output": "Which specialized generators are classified beneath range subtype generator, including positive integer range generator? | Under which broader generator types does positive integer range generator fall? | Is every positive integer range generator categorized under range subtype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: procedure-paremeter declaration\nDescription: procedure-parameter declaration is defined as a subclass of specification. All instances of this class must include at least one member with the type parameter and at least one member with the type direction, as specified by the property restrictions. This class formally represents declarations in a procedure that specify the required parameters and their directions, ensuring that every procedure-parameter declaration comprehensively describes its involved parameters and their input/output directions.\nAxiom: {'subClassOf': ['specification'], 'propertyRestrictions': ['[has_member some parameter]', '[has_member only direction]']}\nGenerated CQs:", "output": "Is every procedure-parameter required to have at least one member that is a direction? | Must a procedure-parameter always be associated with a direction through the has_member relationship? | Can a procedure-parameter exist without referencing any direction via the has_member property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: datatype role\nDescription: datatype role is defined as a subclass of role, with the property restriction that it must be the role_of at least one datatype. This means every instance of datatype role is associated with, and specifically plays a role in the context of, some datatype.\nAxiom: {'subClassOf': ['role'], 'propertyRestrictions': ['[role_of only datatype]']}\nGenerated CQs:", "output": "Is it required that every instance with the role 'role_of' is associated with a value of datatype? | Does the property 'role_of' necessarily relate an individual only to values belonging to datatype? | Can an entity be considered within the scope if its 'role_of' relation points to something other than the specified datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: range subtype generator\nDescription: range subtype generator is defined as a subclass of subtype generator. Members of this class are characterized by the existence of at least one member related via the has_member property that is an instance of range. This formalization ensures that any range subtype generator must be associated with at least one range through the has_member relationship.\nAxiom: {'subClassOf': ['subtype generator'], 'propertyRestrictions': ['[has_member only range]']}\nGenerated CQs:", "output": "Does a Range Subtype Generator necessarily have at least one member that is a Range? | Is it required for every Range Subtype Generator to have a 'has_member' relationship with some instance of Range? | Can a Range Subtype Generator be defined without possessing the property 'has_member' that connects it to any Range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-directed labeled graph datatype\nDescription: non-directed labeled graph datatype is defined as a subclass of defined datatype. Any member of this class must include at least one non-directed labeled graph generator and at least one graph aggregate component as elements (as specified by the has_member property). This formalization captures datatypes representing non-directed labeled graphs constructed or characterized by these required components.\nAxiom: {'subClassOf': ['defined datatype'], 'propertyRestrictions': ['[has_member some graph aggregate component]', '[has_member only non-directed labeled graph generator]']}\nGenerated CQs:", "output": "Is every non-directed labeled graph required to have at least one member that is a non-directed labeled graph generator? | Can a non-directed labeled graph exist without having a has_member relationship to a non-directed labeled graph generator? | Does the presence of the has_member relationship to a non-directed labeled graph generator define membership within a non-directed labeled graph? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: array generator\nDescription: array generator is a subclass of homogenous aggregate generator and is explicitly disjoint with homogenous aggregate generator with variable size, ensuring that an instance cannot belong to both classes simultaneously. Members of the array generator class are characterized by possessing certain qualities: they are unordered aggregates, have a fixed size, can be multi-dimensional, allow index-based access, and may contain non-unique values. This combination of properties formally describes the essential characteristics of array generators, distinguishing them from other types of homogenous aggregate generators.\nAxiom: {'subClassOf': ['homogenous aggregate generator'], 'disjointWith': ['homogenous aggregate generator with variable size'], 'propertyRestrictions': ['[has_quality some unordered aggregate]', '[has_quality some fixed size]', '[has_quality some index access]', '[has_quality some non-unique values]', '[has_quality only multi dimensional]']}\nGenerated CQs:", "output": "Is it required that every array generator possesses at least one quality classified as multi dimensional? | Can an array generator exist without exhibiting the multi dimensional quality? | Does the presence of the multi dimensional quality define array generator entities within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: class generator\nDescription: class generator is defined as a subclass of heterogenous aggregate generator and is explicitly disjoint with both record generator and table generator, meaning an individual cannot belong to more than one of these classes simultaneously. Members of the class generator are characterized by having the following qualities: key access, unordered aggregate structure, non-unique values, one-dimensional organization, and fixed size. These properties collectively define class generator as a type of aggregate generator that supports key-based, unordered collections with potentially repeated values, all arranged in a single dimension with a fixed number of elements.\nAxiom: {'subClassOf': ['heterogenous aggregate generator'], 'disjointWith': ['record generator', 'table generator'], 'propertyRestrictions': ['[has_quality some key access]', '[has_quality some unordered aggregate]', '[has_quality some non-unique values]', '[has_quality some one dimensional]', '[has_quality only fixed size]']}\nGenerated CQs:", "output": "Is it required that every generator has at least one quality that is a fixed size? | Can a generator possess a quality other than fixed size, or is fixed size the only necessary quality? | Does the ontology require the existence of a fixed size quality for all instances of generators? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence generator\nDescription: sequence generator is defined as a subclass of homogenous aggregate generator with variable size, and is explicitly disjoint from homogenous unordered aggregate generator with variable size—meaning an individual cannot belong to both classes at once. Members of the sequence generator class are characterized by possessing certain qualities: they generate aggregates with non-unique values, maintain an ordered structure, and support position-based access to elements. These constraints formally specify that sequence generators create ordered collections (or aggregates) where repeated values are permissible and positional referencing is available, distinguishing them from unordered aggregate generators.\nAxiom: {'subClassOf': ['homogenous aggregate generator with variable size'], 'disjointWith': ['homogenous unordered aggregate generator with variable size'], 'propertyRestrictions': ['[has_quality some non-unique values]', '[has_quality some ordered aggregate]', '[has_quality only position access]']}\nGenerated CQs:", "output": "Does every sequence generator necessarily have at least one quality associated with position access? | Is possessing the quality of position access required for an entity to be classified as a sequence generator? | Can a sequence generator exist without having the property 'has_quality' linked to position access? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: pointer generator\nDescription: pointer generator is defined as a subclass of non-aggregate generator. Every instance of pointer generator must be a member of some pointer datatype, indicating that this class is characterized by its association with pointer datatypes. This structure ensures that all pointer generators participate specifically within the context of pointer datatypes and inherit the properties of non-aggregate generators.\nAxiom: {'subClassOf': ['non-aggregate generator'], 'propertyRestrictions': ['[is_member_of only pointer datatype]']}\nGenerated CQs:", "output": "Is every pointer generator necessarily associated with at least one pointer datatype through the 'is_member_of' property? | Does a pointer generator require the existence of some related pointer datatype via the 'is_member_of' relationship? | Must each instance of pointer generator be linked to a pointer datatype by the 'is_member_of' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: class datatype\nDescription: class datatype is a subclass of heterogenous aggregate datatype and is explicitly disjoint with record (tuple) datatype, ensuring that no individual can belong to both classes. Members of class datatype are characterized by the following property restrictions: they must have operations such as AttributeSelect, AttributeReplace, and Equal (each operating on class), must include members such as a class generator and an attribute-list, and must exhibit the qualities of being non-ordered and non-numeric. This formalization distinguishes class datatypes from other aggregates (like records) by their operations and inherent qualities.\nAxiom: {'subClassOf': ['heterogenous aggregate datatype'], 'disjointWith': ['record (tuple) datatype'], 'propertyRestrictions': ['[has_operation some AttributeSelect:class]', '[has_operation some AttributeReplace:class]', '[has_operation some Equal:class]', '[has_quality some non-ordered]', '[has_quality some non-numeric]', '[has_member some attribute-list]', '[has_member only class generator]']}\nGenerated CQs:", "output": "Is every instance of 'propertyRestrictions' required to have at least one value for 'has_member' that is a 'generator'? | Does 'propertyRestrictions' necessarily include a 'generator' through the 'has_member' property? | Can an instance of 'propertyRestrictions' exist without being related to a 'generator' via 'has_member'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate imposed ordering\nDescription: aggregate imposed ordering is defined as a subclass of aggregate generator property and is disjoint with aggregate-imposed identifier uniqueness, homogenity, aggregate size, uniqueness, component mandatoriness, structurness, recursiveness, and access type—ensuring that no individual can simultaneously belong to these disjoint classes. It is equivalent to the union of ordered aggregate and unordered aggregate, indicating that every aggregate imposed ordering instance must be either an ordered aggregate or an unordered aggregate. This class captures the property by which an aggregate specifies an ordering—imposed or absent—over its components, distinguishing it from other aggregate generator properties.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['aggregate-imposed identifier uniqueness', 'homogenity', 'agregate size', 'uniqueness', 'component mandatoriness', 'structurness', 'recursiveness', 'access type'], 'equivalentClass': ['(ordered aggregate and unordered aggregate)']}\nGenerated CQs:", "output": "Is aggregate imposed ordering equivalent to the union of ordered aggregate and unordered aggregate? | Can every instance of aggregate imposed ordering be classified as either an ordered aggregate or an unordered aggregate? | Are there any instances of aggregate imposed ordering that are not part of ordered aggregate or unordered aggregate? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenity\nDescription: homogenity is defined as a subclass of aggregate generator property and is explicitly disjoint with the classes aggregate size, uniqueness, component mandatoriness, structurness, recursiveness, and access type, ensuring that no individual can simultaneously belong to these. It is also equivalent to the union of homogenous or heterogenous, indicating that any instance of homogenity must be categorized as either homogenous or heterogenous with respect to an aggregate generator property.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['agregate size', 'uniqueness', 'component mandatoriness', 'structurness', 'recursiveness', 'access type'], 'equivalentClass': ['(homogenous and heterogenous)']}\nGenerated CQs:", "output": "Is every instance classified as homogenity necessarily either homogenous or heterogenous? | Is the class homogenity equivalent to the union of homogenous and heterogenous? | Can anything be considered homogenity that does not fall under either homogenous or heterogenous? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: uniqueness\nDescription: uniqueness is defined as a subclass of aggregate generator property and is explicitly disjoint from component mandatoriness, structurness, recursiveness, and access type, meaning no entity can be an instance of both uniqueness and any of these disjoint classes simultaneously. It is equivalent to the presence of either unique values or non-unique values, capturing the property of whether values are distinct or may repeat within an aggregate context. This definition formalizes how uniqueness characterizes and distinguishes value patterns in aggregate generator properties.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['component mandatoriness', 'structurness', 'recursiveness', 'access type'], 'equivalentClass': ['(non-unique values and unique values)']}\nGenerated CQs:", "output": "Is uniqueness equivalent to the class containing either only non-unique values or only unique values? | Can all instances classified as uniqueness be described as those having non-unique values or unique values? | Does the definition of uniqueness encompass exclusively the union of non-unique values and unique values? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: structurness\nDescription: structurness is defined as a subclass of aggregate generator property and is disjoint with both recursiveness and access type, indicating that no entity can simultaneously belong to structurness and either of these disjoint classes. Additionally, structurness is formally equivalent to the union of structured, unstructured, or semi-structured, meaning any entity that is classified as one of these three types is also considered an instance of structurness. This definition situates structurness as a categorical property that distinguishes types of structural organization within aggregate generator properties.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['recursiveness', 'access type'], 'equivalentClass': ['(structured and unstructured and semi-structured)']}\nGenerated CQs:", "output": "Is structurness equivalent to the union of structured, unstructured, and semi-structured? | Can structurness include any entities other than structured, unstructured, or semi-structured? | Are all entities classified as structurness either structured, unstructured, or semi-structured? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: primitive datatype\nDescription: primitive datatype is a subclass of datatype, and is explicitly disjoint from both generated datatype and defined datatype, ensuring that no individual can simultaneously belong to these classes. Members of primitive datatype are characterized by the requirement that they possess at least one quality related to equality (expressed as having some has_quality relationship to equality). This formalization captures the basic, irreducible nature of primitive datatypes, differentiating them from those that are constructed or defined based on other rules.\nAxiom: {'subClassOf': ['datatype'], 'disjointWith': ['generated datatype', 'defined datatype'], 'propertyRestrictions': ['[has_quality only equality]']}\nGenerated CQs:", "output": "Is it required for every instance with a primitive datatype propertyRestriction to possess at least one has_quality relation to equality? | Does the definition of primitive datatype propertyRestrictions ensure that the has_quality property always connects to equality for its instances? | Must all primitive datatype propertyRestrictions have the property has_quality with the value equality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tag-type\nDescription: tag-type is defined as a subclass of datatype role. Every instance of tag-type must serve as the role_of at least one datatype, meaning that each tag-type is associated with one or more datatype instances through the role_of property. This establishes tag-type as a specific role related to datatypes within the ontology.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[role_of only datatype]']}\nGenerated CQs:", "output": "Must every tag of type 'propertyRestrictions' necessarily have at least one 'role_of' relationship with some datatype? | Is it required for instances of propertyRestrictions to be associated, via the 'role_of' property, with one or more datatypes? | Can a propertyRestrictions tag exist without participating in a 'role_of' connection to any datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: pointer-element-type\nDescription: pointer-element-type is a subclass of datatype role, characterized by the restriction that it must be a role of some datatype. This means that any instance of pointer-element-type is specifically associated with at least one datatype through the \"role_of\" property, formalizing its function as a role connecting to datatypes within the ontology.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[role_of only datatype]']}\nGenerated CQs:", "output": "Is every pointer element type required to be related through the 'role_of' property to some datatype? | Can a pointer element type exist without participating in a 'role_of' relationship with at least one datatype? | Does the presence of 'role_of' with a datatype define membership in the pointer element type category? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: base type\nDescription: base type is defined as a subclass of datatype role. Any instance of base type must fulfill two key conditions: it must have a relationship 'role_of' to at least one datatype, and it must be a member of at least one complex datatype—specifically, an array datatype, sequence datatype, bag datatype, set datatype, or extended datatype. This formalization ensures that base type instances are foundational datatypes actively participating in, and forming members of, various structured or composite datatypes.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[role_of some datatype]', '[is_member_of some (array datatype and sequence datatype and bag datatype and set datatype and extended datatype)]']}\nGenerated CQs:", "output": "Is it required that every base type with property restrictions is a member of at least one of array, sequence, bag, set, or extended datatypes? | Can a base type propertyRestrictions instance exist that is not associated with any of the array, sequence, bag, set, or extended datatypes? | Does the membership of base type propertyRestrictions always include at least one datatype from array, sequence, bag, set, or extended? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real field-list\nDescription: real field-list is defined as a subclass of field-list, explicitly disjoint from boolean field-list and discrete field-list, ensuring no overlap in membership between these types. Members of real field-list are characterized by the property that they contain at least one real field component as a member. This formalization guarantees that any real field-list includes real-valued field components and cannot simultaneously be considered a boolean or discrete field-list.\nAxiom: {'subClassOf': ['field-list'], 'disjointWith': ['boolean field-list', 'discrete field-list'], 'propertyRestrictions': ['[has_member only real field component]']}\nGenerated CQs:", "output": "Is every real field-list required to have at least one member that is a real field component? | Does the property 'has_member' applied to a real field-list necessarily include some real field component? | Can a real field-list exist without having any members from the class of real field components? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled dataset field-list\nDescription: labeled dataset field-list is defined as a subclass of field-list that must contain at least one member that is a labeled dataset target field component and at least one member that is a labeled dataset descriptive field component. This structure ensures that any labeled dataset field-list necessarily includes both target and descriptive components, reflecting the typical schema of labeled datasets where descriptive fields provide input features and target fields represent outputs or labels.\nAxiom: {'subClassOf': ['field-list'], 'propertyRestrictions': ['[has_member some labeled dataset descriptive field component]', '[has_member only labeled dataset target field component]']}\nGenerated CQs:", "output": "Is it required for a labeled dataset field-list to have at least one has_member relation to a labeled dataset target field component? | Can every labeled dataset field-list include members other than labeled dataset target field components? | Does the property restriction on labeled dataset field-list ensure that its has_member property always relates to at least one labeled dataset target field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete-value-list\nDescription: discrete-value-list is defined as a subclass of list specification. Every instance of discrete-value-list must have at least one member that is a discrete-value identifier. This formalization ensures that all discrete-value-lists are specifically collections containing discrete-value identifiers as elements, distinguishing them from other types of lists.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member only discrete-value identifier]']}\nGenerated CQs:", "output": "Is it required that a discrete-value-list always contains at least one member of type discrete-value identifier? | Can a discrete-value-list exist without having any has_member relationship to a discrete-value identifier? | Does the presence of a has_member relationship to a discrete-value identifier define the membership criteria for discrete-value-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: procedure-parameter-list\nDescription: procedure-parameter-list is defined as a subclass of list specification, restricted so that it must have at least one member which is a procedure-parameter declaration. This formalization ensures that any instance of procedure-parameter-list represents a list where each member is specifically a declaration pertaining to procedure parameters.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member only procedure-paremeter declaration]']}\nGenerated CQs:", "output": "Must every procedure-parameter-list include at least one member that is a procedure-parameter declaration? | Is the presence of a procedure-parameter declaration as a member required for an instance to be recognized as a procedure-parameter-list? | Can a procedure-parameter-list exist without having any procedure-parameter declaration as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: select-list\nDescription: select-list is defined as a subclass of list specification, representing a specialized type of list that must include at least one member which is a select-item specification. Any instance of select-list is thus required to be a list specification containing one or more select-item specifications as its members.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member only select-item specification]']}\nGenerated CQs:", "output": "Are all individuals in select-list required to have at least one member specified by the property has_member from the select-item specification? | Can an instance belonging to select-list exist without having a member that satisfies the select-item specification through has_member? | Is it necessary for any member of select-list to be linked to some entity defined by the select-item specification via has_member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index-type list\nDescription: index-type list is a subclass of list specification, defined as a collection that has at least one member of type index-type. This means any instance of index-type list must contain one or more elements that are classified as index-type.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member only index-type]']}\nGenerated CQs:", "output": "Must an index-type list always include at least one member that is an index-type? | Can an index-type list be valid if it does not have any member of type index-type? | Is every index-type list required to have the has_member property relating it to an index-type individual? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: array datatype\nDescription: array datatype is defined as a subclass of homogenous aggregate datatype, and is explicitly disjoint from homogenous aggregate datatype with variable size, indicating arrays have a fixed size. Members of this class possess the following characteristics: they have members of a specific base type, members are indexed (by an index-type list), and an array can be generated by an array generator. Arrays are associated with qualities such as being exact, non-ordered, and non-numeric. They support operations including selection (Select:table), replacement (Replace:array), and testing for equality (Equal:array). These axioms provide a formal definition capturing the essential nature and operational behavior of array datatypes.\nAxiom: {'subClassOf': ['homogenous aggregate datatype'], 'disjointWith': ['homogenous aggregate datatype with variable size'], 'propertyRestrictions': ['[has_operation some Select:table]', '[has_member some index-type list]', '[has_operation some Replace:array]', '[has_member some base type]', '[has_quality some non-ordered]', '[has_quality some non-numeric]', '[has_operation some Equal:array]', '[has_member some array generator]', '[has_quality only exact]']}\nGenerated CQs:", "output": "Is it required that entities classified under 'array' always possess the 'has_quality' property with at least one value of 'exact'? | Does every instance of an array have a 'has_quality' relation to some 'exact' value? | Can something be an array if it lacks an association via 'has_quality' to exact? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: scaled datatype\nDescription: scaled datatype is defined as a subclass of numeric ordered primitive datatype and is disjoint with both integer datatype and rational datatype, meaning it cannot overlap with these types. Members of the scaled datatype class must possess qualities such as being unbounded and exact, and must have members including scaled radix and scaled factor. They also support a defined set of operations, including divide, multiply, add, round, negate, equal, and in-order comparisons, all specific to the scaled datatype. This formalization distinguishes scaled datatype as a numeric primitive that facilitates arithmetic and ordering operations based on scaling factors, but is neither a traditional integer nor a rational type.\nAxiom: {'subClassOf': ['numeric ordered primitive datatype'], 'disjointWith': ['integer datatype', 'rational datatype'], 'propertyRestrictions': ['[has_operation some Divide:scaled]', '[has_operation some InOrder:scaled]', '[has_operation some Multiply:scaled]', '[has_member some scaled radix]', '[has_quality some exact]', '[has_operation some Negate:scaled]', '[has_operation some Round:scaled]', '[has_operation some Add:scaled]', '[has_member some scaled factor]', '[has_operation some Equal:scaled]', '[has_quality only unbounded]']}\nGenerated CQs:", "output": "Is it required that every scaled datatype possesses at least one 'has_quality' relationship to an unbounded value? | Can a scaled datatype exist without having the 'has_quality' property linking to something that is unbounded? | Does the axiom entail that the property 'has_quality' on scaled datatypes must reference at least one entity that is unbounded? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: integer datatype\nDescription: integer datatype is a subclass of numeric ordered primitive datatype, characterized by qualities such as being ordered, numeric, exact, and unbounded. It supports operations including addition, multiplication, negation, equality checking, and ordered comparison among integers, as well as ensuring the existence of non-negative integers. The class is explicitly disjoint with rational datatype, indicating that no individual can be both an integer and a rational that is not an integer. These axioms formalize the mathematical and operational properties unique to the integer datatype.\nAxiom: {'subClassOf': ['numeric ordered primitive datatype'], 'disjointWith': ['rational datatype'], 'propertyRestrictions': ['[has_operation some NonNegative:integer]', '[has_quality some ordered]', '[has_operation some Equal:integer]', '[has_quality some numeric]', '[has_quality some exact]', '[has_operation some Add:integer]', '[has_quality some unbounded]', '[has_operation some Multiply:integer]', '[has_operation some Negate:integer]', '[has_operation only InOrder:interger]']}\nGenerated CQs:", "output": "Must every instance with an integer datatype have at least one 'has_operation' property relating it to an integer in the set InOrder? | Is it required for entities described by this axiom to possess some operation involving an integer classified as InOrder? | Can an entity with an integer datatype exist in this ontology without being linked by 'has_operation' to at least one InOrder integer value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: exactness\nDescription: exactness is defined as a subclass of datatype property and is explicitly disjoint from the classes numericalness, cardinality, order, boundedness, and equality—meaning no instance can belong to any of these classes simultaneously. Additionally, exactness is equivalent to the union of approximate or exact, capturing the notion that it characterizes properties specifying whether something is described with complete precision or approximation. This class formally distinguishes the aspect of being exact from other quantitative or structural datatype attributes.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['numericalness', 'cardinality', 'order', 'boundedness', 'equality'], 'equivalentClass': ['(approximate and exact)']}\nGenerated CQs:", "output": "Is exactness defined by the union of approximate and exact categories? | Is every instance of exactness necessarily classified as either approximate or exact? | Are there any examples of exactness that do not fall under approximate or exact? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: cardinality\nDescription: cardinality is a subclass of datatype property and is disjoint from the classes order, boundedness, and equality, meaning no entity can simultaneously belong to both cardinality and any of these classes. It is formally equivalent to the union of countable, finite, and uncountable, reflecting that cardinality expresses the size or \"number of elements\" in a set, which may be countable, finite, or uncountable. This structure ensures clear differentiation from related set properties such as order, boundedness, and equality.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['order', 'boundedness', 'equality'], 'equivalentClass': ['(countable and finite and uncountable)']}\nGenerated CQs:", "output": "Is cardinality equivalent to the union of countable, finite, and uncountable concepts? | Can every instance classified under cardinality be either countable, finite, or uncountable? | Does cardinality include only those entities that are finite, countable, or uncountable, with no others? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boundedness\nDescription: boundedness is defined as a subclass of datatype property and is explicitly disjoint with equality, indicating that no instance can simultaneously represent boundedness and equality. It is further specified as being equivalent to either bounded or unbounded, meaning every instance of boundedness must fall into one of these two categories. This class formally captures the notion of whether a datatype property exhibits bounds or not, distinguishing it from properties concerning equality.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['equality'], 'equivalentClass': ['(bounded and unbounded)']}\nGenerated CQs:", "output": "Is boundedness defined as the union of bounded and unbounded classes? | Are all instances of boundedness either bounded or unbounded? | Does boundedness include any class other than bounded and unbounded? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real field component\nDescription: real field component is defined as a subclass of primitive field component, disjoint with boolean field component—which ensures that no individual can be both a real field component and a boolean field component simultaneously. Members of this class are further constrained by a property restriction: each real field component must have a role with respect to some real datatype. This means that any real field component always relates in some way to a real (numeric, continuous) datatype, distinguishing it from other types of primitive field components.\nAxiom: {'subClassOf': ['primitive field component'], 'disjointWith': ['boolean field component'], 'propertyRestrictions': ['[role_of only real datatype]']}\nGenerated CQs:", "output": "Does a real field component necessarily play the role of some real datatype? | Is it required for every real field component to be associated, through 'role_of', with at least one instance of real datatype? | Can a real field component exist without participating in the 'role_of' relationship with any real datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tree datatype\nDescription: tree datatype is defined as a subclass of labeled graph datatype, ensuring that every tree datatype inherits all structural features of labeled graph datatypes. It is explicitly disjoint with DAG datatype, meaning no instance can simultaneously belong to both classes. Additionally, every member of the tree datatype class must have at least one associated tree datatype generator, as specified by the property restriction. This formalization captures tree datatypes as hierarchical, non-cyclic structures generated by specific mechanisms and distinct from more general directed acyclic graphs.\nAxiom: {'subClassOf': ['labeled graph datatype'], 'disjointWith': ['DAG datatype'], 'propertyRestrictions': ['[has_member only tree datatype generator]']}\nGenerated CQs:", "output": "Is it required that a tree datatype property restriction always involves at least one has_member relation to a tree datatype generator? | Can a tree datatype property restriction exist without relating via has_member to any tree datatype generator? | Does every tree datatype property restriction necessarily specify the presence of a has_member property with a tree datatype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: character datatype\nDescription: character datatype is defined as a subclass of non-numeric unordered primitive datatype. It is disjoint with discrete datatype and boolean datatype, ensuring that no datatype can be both a character datatype and either of those types. Members of the character datatype class are characterized by possessing at least one exact quality, supporting the Equal operation restricted to characters, and being associated with at least one character-set identifier. This formalization captures the essential properties of character datatypes, which are used to represent single text characters from specific character sets and are distinct from numeric or logical datatypes.\nAxiom: {'subClassOf': ['non-numeric unordered primitive datatype'], 'disjointWith': ['discrete datatype', 'boolean datatype'], 'propertyRestrictions': ['[has_quality some exact]', '[has_operation some Equal:character]', '[has_identifier only character-set identifier]']}\nGenerated CQs:", "output": "Must every character have at least one identifier from some character-set? | Is it required that a character is associated with an identifier belonging to a specific character-set? | Can a character exist without possessing any identifier corresponding to a character-set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete datatype\nDescription: discrete datatype is a subclass of non-numeric unordered primitive datatype, and it is explicitly disjoint with boolean datatype, ensuring that no individual can be both a discrete datatype and a boolean datatype. Members of this class must have at least one member from a discrete-value-list, support at least the equality operation (Equal:discrete), and possess the quality of exactness. This formalization captures the distinct, non-numeric, unordered nature of discrete datatypes, characterized by well-defined, separate values and an emphasis on precise equality comparisons.\nAxiom: {'subClassOf': ['non-numeric unordered primitive datatype'], 'disjointWith': ['boolean datatype'], 'propertyRestrictions': ['[has_member some discrete-value-list]', '[has_quality some exact]', '[has_operation only Equal:discrete]']}\nGenerated CQs:", "output": "Is it required that an entity with discrete datatype property restrictions must have at least one operation classified as 'Equal:discrete'? | Can a discrete datatype property restriction exist without being related to an 'Equal:discrete' operation through the has_operation property? | Does every instance with discrete datatype property restrictions necessarily possess some 'has_operation' relation to the 'Equal:discrete' operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined generator\nDescription: defined generator is a subclass of datatype generator. Every instance of defined generator is required to be associated with at least one defined datatype through the property is_member_of. This formalization ensures that defined generators are specifically linked to defined datatypes within the ontology.\nAxiom: {'subClassOf': ['datatype generator'], 'propertyRestrictions': ['[is_member_of only defined datatype]']}\nGenerated CQs:", "output": "Is it necessary for a generator to have the property 'is_member_of' with at least one defined datatype? | Can a generator exist without being a member of any defined datatype? | Does a generator always possess an association to some defined datatype through the 'is_member_of' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete base type\nDescription: discrete base type is defined as a subclass of base type, and is disjoint with real base type, ensuring that no individual can belong to both classes simultaneously. Members of this class participate in the role_of relationship with at least one discrete datatype, meaning that every discrete base type must be associated with some discrete datatype. This formalization distinguishes discrete base types from real base types and characterizes them by their association with discrete datatypes.\nAxiom: {'subClassOf': ['base type'], 'disjointWith': ['real base type'], 'propertyRestrictions': ['[role_of only discrete datatype]']}\nGenerated CQs:", "output": "Is every instance of discrete base type required to fulfill the role_of property with at least one discrete datatype? | Does discrete base type necessarily participate in the role_of relationship with some member of the discrete datatype class? | Are there any instances of discrete base type that do not have a role_of relation to any discrete datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record of boolean datatype\nDescription: record of boolean datatype is a subclass of record (tuple) datatype, disjoint from both record of real datatype and record of discrete datatype, ensuring that no individual can belong to any two of these classes simultaneously. Members of this class are characterized by having at least one member that is a boolean field-list, meaning each record must include at least one field of boolean type. This enforces that the records grouped under this class are distinguished by containing boolean data fields.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'disjointWith': ['record of real datatype', 'record of discrete datatype'], 'propertyRestrictions': ['[has_member only boolean field-list]']}\nGenerated CQs:", "output": "Is it required that a record includes at least one value for the field 'has_member' and that this value is of boolean type? | Must every record assign the 'has_member' property exclusively to fields of type boolean? | Can a record instance exist without providing a boolean value for the 'has_member' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unlabeled dataset record datatype\nDescription: unlabeled dataset record datatype is defined as a subclass of record (tuple) datatype. Members of this class are characterized by the presence of at least one has_member relationship to an unlabeled dataset field-list, meaning each record contains a list of fields but without associated labels. This structure is suitable for representing data records in datasets where attribute names are absent.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'propertyRestrictions': ['[has_member only unlabeled dataset field-list]']}\nGenerated CQs:", "output": "Does every unlabeled dataset record necessarily have at least one has_member relationship to an unlabeled dataset field-list? | Is it required for unlabeled dataset records to include some member from the unlabeled dataset field-list? | Can an unlabeled dataset record exist without being related via has_member to any unlabeled dataset field-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set of discrete datatype\nDescription: set of discrete datatype is defined as a subclass of set datatype, representing collections where each member belongs to a discrete base type (such as integers or other countable values). This class is explicitly disjoint from set of real datatype, ensuring that no instance can simultaneously be a set of both discrete and real datatypes. The axiom requires that every member of a set of discrete datatype must be of a discrete base type, emphasizing its use for finite or countably infinite elements.\nAxiom: {'subClassOf': ['set datatype'], 'disjointWith': ['set of real datatype'], 'propertyRestrictions': ['[has_member only discrete base type]']}\nGenerated CQs:", "output": "Must every instance in the set have at least one member of the specified discrete base type through the property 'has_member'? | Is it required that all elements related by 'has_member' belong to the discrete base type defined for the set? | Can any element in the set have a 'has_member' relationship to a value outside the defined discrete base type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate datatype\nDescription: aggregate datatype is defined as a subclass of generated datatype and is explicitly disjoint with non-aggregate datatype, ensuring that no individual can be both an aggregate and a non-aggregate datatype. It is characterized by having at least one member that is an aggregate generator (has_member some aggregate generator). Commonly referred to as a \"structured datatype,\" this class captures datatypes that are composed of multiple components or members rather than being atomic.\nAxiom: {'subClassOf': ['generated datatype'], 'disjointWith': ['non-aggregate datatype'], 'propertyRestrictions': ['[has_member only aggregate generator]']}\nGenerated CQs:", "output": "Is it required for an aggregate to have at least one member that is an aggregate generator? | Does every aggregate necessarily include some entity related by 'has_member' to the class aggregate generator? | Can an aggregate exist without having a 'has_member' relationship to any aggregate generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: date and time datatype\nDescription: date and time datatype is a subclass of non-numeric ordered primitive datatype, and is explicitly disjoint with ordinal datatype—meaning no instance can simultaneously belong to both classes. Members of this class possess qualities of being exact and potentially unbounded, and they necessarily have members such as date-time units, date-time radices, and date-time factors. The class supports specific operations, including extension, equality checking, ordering, difference calculation, and rounding of date and time values. This formalization ensures a precise and operation-rich definition of datatypes used for representing and manipulating combined date and time information, distinct from ordinal forms of data.\nAxiom: {'subClassOf': ['non-numeric ordered primitive datatype'], 'disjointWith': ['ordinal datatype'], 'propertyRestrictions': ['[has_operation some Extend:time&date]', '[has_operation some Equal:time&date]', '[has_operation some InOrder:time&date]', '[has_member some date-time unit]', '[has_operation some Difference:time&date]', '[has_quality some unbounded]', '[has_quality some exact]', '[has_operation some Round:time&date]', '[has_member some date-time factor]', '[has_member only date-time radix]']}\nGenerated CQs:", "output": "Is it required that has_member property of a date and time datatype always relates to at least one date-time radix? | Does every date and time datatype necessarily include a member that is a date-time radix? | Can a date and time datatype exist without being linked via has_member to any date-time radix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: datatype\nDescription: datatype is defined as a subclass of data representational model. Members of this class are characterized by three property restrictions: they possess at least one datatype property (has_quality some datatype property), are associated with at least one characterizing operation (has_operation some characterizing operation), and have at least one value space (has_attribute some value space). This formalization ensures that any individual classified as a datatype is a type of data representation distinguished by its qualities, the operations applicable to it, and its defined set of possible values.\nAxiom: {'subClassOf': ['data representational model'], 'propertyRestrictions': ['[has_operation some characterizing operation]', '[has_attribute some value space]', '[has_quality only datatype property]']}\nGenerated CQs:", "output": "Is it a requirement that instances must have at least one 'has_quality' property with a value of the specified datatype? | Are there any instances that lack the 'has_quality' property altogether under this restriction? | Does the ontology allow an individual to have multiple 'has_quality' relationships with values of the defined datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: complex datatype\nDescription: complex datatype is defined as a subclass of numeric primitive datatype and is disjoint with numeric ordered primitive datatype—meaning no individual can simultaneously belong to both classes. Members of this class are characterized as numeric, non-ordered, and approximate in nature. They support operations specific to complex numbers, such as reciprocal, negation, square root, multiplication, addition, promotion, and equality (all in the complex domain). Instances of complex datatype must include members such as complex radix and complex factor. This formalization captures the essential characteristics and operations associated with complex numbers in data representation, distinguishing them from ordered numeric primitive datatypes.\nAxiom: {'subClassOf': ['numeric primitive datatype'], 'disjointWith': ['numeric ordered primitive datatype'], 'propertyRestrictions': ['[has_operation some Reciprocal:complex]', '[has_operation some Negate:complex]', '[has_quality some non-ordered]', '[has_member some complex radix]', '[has_quality some numeric]', '[has_operation some SquareRoot:complex]', '[has_operation some Multiply:complex]', '[has_operation some Add:complex]', '[has_operation some Promote:complex]', '[has_member some complex factor]', '[has_operation some Equal:complex]', '[has_quality only approximate]']}\nGenerated CQs:", "output": "Is every complex entity required to have at least one quality that is approximate? | Does the existence of a complex entity entail the presence of some approximate quality? | Can a complex entity exist without being associated with an approximate quality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence datatype\nDescription: sequence datatype is defined as a subclass of homogenous aggregate datatype with variable size, and is explicitly disjoint with homogenous unordered aggregate datatype with variable size, ensuring no individual can belong to both classes. Members of this class are characterized by being non-ordered and non-numeric, containing only elements (members) of a base type and potentially a sequence generator. Sequence datatype supports several operations: checking for equality with another sequence, checking if the sequence is empty, retrieving the head (first element), appending elements, and retrieving the tail (all elements except the head). The inclusion of only these features signifies that sequence datatype represents an ordered, variable-sized, homogenous collection of elements with well-defined sequence-based operations.\nAxiom: {'subClassOf': ['homogenous aggregate datatype with variable size'], 'disjointWith': ['homogenous  unordered aggregate datatype with variable size'], 'propertyRestrictions': ['[has_operation some Equal:sequence]', '[has_quality some exact]', '[has_operation some IsEmpty:sequence]', '[has_quality some non-ordered]', '[has_operation some Head:sequence]', '[has_quality some non-numeric]', '[has_member some base type]', '[has_operation some Append:sequence]', '[has_operation some Tail:sequence]', '[has_member only sequence generator]']}\nGenerated CQs:", "output": "Must a sequence always have at least one member associated with a sequence generator? | Is the existence of a sequence generator mandatory for any member of a sequence? | Does every sequence necessarily require that at least one of its members is linked to a sequence generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bag datatype\nDescription: bag datatype is defined as a subclass of homogenous unordered aggregate datatype with variable size, and is explicitly disjoint with set datatype, ensuring that no instance can be both a bag and a set. Members of this class are characterized by containing elements (members) from a specified base type as well as from possible bag generators. Bags possess qualities of being non-ordered (element sequence is not significant), non-numeric, and \"exact\" (potentially referring to preserving element multiplicities). Bags support the following operations: Select, Insert, Delete, IsEmpty, Equal, and Serialize. This formalization models bags as flexible, unordered collections that can contain duplicate elements, are distinguished from sets by their handling of element multiplicity, and provide standard collection manipulation operations.\nAxiom: {'subClassOf': ['homogenous  unordered aggregate datatype with variable size'], 'disjointWith': ['set datatype'], 'propertyRestrictions': ['[has_quality some non-ordered]', '[has_operation some Insert:bag]', '[has_member some base type]', '[has_operation some Delete:bag]', '[has_operation some IsEmpty:bag]', '[has_operation some Equal:bag]', '[has_member some bag generator]', '[has_quality some non-numeric]', '[has_operation some Serialize:bag]', '[has_quality some exact]', '[has_operation only Select:bag]']}\nGenerated CQs:", "output": "Is it required that every bag instance must perform at least one 'Select:bag' operation? | Can any bag have an operation other than 'Select:bag', or is 'Select:bag' the only necessary operation for bags? | Does the existence of the 'has_operation' property for a bag necessarily imply the presence of a 'Select:bag' operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate field component\nDescription: aggregate field component is defined as a subclass of field component and is explicitly disjoint with primitive field component, meaning no instance can belong to both classes simultaneously. Every aggregate field component must play the role of or be associated with some aggregate datatype, as specified by the property restriction (role_of some aggregate datatype). This formalization captures that aggregate field components are complex field components characterized by their association with aggregate datatypes, distinguishing them from primitive field components.\nAxiom: {'subClassOf': ['field component'], 'disjointWith': ['primitive field component'], 'propertyRestrictions': ['[role_of only aggregate datatype]']}\nGenerated CQs:", "output": "Does every aggregate field necessarily include at least one component that plays the role_of some aggregate datatype? | Is it required for an aggregate field to have a component related through role_of to an aggregate datatype? | Can an aggregate field exist without any component that fulfills the role_of some aggregate datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-numeric primitive datatype\nDescription: non-numeric primitive datatype is a subclass of primitive datatype and is explicitly disjoint with numeric primitive datatype, ensuring no individual can belong to both classes simultaneously. Members of this class must possess at least one quality that is non-numeric, as specified by the existential property restriction [has_quality some non-numeric]. This formalization captures primitive datatypes whose essential characteristics are not quantifiable numerically.\nAxiom: {'subClassOf': ['primitive datatype'], 'disjointWith': ['numeric primitive datatype'], 'propertyRestrictions': ['[has_quality only non-numeric]']}\nGenerated CQs:", "output": "Is it necessary for a resource to have at least one 'has_quality' property value of non-numeric type? | Does the use of the 'has_quality' property guarantee assignment with only non-numeric values? | Can an entity exist without any non-numeric value for its 'has_quality' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-numeric unordered primitive datatype\nDescription: non-numeric unordered primitive datatype is defined as a subclass of non-numeric primitive datatype, and is explicitly disjoint with non-numeric ordered primitive datatype, ensuring that no datatype can simultaneously be both unordered and ordered. Members of this class are characterized by the property restriction that they possess the quality of being non-ordered (has_quality some non-ordered), indicating that instances do not have an inherent order among their possible values.\nAxiom: {'subClassOf': ['non-numeric primitive datatype'], 'disjointWith': ['non-numeric ordered primitive datatype'], 'propertyRestrictions': ['[has_quality only non-ordered]']}\nGenerated CQs:", "output": "Is every instance with property 'has_quality' required to have at least one value from the class 'non-ordered'? | Must the property 'has_quality' always relate to some individual classified as 'non-ordered'? | Does possessing the 'has_quality' property necessarily entail an association with a 'non-ordered' value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous aggregate datatype\nDescription: homogenous aggregate datatype is defined as a subclass of aggregate datatype, and is explicitly disjoint with heterogenous aggregate datatype, ensuring that no individual can belong to both classes simultaneously. Members of this class are characterized by the property that they must have at least one member that is a homogenous aggregate generator. This formalization captures collections whose elements are produced by uniform (homogeneous) mechanisms, distinguishing them from heterogeneous aggregates both in structure and membership requirements.\nAxiom: {'subClassOf': ['aggregate datatype'], 'disjointWith': ['heterogenous aggregate datatype'], 'propertyRestrictions': ['[has_member only homogenous aggregate generator]']}\nGenerated CQs:", "output": "Is every homogenous aggregate required to have at least one member that is a homogenous aggregate generator? | Does a homogenous aggregate necessarily possess the property 'has_member' with respect to a homogenous aggregate generator? | Can a homogenous aggregate exist without any association via 'has_member' to a homogenous aggregate generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target primitive field component\nDescription: target primitive field component is defined as a subclass of labeled dataset target field component, specializing the notion of dataset fields that serve as targets in labeled datasets. Individuals in this class must play the role of some real, discrete, or boolean datatype, meaning the value types associated with these components are restricted to basic primitive datatypes (real numbers, discrete values, or boolean values). This specification clarifies that target primitive field components are intended for use where target variables are representable by primitive datatypes.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only (real datatype or discrete datatype or boolean datatype)]']}\nGenerated CQs:", "output": "Is every target primitive field component required to participate in the role_of relationship with a real, discrete, or boolean datatype? | Can a target primitive field component have a role_of property with something that is not a real, discrete, or boolean datatype? | Are real datatype, discrete datatype, and boolean datatype the only types permitted in the role_of property for target primitive field components? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target discrete field component\nDescription: target discrete field component is defined as a subclass of labeled dataset target field component. It is characterized by having a role that is associated with some discrete datatype, meaning the data values it represents are distinct and separate (e.g., categories or integers) rather than continuous. This ensures that every target discrete field component specifically involves target fields where the underlying data type is discrete.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only discrete datatype]']}\nGenerated CQs:", "output": "Is it required that every target discrete field component is associated with some role_of discrete datatype? | Can a target discrete field component exist without having the role_of property with a discrete datatype? | Does having the role_of property with at least one discrete datatype qualify an entity as a target discrete field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target sequence of real field component\nDescription: target sequence of real field component is a subclass of labeled dataset target field component. Members of this class are characterized by having the role_of some sequence of real datatype, meaning that each instance serves as a target field in a labeled dataset and fills a role associated with a sequence of real numbers (e.g., real-valued vectors or time series). This formalization restricts class membership to those dataset components whose target data are structured as sequences of real numbers.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only sequence of real datatype]']}\nGenerated CQs:", "output": "Is every target sequence of real field component required to be associated by the role_of property with at least one value of the real datatype? | Can a target sequence of real field component exist without possessing the role_of relation to elements of the real type? | Does the class target sequence of real field component necessarily have a role_of property restricted only to instances of the real datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target DAG field component\nDescription: target DAG field component is defined as a subclass of labeled dataset target field component and is further characterized by the property restriction that it must serve in the role_of some DAG datatype. This means that any instance of target DAG field component is specifically related to Directed Acyclic Graph (DAG) datatypes, describing target fields in labeled datasets that are intended to represent or interact with DAG structures.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only DAG datatype]']}\nGenerated CQs:", "output": "Is every target DAG field component required to have at least one property that fulfills the role_of some DAG datatype condition? | Can a target DAG field component lack the role_of relationship to any DAG datatype? | Does the existence of a role_of connection to a DAG datatype define the target DAG field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target set of discrete field component\nDescription: target set of discrete field component is defined as a subclass of labeled dataset target field component. Every individual in this class must play the role of some set of discrete datatype, meaning each component serves as a target field in a labeled dataset whose values are constrained to a discrete set. This ensures that the target values for this component are not continuous but instead belong to a well-defined set, aligning with tasks such as multi-class classification in machine learning.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only set of discrete datatype]']}\nGenerated CQs:", "output": "Must every target set of discrete field component have at least one role_of relation to a set of discrete datatype? | Is it required for the target set of discrete field component to be connected, through the role_of property, to a set of discrete datatype? | Does the existence of a target set of discrete field component imply that it plays the role_of with some set of discrete datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target record of boolean field component\nDescription: target record of boolean field component is defined as a subclass of labeled dataset target field component. Members of this class are characterized by the property that they play the role_of some record of boolean datatype, indicating that these components specifically serve as targets in datasets where the associated data is restricted to boolean (true/false) values. This formalization ensures that any instance of this class must be linked to records containing only boolean-typed data, supporting clear distinction in data modeling for boolean-labeled target fields.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only record of boolean datatype]']}\nGenerated CQs:", "output": "Is every target record required to have at least one property restriction where the role_of property relates to a record with a boolean datatype? | Can a target record exist without having any role_of property pointing to a record with a boolean value? | Does the ontology allow a target record to have role_of relationships only with records of non-boolean datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target record of reals field component\nDescription: target record of reals field component is defined as a subclass of labeled dataset target field component. Each member of this class must fulfill the property restriction of being the role_of some record of real datatype, ensuring that instances of this class represent components associated with labeled dataset targets, specifically those that play a role in or are linked to data records typed as real values (real numbers).\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only record of real datatype]']}\nGenerated CQs:", "output": "Must every target record of reals field component have the role_of property relating it to at least one record of real datatype? | Is it mandatory for each target record of reals field component to participate in a role_of relationship with some instance classified as a record of real datatype? | Can a target record of reals field component exist without having the role_of property to any record of real datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive record of primitives field component\nDescription: descriptive record of primitives field component is a subclass of labeled dataset descriptive field component. Every instance of this class must be associated, via the property role_of, with at least one record of primitives datatype. This formalization indicates that members play a specific role in describing labeled datasets by being directly linked to data representations consisting of primitive types.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of only record of primitives datatype]']}\nGenerated CQs:", "output": "Does every descriptive record of primitives field component necessarily have a role_of relation with some record of primitives datatype? | Are all instances of descriptive record of primitives field component required to participate in at least one role_of relation with a record of primitives datatype? | Is it possible for a descriptive record of primitives field component not to be related via role_of to any record of primitives datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive record of boolean field component\nDescription: A descriptive record of boolean field component is defined as a subclass of labeled dataset descriptive field component. Any instance of this class must play the role of some record associated with a boolean datatype, signifying that its descriptive information pertains specifically to data fields that store boolean values.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of only record of boolean datatype]']}\nGenerated CQs:", "output": "Must every descriptive record of a boolean field component have at least one 'role_of' relation to a record of boolean datatype? | Is it required that any descriptive record of a boolean field component be linked by 'role_of' only to records of boolean datatype? | Are there descriptive records of boolean field components that lack any 'role_of' connection with a record of boolean datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive set of integer field component\nDescription: descriptive set of integer field component is a subclass of labeled dataset descriptive field component. Members of this class are characterized by having a role that involves some association with a set of integer datatype. This formalization ensures that any individual belonging to this class serves as a descriptive field within a labeled dataset, specifically representing or relating to a set of integer values.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of only set of integer datatype]']}\nGenerated CQs:", "output": "Is every descriptive set of integer field component required to have at least one role_of relationship to a set of integer datatype? | Must all descriptive sets of integer field components be assigned some role_of that connects them with a set of integer datatype? | Does the presence of a role_of link to a set of integer datatype necessarily characterize every descriptive set of integer field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Datatype Specification Language Representation\nDescription: Datatype Specification Language Representation is a class that is characterized by the requirement that its members must represent at least one datatype. There are no explicit superclass constraints, but it is formally defined such that any individual of this class must be linked via the 'represents' property to some datatype.\nAxiom: {'subClassOf': ['representation'], 'propertyRestrictions': ['[represents some datatype]']}\nGenerated CQs:", "output": "Is Datatype Specification Language Representation categorized under the broader class of representation? | Which representation subclasses include Datatype Specification Language Representation? | What are the parent classes of Datatype Specification Language Representation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined generator parameter\nDescription: defined generator parameter is a subclass of specification. This means that any individual classified as a defined generator parameter necessarily inherits all properties and constraints of a specification. There are no additional property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['specification'], 'propertyRestrictions': ['[has_identifier some parameter identifier]']}\nGenerated CQs:", "output": "Must every defined generator parameter have at least one 'has_identifier' relationship with a parameter identifier? | Is it required that a defined generator parameter is associated, via the 'has_identifier' property, to some parameter identifier? | Can a defined generator parameter exist without any 'has_identifier' link to a parameter identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: extending subtype generator\nDescription: An extending subtype generator is a class defined by the property restriction that it must have at least one member (has_member) belonging to the class extended-value-list. There are no specified superclasses, indicating that its primary defining characteristic is this existential relationship to extended-value-list.\nAxiom: {'subClassOf': ['subtype generator'], 'propertyRestrictions': ['[has_member some extended-value-list]']}\nGenerated CQs:", "output": "Is extending subtype generator categorized under subtype generator? | Which generators are classified as subtypes of subtype generator, including extending subtype generator? | What broader generator categories does extending subtype generator fall into? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: size subtype generator\nDescription: size subtype generator is a class whose members are defined by having at least one associated member via the has_member property that is of type size. This means any instance of size subtype generator must be linked to at least one instance of size, ensuring that all members are characterized by their connection to a size entity.\nAxiom: {'subClassOf': ['subtype generator'], 'propertyRestrictions': ['[has_member some size]']}\nGenerated CQs:", "output": "Is size subtype generator categorized under subtype generator? | What specific types are included within the broader class of subtype generator? | Which more general classes is size subtype generator a member of? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous aggregate generator with variable size\nDescription: homogenous aggregate generator with variable size is defined as a subclass of homogenous aggregate generator. This class inherits all properties and constraints of homogenous aggregate generators, and is intended to represent a specialized type where variable sizing is a distinguishing feature, although no further property restrictions are formally stated in the current axioms.\nAxiom: {'subClassOf': ['homogenous aggregate generator'], 'propertyRestrictions': ['[has_quality some variable size]']}\nGenerated CQs:", "output": "Is every homogenous aggregate generator required to have at least one quality corresponding to variable size? | Can a homogenous aggregate generator exist without exhibiting the variable size quality? | Does the property 'has_quality' for homogenous aggregate generators necessarily include variable size among its attributes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set generator\nDescription: set generator is a class defined by possessing certain qualities, specifically: every instance must have at least some quality of \"access by value\" and must also exhibit the quality of \"unique values.\" There are no specified superclasses. This means any member of the set generator class is characterized by being accessed by value and ensuring that its values are unique.\nAxiom: {'subClassOf': ['homogenous unordered aggregate generator with variable size'], 'propertyRestrictions': ['[has_quality some access by value]', '[has_quality some unique values]']}\nGenerated CQs:", "output": "Is every set generator classified under homogenous unordered aggregate generator with variable size? | Which specific generators fall under the category of homogenous unordered aggregate generator with variable size? | What broader categories include set generator as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: table generator\nDescription: table generator is defined as a class whose members possess several distinguishing qualities: they must exhibit non-unique values, have variable size, function as unordered aggregates, and possess a two-dimensional structure. These axioms constrain instances of table generator to entities that generate collections or aggregates of values in a two-dimensional, unordered manner, where the values are not necessarily unique and the total number of elements can vary.\nAxiom: {'subClassOf': ['heterogenous aggregate generator'], 'propertyRestrictions': ['[has_quality some non-unique values]', '[has_quality some variable size]', '[has_quality some unordered aggregate]', '[has_quality some two dimensional]']}\nGenerated CQs:", "output": "Is table generator classified under the broader category of heterogenous aggregate generator? | What specific types are encompassed by heterogenous aggregate generator, including table generator? | To which higher-level categories does table generator belong within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: choice generator\nDescription: choice generator is defined as a subclass of non-aggregate generator. This means every instance of choice generator is also an instance of non-aggregate generator, inheriting all its characteristics. There are no additional property restrictions specified for this class.\nAxiom: {'subClassOf': ['non-aggregate generator'], 'propertyRestrictions': ['[is_member_of some choice datatype]']}\nGenerated CQs:", "output": "Is it required that a choice generator possesses at least one is_member_of relationship with an instance of the choice datatype? | Can a choice generator exist without being linked to any element from the choice datatype through the is_member_of property? | Are all choice generators necessarily associated via is_member_of with members from the specified choice datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record (tuple) datatype\nDescription: The class \"record (tuple) datatype\" is characterized by several structural and behavioral properties: its members must possess at least one quality that is non-numeric, exact, and non-ordered. Each instance must be composed of member elements, specifically a record generator and a field-list. Additionally, this class supports several operations, including field selection (FieldSelect:record), field replacement (FieldReplace:record), and equality checking (Equal:record). These axioms formally define the class as an exact, non-numeric, non-ordered data structure with specialized field-based operations and a specified internal composition.\nAxiom: {'subClassOf': ['heterogenous aggregate datatype'], 'propertyRestrictions': ['[has_quality some non-numeric]', '[has_operation some FieldSelect:record]', '[has_operation some Equal:record]', '[has_quality some exact]', '[has_quality some non-ordered]', '[has_member some record generator]', '[has_operation some FieldReplace:record]', '[has_member some field-list]']}\nGenerated CQs:", "output": "Is every record (tuple) datatype classified under heterogenous aggregate datatype? | What specific datatypes are recognized as subclasses of heterogenous aggregate datatype, including record (tuple) datatype? | Which broader categories encompass the record (tuple) datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete-value identifier\nDescription: discrete-value identifier is defined as a subclass of identifier. This means every discrete-value identifier is an identifier, inheriting its general properties. No additional property restrictions or disjointness axioms are specified, so this class is characterized primarily by its position within the identifier hierarchy.\nAxiom: {'subClassOf': ['identifier'], 'propertyRestrictions': ['[has-value some rdfs:Literal]']}\nGenerated CQs:", "output": "Does every discrete-value identifier necessarily have a value for the property 'propertyRestrictions' that is a literal? | Is it required that each discrete-value identifier possesses at least one propertyRestrictions value belonging to rdfs:Literal? | Can a discrete-value identifier exist without having propertyRestrictions set to any literal value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: access type\nDescription: access type is defined as a class equivalent to the union of direct access property and indirect access property. This means that any instance of access type must be either a direct access property or an indirect access property, and vice versa. There are no additional subclass or disjointness constraints specified for this class.\nAxiom: {'subClassOf': ['aggregate generator property'], 'equivalentClass': ['(direct access property or indirect acess property)']}\nGenerated CQs:", "output": "Is access type categorized under aggregate generator property? | Which types are more specific than aggregate generator property, such as access type? | What broader property classes include access type as a specialized type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dimensionality\nDescription: dimensionality is a class defined as equivalent to the union of one dimensional, two dimensional, or multi dimensional. This means that any instance of dimensionality must be either one dimensional, two dimensional, or multi dimensional, and vice versa. No other types are permitted as instances of dimensionality outside these specified categories.\nAxiom: {'subClassOf': ['aggregate generator property'], 'equivalentClass': ['(one dimensional or two dimensional or multi dimensional)']}\nGenerated CQs:", "output": "Does dimensionality fall under the classification of aggregate generator property? | Which properties are more specific than aggregate generator property, such as dimensionality? | What broader property categories is dimensionality a member of? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined datatype\nDescription: defined datatype is a subclass of datatype, characterized by the requirement that it must have at least one member generated by a defined generator. This means every instance of defined datatype is associated with some entity that acts as its defined generator, ensuring a specific mechanism for the generation of its members.\nAxiom: {'subClassOf': ['datatype'], 'propertyRestrictions': ['[has_member some defined generator]', '[has_member some defined datatype parameter-list]']}\nGenerated CQs:", "output": "Is it required that an instance with defined datatype propertyRestrictions must have at least one has_member relationship to a defined datatype parameter-list? | Can something be described by defined datatype propertyRestrictions if it does not have any has_member relation to parameter-list? | Does the existence of defined datatype propertyRestrictions imply the presence of at least one member drawn from parameter-list via has_member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined datatype parameter\nDescription: defined datatype parameter is a class whose members are required to have an identifier (via the has_identifier property) and to be members of a defined datatype parameter-list (through the is_member_of property). Additionally, all instances of this class must play the role_of some datatype. There are no explicit superclass relationships specified for this class. These constraints formally specify that any defined datatype parameter is uniquely identified, associated with a particular datatype parameter list, and fulfills a datatype-related role.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[has_identifier some parameter identifier]', '[is_member_of some defined datatype parameter-list]', '[role_of some datatype]']}\nGenerated CQs:", "output": "Is defined datatype parameter classified under datatype role? | Which roles encompass defined datatype parameter as a specific member? | What more general concepts does defined datatype parameter fall under with respect to datatype role? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: field component\nDescription: field component is a class characterized by the presence of two property restrictions: every instance plays some role with respect to a datatype (role_of some datatype) and possesses at least one identifier of type field identifier (has_identifier some field identifier). This formalization ensures that any individual classified as a field component is associated with a datatype through a specific role and is uniquely identified by at least one field identifier.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[role_of some datatype]', '[has_identifier some field identifier]']}\nGenerated CQs:", "output": "Does field component fall under the category of datatype role? | What components are classified as more specific types within datatype role, including field component? | Which broader categories encompass field component as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: alternative component\nDescription: alternative component is defined as a subclass of datatype role and is further characterized by the property that it must have at least one member that is of the alternative-type. This means that any individual belonging to the class alternative component is necessarily a kind of datatype role and is linked, via the has_member property, to at least one alternative-type entity.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[has_member some alternative-type]', '[has_member some tag-value list]']}\nGenerated CQs:", "output": "Is it required that an alternative component must have at least one member belonging to a tag-value list? | Can an alternative component exist without having any member that is included in a tag-value list? | Are all alternative components necessarily associated with the has_member property linked to some tag-value list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index-type\nDescription: index-type is defined as a subclass of datatype role. Members of this class are required to have at least one member that is an index upperbound and at least one member that is an index lowerbound. Additionally, each index-type must be a member of some index-type list. This formalization ensures that index-types are characterized both by their bounds (upper and lower) and by their participation in larger index-type lists.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[has_member some index upperbound]', '[is_member_of some index-type list]', '[has_member some index lowerbound]', '[role_of some datatype]']}\nGenerated CQs:", "output": "Is it required that every index-type has at least one role_of relationship to a datatype? | Can an index-type exist without being associated through role_of to any datatype? | Does the presence of a role_of link with a datatype distinguish index-type from other classes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete field-list\nDescription: discrete field-list is a class defined by the property restriction that every instance must have at least one member that is a discrete field component. This means each discrete field-list contains one or more discrete field components, but no additional subclass or disjointness constraints are specified.\nAxiom: {'subClassOf': ['field-list'], 'propertyRestrictions': ['[has_member some discrete field component]']}\nGenerated CQs:", "output": "Is discrete field-list categorized under field-list? | What types are included within the field-list category? | Which general groupings contain discrete field-list as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: primitive field-list\nDescription: primitive field-list is defined as a subclass of field-list, meaning every primitive field-list is also a field-list. There are no additional property restrictions specified, so primitive field-list inherits all characteristics of field-list without further constraints.\nAxiom: {'subClassOf': ['field-list'], 'propertyRestrictions': ['[has_member some primitive field component]']}\nGenerated CQs:", "output": "Is every primitive field-list required to have at least one 'has_member' relationship with a primitive field component? | Can a primitive field-list exist if it does not include any primitive field component as a member? | Does the existence of a 'primitive field-list' imply the presence of a related 'primitive field component' via the 'has_member' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: attribute-list\nDescription: attribute-list is defined as a subclass of list specification. This means that every attribute-list is a type of list specification, inheriting all general characteristics of list specifications, but with no additional property restrictions specified.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member some attribute component]']}\nGenerated CQs:", "output": "Is it required that every attribute-list includes at least one component as a member? | Does the existence of a member with the attribute 'component' suffice for something to be classified under attribute-list? | Can an attribute-list be identified solely by having the property 'has_member' with at least one component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: alternative-list\nDescription: alternative-list is defined as a subclass of list specification. This means that every alternative-list is a type of list specification, inheriting all its characteristics, but may have additional properties or constraints not specified in this axiom. No additional property restrictions or disjointness are defined for this class.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member some alternative component]']}\nGenerated CQs:", "output": "Must every alternative-list include at least one alternative component as a member? | Is it required that alternative-list items possess a member that is classified as an alternative component? | Does the structure of alternative-list entail having some association with an alternative component through the has_member property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined datatype parameter-list\nDescription: defined datatype parameter-list is a subclass of list specification. This means every defined datatype parameter-list is a kind of list specification, inheriting its general properties and constraints. There are no additional property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member some defined datatype parameter]']}\nGenerated CQs:", "output": "Is it required for a parameter-list to have at least one has_member relationship with a defined datatype parameter? | Can a parameter-list exist without including any defined datatype parameter as a member? | Does every instance of parameter-list necessarily possess a has_member link with some defined datatype parameter? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: extended-value-list\nDescription: extended-value-list is defined as a subclass of list specification. This means that every extended-value-list is a specific kind of list specification, inheriting all its characteristics. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_identifier some extended-value identifier]']}\nGenerated CQs:", "output": "Is every instance of an extended-value-list required to have at least one has_identifier relationship with an extended-value identifier? | Can an extended-value-list exist without being linked by has_identifier to an extended-value identifier? | Does the presence of the has_identifier property between an extended-value-list and an extended-value identifier define the membership of extended-value-list in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: field-list\nDescription: field-list is a class whose members are characterized by containing at least one field component via the has_member property. There are no explicit superclass assignments or additional constraints, so any individual in this class must be related through has_member to at least one field component.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member some field component]']}\nGenerated CQs:", "output": "Is field-list classified as a subtype of list specification? | What broader category does field-list fall under within the list specification hierarchy? | Which list specification subclasses encompass field-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous aggregate datatype with variable size\nDescription: homogenous aggregate datatype with variable size is a class defined by the property restriction that its members must have at least one member that is a homogenous aggregate generator with variable size. This implies that each instance of this class is composed, at minimum, of one such generator, capturing the characteristic of a homogenous aggregate whose overall size can vary.\nAxiom: {'subClassOf': ['homogenous aggregate datatype'], 'propertyRestrictions': ['[has_member some homogenous aggregate generator with variable size]']}\nGenerated CQs:", "output": "Can a homogenous aggregate datatype with variable size be classified under homogenous aggregate datatype? | What are the specific types categorized as homogenous aggregate datatype, including those with variable size? | Which general datatype categories include homogenous aggregate datatype with variable size as a specialization? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: rational datatype\nDescription: rational datatype is defined as a subclass of numeric ordered primitive datatype. Instances of rational datatype support a range of operations, including addition, multiplication, negation, equality testing, promotion, calculation of reciprocals, enforcement of non-negativity, and ordering comparisons—each operation resulting in another rational value. Members of this class are characterized by numeric, exact, and unbounded qualities, ensuring precise representation and manipulation without inherent range limitations.\nAxiom: {'subClassOf': ['numeric ordered primitive datatype'], 'propertyRestrictions': ['[has_operation some Multiply:rational]', '[has_operation some Reciprocal:rational]', '[has_quality some numeric]', '[has_operation some NonNegative:rational]', '[has_operation some Promote:rational]', '[has_operation some Equal:rational]', '[has_operation some Add:rational]', '[has_operation some Negate:rational]', '[has_quality some exact]', '[has_operation some InOrder:rational]', '[has_quality some unbounded]', '[has_quality some ordered]']}\nGenerated CQs:", "output": "Does every rational entity necessarily have at least one quality that is ordered? | Can a rational entity exist without the property 'has_quality' relating it to at least one ordered item? | Is it required that rational entities be associated exclusively with qualities that are ordered? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate generator\nDescription: aggregate generator is defined as a class equivalent to the union of array generator, bag generator, class generator, record generator, sequence generator, set generator, and table generator. This means any individual classified as an aggregate generator is necessarily an instance of at least one of these generator classes, reflecting its role in producing or managing aggregate data structures in various forms.\nAxiom: {'subClassOf': ['generated datatype generator'], 'equivalentClass': ['(array generator or bag generator or class generator or record generator or sequence generator or set generator or table generator)']}\nGenerated CQs:", "output": "Does every aggregate generator fall under the category of generated datatype generator? | Which generator types are encompassed by the generated datatype generator class? | To which higher-level classes does aggregate generator pertain within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: vector datatype\nDescription: vector datatype is defined as a subclass of array datatype, indicating that every vector datatype is a specific kind of array datatype. There are no additional property restrictions constraining this class. This formalization means that all characteristics of array datatype apply to vector datatype, but not necessarily vice versa.\nAxiom: {'subClassOf': ['array datatype'], 'propertyRestrictions': ['[has_member some vector generator]']}\nGenerated CQs:", "output": "Is every instance with a 'has_member' relation to a vector required to be associated with a vector generator? | Can an entity with the 'has_member' property pointing to a vector be something other than a vector generator? | Are all entities that have members of type vector necessarily linked to a vector generator through the 'has_member' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boolean field component\nDescription: boolean field component is defined as a subclass of primitive field component. This means every boolean field component inherits all the characteristics of a primitive field component but is further distinguished as representing a boolean value (true/false). There are no additional property restrictions specified for this class.\nAxiom: {'subClassOf': ['primitive field component'], 'propertyRestrictions': ['[role_of some boolean datatype]']}\nGenerated CQs:", "output": "Is it required that the 'component' property of a boolean field always relates only to values of the boolean datatype? | Can a boolean field have a 'component' relationship to any entity that is not of boolean datatype? | Does every instance of a boolean field necessarily possess at least one 'component' that is a boolean datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: pointer datatype\nDescription: pointer datatype is defined as a subclass of non-aggregate datatype. It is characterized by several property restrictions: each instance must have some qualities that are non-ordered, non-numeric, and exact; must have members of both pointer generator and pointer-element-type; and must support an operation of Dereference:pointer. This ensures that pointer datatype is a non-aggregate datatype with specific qualities and structural members, and is associated with a dereference operation, aligning with typical formalizations of pointer representations in data models.\nAxiom: {'subClassOf': ['non-aggregate datatype'], 'propertyRestrictions': ['[has_quality some non-ordered]', '[has_quality some non-numeric]', '[has_member some pointer generator]', '[has_member some pointer-element-type]', '[has_operation some Dereference:pointer]', '[has_quality some exact]', '[has_operation some Equal:pointer]']}\nGenerated CQs:", "output": "Is every instance of pointer required to have at least one has_operation relationship with an individual of type Equal:pointer? | Must a pointer necessarily be associated with an Equal:pointer entity through the has_operation property? | Can a pointer exist without having has_operation linked to any Equal:pointer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: procedure datatype\nDescription: procedure datatype is defined as a subclass of non-aggregate datatype, representing a data type that is not composed of multiple aggregated elements. Members of this class are constrained by the following: they possess at least one non-numeric quality and at least one quality of being exact; they necessarily include as members a procedure generator, a procedure-parameter-list, and a return-parameter specification. Additionally, procedure datatypes support the operations Equal:procedure and Invoke:procedure. This characterization ensures that a procedure datatype is a precise, non-aggregate entity equipped for procedural operations with defined parameters and qualities.\nAxiom: {'subClassOf': ['non-aggregate datatype'], 'propertyRestrictions': ['[has_quality some non-numeric]', '[has_member some procedure generator]', '[has_quality some exact]', '[has_member some procedure-parameter-list]', '[has_member some return-parameter specification]', '[has_operation some Equal:procedure]', '[has_operation some Invoke:procedure]', '[has_quality some non-ordered]']}\nGenerated CQs:", "output": "Is every procedure required to have at least one has_quality relationship to a non-ordered value? | Can a procedure exist without exhibiting the has_quality property to a non-ordered entity? | Does the property restriction on procedures mean that non-ordered qualities are necessarily associated with them via has_quality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: upper bound\nDescription: upper bound is defined as a subclass of bound. This means every individual that is an upper bound is also a bound, inheriting all the characteristics of the bound class. No additional property restrictions have been specified for this class.\nAxiom: {'subClassOf': ['bound'], 'propertyRestrictions': ['[has-value exactly 1 xsd:integer]']}\nGenerated CQs:", "output": "Is it required that an upper bound always has exactly one property restriction with a value of type integer? | Can an upper bound possess more than one property restriction assigned to integer values? | Are multiple xsd:integer values allowed for the property restriction in the context of an upper bound? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index upperbound\nDescription: index upperbound is defined as a subclass of bound. This indicates that every index upperbound is a type of bound, inheriting all general characteristics of bounds. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['bound'], 'propertyRestrictions': ['[has-value exactly 1 xsd:integer]']}\nGenerated CQs:", "output": "Is an index upperbound characterized by having exactly one value of type xsd:integer for its property restrictions? | Can an index upperbound have more than one xsd:integer value as a property restriction? | Must the property restriction for index upperbound be limited to a single xsd:integer value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boolean datatype\nDescription: boolean datatype is defined as a subclass of non-numeric unordered primitive datatype. Each boolean datatype must possess at least one non-numeric and exact quality. It is characterized by specific logical operations: Not, And, Or, and Equal, with the results of these operations also being booleans. This formalization distinguishes boolean datatypes from other datatypes by their operations and by disallowing numeric and ordered qualities.\nAxiom: {'subClassOf': ['non-numeric unordered primitive datatype'], 'propertyRestrictions': ['[has_quality some non-numeric]', '[has_quality some exact]', '[has_operation some Not:boolean]', '[has_operation some And:boolean]', '[has_operation some Or:boolean]', '[has_operation some Equal:boolean]', '[has_quality some non-ordered]']}\nGenerated CQs:", "output": "Is every instance with the property 'has_quality' necessarily associated with at least one 'non-ordered' value? | Does the presence of 'has_quality' for an entity imply it must exhibit some form of 'non-ordered' quality? | Can an entity qualify if it does not have the 'has_quality' property linked to a 'non-ordered' value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real base type\nDescription: real base type is defined as a subclass of base type. It inherits all characteristics of base type but is not further restricted by any additional property constraints. This class serves to specialize base type within the ontology hierarchy without imposing further conditions.\nAxiom: {'subClassOf': ['base type'], 'propertyRestrictions': ['[role_of some real datatype]']}\nGenerated CQs:", "output": "Is it necessary for a real base type to have the property 'role_of' with at least one real datatype? | Which kinds of real datatypes must be associated with real base types through the 'role_of' property? | Can a real base type exist without having a 'role_of' relationship to any real datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record of primitives datatype\nDescription: record of primitives datatype is a class whose members are defined by having at least one member from primitive field-list through the property has_member. There are no superclass assignments, and the only necessary condition for membership is the existence of at least one has_member relationship to a primitive field-list element.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'propertyRestrictions': ['[has_member some primitive field-list]']}\nGenerated CQs:", "output": "Is record of primitives datatype encompassed within the record (tuple) datatype category? | Which datatypes are specialized forms of record (tuple) datatype, including record of primitives datatype? | What broader datatype categories does record of primitives datatype fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record of discrete datatype\nDescription: record of discrete datatype is defined as a subclass of record (tuple) datatype. This indicates that any instance of record of discrete datatype inherits all the structural characteristics of a record (tuple) datatype, but is specifically tailored to represent records whose elements are of discrete datatypes. There are no additional property restrictions specified for this class.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'propertyRestrictions': ['[has_member some discrete field-list]']}\nGenerated CQs:", "output": "Must every record of discrete datatype necessarily have at least one has_member relationship to an entity within discrete field-list? | Is it obligatory for a record of discrete datatype to include a member from the discrete field-list through the has_member property? | Can a record of discrete datatype exist without the has_member property linking it to some element of the discrete field-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set of real datatype\nDescription: set of real datatype is a class whose members are characterized by the property that they have at least one member belonging to the real base type. This means any instance of set of real datatype must contain at least one element that is a real number, as specified by the property restriction [has_member some real base type]. There are no additional subclass conditions or disjointness axioms specified.\nAxiom: {'subClassOf': ['set datatype'], 'propertyRestrictions': ['[has_member some real base type]']}\nGenerated CQs:", "output": "Is the set of real datatype encompassed within the set datatype category? | Which datatype classes are direct specializations of set datatype, such as set of real datatype? | To which datatype hierarchies does set of real datatype belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-aggregate datatype\nDescription: non-aggregate datatype is defined as a class whose members are characterized by having at least one relationship via the property has_member to some individual of the class non-aggregate generator. This means that every instance of non-aggregate datatype must be associated with at least one non-aggregate generator through the has_member property.\nAxiom: {'subClassOf': ['generated datatype'], 'propertyRestrictions': ['[has_member some non-aggregate generator]']}\nGenerated CQs:", "output": "Does every non-aggregate datatype belong under the category of generated datatype? | Which datatypes are explicitly classified as specializations of generated datatype? | To what higher-level datatype categories does non-aggregate datatype correspond? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ordinal datatype\nDescription: ordinal datatype is defined as a class whose members possess the qualities of being bounded below, unbounded above, ordered, non-numeric, and exact. Ordinal datatypes support specific operations, including InOrder, Successor, and Equal, each applied within the context of ordinal values. These restrictions ensure that instances of ordinal datatype represent ordered entities with a clear sense of sequence, are not inherently numeric, and have well-defined ordering and comparison capabilities.\nAxiom: {'subClassOf': ['non-numeric ordered primitive datatype'], 'propertyRestrictions': ['[has_operation some InOrder:ordinal]', '[has_quality some bounded below]', '[has_quality some unbounded above]', '[has_quality some ordered]', '[has_operation some Successor:ordinal]', '[has_operation some Equal:ordinal]', '[has_quality some non-numeric]', '[has_quality some exact]']}\nGenerated CQs:", "output": "Is ordinal datatype encompassed within the general classification of non-numeric ordered primitive datatype? | Which datatypes are more specialized forms of non-numeric ordered primitive datatype, including ordinal datatype? | What higher-level categories can ordinal datatype be assigned to within the datatype hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: range\nDescription: range is defined as a subclass of value expression. Members of this class are characterized by the property restriction that they must have at least one member related via the has_member property to an upper bound. This specifies that any range must include some upper bound among its members.\nAxiom: {'subClassOf': ['value expression'], 'propertyRestrictions': ['[has_member some upper bound]', '[has_member some lower bound]']}\nGenerated CQs:", "output": "Is every value of the property 'has_member' required to include at least one instance from the class 'lower bound'? | Does enforcing the property restriction 'has_member some lower bound' ensure that any entity linked by 'has_member' must have a member from the 'lower bound' class? | Can an entity have the 'has_member' property without referencing at least one 'lower bound' individual? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: numeric ordered primitive datatype\nDescription: numeric ordered primitive datatype is a class characterized by members that possess some quality of being ordered. This class is not asserted as a subclass of any other class, but every instance must exhibit the property has_quality with a value from the class ordered, indicating inherent orderability within its definition.\nAxiom: {'subClassOf': ['numeric primitive datatype'], 'propertyRestrictions': ['[has_quality some ordered]']}\nGenerated CQs:", "output": "Is numeric ordered primitive datatype one of the specific types classified under numeric primitive datatype? | What datatypes fall under the broader category of numeric primitive datatype, such as numeric ordered primitive datatype? | Which higher-level datatype categories include numeric ordered primitive datatype as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence of real datatype\nDescription: sequence of real datatype is a class whose members are defined by the property restriction that each individual must have at least one member that is of the real base type. This means that any instance of this class represents a sequence containing one or more elements, with each element being a real number.\nAxiom: {'subClassOf': ['sequence datatype'], 'propertyRestrictions': ['[has_member some real base type]']}\nGenerated CQs:", "output": "Is sequence of real datatype a specialization of sequence datatype? | Which datatypes fall under the general class of sequence datatype, including sequence of real datatype? | What broader datatype categories encompass sequence of real datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set datatype\nDescription: set datatype is defined as a subclass of homogenous unordered aggregate datatype with variable size. Members of this class are characterized by having the following operations: set creation (Lsln:set, SetOf:set, Empty:set), set operations (Union:set, Intersection:set, Difference:set, Subset:set, Equal:class, Select:set), and membership relations (has_member some base type, has_member some set generator). Sets of this datatype possess qualities of being non-numeric and exact. This formalization enforces that each set is unordered, contains only elements of a single base type, and supports essential set-theoretic operations and properties as required by mathematical set theory and data modeling.\nAxiom: {'subClassOf': ['homogenous  unordered aggregate datatype with variable size'], 'propertyRestrictions': ['[has_operation some Lsln:set]', '[has_operation some Intersection:set]', '[has_member some base type]', '[has_operation some SetOf:set]', '[has_member some set generator]', '[has_operation some Select:set]', '[has_operation some Equal:class]', '[has_quality some non-numeric]', '[has_quality some exact]', '[has_operation some Empty:set]', '[has_operation some Difference:set]', '[has_operation some Union:set]', '[has_operation some Subset:set]', '[has_quality some non-ordered]']}\nGenerated CQs:", "output": "Must every instance that has 'has_quality' property possess at least one 'non-ordered' quality? | Is it obligatory for an entity with the 'has_quality' relation to always be associated with some non-ordered attribute? | Are there any entities for which the 'has_quality' property exists but does not connect to a non-ordered value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: primitive field component\nDescription: primitive field component is defined as a class whose instances must participate in the role_of property with at least one primitive datatype. This means that every primitive field component is related, via the role_of relationship, to some instance of a primitive datatype. There are no specified superclasses or disjointness axioms for this class.\nAxiom: {'subClassOf': ['field component'], 'propertyRestrictions': ['[role_of some primitive datatype]']}\nGenerated CQs:", "output": "Is primitive field component a specialized form within the broader class of field component? | Which entities are direct subclasses of field component, including primitive field component? | What higher-level classes encompass primitive field component in the ontology hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: numeric primitive datatype\nDescription: numeric primitive datatype is defined as a class whose members are entities that must possess some numeric quality, as indicated by the restriction that each instance has at least one quality classified as numeric. There are no explicitly stated superclasses for this class.\nAxiom: {'subClassOf': ['primitive datatype'], 'propertyRestrictions': ['[has_quality some numeric]']}\nGenerated CQs:", "output": "Is numeric primitive datatype categorized under the broader class of primitive datatype? | Which datatypes are considered specializations of primitive datatype, specifically including numeric primitive datatype? | To which more general datatype groups does numeric primitive datatype belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: heterogenous aggregate generator\nDescription: heterogenous aggregate generator is defined as any instance that is equivalent to either a generator, a record generator, or a table datatype, and possesses at least one quality that is heterogenous. This means that members of this class share essential characteristics with these three types and are distinguished by the presence of diverse or varied qualities.\nAxiom: {'subClassOf': ['aggregate generator'], 'equivalentClass': ['(class generator or record generator or table datatype)'], 'propertyRestrictions': ['[has_quality some heterogenous]']}\nGenerated CQs:", "output": "Is a heterogenous aggregate generator classified as a kind of aggregate generator? | Which aggregate generator types encompass heterogenous aggregate generators as subclasses? | What broader generator categories include heterogenous aggregate generator within their hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: heterogenous aggregate datatype\nDescription: heterogenous aggregate datatype is defined as a subclass of aggregate datatype. This class consists of aggregate datatypes where the constituent elements can be of different types or classes, distinguishing it from homogeneous aggregates where all elements must belong to the same type. No additional property restrictions are specified for this class.\nAxiom: {'subClassOf': ['aggregate datatype'], 'propertyRestrictions': ['[has_member some heterogenous aggregate generator]']}\nGenerated CQs:", "output": "Is every heterogenous aggregate required to have at least one member that is a heterogenous aggregate generator? | Must the property 'has_member' for a heterogenous aggregate always include a heterogenous aggregate generator as a possible member? | Can a heterogenous aggregate exist without being associated, via 'has_member', to any heterogenous aggregate generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: indirect acess property\nDescription: indirect access property is defined as a subclass of access type. This means that every instance of indirect access property is also an instance of access type, inheriting all characteristics and constraints of access type. There are no specified equivalent classes, so its definition relies solely on its subclass relationship.\nAxiom: {'subClassOf': ['access type'], 'equivalentClass': ['(access by value or implementation dependent access or position access)']}\nGenerated CQs:", "output": "Is an indirect access property necessarily either an access by value, an implementation dependent access, or a position access? | Is the class of indirect access property equivalent to the union of access by value, implementation dependent access, and position access? | Are there any types of access that are not covered by access by value, implementation dependent access, or position access when defining indirect access property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target boolean field component\nDescription: target boolean field component is defined as a subclass of labeled dataset target field component. This means every target boolean field component is also a labeled dataset target field component, but with more specific characteristics determined by its context or further specialization. No additional property restrictions are specified for this class.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some boolean datatype]']}\nGenerated CQs:", "output": "Is every instance of 'target' required to have the 'component' property with at least one value linked to the role_of property associated with a boolean datatype? | Can 'target' possess the 'component' property only if there is a related role_of property with values of boolean type? | Does the definition of 'target' entail that the 'component' property must always reference some boolean value through the role_of property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target real field component\nDescription: target real field component is defined as a subclass of labeled dataset target field component. This indicates that every target real field component inherits the properties and constraints of labeled dataset target field component, while potentially introducing further specification or specialization. There are no additional property restrictions defined for this class.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some real datatype]']}\nGenerated CQs:", "output": "Is every target real field component required to play the role_of property with at least one real datatype? | Can a target real field component exist without having a role_of relationship to any real datatype? | Does the ontology restrict target real field components to only have role_of relationships with real datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target hierarchical field component\nDescription: A target hierarchical field component is defined as a subclass of labeled dataset target field component. This indicates that every instance of target hierarchical field component is also considered a labeled dataset target field component, inheriting its properties and characteristics. No additional property restrictions are specified for this class.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some (tree datatype or DAG datatype)]']}\nGenerated CQs:", "output": "Is every target hierarchical field component necessarily associated through the 'role_of' property with either a tree datatype or a DAG datatype? | Can a target hierarchical field component have the 'role_of' property linked to both a tree datatype and a DAG datatype? | Does the presence of a 'role_of' relationship to any datatype other than tree or DAG preclude the entity from being classified as a target hierarchical field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target tree field component\nDescription: target tree field component is a class whose individuals are characterized by participating in a role_of relationship with at least one instance of tree datatype. There are no asserted superclasses, and its primary defining feature is its existential property restriction linking it to tree datatype.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some tree datatype]']}\nGenerated CQs:", "output": "Is target tree field component a specific type of labeled dataset target field component? | Which field components are classified under labeled dataset target field component, including target tree field component? | What broader classifications does target tree field component fall under in the dataset context? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target record of primitives field component\nDescription: target record of primitives field component is defined as any individual that plays a role in relation to at least one record of primitives datatype. This class has a property restriction, requiring that its members must be connected by the relation 'role_of' to some instance of record of primitives datatype. No additional subclass relationships are specified.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some record of primitives datatype]']}\nGenerated CQs:", "output": "Is every target record of primitives field component categorized under labeled dataset target field component? | Which specialized components fall under labeled dataset target field component, such as target record of primitives field component? | What are the parent classes of target record of primitives field component within the dataset ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target record of discrete field component\nDescription: target record of discrete field component is defined as any entity that has the role_of relationship to some record of discrete datatype. This class has a necessary condition that its instances must participate in the role_of property with at least one record of discrete datatype. No additional subclass relationships or disjointness axioms are specified.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some record of discrete datatype]']}\nGenerated CQs:", "output": "Is every target record of discrete field component classified under labeled dataset target field component? | What are the more specific concepts included within labeled dataset target field component, such as target record of discrete field component? | To which overarching categories does target record of discrete field component belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target structured field component\nDescription: target structured field component is defined as a subclass of labeled dataset target field component. This indicates that every target structured field component is also a labeled dataset target field component, inheriting all characteristics of its superclass. No additional property restrictions or disjointness axioms are specified, so its meaning is fully determined by its subclass relationship.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some (table datatype or array datatype or class datatype or sequence datatype or bag datatype or set datatype)]']}\nGenerated CQs:", "output": "Is every target structured field component required to have a role_of relationship with at least one of the following datatypes: table, array, class, sequence, bag, or set? | Does the definition of target structured field component necessitate that its role_of property is fulfilled by at least one datatype among table, array, class, sequence, bag, or set? | Can a target structured field component possess a role_of relation to any datatype beyond table, array, class, sequence, bag, or set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive record of reals field component\nDescription: descriptive record of reals field component is defined as a subclass of labeled dataset descriptive field component. This means that any instance of descriptive record of reals field component is also considered a labeled dataset descriptive field component, inheriting all associated characteristics. No additional property restrictions are specified for this class.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of some record of real datatype]']}\nGenerated CQs:", "output": "Is every descriptive record of a reals field component required to have at least one 'role_of' relationship with a record of real datatype? | Can a descriptive record of a reals field component exist without being related via 'role_of' to any record of real datatype? | Does the ontology ensure that the presence of the 'role_of' property in a descriptive record of a reals field component necessarily points to an individual of type record of real datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive record of discrete field component\nDescription: descriptive record of discrete field component is defined as any entity that plays the role_of some record of discrete datatype. This means that every instance of this class must be related via the role_of property to at least one record of discrete datatype, reflecting its function as a descriptive entity specifically associated with discrete data records.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of some record of discrete datatype]']}\nGenerated CQs:", "output": "Is every descriptive record of discrete field component classified under labeled dataset descriptive field component? | Which entities fall under the labeled dataset descriptive field component category, such as descriptive record of discrete field component? | What broader categories include descriptive record of discrete field component as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive strucured field component\nDescription: descriptive structured field component is defined as a subclass of labeled dataset descriptive field component. This indicates that every descriptive structured field component inherits all characteristics of a labeled dataset descriptive field component and specializes it, but no additional property restrictions are imposed for further differentiation.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of some (array datatype or class datatype or sequence datatype or bag datatype or set datatype)]']}\nGenerated CQs:", "output": "Must every descriptive structured field component play a role in at least one array, class, sequence, bag, or set datatype? | Is it required that a descriptive structured field component serves in a role involving only array, class, sequence, bag, or set datatypes? | Can a descriptive structured field component have the role_of property with any datatype type other than array, class, sequence, bag, or set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_identifier\nDescription: The property \"has_identifier\" is defined as a sub-property of \"has_attribute\" and does not have explicitly stated characteristics, domain, or range restrictions. It represents an attribute relationship, likely used to associate an entity with a unique identifier, though no inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Which properties are considered subproperties under has_attribute? | Is has_identifier categorized as a subproperty of has_attribute? | Does assigning a has_identifier property inherently assign a has_attribute property as well? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is_member_of\nDescription: The property \"is_member_of\" does not have specified domain or range restrictions and has no special characteristics defined. It is a sub-property of \"attribute_of\" and has \"has_member\" as its inverse property. This property is used to relate an entity to a group or collection to which it belongs.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['attribute_of'], 'inverseOf': []}\nGenerated CQs:", "output": "What is the logical connection between ‘is_member_of’ and ‘has_member’ in the ontology? | If entity A is a member of entity B, does that entail that B has member A according to the ontology? | Which property is declared as the inverse of ‘is_member_of’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is_quality_of\nDescription: The property \"is_quality_of\" has no explicitly defined characteristics, domain, or range restrictions, and is not specified as a sub-property of any other property. It is defined as the inverse of the property \"has_quality,\" indicating that it relates a quality to the entity it qualifies.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What is the logical connection between ‘is_quality_of’ and ‘has_quality’ as defined in the ontology? | If entity A is related to entity B via ‘is_quality_of’, does this entail that B is related to A via ‘has_quality’? | Which object property is specified as the inverse of ‘is_quality_of’ in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: identifier_for\nDescription: The property \"identifier_for\" does not specify explicit domain or range restrictions and has no defined characteristics. It is a sub-property of \"attribute_of\" and serves as the inverse of the property \"has_identifier.\" This property is used to relate an identifier to the entity it identifies, reflecting an attribute relationship between the identifier and the entity.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['attribute_of'], 'inverseOf': []}\nGenerated CQs:", "output": "What is the logical correspondence between the properties ‘identifier_for’ and ‘has_identifier’ in the ontology? | If entity A is identified by B using ‘identifier_for’, does it follow that B has A as an identifier via ‘has_identifier’? | Which property operates as the inverse of ‘identifier_for’ in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: represents\nDescription: The property \"represents\" has no explicitly defined domain, range, or characteristics, and does not specify an inverse property. It is a sub-property of owl:topObjectProperty, indicating it is a very general object property that can relate any two individuals in the ontology. No further semantic constraints are provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is represents a subproperty of any top-level object property in the ontology? | Which properties are classified as superproperties of represents? | Does every use of the represents property imply a relationship defined by the most general object property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_attribute\nDescription: The property \"has_attribute\" has no explicitly defined characteristics, domain, or range restrictions. It is a sub-property of owl:topObjectProperty and is defined as being its own inverse property, indicating a symmetric relationship. No additional description is currently provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "What is the inverse property associated with ‘has_attribute’ defined in the ontology? | If entity A has an attribute B, can we infer that B has an attribute A within the ontology’s structure? | How does the ontology specify the logical connection between ‘has_attribute’ and its inverse? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: role_of\nDescription: The property \"role_of\" does not have explicitly specified domain or range restrictions and lacks defining characteristics. It is a sub-property of \"owl:topObjectProperty\" and has \"has_role\" as its inverse property. This property is typically used to relate a role to an entity, indicating that the entity plays or fulfills a particular role.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "How are 'role_of' and 'has_role' semantically connected as inverse properties in the ontology? | If entity E is linked to F via 'role_of', does the ontology entail that F is connected to E via 'has_role'? | Which property is defined as the inverse of 'role_of' in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is_operation_of\nDescription: The property \"is_operation_of\" has no explicitly defined domain or range restrictions and does not possess any special logical characteristics. It is defined as a sub-property of \"attribute_of,\" indicating that it represents a specific kind of attributions between entities. Additionally, it has an inverse property \"has_operation,\" establishing a bidirectional relationship between related entities.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['attribute_of'], 'inverseOf': []}\nGenerated CQs:", "output": "How are the properties ‘is_operation_of’ and ‘has_operation’ interconnected in the ontology? | If an entity X is an operation of Y, does it follow that Y has operation X under the ontology’s semantics? | Which property is designated as the inverse of ‘is_operation_of’ in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has-value\nDescription: The property \"has-value\" does not have explicitly defined characteristics, domain, range, super-properties, or inverse properties. This indicates a general-purpose property whose usage and constraints are not restricted by axioms in the current ontology specification.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can anything be the domain of the 'has-value' property, or is its domain truly undefined? | What types of entities, if any, can act as subjects for the 'has-value' property? | Can 'has-value' relate to objects other than those with a specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: attribute_of\nDescription: The property \"attribute_of\" has no explicitly defined characteristics, domain, or range restrictions. It is not specified as a sub-property of any other property and does not have an inverse property. This property can be used generally to relate an attribute to any entity without further ontological constraints.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'attribute_of' does not have a specified domain? | What are the possible domains for the property 'attribute_of'? | What kinds of entities can be the range of the property 'attribute_of'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: owl:topObjectProperty\nDescription: The property \"owl:topObjectProperty\" has no specified domain, range, characteristics, super-properties, or inverse property. It is the most general object property in OWL ontologies, capable of relating any pair of individuals without restriction.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'owl:topObjectProperty' relate to any type of object as its range? | Are there restrictions on the types of subjects that owl:topObjectProperty can be used with? | Is it valid for owl:topObjectProperty to lack a specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is-about\nDescription: The property \"is-about\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. It can be used without restriction between individuals, as no specific limitations or semantics are imposed by the given axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "Is is-about classified as a subproperty of owl:topObjectProperty? | Which superproperties are associated with is-about in the ontology? | What subproperties, if any, are defined under owl:topObjectProperty? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_operation\nDescription: The property \"has_operation\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. Its usage and interpretation are not restricted by axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['has_attribute'], 'inverseOf': []}\nGenerated CQs:", "output": "Is every instance of has_operation necessarily an instance of has_attribute? | Which properties are defined as subproperties under has_attribute? | What superproperties are associated with has_operation in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_role\nDescription: The property \"has_role\" has no specified characteristics, domain, range, super-properties, or inverse properties. It serves as a general-purpose property with no explicit usage constraints.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "Is has_role a specialization of owl:topObjectProperty? | Which properties are classified as subproperties under owl:topObjectProperty? | Does the assertion of has_role between entities entail a more general relationship as defined by owl:topObjectProperty? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_quality\nDescription: The property \"has_quality\" has no specified characteristics, domain, range, super-properties, or inverse properties. This indicates it is a general-purpose property that can relate any entities to unspecified qualities, without imposed logical constraints.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "Is has_quality a subproperty of owl:topObjectProperty? | Which properties are subproperties of owl:topObjectProperty? | What superproperties does has_quality have within the property hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_member\nDescription: The property \"has_member\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. It can be used to relate any entities without restriction and does not inherit constraints from other properties.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['has_attribute'], 'inverseOf': []}\nGenerated CQs:", "output": "Is has_member considered a specific type of has_attribute property? | Which properties are categorized as subproperties of has_attribute? | What are the direct superproperties of has_member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: denotes\nDescription: The property \"denotes\" has no explicitly defined characteristics, domain or range restrictions, super-properties, or inverse properties. This indicates that it can be used flexibly to relate any two entities without ontological constraints.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['is-about'], 'inverseOf': []}\nGenerated CQs:", "output": "Which properties are defined as subproperties under is-about, such as denotes? | Does an assertion using denotes also satisfy constraints requiring is-about? | What superproperties are associated with denotes in the ontology hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S1_P11_WalkingTask\nDescription: S1_P11_WalkingTask is a subclass of DirectedTask, representing a specific type of directed task that involves walking. Every instance of this class is required to have at least some measuredData of type GaitData as well as some LatencyData, and the measuredData associated with any instance may only be of types GaitData, LatencyData, or StressData. This ensures that S1_P11_WalkingTask is characterized by the collection and analysis of gait and latency information, with the potential inclusion of stress-related data during walking activities.\nAxiom: {'subClassOf': ['DirectedTask'], 'propertyRestrictions': ['[measuredData some LatencyData]', '[measuredData some GaitData]']}\nGenerated CQs:", "output": "Is it required that S1_P11_WalkingTask has measuredData exclusively of type GaitData, LatencyData, or StressData? | May S1_P11_WalkingTask ever have measuredData relating to any data type aside from GaitData, LatencyData, or StressData? | Does the ontology prohibit S1_P11_WalkingTask from being associated with measuredData outside the categories of GaitData, LatencyData, or StressData? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S1_P21_SentenceRepeatingTask\nDescription: S1_P21_SentenceRepeatingTask is a subclass of DirectedTask characterized by measuredData properties. Every instance must have at least one measuredData value of type MoodVoiceData and at least one of type LatencyData. The measuredData property for this class can only be filled with LatencyData, MoodVoiceData, or StressData, and no other types. This structure ensures the task consistently collects both mood/voice and latency data, restricting measured data types to those specifically listed.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[measuredData some MoodVoiceData]', '[measuredData only (LatencyData or MoodVoiceData or StressData)]', '[measuredData some LatencyData]']}\nGenerated CQs:", "output": "Is S1_P21_SentenceRepeatingTask categorized as a kind of DirectedTask? | Which specialized tasks fall under the category of DirectedTask, such as S1_P21_SentenceRepeatingTask? | What broader task categories encompass S1_P21_SentenceRepeatingTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ClinicalRecord\nDescription: ClinicalRecord is defined as a class that must contain exactly one instance each of AutonomyAssessment, MotricityAbilitiesAssessment, CognitiveAbilitiesAssessment, and DiagnosisAssessment. Furthermore, the containsAssessment property for any ClinicalRecord instance is restricted to only those assessments that are of type AutonomyAssessment, CognitiveAbilitiesAssessment, DiagnosisAssessment, MotricityAbilitiesAssessment, or NeuropsychiatricAndMoodAssessment. This ensures that every ClinicalRecord is a structured record of clinical assessments, each holding exactly one specific assessment of autonomy, motricity abilities, cognitive abilities, and diagnosis, with assessments strictly limited to the defined set.\nAxiom: {'propertyRestrictions': ['[containsAssessment exactly 1 AutonomyAssessment]', '[containsAssessment exactly 1 MotricityAbilitiesAssessment]', '[containsAssessment exactly 1 CognitiveAbilitiesAssessment]', '[containsAssessment exactly 1 DiagnosisAssessment]']}\nGenerated CQs:", "output": "Is a ClinicalRecord permitted to contain any assessment type apart from AutonomyAssessment, CognitiveAbilitiesAssessment, DiagnosisAssessment, MotricityAbilitiesAssessment, or NeuropsychiatricAndMoodAssessment? | Must every assessment included in a ClinicalRecord be either an AutonomyAssessment, CognitiveAbilitiesAssessment, DiagnosisAssessment, MotricityAbilitiesAssessment, or NeuropsychiatricAndMoodAssessment? | Does the ontology prevent ClinicalRecord from containing assessments outside the set of AutonomyAssessment, CognitiveAbilitiesAssessment, DiagnosisAssessment, MotricityAbilitiesAssessment, or NeuropsychiatricAndMoodAssessment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ExperimentalRecord\nDescription: ExperimentalRecord represents a record comprised of exactly one assessment of each of the following types: ExperimentalDiagnosisAssessment, CognitiveLoadAssessment, AbilityToOrganiseAssessment, FunctionalAbilityAssessment, MemorySelfAppraisalAssessment, GaitAssessment, ApathyAssessment, and StressAssessment. The class restricts its containsAssessment property so that only these eight specific assessment types are included—no additional or alternative types are permitted. Each ExperimentalRecord must contain exactly one instance of each assessment type, ensuring comprehensive and standardized coverage within each record.\nAxiom: {'propertyRestrictions': ['[containsAssessment exactly 1 ExperimentalDiagnosisAssessment]', '[containsAssessment only (AbilityToOrganiseAssessment or ApathyAssessment or CognitiveLoadAssessment or ExperimentalDiagnosisAssessment or FunctionalAbilityAssessment or GaitAssessment or MemorySelfAppraisalAssessment or StressAssessment)]', '[containsAssessment exactly 1 AbilityToOrganiseAssessment]', '[containsAssessment exactly 1 FunctionalAbilityAssessment]', '[containsAssessment exactly 1 MemorySelfAppraisalAssessment]', '[containsAssessment exactly 1 GaitAssessment]', '[containsAssessment exactly 1 ApathyAssessment]', '[containsAssessment exactly 1 StressAssessment]']}\nGenerated CQs:", "output": "Is it required that an ExperimentalRecord contains exactly one CognitiveLoadAssessment as an assessment? | Can an ExperimentalRecord have either no CognitiveLoadAssessment or more than one CognitiveLoadAssessment through the containsAssessment property? | Does the definition of ExperimentalRecord enforce that the containsAssessment property is limited to a single CognitiveLoadAssessment instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Task\nDescription: Task is defined as a class whose members are associated with exactly one start time and exactly one end time, each of which must be an instance of time:Instant. Additionally, every Task must have some measuredData, and all such measuredData must be of type StressData. These property restrictions ensure that every Task is temporally bounded and is characterized by stress-related measurements.\nAxiom: {'propertyRestrictions': ['[startTime exactly 1 time:Instant]', '[measuredData some StressData]', '[startTime only time:Instant]', '[endTime only time:Instant]', '[measuredData only StressData]']}\nGenerated CQs:", "output": "Is every Task required to have exactly one endTime specified as a time:Instant? | Can a Task have more than one endTime assigned? | Is it permissible for a Task to not have any endTime at all? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AbilityToOrganiseAssessment\nDescription: AbilityToOrganiseAssessment is defined as a subclass of ExperimentalAssessment. This means that every AbilityToOrganiseAssessment is an instance of ExperimentalAssessment, inheriting all its general characteristics. This class specifically represents assessments focusing on the capacity to organise or structure experimental tasks or processes. No further property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['ExperimentalAssessment']}\nGenerated CQs:", "output": "Which categories of ExperimentalAssessment encompass AbilityToOrganiseAssessment as a specific type? | What are the more specific assessment abilities that fall under ExperimentalAssessment? | Is AbilityToOrganiseAssessment classified as a kind of ExperimentalAssessment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ApathyAssessment\nDescription: ApathyAssessment is defined as a subclass of ExperimentalAssessment. This means that every ApathyAssessment is a specific type of ExperimentalAssessment, inheriting all characteristics of the latter. It is used to systematically evaluate or measure apathy within an experimental or research context.\nAxiom: {'subClassOf': ['ExperimentalAssessment']}\nGenerated CQs:", "output": "Which broader assessment classes does ApathyAssessment fall under? | What are the types of assessments classified under ExperimentalAssessment, including ApathyAssessment? | Is ApathyAssessment categorized as a form of ExperimentalAssessment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FunctionalAbilityAssessment\nDescription: FunctionalAbilityAssessment is defined as a subclass of ExperimentalAssessment. This means every FunctionalAbilityAssessment is also an ExperimentalAssessment, inheriting its characteristics. No further restrictions or disjointness axioms are specified, so FunctionalAbilityAssessment can be understood as a specialized form of ExperimentalAssessment focused on evaluating functional abilities.\nAxiom: {'subClassOf': ['ExperimentalAssessment']}\nGenerated CQs:", "output": "What types of assessments fall within ExperimentalAssessment, including FunctionalAbilityAssessment? | Which parent classes encompass FunctionalAbilityAssessment? | Is FunctionalAbilityAssessment categorized under ExperimentalAssessment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MemorySelfAppraisalAssessment\nDescription: MemorySelfAppraisalAssessment is defined as a subclass of ExperimentalAssessment. This means it represents a specific type of assessment conducted in an experimental context, which focuses on evaluating an individual's own appraisal or judgement of their memory abilities. Members of this class inherit all characteristics of ExperimentalAssessment, while emphasizing the self-evaluation of memory performance.\nAxiom: {'subClassOf': ['ExperimentalAssessment']}\nGenerated CQs:", "output": "Which overarching assessment categories include MemorySelfAppraisalAssessment as a member? | What specific types of ExperimentalAssessment does MemorySelfAppraisalAssessment represent? | Is MemorySelfAppraisalAssessment classified under the broader category of ExperimentalAssessment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: StressAssessment\nDescription: StressAssessment is defined as a subclass of ExperimentalAssessment, indicating it inherits all properties of ExperimentalAssessment. This class represents assessments specifically designed to evaluate stress within an experimental context. No additional property restrictions or disjointness axioms are specified, so it can encompass any form of assessment fitting this criterion.\nAxiom: {'subClassOf': ['ExperimentalAssessment']}\nGenerated CQs:", "output": "Is StressAssessment classified under the broader type of ExperimentalAssessment? | Which types of assessments are categorized as subkinds of ExperimentalAssessment, such as StressAssessment? | To what higher-level assessment classes does StressAssessment belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HandTrajectoryType\nDescription: HandTrajectoryType is defined as a subclass of Type. This class represents a specific categorization or kind of type that pertains to hand trajectory, inheriting all characteristics of Type. No additional axioms or restrictions are specified.\nAxiom: {'subClassOf': ['Type']}\nGenerated CQs:", "output": "What categories encompass HandTrajectoryType as a member, given its position under Type? | Which concepts are directly organized under the class Type, including HandTrajectoryType? | Is HandTrajectoryType classified as a more specific concept under Type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AnswerPhoneTask\nDescription: AnswerPhoneTask is defined as a subclass of SemiDirectedTask, indicating that it inherits all characteristics of semi-directed tasks but is specialized for the context of answering phone calls. This classification asserts that every instance of AnswerPhoneTask is also an instance of SemiDirectedTask, typically involving user interaction with some degree of guidance but not complete direction. No additional property or disjointness axioms are specified.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "Which higher-level task types include AnswerPhoneTask as a specialization? | Does AnswerPhoneTask fall under the broader classification of SemiDirectedTask? | What specific tasks are encompassed by the category SemiDirectedTask, such as AnswerPhoneTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CallPsychologistTask\nDescription: CallPsychologistTask is defined as a subclass of SemiDirectedTask. This classification indicates that any instance of CallPsychologistTask inherits all properties of SemiDirectedTask, representing a specific type of task that involves some level of pre-defined guidance or structure. No additional distinguishing properties or constraints are specified beyond its membership in the SemiDirectedTask category.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "Is CallPsychologistTask classified as a kind of SemiDirectedTask? | What broader task types encompass CallPsychologistTask? | Which specific tasks are categorized under SemiDirectedTask, including CallPsychologistTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: EstablishAccountBalanceTask\nDescription: EstablishAccountBalanceTask is defined as a subclass of SemiDirectedTask, indicating that it inherits all properties and constraints of SemiDirectedTask. This class represents tasks specifically related to establishing or determining an account balance, and it is semantically positioned within the ontology as a type of semi-directed task. No further restrictions or differentiators are specified in the current axioms.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "Which tasks are defined as more specific than SemiDirectedTask, including EstablishAccountBalanceTask? | Is EstablishAccountBalanceTask a specialized form of SemiDirectedTask? | What broader task categories include EstablishAccountBalanceTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FindBusLineOnMapTask\nDescription: FindBusLineOnMapTask is defined as a subclass of SemiDirectedTask. This indicates that any instance of FindBusLineOnMapTask inherits the characteristics of a semi-directed task, which typically involves guidance but allows for a degree of user autonomy. The class is intended to represent tasks in which the objective is to locate a specific bus line on a map interface.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "What are the general task categories that FindBusLineOnMapTask is associated with? | Which tasks are categorized as specialized forms of SemiDirectedTask, specifically including FindBusLineOnMapTask? | Does FindBusLineOnMapTask fall under the broader classification of SemiDirectedTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LeaveRoomTask\nDescription: LeaveRoomTask is defined as a subclass of SemiDirectedTask. This means that every LeaveRoomTask must fulfill all the characteristics of a SemiDirectedTask, but it represents a more specific type of task centered on the activity of leaving a room. No additional restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "What higher-level task categories include LeaveRoomTask as a member? | Is LeaveRoomTask categorized as a type of SemiDirectedTask? | Which specific tasks fall under the broader classification of SemiDirectedTask, including LeaveRoomTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PayBillTask\nDescription: PayBillTask is defined as a subclass of SemiDirectedTask, indicating it represents a specific type of task that involves partial direction or guidance in execution. No additional axioms are specified, so PayBillTask inherits all the general properties and constraints associated with SemiDirectedTask, and further characterizes tasks that involve the process of paying a bill.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "To which higher-level task categories is PayBillTask hierarchically connected? | Is PayBillTask classified as a more specific type under the umbrella of SemiDirectedTask? | What are all the tasks that fall under the SemiDirectedTask category, including PayBillTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PrepareDrugBoxTask\nDescription: PrepareDrugBoxTask is defined as a subclass of SemiDirectedTask, indicating that it inherits all characteristics of semi-directed tasks. Individuals classified under PrepareDrugBoxTask represent tasks involving the preparation of drug boxes, and these tasks exhibit the general properties and constraints established for semi-directed tasks within the ontology. No additional restrictions or properties are specified beyond its subclass relationship.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "What tasks are classified under SemiDirectedTask, including PrepareDrugBoxTask? | Is PrepareDrugBoxTask categorized as a form of SemiDirectedTask? | Which higher-level task categories does PrepareDrugBoxTask belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PrepareHotTeaTask\nDescription: PrepareHotTeaTask is defined as a subclass of SemiDirectedTask, indicating that it inherits all characteristics of semi-directed tasks. This class represents activities or processes specifically related to the preparation of hot tea, encompassing all steps that are partially guided yet allow for some flexibility in execution. There are currently no additional restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "What are the broader categories encompassing PrepareHotTeaTask? | Which tasks fall under the category of SemiDirectedTask, such as PrepareHotTeaTask? | Is PrepareHotTeaTask recognized as a specialized form of SemiDirectedTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ReadArticleTask\nDescription: ReadArticleTask is defined as a subclass of SemiDirectedTask. This means that any instance of ReadArticleTask is also an instance of SemiDirectedTask, inheriting its characteristics and constraints. The class represents tasks that involve reading articles and fall within the category of semi-directed activities, which typically allow for some guidance or structure while retaining a degree of autonomy for the task performer.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "Does the concept of ReadArticleTask fall within the broader class of SemiDirectedTask? | Which tasks are classified under SemiDirectedTask, such as ReadArticleTask? | What general task categories encompass ReadArticleTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TurnOnTVTask\nDescription: TurnOnTVTask is defined as a subclass of SemiDirectedTask. This means that every TurnOnTVTask is a type of semi-directed task, typically characterized by having some predefined structure or guidance but allowing for some user input or variation. There are no additional property restrictions or disjointness axioms specified, so TurnOnTVTask is generally understood to represent any task that involves turning on a TV, within the broader category of semi-directed tasks.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "What hierarchy of broader task categories does TurnOnTVTask fall under? | Is TurnOnTVTask categorized as a type of SemiDirectedTask? | Which tasks are considered to be specializations of SemiDirectedTask, for example TurnOnTVTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: WaterPlantTask\nDescription: WaterPlantTask is defined as a subclass of SemiDirectedTask, indicating that it inherits all the characteristics of semi-directed tasks. Members of this class represent tasks specifically concerned with watering plants, and they share any constraints or properties specified for semi-directed tasks.\nAxiom: {'subClassOf': ['SemiDirectedTask']}\nGenerated CQs:", "output": "Is WaterPlantTask encompassed by the broader class of SemiDirectedTask? | Which tasks are classified as specializations under SemiDirectedTask, such as WaterPlantTask? | To which overarching task groups does WaterPlantTask belong within the hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MoodVoiceData\nDescription: MoodVoiceData is a subclass of MeasuredData, indicating that it represents a specific type of measured information. Members of the MoodVoiceData class are characterized by being data entities whose primary function is to capture or represent aspects related to mood as conveyed through voice. This classification ensures that any instance of MoodVoiceData inherits all properties and characteristics of MeasuredData, with a particular focus on mood-related voice data.\nAxiom: {'subClassOf': ['MeasuredData']}\nGenerated CQs:", "output": "Which specialized types are encompassed by MeasuredData, such as MoodVoiceData? | Is MoodVoiceData classified under the category of MeasuredData? | Of what general categories is MoodVoiceData a specific instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DirectedDiscussionTask\nDescription: DirectedDiscussionTask is defined as a subclass of DiscussionTask. This means every DirectedDiscussionTask is a type of DiscussionTask, inheriting its general characteristics. There are no additional restrictions, property constraints, or disjointness axioms specified for this class. Its primary distinguishing feature lies in its hierarchical placement within the ontology.\nAxiom: {'subClassOf': ['DiscussionTask']}\nGenerated CQs:", "output": "To which broader categories does DirectedDiscussionTask belong within the task hierarchy? | Which task types are encompassed by DiscussionTask, specifically including DirectedDiscussionTask? | Is DirectedDiscussionTask classified as a more specific form of DiscussionTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FreeDiscussionTask\nDescription: FreeDiscussionTask is defined as a subclass of DiscussionTask. This means that every FreeDiscussionTask inherits all properties and characteristics of DiscussionTask, while potentially introducing further specializations specific to free-form or open-ended discussions. No additional constraints or distinguishing features are specified in the current axiom.\nAxiom: {'subClassOf': ['DiscussionTask']}\nGenerated CQs:", "output": "Is FreeDiscussionTask categorized as a kind of DiscussionTask? | Within which broader categories is FreeDiscussionTask classified? | Which task types are direct specializations of DiscussionTask, such as FreeDiscussionTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DirectedTask\nDescription: DirectedTask is defined as a subclass of Task. This means that every DirectedTask is a type of Task, inheriting all general characteristics of Task, but is further specialized to represent a more specific kind or instance within that broader category. No additional restrictions or differentiating axioms are specified beyond its hierarchical position in relation to Task.\nAxiom: {'subClassOf': ['Task']}\nGenerated CQs:", "output": "Which subclasses fall under Task, including DirectedTask? | What are the direct superclasses associated with DirectedTask? | Is DirectedTask categorized under the broader class of Task? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S3_P21_PictureDescriptionTask\nDescription: S3_P21_PictureDescriptionTask is defined as a subclass of FreeDiscussionTask. This means that every instance of S3_P21_PictureDescriptionTask is also an instance of FreeDiscussionTask, inheriting all the properties and constraints applicable to free discussion tasks. No additional restrictions or differentiating features beyond this specialization are specified by the axioms.\nAxiom: {'subClassOf': ['FreeDiscussionTask']}\nGenerated CQs:", "output": "What higher-level categories encompass S3_P21_PictureDescriptionTask within the task taxonomy? | Which task types fall under the broader class of FreeDiscussionTask, such as S3_P21_PictureDescriptionTask? | Is S3_P21_PictureDescriptionTask recognized as a specialized form of FreeDiscussionTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S3_P22_PictureDiscussionTask\nDescription: S3_P22_PictureDiscussionTask is defined as a subclass of FreeDiscussionTask. This means that every instance of S3_P22_PictureDiscussionTask is also considered a FreeDiscussionTask, inheriting all characteristics and constraints of FreeDiscussionTask, while potentially introducing additional specificity relevant to picture discussion activities.\nAxiom: {'subClassOf': ['FreeDiscussionTask']}\nGenerated CQs:", "output": "Which general discussion task categories encompass S3_P22_PictureDiscussionTask? | What discussion tasks are specialized forms of FreeDiscussionTask, such as S3_P22_PictureDiscussionTask? | Is S3_P22_PictureDiscussionTask classified as a more specific type of FreeDiscussionTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CognitiveLoadAssessment\nDescription: CognitiveLoadAssessment is defined as a subclass of ExperimentalAssessment, representing a specific type of assessment dedicated to measuring cognitive load in experimental contexts. Members of this class are characterized by having exactly one dual task score and exactly one mono task score, with both scores required to be data literals. This formalization ensures that each instance of CognitiveLoadAssessment includes precisely one measurable outcome for both mono-task and dual-task conditions, facilitating standardized evaluation and comparison of cognitive load across assessments.\nAxiom: {'subClassOf': ['ExperimentalAssessment'], 'propertyRestrictions': ['[hasDualTaskScore exactly 1]', '[hasMonoTaskScore exactly 1]', '[hasMonoTaskScore only rdfs:Literal]', '[hasDualTaskScore some rdfs:Literal]']}\nGenerated CQs:", "output": "Does every Dual Task Score in a Cognitive Load Assessment have to be an rdfs:Literal? | Is it permitted for a Cognitive Load Assessment to have a Dual Task Score of a type other than rdfs:Literal? | Are all values assigned via hasDualTaskScore in Cognitive Load Assessment instances necessarily restricted to rdfs:Literal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GaitAssessment\nDescription: GaitAssessment is defined as a subclass of ExperimentalAssessment. Individuals in this class are required to have exactly one MonoTaskScore and exactly one DualTaskScore, both of which must be literals (i.e., data values such as numbers or strings). This formalization ensures that each GaitAssessment precisely records a single score for both mono-task and dual-task conditions using literal values.\nAxiom: {'subClassOf': ['ExperimentalAssessment'], 'propertyRestrictions': ['[hasMonoTaskScore exactly 1]', '[hasDualTaskScore only rdfs:Literal]', '[hasDualTaskScore exactly 1]', '[hasMonoTaskScore some rdfs:Literal]']}\nGenerated CQs:", "output": "Is every value associated with 'hasMonoTaskScore' for a GaitAssessment required to be a literal? | Can a GaitAssessment record only accept rdfs:Literal values for the hasMonoTaskScore property? | Does the hasMonoTaskScore property in GaitAssessment exclude any value types other than rdfs:Literal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AutonomyAssessment\nDescription: AutonomyAssessment is a subclass of ClinicalAssessment designed specifically to evaluate an individual's level of autonomy. Every instance of AutonomyAssessment is required to have exactly one value for the property iadl_e, which must be of type xsd:int. This ensures that each AutonomyAssessment provides a singular, integer-based measurement relevant to the assessed individual's instrumental activities of daily living.\nAxiom: {'subClassOf': ['ClinicalAssessment'], 'propertyRestrictions': ['[iadl_e exactly 1 xsd:int]', '[iadl_e some xsd:int]']}\nGenerated CQs:", "output": "Is it required that AutonomyAssessment instances only have the 'iadl_e' property with values of type integer? | Must every 'iadl_e' property associated with AutonomyAssessment be restricted to integer values? | Are there any properties other than 'iadl_e' with integer values permitted for AutonomyAssessment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CognitiveAbilitiesAssessment\nDescription: CognitiveAbilitiesAssessment is defined as a subclass of ClinicalAssessment, representing evaluations specifically focused on measuring cognitive functions. Instances of this class must have exactly one FAB score (an integer), one MMSE score (an integer), one Trail Making Test result (a string), one Free and Cued Reminding Assessment result (a string), and one Short Cognitive Battery Assessment result (a string). Property restrictions further specify that each of these assessments and scores must be unique and of the stated data type, ensuring a comprehensive and structured representation of cognitive assessment results for each individual.\nAxiom: {'subClassOf': ['ClinicalAssessment'], 'propertyRestrictions': ['[fabScore exactly 1 xsd:int]', '[freeAndCuedRemindingAssessment exactly 1 xsd:string]', '[hasMMSEScore exactly 1 xsd:int]', '[trailMakingTest only xsd:string]', '[trailMakingTest exactly 1 xsd:string]', '[freeAndCuedRemindingAssessment only xsd:string]', '[hasMMSEScore only xsd:int]', '[shortCognitiveBatteryAssessment exactly 1 xsd:string]', '[fabScore only xsd:int]', '[shortCognitiveBatteryAssessment some xsd:string]']}\nGenerated CQs:", "output": "Is it required that a CognitiveAbilitiesAssessment only have the shortCognitiveBatteryAssessment property with values of type xsd:string? | Are all shortCognitiveBatteryAssessment values associated with CognitiveAbilitiesAssessment instances strings? | Can a CognitiveAbilitiesAssessment have a shortCognitiveBatteryAssessment property with any value other than a string? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DiagnosisAssessment\nDescription: DiagnosisAssessment is defined as a subclass of ClinicalAssessment, indicating that it inherits properties common to all clinical assessments. It is characterized by having exactly one value for the property hasClinicalDiagnosis, and this value must be of type DiagnosisType. This ensures that every instance of DiagnosisAssessment is linked to precisely one clinical diagnosis, providing a specific and unambiguous diagnosis outcome for each assessment.\nAxiom: {'subClassOf': ['ClinicalAssessment'], 'propertyRestrictions': ['[hasClinicalDiagnosis exactly 1 DiagnosisType]', '[hasClinicalDiagnosis some DiagnosisType]']}\nGenerated CQs:", "output": "Can a DiagnosisAssessment have a hasClinicalDiagnosis relationship with anything other than DiagnosisType? | Is it required that all clinical diagnoses assigned by a DiagnosisAssessment are instances of DiagnosisType? | Are diagnoses outside of the DiagnosisType class excluded from the possible values for hasClinicalDiagnosis in a DiagnosisAssessment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MotricityAbilitiesAssessment\nDescription: MotricityAbilitiesAssessment is defined as a subclass of ClinicalAssessment, representing assessments that evaluate motor abilities. Every instance of this class is required to have exactly one UPDRS score, and this score must be an integer value (xsd:int). This ensures that each motricity abilities assessment is uniquely and quantitatively characterized by a single UPDRS score, aligning with the clinical need for standardized motor evaluation.\nAxiom: {'subClassOf': ['ClinicalAssessment'], 'propertyRestrictions': ['[hasUPDRSScore exactly 1 xsd:int]', '[hasUPDRSScore some xsd:int]']}\nGenerated CQs:", "output": "Are UPDRS scores for MotricityAbilitiesAssessment always restricted to integer values? | Can MotricityAbilitiesAssessment have any hasUPDRSScore value other than an integer? | Is it required that MotricityAbilitiesAssessment only uses hasUPDRSScore with values of type integer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NeuropsychiatricAndMoodAssessment\nDescription: NeuropsychiatricAndMoodAssessment is defined as a subclass of ClinicalAssessment. Members of this class are characterized by the mandatory presence of exactly one value for each of the following properties: npi (Neuropsychiatric Inventory), dsm_ivDepressionCriteria, and apathyInventory, each being of type xsd:string. Furthermore, these properties cannot have values outside the string datatype. This formalization ensures that any individual instance of NeuropsychiatricAndMoodAssessment contains exactly and only one string value for each of these assessment criteria, supporting precise and consistent neuropsychiatric and mood evaluation.\nAxiom: {'subClassOf': ['ClinicalAssessment'], 'propertyRestrictions': ['[npi only xsd:string]', '[npi exactly 1 xsd:string]', '[dsm_ivDepressionCriteria exactly 1 xsd:string]', '[apathyInventory exactly 1 xsd:string]', '[apathyInventory only xsd:string]', '[dsm_ivDepressionCriteria some xsd:string]']}\nGenerated CQs:", "output": "Are values associated with 'dsm_ivDepressionCriteria' in NeuropsychiatricAndMoodAssessment exclusively of type string? | Is it required that all 'dsm_ivDepressionCriteria' properties in NeuropsychiatricAndMoodAssessment instances use string data? | Can NeuropsychiatricAndMoodAssessment ever have 'dsm_ivDepressionCriteria' values that are not strings? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DiscussionInvolvementData\nDescription: DiscussionInvolvementData is defined as a subclass of MeasuredData. Every instance of this class is required to have exactly one value for the property verbalReactionSpontaneity, and this property must take a value of type rdfs:Literal. This formalizes that each DiscussionInvolvementData entry captures a single, literal-valued measure of verbal reaction spontaneity as part of its involvement data.\nAxiom: {'subClassOf': ['MeasuredData'], 'propertyRestrictions': ['[verbalReactionSpontaneity exactly 1]', '[verbalReactionSpontaneity some rdfs:Literal]']}\nGenerated CQs:", "output": "Are all values of the 'verbalReactionSpontaneity' property in DiscussionInvolvementData instances restricted exclusively to literals? | Is it possible for 'verbalReactionSpontaneity' in DiscussionInvolvementData to take any value type other than rdfs:Literal? | Does DiscussionInvolvementData ensure that only rdfs:Literal values are used for the 'verbalReactionSpontaneity' property for every instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GaitData\nDescription: GaitData is defined as a subclass of MeasuredData, representing data specifically related to gait characteristics. Each instance of GaitData is required to have exactly one value for each of the following properties: walkingSpeedInstantaneous, walkingSpeed, stepLength, dynamicBalance, and stoppingDisplacement. The properties walkingSpeedInstantaneous, walkingSpeed, stepLength, and dynamicBalance are restricted to values of type rdfs:Literal, while stoppingDisplacement is restricted to a value of type xsd:boolean. This formalization ensures that any GaitData instance will precisely contain a complete set of objectively measured gait parameters.\nAxiom: {'subClassOf': ['MeasuredData'], 'propertyRestrictions': ['[walkingSpeedInstantaneous only rdfs:Literal]', '[walkingSpeed only rdfs:Literal]', '[stepLength only rdfs:Literal]', '[dynamicBalance exactly 1]', '[walkingSpeedInstantaneous exactly 1]', '[walkingSpeed exactly 1]', '[stoppingDisplacement exactly 1 xsd:boolean]', '[stepLength exactly 1]', '[stoppingDisplacement only xsd:boolean]', '[dynamicBalance some rdfs:Literal]']}\nGenerated CQs:", "output": "Are all dynamicBalance properties associated with GaitData exclusively required to have values of type rdfs:Literal? | Is it necessary that in GaitData, the property dynamicBalance cannot reference anything other than instances of rdfs:Literal? | Does the ontology restrict GaitData so that dynamicBalance never refers to a value outside the rdfs:Literal datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: OrganisationEfficiencyData\nDescription: OrganisationEfficiencyData is a subclass of MeasuredData representing measured values related to organizational efficiency. Every instance of this class must have exactly one value each for distanceWalked, areasOfInterestExplored, and areasOfNoInterestExplored, and all of these values must be literals. This class structurally enforces that the data captured is precisely quantified for these three efficiency-related attributes.\nAxiom: {'subClassOf': ['MeasuredData'], 'propertyRestrictions': ['[distanceWalked only rdfs:Literal]', '[areasOfNoInterestExplored only rdfs:Literal]', '[areasOfNoInterestExplored exactly 1]', '[areasOfInterestExplored exactly 1]', '[distanceWalked exactly 1]', '[areasOfInterestExplored some rdfs:Literal]']}\nGenerated CQs:", "output": "Is it required that OrganisationEfficiencyData only explores areas of interest represented as literals? | Can OrganisationEfficiencyData have areas of interest explored that are not typed as rdfs:Literal? | Does OrganisationEfficiencyData restrict all explored areas of interest exclusively to instances of rdfs:Literal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DiscussionTask\nDescription: DiscussionTask is defined as a subclass of Task. Every instance of DiscussionTask is required to have at least some measured data of type StressData and some measured data of type MoodVoiceData. Additionally, all measured data associated with DiscussionTask must be exclusively of type StressData or MoodVoiceData, meaning no other types of measured data are permitted. This ensures that the assessment of a DiscussionTask is strictly based on stress and mood-related voice data.\nAxiom: {'subClassOf': ['Task'], 'propertyRestrictions': ['[measuredData some StressData]', '[measuredData some MoodVoiceData]', '[measuredData only (MoodVoiceData and StressData)]']}\nGenerated CQs:", "output": "Is DiscussionTask restricted to having measuredData properties only of type MoodVoiceData or StressData? | Can any measuredData associated with a DiscussionTask be a type other than MoodVoiceData or StressData? | Does the ontology prohibit DiscussionTask from being linked via measuredData to data types outside of MoodVoiceData and StressData? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HealthyControlParticipant\nDescription: HealthyControlParticipant is defined as a subclass of Person, and is equivalent to individuals who have at least one clinical record containing an assessment where the clinical diagnosis is \"healthy.\" This class formalizes the concept of a participant who, according to their clinical assessments, has no diagnosed health issues, ensuring that all HealthyControlParticipant instances are characterized by clinically verified healthy status.\nAxiom: {'subClassOf': ['Person'], 'equivalentClass': ['[hasRecord some (ClinicalRecord and [containsAssessment some (DiagnosisAssessment and [hasClinicalDiagnosis only {healthy}])])]']}\nGenerated CQs:", "output": "Is every HealthyControlParticipant necessarily associated with a record that includes a clinical assessment confirming a 'healthy' diagnosis? | Does the class HealthyControlParticipant represent exactly those individuals who have at least one clinical record containing a diagnosis assessment marked as 'healthy'? | Is HealthyControlParticipant logically equivalent to entities with some clinical record where the assessment includes a clinical diagnosis of 'healthy'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PersonWithPredementia\nDescription: PersonWithPredementia is defined as a subclass of Person and is equivalent to those individuals who have at least one clinical record containing an assessment that diagnoses predementia. This formalization ensures that any member of the PersonWithPredementia class must be associated with a clinical record documenting a diagnosis assessment explicitly identifying predementia, thus providing a clear ontological basis for representing individuals in early stages of cognitive decline.\nAxiom: {'subClassOf': ['Person'], 'equivalentClass': ['[hasRecord only (ClinicalRecord and [containsAssessment only (DiagnosisAssessment or [hasClinicalDiagnosis some {predementia}])])]']}\nGenerated CQs:", "output": "Does every PersonWithPredementia necessarily have at least one record that contains a diagnosis assessment for predementia? | Is PersonWithPredementia logically equivalent to having a clinical record that includes an assessment component with a predementia diagnosis? | Can PersonWithPredementia be fully defined as someone with a clinical record documenting an assessment that diagnoses predementia? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S1_DirectedActivitiesStep\nDescription: S1_DirectedActivitiesStep is defined as a subclass of ProtocolStep. Each instance of this class is required to involve exactly one S1_P11_WalkingTask, one S1_P12_CountingBackwardsTask, one S1_P13_WalkingCountingBackwardsTask, one S1_P21_SentenceRepeatingTask, and one S1_P22_ArticulationControlTask. Additionally, the only tasks permitted to be involved are S1_P11_WalkingTask, S1_P12_CountingBackwardsTask, S1_P13_WalkingCountingBackwardsTask, S1_P21_SentenceRepeatingTask, S1_P22_ArticulationControlTask, or other general Task instances. This formalization ensures that each S1_DirectedActivitiesStep is composed of these five specific tasks, and does not include any other types of tasks.\nAxiom: {'subClassOf': ['ProtocolStep'], 'propertyRestrictions': ['[involvesTask exactly 1 S1_P11_WalkingTask]', '[involvesTask exactly 1 S1_P13_WalkingCountingBackwardsTask]', '[involvesTask exactly 1 S1_P21_SentenceRepeatingTask]', '[involvesTask exactly 1 S1_P22_ArticulationControlTask]', '[involvesTask exactly 1 S1_P12_CountingBackwardsTask]', '[involvesTask only (S1_P11_WalkingTask and S1_P12_CountingBackwardsTask and S1_P13_WalkingCountingBackwardsTask and S1_P21_SentenceRepeatingTask and S1_P22_ArticulationControlTask and Task)]']}\nGenerated CQs:", "output": "Must every S1_DirectedActivitiesStep solely involve tasks that are either S1_P11_WalkingTask, S1_P12_CountingBackwardsTask, S1_P13_WalkingCountingBackwardsTask, S1_P21_SentenceRepeatingTask, S1_P22_ArticulationControlTask, or Task? | Is it possible for an S1_DirectedActivitiesStep to involve a task that is not among S1_P11_WalkingTask, S1_P12_CountingBackwardsTask, S1_P13_WalkingCountingBackwardsTask, S1_P21_SentenceRepeatingTask, S1_P22_ArticulationControlTask, or Task? | Are activities classified as S1_DirectedActivitiesStep permitted to involve only tasks from the specified set of six task categories? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S3_DiscussionWithClinicianStep\nDescription: S3_DiscussionWithClinicianStep is a subclass of ProtocolStep, representing a specific stage within a protocol that involves engagement with a clinician. This class is formally defined to involve exactly one S3_P1_DirectedExpressionTask and exactly one S3_P21_PictureDescriptionTask, with all associated tasks being limited exclusively to S3_P1_DirectedExpressionTask, S3_P21_PictureDescriptionTask, or their subclasses. This ensures the step comprises a focused discussion component, structured by these particular task types.\nAxiom: {'subClassOf': ['ProtocolStep'], 'propertyRestrictions': ['[involvesTask exactly 1 S3_P1_DirectedExpressionTask]', '[involvesTask exactly 1 S3_P21_PictureDescriptionTask]', '[involvesTask some (S3_P1_DirectedExpressionTask and S3_P21_PictureDescriptionTask and Task)]']}\nGenerated CQs:", "output": "Must every S3_DiscussionWithClinicianStep involve only tasks classified as S3_P1_DirectedExpressionTask, S3_P21_PictureDescriptionTask, or Task? | Is it permissible for S3_DiscussionWithClinicianStep to involve any task outside of S3_P1_DirectedExpressionTask, S3_P21_PictureDescriptionTask, or Task? | Are the tasks associated with S3_DiscussionWithClinicianStep strictly limited to S3_P1_DirectedExpressionTask, S3_P21_PictureDescriptionTask, or Task categories? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S1_P13_WalkingCountingBackwardsTask\nDescription: S1_P13_WalkingCountingBackwardsTask is a subclass of DirectedTask, representing a directed activity involving walking and counting backwards. Members of this class are characterized by being associated with measured data pertaining to gait, latency, and mood/voice, with the option to also include stress-related data. The task requires the presence of countingType information, restricted solely to instances of CountingType. Only data of types GaitData, LatencyData, MoodVoiceData, or StressData are permitted as measured data for this task.\nAxiom: {'subClassOf': ['DirectedTask'], 'propertyRestrictions': ['[countingType only CountingType]', '[measuredData some LatencyData]', '[measuredData some GaitData]', '[countingType some CountingType]', '[measuredData only (GaitData or LatencyData or MoodVoiceData or StressData)]', '[measuredData only MoodVoiceData]']}\nGenerated CQs:", "output": "Must every instance of S1_P13_WalkingCountingBackwardsTask include at least one measuredData property relating to MoodVoiceData? | Is it possible for S1_P13_WalkingCountingBackwardsTask to have measuredData exclusively associated with MoodVoiceData? | Does the presence of measuredData of type MoodVoiceData necessarily imply the existence of an S1_P13_WalkingCountingBackwardsTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S3_P1_DirectedExpressionTask\nDescription: S3_P1_DirectedExpressionTask is defined as a subclass of DirectedDiscussionTask. Every instance of this class is required to be associated with at least some measuredData of type MoodVoiceData, while all measuredData linked to the class must exclusively be either MoodVoiceData or StressData. This specification ensures that the measurable outcomes for this task are strictly limited to mood or stress-related voice data, reflecting its design for directed expression activities with a focus on mood and stress recording.\nAxiom: {'subClassOf': ['DirectedDiscussionTask'], 'propertyRestrictions': ['[measuredData only (MoodVoiceData or StressData)]', '[measuredData only MoodVoiceData]']}\nGenerated CQs:", "output": "Is it necessary for an S3_P1_DirectedExpressionTask to have at least one measuredData property with a value of type MoodVoiceData? | Does every instance of S3_P1_DirectedExpressionTask include measured data that pertains specifically to MoodVoiceData? | Can an S3_P1_DirectedExpressionTask exist without having any measuredData linked to MoodVoiceData? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ExperimentalAssessment\nDescription: ExperimentalAssessment is a class characterized by the restriction that each of its instances must have exactly one value for the property hasScore, and this value must be an rdfs:Literal. This formalization enforces that every ExperimentalAssessment is associated with a single, literal score value, supporting precise and unambiguous assessment results.\nAxiom: {'propertyRestrictions': ['[hasScore exactly 1]', '[hasScore some rdfs:Literal]']}\nGenerated CQs:", "output": "Is it true that an ExperimentalAssessment can only have 'hasScore' values that are rdfs:Literal? | Does the 'hasScore' property of ExperimentalAssessment restrict its values exclusively to instances of rdfs:Literal? | Can an ExperimentalAssessment ever have a 'hasScore' that is not an rdfs:Literal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ProtocolStep\nDescription: ProtocolStep represents a process component that is associated with exactly one start time and exactly one end time, both of which must be of type time:Instant. Each ProtocolStep must involve at least one Task, and may involve only entities that are instances of Task. The class’s axioms enforce precise temporal boundaries and ensure strict task involvement, supporting detailed modeling of procedural workflows.\nAxiom: {'propertyRestrictions': ['[involvesTask some Task]', '[startTime exactly 1 time:Instant]', '[startTime only time:Instant]', '[endTime exactly 1 time:Instant]', '[involvesTask only Task]', '[endTime some time:Instant]']}\nGenerated CQs:", "output": "Is every endTime value associated with a ProtocolStep required to be an instance of time:Instant? | Can a ProtocolStep have an endTime property pointing to anything other than a time:Instant? | Does ProtocolStep restrict all usages of endTime exclusively to the time:Instant class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ExperimentalDiagnosisAssessment\nDescription: ExperimentalDiagnosisAssessment is defined as a class whose instances must only be associated with values of the type DiagnosisType via the hasExperimentalDiagnosis property. There are no specified superclass relationships or disjointness conditions, but its core characteristic is that any hasExperimentalDiagnosis link from an instance of ExperimentalDiagnosisAssessment must connect only to a DiagnosisType. This restriction ensures controlled and consistent assignment of experimental diagnoses.\nAxiom: {'subClassOf': ['ExperimentalAssessment'], 'propertyRestrictions': ['[hasExperimentalDiagnosis only DiagnosisType]']}\nGenerated CQs:", "output": "Is ExperimentalDiagnosisAssessment recognized as a specialization of ExperimentalAssessment? | Which assessments fall under the broader classification of ExperimentalAssessment, such as ExperimentalDiagnosisAssessment? | What higher-level categories encompass ExperimentalDiagnosisAssessment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ActivityStatusType\nDescription: ActivityStatusType is a class defined as being equivalent to the set containing the values \"omitted,\" \"completed,\" and \"incomplete.\" This means that any instance of ActivityStatusType must be one of these three statuses, and no others. The class does not have any superclasses specified.\nAxiom: {'subClassOf': ['Type'], 'equivalentClass': ['{omitted, completed, incomplete}']}\nGenerated CQs:", "output": "Is ActivityStatusType classified under the broader category of Type? | Which types encompass ActivityStatusType as a more specific subtype? | What specific categories fall within the scope of Type, including ActivityStatusType? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CountingType\nDescription: CountingType is defined as a subclass of Type. This means every instance of CountingType is also an instance of Type, inheriting all characteristics of Type, but there are no additional equivalence constraints or differentiating axioms specified for CountingType.\nAxiom: {'subClassOf': ['Type'], 'equivalentClass': ['{_20_0, _305_285}']}\nGenerated CQs:", "output": "Is CountingType equivalent to the intersection of _20_0 and _305_285? | Are all instances of CountingType necessarily members of both _20_0 and _305_285? | Does CountingType exclude any concepts outside the overlap of _20_0 and _305_285? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DiagnosisType\nDescription: DiagnosisType is a class that is equivalent to the enumeration of three specific types: predementia, dementia, and healthy. This means any individual of DiagnosisType must be precisely one of these three options, explicitly restricting the possible values to this set.\nAxiom: {'subClassOf': ['Type'], 'equivalentClass': ['{predementia, dementia, healthy}']}\nGenerated CQs:", "output": "Is DiagnosisType categorized under the broader class of Type? | Which subclasses are defined within Type, specifically including DiagnosisType? | What higher-level categories does DiagnosisType fall under within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GenderType\nDescription: GenderType is a class that is equivalent to the set containing exactly the individuals 'male' and 'female'. This means that any instance of GenderType must be either 'male' or 'female', and no other individuals can be classified as members of this class. The class does not specify any superclasses.\nAxiom: {'subClassOf': ['Type'], 'equivalentClass': ['{male, female}']}\nGenerated CQs:", "output": "Is GenderType included as part of the broader group Type? | What specific subcategories exist under Type, such as GenderType? | Which overarching classification categories encompass GenderType? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LateralityType\nDescription: LateralityType is a class defined as being equivalent to the set containing exactly two members: left_handed and right_handed. This means every instance of LateralityType must either be left_handed or right_handed, and no other types are included within this class. This formalization provides an exhaustive categorization of laterality types within the defined context.\nAxiom: {'subClassOf': ['Type'], 'equivalentClass': ['{left_handed, right_handed}']}\nGenerated CQs:", "output": "Is LateralityType categorized under the broader class of Type? | Which entities are more specific types within Type, such as LateralityType? | What higher-level classes encompass LateralityType? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CognitiveAbilitiesData\nDescription: CognitiveAbilitiesData is a subclass of MeasuredData, representing data specifically measured in the context of cognitive abilities assessments. Each instance must have exactly one status (of type ActivityStatusType), exactly one repetitions value (which must be an rdfs:Literal), and exactly one compliantInstructionsOrder (which must be a boolean, xsd:boolean). Additionally, the data must record exactly one taskDuration (of type time:DurationDescription). All status properties are restricted solely to instances of ActivityStatusType, repetitions are restricted to literals, and compliantInstructionsOrder is limited to boolean values, ensuring precise and standardized representation of cognitive abilities measurement data.\nAxiom: {'subClassOf': ['MeasuredData'], 'propertyRestrictions': ['[status exactly 1 ActivityStatusType]', '[repetitions exactly 1]', '[repetitions only rdfs:Literal]', '[compliantInstructionsOrder only xsd:boolean]', '[compliantInstructionsOrder exactly 1 xsd:boolean]', '[taskDuration exactly 1 time:DurationDescription]', '[status only ActivityStatusType]', '[taskDuration only time:DurationDescription]']}\nGenerated CQs:", "output": "Is every 'taskDuration' property of CognitiveAbilitiesData restricted exclusively to instances of time:DurationDescription? | Must all values of the 'taskDuration' attribute for CognitiveAbilitiesData be descriptions of duration as defined by time:DurationDescription? | Can CognitiveAbilitiesData have any 'taskDuration' that is not categorized under time:DurationDescription? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FunctionalAbilitiesData\nDescription: FunctionalAbilitiesData is defined as a subclass of MeasuredData, representing datasets that pertain specifically to functional abilities. Any instance of FunctionalAbilitiesData has handTrajectory values that are exclusively of type HandTrajectoryType, ensuring that hand trajectory information recorded in this class adheres to a specified structure or format.\nAxiom: {'subClassOf': ['MeasuredData'], 'propertyRestrictions': ['[handTrajectory only HandTrajectoryType]', '[handTrajectory exactly 1 HandTrajectoryType]']}\nGenerated CQs:", "output": "Is each FunctionalAbilitiesData instance required to have exactly one value for the property 'handTrajectory' of type HandTrajectoryType? | Can a FunctionalAbilitiesData entity be associated with more than one HandTrajectoryType through the 'handTrajectory' property? | Does the ontology permit a FunctionalAbilitiesData instance to have no assigned value for 'handTrajectory'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LatencyData\nDescription: LatencyData is defined as a subclass of MeasuredData. Each instance of LatencyData is characterized by having exactly one associated latency value, ensuring that for every data record of this type, one and only one latency measurement is present.\nAxiom: {'subClassOf': ['MeasuredData'], 'propertyRestrictions': ['[latency exactly 1]', '[latency only rdfs:Literal]']}\nGenerated CQs:", "output": "Are all latency values associated with LatencyData instances required to be of type rdfs:Literal? | Does LatencyData exclude any latency property values that are not rdfs:Literal? | Is it necessary that every latency property of LatencyData is expressed solely as an rdfs:Literal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: StressData\nDescription: StressData is defined as a subclass of MeasuredData. Every individual of this class is characterized by having exactly one associated stressLevel value, ensuring that each StressData instance represents the measurement of a single, specific stress level.\nAxiom: {'subClassOf': ['MeasuredData'], 'propertyRestrictions': ['[stressLevel exactly 1]', '[stressLevel only rdfs:Literal]']}\nGenerated CQs:", "output": "Is the stressLevel property for StressData instances limited exclusively to values of type rdfs:Literal? | Does every value assigned to the stressLevel property in StressData have to be an rdfs:Literal? | Can StressData have stressLevel values of any type other than rdfs:Literal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SemiDirectedTask\nDescription: SemiDirectedTask is a class whose instances are required to have measured data related to both functional abilities and cognitive abilities. Additionally, any measured data associated with a SemiDirectedTask must be exclusively of the types: FunctionalAbilitiesData, CognitiveAbilitiesData, or StressData. This ensures tasks of this class are characterized by comprehensive assessments limited to these specific domains.\nAxiom: {'subClassOf': ['Task'], 'propertyRestrictions': ['[measuredData some FunctionalAbilitiesData]', '[measuredData some CognitiveAbilitiesData]', '[measuredData only (CognitiveAbilitiesData or FunctionalAbilitiesData or StressData)]']}\nGenerated CQs:", "output": "Is Task the direct supercategory of SemiDirectedTask? | Which specific types are classified under Task, such as SemiDirectedTask? | What broader classes encompass SemiDirectedTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PersonWithDementia\nDescription: PersonWithDementia is defined as a subclass of Person, indicating that every individual classified as a PersonWithDementia is also a Person. There are no additional equivalence axioms or property restrictions specified for this class.\nAxiom: {'subClassOf': ['Person'], 'equivalentClass': ['[hasRecord some (ClinicalRecord and [containsAssessment some (DiagnosisAssessment and [hasClinicalDiagnosis some {dementia}])])]']}\nGenerated CQs:", "output": "Must every PersonWithDementia have at least one record containing a diagnosis assessment indicating dementia? | Is a PersonWithDementia equivalent to someone with a clinical record that includes an assessment with a clinical diagnosis of dementia? | Does the definition of PersonWithDementia require the intersection of having a clinical record and an assessment diagnosing dementia? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Person\nDescription: Person is defined as a subclass of ns1:Person and is characterized by its participation in at least one Protocol (and only Protocols). Every Person must also have at least one ClinicalRecord and one DemographicCharacteristicsRecord, and all records associated with a Person must be either a ClinicalRecord, DemographicCharacteristicsRecord, or ExperimentalRecord—no other types of records are permitted. This formalization ensures that members of the Person class are specifically and exclusively involved in Protocols and maintain well-defined records about their clinical, demographic, or experimental attributes.\nAxiom: {'subClassOf': ['ns1:Person'], 'propertyRestrictions': ['[participates some Protocol]', '[hasRecord some ClinicalRecord]', '[hasRecord only (ClinicalRecord or DemographicCharacteristicsRecord or ExperimentalRecord)]', '[hasRecord some DemographicCharacteristicsRecord]', '[participates only Protocol]', '[hasRecord some ExperimentalRecord]']}\nGenerated CQs:", "output": "Is it required for every Person to have at least one ExperimentalRecord associated via the hasRecord property? | Does the ontology permit a Person instance to exist without any linked ExperimentalRecord through hasRecord? | Are there any Persons defined where hasRecord does not point to an ExperimentalRecord? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S2_SemiDirectedActivitiesStep\nDescription: S2_SemiDirectedActivitiesStep is a class defined by the simultaneous involvement of exactly one instance each of the following tasks: TurnOnTVTask, WaterPlantTask, PrepareHotTeaTask, CallPsychologistTask, AnswerPhoneTask, FindBusLineOnMapTask, PayBillTask, EstablishAccountBalanceTask, LeaveRoomTask, and PrepareDrugBoxTask. Furthermore, the class is constrained so that it only involves tasks from a specified set, namely: AnswerPhoneTask, CallPsychologistTask, EstablishAccountBalanceTask, FindBusLineOnMapTask, LeaveRoomTask, PayBillTask, PrepareDrugBoxTask, PrepareHotTeaTask, Task, TurnOnTVTask, or WaterPlantTask. This formalization ensures that every instance of S2_SemiDirectedActivitiesStep must be composed of exactly one occurrence of each of the specified 10 task types, and may only involve tasks within the enumerated set.\nAxiom: {'subClassOf': ['ProtocolStep'], 'propertyRestrictions': ['[involvesTask exactly 1 TurnOnTVTask]', '[involvesTask exactly 1 WaterPlantTask]', '[involvesTask exactly 1 PrepareHotTeaTask]', '[involvesTask exactly 1 CallPsychologistTask]', '[involvesTask exactly 1 AnswerPhoneTask]', '[involvesTask exactly 1 FindBusLineOnMapTask]', '[involvesTask only (AnswerPhoneTask or CallPsychologistTask or EstablishAccountBalanceTask or FindBusLineOnMapTask or LeaveRoomTask or PayBillTask or PrepareDrugBoxTask or PrepareHotTeaTask or Task or TurnOnTVTask or WaterPlantTask)]', '[involvesTask exactly 1 PayBillTask]', '[involvesTask exactly 1 EstablishAccountBalanceTask]', '[involvesTask exactly 1 LeaveRoomTask]', '[involvesTask exactly 1 PrepareDrugBoxTask]']}\nGenerated CQs:", "output": "Does S2_SemiDirectedActivitiesStep fall under the general category of ProtocolStep? | What are the distinct subtypes of ProtocolStep, including S2_SemiDirectedActivitiesStep? | Which broader step classifications encompass S2_SemiDirectedActivitiesStep? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S1_P12_CountingBackwardsTask\nDescription: S1_P12_CountingBackwardsTask is a subclass of DirectedTask, characterized by a specific set of constraints: it requires that measuredData must be exclusively of the types LatencyData, MoodVoiceData, or StressData, and must include at least some MoodVoiceData. The task is further restricted to countingType values of either _20_0 or _305_285. This definition ensures instances of S1_P12_CountingBackwardsTask are directed tasks involving backward counting with rigorous data measurement requirements focused on latency, mood, voice, and stress.\nAxiom: {'subClassOf': ['DirectedTask'], 'propertyRestrictions': ['[measuredData only (LatencyData or MoodVoiceData or StressData)]', '[countingType only {_20_0, _305_285}]', '[measuredData some MoodVoiceData]', '[measuredData some LatencyData]']}\nGenerated CQs:", "output": "Is it required that the S1_P12_CountingBackwardsTask has at least one measuredData property associated with LatencyData? | Must every instance of S1_P12_CountingBackwardsTask involve measuredData relating specifically to LatencyData? | Can S1_P12_CountingBackwardsTask exist without any measuredData property referring to LatencyData? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: S1_P22_ArticulationControlTask\nDescription: S1_P22_ArticulationControlTask is defined as a subclass of DirectedTask. All instances of this class are characterized by being associated with at least some measured data of type LatencyData, indicating that latency measurements are a required aspect of this task.\nAxiom: {'subClassOf': ['DirectedTask'], 'propertyRestrictions': ['[measuredData some LatencyData]', '[measuredData only (LatencyData or StressData)]']}\nGenerated CQs:", "output": "Is it the case that an S1_P22_ArticulationControlTask can only have measuredData of type LatencyData or StressData? | Can measuredData associated with S1_P22_ArticulationControlTask ever include anything other than LatencyData or StressData? | Are LatencyData and StressData the exclusive kinds of measuredData permitted for S1_P22_ArticulationControlTask? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DemographicCharacteristicsRecord\nDescription: DemographicCharacteristicsRecord is a class representing an individual’s demographic attributes. Each record must have exactly one date of birth (of type xsd:dateTime) and exactly one gender (of type GenderType). The record may also specify laterality (restricted to values of type LateralityType), educationLevel (with exactly one value of type rdfs:Literal), and size (of type rdfs:Literal). The axioms ensure that all members of this class are uniquely identified by their single date of birth and gender, and have at most one education level specified.\nAxiom: {'propertyRestrictions': ['[dateOfBirth only xsd:dateTime]', '[gender only GenderType]', '[laterality only LateralityType]', '[educationLevel only rdfs:Literal]', '[educationLevel exactly 1]', '[gender exactly 1 GenderType]', '[size only rdfs:Literal]', '[dateOfBirth exactly 1 xsd:dateTime]', '[size exactly 1]']}\nGenerated CQs:", "output": "Is it required that a DemographicCharacteristicsRecord has exactly one propertyRestrictions relation? | Can a DemographicCharacteristicsRecord have more or fewer than one propertyRestrictions associated with it? | Does the ontology prevent DemographicCharacteristicsRecord from being linked to multiple propertyRestrictions? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protocol\nDescription: Protocol is a class representing a structured process or procedure, characterized by the following axioms:  \n- Every Protocol must be associated with exactly one date (of type xsd:dateTime).  \n- Every Protocol must have exactly one participant, and this participant must be a Person (no more, no less, and only of type Person).  \n- Each Protocol consists exclusively of steps that are instances of ProtocolStep.  \nThese restrictions ensure that each Protocol instance is uniquely defined by a single date, a single human participant, and a precise series of procedural steps.\nAxiom: {'propertyRestrictions': ['[protocolStep only ProtocolStep]', '[date exactly 1 xsd:dateTime]', '[hasParticipant exactly 1 Person]', '[hasParticipant only Person]', '[date only xsd:dateTime]', '[protocolStep some ProtocolStep]']}\nGenerated CQs:", "output": "Does every Protocol necessarily include at least one protocolStep that is an instance of ProtocolStep? | Is it a requirement for a Protocol to possess the property protocolStep relating to some ProtocolStep? | Can a Protocol exist without involving any protocolStep of type ProtocolStep? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: participates\nDescription: The property \"participates\" has no explicit domain or range restrictions and is a sub-property of \"owl:topObjectProperty.\" It does not have any characteristics such as functionality or symmetry. The property is the inverse of \"hasParticipant,\" meaning if an entity participates in something, that thing has the entity as a participant.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "How are the properties 'participates' and 'hasParticipant' related within the ontology? | If individual X participates in event Y, does it follow that Y has participant X? | Which property in the ontology is specified as the inverse of 'participates'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasDualTaskScore\nDescription: The property \"hasDualTaskScore\" does not specify explicit domain or range restrictions and has no defined characteristics. It is a sub-property of \"hasScore,\" indicating that it represents a specific kind of score, likely associated with dual-task performance. No inverse property is defined.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is every usage of the hasDualTaskScore property also classified under hasScore? | Which properties are recognized as subproperties of hasScore? | What are the superproperties of hasDualTaskScore within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasExperimentalDiagnosis\nDescription: The property \"hasExperimentalDiagnosis\" has no explicitly defined domain, range, or characteristics. It is a sub-property of \"hasDiagnosis,\" indicating that it represents a more specific form of diagnosis relationship within the ontology. No inverse property is specified. The lack of domain and range restrictions allows for flexible usage, but its naming suggests use for associating an entity with an experimental diagnosis.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is hasExperimentalDiagnosis considered a specific type of hasDiagnosis within the property hierarchy? | Which properties are defined as subproperties under hasDiagnosis? | Does the use of hasExperimentalDiagnosis in an assertion automatically entail the use of hasDiagnosis? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: stepLength\nDescription: The property \"stepLength\" is a data property with no explicitly defined domain or range, and no specified characteristics. It is a subproperty of owl:topDataProperty, indicating it is a general data property. There is no inverse property defined. This property is intended for representing the length of a step, but no further constraints are provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is stepLength categorized under the general properties defined by owl:topDataProperty? | Which data properties are considered subproperties of owl:topDataProperty within the ontology? | Does assigning a value to stepLength also imply an assignment to owl:topDataProperty? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: verbalReactionSpontaneity\nDescription: The property \"verbalReactionSpontaneity\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. No current textual description is provided. Its use should be interpreted in context, as there are no formal restrictions or relations specified in its axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What can be the domain of the property 'verbalReactionSpontaneity'? | Is it correct that the property 'verbalReactionSpontaneity' does not have a specified range? | Can 'verbalReactionSpontaneity' relate to subjects of any type, given its domain is unspecified? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: containedInContext\nDescription: The property \"containedInContext\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. It is a generic property with no specified constraints, indicating its use and applicability are context-dependent and unconstrained by the current ontology axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Are there any restrictions on what can act as the range for 'containedInContext'? | Is it correct that 'containedInContext' has no specified domain? | Is it valid for the 'containedInContext' property to have no specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: status\nDescription: The property \"status\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. This suggests flexibility in its use, allowing it to relate any types of entities without restriction.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What entities can appear as the range for the property 'status'? | Is it appropriate for the 'status' property to have no specified domain? | Is it correct that the property 'status' does not have a specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: measuredData\nDescription: The property \"measuredData\" has no specified domain, range, characteristics, super-properties, or inverse properties. It can be used to relate any two entities without restriction, as no additional constraints or descriptive information are provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Are there any restrictions on what can be the subject of 'measuredData'? | What kinds of entities can be the domain of the 'measuredData' property? | Is it correct that the property 'measuredData' does not have a defined range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: containsAssessment\nDescription: The property \"containsAssessment\" has no specified characteristics, domain, range, super-properties, or inverse properties. It is likely intended to associate an entity with an assessment, but its usage is not formally restricted by axioms. Additional details or constraints may be needed to clarify its precise application within the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it accurate that 'containsAssessment' does not specify a domain? | Can the range of the 'containsAssessment' property be explicitly defined or restricted? | Is it correct that the property 'containsAssessment' does not have a specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasDiagnosis\nDescription: The property \"hasDiagnosis\" has no explicitly defined characteristics, no specified domain or range restrictions, and is not declared as a sub-property of any other property. No inverse property is specified. This suggests that \"hasDiagnosis\" serves as a general relation, potentially linking individuals to their diagnoses without further formal constraints.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What kinds of entities can serve as the range for the property 'hasDiagnosis'? | Can entities outside any domain be linked using the property 'hasDiagnosis'? | Is it correct that the property 'hasDiagnosis' does not have a specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasScore\nDescription: The property \"hasScore\" has no defined domain, range, characteristics, super-properties, or inverse properties. Based on its name, it is likely used to associate an entity with a numerical or evaluative score, but no formal restrictions or relationships are specified in the current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of values can be used as the range of the property 'hasScore'? | Is it correct that the property 'hasScore' does not specify a range? | Is it correct that the property 'hasScore' does not have a specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: dateOfBirth\nDescription: The property \"dateOfBirth\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. Typically, it is intended to link an entity to its date of birth, although no formal constraints or relationships are currently specified in the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'dateOfBirth' have a range other than those currently defined? | Is it correct that the property 'dateOfBirth' does not specify any domain? | What kinds of entities can have a 'dateOfBirth' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasMMSEScore\nDescription: The property \"hasMMSEScore\" has no explicitly defined characteristics, domain or range restrictions, super-properties, or inverse properties. Based on its name, it is intended to associate an entity with its MMSE (Mini-Mental State Examination) score.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What can be the possible range for the property 'hasMMSEScore'? | Can 'hasMMSEScore' link to any type of entity, given that its range is unspecified? | Can 'hasMMSEScore' relate any type of subject, or is there a restriction on its domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: repetitions\nDescription: The property \"repetitions\" has no explicitly defined characteristics, domain, or range restrictions. It does not specify any super-properties or inverse properties. Based on the current axioms, \"repetitions\" can relate any two entities without additional constraints or semantic specifications.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'repetitions' has no specified range? | What types of values can serve as the range for the property 'repetitions'? | What can be the domain of the property 'repetitions'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: iadl_e\nDescription: The property \"iadl_e\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. No additional description is provided, and the property is not currently constrained by any axioms, indicating it is unspecified in its current form.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'iadl_e' be associated with any type of value as its range? | What classes or entities can serve as the range of the property 'iadl_e'? | What types of entities may serve as the domain for the property 'iadl_e'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: size\nDescription: The property \"size\" currently lacks explicit characteristics, domain, or range restrictions, and is not defined as a sub-property or inverse of any other property. This indicates that \"size\" is a general-purpose property intended to relate entities to their size attributes, but its specific usage and constraints are not currently specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of entities can appear as the value of the 'size' property? | What can be the domain of the property 'size'? | Is it correct that the property 'size' does not have a specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: protocolStep\nDescription: The property \"protocolStep\" does not have any explicitly defined characteristics, domain, or range restrictions. It is not specified as a sub-property of another property and has no declared inverse property. Its intended usage and semantics should be inferred from its name or surrounding context.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'protocolStep' be associated with subjects from any class, given its undefined domain? | What types of entities could serve as the domain for the property 'protocolStep'? | Can the property 'protocolStep' be associated with any object, given that it has no specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: countingType\nDescription: The property \"countingType\" has no explicitly defined characteristics, domain, or range restrictions. It does not have any specified super-properties or inverse properties. Its intended purpose must be inferred from its name, as no additional description or axioms are provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it appropriate for the property 'countingType' to have no defined domain? | Is it correct that the property 'countingType' does not have a defined range? | What entities can serve as the domain for the property 'countingType'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: taskDuration\nDescription: The property \"taskDuration\" has no specified characteristics, domain, or range restrictions. It does not have defined super-properties or an inverse property. Its intended use should be inferred from its name, which suggests it relates to the duration associated with a task, but no explicit constraints are imposed by the current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'taskDuration' does not have any specified domain? | Can 'taskDuration' relate to entities of any type, given its lack of a defined range? | Is it correct that the property 'taskDuration' does not have a specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasParticipant\nDescription: The property \"hasParticipant\" has no specified domain, range, characteristics, super-properties, or inverse properties. This property can be used in a general manner to relate an entity to its participant(s) without restriction on the types of subjects or objects involved.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can anything be the value of the 'hasParticipant' property, or is there an implicit restriction? | Are there any entities that should not serve as the subject for the property 'hasParticipant'? | What types of entities can serve as the range for 'hasParticipant'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: distanceWalked\nDescription: The property \"distanceWalked\" has no explicitly defined characteristics, domain, or range restrictions. It does not inherit from any super-properties and has no specified inverse property. Its usage and semantics should be defined by the context or by further specification in the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'distanceWalked' be associated with any type of value as its object, given that it has no specified range? | Is it correct that the 'distanceWalked' property does not have a defined range? | What kinds of entities can use the 'distanceWalked' property as their subject? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: laterality\nDescription: The property \"laterality\" has no explicitly specified domain, range, or characteristics, and does not inherit from any super-properties nor possess any inverse property. The purpose and usage of this property are not further detailed by its current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of entities can be the range of the property 'laterality'? | Is it correct that 'laterality' has no specified range? | Is it correct that the property 'laterality' has no specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: shortCognitiveBatteryAssessment\nDescription: The property \"shortCognitiveBatteryAssessment\" does not have any explicitly defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it likely represents a relation involving a brief cognitive battery assessment, but no formal constraints are specified in the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'shortCognitiveBatteryAssessment' be associated with any type of value as its range? | Can 'shortCognitiveBatteryAssessment' relate to subjects outside of any specific class? | Is it accurate to state that 'shortCognitiveBatteryAssessment' does not have a specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: date\nDescription: The property \"date\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. No additional descriptive information is provided, indicating that its use and relationships are unspecified in the current ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of entities can serve as the domain for the property 'date'? | What types of values can be assigned to the property 'date'? | Is it correct that the property 'date' has no specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: startTime\nDescription: The property \"startTime\" currently has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. Its intended use is likely to associate an entity with the point in time when an event or activity begins, but no formal restrictions or relationships are specified by the axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of values, if any, can be assigned as the range of 'startTime'? | Can 'startTime' be associated with any entities as its range, or is its range intentionally unspecified? | What kinds of subjects can the property 'startTime' be applied to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: endTime\nDescription: The property \"endTime\" has no defined domain, range, super-properties, or inverse properties, and no specific logical characteristics are assigned. This property is presumably intended to specify the endpoint or completion time of an event or process, but no ontological constraints or further documentation are currently provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'endTime' have a range assigned to it, and if so, what would it be? | Is it correct that the property 'endTime' has no specified range? | Can 'endTime' be used with any type of subject, or should its domain be restricted? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: before\nDescription: The property \"before\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. This indicates that it represents a generic relation without specific constraints on the types of entities it connects.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What entities can serve as the domain for the property 'before'? | What types of entities can serve as the range for the property 'before'? | Can the property 'before' associate with ranges outside a particular class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: freeAndCuedRemindingAssessment\nDescription: The property \"freeAndCuedRemindingAssessment\" has no explicitly defined characteristics, domain, or range restrictions, and does not specify any super-properties or inverse properties. Its intended use and meaning should be clarified by additional documentation or context, as current axioms do not constrain its usage.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it accurate that 'freeAndCuedRemindingAssessment' does not have a specified domain? | Can 'freeAndCuedRemindingAssessment' be used with any type of subject, or is its domain restricted? | What can be the domain of the property 'freeAndCuedRemindingAssessment'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: handTrajectory\nDescription: The property \"handTrajectory\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. Based solely on its name and lack of further restrictions, it can be inferred that this property is used to associate entities with information related to the movement or path of a hand, but its usage is not formally constrained within the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What entities can serve as the domain for the property 'handTrajectory'? | Is it correct that the property 'handTrajectory' does not specify a domain? | Is it valid for the property 'handTrajectory' to have no specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: gender\nDescription: The property \"gender\" has no explicitly defined characteristics, domain, range, or hierarchy with other properties. There is no current description or axiomatic restriction, indicating that its usage context and value types are unspecified within the ontology. No inverse property is defined.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'gender' relate to values other than a class or datatype? | What entities, if any, should be used as subjects with the 'gender' property? | Is it correct that the property 'gender' has no specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: walkingSpeedInstantaneous\nDescription: The property \"walkingSpeedInstantaneous\" has no specified characteristics, domain, or range restrictions, and is not defined as a sub-property or inverse of any other property. The property is expected to represent an entity's instantaneous walking speed, but lacks formal axiomatization to constrain or further describe its use.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What can be the range of the property 'walkingSpeedInstantaneous'? | What kind of entities can be used as the subject for the property 'walkingSpeedInstantaneous'? | Is it correct that 'walkingSpeedInstantaneous' currently has no specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasUPDRSScore\nDescription: The property \"hasUPDRSScore\" does not have explicitly defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely intended to associate an entity with its Unified Parkinson's Disease Rating Scale (UPDRS) score, reflecting clinical assessments in Parkinson's disease. No further constraints or relationships are specified in the current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'hasUPDRSScore' does not have a defined domain? | Is it valid for 'hasUPDRSScore' to not restrict its range to a specific class? | Are there any specific types of subjects that must be associated with the property 'hasUPDRSScore'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: dsm_ivDepressionCriteria\nDescription: The property \"dsm_ivDepressionCriteria\" has no explicitly defined characteristics, domain, or range constraints, and it is not specified as a sub-property of any other property nor does it have an inverse property. Based on its name, it is intended to relate an entity to the diagnostic criteria for depression as defined in DSM-IV, but this intended usage is not formally constrained by the provided axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'dsm_ivDepressionCriteria' have values outside of any defined range? | What entities, if any, are allowed as the range for 'dsm_ivDepressionCriteria'? | What are the possible domains for the property 'dsm_ivDepressionCriteria'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: latency\nDescription: The property \"latency\" has no explicitly specified characteristics, domain, or range constraints. It is not defined as a sub-property or inverse of any other property. The usage and applicable types for this property are unspecified in the current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that 'latency' does not have any specified domain? | What types of values can appear as the range for the property 'latency'? | Is it appropriate that the property 'latency' currently has no specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: educationLevel\nDescription: The property \"educationLevel\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. Its use is not constrained to specific classes or value types, allowing for flexible application in the ontology. No further description is currently provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of values can be the range of the property 'educationLevel'? | Is it accurate that the property 'educationLevel' does not have a specified range? | Is it correct that the property educationLevel does not have an explicitly defined domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: npi\nDescription: The property \"npi\" has no specified characteristics, domain, or range restrictions. It is not defined as a sub-property of any other property and does not have any inverse properties. This indicates \"npi\" is a general property with no explicit structural or semantic constraints currently defined.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What can be the domain of the property 'npi'? | What can be the range of the property 'npi'? | Is it appropriate for the property 'npi' to have no specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: stoppingDisplacement\nDescription: The property \"stoppingDisplacement\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. No current description is provided. The intended use or semantics of this property should be specified for greater clarity.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can entities outside any specific class use the property 'stoppingDisplacement' as their subject? | Does the property 'stoppingDisplacement' allow objects of any type as its range? | What can be the range of the property 'stoppingDisplacement'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: trailMakingTest\nDescription: The property \"trailMakingTest\" has no specified characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely used to associate an entity with a trail making test, but no further ontological constraints or relationships are defined for this property.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What entities can appear as the subject of the property 'trailMakingTest'? | Is it correct that the property 'trailMakingTest' does not have a defined domain? | Can any entity serve as the range for the 'trailMakingTest' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: involvesTask\nDescription: The property \"involvesTask\" has no explicitly defined characteristics, domain, or range restrictions. It is not specified as a sub-property of any other property, nor does it have an inverse property. This indicates that \"involvesTask\" is a general property intended to relate entities to unspecified tasks, without formal constraints on the types of entities or tasks involved.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can any type of entity use 'involvesTask' as a property subject? | Is it correct that the property 'involvesTask' does not have a specified range? | What types of entities can serve as the range for the property 'involvesTask'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: stressLevel\nDescription: The property \"stressLevel\" has no explicitly defined characteristics, domain, or range restrictions, nor any specified super-properties or inverse properties. Its intended purpose is not further described in the available axioms or documentation.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'stressLevel' does not have any specified domain? | Can 'stressLevel' be associated with any type of entity as its value? | Is it correct that the property 'stressLevel' currently has no specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: dynamicBalance\nDescription: The property \"dynamicBalance\" does not have explicitly defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely intended to relate entities in the context of maintaining or evaluating balance under changing conditions, but no formal constraints or further documentation are currently specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it appropriate for 'dynamicBalance' to lack a specified domain? | What entities are permitted to be subjects of the property 'dynamicBalance'? | Can the property 'dynamicBalance' have a domain other than what is currently specified (None)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasRecord\nDescription: The property \"hasRecord\" does not have explicitly defined domain, range, characteristics, super-properties, or inverse properties. Based on its name, it is likely intended to associate an entity with a record, but no further semantic constraints are specified by its current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'hasRecord' does not specify a domain? | What types of entities can be the subject of the property 'hasRecord'? | Can anything be used as the range of 'hasRecord', or should its range be defined? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: fabScore\nDescription: The property \"fabScore\" has no specified domain, range, characteristics, super-properties, or inverse properties. Its usage and constraints are not defined by axioms, indicating that it is a general property without ontology-imposed restrictions or semantic details.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of entities can act as the domain for the 'fabScore' property? | Is it correct that the property 'fabScore' has no specified domain? | Does the property 'fabScore' have a range other than None? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: walkingSpeed\nDescription: The property \"walkingSpeed\" has no specified characteristics, domain, range, super-properties, or inverse properties. This property is likely intended to capture the walking speed of an entity, but no formal usage constraints or value types are currently defined.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'walkingSpeed' be associated with any entity regardless of its type? | Is it correct that the property 'walkingSpeed' does not have a defined domain? | What types of entities can be used as the subject of the 'walkingSpeed' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: areasOfNoInterestExplored\nDescription: The property \"areasOfNoInterestExplored\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. This suggests it is a general property without specified restrictions or relationships to other properties or classes.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['rdfs:Literal'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'areasOfNoInterestExplored' have a range other than rdfs:Literal? | Is every value associated with 'areasOfNoInterestExplored' necessarily an rdfs:Literal? | What types of entities can be used as the value for the property 'areasOfNoInterestExplored'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: compliantInstructionsOrder\nDescription: The property \"compliantInstructionsOrder\" has no defined characteristics, domain, range, super-properties, or inverse properties. This indicates it is a generic property without specified constraints in the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['xsd:boolean'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is every value used with the property 'compliantInstructionsOrder' required to be a boolean? | Could 'compliantInstructionsOrder' ever have a value that is not of type xsd:boolean? | What types of entities are permitted as the range for 'compliantInstructionsOrder'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: apathyInventory\nDescription: The property \"apathyInventory\" has no specified characteristics, domain, range, super-properties, or inverse properties. This indicates that it is a general property without defined constraints or hierarchical relationships in the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topDataProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "Is apathyInventory classified as a data property within the ontology? | What superproperties does apathyInventory have according to the property hierarchy? | Which data properties are subsumed by owl:topDataProperty within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasMonoTaskScore\nDescription: The property \"hasMonoTaskScore\" does not have explicitly defined characteristics, domain, range, super-properties, or inverse properties. Its usage is unconstrained by axioms, making its intended purpose dependent on its contextual application within the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasScore'], 'inverseOf': []}\nGenerated CQs:", "output": "Is hasScore the superproperty of hasMonoTaskScore? | Which properties are classified as subproperties under hasScore? | Does usage of hasMonoTaskScore always entail usage of hasScore? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: areasOfInterestExplored\nDescription: The property \"areasOfInterestExplored\" has no explicitly defined characteristics, domain, or range restrictions. It is not asserted as a sub-property of any other property, nor does it have an inverse property specified. This suggests it can be used flexibly to relate unspecified entities without additional logical constraints.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['rdfs:Literal'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'areasOfInterestExplored' take any object other than a literal value? | Is every object associated with 'areasOfInterestExplored' necessarily an rdfs:Literal? | What types of values are permitted as the range for 'areasOfInterestExplored'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasClinicalDiagnosis\nDescription: The property \"hasClinicalDiagnosis\" does not have any specified characteristics, domain, or range constraints. It is not defined as a sub-property of any other property, nor does it have an inverse property. This general property can be used to relate entities to their clinical diagnosis without restrictions on the types of subjects or objects.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasDiagnosis'], 'inverseOf': []}\nGenerated CQs:", "output": "Is hasClinicalDiagnosis a specific type of the hasDiagnosis property? | Which properties are considered subproperties of hasDiagnosis? | What superproperties are directly associated with hasClinicalDiagnosis? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Recognition\nDescription: Recognition is defined as a subclass of Observation. It is characterized by two key property restrictions: it can only describe instances of ComplexActivity events, and recognitions must be provided exclusively by either a Person or a ProcessingComponent. This ensures that all individuals of the Recognition class represent observations describing complex activities, with clear provenance limited to human or automated sources.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[describes only event:ComplexActivity]', '[providedBy only (event:Person or ProcessingComponent)]']}\nGenerated CQs:", "output": "Does Recognition fall under the broader classification of Observation? | Which categories are more specific than Observation and encompass Recognition? | What higher-level classes does Recognition conceptually fit within? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Result\nDescription: Result is defined as a class whose instances must be described by exactly one home:DaySummary or home:Problem, and may only describe such entities. Each Result must be provided by exactly one agent, which must be either an event:Person or a ProcessingComponent, and cannot be provided by any other type. Every Result must have a reporting time, which must be exactly one instance of time:Instant, and no other type is allowed. Additionally, each Result must have exactly one plausibility metric, which must be of datatype xsd:double. This formalization ensures that every Result precisely links to its provenance, timing, evaluation, and what it represents within the domain.\nAxiom: {'propertyRestrictions': ['[providedBy exactly 1 (event:Person or ProcessingComponent)]', '[hasReportingTime exactly 1 time:Instant]', '[hasReportingTime only time:Instant]', '[describes only (home:DaySummary or home:Problem)]', '[hasPlausibilityMetric exactly 1 xsd:double]', '[providedBy only (event:Person or ProcessingComponent)]', '[hasPlausibilityMetric only xsd:double]']}\nGenerated CQs:", "output": "Is a Result required to describe either exactly one DaySummary or exactly one Problem, but not both or any other type? | Can a Result provide a description that is limited strictly to one instance among DaySummary or Problem? | Does the ontology enforce that each Result corresponds to one and only one entity of the DaySummary or Problem categories? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Accelerometer\nDescription: Accelerometer is defined as a subclass of WearableSensor. This means that every accelerometer is considered a wearable sensor, inheriting all characteristics of wearable sensors. Accelerometers are specialized sensors used in wearable devices to measure acceleration forces, which can be used to detect motion, orientation, and activity levels. No additional axioms further constrain the class.\nAxiom: {'subClassOf': ['WearableSensor']}\nGenerated CQs:", "output": "What broader sensor groups does Accelerometer belong to? | Is Accelerometer categorized under WearableSensor? | Which other types of sensors are classified as WearableSensor alongside Accelerometer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DTI-2\nDescription: DTI-2 is defined as a subclass of WearableSensor, indicating that it inherits all characteristics of wearable sensors. This means any instance of DTI-2 is necessarily a wearable sensor, though no further distinguishing properties or restrictions are specified.\nAxiom: {'subClassOf': ['WearableSensor']}\nGenerated CQs:", "output": "Which sensor types are more specific than WearableSensor, specifically including DTI-2? | To which parent categories does DTI-2 conceptually belong? | Does DTI-2 fall under the category of WearableSensor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: WearableMicrophone\nDescription: WearableMicrophone is defined as a subclass of WearableSensor. This class represents microphones that are designed to be worn on the body, distinguishing them from other types of wearable sensors by their specific function of capturing audio signals. Members of this class inherit all attributes and behaviors of wearable sensors, with a focus on audio data acquisition.\nAxiom: {'subClassOf': ['WearableSensor']}\nGenerated CQs:", "output": "Which types of WearableSensor include WearableMicrophone as a more specific subclass? | Into what higher-level classes can the WearableMicrophone entity be grouped? | Does WearableMicrophone fall under the broader class of WearableSensor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: WearableVideoCamera\nDescription: WearableVideoCamera is defined as a subclass of WearableSensor. This means any instance of WearableVideoCamera is also an instance of WearableSensor, inheriting all characteristics of wearable sensors. WearableVideoCamera specifically refers to sensors that are worn on the body and are capable of capturing video data.\nAxiom: {'subClassOf': ['WearableSensor']}\nGenerated CQs:", "output": "To which broader sensor categories does WearableVideoCamera belong according to the ontology? | Is WearableVideoCamera classified as a kind of WearableSensor? | Which sensor types are considered more specific instances of WearableSensor, such as WearableVideoCamera? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Alert\nDescription: Alert is defined as a subclass of Feedback, meaning every instance of Alert is also considered an instance of Feedback. This class captures specific types of feedback events characterized as alerts, distinguishing them from other forms of feedback. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['Feedback']}\nGenerated CQs:", "output": "Is Alert classified as a type of Feedback? | What are all subclasses categorized under Feedback, such as Alert? | Which higher-level categories does Alert fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ambient2DVideoCamera\nDescription: Ambient2DVideoCamera is defined as a subclass of FixedSensor, indicating that every Ambient2DVideoCamera is a type of sensor with a fixed position. This class represents video cameras designed to capture ambient, two-dimensional visual information from a stationary location.\nAxiom: {'subClassOf': ['FixedSensor']}\nGenerated CQs:", "output": "Which sensor types are categorized as subclasses of FixedSensor, such as Ambient2DVideoCamera? | What parent classes are associated with Ambient2DVideoCamera? | Does Ambient2DVideoCamera fall under the category of FixedSensor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: _3DVideoCamera\nDescription: _3DVideoCamera is defined as a subclass of FixedSensor, indicating that every instance of _3DVideoCamera is a type of sensor that operates in a fixed position. This class represents cameras capable of capturing three-dimensional video data, inheriting all characteristics of fixed sensors.\nAxiom: {'subClassOf': ['FixedSensor']}\nGenerated CQs:", "output": "Which sensor types are subclasses of FixedSensor, with reference to 3DVideoCamera? | Does the category FixedSensor include more specific types such as 3DVideoCamera? | To which higher-level classes does 3DVideoCamera belong within this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FixedSensor\nDescription: FixedSensor is defined as a subclass of Sensor. This indicates that every FixedSensor is a type of Sensor, inheriting all characteristics of the Sensor class. No additional constraints or distinguishing axioms are specified beyond this hierarchical relationship, meaning FixedSensors share the essential properties of Sensors.\nAxiom: {'subClassOf': ['Sensor']}\nGenerated CQs:", "output": "What more general groupings include FixedSensor as a member? | Which types are directly categorized under Sensor, such as FixedSensor? | Is FixedSensor classified within the broader group of Sensor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: WearableSensor\nDescription: WearableSensor is defined as a subclass of Sensor. This means that every instance of WearableSensor is also considered an instance of Sensor, inheriting its general properties and behaviors. WearableSensor typically refers to a sensor designed to be worn on the human body for the purpose of monitoring physiological signals, activity, or environmental parameters.\nAxiom: {'subClassOf': ['Sensor']}\nGenerated CQs:", "output": "Which entities are defined as more specific types within Sensor, such as WearableSensor? | What higher-level groups does WearableSensor belong to in the ontology? | Does the category WearableSensor fall under the broader classification of Sensor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Measurement\nDescription: Measurement is defined as a subclass of Observation. Every Measurement instance formally describes only entities classified as event:Measurement, ensuring it cannot describe other types of events. Additionally, each Measurement must be provided by either an event:Person or a Sensor, restricting its provenance to these two sources. This specification captures the nature of measurements as observational entities exclusively linked to specific events and originating strictly from people or sensor devices.\nAxiom: {'subClassOf': ['Observation'], 'propertyRestrictions': ['[providedBy only (event:Person or Sensor)]', '[describes some event:Measurement]']}\nGenerated CQs:", "output": "Is every instance described by the Measurement property necessarily an event:Measurement? | Can Measurement describe anything other than event:Measurement entities? | Does the Measurement property exclusively reference individuals classified as event:Measurement? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Report\nDescription: Report is a class defined by a set of strict property restrictions: each instance must be provided by exactly one event:Person and must refer to exactly one instance of either home:Questionnaire, lab:ClinicalRecord, or lab:DemographicCharacteristicsRecord. Additionally, every Report must have exactly one hasPlausibilityMetric value of type xsd:double and exactly one hasReportingTime value of type time:Instant, with no other values permitted for these properties. The class definition ensures that each Report is uniquely associated with one provider, one time of reporting, a plausibility metric, and one described source record, reflecting a precise and singular reporting activity.\nAxiom: {'propertyRestrictions': ['[hasPlausibilityMetric exactly 1 xsd:double]', '[hasPlausibilityMetric only xsd:double]', '[providedBy exactly 1 event:Person]', '[hasReportingTime exactly 1 time:Instant]', '[providedBy only event:Person]', '[hasReportingTime only time:Instant]', '[describes exactly 1 (home:Questionnaire or lab:ClinicalRecord or lab:DemographicCharacteristicsRecord)]', '[describes only (home:Questionnaire and lab:ClinicalRecord and lab:DemographicCharacteristicsRecord)]']}\nGenerated CQs:", "output": "Are reports allowed to describe any resource other than Questionnaire, Clinical Record, or Demographic Characteristics Record? | Is a report's describes property strictly limited to Questionnaire, Clinical Record, or Demographic Characteristics Record? | Does every report exclusively describe either a Questionnaire, Clinical Record, or Demographic Characteristics Record? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Detection\nDescription: Detection is a class characterized by property restrictions specifying that it describes only instances of either AtomicActivity or ObjectEvent. Additionally, every Detection must be provided by some ProcessingComponent. There are no asserted superclass relationships for Detection, and its purpose is to represent structured information about recognized or identified events generated through processing components, with its scope strictly limited to atomic activities or object events.\nAxiom: {'subClassOf': ['Observation'], 'propertyRestrictions': ['[describes only (event:AtomicActivity or event:ObjectEvent)]', '[providedBy only ProcessingComponent]']}\nGenerated CQs:", "output": "Is Detection encompassed by the broader category of Observation? | Which Observation subclasses are present in the ontology, such as Detection? | What more general categories is Detection a part of within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Observation\nDescription: Observation is a class characterized by the following axioms:  \n- Each Observation describes exactly one event (event:Event), and describes only events of this type.\n- Every Observation is provided by exactly one provider, which must be either a Person (event:Person), a ProcessingComponent, or a Sensor.\n- Each Observation has exactly one reporting time, which must be an instance of time:Instant.\n- Each Observation is associated with exactly one plausibility metric, represented as an xsd:double value.\nThese constraints ensure that every instance of Observation unambiguously records a single event through a specific provider, is time-stamped, and is quantitatively assessed for plausibility.\nAxiom: {'propertyRestrictions': ['[describes only event:Event]', '[providedBy only (event:Person or ProcessingComponent or Sensor)]', '[providedBy exactly 1 (event:Person or ProcessingComponent or Sensor)]', '[describes exactly 1 event:Event]', '[hasReportingTime only time:Instant]', '[hasReportingTime exactly 1 time:Instant]', '[hasPlausibilityMetric exactly 1 xsd:double]', '[hasPlausibilityMetric only xsd:double]']}\nGenerated CQs:", "output": "Are the plausibility metrics associated with an Observation exclusively of datatype xsd:double? | Can an Observation have a plausibility metric that is not represented as an xsd:double value? | Is it only permissible for an Observation’s hasPlausibilityMetric property to reference values of type xsd:double? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sensor\nDescription: Sensor is a class whose instances are restricted to being attached only to entities of type event:Entity. This property restriction ensures that any individual belonging to the Sensor class must have the attachedTo relationship exclusively with event:Entity instances, reinforcing a precise connection between sensors and entities within the ontology.\nAxiom: {'propertyRestrictions': ['[attachedTo only event:Entity]', '[attachedTo exactly 1 event:Entity]']}\nGenerated CQs:", "output": "Is every Sensor required to be attached to exactly one Entity? | Can a Sensor ever be attached to more than one Entity at the same time? | Is it possible for a Sensor to exist without being attached to any Entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: roomLocalisation\nDescription: The property \"roomLocalisation\" has no explicitly defined domain, range, or characteristics, and is not specified as a sub-property or inverse of any other property. In the absence of further axioms or existing description, its use and related entities remain unspecified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'roomLocalisation' has no domain specified? | What kinds of entities can be in the range of the property 'roomLocalisation'? | What entities can serve as the domain for the property 'roomLocalisation'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasParticipant\nDescription: The property \"hasParticipant\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. It can be used to relate any two individuals in the ontology without restriction. No additional description or constraints are provided by the axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'hasParticipant' has no defined range? | Can the property 'hasParticipant' be used with objects of any class as its range? | What types of entities are permitted as subjects of the 'hasParticipant' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasQuality\nDescription: The property \"hasQuality\" has no explicitly defined characteristics, domain, or range restrictions. It does not specify any super-properties or inverse properties. This property is generally intended to associate an entity with a quality but its precise usage is not restricted by axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What can be the domain of the property 'hasQuality'? | Is it correct that the property 'hasQuality' does not specify a range? | Can anything be considered the range of 'hasQuality', or should it be restricted? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasAgent\nDescription: The property \"hasAgent\" does not have asserted characteristics, domain, or range restrictions. It is not defined as a sub-property of any other property and has no specified inverse. This property is intended to relate entities to their agents, but its usage is not formally constrained by ontology axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Are there any entities that cannot be a value for the property 'hasAgent'? | Which types of entities, if any, can appear as subjects of the 'hasAgent' property? | Is it correct that the property 'hasAgent' does not have a specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: providedBy\nDescription: The property \"providedBy\" has no specified characteristics, domain, or range, and is not defined as a sub-property of or inverse to any other property. Its use and applicable classes are unrestricted, indicating a general-purpose relationship for associating entities with their providers.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can any type of entity be used as the range of 'providedBy'? | What are the possible domains for the property 'providedBy'? | What can serve as the range for the property 'providedBy'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: duration\nDescription: The property \"duration\" has no explicitly defined characteristics, domain, or range restrictions, and does not specify any super-properties or inverse properties. It is used to relate entities to their duration, but the types of subjects or objects are not formally constrained.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'duration' does not have a specified range in the ontology? | Can 'duration' be applied to any subject, or should it be restricted to specific classes? | What types of entities can serve as the domain for the 'duration' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasPlausibilityMetric\nDescription: The property \"hasPlausibilityMetric\" has no explicitly defined characteristics, domain, or range constraints. It is not specified as a sub-property of any other property and has no defined inverse. The purpose of this property is not currently described and would depend on its intended use within the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Are there any restrictions on what can serve as the domain for the property 'hasPlausibilityMetric'? | What classes or entities can appear as the subject of the property 'hasPlausibilityMetric'? | Is it correct that 'hasPlausibilityMetric' has no defined range in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: attachedTo\nDescription: The property \"attachedTo\" has no explicitly defined characteristics, domain, or range restrictions and is not specified as a sub-property or an inverse of any other property. This indicates that \"attachedTo\" is a general-purpose property intended to express an unspecified attachment relationship between entities.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What kinds of entities can appear as the object when using the property 'attachedTo'? | Is there any range specified for the property 'attachedTo'? | Is it appropriate for 'attachedTo' to have no specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: startTime\nDescription: The property \"startTime\" has no explicitly defined characteristics, domain, or range restrictions. It is not specified as a sub-property of any other property and has no inverse property declared. Its intended usage is not further detailed by current axioms or description.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Are there classes besides the unspecified domain that could be linked to the property 'startTime'? | What entities can serve as the domain for the property 'startTime'? | Is it correct that the property 'startTime' does not have a defined range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: refersTo\nDescription: The property \"refersTo\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. This indicates its use is unconstrained with respect to the types of entities it connects, allowing it to relate any two individuals without restriction.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'refersTo' have subjects that do not belong to any particular class? | What types of entities can appear as the object of the 'refersTo' property? | What entities can serve as the domain of the property 'refersTo'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: describes\nDescription: The property \"describes\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. It is a general property intended to associate one entity with another in a descriptive relationship, without restrictions on the types of entities it connects.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Are there constraints on what can be the domain of the 'describes' property? | What types of entities, if any, can act as the subject for the 'describes' property? | Is it correct that the property 'describes' has no specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasReportingTime\nDescription: The property \"hasReportingTime\" has no explicitly defined characteristics, domain, or range restrictions. It is not specified as a subproperty of any other property and does not have an inverse property. No additional description or constraints are currently provided, indicating that its intended usage and value type are not restricted by the ontology at this stage.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of entities can have the property 'hasReportingTime' as their domain? | Is it correct that the property 'hasReportingTime' has no range defined? | What kinds of entities, if any, can be used as the value of the property 'hasReportingTime'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AmericanHot\nDescription: AmericanHot is defined as a subclass of NamedPizza, distinguished by the requirement that it has toppings including hot green pepper, jalapeno pepper, tomato, peperoni sausage, and mozzarella. Its origin is specified as America. AmericanHot pizzas are explicitly disjoint from numerous other pizza classes, ensuring no individual pizza can simultaneously belong to these groups. The pizza is further characterized by a topping restriction: it may only have mozzarella, peperoni sausage, jalapeno pepper, tomato, or hot green pepper as toppings. This formalization enforces a precise set of permissible toppings and uniquely identifies AmericanHot within the ontology of named pizzas.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some HotGreenPepperTopping]', '[hasTopping some JalapenoPepperTopping]', '[hasTopping some TomatoTopping]', '[hasCountryOfOrigin hasValue America]', '[hasTopping some PeperoniSausageTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping only (MozzarellaTopping or PeperoniSausageTopping or JalapenoPepperTopping or TomatoTopping or HotGreenPepperTopping)]']}\nGenerated CQs:", "output": "What logical constraint separates AmericanHot from UnclosedPizza according to the ontology? | Is it allowable for an instance of pizza to belong to both AmericanHot and UnclosedPizza classes? | Which classes are defined as disjoint with AmericanHot? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Capricciosa\nDescription: Capricciosa is defined as a subclass of NamedPizza, and is explicitly disjoint from a range of other specified pizza types, ensuring no individual can simultaneously belong to Capricciosa and any of those classes. Members of Capricciosa must have at least one topping each of tomato, ham, olive, mozzarella, anchovies, peperonata, and caper. Additionally, their toppings are strictly limited to only anchovies, mozzarella, tomato, peperonata, ham, caper, or olive—no other toppings are permitted. This formalization ensures a precise and consistent definition for Capricciosa pizza within the ontology.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some HamTopping]', '[hasTopping only (AnchoviesTopping or MozzarellaTopping or TomatoTopping or PeperonataTopping or HamTopping or CaperTopping or OliveTopping)]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some AnchoviesTopping]', '[hasTopping some PeperonataTopping]', '[hasTopping some CaperTopping]']}\nGenerated CQs:", "output": "What formal separation is specified between Capricciosa and Caprina in the ontology? | Is any pizza instance classified as both Capricciosa and Caprina permitted by the ontology? | Which other pizza types are declared as mutually exclusive with Caprina? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Fiorentina\nDescription: Fiorentina is defined as a subclass of NamedPizza and is explicitly disjoint with a variety of other specific pizza types, ensuring that no individual pizza can simultaneously be classified as both Fiorentina and any of those listed (e.g., Mushroom, Margherita, FourSeasons). Members of the Fiorentina class are characterized by the following topping constraints: they must include at least one of each of the following toppings—TomatoTopping, GarlicTopping, OliveTopping, MozzarellaTopping, ParmesanTopping, and SpinachTopping. Additionally, Fiorentina pizzas are restricted to having only the following toppings: MozzarellaTopping, GarlicTopping, TomatoTopping, SpinachTopping, OliveTopping, or ParmesanTopping. This axiomatisation precisely defines Fiorentina pizzas in terms of both required ingredients and clear differentiation from other pizzas.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Rosa', 'QuattroFormaggi', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping only (MozzarellaTopping or GarlicTopping or TomatoTopping or SpinachTopping or OliveTopping or ParmesanTopping)]', '[hasTopping some GarlicTopping]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some ParmesanTopping]', '[hasTopping some SpinachTopping]']}\nGenerated CQs:", "output": "What is the formal connection specified between Fiorentina and Giardiniera in the ontology? | Can a pizza instance be classified as both Fiorentina and Giardiniera simultaneously? | Which classes are defined as mutually exclusive with Fiorentina? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FruttiDiMare\nDescription: FruttiDiMare is defined as a subclass of NamedPizza and is explicitly disjoint with a variety of other specific pizza types, ensuring that no individual can simultaneously belong to FruttiDiMare and any of the listed pizza classes. Members of this class are strictly characterized by their toppings: they can have only garlic, tomato, or mixed seafood toppings—with each FruttiDiMare pizza required to feature at least one of each (tomato, garlic, and mixed seafood toppings). This formalization specifies that FruttiDiMare pizzas are exclusively seafood-themed, with a distinct combination of these three toppings.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping only (GarlicTopping or TomatoTopping or MixedSeafoodTopping)]', '[hasTopping some TomatoTopping]', '[hasTopping some GarlicTopping]', '[hasTopping some MixedSeafoodTopping]']}\nGenerated CQs:", "output": "What logical difference is asserted between FruttiDiMare and Caprina in the ontology? | Can any pizza instance belong simultaneously to the classes FruttiDiMare and Caprina? | Which classes are explicitly defined as disjoint with Caprina? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LaReine\nDescription: LaReine is defined as a subclass of NamedPizza and is declared disjoint with a number of other specific pizza classes, including Mushroom, Napoletana, Veneziana, and others—ensuring no individual pizza can be classified as both a LaReine and any of these listed classes. \n\nLaReine pizzas are characterized by several property restrictions: every LaReine pizza must have at least one topping of each of the following types—MushroomTopping, TomatoTopping, HamTopping, OliveTopping, and MozzarellaTopping. Additionally, the only permitted toppings for LaReine pizzas are MozzarellaTopping, TomatoTopping, HamTopping, OliveTopping, or MushroomTopping; no other toppings are allowed. This ensures that the LaReine pizza is strictly defined by this specific set of ingredients.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'Napoletana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some MushroomTopping]', '[hasTopping some TomatoTopping]', '[hasTopping some HamTopping]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping only (MozzarellaTopping or TomatoTopping or HamTopping or OliveTopping or MushroomTopping)]']}\nGenerated CQs:", "output": "How are LaReine and Veneziana defined in terms of class disjointness within the ontology? | Is it allowed for a pizza to be classified simultaneously as LaReine and Veneziana? | Which classes are asserted to be mutually exclusive with LaReine in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Mushroom\nDescription: Mushroom is defined as a subclass of NamedPizza, and it is disjoint from a wide range of other specific pizza types, ensuring that an individual cannot simultaneously belong to the Mushroom class and any of those listed classes. Members of the Mushroom class are required to have MushroomTopping, TomatoTopping, and MozzarellaTopping among their toppings. Additionally, they may only have MozzarellaTopping, TomatoTopping, or MushroomTopping as toppings, and no others. This formalization ensures that Mushroom pizzas are uniquely characterized by the exclusive combination of these three toppings.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some MushroomTopping]', '[hasTopping only (MozzarellaTopping or TomatoTopping or MushroomTopping)]', '[hasTopping some TomatoTopping]', '[hasTopping some MozzarellaTopping]']}\nGenerated CQs:", "output": "What formal separation is asserted between Mushroom and Cajun in the ontology? | Is it allowed for an entity to belong to both the Mushroom and Cajun categories simultaneously? | Which classes are explicitly specified as being disjoint with Cajun? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Parmense\nDescription: Parmense is defined as a subclass of NamedPizza and is explicitly disjoint with a wide range of other pizza types, ensuring that no individual pizza can simultaneously be classified as Parmense and any of the listed disjoint pizzas. Parmense pizzas are characterized by a specific set of required toppings: each must include at least some tomato, ham, parmesan, mozzarella, and asparagus toppings. Furthermore, they may only have these toppings—no additional ingredients are permitted. This formalization strictly specifies the distinctive composition of Parmense pizzas within the NamedPizza hierarchy.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'Caprina', 'Soho', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some HamTopping]', '[hasTopping some ParmesanTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some AsparagusTopping]', '[hasTopping only (MozzarellaTopping or TomatoTopping or HamTopping or ParmesanTopping or AsparagusTopping)]']}\nGenerated CQs:", "output": "What is the ontological relationship between Parmense and SloppyGiuseppe? | Is there any entity that can simultaneously belong to both Parmense and SloppyGiuseppe classes? | Which classes are specified as mutually exclusive with Parmense? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PrinceCarlo\nDescription: PrinceCarlo is defined as a subclass of NamedPizza, making it a specific kind of pizza with a distinct identity. It is explicitly disjoint with a comprehensive set of other named pizzas, such that no individual pizza can be simultaneously classified as PrinceCarlo and any of those other pizzas (e.g., Mushroom, LaReine, Napoletana, etc.).\n\nFrom the property restrictions, any PrinceCarlo pizza must have at least the following toppings: TomatoTopping, MozzarellaTopping, ParmesanTopping, LeekTopping, and RosemaryTopping. Furthermore, the only toppings permitted on a PrinceCarlo pizza are LeekTopping, RosemaryTopping, MozzarellaTopping, TomatoTopping, and ParmesanTopping. This formalization ensures that PrinceCarlo pizzas are uniquely characterized by this specific and exclusive combination of toppings, and cannot include any others.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping only (LeekTopping or RosemaryTopping or MozzarellaTopping or TomatoTopping or ParmesanTopping)]', '[hasTopping some MozzarellaTopping]', '[hasTopping some ParmesanTopping]', '[hasTopping some LeekTopping]', '[hasTopping some RosemaryTopping]']}\nGenerated CQs:", "output": "Are PrinceCarlo and Giardiniera considered mutually exclusive pizza types within the ontology? | Is there any possibility for a pizza to be classified simultaneously as PrinceCarlo and Giardiniera? | Which pizza classes are specified as disjoint with Giardiniera? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Rosa\nDescription: Rosa is defined as a subclass of NamedPizza, explicitly disjoint with a range of other specific pizza types (such as Mushroom, Margherita, AmericanHot, and others), ensuring an individual pizza cannot simultaneously belong to Rosa and any of those disjoint classes. Members of the Rosa class are characterized by their toppings: every Rosa pizza must have at least one TomatoTopping, one GorgonzolaTopping, and one MozzarellaTopping, and it may only contain these three toppings (no other toppings are permitted). This formalization strictly captures the unique identity and allowed ingredients of the Rosa pizza type.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some GorgonzolaTopping]', '[hasTopping only (MozzarellaTopping or TomatoTopping or GorgonzolaTopping)]', '[hasTopping some MozzarellaTopping]']}\nGenerated CQs:", "output": "What logical separation is asserted between Rosa and PrinceCarlo in the ontology? | Is there any individual that can belong to both Rosa and PrinceCarlo? | Which classes are declared as disjoint with PrinceCarlo? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SloppyGiuseppe\nDescription: SloppyGiuseppe is defined as a subclass of NamedPizza, and is explicitly disjoint with a set of other specific pizza types, ensuring that any instance cannot simultaneously belong to these other pizza classes. It is characterized by the presence of HotSpicedBeefTopping, TomatoTopping, GreenPepperTopping, MozzarellaTopping, and OnionTopping as mandatory ingredients. Furthermore, it is restricted to only these toppings: no other topping types are permitted on a SloppyGiuseppe. This formalization ensures the class captures a distinct and exclusive pizza variety, consistently reflecting its specific ingredient profile.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'Caprina', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some HotSpicedBeefTopping]', '[hasTopping some TomatoTopping]', '[hasTopping some GreenPepperTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some OnionTopping]', '[hasTopping only (HotSpicedBeefTopping or MozzarellaTopping or TomatoTopping or OnionTopping or GreenPepperTopping)]']}\nGenerated CQs:", "output": "What is the ontological distinction specified between SloppyGiuseppe and Soho? | Is there any instance that can belong to both the SloppyGiuseppe and Soho categories? | Which classes are formally declared as disjoint with Soho? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: UnclosedPizza\nDescription: UnclosedPizza is defined as a subclass of NamedPizza, disjoint with a specific set of pizzas including Mushroom, AmericanHot, Margherita, and others, ensuring mutual exclusivity with these named varieties. Every UnclosedPizza is characterized by having at least one MozzarellaTopping, but there is no restriction on additional toppings. As described, membership in UnclosedPizza does not imply classification as either a VegetarianPizza or a NonVegetarianPizza, as its topping composition may be incomplete or unspecified. This formalization supports the open nature of its topping definitions within the ontology.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'PrinceCarlo', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some MozzarellaTopping]']}\nGenerated CQs:", "output": "What logical separation exists between UnclosedPizza and Capricciosa according to the ontology? | Is it permitted for a pizza to belong to both UnclosedPizza and Capricciosa categories? | Which classes are formally specified as disjoint with Capricciosa? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AnchoviesTopping\nDescription: AnchoviesTopping is modeled as a subclass of FishTopping, signifying that it is a specific type of fish-based topping. It is explicitly disjoint with both MixedSeafoodTopping and PrawnsTopping, meaning an individual instance cannot simultaneously be categorized as AnchoviesTopping and either of those other toppings. This ensures a clear and mutually exclusive classification among these seafood-themed pizza toppings.\nAxiom: {'subClassOf': ['FishTopping'], 'disjointWith': ['MixedSeafoodTopping']}\nGenerated CQs:", "output": "How does the ontology specify the incompatibility between AnchoviesTopping and PrawnsTopping? | Is any pizza topping allowed to be classified as both AnchoviesTopping and PrawnsTopping simultaneously? | Which toppings are asserted to be disjoint with AnchoviesTopping in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MixedSeafoodTopping\nDescription: MixedSeafoodTopping is defined as a subclass of FishTopping, meaning every MixedSeafoodTopping is a type of fish-based topping. It is explicitly disjoint with AnchoviesTopping and PrawnsTopping, so no individual topping can simultaneously be considered a MixedSeafoodTopping and either an AnchoviesTopping or PrawnsTopping. This class represents seafood toppings that are distinct from pure anchovy or prawn toppings, ensuring clear differentiation among various fish-based toppings.\nAxiom: {'subClassOf': ['FishTopping'], 'disjointWith': ['PrawnsTopping']}\nGenerated CQs:", "output": "What formal separation is defined between MixedSeafoodTopping and AnchoviesTopping within the ontology? | Is there any possibility for a topping to be classified as both MixedSeafoodTopping and AnchoviesTopping? | Which other topping classes, if any, are explicitly stated as disjoint with AnchoviesTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PrawnsTopping\nDescription: PrawnsTopping is defined as a subclass of FishTopping, indicating it is a specific kind of fish-based topping. It is explicitly disjoint with both MixedSeafoodTopping and AnchoviesTopping, which means no individual topping can simultaneously be classified as PrawnsTopping and either of the other two classes. This formalization ensures that members of PrawnsTopping are uniquely identifiable as prawn-based toppings, distinct from other seafood or anchovy-based toppings.\nAxiom: {'subClassOf': ['FishTopping'], 'disjointWith': ['AnchoviesTopping']}\nGenerated CQs:", "output": "How does the ontology differentiate between PrawnsTopping and MixedSeafoodTopping? | Is there any instance that can qualify as both PrawnsTopping and MixedSeafoodTopping? | Which topping categories are specified as disjoint with PrawnsTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GarlicTopping\nDescription: GarlicTopping is defined as a subclass of VegetableTopping, meaning it is a type of vegetable-based topping. It is explicitly disjoint with several other specific vegetable toppings, such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, ensuring that an individual cannot belong to both GarlicTopping and any of these other topping classes. Additionally, GarlicTopping is characterized by the property that its members must have at least some medium level of spiciness (hasSpiciness some Medium).\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness some Medium]']}\nGenerated CQs:", "output": "What logical separation is defined between GarlicTopping and SpinachTopping? | Is there any topping that could simultaneously be classified as GarlicTopping and SpinachTopping? | Which other topping classes are declared as mutually exclusive with SpinachTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MushroomTopping\nDescription: MushroomTopping is a subclass of VegetableTopping and is explicitly disjoint from other specific vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, and others—ensuring that no individual can simultaneously belong to more than one of these topping types. Furthermore, MushroomTopping is characterized by the property that it must have some level of mild spiciness (hasSpiciness some Mild). This formalization defines MushroomTopping as a mild-flavored vegetable topping that is distinct from other named vegetable toppings in the ontology.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness some Mild]']}\nGenerated CQs:", "output": "What type of distinction is asserted between MushroomTopping and PetitPoisTopping in the ontology? | Could an individual topping be classified as both MushroomTopping and PetitPoisTopping? | Which topping classes are defined as incompatible with PetitPoisTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: OnionTopping\nDescription: OnionTopping is defined as a subclass of VegetableTopping, representing a type of topping derived from vegetables. It is explicitly disjoint with several other vegetable topping classes, such as RocketTopping, LeekTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, ensuring that no individual can simultaneously belong to OnionTopping and any of these classes. Additionally, OnionTopping is characterized by the property restriction that all its instances must have at least some medium level of spiciness (hasSpiciness some Medium).\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness some Medium]']}\nGenerated CQs:", "output": "How does the ontology distinguish between OnionTopping and OliveTopping? | Is there an instance that can simultaneously be classified as both OnionTopping and OliveTopping? | Which other topping classes are specified as disjoint with OliveTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PepperTopping\nDescription: PepperTopping is defined as a subclass of VegetableTopping, indicating it is a specific type of vegetable-based topping. It is explicitly disjoint with RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping—meaning no individual can simultaneously be a PepperTopping and any of these other vegetable topping classes. This establishes PepperTopping as a distinct and non-overlapping category within vegetable toppings.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'TomatoTopping']}\nGenerated CQs:", "output": "What logical constraint separates PepperTopping from PetitPoisTopping in the ontology? | Is any topping instance allowed to belong to both PepperTopping and PetitPoisTopping simultaneously? | Which topping classes are defined as disjoint with PepperTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SpinachTopping\nDescription: SpinachTopping is defined as a subclass of VegetableTopping and is explicitly disjoint from a variety of other vegetable-based toppings, including RocketTopping, LeekTopping, OnionTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping. Individuals of this class must have at least one hasSpiciness property value that is Mild. This ensures that SpinachTopping exclusively refers to mild, spinach-based toppings that do not overlap with other vegetable toppings in the ontology.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['LeekTopping', 'OnionTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness some Mild]']}\nGenerated CQs:", "output": "What is the formal distinction between SpinachTopping and RocketTopping within the ontology? | Is it allowed for a pizza to have both SpinachTopping and RocketTopping simultaneously? | Which classes are asserted to be disjoint with SpinachTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CajunSpiceTopping\nDescription: CajunSpiceTopping is a subclass of HerbSpiceTopping, formally distinguished by the restriction that it must have some degree of hot spiciness (hasSpiciness some Hot). It is explicitly disjoint with RosemaryTopping, meaning an individual cannot be both a CajunSpiceTopping and a RosemaryTopping. Members of this class are herb and spice toppings that contribute a hot or spicy flavor profile, aligning with the characteristics of Cajun seasoning.\nAxiom: {'subClassOf': ['HerbSpiceTopping'], 'disjointWith': [], 'propertyRestrictions': ['[hasSpiciness some Hot]']}\nGenerated CQs:", "output": "How does the ontology specify the connection or distinction between CajunSpiceTopping and RosemaryTopping? | Is there any instance that can be classified as both CajunSpiceTopping and RosemaryTopping? | Which other topping classes are defined as mutually exclusive with RosemaryTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CheeseTopping\nDescription: CheeseTopping is defined as a subclass of PizzaTopping, representing toppings made from cheese products that are used on pizzas. It is explicitly disjoint from other topping types such as MeatTopping, SauceTopping, VegetableTopping, FishTopping, HerbSpiceTopping, NutTopping, and FruitTopping, ensuring that no individual topping instance can simultaneously belong to both CheeseTopping and any of these other topping categories. This classification enforces a clear distinction between cheese-based toppings and all other types of pizza toppings.\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['MeatTopping', 'SauceTopping', 'VegetableTopping', 'FishTopping', 'HerbSpiceTopping', 'NutTopping']}\nGenerated CQs:", "output": "How does the ontology express the incompatibility between CheeseTopping and FruitTopping? | Is there any topping instance that can simultaneously belong to both CheeseTopping and FruitTopping categories? | Which topping categories are stated as mutually exclusive with CheeseTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FruitTopping\nDescription: FruitTopping is defined as a subclass of PizzaTopping, meaning it represents a specific type of topping used on pizzas. It is explicitly disjoint with MeatTopping, SauceTopping, VegetableTopping, CheeseTopping, FishTopping, HerbSpiceTopping, and NutTopping, ensuring that no topping can simultaneously belong to FruitTopping and any of these other topping categories. This formalization guarantees that FruitTopping exclusively includes toppings derived from fruit and distinguishes them from all other major topping types.\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['MeatTopping', 'SauceTopping', 'CheeseTopping', 'FishTopping', 'HerbSpiceTopping', 'NutTopping']}\nGenerated CQs:", "output": "How are FruitTopping and VegetableTopping represented in terms of mutual exclusivity within the ontology? | Is there any scenario in which a topping can be classified simultaneously as both a FruitTopping and a VegetableTopping? | Which classes are defined as disjoint with VegetableTopping in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HerbSpiceTopping\nDescription: HerbSpiceTopping is defined as a subclass of PizzaTopping, representing toppings made exclusively from herbs or spices that are suitable for use on pizzas. It is explicitly disjoint with MeatTopping, SauceTopping, VegetableTopping, CheeseTopping, FishTopping, NutTopping, and FruitTopping, ensuring that no individual topping can simultaneously belong to both HerbSpiceTopping and any of these other specified topping categories. This class formalizes the separation of herb and spice-based toppings from all other topping types within the ontology.\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['MeatTopping', 'SauceTopping', 'VegetableTopping', 'CheeseTopping', 'FishTopping', 'FruitTopping']}\nGenerated CQs:", "output": "What is the formal separation established between HerbSpiceTopping and NutTopping in the ontology? | Is it allowed for a pizza topping to be classified as both a HerbSpiceTopping and a NutTopping? | Which classes, besides NutTopping, are specified as disjoint with HerbSpiceTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MeatTopping\nDescription: MeatTopping is defined as a subclass of PizzaTopping, representing toppings derived specifically from meat products. It is disjoint with SauceTopping, VegetableTopping, CheeseTopping, FishTopping, HerbSpiceTopping, NutTopping, and FruitTopping, ensuring that no single topping instance can simultaneously belong to both MeatTopping and any of these other topping categories. This formalization enforces a clear categorical separation between meat-based and other types of pizza toppings.\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['SauceTopping', 'VegetableTopping', 'CheeseTopping', 'FishTopping', 'NutTopping', 'FruitTopping']}\nGenerated CQs:", "output": "What ontological separation is established between MeatTopping and HerbSpiceTopping? | Is any topping allowed to be classified simultaneously as a MeatTopping and an HerbSpiceTopping? | Which topping categories are defined as mutually exclusive with HerbSpiceTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SauceTopping\nDescription: SauceTopping is defined as a subclass of PizzaTopping and is explicitly disjoint with MeatTopping, VegetableTopping, CheeseTopping, FishTopping, HerbSpiceTopping, NutTopping, and FruitTopping. This means SauceTopping represents a distinct category of pizza topping, specifically for sauces, and no individual can simultaneously belong to SauceTopping and any of the aforementioned topping classes.\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['MeatTopping', 'VegetableTopping', 'CheeseTopping', 'FishTopping', 'HerbSpiceTopping', 'NutTopping']}\nGenerated CQs:", "output": "What logical separation does the ontology assert between SauceTopping and FruitTopping? | Is there any topping entity that can simultaneously be classified as both SauceTopping and FruitTopping? | Which classes of toppings are formally identified as disjoint with SauceTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: VegetableTopping\nDescription: VegetableTopping is defined as a subclass of PizzaTopping, representing pizza toppings that are derived from vegetables. It is explicitly disjoint with MeatTopping, SauceTopping, CheeseTopping, FishTopping, HerbSpiceTopping, NutTopping, and FruitTopping, ensuring that no topping can simultaneously belong to VegetableTopping and any of these other topping categories. This formalization guarantees that VegetableTopping exclusively encompasses toppings of vegetable origin, and clearly separates it from other distinct topping types used on pizzas.\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['MeatTopping', 'CheeseTopping', 'FishTopping', 'HerbSpiceTopping', 'NutTopping', 'FruitTopping']}\nGenerated CQs:", "output": "How are VegetableTopping and SauceTopping differentiated within the ontology? | Is there any entity that can simultaneously be classified as both a VegetableTopping and a SauceTopping? | Which classes are defined as disjoint with SauceTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ParmesanTopping\nDescription: ParmesanTopping is defined as a subclass of CheeseTopping, representing cheese-based toppings specifically comprised of parmesan. It is explicitly disjoint from GoatsCheeseTopping, MozzarellaTopping, GorgonzolaTopping, and FourCheesesTopping, ensuring no individual can simultaneously belong to these classes. Members of this class are characterized by having some level of mild spiciness, as specified by the property restriction [hasSpiciness some Mild].\nAxiom: {'subClassOf': ['CheeseTopping'], 'disjointWith': ['GoatsCheeseTopping', 'MozzarellaTopping', 'GorgonzolaTopping'], 'propertyRestrictions': ['[hasSpiciness some Mild]']}\nGenerated CQs:", "output": "What distinction is modeled between ParmesanTopping and FourCheesesTopping within the ontology? | Could an instance belong simultaneously to both ParmesanTopping and FourCheesesTopping classes? | Which other topping classes are asserted as incompatible with FourCheesesTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HamTopping\nDescription: HamTopping is defined as a subclass of MeatTopping, indicating that it is a type of meat-based pizza topping. It is explicitly disjoint with PeperoniSausageTopping, HotSpicedBeefTopping, and ChickenTopping, meaning an individual topping cannot simultaneously be classified as ham and any of these other meat toppings. This formalization ensures that HamTopping remains distinct from other specific meat toppings within the ontology.\nAxiom: {'subClassOf': ['MeatTopping'], 'disjointWith': ['PeperoniSausageTopping', 'ChickenTopping']}\nGenerated CQs:", "output": "What formal separation is specified between HamTopping and HotSpicedBeefTopping in the ontology? | Is there any instance that can be classified simultaneously as HamTopping and HotSpicedBeefTopping? | Which other topping categories are asserted as disjoint with HamTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PeperoniSausageTopping\nDescription: PeperoniSausageTopping is defined as a subclass of MeatTopping, representing a specific type of meat-based pizza topping. It is explicitly disjoint with HotSpicedBeefTopping, HamTopping, and ChickenTopping, ensuring that no individual topping can be classified as more than one of these types simultaneously. Members of this class are characterized by possessing at least some medium level of spiciness, as specified by the property restriction [hasSpiciness some Medium]. This formalization ensures clear differentiation within meat toppings and enforces the requirement for moderate spiciness in PeperoniSausageTopping.\nAxiom: {'subClassOf': ['MeatTopping'], 'disjointWith': ['HamTopping', 'ChickenTopping'], 'propertyRestrictions': ['[hasSpiciness some Medium]']}\nGenerated CQs:", "output": "What separation is defined between PeperoniSausageTopping and HotSpicedBeefTopping in the ontology? | Is it allowable for a single topping instance to belong to both PeperoniSausageTopping and HotSpicedBeefTopping? | Which topping types are asserted as disjoint with PeperoniSausageTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DeepPanBase\nDescription: DeepPanBase is defined as a subclass of PizzaBase, establishing it as a specific type of pizza base. It is explicitly disjoint with ThinAndCrispyBase, which means that no pizza base can simultaneously be classified as both a DeepPanBase and a ThinAndCrispyBase. This formalization ensures clear differentiation between thick, deep pan styles and thin, crispy bases within the ontology.\nAxiom: {'subClassOf': ['PizzaBase'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology distinguish between DeepPanBase and ThinAndCrispyBase? | Is it permissible for a pizza base to be classified as both DeepPanBase and ThinAndCrispyBase? | Which base types are specified as mutually exclusive with DeepPanBase in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ThinAndCrispyBase\nDescription: ThinAndCrispyBase is a subclass of PizzaBase, representing a specific type of pizza base. It is explicitly declared as disjoint with DeepPanBase, ensuring that no individual pizza base can simultaneously be classified as both ThinAndCrispyBase and DeepPanBase. This formalization distinguishes thin and crispy bases from deep pan bases within the ontology.\nAxiom: {'subClassOf': ['PizzaBase'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology specify the difference between ThinAndCrispyBase and DeepPanBase? | Is any pizza base classified under both ThinAndCrispyBase and DeepPanBase? | What other base types are explicitly declared as disjoint with DeepPanBase? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GreenPepperTopping\nDescription: GreenPepperTopping is defined as a subclass of PepperTopping, indicating it inherits all characteristics of pepper-based pizza toppings. It is explicitly disjoint with SweetPepperTopping, JalapenoPepperTopping, and PeperonataTopping—ensuring that no instance can simultaneously belong to more than one of these classes. This formalization distinguishes green pepper toppings from other specific pepper varieties within the ontology.\nAxiom: {'subClassOf': ['PepperTopping'], 'disjointWith': ['JalapenoPepperTopping', 'PeperonataTopping']}\nGenerated CQs:", "output": "What is the ontological separation specified between GreenPepperTopping and SweetPepperTopping? | Is there any instance that can be simultaneously classified as both GreenPepperTopping and SweetPepperTopping? | Which classes are defined as mutually exclusive with GreenPepperTopping in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Hot\nDescription: Hot is defined as a subclass of Spiciness, indicating it represents an elevated or intense level of spicy sensation. It is explicitly disjoint with the classes Mild and Medium, ensuring that no instance can be both Hot and either Mild or Medium at the same time. This formalization clarifies that Hot describes a distinct, non-overlapping intensity within the spectrum of spiciness.\nAxiom: {'subClassOf': ['Spiciness'], 'disjointWith': ['Medium']}\nGenerated CQs:", "output": "What type of logical separation is defined between Hot and Mild? | Is it allowed for an entity to be classified as both Hot and Mild simultaneously? | Which classes, apart from Mild, are explicitly stated as disjoint with Hot? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Medium\nDescription: Medium is a subclass of Spiciness, representing a specific level or category of spiciness. It is formally defined as disjoint with both Mild and Hot, meaning that no individual instance can belong to more than one of these classes simultaneously. This ensures that any item classified as Medium cannot be considered Mild or Hot in terms of spiciness.\nAxiom: {'subClassOf': ['Spiciness'], 'disjointWith': ['Mild']}\nGenerated CQs:", "output": "How are Medium and Hot classes differentiated within the ontology? | Is there any instance that can belong to both the Medium and Hot categories? | Which classes are defined as mutually exclusive with Medium? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Mild\nDescription: Mild is a subclass of Spiciness, representing a specific level of spiciness distinct from other grades. It is explicitly disjoint with both Hot and Medium, ensuring that an instance classified as Mild cannot simultaneously be classified as Hot or Medium. This enforces a clear and exclusive categorization among the spiciness levels.\nAxiom: {'subClassOf': ['Spiciness'], 'disjointWith': ['Medium']}\nGenerated CQs:", "output": "What is the formal separation defined between Mild and Hot in the ontology? | Can an entity be classified as both Mild and Hot? | Which classes are specified as disjoint with Hot? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PizzaBase\nDescription: PizzaBase is defined as a subclass of Food, indicating that every PizzaBase is a type of food. It is explicitly disjoint with IceCream, Pizza, and PizzaTopping, ensuring that an individual cannot simultaneously be a PizzaBase and any of these other classes. This formalization distinguishes PizzaBase as a unique foundational component in food ontology, separate from finished pizzas, their toppings, or dessert items like ice cream.\nAxiom: {'subClassOf': ['Food'], 'disjointWith': ['IceCream', 'Pizza']}\nGenerated CQs:", "output": "What distinguishes PizzaBase from PizzaTopping in the ontology? | Is any entity permitted to be an instance of both PizzaBase and PizzaTopping? | Which classes are specified as disjoint with PizzaBase? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PizzaTopping\nDescription: PizzaTopping is defined as a subclass of Food, representing edible items that can be used to top a pizza. It is formally disjoint from the classes IceCream, Pizza, and PizzaBase, ensuring that no individual can simultaneously be a PizzaTopping and an instance of any of these other classes. This separation enforces a clear distinction between pizza toppings, the pizza base, the assembled pizza, and unrelated foods like ice cream.\nAxiom: {'subClassOf': ['Food'], 'disjointWith': ['Pizza', 'PizzaBase']}\nGenerated CQs:", "output": "How does the ontology define the separation between PizzaTopping and IceCream? | Is there any instance that can belong to both PizzaTopping and IceCream categories? | Which classes are explicitly marked as mutually exclusive with IceCream? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DomainConcept\nDescription: DomainConcept is a class that is explicitly disjoint with ValuePartition, meaning no individual can simultaneously be a member of both DomainConcept and ValuePartition. This ensures a clear separation between entities considered DomainConcepts and those defined as ValuePartitions within the ontology.\nAxiom: {'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology differentiate between DomainConcept and ValuePartition? | Is there any instance that can belong to both DomainConcept and ValuePartition? | Which classes are specified as disjoint with ValuePartition? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ValuePartition\nDescription: ValuePartition is a pattern used to represent a set of mutually exclusive and exhaustive subclasses that serve as the only permissible values for a particular property. It is disjoint with DomainConcept, ensuring that no individual can belong to both classes. The parent ValuePartition class is employed in property restrictions, and its subclasses collectively cover all possible values for the property—membership cannot extend beyond these predefined subclasses without modifying the ValuePartition. This structure enforces a fixed set of alternatives, supporting controlled vocabularies and value enumerations within the ontology.\nAxiom: {'disjointWith': []}\nGenerated CQs:", "output": "How are ValuePartition and DomainConcept differentiated within the ontology? | Is there any entity that can simultaneously be a ValuePartition and a DomainConcept? | Which classes are specified as disjoint with DomainConcept? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Food\nDescription: Food is defined as a subclass of DomainConcept. This means that every instance of Food is considered a type of DomainConcept, representing consumable items or substances within the modeled domain. No further restrictions or disjoint relationships are specified in the current axiom.\nAxiom: {'subClassOf': ['DomainConcept']}\nGenerated CQs:", "output": "Is Food classified under the broader category of DomainConcept? | What general categories is Food a member of within the ontology? | Which more specific classes, such as Food, are encompassed by DomainConcept? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NamedPizza\nDescription: NamedPizza is defined as a subclass of Pizza, representing pizzas that are explicitly listed or recognized on a pizza menu. Members of this class inherit all properties of Pizza and are distinguished by being menu-identified variants, rather than custom or unnamed creations.\nAxiom: {'subClassOf': ['Pizza']}\nGenerated CQs:", "output": "Which categories encompass NamedPizza as a member? | Is NamedPizza classified as a type of Pizza? | What specific varieties are encompassed within the supercategory Pizza, including NamedPizza? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PineKernels\nDescription: PineKernels is defined as a subclass of NutTopping, indicating that all PineKernels are considered a type of nut-based topping. No further property restrictions or disjointness axioms are specified, so individuals classified as PineKernels inherit all characteristics of NutTopping.\nAxiom: {'subClassOf': ['NutTopping']}\nGenerated CQs:", "output": "Which toppings are defined as more specific forms of NutTopping, such as PineKernels? | Is PineKernels classified under the broader group of NutTopping? | What more general topping categories include PineKernels as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RedOnionTopping\nDescription: RedOnionTopping is defined as a subclass of OnionTopping, representing toppings specifically comprised of red onion. All individuals classified as RedOnionTopping inherit the characteristics and constraints applicable to OnionTopping.\nAxiom: {'subClassOf': ['OnionTopping']}\nGenerated CQs:", "output": "Which toppings are specified as subclasses of OnionTopping, such as RedOnionTopping? | What parent classes does RedOnionTopping belong to within the topping hierarchy? | Is RedOnionTopping categorized under the broader class of OnionTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: American\nDescription: American is defined as a subclass of NamedPizza and is explicitly disjoint from several other specific pizza types, such as Mushroom, LaReine, Napoletana, and others, ensuring that an individual cannot simultaneously belong to more than one of these classes. Members of the American class must have the following toppings: tomato topping, pepperoni sausage topping, and mozzarella topping. Furthermore, they can have only mozzarella, pepperoni sausage, or tomato as toppings—no other toppings are permitted. Additionally, the country of origin for this pizza is specified as America. This formalization distinguishes the American pizza by its unique combination of toppings and origin, while preventing any overlap with the other named pizzas.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasCountryOfOrigin hasValue America]', '[hasTopping some MozzarellaTopping]', '[hasTopping only (MozzarellaTopping or PeperoniSausageTopping or TomatoTopping)]', '[hasTopping only PeperoniSausageTopping]']}\nGenerated CQs:", "output": "Does an American pizza necessarily include at least one Peperoni Sausage topping? | Is the presence of Peperoni Sausage topping required for something to be classified as American pizza? | Can an American pizza exist without having any Peperoni Sausage toppings? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cajun\nDescription: Cajun is defined as a subclass of NamedPizza and is explicitly disjoint with a variety of other pizza types, ensuring that no pizza can belong to Cajun and any of the disjoint classes simultaneously. Each Cajun pizza must have, as toppings, tomato, Tobasco pepper sauce, mozzarella, onion, peperonata, and prawns. Furthermore, the only allowed toppings on a Cajun pizza are prawn, Tobasco pepper sauce, mozzarella, tomato, onion, and peperonata. This formalization strictly characterizes Cajun pizzas by both required and exclusive toppings, distinguishing them from other named pizzas.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some TobascoPepperSauce]', '[hasTopping only (PrawnsTopping or TobascoPepperSauce or MozzarellaTopping or TomatoTopping or OnionTopping or PeperonataTopping)]', '[hasTopping some MozzarellaTopping]', '[hasTopping some OnionTopping]', '[hasTopping some PeperonataTopping]', '[hasTopping only PrawnsTopping]']}\nGenerated CQs:", "output": "Is it required that a Cajun pizza has at least one topping of Prawns? | Can a pizza be classified as Cajun without having any PrawnsTopping? | Does every Cajun pizza necessarily include the hasTopping property linked to PrawnsTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Caprina\nDescription: Caprina is defined as a subclass of NamedPizza and is explicitly disjoint from a diverse set of other named pizzas, ensuring that no individual pizza can simultaneously be a Caprina and any of the pizzas listed (such as Mushroom, LaReine, etc.). Members of the Caprina class are characterized by their toppings: each Caprina must have at least one instance each of tomato topping, sundried tomato topping, mozzarella topping, and goat’s cheese topping. Additionally, Caprina pizzas can only have mozzarella, tomato, sundried tomato, or goat’s cheese as toppings—no other toppings are permitted. This formalization guarantees a specific and exclusive combination of ingredients for any pizza classified as Caprina.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping only (MozzarellaTopping or TomatoTopping or SundriedTomatoTopping or GoatsCheeseTopping)]', '[hasTopping some GoatsCheeseTopping]', '[hasTopping only SundriedTomatoTopping]']}\nGenerated CQs:", "output": "Is it necessary for a Caprina pizza to include at least one Sundried Tomato topping? | Can a Caprina be identified without having the hasTopping property with SundriedTomatoTopping? | Does every instance of Caprina always have some topping that is SundriedTomatoTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FourSeasons\nDescription: FourSeasons is a subclass of NamedPizza and is explicitly disjoint from several other specific pizza classes, ensuring that no pizza can be simultaneously classified as FourSeasons and any of the listed disjoint pizzas (such as Mushroom, Margherita, QuattroFormaggi, etc.). Members of the FourSeasons class are characterized by having at least one of each of the following toppings: mushroom, tomato, peperoni sausage, olive, mozzarella, anchovies, and capers. Additionally, the set of possible toppings for FourSeasons pizzas is restricted to only anchovies, mozzarella, peperoni sausage, tomato, capers, olives, and mushrooms—no other toppings are permitted. This formalization captures the standard combinatory topping profile of the FourSeasons pizza variant.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera'], 'propertyRestrictions': ['[hasTopping some MushroomTopping]', '[hasTopping some TomatoTopping]', '[hasTopping some PeperoniSausageTopping]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping only (AnchoviesTopping or MozzarellaTopping or PeperoniSausageTopping or TomatoTopping or CaperTopping or OliveTopping or MushroomTopping)]', '[hasTopping some CaperTopping]', '[hasTopping only AnchoviesTopping]']}\nGenerated CQs:", "output": "Is it required for a FourSeasons pizza to include AnchoviesTopping as one of its toppings? | Can a pizza be classified as FourSeasons if it does not have any AnchoviesTopping? | Does every instance of FourSeasons necessarily have at least one topping that is AnchoviesTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Giardiniera\nDescription: Giardiniera is defined as a subclass of NamedPizza, and is explicitly disjoint from several other pizza classes such as Mushroom, LaReine, Napoletana, and others—ensuring that no pizza can simultaneously be classified as Giardiniera and any of these classes. Members of Giardiniera are characterized by a combination of specific toppings: they must contain at least some MushroomTopping, TomatoTopping, OliveTopping, MozzarellaTopping, SlicedTomatoTopping, PeperonataTopping, PetitPoisTopping, and LeekTopping. Furthermore, Giardiniera pizzas are strictly limited to having toppings only from the set: LeekTopping, MozzarellaTopping, TomatoTopping, PetitPoisTopping, PeperonataTopping, OliveTopping, MushroomTopping, and SlicedTomatoTopping. This formalization ensures that any pizza classified as Giardiniera has an exclusive and characteristic combination of the specified toppings and no others.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some MushroomTopping]', '[hasTopping some TomatoTopping]', '[hasTopping only (LeekTopping or MozzarellaTopping or TomatoTopping or PetitPoisTopping or PeperonataTopping or OliveTopping or MushroomTopping or SlicedTomatoTopping)]', '[hasTopping some MozzarellaTopping]', '[hasTopping some SlicedTomatoTopping]', '[hasTopping some PeperonataTopping]', '[hasTopping some PetitPoisTopping]', '[hasTopping some LeekTopping]', '[hasTopping only OliveTopping]']}\nGenerated CQs:", "output": "Must a Giardiniera have at least one topping that is an OliveTopping? | Is it possible for a Giardiniera to be classified as such without having any OliveTopping? | Does the presence of OliveTopping qualify a pizza as Giardiniera, regardless of its other toppings? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Margherita\nDescription: Margherita is defined as a subclass of NamedPizza and is explicitly disjoint from a range of other specific pizza varieties, ensuring that no individual pizza can simultaneously be classified as both Margherita and any of those listed (such as Mushroom, LaReine, or Napoletana). Margherita pizzas are characterized by a strict topping composition: they must have at least one TomatoTopping and one MozzarellaTopping, and they can only have MozzarellaTopping or TomatoTopping as toppings—no other topping types are permitted. This formalization captures the essential simplicity and distinctiveness of the Margherita pizza.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some MozzarellaTopping]', '[hasTopping only (MozzarellaTopping or TomatoTopping)]', '[hasTopping only TomatoTopping]']}\nGenerated CQs:", "output": "Is it required that every Margherita pizza includes at least one TomatoTopping as a topping? | Can a pizza be classified as Margherita if it lacks TomatoTopping among its toppings? | Does the presence of TomatoTopping serve as a necessary condition for identifying a pizza as Margherita? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Napoletana\nDescription: Napoletana is defined as a subclass of NamedPizza and is explicitly disjoint with a wide range of other specific pizza types, ensuring that no individual pizza can simultaneously belong to Napoletana and any of those classes. Members of the Napoletana class must have toppings including tomato, olive, mozzarella, anchovies, and capers, with the restriction that only these toppings (and no others) are permitted. Additionally, the country of origin for Napoletana is restricted to Italy. This class therefore represents a distinct and well-defined type of pizza with a uniquely specified combination of Italian origin and allowable toppings.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some AnchoviesTopping]', '[hasCountryOfOrigin hasValue Italy]', '[hasTopping only (AnchoviesTopping or MozzarellaTopping or TomatoTopping or CaperTopping or OliveTopping)]', '[hasTopping only CaperTopping]']}\nGenerated CQs:", "output": "Is it necessary for a Napoletana pizza to have at least one topping that is a CaperTopping? | Does every instance of Napoletana include the property hasTopping with some value from CaperTopping? | Can a pizza be classified as Napoletana if it lacks any CaperTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PolloAdAstra\nDescription: PolloAdAstra is defined as a subclass of NamedPizza and is explicitly disjoint with other specified pizzas, ensuring that no individual pizza can simultaneously be an instance of PolloAdAstra and any of the listed alternative named pizzas. Members of this class must have at least one of each of the following toppings: Red Onion, Cajun Spice, Tomato, Garlic, Sweet Pepper, Mozzarella, and Chicken. Furthermore, the only permissible toppings are Chicken, Mozzarella, Garlic, Tomato, Red Onion, Cajun Spice, and Sweet Pepper; no other toppings are allowed. This formalization provides a precise specification of PolloAdAstra as a distinct pizza type characterized by its unique and restricted combination of toppings.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some RedOnionTopping]', '[hasTopping some CajunSpiceTopping]', '[hasTopping some GarlicTopping]', '[hasTopping some SweetPepperTopping]', '[hasTopping only (ChickenTopping or MozzarellaTopping or GarlicTopping or TomatoTopping or RedOnionTopping or CajunSpiceTopping or SweetPepperTopping)]', '[hasTopping some MozzarellaTopping]', '[hasTopping some ChickenTopping]', '[hasTopping only TomatoTopping]']}\nGenerated CQs:", "output": "Is it required for a PolloAdAstra pizza to have at least one TomatoTopping? | Can a PolloAdAstra pizza exist without having any TomatoTopping as one of its toppings? | Does every instance of PolloAdAstra use TomatoTopping among its toppings? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: QuattroFormaggi\nDescription: QuattroFormaggi is defined as a subclass of NamedPizza and is explicitly disjoint with a range of other specific pizza classes, meaning an individual pizza cannot simultaneously belong to QuattroFormaggi and any of the listed disjoint classes. Members of this class must have at least one tomato topping and at least one four-cheeses topping. Additionally, QuattroFormaggi pizzas are restricted to having only tomato and four-cheeses toppings—no other topping types are permitted. This formalization guarantees that any pizza classified as QuattroFormaggi has a distinctive combination of tomato and four-cheeses toppings, consistent with its traditional recipe.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some FourCheesesTopping]', '[hasTopping only (FourCheesesTopping or TomatoTopping)]', '[hasTopping only TomatoTopping]']}\nGenerated CQs:", "output": "Is it necessary for a QuattroFormaggi pizza to have at least one TomatoTopping as a topping? | Can a pizza be classified as QuattroFormaggi if it does not include any TomatoTopping among its toppings? | Does the presence of TomatoTopping serve as a required condition for an item to be recognized as QuattroFormaggi? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Siciliana\nDescription: Siciliana is a subclass of NamedPizza, explicitly disjoint from numerous other specific pizza types, ensuring that no individual pizza can be simultaneously classified as Siciliana and any of the listed varieties (e.g., Mushroom, Margherita, FourSeasons, etc.). Siciliana pizzas are characterized by their toppings: they must include some tomato topping, garlic topping, ham topping, artichoke topping, olive topping, mozzarella topping, and anchovies topping. Furthermore, these pizzas are restricted to only have toppings from the following: anchovies, mozzarella, garlic, artichoke, tomato, ham, and olive—no additional toppings are permitted. This formalization precisely defines the Siciliana pizza in terms of both its composition and differentiation from other pizzas.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some GarlicTopping]', '[hasTopping some HamTopping]', '[hasTopping some ArtichokeTopping]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some AnchoviesTopping]', '[hasTopping only (AnchoviesTopping and MozzarellaTopping and GarlicTopping and ArtichokeTopping and TomatoTopping and HamTopping and OliveTopping)]']}\nGenerated CQs:", "output": "Are Siciliana pizzas restricted to having only Anchovies, Mozzarella, Garlic, Artichoke, Tomato, Ham, or Olive as toppings? | Could a pizza still be classified as Siciliana if it includes a topping not listed among Anchovies, Mozzarella, Garlic, Artichoke, Tomato, Ham, or Olive? | Does the definition of Siciliana exclude all toppings other than Anchovies, Mozzarella, Garlic, Artichoke, Tomato, Ham, and Olive from being present on the pizza? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Soho\nDescription: Soho is defined as a subclass of NamedPizza and is explicitly disjoint with a range of other specific pizza types, ensuring that no instance can simultaneously belong to both Soho and these other classes. Members of the Soho class are characterized by their required toppings: each Soho pizza must include tomato, garlic, olive, mozzarella, parmesan, and rocket toppings. Additionally, the only permitted toppings for Soho pizzas are mozzarella, garlic, tomato, rocket, olive, or parmesan, meaning no other toppings are allowed on this type of pizza. This formalization strictly specifies both the mandatory inclusion and the exclusivity of particular toppings for Soho pizzas.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping only (MozzarellaTopping or GarlicTopping or TomatoTopping or RocketTopping or OliveTopping or ParmesanTopping)]', '[hasTopping some GarlicTopping]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some ParmesanTopping]', '[hasTopping only RocketTopping]']}\nGenerated CQs:", "output": "Is it required for a Soho pizza to have at least one topping of RocketTopping? | Does every Soho pizza include RocketTopping as one of its toppings? | Can a Soho pizza exist without having any RocketTopping among its toppings? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Veneziana\nDescription: Veneziana is defined as a subclass of NamedPizza and is disjoint with a range of other specific pizzas, ensuring no individual instance can simultaneously belong to Veneziana and any of those disjoint classes. Members of the Veneziana class must have only the following toppings: MozzarellaTopping, TomatoTopping, SultanaTopping, OnionTopping, CaperTopping, OliveTopping, or PineKernels; each member is also required to have at least one of each of these toppings present. Additionally, Veneziana pizzas have Italy as their country of origin. This ontological definition captures the uniquely defined set of ingredients and exclusive identity of the Veneziana pizza within the broader NamedPizza category.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping only (MozzarellaTopping or TomatoTopping or SultanaTopping or OnionTopping or CaperTopping or OliveTopping or PineKernels)]', '[hasTopping some PineKernels]', '[hasTopping some TomatoTopping]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some OnionTopping]', '[hasCountryOfOrigin hasValue Italy]', '[hasTopping some CaperTopping]', '[hasTopping only SultanaTopping]']}\nGenerated CQs:", "output": "Must a Veneziana pizza have at least one SultanaTopping as one of its toppings? | Is the presence of SultanaTopping a required condition for classifying a pizza as Veneziana? | Can a pizza lacking SultanaTopping ever be correctly categorized as Veneziana? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ArtichokeTopping\nDescription: ArtichokeTopping is defined as a subclass of VegetableTopping and is explicitly disjoint with a range of other vegetable toppings, including RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, ensuring that no individual can be classified as an ArtichokeTopping and any of these other types simultaneously. Furthermore, every member of the ArtichokeTopping class is constrained to have at least some level of mild spiciness (hasSpiciness some Mild), distinguishing it by its gentle flavor profile within the broader category of vegetable toppings.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is every ArtichokeTopping required to have at least one spiciness level classified as Mild? | Can an ArtichokeTopping exist without possessing any degree of spiciness identified as Mild? | Does the definition of ArtichokeTopping permit toppings with only Mild spiciness, or could additional spiciness levels also be present? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AsparagusTopping\nDescription: AsparagusTopping is defined as a subclass of VegetableTopping, meaning it represents a specific type of vegetable-based topping. It is disjoint with several other vegetable toppings, including RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, ensuring that an individual cannot simultaneously belong to any of these classes. Additionally, every instance of AsparagusTopping must have some level of mild spiciness, as specified by the hasSpiciness property restriction.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is every AsparagusTopping required to have at least one 'hasSpiciness' property with a Mild value? | Must AsparagusTopping always be associated with some level of Mild spiciness through the hasSpiciness property? | Can there exist an instance of AsparagusTopping without having any Mild spiciness via the hasSpiciness relationship? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CaperTopping\nDescription: CaperTopping is defined as a subclass of VegetableTopping, indicating that it is a specific type of vegetable-based topping. It is explicitly disjoint with other vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, meaning that an individual topping cannot belong to both CaperTopping and any of these classes simultaneously. Additionally, CaperTopping is characterized by having a property restriction requiring that it has some level of spiciness classified as Mild.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Must every CaperTopping have at least one hasSpiciness value that is Mild? | Is it possible for a CaperTopping to lack any hasSpiciness relation with Mild as a value? | Does the definition of CaperTopping require the existence of a Mild spiciness property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LeekTopping\nDescription: LeekTopping is defined as a subclass of VegetableTopping, representing toppings made from leeks. It is explicitly disjoint from a range of other vegetable toppings—including RocketTopping, OnionTopping, SpinachTopping, and others—ensuring that no individual can be both a LeekTopping and any of these other toppings simultaneously. Furthermore, members of this class are characterized by the property that they have at least some level of mild spiciness (hasSpiciness some Mild), distinguishing their flavor profile among vegetable toppings.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is it necessary for a LeekTopping to have the property 'hasSpiciness' with at least one Mild value? | Does every instance of LeekTopping possess a spiciness that includes Mild as one of its characteristics? | Can a LeekTopping exist without being associated with some degree of Mild spiciness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: OliveTopping\nDescription: OliveTopping is defined as a subclass of VegetableTopping and is disjoint with other vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping—meaning an individual cannot belong to both OliveTopping and any of these classes. Members of the OliveTopping class are further characterized by the property that they have at least some level of spiciness classified as mild.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is every OliveTopping required to have a spiciness property with at least one value of Mild? | Can an OliveTopping exist without any mild spiciness associated with it? | Are all OliveTopping instances guaranteed to possess some degree of mild spiciness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PetitPoisTopping\nDescription: PetitPoisTopping is defined as a subclass of VegetableTopping and is explicitly disjoint with other vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, and TomatoTopping—meaning no individual can simultaneously belong to PetitPoisTopping and any of these other topping classes. Additionally, PetitPoisTopping is characterized by the property restriction that it has some level of spiciness classified as Mild. This formalization ensures that PetitPoisTopping represents a unique, mildly spicy vegetable topping distinct from all other specified vegetable toppings.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is it required that a PetitPoisTopping ingredient has at least one spiciness level classified as Mild? | Does every PetitPoisTopping possess the property 'hasSpiciness' relating it to Mild spiciness? | Can a PetitPoisTopping exist without any association to Mild spiciness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RocketTopping\nDescription: RocketTopping is defined as a subclass of VegetableTopping, representing a specific type of vegetable-based topping. It is disjoint with multiple other vegetable toppings, including LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping—ensuring no individual can simultaneously belong to RocketTopping and any of these classes. Additionally, RocketTopping is characterized by the property that it must have at least some medium level of spiciness (hasSpiciness some Medium).\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Medium]']}\nGenerated CQs:", "output": "Is it necessary for a RocketTopping to have the hasSpiciness property with Medium as its value? | Must every instance of RocketTopping exhibit at least some degree of Medium spiciness? | Does the presence of Medium spiciness through the hasSpiciness property define a RocketTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TomatoTopping\nDescription: TomatoTopping is a subclass of VegetableTopping, representing toppings derived from tomatoes. It is explicitly disjoint with other vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, and PetitPoisTopping, ensuring that no individual can simultaneously be both a TomatoTopping and any of these other toppings. Additionally, TomatoTopping is defined to always have some level of mild spiciness, as specified by the restriction [hasSpiciness some Mild].\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is it required that every TomatoTopping possesses at least one spiciness classified as Mild? | Can a TomatoTopping exist without having any mild spiciness attribute? | Does the definition of TomatoTopping permit it to have only non-mild spiciness levels? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RosemaryTopping\nDescription: RosemaryTopping is defined as a subclass of HerbSpiceTopping, representing toppings that are both herbal and spicy in nature. This class is explicitly disjoint with CajunSpiceTopping, ensuring that no topping can be classified simultaneously as RosemaryTopping and CajunSpiceTopping. RosemaryTopping is further characterized by the property restriction that it must have at least some mild spiciness, distinguishing it from toppings with no or higher levels of spiciness.\nAxiom: {'subClassOf': ['HerbSpiceTopping'], 'disjointWith': ['CajunSpiceTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is every RosemaryTopping required to have a spiciness level that is Mild? | Can a RosemaryTopping exist without any mild spiciness property? | Must all instances of RosemaryTopping possess at least one spiciness classified as Mild? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FishTopping\nDescription: FishTopping is defined as a subclass of PizzaTopping and is explicitly disjoint with MeatTopping, SauceTopping, VegetableTopping, CheeseTopping, HerbSpiceTopping, NutTopping, and FruitTopping, ensuring that no topping instance can simultaneously belong to more than one of these classes. Members of the FishTopping class are characterized by the property that they possess at least some mild level of spiciness, as specified by the 'hasSpiciness some Mild' restriction. This formalization guarantees the uniqueness and specific mild spiciness characteristic of any pizza topping categorized as FishTopping.\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['MeatTopping', 'SauceTopping', 'VegetableTopping', 'CheeseTopping', 'HerbSpiceTopping', 'NutTopping', 'FruitTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Must every FishTopping include at least one instance with hasSpiciness set to Mild? | Is it required that FishTopping hasSpiciness relates to Mild in at least one case? | Can a topping classified as FishTopping exist without being associated with any Mild spiciness level? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NutTopping\nDescription: NutTopping is defined as a subclass of PizzaTopping, representing pizza toppings that consist specifically of nuts. It is explicitly disjoint with MeatTopping, SauceTopping, VegetableTopping, CheeseTopping, FishTopping, HerbSpiceTopping, and FruitTopping, ensuring that no topping instance can simultaneously belong to these other topping categories. Additionally, every NutTopping must have at least some level of mild spiciness, as constrained by the property restriction (hasSpiciness some Mild).\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['MeatTopping', 'SauceTopping', 'VegetableTopping', 'CheeseTopping', 'FishTopping', 'HerbSpiceTopping', 'FruitTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is it necessary for a NutTopping to have at least one hasSpiciness property value that is Mild? | Must every instance of NutTopping be associated with some mild level of spiciness through the hasSpiciness property? | Does the presence of a NutTopping imply the existence of a hasSpiciness relationship to Mild? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FourCheesesTopping\nDescription: FourCheesesTopping is defined as a subclass of CheeseTopping, representing a specific type of cheese topping distinguished by its composition of four cheeses. It is declared disjoint with GoatsCheeseTopping, MozzarellaTopping, GorgonzolaTopping, and ParmesanTopping, meaning an individual topping cannot simultaneously be classified as FourCheesesTopping and any of these other specific cheese toppings. Additionally, FourCheesesTopping must have a spiciness level that is at least mildly spicy, as specified by the restriction that it has some Mild spiciness.\nAxiom: {'subClassOf': ['CheeseTopping'], 'disjointWith': ['GoatsCheeseTopping', 'MozzarellaTopping', 'GorgonzolaTopping', 'ParmesanTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Must every FourCheesesTopping have at least one hasSpiciness relationship to Mild? | Is it required for a FourCheesesTopping to exhibit some level of spiciness classified as Mild? | Does the existence of a Mild spiciness property suffice for an instance to be considered a FourCheesesTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GoatsCheeseTopping\nDescription: GoatsCheeseTopping is defined as a subclass of CheeseTopping and is explicitly disjoint with MozzarellaTopping, GorgonzolaTopping, ParmesanTopping, and FourCheesesTopping, meaning an individual topping cannot simultaneously belong to any of these classes. GoatsCheeseTopping is characterized by the property that it has some degree of mild spiciness (hasSpiciness some Mild), indicating that any topping of this class is mildly spicy.\nAxiom: {'subClassOf': ['CheeseTopping'], 'disjointWith': ['MozzarellaTopping', 'GorgonzolaTopping', 'ParmesanTopping', 'FourCheesesTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is it required that any GoatsCheeseTopping must exhibit at least one instance of the hasSpiciness property with value Mild? | Does every GoatsCheeseTopping have an associated spiciness level that includes Mild? | Can a GoatsCheeseTopping exist without being characterized by the hasSpiciness property set to Mild? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GorgonzolaTopping\nDescription: GorgonzolaTopping is defined as a subclass of CheeseTopping, representing a specific type of cheese-based topping. It is explicitly disjoint with GoatsCheeseTopping, MozzarellaTopping, ParmesanTopping, and FourCheesesTopping, ensuring that an individual cannot simultaneously belong to any of these classes. GorgonzolaTopping is characterized by having some level of mild spiciness, as specified by the property restriction (hasSpiciness some Mild).\nAxiom: {'subClassOf': ['CheeseTopping'], 'disjointWith': ['GoatsCheeseTopping', 'MozzarellaTopping', 'ParmesanTopping', 'FourCheesesTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is it required that every GorgonzolaTopping has at least one spiciness characteristic classified as Mild? | Can a GorgonzolaTopping exist without being associated with the Mild level of spiciness? | Does the definition of GorgonzolaTopping necessitate that it possesses the property 'hasSpiciness' with respect to Mild flavor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MozzarellaTopping\nDescription: MozzarellaTopping is a subclass of CheeseTopping, representing a cheese-based topping specifically characterized by its mild spiciness and Italian origin. It is explicitly disjoint from GoatsCheeseTopping, GorgonzolaTopping, ParmesanTopping, and FourCheesesTopping, ensuring that no individual can simultaneously be an instance of MozzarellaTopping and any of these other cheese topping classes. All individuals of MozzarellaTopping are associated with a mild level of spiciness and must originate from Italy.\nAxiom: {'subClassOf': ['CheeseTopping'], 'disjointWith': ['GoatsCheeseTopping', 'GorgonzolaTopping', 'ParmesanTopping', 'FourCheesesTopping'], 'propertyRestrictions': ['[hasCountryOfOrigin hasValue Italy]', '[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is it required that every MozzarellaTopping has at least some level of spiciness categorized as Mild? | Can a MozzarellaTopping exist without having the hasSpiciness property set to Mild? | Does the presence of MozzarellaTopping entail that it must be associated with a Mild spiciness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ChickenTopping\nDescription: ChickenTopping is defined as a subclass of MeatTopping and is explicitly disjoint with PeperoniSausageTopping, HotSpicedBeefTopping, and HamTopping, ensuring that no individual can simultaneously belong to both ChickenTopping and any of these other meat topping classes. Members of the ChickenTopping class are required to have at least some level of spiciness characterized as Mild. This formalization specifies that ChickenTopping represents mild, non-overlapping meat-based pizza toppings distinct from other specified meat varieties.\nAxiom: {'subClassOf': ['MeatTopping'], 'disjointWith': ['PeperoniSausageTopping', 'HotSpicedBeefTopping', 'HamTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Does every ChickenTopping require at least one hasSpiciness property value of Mild? | Is it necessary for a ChickenTopping to be associated with some level of spiciness classified as Mild? | Can a ChickenTopping exist without having any hasSpiciness relationship to Mild? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HotSpicedBeefTopping\nDescription: HotSpicedBeefTopping is defined as a subclass of MeatTopping, representing a specific type of meat-based pizza topping. It is disjoint with PeperoniSausageTopping, HamTopping, and ChickenTopping, meaning no individual topping can simultaneously belong to any of these classes and HotSpicedBeefTopping. Members of this class are characterized by having at least some degree of spiciness classified as Hot, distinguishing them from other meat toppings in the ontology.\nAxiom: {'subClassOf': ['MeatTopping'], 'disjointWith': ['PeperoniSausageTopping', 'HamTopping', 'ChickenTopping'], 'propertyRestrictions': ['[hasSpiciness only Hot]']}\nGenerated CQs:", "output": "Must every HotSpicedBeefTopping have at least one hasSpiciness property value that is Hot? | Is it necessary for HotSpicedBeefTopping to be associated with some level of hot spiciness via the hasSpiciness property? | Can a HotSpicedBeefTopping exist without having the hasSpiciness property filled with a Hot value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: JalapenoPepperTopping\nDescription: JalapenoPepperTopping is formally defined as a subclass of PepperTopping, indicating that it inherits all general characteristics of pepper-based toppings. It is explicitly disjoint with SweetPepperTopping, GreenPepperTopping, and PeperonataTopping, meaning that no individual can simultaneously be an instance of JalapenoPepperTopping and any of these other topping types. Additionally, this class is characterized by the property restriction that every JalapenoPepperTopping must exhibit some level of hot spiciness, ensuring that all members are differentiated by their distinctly hot flavor profile.\nAxiom: {'subClassOf': ['PepperTopping'], 'disjointWith': ['SweetPepperTopping', 'GreenPepperTopping', 'PeperonataTopping'], 'propertyRestrictions': ['[hasSpiciness only Hot]']}\nGenerated CQs:", "output": "Must every JalapenoPepperTopping have at least one instance of spiciness classified as Hot? | Is it required for JalapenoPepperTopping to possess the hasSpiciness property associated with Hot? | Can JalapenoPepperTopping exist without being connected to Hot via the hasSpiciness property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PeperonataTopping\nDescription: PeperonataTopping is defined as a subclass of PepperTopping, meaning it inherits all characteristics typical of pepper-based pizza toppings. It is explicitly disjoint with SweetPepperTopping, GreenPepperTopping, and JalapenoPepperTopping, so no individual can simultaneously belong to any of those classes and PeperonataTopping. Every instance of PeperonataTopping is required to have at least some medium level of spiciness, as specified by its property restriction on hasSpiciness. This ensures that PeperonataTopping is uniquely distinguished by both its type within pepper toppings and its characteristic spiciness.\nAxiom: {'subClassOf': ['PepperTopping'], 'disjointWith': ['SweetPepperTopping', 'GreenPepperTopping', 'JalapenoPepperTopping'], 'propertyRestrictions': ['[hasSpiciness only Medium]']}\nGenerated CQs:", "output": "Must every PeperonataTopping have at least one hasSpiciness property with Medium as its value? | Can a PeperonataTopping exist without being associated with Medium spiciness through the hasSpiciness property? | Is it a requirement that PeperonataTopping be linked to Medium spiciness by means of the hasSpiciness property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SweetPepperTopping\nDescription: SweetPepperTopping is defined as a subclass of PepperTopping, specifying that it represents a type of pepper-based topping. It is explicitly disjoint with GreenPepperTopping, JalapenoPepperTopping, and PeperonataTopping, so no individual can be both a SweetPepperTopping and any of these other pepper toppings. Additionally, SweetPepperTopping has a property restriction requiring that it exhibits at least some mild level of spiciness (hasSpiciness some Mild), distinguishing it from potentially hotter pepper toppings.\nAxiom: {'subClassOf': ['PepperTopping'], 'disjointWith': ['GreenPepperTopping', 'JalapenoPepperTopping', 'PeperonataTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is every SweetPepperTopping required to have a spiciness level that is at least Mild? | Must there exist at least one instance where SweetPepperTopping has spiciness classified as Mild? | Can a SweetPepperTopping exist without being associated with Mild spiciness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IceCream\nDescription: IceCream is defined as a subclass of Food, and is explicitly disjoint with Pizza, PizzaTopping, and PizzaBase, ensuring that no individual can simultaneously belong to any of these classes. All members of the IceCream class must have at least one topping from FruitTopping, as specified by the property restriction (hasTopping some FruitTopping). The current modeling highlights a domain constraint issue: since the hasTopping property has Pizza as its domain, any use of hasTopping causes the reasoner to infer membership in Pizza. Combined with the disjointness between Pizza and IceCream, this results in a logical inconsistency, illustrating the importance of carefully aligning property domains with intended class usage.\nAxiom: {'subClassOf': ['Food'], 'disjointWith': ['Pizza', 'PizzaTopping', 'PizzaBase'], 'propertyRestrictions': ['[hasTopping only FruitTopping]']}\nGenerated CQs:", "output": "Is it required for every IceCream to include at least one topping that is a FruitTopping? | Can an IceCream exist without having any FruitTopping as a topping? | Does the presence of a FruitTopping as a topping suffice for something to be classified as IceCream? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Pizza\nDescription: Pizza is defined as a subclass of Food and is explicitly disjoint with IceCream, PizzaTopping, and PizzaBase, ensuring that no individual can simultaneously be an instance of Pizza and any of these disjoint classes. Every Pizza must have at least one base, specified by the restriction that it must have some relationship via hasBase to an instance of PizzaBase. This formalization captures the essential structure of a pizza: a food item composed of a particular base and distinguished from toppings or other food types such as ice cream.\nAxiom: {'subClassOf': ['Food'], 'disjointWith': ['IceCream', 'PizzaTopping', 'PizzaBase'], 'propertyRestrictions': ['[hasBase only PizzaBase]']}\nGenerated CQs:", "output": "Must every Pizza have at least one 'hasBase' relationship with some PizzaBase? | Is it required that a Pizza is associated with a PizzaBase via the 'hasBase' property? | Can a Pizza exist without having a 'hasBase' connection to any instance of PizzaBase? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SlicedTomatoTopping\nDescription: SlicedTomatoTopping is defined as a subclass of TomatoTopping and is explicitly disjoint with SundriedTomatoTopping, ensuring that no individual can be both a SlicedTomatoTopping and a SundriedTomatoTopping. Members of this class are characterized by the property that they must have at least some level of mild spiciness, as specified by the hasSpiciness restriction.\nAxiom: {'subClassOf': ['TomatoTopping'], 'disjointWith': ['SundriedTomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Must a SlicedTomatoTopping possess the property hasSpiciness with at least some value classified as Mild? | Does every instance of SlicedTomatoTopping necessarily have some form of spiciness level that is Mild? | Can a SlicedTomatoTopping exist without being associated to Mild via the hasSpiciness property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SundriedTomatoTopping\nDescription: SundriedTomatoTopping is a subclass of TomatoTopping, meaning it inherits all characteristics typical of tomato-based toppings. It is defined as disjoint with SlicedTomatoTopping, ensuring that an individual cannot be both a SundriedTomatoTopping and a SlicedTomatoTopping. Additionally, every instance of SundriedTomatoTopping must have at least some mild level of spiciness, as specified by the property restriction (hasSpiciness some Mild).\nAxiom: {'subClassOf': ['TomatoTopping'], 'disjointWith': ['SlicedTomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is it required that every SundriedTomatoTopping possesses the hasSpiciness property with at least one Mild instance? | Can SundriedTomatoTopping have spiciness levels other than Mild, or must it always include Mild spiciness? | Does the ontology entail that SundriedTomatoTopping must be associated with some form of Mild spiciness via the hasSpiciness relation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: VegetarianPizza\nDescription: VegetarianPizza is defined as a subclass of Pizza that is disjoint with NonVegetarianPizza, meaning no pizza can be both vegetarian and non-vegetarian. It is equivalent to pizzas that have neither meat toppings nor fish toppings—specifically, these pizzas do not have any topping that is an instance of MeatTopping or FishTopping. VegetarianPizza may have any combination of non-meat, non-fish toppings or no toppings at all, as specified in the current description. This ensures that only pizzas entirely free of meat and fish toppings are classified as VegetarianPizza.\nAxiom: {'disjointWith': ['NonVegetarianPizza'], 'equivalentClass': ['(Pizza and not [hasTopping some MeatTopping] and not [hasTopping only FishTopping])']}\nGenerated CQs:", "output": "Is every VegetarianPizza necessarily a Pizza that does not have any toppings which qualify as MeatTopping or FishTopping? | Is VegetarianPizza equivalent to the intersection of Pizza and those lacking both meat and fish as toppings? | Can VegetarianPizza be fully characterized as Pizzas for which there does not exist a MeatTopping or FishTopping among their toppings? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NonVegetarianPizza\nDescription: NonVegetarianPizza is formally defined as any Pizza that is not a VegetarianPizza. It is explicitly disjoint with VegetarianPizza, ensuring that no individual pizza can be both a NonVegetarianPizza and a VegetarianPizza. The equivalence axiom specifies that NonVegetarianPizza includes all and only those pizzas that are instances of Pizza but not classified as VegetarianPizza.\nAxiom: {'disjointWith': ['VegetarianPizza'], 'equivalentClass': ['(Pizza or not VegetarianPizza)']}\nGenerated CQs:", "output": "Is every NonVegetarianPizza necessarily a Pizza that is not a VegetarianPizza? | Is NonVegetarianPizza logically defined as the intersection of Pizza and the complement of VegetarianPizza? | Does the class NonVegetarianPizza exclude any Pizza that is a VegetarianPizza? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CheeseyPizza\nDescription: CheeseyPizza is formally defined as any Pizza that has at least one cheese topping, expressed by the equivalence axiom: CheeseyPizza ≡ Pizza and (hasTopping some CheeseTopping). This means that every instance of CheeseyPizza must be a pizza with one or more cheese toppings, aligning with the description: any pizza that has at least one cheese topping.\nAxiom: {'equivalentClass': ['(Pizza or [hasTopping only CheeseTopping])']}\nGenerated CQs:", "output": "Is a CheeseyPizza necessarily a Pizza that has at least one CheeseTopping as a topping? | Is the set of CheeseyPizza identical to the intersection of all Pizzas and those having some CheeseTopping? | Can an individual be classified as CheeseyPizza only if it is both a Pizza and possesses at least one hasTopping relationship to CheeseTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Country\nDescription: Country is an enumerated class, defined as exactly the set containing America, England, France, Germany, and Italy. It is equivalent to the intersection of this set and DomainConcept, meaning each Country instance must be one of these individuals and also a DomainConcept. By axiom, no other individuals can be classified as Country; all specified countries are explicitly different from each other.\nAxiom: {'equivalentClass': ['({America, Italy, Germany, France, England} or DomainConcept)']}\nGenerated CQs:", "output": "Is Country defined as the intersection of the individuals America, Italy, Germany, France, England and the class DomainConcept? | Does every instance of Country correspond to one of America, Italy, Germany, France, or England and also to DomainConcept? | Are there any individuals that are America, Italy, Germany, France, or England and DomainConcept but not classified as Country? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InterestingPizza\nDescription: InterestingPizza is defined as a subclass of Pizza that has at least three toppings, as specified by a minimum cardinality restriction (hasTopping min 3). This class is equivalent to pizzas possessing at least three values for the hasTopping property, regardless of the type of topping. It is important to note that this restriction is not a qualified cardinality constraint (QCR); it does not require that the toppings belong to a specific class such as PizzaTopping. This formalization captures any pizza with three or more toppings without specifying their types.\nAxiom: {'equivalentClass': ['([hasTopping min 3] or Pizza)']}\nGenerated CQs:", "output": "Does every InterestingPizza necessarily have at least three toppings and be a Pizza? | Can InterestingPizza be considered identical to the intersection of Pizzas with a minimum of three toppings? | Is having at least three toppings a necessary and sufficient condition for a Pizza to be an InterestingPizza? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MeatyPizza\nDescription: MeatyPizza is defined as any pizza (Pizza) that has at least one meat topping, formalized through an existential restriction stating that members of this class must bear at least one hasTopping relationship to an individual of class MeatTopping. This class is equivalent to the intersection of Pizza and those entities with some MeatTopping as a topping, ensuring all MeatyPizza instances feature at least one meat-based topping.\nAxiom: {'equivalentClass': ['([hasTopping only MeatTopping] or Pizza)']}\nGenerated CQs:", "output": "Is MeatyPizza defined as the intersection of Pizza and entities having at least one meat topping? | Does every MeatyPizza necessarily include some topping categorized as MeatTopping? | Can MeatyPizza be fully characterized as a Pizza that has at least one MeatTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SpicyPizza\nDescription: SpicyPizza is defined as any pizza (i.e., an instance of the class Pizza) that has at least one topping which is a SpicyTopping. This equivalence axiom ensures that all and only those pizzas with some spicy topping are classified under SpicyPizza. Thus, membership in the SpicyPizza class is determined precisely by the presence of at least one spicy topping.\nAxiom: {'equivalentClass': ['(Pizza or [hasTopping some SpicyTopping])']}\nGenerated CQs:", "output": "Is every SpicyPizza necessarily a Pizza that has at least one topping classified as a SpicyTopping? | Can SpicyPizza be precisely defined as the intersection of the class Pizza and those with some SpicyTopping? | Is SpicyPizza equivalent to pizzas that are distinguished by having at least one spicy topping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SpicyPizzaEquivalent\nDescription: SpicyPizzaEquivalent is defined as any Pizza that has at least one topping which is both a PizzaTopping and has a spiciness level of Hot. This equivalence axiom provides an alternative to approaches relying on a predefined SpicyTopping class, specifying instead that membership in SpicyPizzaEquivalent requires the existence of a topping meeting both conditions. This ensures precise classification of spicy pizzas based on their actual toppings' spiciness attributes.\nAxiom: {'equivalentClass': ['(Pizza or [hasTopping only ([hasSpiciness some Hot] or PizzaTopping)])']}\nGenerated CQs:", "output": "Is every SpicyPizzaEquivalent necessarily a Pizza with at least one topping that is both a PizzaTopping and possesses some degree of Hot spiciness? | Is SpicyPizzaEquivalent logically defined as the intersection of Pizza and those with a topping that is both a PizzaTopping and includes some Hot spiciness? | Can SpicyPizzaEquivalent be fully characterized as a Pizza that has a topping which is a PizzaTopping and has some Hot as its spiciness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SpicyTopping\nDescription: SpicyTopping is defined as an equivalent class to pizza toppings that possess a spiciness level of Hot. This means every SpicyTopping is a PizzaTopping and must have at least one instance of hot spiciness. Formally, individuals in this class are restricted to those pizza toppings that are characterized by having a hot spiciness attribute.\nAxiom: {'equivalentClass': ['([hasSpiciness some Hot] or PizzaTopping)']}\nGenerated CQs:", "output": "Is every SpicyTopping necessarily both a PizzaTopping and something that has spiciness characterized as Hot? | Can SpicyTopping be defined as the intersection of PizzaTopping and entities with the property hasSpiciness some Hot? | Is SpicyTopping equivalent to all PizzaTopping instances that have at least one Hot spiciness attribute? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ThinAndCrispyPizza\nDescription: ThinAndCrispyPizza is formally defined as a subclass of Pizza whose base is exclusively of type ThinAndCrispyBase. This means any individual classified as a ThinAndCrispyPizza must be a Pizza and can only have ThinAndCrispyBase as its base, with no other base types permitted. This equivalence axiom precisely characterizes ThinAndCrispyPizza by its unique crust style.\nAxiom: {'equivalentClass': ['(Pizza and [hasBase some ThinAndCrispyBase])']}\nGenerated CQs:", "output": "Is every ThinAndCrispyPizza required to have only ThinAndCrispyBase as its base? | Is ThinAndCrispyPizza equivalent to pizzas that exclusively use ThinAndCrispyBase? | Can ThinAndCrispyPizza be fully defined as the intersection of Pizza and things with base restricted solely to ThinAndCrispyBase? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: VegetarianPizzaEquivalent1\nDescription: VegetarianPizzaEquivalent1 is defined as any pizza (member of the Pizza class) whose toppings, if present, are exclusively vegetarian; that is, it only has toppings that are instances of VegetarianTopping, or it has no toppings at all. Formally, it is equivalent to the intersection of Pizza and those that satisfy the restriction 'hasTopping only VegetarianTopping'. According to the description, this class should be inferred to be equivalent to VegetarianPizzaEquiv2 but is not equivalent to the broader VegetarianPizza class, as the latter does not assume that PizzaTopping encompasses all possible toppings.\nAxiom: {'equivalentClass': ['(Pizza or [hasTopping only VegetarianTopping])']}\nGenerated CQs:", "output": "Does VegetarianPizzaEquivalent1 include only those Pizzas where all toppings are VegetarianTopping? | Is VegetarianPizzaEquivalent1 equivalent to the intersection of Pizza and items whose toppings are restricted to VegetarianTopping? | Can VegetarianPizzaEquivalent1 be defined as a Pizza that necessarily has only VegetarianTopping as its topping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: VegetarianPizzaEquivalent2\nDescription: VegetarianPizzaEquivalent2 is defined as a class equivalent to pizzas that have only sauce, cheese, vegetable, fruit, nut, or herb & spice toppings—no other topping types are permitted. This definition provides an alternative to VegetarianPizzaEquiv1 by specifying allowed toppings directly, avoiding dependency on a pre-defined VegetarianTopping class. However, it is noted that this approach may be less maintainable and is not equivalent to the original VegetarianPizza class.\nAxiom: {'equivalentClass': ['(Pizza or [hasTopping only (SauceTopping and CheeseTopping and VegetableTopping and FruitTopping and NutTopping and HerbSpiceTopping)])']}\nGenerated CQs:", "output": "Is VegetarianPizzaEquivalent2 defined as a Pizza that can only have toppings that are either SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping? | Can a VegetarianPizzaEquivalent2 ever have a topping outside the categories of SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping? | Is being a Pizza with toppings restricted exclusively to SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping sufficient for classification as a VegetarianPizzaEquivalent2? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: VegetarianTopping\nDescription: VegetarianTopping is formally defined as a pizza topping that must be one of the following: SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping. This equivalence axiom ensures that every VegetarianTopping is a subclass of PizzaTopping and cannot be any topping outside this specified set. In practice, this means only toppings within these categories are considered vegetarian according to the ontology.\nAxiom: {'equivalentClass': ['(PizzaTopping or (SauceTopping and CheeseTopping and VegetableTopping and FruitTopping and NutTopping and HerbSpiceTopping))']}\nGenerated CQs:", "output": "Is every VegetarianTopping necessarily classified as a PizzaTopping and also as one of: SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping? | Is VegetarianTopping equivalent to the intersection of PizzaTopping with the union of SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, and HerbSpiceTopping? | Does VegetarianTopping include any toppings apart from SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping within the category of PizzaTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CheeseyVegetableTopping\nDescription: CheeseyVegetableTopping is defined as a subclass of VegetableTopping, meaning every instance of CheeseyVegetableTopping is also an instance of VegetableTopping. There are no additional restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['VegetableTopping', 'CheeseTopping']}\nGenerated CQs:", "output": "Is CheeseyVegetableTopping categorized as a type of CheeseTopping? | What specific types fall under the class CheeseTopping, with regard to CheeseyVegetableTopping? | Which broader classes encompass CheeseyVegetableTopping within their classification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HotGreenPepperTopping\nDescription: HotGreenPepperTopping is defined as a subclass of GreenPepperTopping, meaning every HotGreenPepperTopping is a type of GreenPepperTopping. There are no additional property restrictions or axioms specified for this class.\nAxiom: {'subClassOf': ['GreenPepperTopping'], 'propertyRestrictions': ['[hasSpiciness some Hot]']}\nGenerated CQs:", "output": "Is every HotGreenPepperTopping required to have a spiciness level that includes some instance of Hot? | Can a HotGreenPepperTopping exist that does not possess the hasSpiciness property with a value classified as Hot? | Does the presence of the hasSpiciness property with Hot necessarily characterize all instances of HotGreenPepperTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ParmaHamTopping\nDescription: ParmaHamTopping is defined as a subclass of HamTopping. This means every instance of ParmaHamTopping is necessarily an instance of HamTopping, inheriting all properties and characteristics of HamTopping. No additional distinguishing property restrictions are specified for this class.\nAxiom: {'subClassOf': ['HamTopping'], 'propertyRestrictions': ['[hasSpiciness some Mild]']}\nGenerated CQs:", "output": "Is every ParmaHamTopping required to have at least one level of spiciness classified as Mild? | Can a ParmaHamTopping exist without any Mild spiciness level? | Does the definition of ParmaHamTopping allow for spiciness levels other than Mild, provided that at least one is Mild? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Spiciness\nDescription: Spiciness is defined as a subclass of ValuePartition, indicating that it represents a partitioning value within a larger classification scheme. As a ValuePartition, it is intended to categorize entities based on specific qualitative values or levels of spiciness. No additional equivalent class axioms are specified.\nAxiom: {'subClassOf': ['ValuePartition'], 'equivalentClass': ['(Hot or Medium or Mild)']}\nGenerated CQs:", "output": "Is Spiciness defined as exactly the union of Hot, Medium, and Mild? | Are all instances of Hot, Medium, or Mild considered Spiciness? | Does Spiciness include any categories apart from Hot, Medium, and Mild? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SultanaTopping\nDescription: SultanaTopping is a class defined by the property restriction that its members must exhibit some medium level of spiciness, as specified by the hasSpiciness property. No further superclass or disjointness constraints are asserted for this class.\nAxiom: {'subClassOf': ['FruitTopping'], 'propertyRestrictions': ['[hasSpiciness some Medium]']}\nGenerated CQs:", "output": "Is SultanaTopping classified as a kind of FruitTopping? | What toppings are considered subtypes of FruitTopping, including SultanaTopping? | Which higher-level topping categories encompass SultanaTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TobascoPepperSauce\nDescription: TobascoPepperSauce is a class defined by its property restriction: all instances must have at least some degree of spiciness classified as Hot. There are no asserted superclass relationships, but the essential characteristic of this class is the requirement that every TobascoPepperSauce possesses hot spiciness.\nAxiom: {'subClassOf': ['SauceTopping'], 'propertyRestrictions': ['[hasSpiciness some Hot]']}\nGenerated CQs:", "output": "Is TobascoPepperSauce classified as a subcategory of SauceTopping? | Which toppings are more specific instances under SauceTopping, such as TobascoPepperSauce? | To which broader topping classes does TobascoPepperSauce belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RealItalianPizza\nDescription: RealItalianPizza is defined as an equivalent class to pizzas that have Italy as their country of origin. This means any individual that is classified as a pizza and is specifically identified as originating from Italy is considered a RealItalianPizza. The class captures the concept of authentic Italian pizza through this origin-based restriction.\nAxiom: {'equivalentClass': ['(Pizza and [hasCountryOfOrigin hasValue Italy])'], 'propertyRestrictions': ['[hasBase only ThinAndCrispyBase]']}\nGenerated CQs:", "output": "Is RealItalianPizza required to have only ThinAndCrispyBase as its base? | Can a RealItalianPizza have any base type other than ThinAndCrispyBase? | Does the definition of RealItalianPizza exclude all bases except for ThinAndCrispyBase? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasSpiciness\nDescription: The property \"hasSpiciness\" is a functional property, meaning each subject can have at most one value for this property. Its range is restricted to the class \"Spiciness,\" but no explicit domain is specified. It is designed to denote the spiciness level of an entity, particularly in the context of a ValuePartition. There are no super-properties or inverse properties defined.\nAxiom: {'characteristics': ['Functional'], 'domain': ['None'], 'range': [], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Does the property 'hasSpiciness' accept any value that is not classified as Spiciness as its range? | Are all possible values of 'hasSpiciness' instances of the class Spiciness? | Which types of entities can serve as the range for the 'hasSpiciness' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: isToppingOf\nDescription: The property \"isToppingOf\" is a functional object property, meaning each instance of \"PizzaTopping\" can be a topping of at most one \"Pizza\". Its domain is restricted to \"PizzaTopping\" and its range to \"Pizza\". \"isToppingOf\" is a sub-property of \"isIngredientOf\" and has \"hasTopping\" as its inverse. According to the description, each topping instance should only be associated with a single pizza.\nAxiom: {'characteristics': ['Functional'], 'domain': ['PizzaTopping'], 'range': ['Pizza'], 'subPropertyOf': ['isIngredientOf'], 'inverseOf': []}\nGenerated CQs:", "output": "How are the properties ‘isToppingOf’ and ‘hasTopping’ related in terms of inverses within the ontology? | If an individual A isToppingOf B, does this entail that B hasTopping A in the ontology? | What property is defined as the inverse of ‘isToppingOf’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasIngredient\nDescription: The property \"hasIngredient\" is a transitive object property relating entities of type Food to other Food entities. Because of its transitivity, if Food A hasIngredient Food B and Food B hasIngredient Food C, then Food A also hasIngredient Food C. It has \"Food\" as both its domain and range, ensuring it only connects food items. The property is the inverse of \"isIngredientOf\" and carries no additional super-properties. Current comments note that due to transitivity, the ingredients of ingredients are considered ingredients of the whole.\nAxiom: {'characteristics': ['Transitive'], 'domain': ['Food'], 'range': ['Food'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What is the inverse property of ‘hasIngredient’ in the ontology? | If entity X has ingredient Y, does this entail that Y is an ingredient of X? | How does the ontology define the connection between ‘hasIngredient’ and ‘isIngredientOf’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasBase\nDescription: The property \"hasBase\" is both functional and inverse functional, ensuring that each Pizza has exactly one PizzaBase and each PizzaBase is associated with exactly one Pizza. Its domain is Pizza, and its range is PizzaBase, indicating it links pizzas to their bases. \"hasBase\" is a sub-property of \"hasIngredient,\" specifying it as a specialized form of ingredient relationship. It has an inverse property \"isBaseOf,\" which links PizzaBase to Pizza.\nAxiom: {'characteristics': ['Functional', 'InverseFunctional'], 'domain': ['Pizza'], 'range': ['PizzaBase'], 'subPropertyOf': ['hasIngredient'], 'inverseOf': []}\nGenerated CQs:", "output": "How are the object properties ‘hasBase’ and ‘isBaseOf’ connected in terms of inverse relations within the ontology? | If entity A hasBase entity B, does the ontology entail that entity B isBaseOf entity A? | Which object property is defined as the inverse of ‘isBaseOf’ in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasTopping\nDescription: The property \"hasTopping\" is an inverse functional object property, meaning each pizza topping can be associated with at most one pizza via this property. Its domain is restricted to Pizza, and its range is PizzaTopping. \"hasTopping\" is a sub-property of \"hasIngredient\" and has \"isToppingOf\" as its inverse property. Note that \"hasTopping\" is inverse functional because \"isToppingOf\" is functional.\nAxiom: {'characteristics': ['InverseFunctional'], 'domain': ['Pizza'], 'range': ['PizzaTopping'], 'subPropertyOf': ['hasIngredient'], 'inverseOf': []}\nGenerated CQs:", "output": "How are the properties ‘hasTopping’ and ‘isToppingOf’ related in terms of logical inverses in the ontology? | If item A hasTopping item B, does the ontology entail that item B isToppingOf item A? | Which property functions as the inverse of ‘hasTopping’ in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: isBaseOf\nDescription: The property \"isBaseOf\" is both functional and inverse functional, meaning each PizzaBase is the base of at most one Pizza, and each Pizza has at most one PizzaBase. Its domain is restricted to PizzaBase, and its range is Pizza. \"isBaseOf\" is a sub-property of \"isIngredientOf\" and has \"hasBase\" as its inverse property. This property is used to relate a PizzaBase to the Pizza for which it serves as the base.\nAxiom: {'characteristics': ['Functional', 'InverseFunctional'], 'domain': ['PizzaBase'], 'range': ['Pizza'], 'subPropertyOf': ['isIngredientOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Which property is formally specified as the inverse of ‘isBaseOf’ in the ontology? | If entity A isBaseOf entity B, does the ontology entail that B hasBase A? | How does the ontology define the logical connection between ‘isBaseOf’ and ‘hasBase’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: isIngredientOf\nDescription: The property \"isIngredientOf\" is a transitive property relating instances of Food to other instances of Food, designating that one food is an ingredient of another. Its domain and range are both restricted to the class Food. \"isIngredientOf\" is the inverse of \"hasIngredient\" and should mirror all subproperties and attributes associated with \"hasIngredient,\" as noted in its current description. No super-properties are specified.\nAxiom: {'characteristics': ['Transitive'], 'domain': ['Food'], 'range': ['Food'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What is the inverse relationship defined between 'isIngredientOf' and 'hasIngredient' in the ontology? | If entity X is an ingredient of entity Y, does the ontology assert that Y has ingredient X? | Which property functions as the inverse for 'isIngredientOf' within this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasCountryOfOrigin\nDescription: The property \"hasCountryOfOrigin\" has no explicitly defined characteristics, domain, or range constraints. It is not specified as a sub-property of any other property, nor does it have an inverse property. Typically, \"hasCountryOfOrigin\" is intended to relate entities to their country of origin, but no further restrictions or definitions are enforced by the current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that 'hasCountryOfOrigin' does not have a specified domain? | What types of subjects are allowed for the property 'hasCountryOfOrigin'? | Is it correct that 'hasCountryOfOrigin' does not have a defined range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:Instant\nDescription: time:Instant is a subclass of time:TemporalEntity, representing a specific point in time without duration. It is explicitly disjoint with time:ProperInterval, meaning no individual can be both a time:Instant and a time:ProperInterval. This enforces a clear ontological distinction between an instantaneous temporal entity and a temporal interval with measurable duration.\nAxiom: {'subClassOf': ['time:TemporalEntity'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology specify the mutual exclusivity between time:Instant and time:ProperInterval? | Is any entity allowed to be typed as both time:Instant and time:ProperInterval simultaneously? | Which classes are declared as disjoint with time:Instant within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:DateTimeInterval\nDescription: time:DateTimeInterval is defined as a subclass of time:ProperInterval. This means every DateTimeInterval is a specific type of ProperInterval, representing a continuous interval of time with explicitly defined start and end date-time values. The class is intended for use where temporal intervals need to be precisely bounded using date and time information.\nAxiom: {'subClassOf': ['time:ProperInterval']}\nGenerated CQs:", "output": "Is time:DateTimeInterval categorized under time:ProperInterval? | What kinds of intervals are classified as time:ProperInterval, considering time:DateTimeInterval? | Which broader interval types does time:DateTimeInterval fall into? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:Interval\nDescription: time:Interval is defined as a subclass of time:TemporalEntity, signifying that it represents a specific type of temporal entity. Instances of time:Interval describe durations or spans of time, distinct from other temporal entities such as instants, emphasizing an interval’s extension across a portion of the temporal dimension.\nAxiom: {'subClassOf': ['time:TemporalEntity']}\nGenerated CQs:", "output": "To which higher-level temporal categories does time:Interval directly relate? | Is every time:Interval encompassed within the broader class of time:TemporalEntity? | Which specific entities are classified under time:TemporalEntity, such as time:Interval? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:ProperInterval\nDescription: time:ProperInterval is defined as a subclass of time:Interval. This means every instance of time:ProperInterval is also an instance of time:Interval, inheriting all its properties. Proper intervals represent temporal intervals with distinct start and end points (i.e., the start and end times are different), distinguishing them from instantaneous time points or degenerate intervals where start equals end.\nAxiom: {'subClassOf': ['time:Interval']}\nGenerated CQs:", "output": "Is time:Interval a broader category encompassing time:ProperInterval? | What other subclasses exist under time:Interval besides time:ProperInterval? | To which upper-level classifications does time:ProperInterval belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:DayOfWeek\nDescription: time:DayOfWeek is defined as a class equivalent to the set containing time:Monday, time:Tuesday, time:Wednesday, time:Thursday, time:Friday, time:Saturday, and time:Sunday. This means that any individual of time:DayOfWeek must be exactly one of these seven days, formally capturing the conventional enumeration of days in a week.\nAxiom: {'equivalentClass': ['{time:Wednesday, time:Friday, time:Saturday, time:Tuesday, time:Monday, time:Sunday, time:Thursday}']}\nGenerated CQs:", "output": "Is DayOfWeek identical to the set containing Wednesday, Friday, Saturday, Tuesday, Monday, Sunday, and Thursday? | Is each member of the set {Wednesday, Friday, Saturday, Tuesday, Monday, Sunday, Thursday} necessarily an instance of DayOfWeek? | Are there any classes included in DayOfWeek apart from the specified days: Wednesday, Friday, Saturday, Tuesday, Monday, Sunday, and Thursday? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:TemporalUnit\nDescription: time:TemporalUnit is a class that is defined as being equivalent to the set containing time:unitMonth, time:unitMinute, time:unitDay, time:unitHour, time:unitYear, time:unitSecond, and time:unitWeek. This means that any individual that is an instance of any of these specific temporal units (such as month, minute, day, hour, year, second, or week) is also an instance of time:TemporalUnit, and vice versa. The class thus serves as a grouping for the major standard units used to measure time.\nAxiom: {'equivalentClass': ['{time:unitMonth, time:unitMinute, time:unitDay, time:unitHour, time:unitYear, time:unitSecond, time:unitWeek}']}\nGenerated CQs:", "output": "Is every time:TemporalUnit necessarily one of time:unitMonth, time:unitMinute, time:unitDay, time:unitHour, time:unitYear, time:unitSecond, or time:unitWeek? | Does time:TemporalUnit exclude any temporal concept other than the specified units (month, minute, day, hour, year, second, week)? | Is time:TemporalUnit logically equivalent to the union of time:unitMonth, time:unitMinute, time:unitDay, time:unitHour, time:unitYear, time:unitSecond, and time:unitWeek? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:TemporalEntity\nDescription: time:TemporalEntity is defined as a class equivalent to either time:Instant or time:Interval. This means any instance of time:TemporalEntity must be either an instant (representing a single point in time) or an interval (representing a duration between two points in time). This equivalence captures the generality of temporal entities, encompassing both points and periods within a temporal framework.\nAxiom: {'equivalentClass': ['(time:Instant and time:Interval)']}\nGenerated CQs:", "output": "Is time:TemporalEntity defined as the union of time:Instant and time:Interval? | Are all instances of time:TemporalEntity necessarily either a time:Instant or a time:Interval? | Does time:TemporalEntity include any instance that is not a time:Instant or a time:Interval? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:January\nDescription: time:January is defined as a class whose members have the month property with the value \"01\" and the unit type property with the value time:unitMonth. This ensures that any instance of time:January specifically represents the calendar month of January, consistently characterized by being of unit type month.\nAxiom: {'subClassOf': ['time:DateTimeDescription'], 'propertyRestrictions': ['[time:month hasValue --01]', '[time:unitType hasValue time:unitMonth]']}\nGenerated CQs:", "output": "Is time:January included as a specific instance within the broader class of time:DateTimeDescription? | Which subclasses fall under time:DateTimeDescription, and does this include time:January? | To which higher-level time classification does time:January belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:Year\nDescription: time:Year is defined as a class whose instances have exactly one value for the property time:years, and exactly zero values for the properties time:months, time:weeks, time:days, time:hours, time:minutes, and time:seconds. This ensures that any individual of this class represents a duration or quantity consisting strictly of one year, with no additional smaller time units included.\nAxiom: {'subClassOf': ['time:DurationDescription'], 'propertyRestrictions': ['[time:years exactly 1]', '[time:months exactly 0]', '[time:hours exactly 0]', '[time:weeks exactly 0]', '[time:seconds exactly 0]', '[time:days exactly 0]', '[time:minutes exactly 0]']}\nGenerated CQs:", "output": "Is time:DurationDescription a more general category that includes time:Year? | What are the subclasses characterized under time:DurationDescription, such as time:Year? | Which broader classes does time:Year inherit properties from in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:DateTimeDescription\nDescription: time:DateTimeDescription is a class characterized by a set of temporal property restrictions, where each instance can have at most one value for properties such as week, dayOfWeek, minute, day, month, timeZone, hour, year, and dayOfYear, ensuring singular temporal specification for these components. Additionally, every instance must have exactly one value for unitType, enforcing a precise definition of the temporal unit being described. This class is designed to represent detailed, unambiguous descriptions of specific date and time elements.\nAxiom: {'propertyRestrictions': ['[time:week max 1]', '[time:dayOfWeek max 1]', '[time:minute max 1]', '[time:day max 1]', '[time:month max 1]', '[time:timeZone max 1]', '[time:hour max 1]', '[time:unitType exactly 1]', '[time:year max 1]', '[time:dayOfYear max 1]', '[time:second max 1]']}\nGenerated CQs:", "output": "Is there a restriction that a time:DateTimeDescription can have at most one value for the property time:second? | Does a time:DateTimeDescription ever include more than one time:second property? | Is it possible for a time:DateTimeDescription to refer to multiple seconds values simultaneously? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time:DurationDescription\nDescription: time:DurationDescription is a class characterized by specifying temporal durations, with property restrictions enforcing that at most one value can be associated with each of the following properties: time:hours, time:minutes, time:seconds, time:days, time:weeks, and time:years. This ensures that any instance of time:DurationDescription can include, for each temporal unit, no more than a single value, supporting unambiguous and clearly defined durations.\nAxiom: {'propertyRestrictions': ['[time:hours max 1]', '[time:seconds max 1]', '[time:weeks max 1]', '[time:days max 1]', '[time:years max 1]', '[time:minutes max 1]', '[time:months max 1]']}\nGenerated CQs:", "output": "Is it required that a DurationDescription has at most one value for the 'months' property? | Can a DurationDescription be associated with more than one 'months' property value? | Does the ontology restrict DurationDescription entities to a single 'months' property assignment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalOverlappedBy\nDescription: The property \"time:intervalOverlappedBy\" has no explicitly defined domain, range, characteristics, or super-properties. It is specified as the inverse of \"time:intervalOverlaps\", indicating that if one interval is overlapped by another, the second interval overlaps the first. No further restrictions or features are defined for this property.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What is the inverse property of ‘intervalOverlappedBy’ in the ontology? | If interval A is overlapped by interval B, does it follow that interval B overlaps interval A according to the defined properties? | How are the properties ‘intervalOverlappedBy’ and ‘intervalOverlaps’ connected in terms of inverse relationships? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalAfter\nDescription: The property \"time:intervalAfter\" has no explicitly defined characteristics, domain, or range restrictions. It does not have any super-properties. Its inverse property is \"time:intervalBefore,\" indicating that if one interval is after another, the second is before the first. This property is used to relate temporal intervals where one occurs after the other.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What is the ontological relationship established between 'intervalAfter' and 'intervalBefore'? | If interval A occurs after interval B, must interval B occur before interval A? | Which property is defined as the inverse of 'intervalAfter' in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalOverlaps\nDescription: The property \"time:intervalOverlaps\" relates two individuals, both of which must be instances of time:ProperInterval. It has no explicitly defined characteristics, no super-properties, and no specified inverse property. This property is used to indicate that two proper time intervals overlap with each other in time.\nAxiom: {'characteristics': [], 'domain': ['time:ProperInterval'], 'range': [], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'intervalOverlaps' relate to anything other than a ProperInterval as its object? | Is there any ProperInterval that cannot be used as the range for the property 'intervalOverlaps'? | What types of entities can appear as the range for the property 'intervalOverlaps'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalFinishedBy\nDescription: The property \"time:intervalFinishedBy\" has no explicitly defined characteristics, domain, or range restrictions, and is not declared as a sub-property of any other property. It is specified as the inverse of \"time:intervalFinishes,\" indicating a reciprocal relationship between temporal intervals where one interval is finished by another. No additional description is currently provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What is the logical connection between 'intervalFinishedBy' and 'intervalFinishes' in the ontology? | If time interval A is related to interval B using 'intervalFinishedBy', does this entail that B is related to A via 'intervalFinishes'? | Which property is defined as the inverse of 'intervalFinishedBy' in the time ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalMetBy\nDescription: The property \"time:intervalMetBy\" has no explicitly defined characteristics, domain, or range restrictions, and does not have any super-properties. It is specified as the inverse of \"time:intervalMeets,\" indicating a temporal relation where one interval is met by another. No additional description is provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What is the ontological connection between the properties ‘intervalMetBy’ and ‘intervalMeets’? | If an interval A is met by interval B, does this entail that B meets A according to the ontology? | Which property is defined as the inverse of ‘intervalMetBy’ in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalContains\nDescription: The property \"time:intervalContains\" has no explicitly defined domain, range, or characteristics. It specifies an inverse property relationship with \"time:intervalDuring,\" indicating that if one time interval contains another, the latter occurs within the bounds of the former. No super-properties are defined.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "How does the ontology represent the connection between 'intervalContains' and 'intervalDuring' properties? | If a time interval A contains time interval B, does the ontology entail that B occurs during A? | Which property is identified as the inverse of 'intervalContains' in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:hasBeginning\nDescription: The property \"time:hasBeginning\" links instances of time:TemporalEntity to a time:Instant that marks their starting point. It has no specified characteristics or super-properties, and it does not have an inverse property. The domain is time:TemporalEntity and the range is time:Instant, indicating its use for specifying the beginning instant of a temporal entity.\nAxiom: {'characteristics': [], 'domain': ['time:TemporalEntity'], 'range': [], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:hasBeginning' have an object that is not a time:Instant? | Is every entity used as the range of 'time:hasBeginning' required to be a time:Instant? | What types of values are permitted as the object of the 'time:hasBeginning' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:dayOfWeek\nDescription: The property \"time:dayOfWeek\" has no explicitly defined characteristics or super-properties. Its domain is \"time:DateTimeDescription,\" meaning it is used with instances describing date and time. Its range is \"time:DayOfWeek,\" indicating the value should be a day of the week. No inverse property is specified. This property associates a DateTime description with the specific day of the week it represents.\nAxiom: {'characteristics': [], 'domain': [], 'range': ['time:DayOfWeek'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it possible for a property like 'dayOfWeek' to have a domain other than DateTimeDescription? | Must all instances associated with 'dayOfWeek' be types of DateTimeDescription? | Which kinds of entities are permitted as the domain for 'dayOfWeek'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:year\nDescription: The property \"time:year\" links instances of time:DateTimeDescription to values of type xsd:gYear, representing a specific year. It does not have additional property characteristics, super-properties, or an inverse property defined.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeDescription'], 'range': [], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Does the property 'time:year' accept values other than those of type xsd:gYear as its range? | Are all values associated with 'time:year' required to be instances of xsd:gYear? | What possible data types can be used as the range for the property 'time:year'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:days\nDescription: The property \"time:days\" has no declared characteristics or super-properties. Its domain is restricted to instances of \"time:DurationDescription,\" and its range is specified as \"xsd:decimal.\" This property is used to indicate the number of days, represented as a decimal value, associated with a given duration description. No inverse property is defined.\nAxiom: {'characteristics': [], 'domain': [], 'range': ['xsd:decimal'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:days' be applied to any subject other than an instance of time:DurationDescription? | What entities are allowed as subjects when using the property 'time:days'? | Is it possible for something that is not a time:DurationDescription to have a 'time:days' value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalMeets\nDescription: The property \"time:intervalMeets\" relates two individuals of type time:ProperInterval, indicating that one time interval immediately precedes another without overlapping. It has no defined characteristics, super-properties, or inverse property. Its domain and range are both restricted to time:ProperInterval.\nAxiom: {'characteristics': [], 'domain': [], 'range': ['time:ProperInterval'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:intervalMeets' relate any subject other than a time:ProperInterval? | Are all instances using 'time:intervalMeets' as a subject required to be of type time:ProperInterval? | Which classes are permitted as the domain for the 'time:intervalMeets' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:week\nDescription: The property \"time:week\" relates an instance of \"time:DateTimeDescription\" to a non-negative integer value, representing the week component of a date-time description. It has no defined characteristics, super-properties, or inverse properties. The property ensures that the week is expressed as a non-negative integer, but otherwise imposes no additional restrictions.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeDescription'], 'range': [], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'week' be associated with any object other than a nonNegativeInteger as its value? | Is it correct that the only possible range for 'week' is xsd:nonNegativeInteger, or can other datatypes be used? | What types of values are permissible as the range of the property 'week'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:after\nDescription: The property \"time:after\" has no explicitly defined characteristics, domain, or range restrictions, and does not have any super-properties. It is specified as the inverse of the property \"time:before,\" indicating that if one entity is related to another via \"time:after,\" the second entity is related to the first via \"time:before.\" No additional description is provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What is the inverse property of 'time:after' in the ontology? | If entity A is related to entity B through 'time:after', does the ontology entail that B is related to A through 'time:before'? | How do the properties 'time:after' and 'time:before' correspond as logical inverses in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:before\nDescription: The property \"time:before\" is a transitive property used to relate two instances of time:TemporalEntity, indicating that one temporal entity occurs before another. It has both its domain and range restricted to time:TemporalEntity. No super-properties or inverse properties are specified.\nAxiom: {'characteristics': ['Transitive'], 'domain': [], 'range': ['time:TemporalEntity'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:before' be used with subjects that are not instances of 'time:TemporalEntity'? | Are there any 'time:TemporalEntity' instances that cannot participate as domains in the 'time:before' relationship? | What types of entities are permissible as the domain for the property 'time:before'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalStartedBy\nDescription: The property \"time:intervalStartedBy\" has no explicitly defined characteristics, domain, or range restrictions, and is not a sub-property of any other property. It is specified as the inverse of \"time:intervalStarts,\" indicating that if an interval is started by another, then the latter starts the former. No additional constraints or relationships are provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What is the inverse relationship specified between the properties ‘intervalStartedBy’ and ‘intervalStarts’ in the ontology? | Does the assertion that interval A intervalStartedBy interval B entail that interval B intervalStarts interval A? | Which property functions as the inverse of ‘intervalStartedBy’ according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalFinishes\nDescription: The property \"time:intervalFinishes\" links two instances of time:ProperInterval, indicating that the subject interval finishes at the endpoint of the object interval but does not necessarily start at the same time. It has no additional characteristics, super-properties, or inverse properties defined. Both its domain and range are restricted to time:ProperInterval.\nAxiom: {'characteristics': [], 'domain': ['time:ProperInterval'], 'range': [], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is every value assigned to 'intervalFinishes' necessarily a ProperInterval? | Can 'intervalFinishes' associate with any object that is not a ProperInterval as its value? | What entities are permitted as the range of the property 'intervalFinishes'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:day\nDescription: The property \"time:day\" relates an instance of time:DateTimeDescription to a value of type xsd:gDay, representing the day component of a date. It has no specified characteristics, super-properties, or inverse properties.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeDescription'], 'range': [], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is every value assigned to the property 'time:day' necessarily of type xsd:gDay? | Can 'time:day' ever be associated with an object outside the range xsd:gDay? | What types of values are permitted as the range of the property 'time:day'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:weeks\nDescription: The property \"time:weeks\" has no specified domain or super-properties and does not possess special characteristics or an inverse property. Its range is restricted to decimal values (xsd:decimal), indicating that it represents a quantity measured in weeks.\nAxiom: {'characteristics': [], 'domain': ['time:DurationDescription'], 'range': ['xsd:decimal'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:weeks' be associated with entities other than 'time:DurationDescription' as its subject? | Is there any 'time:DurationDescription' that does not use the property 'time:weeks'? | What types of entities may serve as the domain for the property 'time:weeks'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:minutes\nDescription: The property \"time:minutes\" has no specified characteristics or super-properties. Its domain is restricted to instances of \"time:DurationDescription\", indicating that it is used to associate a duration description with a value representing minutes. No explicit range or inverse property is defined.\nAxiom: {'characteristics': [], 'domain': ['time:DurationDescription'], 'range': ['xsd:decimal'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can values for 'time:minutes' only be of type xsd:decimal? | Is every range value for 'time:minutes' constrained exclusively to xsd:decimal? | What possible datatypes can serve as the range for the property 'time:minutes'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:seconds\nDescription: The property \"time:seconds\" has no explicitly defined characteristics, domain, super-properties, or inverse properties. Its range is restricted to values of type xsd:decimal, indicating that it is intended to represent decimal values for seconds.\nAxiom: {'characteristics': [], 'domain': ['time:DurationDescription'], 'range': ['xsd:decimal'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:seconds' have a subject other than a time:DurationDescription? | Is there any time:DurationDescription that cannot be associated with 'time:seconds'? | What types of entities can be the domain for the property 'time:seconds'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:xsdDateTime\nDescription: The property \"time:xsdDateTime\" has no explicitly defined characteristics or super-properties and does not specify an inverse property. Its domain is restricted to \"time:DateTimeInterval\", indicating it is used to associate instances of \"time:DateTimeInterval\" with values, likely of dateTime type, though no explicit range is set.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeInterval'], 'range': ['xsd:dateTime'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is every value assigned via the property 'time:xsdDateTime' necessarily of type xsd:dateTime? | Can 'time:xsdDateTime' have a range different from xsd:dateTime? | What data types are permissible as the range for the property 'time:xsdDateTime'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:unitType\nDescription: The property \"time:unitType\" has no specified characteristics or super-properties. Its domain is restricted to instances of \"time:DateTimeDescription\", indicating it is used to associate a date-time description with some unit type. No range, inverse property, or additional axioms are defined.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeDescription'], 'range': ['time:TemporalUnit'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'unitType' be used with any value other than instances of 'TemporalUnit'? | Is every object of the 'unitType' property required to be a 'TemporalUnit'? | What classes can appear as the range for the 'unitType' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:month\nDescription: The property \"time:month\" has no defined domain, characteristics, super-properties, or inverse properties. Its range is restricted to values of the datatype xsd:gMonth, indicating that it is used to associate an entity with a specific month, represented in the XML Schema gMonth format.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeDescription'], 'range': ['xsd:gMonth'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is there any entity other than time:DateTimeDescription that can be the subject of the property time:month? | Are all objects used with the property time:month required to represent months? | What types of entities can act as the domain for the property time:month? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:timeZone\nDescription: The property \"time:timeZone\" has no explicitly defined characteristics, super-properties, or inverse properties. Its domain is restricted to instances of \"time:DateTimeDescription\". No explicit range is specified. This property is used to associate a \"DateTimeDescription\" with its corresponding time zone.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeDescription'], 'range': ['tzont:TimeZone'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is every value assigned using the property 'time:timeZone' required to be a tzont:TimeZone? | Can the property 'time:timeZone' reference any class other than tzont:TimeZone as its range? | What entities are permitted to serve as the range for the property 'time:timeZone'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:hour\nDescription: The property \"time:hour\" has no specified characteristics, domain, or super-properties. Its range is restricted to non-negative integers (xsd:nonNegativeInteger), representing an hour value. No inverse property is defined.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeDescription'], 'range': ['xsd:nonNegativeInteger'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:hour' be used with subjects other than time:DateTimeDescription? | What entities are permitted as the domain for the property 'time:hour'? | Is there any instance of time:DateTimeDescription that cannot be associated with the property 'time:hour'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:hasEnd\nDescription: The property \"time:hasEnd\" has no specified characteristics or super-properties. Its domain is restricted to instances of \"time:TemporalEntity,\" indicating that it relates a temporal entity to some unspecified value representing its end. No explicit range, inverse property, or additional characteristics are defined.\nAxiom: {'characteristics': [], 'domain': ['time:TemporalEntity'], 'range': ['time:Instant'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it necessary for every value associated with the property 'time:hasEnd' to be a time:Instant? | Can entities other than time:Instant appear as the range of the property 'time:hasEnd'? | What types of entities are permitted as the range for 'time:hasEnd'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalDuring\nDescription: The property \"time:intervalDuring\" does not specify any domain, characteristics, super-properties, or inverse properties. Its range is restricted to instances of \"time:ProperInterval,\" indicating it is used to relate a subject to a temporal interval that is a proper interval.\nAxiom: {'characteristics': [], 'domain': ['time:ProperInterval'], 'range': ['time:ProperInterval'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'intervalDuring' be used with subjects other than ProperInterval? | What types of entities are permissible as the subject for the property 'intervalDuring'? | Are there any entities classified as ProperInterval that cannot be the subject of 'intervalDuring'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:inDateTime\nDescription: The property \"time:inDateTime\" has no explicitly defined characteristics or range restrictions. Its domain is specified as time:Instant, indicating that it is intended to relate instances of time:Instant to other entities. There are no super-properties or inverse properties defined for this property.\nAxiom: {'characteristics': [], 'domain': ['time:Instant'], 'range': ['time:DateTimeDescription'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Does the property 'time:inDateTime' accept any range other than 'time:DateTimeDescription'? | Is every value associated with 'time:inDateTime' required to be a 'time:DateTimeDescription'? | What entities can serve as the range for the property 'time:inDateTime'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:dayOfYear\nDescription: The property \"time:dayOfYear\" has no declared characteristics or inverse properties. It is used with subjects of type \"time:DateTimeDescription\" but does not specify a range. This property typically relates a date-time description to its corresponding day of the year. No super-properties are specified.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeDescription'], 'range': ['xsd:nonNegativeInteger'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'dayOfYear' have values that are not nonNegativeIntegers? | What types of values are permitted as the range for 'dayOfYear'? | Is every object associated with 'dayOfYear' required to be a nonNegativeInteger? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:hours\nDescription: The property \"time:hours\" has no explicitly defined characteristics or super-properties. Its domain is restricted to instances of \"time:DurationDescription\", indicating it is used to associate duration descriptions with a value describing hours. No range, inverse property, or additional constraints are specified.\nAxiom: {'characteristics': [], 'domain': ['time:DurationDescription'], 'range': ['xsd:decimal'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:hours' have a range other than xsd:decimal? | Are all values assigned via 'time:hours' required to be decimals? | Which datatypes are permissible as the range for the property 'time:hours'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:hasDateTimeDescription\nDescription: The property \"time:hasDateTimeDescription\" has no explicitly defined characteristics, domain, super-properties, or inverse properties. Its range is restricted to instances of \"time:DateTimeDescription\", indicating its use to associate entities with a date-time description.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeInterval'], 'range': ['time:DateTimeDescription'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'hasDateTimeDescription' be associated with any subject other than a DateTimeInterval? | Is it possible for an object linked via 'hasDateTimeDescription' not to conform to a DateTimeDescription? | What entities are permitted to serve as the domain for the 'hasDateTimeDescription' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:second\nDescription: The property \"time:second\" has no specified characteristics, domain, super-properties, or inverse property. Its range is restricted to values of type xsd:decimal, indicating that it is intended to relate entities to decimal values representing seconds.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeDescription'], 'range': ['xsd:decimal'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'time:second' be used with any class other than 'time:DateTimeDescription' as its subject? | Which classes are permitted as subjects for the 'time:second' property? | Are all subjects of the 'time:second' property necessarily instances of 'time:DateTimeDescription'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:minute\nDescription: The property \"time:minute\" has no explicitly defined characteristics, sub-properties, or inverse properties. Its domain is restricted to instances of \"time:DateTimeDescription,\" indicating it is used to relate a DateTimeDescription to a value representing the minute. No range constraint is specified.\nAxiom: {'characteristics': [], 'domain': ['time:DateTimeDescription'], 'range': ['xsd:nonNegativeInteger'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is there any value other than a nonNegativeInteger that can be used as the range of 'time:minute'? | Are all objects associated with the property 'time:minute' necessarily nonNegativeIntegers? | What types of values are permitted as the range for the property 'time:minute'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:hasDurationDescription\nDescription: The property \"time:hasDurationDescription\" has no explicitly defined characteristics, domain, super-properties, or inverse properties. Its range is specified as \"time:DurationDescription,\" indicating that it is used to associate an entity with a description of duration.\nAxiom: {'characteristics': [], 'domain': ['time:TemporalEntity'], 'range': ['time:DurationDescription'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is the property 'time:hasDurationDescription' ever used with a subject that is not a time:TemporalEntity? | What entities may serve as the domain for 'time:hasDurationDescription'? | Can an individual with the type time:TemporalEntity always be described using the 'time:hasDurationDescription' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalStarts\nDescription: The property \"time:intervalStarts\" has no explicitly defined characteristics, domain, super-properties, or inverse properties. Its range is restricted to instances of \"time:ProperInterval,\" indicating that it is intended to relate an entity to a proper time interval that is being started.\nAxiom: {'characteristics': [], 'domain': ['time:ProperInterval'], 'range': ['time:ProperInterval'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'intervalStarts' be used with subjects other than ProperInterval? | Is there any ProperInterval that cannot be associated with the property 'intervalStarts'? | What types of entities may serve as the domain for the 'intervalStarts' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalBefore\nDescription: The property \"time:intervalBefore\" has no explicitly defined characteristics or super-properties. Its domain and range are both restricted to \"time:ProperInterval\", indicating that it relates one proper time interval to another such that the first interval occurs strictly before the second. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['time:ProperInterval'], 'range': ['time:ProperInterval'], 'subPropertyOf': ['time:before'], 'inverseOf': []}\nGenerated CQs:", "output": "Which properties are defined as subproperties of time:before within the ontology? | Is every occurrence of the time:intervalBefore property also valid as an occurrence of time:before? | What is the hierarchical relationship between time:intervalBefore and time:before according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:inXSDDateTime\nDescription: The property \"time:inXSDDateTime\" has no explicitly defined characteristics, domain restrictions, super-properties, or inverse properties. Its range is restricted to values of the datatype xsd:dateTime, indicating that it relates a subject to a specific date and time in XML Schema dateTime format.\nAxiom: {'characteristics': [], 'domain': ['time:Instant'], 'range': ['xsd:dateTime'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'time:inXSDDateTime' have a subject that is not a 'time:Instant'? | Are all instances related through 'time:inXSDDateTime' necessarily 'time:Instant'? | What are the possible domains for the property 'time:inXSDDateTime'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:inside\nDescription: The property \"time:inside\" has a domain restricted to instances of time:Interval, indicating it is used to relate time intervals to other entities. There are no explicitly defined range, characteristics, super-properties, or inverse property specified.\nAxiom: {'characteristics': [], 'domain': ['time:Interval'], 'range': ['time:Instant'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'inside' be used with values other than 'Instant'? | Is every value used with the property 'inside' required to be a 'time:Instant'? | What kinds of entities are allowed to appear as the range when using the 'inside' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:months\nDescription: The property \"time:months\" has a domain restriction to \"time:DurationDescription,\" meaning it is used with instances describing durations. No explicit range, characteristics, super-properties, or inverse properties are specified. This property likely relates duration descriptions to month-related values or entities.\nAxiom: {'characteristics': [], 'domain': ['time:DurationDescription'], 'range': ['xsd:decimal'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Does the property 'time:months' have any range other than xsd:decimal? | Are all values used with the property 'time:months' required to be of type xsd:decimal? | What data types are permitted as values for the property 'time:months'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:intervalEquals\nDescription: The property \"time:intervalEquals\" has no explicit domain, super-properties, or inverse properties, and is not characterized by specific logical traits such as transitivity or symmetry. Its range is restricted to instances of \"time:ProperInterval,\" indicating that it is used to relate entities to proper time intervals.\nAxiom: {'characteristics': [], 'domain': ['time:ProperInterval'], 'range': ['time:ProperInterval'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'intervalEquals' be used with subjects that are not instances of 'ProperInterval'? | Are all values associated with the property 'intervalEquals' required to be of a specific type or class? | What types of entities can serve as the domain for the property 'intervalEquals'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:years\nDescription: The property \"time:years\" has no explicitly defined characteristics, domain restrictions, super-properties, or inverse properties. Its range is specified as xsd:decimal, indicating that the property relates subjects to decimal values representing a quantity of years.\nAxiom: {'characteristics': [], 'domain': ['time:DurationDescription'], 'range': ['xsd:decimal'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'time:years' be used with entities that are not instances of 'time:DurationDescription'? | Is 'time:DurationDescription' the only possible domain for the property 'time:years'? | What types of objects are allowed as the subject when using the property 'time:years'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PhysicalObject\nDescription: PhysicalObject is defined as a subclass of PhysicalEndurant, indicating that it inherits all characteristics of entities that persist through time while maintaining their identity. It is explicitly disjoint with Stuff, which means no individual can simultaneously be both a PhysicalObject and Stuff. This class represents discrete, countable entities as opposed to unstructured or undifferentiated substances.\nAxiom: {'subClassOf': ['PhysicalEndurant'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology characterize the distinction between PhysicalObject and Stuff? | Is there any entity that can simultaneously be classified as both PhysicalObject and Stuff? | Which classes are specified as mutually exclusive with Stuff within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MixedStuff\nDescription: MixedStuff is defined as a subclass of Stuff, with the additional restriction that any instance must have at least two component parts, each of which is itself an instance of Stuff (expressed as having at least two 'hasPartStuff' relations to Stuff). MixedStuff is explicitly disjoint with PureStuff, ensuring no overlap between mixtures and pure substances.\n\nConceptually, MixedStuff captures the essence of mixtures as materials composed of variable proportions of distinct, observable components that can be physically separated. The classification is based on the nature and roles of the components, explicitly excluding cases such as different phases of the same substance (e.g., ice in water), which remain PureStuff. Colloids are considered MixedStuff only when composed of different kinds of Stuff, maintaining the requirement for distinct observable constituents.\nAxiom: {'subClassOf': ['Stuff', '(Stuff and [hasPartStuff min 2 Stuff])'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology define the distinction between MixedStuff and PureStuff? | Is there any instance that can belong to both MixedStuff and PureStuff? | Which classes are logically incompatible with PureStuff according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ContinuousMedium\nDescription: ContinuousMedium is defined as a subclass of StuffRole and is also known as dispersion medium. It is explicitly disjoint with DispersedPhase, ensuring that no individual can simultaneously belong to both classes. Members of ContinuousMedium are characterized by having a colloidFormingRelation to at least one DispersedPhase, reflecting their essential role in colloidal systems as the medium in which dispersed phases are distributed.\nAxiom: {'subClassOf': ['StuffRole'], 'disjointWith': [], 'propertyRestrictions': ['[colloidFormingRelation some DispersedPhase]']}\nGenerated CQs:", "output": "What logical separation is defined between ContinuousMedium and DispersedPhase within the ontology? | Can an entity simultaneously be classified as both ContinuousMedium and DispersedPhase? | Which classes are explicitly stated as mutually exclusive with DispersedPhase? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Solute\nDescription: Solute is defined as a subclass of StuffRole and is explicitly disjoint from Solvent, ensuring that no entity can simultaneously be both a Solute and a Solvent. Formally, every Solute is related through the inverse of solutionFormingRelation to some Solvent, indicating its essential role in solution formation. Conceptually, a Solute is a substance that is dissolved in another substance (the Solvent).\nAxiom: {'subClassOf': ['StuffRole'], 'disjointWith': [], 'propertyRestrictions': ['[inverseOf solutionFormingRelation some Solvent]']}\nGenerated CQs:", "output": "What is the formal distinction between Solute and Solvent in the ontology? | Is there any entity that can belong to both the Solute and Solvent classes? | Which entities or classes are explicitly specified as disjoint with Solute? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HeterogeneousMixture\nDescription: HeterogeneousMixture is a subclass of MixedStuff, formally disjoint from HomogeneousMixture, meaning no mixture can be both heterogeneous and homogeneous simultaneously. Members of this class are defined by having at least two different granule types (each being a Molecule or MultiMoleculeParticle) and consisting of a minimum of two distinct parts, each being either MixedStuff or PureStuff. Additionally, every HeterogeneousMixture exhibits exactly one instance of UnevenDistribution, ensuring that its components are not distributed uniformly. As described, a HeterogeneousMixture is a combination of different substances, often with visibly different particle sizes, which do not react chemically and can be separated by physical means (such as filtration). Unlike a homogeneous mixture, any portion of a heterogeneous mixture may differ in composition from the whole, unless special care is taken in selecting the portion.\nAxiom: {'subClassOf': ['MixedStuff'], 'disjointWith': [], 'propertyRestrictions': ['[hasGranuleType min 2 (Molecule or MultiMoleculeParticle)]', '[hasPartStuff min 2 (MixedStuff or PureStuff)]', '[hasStuffDistribution exactly 1 UnevenDistribution]']}\nGenerated CQs:", "output": "How are HeterogeneousMixture and HomogeneousMixture differentiated within the ontology? | Is any mixture classified as both HeterogeneousMixture and HomogeneousMixture simultaneously? | Which mixture types are specified as disjoint with HomogeneousMixture? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PhysicalEndurant\nDescription: PhysicalEndurant is a subclass of Endurant, representing entities that persist through time while maintaining their identity. It is explicitly disjoint with Role, meaning no instance can simultaneously be a PhysicalEndurant and a Role. Additionally, PhysicalEndurant is equivalent to om-1:Phenomenon, indicating that these two classes share the exact same set of individuals. This class is used to capture enduring phenomena in ontological modeling, distinct from roles that entities might play.\nAxiom: {'subClassOf': ['Endurant'], 'disjointWith': [], 'equivalentClass': ['om-1:Phenomenon']}\nGenerated CQs:", "output": "What ontological separation is established between PhysicalEndurant and Role? | Is any entity allowed to be classified as both PhysicalEndurant and Role simultaneously? | Which classes are defined as mutually exclusive with Role in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: StructuredPureStuff\nDescription: StructuredPureStuff is defined as a subclass of PureStuff and is disjoint with UnstructuredPureStuff, ensuring that no individual can be both StructuredPureStuff and UnstructuredPureStuff. Formally, StructuredPureStuff is equivalent to PureStuff that has granules exclusively of exactly one type of molecule. This class covers matter composed of a single molecular type (allowing for minor conformational variations or rare impurities), such as water (H₂O), table sugar, silica (SiO₂), or vitamin A. The synonym \"Compound\" applies here, reflecting the requirement that instances consist of precisely one molecular species, rather than just a single molecule.\nAxiom: {'subClassOf': ['PureStuff'], 'disjointWith': [], 'equivalentClass': ['(PureStuff and [hasGranuleType only Molecule] and [hasGranuleType exactly 1 Molecule])']}\nGenerated CQs:", "output": "How does the ontology define the connection between StructuredPureStuff and UnstructuredPureStuff? | Is there any instance classified under both StructuredPureStuff and UnstructuredPureStuff? | Which classes are stated as mutually exclusive with UnstructuredPureStuff? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Endurant\nDescription: Endurant is formally specified as a class disjoint with Perdurant, which ensures that no individual entity can be simultaneously classified as both an Endurant and a Perdurant. This distinction typically reflects the ontological separation between entities that persist wholly through time (Endurants, such as physical objects) and those that occur in or unfold over time (Perdurants, such as events or processes).\nAxiom: {'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology formally separate Endurant and Perdurant classes? | Is there any instance that can simultaneously be classified as both Endurant and Perdurant? | What other ontology classes are specified as disjoint with Perdurant? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AbstractRegion\nDescription: AbstractRegion is defined as a subclass of Region. This indicates that every instance of AbstractRegion is also an instance of Region, inheriting all its characteristics. The class formalizes a conceptual or non-physical specialization of Region, but no additional constraints or distinctions are provided beyond its subsumption in the hierarchy.\nAxiom: {'subClassOf': ['Region']}\nGenerated CQs:", "output": "To what parent class does AbstractRegion pertain? | Is AbstractRegion encompassed within the wider class of Region? | Which subclasses fall under the class Region, including AbstractRegion? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PhysicalRegion\nDescription: PhysicalRegion is defined as a subclass of Region, indicating that every PhysicalRegion is, by definition, a type of Region. This formalization distinguishes PhysicalRegion as a specific conceptual or spatial area within the broader class of Region, with characteristics or properties that pertain to physical or tangible attributes.\nAxiom: {'subClassOf': ['Region']}\nGenerated CQs:", "output": "Which kinds of regions include PhysicalRegion as a specialized form? | What are the immediate superclasses of PhysicalRegion within the ontology? | Is PhysicalRegion classified as a specific type of Region? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: om-1:Quantity\nDescription: om-1:Quantity is defined as a subclass of Region. This means every om-1:Quantity is categorized within the broader class of Region, inheriting its general characteristics. No additional restrictions or differentiations are provided, so om-1:Quantity serves to represent a more specific concept or type of Region within the ontology.\nAxiom: {'subClassOf': ['Region']}\nGenerated CQs:", "output": "Which subclasses are defined under Region, such as om-1:Quantity? | Does om-1:Quantity fall under the general category of Region? | What higher-level concepts is om-1:Quantity classified as a member of? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AmountOfStuff\nDescription: AmountOfStuff is defined as a subclass of PhysicalEndurant, representing entities that persist through time while maintaining their identity as physical particulars. According to the current description, it aligns with DOLCE's notion of \"amount of matter\" and applies exclusively to specific, individual entities (particulars) rather than universals or collections. This class captures the concept of a definite quantity of physical substance.\nAxiom: {'subClassOf': ['PhysicalEndurant']}\nGenerated CQs:", "output": "Which specific concepts are included as subclasses of PhysicalEndurant, such as AmountOfStuff? | Is AmountOfStuff classified under the broader category of PhysicalEndurant? | What are the higher-level categories to which AmountOfStuff is assigned? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AssociationalColloid\nDescription: AssociationalColloid is defined as a subclass of Colloid. This class includes colloidal systems characterized by the association of amphiphilic molecules, such as hydrophobic/hydrophilic interactions. Typical examples are micellar colloids (e.g., soap solutions), where molecules form aggregates known as micelles. Properties specific to this class can include aggregation numbers—typically a range—reflecting the number of molecules per micelle, often determined by the critical micelle concentration.\nAxiom: {'subClassOf': ['Colloid']}\nGenerated CQs:", "output": "What are the parent categories for AssociationalColloid in the ontology? | Which types of Colloid include AssociationalColloid as a more specific instance? | Does AssociationalColloid fall under the broader category of Colloid? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DispersionColloid\nDescription: DispersionColloid is defined as a subclass of Colloid and represents the most common type among colloids, distinguishing it from other types within the Colloid category.\nAxiom: {'subClassOf': ['Colloid']}\nGenerated CQs:", "output": "What broader classes does DispersionColloid belong to? | Is DispersionColloid classified as a specific form of Colloid? | Which subclasses are encompassed by the concept of Colloid? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MolecularColloid\nDescription: MolecularColloid is defined as a subclass of Colloid, representing colloidal systems in which the constituent molecules are sufficiently large to exhibit the characteristic behaviors of particles with intermediate sizes, typical of other types of colloids. Examples include latex and other materials with large polymers, such as starchy substances. This classification emphasizes the particle size and molecular structure as distinguishing factors within the broader colloid category.\nAxiom: {'subClassOf': ['Colloid']}\nGenerated CQs:", "output": "Which specific subtypes of Colloid encompass MolecularColloid? | To what overarching categories does MolecularColloid pertain within the ontology? | Is MolecularColloid categorized under the broader class of Colloid? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Atom\nDescription: Atom is defined as a subclass of PhysicalObject, indicating that every atom is considered a physical entity within the ontology. This classification places atoms within the broader category of tangible objects, establishing their role as fundamental physical units that compose matter.\nAxiom: {'subClassOf': ['PhysicalObject']}\nGenerated CQs:", "output": "Does Atom fall under the category of PhysicalObject? | Which entities are more specific than PhysicalObject, such as Atom? | What broader classes does Atom belong to within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ion\nDescription: Ion is defined as a subclass of PhysicalObject, meaning it represents a kind of physical entity. No further property restrictions, disjointness, or specific characteristics are asserted in the axioms, so the class encompasses any physical object identified as an ion—typically, an atom or molecule with a net electric charge due to the loss or gain of electrons.\nAxiom: {'subClassOf': ['PhysicalObject']}\nGenerated CQs:", "output": "Is an Ion classified as a type of PhysicalObject? | What overarching categories encompass Ion as a subordinate type? | Which entities are specified as subclasses under PhysicalObject, such as Ion? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MultiMoleculeParticle\nDescription: MultiMoleculeParticle is defined as a subclass of PhysicalObject, referring to a particle composed of multiple molecules, such as those found in suspensions or colloidal droplets (distinct from sub-atomic particles). This class is intended for cases where individual entities are aggregates of molecules, and, as noted in its annotation, is considered a pragmatic solution within the ontology structure rather than a rigorous chemical classification.\nAxiom: {'subClassOf': ['PhysicalObject']}\nGenerated CQs:", "output": "Does MultiMoleculeParticle fall under the broader class of PhysicalObject? | What are the more abstract categories to which MultiMoleculeParticle is assigned? | Which entities are categorized as types of PhysicalObject, specifically including MultiMoleculeParticle? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DispersedPhase\nDescription: DispersedPhase is defined as a subclass of StuffRole. It refers to the role played by a substance within the context of a colloidal system, specifically as the phase that is distributed throughout another phase (the ContinuousMedium). The relationship (colloidFormingRelation) exists between the DispersedPhase and the ContinuousMedium themselves, rather than their respective bearers (stuffs), emphasizing that simply combining the substance bearers does not suffice to form a colloid. Proper mixing is required to achieve a homogeneous colloidal mixture; the ability of a substance to serve as either dispersed phase or continuous medium depends on the specific system being formed.\nAxiom: {'subClassOf': ['StuffRole']}\nGenerated CQs:", "output": "Is DispersedPhase classified under the broader category of StuffRole? | Which roles are encompassed within StuffRole, including DispersedPhase? | What higher-level categories does DispersedPhase belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Solvent\nDescription: Solvent is defined as a subclass of StuffRole. It represents a substance in which another substance, known as the solute, is dissolved. Solvents are essential participants in solution-forming relations, acting as the medium that enables solutes to dissolve and sometimes facilitating various chemical reactions during the dissolution process. This formalization emphasizes the role-based nature of solvents within chemical systems.\nAxiom: {'subClassOf': ['StuffRole']}\nGenerated CQs:", "output": "What are the more general roles associated with Solvent? | Is Solvent classified under the broader category of StuffRole? | Which roles are encompassed by StuffRole, including Solvent? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Drop\nDescription: Drop is defined as a subclass of Piece, representing a specific type of piece, such as a drop of blood. This class serves as an example to illustrate a distinct, often small and discrete, portion or quantity of a substance.\nAxiom: {'subClassOf': ['Piece']}\nGenerated CQs:", "output": "Is Drop categorized under the broader class of Piece? | Which subclasses fall under the category of Piece, with Drop included? | What broader classes include Drop within their hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Lump\nDescription: Lump is defined as a subclass of Piece, representing a specific type of piece. The class is exemplified by instances such as a \"lump of clay,\" illustrating that a lump is considered a particular form or configuration of a piece. This class serves as an example of how the concept of \"piece\" can be specialized.\nAxiom: {'subClassOf': ['Piece']}\nGenerated CQs:", "output": "Which entities are specified as subtypes under Piece, such as Lump? | Is Lump classified as a type of Piece? | What broader classes encompass Lump within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Slice\nDescription: Slice is defined as a subclass of Piece, representing a specific type of piece. As indicated in the example, a Slice could refer to a slice of bread, illustrating that this class captures instances where something is cut or divided into thin, flat portions.\nAxiom: {'subClassOf': ['Piece']}\nGenerated CQs:", "output": "What overarching types does Slice inherit from within the hierarchy? | Which subtypes fall under the category of Piece, including Slice? | Is Slice categorized under the broader class of Piece? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: EvenDistribution\nDescription: EvenDistribution is defined as a subclass of AbstractRegion. This indicates that every instance of EvenDistribution is a type of abstract region, but with additional implied properties that distinguish it from other abstract regions. No further property restrictions, equivalence, or disjointness axioms are specified. The class likely represents distributions characterized by some notion of \"evenness\" or uniformity, although the specifics are not constrained by the given axiom.\nAxiom: {'subClassOf': ['AbstractRegion']}\nGenerated CQs:", "output": "Is EvenDistribution classified as a type within AbstractRegion? | What broader classes does EvenDistribution hierarchically fall under? | Which entities are direct specializations of AbstractRegion, such as EvenDistribution? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: UnevenDistribution\nDescription: UnevenDistribution is defined as a subclass of AbstractRegion. This indicates that every instance of UnevenDistribution is a specific kind of AbstractRegion, likely representing regions or segments where distribution is not uniform. No additional constraints or properties are specified, so this class primarily serves to differentiate non-uniform or irregular distributions within the broader category of abstract regions.\nAxiom: {'subClassOf': ['AbstractRegion']}\nGenerated CQs:", "output": "What kinds of specialized regions are encompassed by AbstractRegion, specifically including UnevenDistribution? | Is UnevenDistribution classified under the broader group of AbstractRegion? | To which higher-level categories does UnevenDistribution pertain within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gas\nDescription: Gas is defined as a subclass of StuffState. This classification indicates that Gas represents a particular state or condition in which a substance (stuff) can exist. Any individual classified as Gas inherits the general properties of StuffState, marking it as a type of physical state distinct from other possible states (such as solid or liquid).\nAxiom: {'subClassOf': ['StuffState']}\nGenerated CQs:", "output": "Which higher-level classes encompass Gas? | What entities are categorized more specifically than StuffState, including Gas? | Is Gas classified as a specific type within the broader StuffState category? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Liquid\nDescription: liquid is defined as a subclass of StuffState, representing a specific physical state of matter. All instances of liquid must also be instances of StuffState, situating liquids within the broader classification of material states such as solid or gas. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['StuffState']}\nGenerated CQs:", "output": "Which general categories in the ontology include Liquid as a member? | What other specific states are encompassed by StuffState besides Liquid? | Is Liquid classified under the broader category of StuffState? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Solid\nDescription: Solid is defined as a subclass of StuffState, representing a particular state of matter. This class encompasses all entities that exist in the solid state, distinguishing them from other possible states such as liquid or gas. All instances of Solid inherit the characteristics of StuffState.\nAxiom: {'subClassOf': ['StuffState']}\nGenerated CQs:", "output": "Which specific states of stuff are categorized as subtypes of StuffState, such as Solid? | What are the general states that Solid is classified within? | Does Solid fall under the broader grouping of StuffState? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MicellarColloid\nDescription: MicellarColloid is defined as a subclass of AssociationalColloid. Although the formal axioms do not distinguish it further from AssociationalColloid, the usage of the term \"MicellarColloid\" reflects domain-specific terminology differences between food physics and colloid chemistry. Therefore, individuals of this class share all characteristics of AssociationalColloid, with differentiation rooted primarily in contextual nomenclature rather than ontological structure.\nAxiom: {'subClassOf': ['AssociationalColloid']}\nGenerated CQs:", "output": "What higher-level classes does MicellarColloid fall under within the ontology? | Which classes are specialized instances of AssociationalColloid, including MicellarColloid? | Is MicellarColloid classified under the broader group of AssociationalColloid? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Paste\nDescription: Paste is defined as a subclass of Suspension. It is characterized as a type of suspension with a reduced proportion of dispersion medium, in which the dispersed phase exhibits connectivity (i.e., the particles are linked or form a continuous structure). This differentiates pastes from other suspensions, where the dispersed phase may be unconnected and more freely suspended in the medium.\nAxiom: {'subClassOf': ['Suspension']}\nGenerated CQs:", "output": "What broader classifications is Paste associated with in the ontology? | Does Paste fall under the more general category of Suspension? | Which subclasses are encompassed by Suspension, specifically including Paste? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Role\nDescription: Role is defined as a subclass of Endurant, indicating that any individual classified as a Role is also necessarily an Endurant. This positions Role as an entity that persists through time while possibly undergoing changes. No further restrictions or disjointness conditions are specified for this class.\nAxiom: {'subClassOf': ['Endurant']}\nGenerated CQs:", "output": "Which entities are classified under Endurant, including Role? | Is Role a specialized type of Endurant? | What broader classes encompass Role within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Region\nDescription: Region is defined as a subclass of Abstract, indicating that it represents an abstract concept rather than a physical entity. This classification implies that instances of Region are used to denote conceptual or non-physical areas, rather than tangible, material locations.\nAxiom: {'subClassOf': ['Abstract']}\nGenerated CQs:", "output": "Which entities are defined as subclasses within Abstract, including Region? | Is Region a specific type classified under Abstract? | What broader categories encompass Region as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: om-1:Unit_of_measure\nDescription: om-1:Unit_of_measure is defined as a subclass of Abstract, indicating that it represents a conceptual or non-physical entity within the ontology. This class is intended to capture the abstract nature of measurement units used to quantify physical or abstract quantities, rather than representing tangible objects themselves.\nAxiom: {'subClassOf': ['Abstract']}\nGenerated CQs:", "output": "What higher-level classes does Unit_of_measure inherit from? | Which subclasses fall under the Abstract category, such as Unit_of_measure? | Is Unit_of_measure categorized under the broader class of Abstract? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: State\nDescription: State is defined as a subclass of Perdurant, indicating that it represents a temporally extended entity or occurrence. As a Perdurant, a State exists over a period of time, rather than as an instantaneous or static entity. No further restrictions or distinctions are specified in the current axioms.\nAxiom: {'subClassOf': ['Perdurant']}\nGenerated CQs:", "output": "Which concepts are classified as subtypes of Perdurant, including State? | Is State a specialized form of Perdurant? | To which general categories is State hierarchically related within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: StuffState\nDescription: StuffState is defined as a subclass of State. It represents the general state in which a substance (or \"stuff\") exists, such as solid, liquid, or gas. While it is relevant for describing the phase of a specific material (e.g., water as ice, liquid, or vapor), the class also accommodates cases like colloids, where the states of mixed components are important. The focus of StuffState is on the state as a property of a substance in general, rather than on the particular state of an individual stuff. This provides a foundation for distinguishing and reasoning about the states of matter across different contexts, including mixtures and colloidal systems.\nAxiom: {'subClassOf': ['State']}\nGenerated CQs:", "output": "Is StuffState categorized under the broader class of State? | Which subclasses fall under State, including StuffState? | What higher-level classes encompass StuffState? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Container\nDescription: Container is defined as a subclass of PhysicalEndurant, signifying that every container is a type of physical entity that persists through time while maintaining its identity. No additional property restrictions or distinguishing features are specified in the current axiom.\nAxiom: {'subClassOf': ['PhysicalEndurant'], 'propertyRestrictions': ['[inverseOf containedIn only (AmountOfStuff or PhysicalObject)]']}\nGenerated CQs:", "output": "Is every entity that contains a Container required to be either an AmountOfStuff or a PhysicalObject? | Can a Container be contained in something other than an AmountOfStuff or a PhysicalObject? | Does the property 'containedIn' for a Container necessarily exclude all classes except AmountOfStuff and PhysicalObject? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Stuff\nDescription: Stuff is a class whose individuals are characterized by having only states of type StuffState via the hasState property, and each individual can have at most three such states. This ensures that every Stuff instance is related exclusively to StuffState instances, with an upper limit of three hasState relationships.\nAxiom: {'subClassOf': ['PhysicalEndurant'], 'propertyRestrictions': ['[hasState only StuffState]', '[hasState max 3 StuffState]']}\nGenerated CQs:", "output": "Is Stuff classified under the category of PhysicalEndurant? | What are the subclasses encompassed by PhysicalEndurant, including Stuff? | To which higher-level classes does Stuff belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Molecule\nDescription: Molecule is defined as a subclass of PhysicalObject. This indicates that every instance of Molecule is necessarily a physical object, inheriting all properties and constraints applicable to physical objects. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['PhysicalObject'], 'propertyRestrictions': ['[hasPart some Atom]']}\nGenerated CQs:", "output": "Is every molecule composed of at least one atom as a part? | Must a molecule necessarily possess the 'hasPart' relationship with an atom? | Can a molecule exist without having any atom as one of its parts? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Bulk\nDescription: Bulk is defined as a subclass of Stuff, characterized by one of the following: it either possesses a granule type that is a Molecule or MultiMoleculeParticle, or it contains parts that are instances of Stuff. Additionally, all of its granule types (if any) are restricted to being Molecule or MultiMoleculeParticle, and all of its parts (if any) must also be instances of Stuff. This formalization ensures that Bulk consists exclusively of molecular or multi-molecular entities, or is composed from other Stuff, maintaining a strict part-whole and compositional structure.\nAxiom: {'subClassOf': ['Stuff', '(([hasGranuleType some (Molecule or MultiMoleculeParticle)] or [hasPartStuff some Stuff]) and ([hasGranuleType only (Molecule or MultiMoleculeParticle)] or [hasPartStuff only Stuff]))', '(MixedStuff or StructuredPureStuff)']}\nGenerated CQs:", "output": "Is Bulk classified under either MixedStuff or StructuredPureStuff categories? | Which concepts are more specific than the union of MixedStuff and StructuredPureStuff, such as Bulk? | Into which overarching groups does Bulk fit within the ontology: MixedStuff, StructuredPureStuff, or both? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PureStuff\nDescription: PureStuff is defined as equivalent to the intersection of Stuff with several precise property restrictions: it must have exactly one granule type, which is either an Atom, Molecule, or MultiMoleculeParticle; it must consist of exactly one part stuff, which must be either PureBulk, StructuredPureStuff, or UnstructuredPureStuff; and it must have exactly one stuff distribution, which must be an EvenDistribution. This formalization ensures that any instance of PureStuff is a homogeneous material entity, composed in a uniform way at the granule and part level, and evenly distributed throughout.\nAxiom: {'subClassOf': ['Stuff'], 'equivalentClass': ['(Stuff and [hasGranuleType exactly 1 (Atom or Molecule or MultiMoleculeParticle)] and [hasPartStuff exactly 1 (PureBulk or StructuredPureStuff or UnstructuredPureStuff)] and [hasStuffDistribution exactly 1 EvenDistribution])']}\nGenerated CQs:", "output": "Is Stuff a more general category that includes PureStuff? | Which entities are categorized as more specific instances under Stuff, such as PureStuff? | To what broader groupings does PureStuff logically belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Colloid\nDescription: Colloid is defined as a subclass of HomogeneousMixture. This means every colloid is a type of homogeneous mixture, sharing its properties, but may also have additional characteristics distinguishing it from other homogeneous mixtures. There are no specified equivalence relationships to other classes.\nAxiom: {'subClassOf': ['HomogeneousMixture'], 'equivalentClass': ['(HomogeneousMixture and [hasPartStuff exactly 1 (Stuff and [hasState some StuffState] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some StuffState] and [inverseOf srInheresIn some DispersedPhase])] and [hasNrOfPhase some DatatypeRestriction(xsd:int minInclusive 2)])']}\nGenerated CQs:", "output": "Is a Colloid equivalent to a homogeneous mixture that contains exactly one part of stuff in a continuous medium state and exactly one part of stuff in a dispersed phase state? | Does every Colloid necessarily have at least two phases according to the number of phases property? | Is a Colloid fully defined as the intersection of HomogeneousMixture and mixtures with specific parts characterized by their state and location in continuous medium and dispersed phase? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Solution\nDescription: Solution is defined as a type of homogeneous mixture that contains at least two different phases. Each solution must have at least two component parts: one part functioning as a solute and the other as a solvent. Both the solute and solvent are classified as \"stuff\" that consists exclusively of granules of type atom, ion, or molecule. This formalization ensures that a solution, by definition, is made up of distinct solute and solvent entities, each inhering in \"stuff\" with specific granule types, and the overall mixture must exhibit at least two phases.\nAxiom: {'subClassOf': ['HomogeneousMixture'], 'equivalentClass': ['(HomogeneousMixture and [hasPartStuff some (Stuff and [inverseOf srInheresIn some Solute] and [hasGranuleType only (Atom or Ion or Molecule)])] and [hasPartStuff some (Stuff and [inverseOf srInheresIn some Solvent] and [hasGranuleType only (Atom or Ion or Molecule)])] and [hasNrOfPhase some DatatypeRestriction(xsd:int minInclusive 2)])']}\nGenerated CQs:", "output": "Does Solution fall under the general group of HomogeneousMixture? | Which specific classes are categorized as HomogeneousMixture, such as Solution? | To what broader mixture types does Solution belong within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Distribution\nDescription: Distribution is a class defined by the property restriction that every instance must have at least one quale (quality or manner) that is either an EvenDistribution or an UnevenDistribution. This asserts that all individuals of Distribution are characterized by possessing a specific type of distributional quality, distinguishing them based on whether they exhibit evenness or unevenness in their distribution.\nAxiom: {'subClassOf': ['Quality'], 'propertyRestrictions': ['[hasQuale some (EvenDistribution or UnevenDistribution)]']}\nGenerated CQs:", "output": "Is Distribution classified under the broader group of Quality? | What specific kinds of Quality include Distribution as a subclass? | Which overarching categories encompass Distribution? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Emulsion\nDescription: Emulsion is defined as a subclass of DispersionColloid. This means every emulsion is formally classified as a specific type of dispersion colloid, inheriting all characteristics of dispersion colloids, but with additional distinguishing properties specific to emulsions. No additional equivalent class is specified.\nAxiom: {'subClassOf': ['DispersionColloid'], 'equivalentClass': ['(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some DispersedPhase])])']}\nGenerated CQs:", "output": "Does an Emulsion necessarily consist of exactly one part that is a liquid state Stuff inhering in the ContinuousMedium and exactly one part that is a liquid state Stuff inhering in the DispersedPhase? | Is Emulsion logically equivalent to the intersection of DispersionColloid and those having exactly one liquid Stuff in the ContinuousMedium and exactly one liquid Stuff in the DispersedPhase? | Can Emulsion be fully defined as a DispersionColloid with two and only two parts: each a liquid Stuff, where one part inheres in the ContinuousMedium and the other in the DispersedPhase? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Foam\nDescription: Foam is defined as a subclass of DispersionColloid, indicating that every foam is a type of dispersion colloid. There are no additional equivalence constraints specified, so the class is characterized solely by its position in the subclass hierarchy.\nAxiom: {'subClassOf': ['DispersionColloid'], 'equivalentClass': ['(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some DispersedPhase])] and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some ContinuousMedium])])']}\nGenerated CQs:", "output": "Does a Foam necessarily consist of exactly one part that is a Stuff with a gaseous state inhering in a DispersedPhase and exactly one part that is a Stuff with a liquid state inhering in a ContinuousMedium? | Is Foam defined as the intersection of DispersionColloid and systems comprising precisely one gaseous phase as the dispersed part and one liquid phase as the continuous medium? | Are all instances of Foam required to have both a single gas-phase dispersed component and a single liquid-phase continuous component as part stuffs? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gel\nDescription: Gel is defined as a subclass of DispersionColloid, indicating that every gel is a type of dispersion colloid. There are no additional equivalence axioms specified, so gel is characterized solely by its classification within the hierarchy of colloidal systems.\nAxiom: {'subClassOf': ['DispersionColloid'], 'equivalentClass': ['(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some DispersedPhase])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some ContinuousMedium])])']}\nGenerated CQs:", "output": "Must every Gel contain exactly one part that is a Stuff in the liquid state inhering in a DispersedPhase, and exactly one part that is a Stuff in the solid state inhering in a ContinuousMedium? | Is Gel equivalent to the intersection of DispersionColloid and those entities composed of precisely one liquid Stuff in a DispersedPhase and one solid Stuff in a ContinuousMedium? | Does the definition of Gel permit any hasPartStuff relationships other than one liquid Stuff in a DispersedPhase and one solid Stuff in a ContinuousMedium? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LiquidAerosol\nDescription: LiquidAerosol is defined as a subclass of DispersionColloid. This means every instance of LiquidAerosol is necessarily an instance of DispersionColloid, inheriting all its characteristics. Currently, no additional equivalence or further property restrictions are specified for LiquidAerosol.\nAxiom: {'subClassOf': ['DispersionColloid'], 'equivalentClass': ['(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some DispersedPhase])])']}\nGenerated CQs:", "output": "Is every LiquidAerosol necessarily composed of one part that is Stuff in a gaseous state inhering in a ContinuousMedium, and one part that is Stuff in a liquid state inhering in a DispersedPhase? | Is LiquidAerosol logically defined as an intersection of DispersionColloid with those entities having exactly one gaseous part in a ContinuousMedium and exactly one liquid part in a DispersedPhase? | Can a LiquidAerosol exist without meeting the precise conditions of having these two distinct parts each with the required state and inherence? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sol\nDescription: Sol is defined as a type of dispersion colloid that is equivalent to a system containing exactly one portion of solid-phase matter (stuff) existing in a dispersed phase, and exactly one portion of liquid-phase matter (stuff) existing in a continuous medium. This specification enforces that a sol consists of solid particles dispersed uniformly within a liquid, consistent with colloidal solution definitions in which solids are dispersed in a liquid continuous medium.\nAxiom: {'subClassOf': ['DispersionColloid'], 'equivalentClass': ['(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])']}\nGenerated CQs:", "output": "Does Sol fall under the category of DispersionColloid? | Which specific types are encompassed by DispersionColloid, such as Sol? | What parent classes are associated with Sol in this context? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SolidAerosol\nDescription: SolidAerosol is defined as a subclass of DispersionColloid. This indicates that every SolidAerosol is a type of DispersionColloid, inheriting all properties of the parent class. No additional equivalence conditions or property restrictions are specified.\nAxiom: {'subClassOf': ['DispersionColloid'], 'equivalentClass': ['(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])']}\nGenerated CQs:", "output": "Is SolidAerosol equivalent to entities that are DispersionColloid and contain exactly one part that is solid in a dispersed phase, and exactly one part that is gas in a continuous medium? | Does every SolidAerosol necessarily have precisely one Gas component distributed in a continuous medium and one Solid component distributed in a dispersed phase? | Is the class SolidAerosol fully captured by the intersection of DispersionColloid and those entities with exactly one solid part in a dispersed phase and exactly one gas part in a continuous medium? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SolidFoam\nDescription: SolidFoam is defined as a type of DispersionColloid that consists of exactly two distinct components: one component is a portion of matter (Stuff) in a gaseous state, which specifically exists as the dispersed phase; the other component is a portion of matter (Stuff) in a solid state, which specifically serves as the continuous medium. This equivalence ensures that every instance of SolidFoam is composed of a gas dispersed within a continuous solid matrix, precisely modeling the structure of solid foams (such as pumice or foam rubber).\nAxiom: {'subClassOf': ['DispersionColloid'], 'equivalentClass': ['(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some DispersedPhase])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some ContinuousMedium])])']}\nGenerated CQs:", "output": "Is SolidFoam categorized as a more specific instance under DispersionColloid? | Which subclasses are encompassed by DispersionColloid, specifically including SolidFoam? | To which upper-level categories does SolidFoam conceptually correspond within colloidal classifications? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SolidSol\nDescription: SolidSol is defined as a class equivalent to a type of dispersion colloid in which exactly two distinct solid substances are present: one solid substance inheres in the continuous medium, and the other solid substance inheres in the dispersed phase. This means that every instance of SolidSol consists of a colloidal system where both the dispersed phase and the continuous medium are solids, each represented as exactly one part with a solid state.\nAxiom: {'subClassOf': ['DispersionColloid'], 'equivalentClass': ['(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])']}\nGenerated CQs:", "output": "Does SolidSol fall within the classification of DispersionColloid? | Which types are classified as subcategories under DispersionColloid, such as SolidSol? | To what broader classes does SolidSol pertain within the ontology's structure? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NumberOfPhases\nDescription: NumberOfPhases is a class whose individuals are required to have at least one value for the property hasDataValue, where this value must be a non-negative integer (as specified by the xsd:nonNegativeInteger datatype). This formalization ensures that every instance of NumberOfPhases is associated with a non-negative integer data value.\nAxiom: {'subClassOf': ['AbstractRegion'], 'propertyRestrictions': ['[hasDataValue some xsd:nonNegativeInteger]']}\nGenerated CQs:", "output": "Is NumberOfPhases categorized under the broader class of AbstractRegion? | Which entities are subclasses of AbstractRegion, such as NumberOfPhases? | What general classes does NumberOfPhases fall under within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HomogeneousMixture\nDescription: HomogeneousMixture is defined as a subclass of MixedStuff. The class is characterized by the restriction that its members may only have granule types of atom, ion, or molecule—meaning a homogeneous mixture is composed exclusively of these fundamental chemical units. This restriction ensures that any instance of HomogeneousMixture cannot contain granules of any other type, supporting the concept that such mixtures are uniform in composition at the granule level.\nAxiom: {'subClassOf': ['MixedStuff'], 'propertyRestrictions': ['[hasGranuleType only (Atom or Ion or Molecule)]', '[hasStuffDistribution exactly 1 EvenDistribution]']}\nGenerated CQs:", "output": "Must every HomogeneousMixture have exactly one hasStuffDistribution property value that is an EvenDistribution? | Is it required that a HomogeneousMixture cannot have more than one or fewer than one hasStuffDistribution, and that the distribution must be EvenDistribution? | Does any instance of HomogeneousMixture necessarily possess a single hasStuffDistribution of type EvenDistribution? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LeastPortion\nDescription: LeastPortion is defined as a subclass of Portion, meaning every instance of LeastPortion is also an instance of Portion. No further distinguishing characteristics or constraints are specified by the current axioms.\nAxiom: {'subClassOf': ['Portion', 'not [hasPortion some Portion]']}\nGenerated CQs:", "output": "Which entities are classified as LeastPortion under the restriction of not having any associated Portion via hasPortion? | Does being a member of LeastPortion imply the absence of any hasPortion relationship to Portion? | What classes are included in the category of entities that do not possess any Portion through the hasPortion property, such as LeastPortion? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Piece\nDescription: Piece is defined as a subclass of Portion, meaning every instance of Piece is also an instance of Portion. There are no additional property restrictions or disjointness axioms specified, so Piece inherits all characteristics applicable to Portion without further specification.\nAxiom: {'subClassOf': ['Portion'], 'propertyRestrictions': ['[isSelfContainedScatteredPortionOf some AmountOfStuff]']}\nGenerated CQs:", "output": "Is every Piece necessarily a self-contained scattered portion of some AmountOfStuff? | Can a Piece exist without being a self-contained scattered portion of an AmountOfStuff? | Are there any instances where a Piece is not associated through isSelfContainedScatteredPortionOf with an AmountOfStuff? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Portion\nDescription: Portion is defined as a subclass of AmountOfStuff, indicating that every instance of Portion is also an instance of AmountOfStuff. There are no additional property restrictions or distinguishing axioms specified for this class.\nAxiom: {'subClassOf': ['AmountOfStuff'], 'propertyRestrictions': ['[portionOf some AmountOfStuff]']}\nGenerated CQs:", "output": "Is every Portion necessarily a portion of some AmountOfStuff? | Is it required for a Portion to be linked via 'portionOf' to at least one AmountOfStuff instance? | Can a Portion exist without being associated with an AmountOfStuff through the 'portionOf' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PureBulk\nDescription: PureBulk is defined as a subclass of PureStuff. This means every instance of PureBulk is also an instance of PureStuff, inheriting all its characteristics. No additional equivalence or unique property restrictions are specified for PureBulk.\nAxiom: {'subClassOf': ['PureStuff'], 'equivalentClass': ['(PureStuff and [hasGranuleType only MultiMoleculeParticle] and [hasGranuleType exactly 1 MultiMoleculeParticle])']}\nGenerated CQs:", "output": "Is PureBulk equivalent to the class of PureStuff that has exactly one granule type, and that granule type is only MultiMoleculeParticle? | Does every instance of PureBulk necessarily have only one granule type, which must be a MultiMoleculeParticle, and must also be PureStuff? | Are all PureBulk entities strictly those PureStuff individuals with hasGranuleType limited to exactly one occurrence of MultiMoleculeParticle? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: UnstructuredPureStuff\nDescription: UnstructuredPureStuff is defined as a class equivalent to the intersection of PureStuff, entities that have only atoms as their granule type, and entities that possess exactly one atom as their granule type. This means that every instance of UnstructuredPureStuff must be a PureStuff composed exclusively of a single atom, and cannot have any other type or number of granules.\nAxiom: {'subClassOf': ['PureStuff'], 'equivalentClass': ['(PureStuff and [hasGranuleType only Atom] and [hasGranuleType exactly 1 Atom])']}\nGenerated CQs:", "output": "Is UnstructuredPureStuff included as a specific type within PureStuff? | Which subclasses fall under the category of PureStuff, such as UnstructuredPureStuff? | To what higher-level groups does UnstructuredPureStuff pertain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SolidHeterogeneousMixture\nDescription: SolidHeterogeneousMixture is defined as a subclass of HeterogeneousMixture. This means every SolidHeterogeneousMixture is a type of HeterogeneousMixture, specifically characterized by its solid state, though no additional equivalence or further property restrictions are specified in the axioms.\nAxiom: {'subClassOf': ['HeterogeneousMixture'], 'equivalentClass': ['(HeterogeneousMixture and [hasPartStuff min 2 (Stuff and [hasState some Solid])])']}\nGenerated CQs:", "output": "Is every SolidHeterogeneousMixture necessarily a HeterogeneousMixture that contains at least two parts composed of Stuff in the solid state? | Is the class SolidHeterogeneousMixture logically equivalent to the intersection of HeterogeneousMixture and mixtures having a minimum of two solid-state Stuff components? | Can SolidHeterogeneousMixture be defined as a HeterogeneousMixture with at least two constituent parts which are solid kinds of Stuff? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Suspension\nDescription: Suspension is formally defined as a subclass of entities possessing at least one granule type that is a Molecule and at least one granule type that is a MultiMoleculeParticle. It is equivalent to a heterogeneous mixture comprised of parts that meet two criteria: it contains some portion of liquid matter (continuous medium) and some portion of solid matter (dispersed phase). Each part of liquid or solid must inhere in their respective phases—liquid in the continuous medium and solid in the dispersed phase. This formalization captures the essential ontological features of a suspension as a heterogeneous mixture where solid particles are dispersed within a liquid medium.\nAxiom: {'subClassOf': ['([hasGranuleType some Molecule] and [hasGranuleType some MultiMoleculeParticle])', 'HeterogeneousMixture'], 'equivalentClass': ['(HeterogeneousMixture and [hasPartStuff some (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff some (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])']}\nGenerated CQs:", "output": "Does Suspension fall within the broader group of HeterogeneousMixture? | Which mixtures are classified as subtypes of HeterogeneousMixture, such as Suspension? | What are the higher-level mixture categories that encompass Suspension? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: StuffRole\nDescription: StuffRole is a class whose members are characterized by the property restriction that they must inhere in some entity classified as Stuff; that is, every instance of StuffRole is related via the srInheresIn property to at least one instance of Stuff. This ensures that StuffRole is specifically tied to entities that inhere in the category of Stuff.\nAxiom: {'subClassOf': ['Role'], 'propertyRestrictions': ['[srInheresIn some Stuff]']}\nGenerated CQs:", "output": "Is StuffRole categorized as a more specific type within the broader concept of Role? | Which subtypes fall under the umbrella of Role, specifically including StuffRole? | What are the overarching classes to which StuffRole belongs? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: scatterPortion\nDescription: The property \"scatterPortion\" represents a relationship between an original whole and a portion that was once a contiguous part of that whole but has become spatially or contextually separated over time. This property is a subproperty of \"hasProperPart\" and has \"scatteredPortionOf\" as its inverse. It has no explicitly defined domain or range restrictions. Typical examples include a slice of bread cut from a loaf or wine poured into a glass from a bottle. The property is useful for modeling portions that have been separated, with potential for further specialization according to whether the portion is associated with a container or not.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasProperPart'], 'inverseOf': []}\nGenerated CQs:", "output": "What is the ontological connection between the properties ‘scatterPortion’ and ‘scatteredPortionOf’? | If entity A scatterPortion B, does ontology entail that B scatteredPortionOf A? | Which property is defined as the inverse of ‘scatterPortion’ in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: inheresIn\nDescription: The property \"inheresIn\" has no specified characteristics or super-properties. Its domain is restricted to the class \"Role,\" and its range is restricted to \"PhysicalEndurant.\" This indicates that \"inheresIn\" relates a Role to a PhysicalEndurant entity. No inverse property is defined.\nAxiom: {'characteristics': [], 'domain': ['Role'], 'range': [], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'inheresIn' relate to anything other than a PhysicalEndurant as its object? | What types of entities are valid as the range for the property 'inheresIn'? | Is it possible for a value of 'inheresIn' to not be a PhysicalEndurant? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasSelfContainedScatteredPortion\nDescription: The property \"hasSelfContainedScatteredPortion\" relates to entities such as lumps, puddles, slices, or other discrete pieces. It has no explicitly defined domain or range restrictions and no defined characteristics. It is a sub-property of \"scatterPortion\" and has \"isSelfContainedScatteredPortionOf\" as its inverse property.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['scatterPortion'], 'inverseOf': []}\nGenerated CQs:", "output": "What is the connection between 'hasSelfContainedScatteredPortion' and 'isSelfContainedScatteredPortionOf' as defined in the ontology? | If entity A has a self-contained scattered portion B, does it follow that B is a self-contained scattered portion of A, according to the ontology? | Which property acts as the inverse of 'hasSelfContainedScatteredPortion'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasPartStuff\nDescription: The property \"hasPartStuff\" lacks explicit domain and range constraints, and does not possess any special property characteristics. It is specified as a subproperty of \"hasProperPart\" and is the inverse of \"stuffPartOf\". Notably, its use implies that the related entities are distinct kinds of \"stuffs\", as the current description highlights a requirement for distinction between the entities involved.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasProperPart'], 'inverseOf': []}\nGenerated CQs:", "output": "What is the inverse relationship established between ‘hasPartStuff’ and ‘stuffPartOf’ in the ontology? | If entity A has a part-stuff B via ‘hasPartStuff’, does that indicate that B is related to A through ‘stuffPartOf’? | Which object property is declared as the inverse of ‘hasPartStuff’ in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasContainedScatteredPortion\nDescription: The property \"hasContainedScatteredPortion\" is used to relate a container to scattered portions necessarily contained within it (e.g., water in a glass). It has no explicit domain or range restrictions and does not declare any specific property characteristics. It is a sub-property of \"scatterPortion\" and has \"isContainedScatteredPortionOf\" as its inverse property.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['scatterPortion'], 'inverseOf': []}\nGenerated CQs:", "output": "In what way are the properties 'hasContainedScatteredPortion' and 'isContainedScatteredPortionOf' related in the ontology? | If an entity A hasContainedScatteredPortion B, does it follow that B isContainedScatteredPortionOf A? | Which property is modeled as the inverse of 'hasContainedScatteredPortion' in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: solutionFormingRelation\nDescription: The property \"solutionFormingRelation\" relates a Solvent (domain) to a Solute (range) and is a sub-property of \"stuffFormingRelation.\" It has no additional property characteristics or specified inverse. This property is used to represent the chemical dissolution process, where one substance (the solute) is dissolved by another (the solvent).\nAxiom: {'characteristics': [], 'domain': ['Solvent'], 'range': [], 'subPropertyOf': ['stuffFormingRelation'], 'inverseOf': []}\nGenerated CQs:", "output": "Does the property 'solutionFormingRelation' relate to anything other than a Solute as its object? | Is every entity used as the object in 'solutionFormingRelation' required to be a Solute? | What kinds of entities can appear as the range of the 'solutionFormingRelation' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: contiguousPortion\nDescription: The property \"contiguousPortion\" is defined as a sub-property of \"hasProperPart\" with no explicitly specified domain or range restrictions. It has no declared characteristics. The property has an inverse, \"isContiguousPortionOf,\" indicating a bidirectional relationship. This property is intended to relate an entity to one of its proper parts that is contiguous.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasProperPart'], 'inverseOf': []}\nGenerated CQs:", "output": "How are the object properties ‘contiguousPortion’ and ‘isContiguousPortionOf’ interconnected in the ontology? | If entity A is linked to entity B via ‘contiguousPortion’, does that entail that B is related to A through ‘isContiguousPortionOf’? | What object property is defined as the inverse of ‘contiguousPortion’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: instantiation\nDescription: The property \"instantiation\" is an object property with domain \"AmountOfStuff\" and range \"Stuff\", indicating that it relates particular amounts of matter to their corresponding type of stuff. This property is intentionally typed for exclusive use in scenarios where first- and second-order entities coexist in the ontology's TBox. For example, it connects a specific amount, such as \"1kg of gold\", to the general stuff \"Gold.\" It has no explicitly defined characteristics, super-properties, or inverse properties.\nAxiom: {'characteristics': [], 'domain': [], 'range': ['Stuff'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is the domain of the property 'instantiation' restricted solely to 'AmountOfStuff'? | Are there any entities of type 'AmountOfStuff' that cannot be associated with the 'instantiation' property? | What are the possible domains for the property 'instantiation'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasDataValue\nDescription: The property \"hasDataValue\" relates instances of the class \"Abstract\" to data values. Although its intended conceptual range is any data type, no range is currently specified due to technical limitations in expressing unrestricted datatypes. The property has no explicitly defined characteristics, super-properties, or inverse properties.\nAxiom: {'characteristics': [], 'domain': [], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is there any class other than Abstract that can be the subject of the 'hasDataValue' property? | Can 'hasDataValue' be used with any entity that is not an instance of Abstract? | What classes are permitted as the domain of the 'hasDataValue' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasPortion\nDescription: The property \"hasPortion\" is a sub-property of \"hasProperPart\" and has \"portionOf\" as its inverse. While there are no explicit domain or range restrictions or defined characteristics, \"hasPortion\" is intended to relate an entity to a part that consists of the same substance or kind as the whole. Practically, it represents portions or divisions of a material entity at a given instant; for example, different amounts of wine divided from a whole. The property is useful in representing naive chemistry, although continuous changes at the molecular level may challenge the strict philosophical notion of 'portion.'\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasProperPart'], 'inverseOf': []}\nGenerated CQs:", "output": "What is the logical connection between ‘hasPortion’ and ‘portionOf’ in the ontology? | If entity X hasPortion Y, does this infer that Y portionOf X? | Which property is defined as the inverse of ‘hasPortion’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasPart\nDescription: The property \"hasPart\" does not have explicitly defined characteristics, domain, or range restrictions in its current axiom. It is specified as the inverse of the property \"partOf\" and has no super-properties. According to the existing description, \"hasPart\" may overlap with related notions like \"hasComponent\" and \"composedOf,\" with subtleties in the essentiality or accidental nature of parts in different contexts. Domain and range constraints, where relevant, are managed in the inverse property \"partOf.\" This property is intended for modeling part-whole relationships.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "How are the object properties ‘hasPart’ and ‘partOf’ connected as inverse properties within the ontology? | If entity A ‘hasPart’ entity B, does the ontology state that B is ‘partOf’ A? | Which property in the ontology is defined as the inverse of ‘hasPart’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasScatterStuffPart\nDescription: The property \"hasScatterStuffPart\" is defined as a sub-property of \"hasProperPart\" and has \"scatteredStuffPartOf\" as its inverse property. There are no explicitly specified characteristics, domain, or range restrictions for this property. It is intended to associate an entity with a scattered or distributed part of itself, aligning it with the mereological concept of proper parts but specifically for parts that are scattered.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasProperPart'], 'inverseOf': []}\nGenerated CQs:", "output": "How are the properties ‘hasScatterStuffPart’ and ‘scatteredStuffPartOf’ connected in the ontology? | If an entity X hasScatterStuffPart Y, does it follow that Y scatteredStuffPartOf X? | Which property is considered the inverse of ‘hasScatterStuffPart’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasProperPart\nDescription: The property \"hasProperPart\" has no explicitly defined characteristics, domain, or range restrictions. It is a sub-property of \"hasPart,\" indicating a hierarchical relationship. The inverse property is \"properPartOf,\" which relates an entity to its proper whole. This property is used to specify that one entity is a proper (non-identical) part of another.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasPart'], 'inverseOf': []}\nGenerated CQs:", "output": "What is the formal connection between the properties 'hasProperPart' and 'properPartOf' as defined in the ontology? | If an entity A has a proper part B, does the ontology entail that B is a proper part of A? | Which property is explicitly stated as the inverse of 'hasProperPart' in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasStuffDistribution\nDescription: The property \"hasStuffDistribution\" has no specified domain, range, characteristics, super-properties, or inverse properties. Based on its axioms, it is a generic property that can relate any type of entities without restriction. No additional description is currently provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that 'hasStuffDistribution' has no specified domain? | What kinds of entities can act as the subject when using the property 'hasStuffDistribution'? | Is it possible for the property 'hasStuffDistribution' to exist without a defined range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: stuffFormingRelation\nDescription: The property \"stuffFormingRelation\" relates individuals that are either ContinuousMedium, DispersedPhase, Solute, or Solvent. It has no explicit property characteristics, super-properties, or inverses. This property is used to represent relationships that characterize the formation or interactions among substances within a mixture, such as surface tension effects, molecular interactions (e.g., hydrogen bonding), or compositional ratios (e.g., the proportional amounts required to form a mixture like lemonade). Both the domain and range are restricted to the aforementioned substance types.\nAxiom: {'characteristics': [], 'domain': ['(ContinuousMedium or DispersedPhase or Solute or Solvent)'], 'range': ['(ContinuousMedium and DispersedPhase and Solute and Solvent)'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it possible for 'stuffFormingRelation' to relate to an entity that is not a ContinuousMedium, DispersedPhase, Solute, or Solvent? | Are all possible ranges for 'stuffFormingRelation' restricted to ContinuousMedium, DispersedPhase, Solute, or Solvent? | Which types of entities can serve as the range for the property 'stuffFormingRelation'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: portionOf\nDescription: The property \"portionOf\" relates an entity of type AmountOfStuff or Stuff to another entity of the same type, representing a portion or part of the same kind of matter (e.g., a slice of cake to the cake, a glass of wine to the bottle of wine). The domain and range are both restricted to AmountOfStuff or Stuff. It is a sub-property of \"properPartOf\" and has no specified characteristics or inverse property. This property is intended for use with mass nouns or non-countable substances.\nAxiom: {'characteristics': [], 'domain': ['(AmountOfStuff or Stuff)'], 'range': ['(AmountOfStuff and Stuff)'], 'subPropertyOf': ['properPartOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Is every value used with the property 'portionOf' required to be either an AmountOfStuff or Stuff? | Can 'portionOf' have a range that is not AmountOfStuff or Stuff? | What entities are permitted as the range of the property 'portionOf'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: isContainedScatteredPortionOf\nDescription: The property \"isContainedScatteredPortionOf\" relates instances of AmountOfStuff or Stuff to other instances of the same types, indicating that the subject is a portion that originated from a larger whole and currently requires a container. As a subproperty of \"scatteredPortionOf,\" it specifically captures the context where a portion, such as 'wine in a wine glass,' was part of a bulk amount, now separated and needing containment. No explicit property characteristics, inverse, or additional hierarchical relations are defined.\nAxiom: {'characteristics': [], 'domain': ['(AmountOfStuff or Stuff)'], 'range': ['(AmountOfStuff and Stuff)'], 'subPropertyOf': ['scatteredPortionOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Does 'isContainedScatteredPortionOf' have a range other than AmountOfStuff or Stuff? | Can the property 'isContainedScatteredPortionOf' be used with values that are not instances of AmountOfStuff or Stuff? | What types of entities are permitted as the range for 'isContainedScatteredPortionOf'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: scatteredStuffPartOf\nDescription: The property \"scatteredStuffPartOf\" is a subproperty of \"properPartOf\" and relates instances of \"AmountOfStuff\" or \"Stuff\" to other instances within the same classes. It is intended to connect quantities or types of matter—typically those denoted by mass nouns in natural language (e.g., gold, milk, mayonnaise)—with their constituent ingredients that are of a different type (e.g., alcohol in wine, oil in mayonnaise, sugar in cake). The property does not specify domain or range characteristics beyond these classes and has no defined inverse. It also suggests a temporal dimension, where the part was once a contiguous proper part of the whole, but is now scattered or integrated.\nAxiom: {'characteristics': [], 'domain': ['(AmountOfStuff and Stuff)'], 'range': ['(AmountOfStuff or Stuff)'], 'subPropertyOf': ['properPartOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Does the property 'scatteredStuffPartOf' apply to subjects other than AmountOfStuff or Stuff? | What classes are permitted as the domain for the property 'scatteredStuffPartOf'? | Is it possible for an instance that is not an AmountOfStuff or Stuff to use the 'scatteredStuffPartOf' property as its subject? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: scatteredPortionOf\nDescription: The property \"scatteredPortionOf\" has a domain and range restricted to either AmountOfStuff or Stuff. It is defined as a subproperty of \"properPartOf\" and has no explicitly specified characteristics or inverse. This property is intended to represent a specific kind of portion relationship but is not made a subproperty of \"portionOf\" to avoid reasoning cycles and undecidability in Description Logics. The distinction between this property and related properties is primarily temporal, which is not expressible in OWL; therefore, \"scatteredPortionOf\" and \"portionOf\" are modeled as sibling properties to enable practical property chaining in reasoning.\nAxiom: {'characteristics': [], 'domain': ['(AmountOfStuff or Stuff)'], 'range': ['(AmountOfStuff and Stuff)'], 'subPropertyOf': ['properPartOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Is every value assigned via 'scatteredPortionOf' restricted to being an AmountOfStuff or Stuff? | What types of entities can be the object of the 'scatteredPortionOf' property? | Are there any entities other than AmountOfStuff or Stuff that can be in the range of 'scatteredPortionOf'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasQuality\nDescription: The property \"hasQuality\" has no explicitly defined characteristics or super-properties. Its domain includes entities classified as Endurant or Perdurant, and its range is restricted to instances of Quality. This property is used to relate an Endurant or Perdurant to a Quality. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['(Endurant and Perdurant)'], 'range': ['Quality'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'hasQuality' be used with subjects other than Endurant or Perdurant? | Are all instances associated with 'hasQuality' required to be either Endurant or Perdurant as the subject? | What entities are permitted to serve as the domain for the property 'hasQuality'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: isSelfContainedScatteredPortionOf\nDescription: The property \"isSelfContainedScatteredPortionOf\" relates an entity classified as \"AmountOfStuff\" or \"Stuff\" to another entity of the same types, indicating that the former is a self-standing, scattered portion of the latter (such as a lump, drop, or slice). It is a sub-property of \"scatteredPortionOf\" and does not specify any particular characteristics or inverse properties. This property is typically used to denote portions that were once part of a larger whole but now exist as distinct, stand-alone pieces.\nAxiom: {'characteristics': [], 'domain': ['(AmountOfStuff and Stuff)'], 'range': ['(AmountOfStuff or Stuff)'], 'subPropertyOf': ['scatteredPortionOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Is it possible for 'isSelfContainedScatteredPortionOf' to have a domain other than AmountOfStuff or Stuff? | Can entities outside of AmountOfStuff or Stuff be involved as the subject of the property 'isSelfContainedScatteredPortionOf'? | What kinds of entities are permitted as the domain for 'isSelfContainedScatteredPortionOf'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: stuffPartOf\nDescription: The property \"stuffPartOf\" relates entities classified as AmountOfStuff or Stuff to other entities of the same categories, indicating a part-whole relationship specifically among mass nouns or substances that are not typically countable. It is a subproperty of \"properPartOf,\" emphasizing that the 'part' is a distinct type of stuff or ingredient within another. No additional property characteristics or inverse are specified. Examples include alcohol as a stuff-part of wine, oil in mayonnaise, or sugar in cake.\nAxiom: {'characteristics': [], 'domain': ['(AmountOfStuff or Stuff)'], 'range': ['(AmountOfStuff and Stuff)'], 'subPropertyOf': ['properPartOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'stuffPartOf' refer to objects other than AmountOfStuff or Stuff as its value? | Is every value associated with the property 'stuffPartOf' required to be of type AmountOfStuff or Stuff? | What types of resources are permitted as the range of the 'stuffPartOf' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: isContiguousPortionOf\nDescription: The property \"isContiguousPortionOf\" relates an instance of AmountOfStuff or Stuff to another of the same types, indicating that the subject is a contiguous portion of the object. It is defined as a sub-property of \"properPartOf\" and has no specified inverse or additional property characteristics. Although originally intended as a super-property of \"portionOf\", it is classified as a sibling to avoid logical cycles and maintain decidability within OWL reasoning. This distinction primarily addresses semantic differences involving temporality not representable in OWL.\nAxiom: {'characteristics': [], 'domain': ['(AmountOfStuff and Stuff)'], 'range': ['(AmountOfStuff or Stuff)'], 'subPropertyOf': ['properPartOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Is the domain of the property 'isContiguousPortionOf' limited to AmountOfStuff or Stuff, or can it include other classes? | Are there any instances of AmountOfStuff or Stuff that cannot be subjects of 'isContiguousPortionOf'? | What entity types are eligible to serve as the domain for the property 'isContiguousPortionOf'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasState\nDescription: The property \"hasState\" links individuals of the class \"PhysicalEndurant\" to instances of the class \"State\". It has no specified characteristics, super-properties, or inverse properties. The domain restriction ensures it is only used with \"PhysicalEndurant\" entities, and its range is limited to \"State\".\nAxiom: {'characteristics': [], 'domain': ['PhysicalEndurant'], 'range': ['State'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "Is hasState considered a subtype of owl:topObjectProperty? | What superproperties are associated with hasState in the property hierarchy? | Does hasState directly fall under the domain of owl:topObjectProperty? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: properContainedIn\nDescription: The property \"properContainedIn\" has no specified domain, range, characteristics, super-properties, or inverse properties. This suggests it is a general-purpose property intended to express that one entity is properly contained within another, but no formal constraints are imposed on the types of entities it can relate.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['properPartOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Is properPartOf a superproperty of properContainedIn? | What are the subproperties encompassed by properPartOf? | Which properties serve as superproperties for properContainedIn? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasNrOfPhase\nDescription: The property \"hasNrOfPhase\" has no explicitly defined characteristics, domain, super-properties, or inverse properties. Its range is specified as xsd:integer, indicating that it relates an entity to an integer value representing the number of phases.\nAxiom: {'characteristics': [], 'domain': ['Stuff'], 'range': ['xsd:integer'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'hasNrOfPhase' be used with any subject other than 'Stuff'? | Is it possible for an entity that is not classified as 'Stuff' to have a value for 'hasNrOfPhase'? | What types of entities are permitted as the domain of the property 'hasNrOfPhase'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: srInheresIn\nDescription: The property \"srInheresIn\" has no defined characteristics or range restrictions. Its domain is restricted to instances of \"StuffRole\". It is a sub-property of \"inheresIn\", indicating it specializes this more general relationship. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['StuffRole'], 'range': ['Stuff'], 'subPropertyOf': ['inheresIn'], 'inverseOf': []}\nGenerated CQs:", "output": "Is anything other than Stuff allowed as the range of the property 'srInheresIn'? | Can 'srInheresIn' relate to values that are not instances of Stuff? | What types of entities can serve as the range for the property 'srInheresIn'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: partOf\nDescription: The property \"partOf\" has no specified characteristics, domain, range, super-properties, or inverse properties. It is a general property intended to express a part-whole relationship, with no further formal restrictions defined by axioms.\nAxiom: {'characteristics': ['Transitive'], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is partOf a transitive property, such that if an entity is part of a second entity, and the second is part of a third, the first entity is part of the third? | Can the partOf property infer that if object A is part of object B, and object B is part of object C, then object A is part of object C? | Does the ontology require partOf to satisfy the transitive characteristic over related entities? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: colloidFormingRelation\nDescription: The property \"colloidFormingRelation\" has no explicitly defined characteristics or domain constraints. Its range is restricted to individuals of the class \"DispersedPhase.\" It is a subproperty of \"stuffFormingRelation,\" indicating that it inherits general properties from this broader relation. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['ContinuousMedium'], 'range': ['DispersedPhase'], 'subPropertyOf': ['stuffFormingRelation'], 'inverseOf': []}\nGenerated CQs:", "output": "Is it possible for the property 'colloidFormingRelation' to have a subject that is not a ContinuousMedium? | What types of entities can appear as the domain for the property 'colloidFormingRelation'? | Are all subjects of 'colloidFormingRelation' instances of ContinuousMedium? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: properPartOf\nDescription: The property \"properPartOf\" has no specified characteristics, domain, range, super-properties, or inverse properties. This suggests that it is a general-purpose relation intended to express a proper part-whole relationship between entities without any additional constraints or formal links to other properties.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['partOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Is properPartOf classified as a subproperty of partOf within the ontology? | Which properties are identified as subproperties under partOf? | Does the use of properPartOf property entail the use of partOf property for the same subject and object? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasGranuleType\nDescription: The property \"hasGranuleType\" has no specified characteristics or domain restrictions. Its range is limited to individuals classified under \"PhysicalObject\". It is a subproperty of \"owl:topObjectProperty\" and does not have an explicitly defined inverse property. This property is intended to relate an entity to a type of physical object.\nAxiom: {'characteristics': [], 'domain': ['Stuff'], 'range': ['PhysicalObject'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "Is the subject of 'hasGranuleType' always required to be a Stuff? | Are there any entities besides Stuff that can be associated with the 'hasGranuleType' property as its domain? | What classes can serve as the domain for the property 'hasGranuleType'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: containedIn\nDescription: The property \"containedIn\" does not have specified characteristics, domain, range, super-properties, or an inverse property. It is a general property intended to relate entities without explicit constraints on its usage.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['partOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Is containedIn defined as a more specific property under partOf? | Which properties are recognized as subproperties of partOf? | What are the superproperties assigned to containedIn in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasQuale\nDescription: The property \"hasQuale\" has no explicitly defined characteristics, domain, or super-properties. Its range is restricted to the class \"Abstract,\" indicating that it relates an entity to an abstract entity. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['Quality'], 'range': ['Abstract'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can entities other than Quality appear as the subject of the property 'hasQuale'? | What types of individuals can serve as the domain for the property 'hasQuale'? | Is 'hasQuale' ever used where the subject is not a member of Quality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ADLProblem\nDescription: ADLProblem is defined as a subclass of Problem. This means every instance of ADLProblem is also an instance of Problem, establishing a hierarchical relationship where ADLProblem specifies a more specialized type of problem related to activities of daily living (ADL). No further property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['Problem']}\nGenerated CQs:", "output": "Which types of Problem include ADLProblem as a more specific instance? | Is ADLProblem a specialized form within the overarching class of Problem? | What broader categories encompass ADLProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ExerciseProblem\nDescription: ExerciseProblem is defined as a subclass of Problem. This means that every ExerciseProblem is considered a type of Problem, inheriting all characteristics of the Problem class. No additional distinguishing axioms or property restrictions are specified for ExerciseProblem in the current definition.\nAxiom: {'subClassOf': ['Problem']}\nGenerated CQs:", "output": "What are the specialized types of Problem, such as ExerciseProblem? | Does ExerciseProblem fall under the wider category of Problem? | Which broader classifications encompass ExerciseProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MoodProblem\nDescription: MoodProblem is defined as a subclass of Problem, indicating that any instance of MoodProblem is also an instance of Problem. This classification establishes MoodProblem as a specific type of problem, but does not currently provide further distinguishing characteristics beyond its placement in the hierarchy.\nAxiom: {'subClassOf': ['Problem']}\nGenerated CQs:", "output": "Does MoodProblem fall under the general category of Problem? | What are the hierarchically broader classes that include MoodProblem? | Which specific types are encompassed within the broader class Problem, such as MoodProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SleepProblem\nDescription: SleepProblem is defined as a subclass of Problem, representing a specific category of problems related to sleep. Any individual classified as a SleepProblem is, by definition, also a Problem, inheriting all general properties and restrictions of the Problem class but specializing them to issues involving sleep.\nAxiom: {'subClassOf': ['Problem']}\nGenerated CQs:", "output": "What broader categories encompass SleepProblem? | Is SleepProblem categorized under Problem types? | Which subcategories exist within the Problem class, such as SleepProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SocialProblem\nDescription: SocialProblem is defined as a subclass of Problem. This means every social problem is recognized as a problem, but with distinguishing features or contexts that are social in nature. The axiom places SocialProblem within the hierarchy of problems, ensuring that social problems inherit all general characteristics of problems while being specifically identified for their relevance to societal issues.\nAxiom: {'subClassOf': ['Problem']}\nGenerated CQs:", "output": "Which specific types are subsumed by Problem, including SocialProblem? | To which overarching categories does SocialProblem belong within the ontology? | Is every SocialProblem categorized under the broader class of Problem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ADLSummary\nDescription: ADLSummary is a subclass of DaySummary. This means that every instance of ADLSummary is also an instance of DaySummary and inherits its properties and constraints. No additional axioms or distinguishing features are specified beyond its hierarchical relationship.\nAxiom: {'subClassOf': ['DaySummary']}\nGenerated CQs:", "output": "Which specific summaries are encompassed within DaySummary, such as ADLSummary? | Is ADLSummary classified under the broader group of DaySummary types? | What higher-level categories include ADLSummary? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ExcessiveNapProblem\nDescription: ExcessiveNapProblem is defined as a subclass of NappingProblem. It represents a specific type of napping issue characterized by an unusually high frequency or duration of naps, distinguishing it from other forms of napping problems.\nAxiom: {'subClassOf': ['NappingProblem']}\nGenerated CQs:", "output": "Is ExcessiveNapProblem classified under the broader group of NappingProblem? | What are the direct superclasses associated with ExcessiveNapProblem? | Which specific types of NappingProblem encompass ExcessiveNapProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FailureToPrepareMeal\nDescription: FailureToPrepareMeal is defined as a subclass of MealProblem, representing a specific type of problem wherein a meal is not successfully prepared. All instances of FailureToPrepareMeal are, by definition, also considered instances of MealProblem, aligning this class within the broader context of meal-related issues.\nAxiom: {'subClassOf': ['MealProblem']}\nGenerated CQs:", "output": "Which broader classes encompass FailureToPrepareMeal? | Does FailureToPrepareMeal fall under the category of MealProblem? | What types of issues are included as subclasses of MealProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InappropriateMealDuration\nDescription: InappropriateMealDuration is defined as a subclass of MealProblem. This class represents meal-related issues specifically concerning the duration of meals. Any instance of InappropriateMealDuration is inherently a type of MealProblem, indicating that problems related to the amount of time spent during meals fall under this category.\nAxiom: {'subClassOf': ['MealProblem']}\nGenerated CQs:", "output": "Which specific problems are encompassed by the general class MealProblem, including InappropriateMealDuration? | Is InappropriateMealDuration classified under the broader category of MealProblem? | To which overarching problem categories does InappropriateMealDuration pertain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InappropriateMealLocation\nDescription: InappropriateMealLocation is a subclass of MealProblem. This class represents issues or problems specifically related to unsuitable or improper locations for meals. Every instance of InappropriateMealLocation is also considered a type of MealProblem, highlighting its role in categorizing location-based meal issues.\nAxiom: {'subClassOf': ['MealProblem']}\nGenerated CQs:", "output": "Is InappropriateMealLocation categorized under the broader class of MealProblem? | Which types are classified as more specific instances of MealProblem, including InappropriateMealLocation? | To which higher-level categories does InappropriateMealLocation belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InterruptedMeal\nDescription: InterruptedMeal is a subclass of MealProblem, indicating that it represents a specific type of issue arising during a meal. Members of this class are characterized as meal-related problems where the meal is disrupted or not completed as intended. This formalization ensures that any instance of InterruptedMeal also qualifies as a MealProblem, distinguishing it from other meal-related issues by its defining feature of interruption.\nAxiom: {'subClassOf': ['MealProblem']}\nGenerated CQs:", "output": "Which problem types encompass InterruptedMeal as a more specific instance? | What categories represent the superclass of InterruptedMeal? | Does InterruptedMeal belong to the broader classification of MealProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MissedMeal\nDescription: MissedMeal is defined as a subclass of MealProblem, meaning it represents a specific type of problem related to meals. Any instance of MissedMeal is, by definition, also an instance of MealProblem. This classification is used to denote situations where a meal is not consumed as expected.\nAxiom: {'subClassOf': ['MealProblem']}\nGenerated CQs:", "output": "What broader classifications does MissedMeal fall under within the ontology? | Which problems are subclasses of MealProblem, specifically including MissedMeal? | Is MissedMeal categorized as a kind of MealProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FragmentedSleepProblem\nDescription: FragmentedSleepProblem is a subclass of InterruptedSleepProblem, representing a specific type of sleep disturbance characterized by sleep fragmentation. This condition involves frequent interruptions or arousals during sleep, leading to broken or non-continuous sleep.\nAxiom: {'subClassOf': ['InterruptedSleepProblem']}\nGenerated CQs:", "output": "Is FragmentedSleepProblem categorized as a type of InterruptedSleepProblem? | Which specific sleep problems are classified under InterruptedSleepProblem, such as FragmentedSleepProblem? | What broader sleep problem categories encompass FragmentedSleepProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Nocturia\nDescription: Nocturia is defined as a subclass of InterruptedSleepProblem. Individuals with nocturia typically experience interrupted sleep due to visiting the bathroom more than twice during the night. This classification formalizes nocturia as a specific type of sleep disturbance characterized by frequent nighttime urination.\nAxiom: {'subClassOf': ['InterruptedSleepProblem']}\nGenerated CQs:", "output": "Is Nocturia classified as a kind of InterruptedSleepProblem? | Which sleep problems are considered subtypes of InterruptedSleepProblem, such as Nocturia? | What broader problem categories include Nocturia among their subclasses? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HighStressLevel\nDescription: HighStressLevel is defined as a subclass of MoodProblem, indicating that all individuals classified as HighStressLevel are also considered to have a mood-related problem. This formalization groups HighStressLevel within the broader category of mood issues for more precise reasoning and classification. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['MoodProblem']}\nGenerated CQs:", "output": "Is HighStressLevel classified under the broader group of MoodProblem? | What higher-level categories does HighStressLevel fall under within the context of mood problems? | Which mood-related issues encompass HighStressLevel as a specific case? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SelfReportedLowMood\nDescription: SelfReportedLowMood is defined as a subclass of MoodProblem, indicating that all individuals classified under SelfReportedLowMood are also considered types of MoodProblem. This formalization implies that SelfReportedLowMood represents a specific form or instance of mood problem, characterized by being self-reported rather than externally assessed.\nAxiom: {'subClassOf': ['MoodProblem']}\nGenerated CQs:", "output": "Which conditions are categorized as more specific forms of MoodProblem, such as SelfReportedLowMood? | Does SelfReportedLowMood fall under the broader classification of MoodProblem? | To which overarching classes does SelfReportedLowMood pertain within the mood domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InsufficientAccelerometerCounts\nDescription: InsufficientAccelerometerCounts is defined as a subclass of ExerciseProblem. This class represents a specific type of exercise problem where the measured accelerometer counts are lower than required or expected levels, indicating an issue with the quantity or quality of motion captured during exercise activities.\nAxiom: {'subClassOf': ['ExerciseProblem']}\nGenerated CQs:", "output": "Which more specific problems are encompassed by ExerciseProblem, such as InsufficientAccelerometerCounts? | Is InsufficientAccelerometerCounts classified under the broader category of ExerciseProblem? | What higher-level categories include InsufficientAccelerometerCounts as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ShortStrideLength\nDescription: ShortStrideLength is defined as a subclass of ExerciseProblem. This indicates that it represents a specific type of issue encountered during exercise, categorized under general exercise problems. No further constraints or distinguishing characteristics are specified.\nAxiom: {'subClassOf': ['ExerciseProblem']}\nGenerated CQs:", "output": "What specific types fall under the category of ExerciseProblem, including ShortStrideLength? | Is ShortStrideLength classified as a type of ExerciseProblem? | Which higher-level categories encompass ShortStrideLength as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SlowWalkSpeed\nDescription: SlowWalkSpeed is defined as a subclass of ExerciseProblem, indicating that it represents a specific type of problem or difficulty related to walking at a slow speed. Members of this class are considered instances where an individual's slow walking speed is identified as an exercise-related issue.\nAxiom: {'subClassOf': ['ExerciseProblem']}\nGenerated CQs:", "output": "Which higher-level classes include SlowWalkSpeed as a subordinate concept? | What specific subtypes fall under ExerciseProblem, such as SlowWalkSpeed? | Is SlowWalkSpeed classified as a type of ExerciseProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InsufficientFaceToFaceInteraction\nDescription: InsufficientFaceToFaceInteraction is defined as a subclass of SocialProblem. This class represents social problems that arise specifically from a lack of direct, in-person interactions between individuals. Any instance of InsufficientFaceToFaceInteraction is, by definition, also an instance of SocialProblem, indicating its relevance within the broader context of social issues.\nAxiom: {'subClassOf': ['SocialProblem']}\nGenerated CQs:", "output": "Is InsufficientFaceToFaceInteraction categorized as a specific type of SocialProblem? | Which more general classifications include InsufficientFaceToFaceInteraction within their scope? | What kinds of SocialProblem encompass InsufficientFaceToFaceInteraction as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InsufficientTelephoneInteraction\nDescription: InsufficientTelephoneInteraction is defined as a subclass of SocialProblem. This means that every instance of InsufficientTelephoneInteraction is also an instance of SocialProblem, situating it within the broader category of issues impacting social well-being. No further property restrictions or disjointness axioms are specified, so its definition relies solely on its classification as a type of social problem.\nAxiom: {'subClassOf': ['SocialProblem']}\nGenerated CQs:", "output": "Which specific social problems include InsufficientTelephoneInteraction as a subtype? | What are the more general categories that encompass InsufficientTelephoneInteraction? | Is InsufficientTelephoneInteraction classified under the broader category of SocialProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InterruptedSleepProblem\nDescription: InterruptedSleepProblem is defined as a subclass of SleepProblem, indicating that every instance of InterruptedSleepProblem is also an instance of SleepProblem. This class characterizes sleep issues specifically involving interruptions or disturbances during sleep, distinguishing it from other types of sleep problems.\nAxiom: {'subClassOf': ['SleepProblem']}\nGenerated CQs:", "output": "To which parent classes is InterruptedSleepProblem associated? | What types of SleepProblem are defined, and does this include InterruptedSleepProblem? | Does InterruptedSleepProblem fall under the general classification of SleepProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NappingProblem\nDescription: NappingProblem is defined as a subclass of SleepProblem, indicating that any instance classified as a NappingProblem is also recognized as a SleepProblem. This class formalizes issues specifically related to napping, distinguishing it from other types of sleep problems.\nAxiom: {'subClassOf': ['SleepProblem']}\nGenerated CQs:", "output": "What are all the more specific problem types that fall under SleepProblem, including NappingProblem? | Which upper-level categories encompass NappingProblem? | Is NappingProblem categorized under the broader class of SleepProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PeriodicLimbMovement\nDescription: PeriodicLimbMovement is defined as a subclass of SleepProblem, indicating that every instance of PeriodicLimbMovement is also considered a type of sleep problem. This class captures disturbances involving repetitive limb movements during sleep, aligning with the broader classification of sleep-related disorders.\nAxiom: {'subClassOf': ['SleepProblem']}\nGenerated CQs:", "output": "What are the parent categories associated with PeriodicLimbMovement? | Which specific types of SleepProblem include PeriodicLimbMovement? | Is PeriodicLimbMovement classified under the broader category of SleepProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SleepDurationProblem\nDescription: SleepDurationProblem is defined as a subclass of SleepProblem. Members of this class experience issues related specifically to sleep duration. According to the current description, this class is characterized by individuals whose sleep duration is less than 7 hours. This formalization ensures that all instances of SleepDurationProblem represent cases where insufficient sleep time is the primary issue.\nAxiom: {'subClassOf': ['SleepProblem']}\nGenerated CQs:", "output": "Which types of sleep issues are classified as more specific than SleepProblem, such as SleepDurationProblem? | To what higher-level groups does SleepDurationProblem belong within the ontology? | Is SleepDurationProblem categorized under the broader class of SleepProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SleepEfficiencyProblem\nDescription: SleepEfficiencyProblem is a subclass of SleepProblem, referring specifically to cases where an individual's sleep efficiency is less than 85%. This classification distinguishes SleepEfficiencyProblem from other sleep-related issues by focusing on reduced efficiency in sleep, as formally defined by the subclass axiom and supported by the given comment.\nAxiom: {'subClassOf': ['SleepProblem']}\nGenerated CQs:", "output": "Which subclasses are encompassed by SleepProblem, such as SleepEfficiencyProblem? | Does SleepEfficiencyProblem fall under the broader classification of SleepProblem? | What higher-level categories are associated with SleepEfficiencyProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SleepLatencyProblem\nDescription: SleepLatencyProblem is a subclass of SleepProblem, representing a specific type of sleep issue. Members of this class are characterized by experiencing sleep latency (the time taken to fall asleep) exceeding 30 minutes. This definition situates SleepLatencyProblem within the broader category of sleep-related disorders, with a focus on delayed sleep onset.\nAxiom: {'subClassOf': ['SleepProblem']}\nGenerated CQs:", "output": "Which more specific problems are categorized within SleepProblem, such as SleepLatencyProblem? | Does SleepLatencyProblem fall under the broader classification of SleepProblem? | What higher-level categories does SleepLatencyProblem pertain to in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MealProblem\nDescription: MealProblem is defined as a subclass of ADLProblem, indicating that it represents a specific kind of difficulty or issue related to Activities of Daily Living (ADL). Any instance of MealProblem is also an instance of ADLProblem, inheriting its characteristics and properties, but is used to specifically denote problems associated with meal-related activities.\nAxiom: {'subClassOf': ['ADLProblem']}\nGenerated CQs:", "output": "Which problem types are more specific instances of ADLProblem, such as MealProblem? | To which higher-level classifications is MealProblem associated within the context of ADLProblem? | Does MealProblem fall under the overarching category of ADLProblem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MoodQuestionnaire\nDescription: MoodQuestionnaire is defined as a subclass of Questionnaire. This class represents questionnaires designed specifically to assess or measure mood-related aspects of an individual. All MoodQuestionnaire instances inherit the general characteristics of Questionnaire, while focusing on evaluating emotional or affective states.\nAxiom: {'subClassOf': ['Questionnaire']}\nGenerated CQs:", "output": "Is MoodQuestionnaire classified under the broader group of Questionnaire? | What higher-level categories encompass MoodQuestionnaire? | Which questionnaire types are more specific than Questionnaire, for example, MoodQuestionnaire? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SleepQuestionnaire\nDescription: SleepQuestionnaire is defined as a subclass of Questionnaire. This means every SleepQuestionnaire is a type of Questionnaire, typically designed to assess or gather information related to sleep patterns, habits, or disorders. No additional restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['Questionnaire']}\nGenerated CQs:", "output": "What are the direct parent classes of SleepQuestionnaire in the ontology? | Is SleepQuestionnaire categorized under the broader class of Questionnaire? | Which types of Questionnaire include SleepQuestionnaire as a specific example? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: event:LongNap\nDescription: event:LongNap is a class characterized by the requirement that all its instances have the property ‘highlight’ set to true. This means every long nap event is marked as highlighted, distinguishing it from other types of events that may not have this property. There are no additional subclass, disjointness, or other property axioms specified.\nAxiom: {'propertyRestrictions': ['[highlight hasValue true]']}\nGenerated CQs:", "output": "Is the highlight property of a LongNap event universally constrained to the value true? | Does every LongNap event necessarily have the highlight property set to true? | Can a LongNap event exist without having the highlight property valued as true? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: event:NapAfterLunch\nDescription: event:NapAfterLunch is a class characterized by having the property highlight with a required value of true for all its instances. This means every instance of event:NapAfterLunch must be associated with the property highlight set to true, signifying its notable or emphasized status within a given context. No other description is currently provided, so the class is defined solely by this property restriction.\nAxiom: {'propertyRestrictions': ['[highlight hasValue true]']}\nGenerated CQs:", "output": "Must every instance of NapAfterLunch have the property 'highlight' with the value true? | Is it required that NapAfterLunch events are always associated with a 'highlight' property set to true? | Can a NapAfterLunch event exist without possessing 'highlight' equal to true? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: event:NightKitchenVisit\nDescription: event:NightKitchenVisit is a class characterized by the property restriction that any instance must have the attribute 'highlight' with a value of true. This means that all individuals classified under event:NightKitchenVisit are specifically marked or emphasized via the 'highlight' property. In the absence of additional superclasses or disjointness, this class is primarily defined by this property restriction.\nAxiom: {'propertyRestrictions': ['[highlight hasValue true]']}\nGenerated CQs:", "output": "Is it required for every NightKitchenVisit event to have the property ‘highlight’ set to true? | Are all instances of NightKitchenVisit characterized by the property ‘highlight’ having the value true? | Does the ontology restrict the ‘highlight’ property of NightKitchenVisit events so that only those with value true are permitted? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: event:NightLivingRoomVisit\nDescription: event:NightLivingRoomVisit is a class characterized by the property restriction that every instance must have the property 'highlight' with the value 'true'. This formalization ensures that any individual classified as event:NightLivingRoomVisit is specifically marked as highlighted, indicating its special significance or prominence.\nAxiom: {'propertyRestrictions': ['[highlight hasValue true]']}\nGenerated CQs:", "output": "Is it possible for any NightLivingRoomVisit event to exist without the highlight property being true? | Must every NightLivingRoomVisit event have the highlight property set to true? | Are all NightLivingRoomVisit events required to entail highlight equals true as a property restriction? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Problem\nDescription: Problem is a class characterized by the existence of at least one possible contributing factor, which must be an instance of event:Event. This means that any individual classified as a Problem is associated with one or more events identified as potential factors contributing to the occurrence of the problem.\nAxiom: {'propertyRestrictions': ['[possibleContributingFactor only event:Event]']}\nGenerated CQs:", "output": "Does a problem necessarily have at least one possible contributing factor that is an event? | Is it required for every instance of Problem to be associated with some event as a possible contributing factor? | Can a problem exist without having any event identified as a possible contributing factor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ExerciseSummary\nDescription: ExerciseSummary is a subclass of DaySummary that represents a summary record of an exercise session. Each instance is characterized by exactly one value for strideLength (xsd:double), walkSpeed (xsd:double), distanceTravelled (xsd:double), heartRate (xsd:double), exerciseIntensity (literal), accelerometerCountsPerMinute (xsd:int), and exerciseStartTime (time:Instant). Additionally, exerciseDuration is associated only with values of type time:DurationDescription. These property restrictions ensure every ExerciseSummary captures precise and comprehensive data on exercise metrics within the context of a single day.\nAxiom: {'subClassOf': ['DaySummary'], 'propertyRestrictions': ['[exerciseStartTime only time:Instant]', '[distanceTravelled only xsd:double]', '[strideLength exactly 1 xsd:double]', '[exerciseDuration only time:DurationDescription]', '[walkSpeed exactly 1 xsd:double]', '[heartRate only xsd:double]', '[heartRate exactly 1 xsd:double]', '[walkSpeed only xsd:double]', '[exerciseIntensity exactly 1]', '[exerciseStartTime exactly 1 time:Instant]', '[strideLength only xsd:double]', '[distanceTravelled exactly 1 xsd:double]', '[accelerometerCountsPerMinute exactly 1 xsd:int]', '[exerciseIntensity only rdfs:Literal]', '[accelerometerCountsPerMinute only xsd:int]', '[exerciseDuration exactly 1 time:DurationDescription]']}\nGenerated CQs:", "output": "Is every instance of ExerciseSummary required to have exactly one value for the property exerciseDuration of type DurationDescription? | Can an ExerciseSummary have more than one or fewer than one exerciseDuration specified? | Does ExerciseSummary allow any value for exerciseDuration other than exactly one DurationDescription? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MoodSummary\nDescription: MoodSummary is defined as a subclass of DaySummary. Each instance of MoodSummary is characterized by having some association with physical hygiene and some involvement in discussion. It must have exactly one value for the property numberOfSocialInteractions, and this value must be of the integer data type. Additionally, the stressLevel property, if present, is restricted to literal values. This formalization ensures that MoodSummary captures daily summaries with a focus on physical hygiene, social interactions, discussion involvement, and reported stress levels, following specified data type constraints.\nAxiom: {'subClassOf': ['DaySummary'], 'propertyRestrictions': ['[physicalHygiene some owl:Thing]', '[numberOfSocialInteractions exactly 1 xsd:int]', '[numberOfSocialInteractions only xsd:int]', '[stressLevel only rdfs:Literal]', '[involvementInDiscussion some owl:Thing]', '[stressLevel exactly 1]']}\nGenerated CQs:", "output": "Is it required that each MoodSummary instance is associated with exactly one stressLevel? | Can a MoodSummary have more or fewer than one value for the property stressLevel? | Does the ontology restrict MoodSummary to have a single, unique stressLevel per instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SleepSummary\nDescription: SleepSummary is defined as a subclass of DaySummary, representing a summary of sleep-related metrics associated with a particular day. Each SleepSummary instance is required to have exactly one value for the following properties: totalDurationOfNaps (xsd:int), sleepBedTime (xsd:dateTime), duration (xsd:int), sleepEfficiency (xsd:double), sleepMovementIndex (xsd:double), numberOfNaps (xsd:int), numberOfAwakenings (xsd:int), wakeUpTime (xsd:dateTime), lightLevel (xsd:string), sleepTime (xsd:dateTime), sleepLatency (xsd:int), and numberOfArousals (xsd:int). Additionally, each property is restricted to its specified datatype, such as integers for counts and durations, doubles for efficiency and movement index, strings for light level, and dateTime for time-related events. This formalization ensures a consistent and complete record of sleep characteristics for each instance.\nAxiom: {'subClassOf': ['DaySummary'], 'propertyRestrictions': ['[totalDurationOfNaps exactly 1 xsd:int]', '[sleepBedTime exactly 1 xsd:dateTime]', '[duration only xsd:int]', '[sleepEfficiency exactly 1 xsd:double]', '[sleepMovementIndex only xsd:double]', '[duration exactly 1 xsd:int]', '[sleepMovementIndex exactly 1 xsd:double]', '[numberOfNaps only xsd:int]', '[totalDurationOfNaps only xsd:int]', '[numberOfNaps exactly 1 xsd:int]', '[numberOfArousals only xsd:int]', '[numberOfAwakenings exactly 1 xsd:int]', '[wakeUpTime only xsd:dateTime]', '[numberOfBedExits only xsd:int]', '[lightLevel only xsd:string]', '[sleepTime exactly 1 xsd:dateTime]', '[sleepBedTime only xsd:dateTime]', '[numberOfAwakenings only xsd:int]', '[lightLevel exactly 1 xsd:string]', '[sleepLatency exactly 1 xsd:int]', '[sleepEfficiency only xsd:double]', '[sleepLatency only xsd:int]', '[numberOfArousals exactly 1 xsd:int]', '[sleepTime only xsd:dateTime]', '[wakeUpTime exactly 1 xsd:dateTime]', '[numberOfBedExits exactly 1 xsd:int]']}\nGenerated CQs:", "output": "Is it required that a SleepSummary must have exactly one value for the property numberOfBedExits? | Can a SleepSummary record more or fewer than one numberOfBedExits, or must it always be exactly one? | Does every instance of SleepSummary necessarily include a single numberOfBedExits value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SocialSummary\nDescription: SocialSummary is defined as a subclass of DaySummary that records an individual’s daily social activities with specific constraints. Each SocialSummary must have exactly one integer-valued numberOfSocialInteractions, one integer-valued numberOfFaceToFaceConversations, one integer-valued numberOfPhoneConversations, and one integer-valued numberOfCommunicativeAttempts. All these properties are restricted to integer values (xsd:int), ensuring data consistency and precise quantification of daily social behaviors.\nAxiom: {'subClassOf': ['DaySummary'], 'propertyRestrictions': ['[numberOfSocialInteractions only xsd:int]', '[numberOfFaceToFaceConversations only xsd:int]', '[numberOfPhoneConversations exactly 1 xsd:int]', '[numberOfCommunicativeAttempts exactly 1 xsd:int]', '[numberOfCommunicativeAttempts only xsd:int]', '[numberOfSocialInteractions exactly 1 xsd:int]', '[numberOfFaceToFaceConversations exactly 1 xsd:int]', '[numberOfPhoneConversations only xsd:int]']}\nGenerated CQs:", "output": "Is every instance of SocialSummary required to have the numberOfPhoneConversations property assigned only values of type integer? | Can the property numberOfPhoneConversations for SocialSummary ever be a value other than an integer? | Does the SocialSummary class restrict numberOfPhoneConversations exclusively to integer values? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: EatingSummary\nDescription: EatingSummary is defined as a subclass of ADLSummary. Individuals of this class have the following property constraints: any eatingLocation associated with an EatingSummary must refer only to instances of event:Place, and each EatingSummary must have exactly one eatingDuration, which is of type time:DurationDescription. This formalization ensures that each EatingSummary uniquely specifies the place and precisely one duration for the eating activity.\nAxiom: {'subClassOf': ['ADLSummary'], 'propertyRestrictions': ['[eatingLocation only event:Place]', '[eatingDuration exactly 1 time:DurationDescription]', '[eatingDuration only time:DurationDescription]', '[eatingLocation exactly 1 event:Place]']}\nGenerated CQs:", "output": "Is it mandatory for every EatingSummary to reference exactly one eatingLocation of type event:Place? | Can an EatingSummary ever refer to more than one or fewer than one eatingLocation? | Does each EatingSummary necessarily associate with a single event:Place as its eating location? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DaySummary\nDescription: DaySummary is a class characterized by having exactly one date (of type xsd:dateTime) and exactly one associated patient (of type event:Patient). Each instance of DaySummary is required to have at least one date value specified, ensuring a temporal context for the summary. This formalization enforces that a DaySummary always references a single patient and a single date.\nAxiom: {'propertyRestrictions': ['[date exactly 1 xsd:dateTime]', '[forPatient exactly 1 event:Patient]', '[date some xsd:dateTime]', '[forPatient some event:Patient]']}\nGenerated CQs:", "output": "Does every DaySummary necessarily reference at least one Patient via the forPatient property? | Is it required that any DaySummary instance be linked to a Patient through forPatient? | Can a DaySummary exist without being associated with a Patient by the forPatient relationship? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: eatingDuration\nDescription: The property \"eatingDuration\" has no explicitly defined characteristics or inverse property. Its domain is restricted to the class \"EatingSummary,\" indicating it describes aspects related to eating events. The property is a sub-property of \"time:hasDurationDescription,\" suggesting it inherits the semantics of specifying a duration. No explicit range is defined, leaving the range unspecific in this axiom.\nAxiom: {'characteristics': [], 'domain': [], 'range': ['None'], 'subPropertyOf': ['time:hasDurationDescription'], 'inverseOf': []}\nGenerated CQs:", "output": "Is there any class other than EatingSummary that can be the domain of 'eatingDuration'? | Can the property 'eatingDuration' be asserted for any entity that is not an EatingSummary? | What are the possible classes that 'eatingDuration' can have as its subject? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: sleepTime\nDescription: The property \"sleepTime\" has no specified characteristics, domain, or range restrictions. It does not have any super-properties or inverse properties defined. Based on its name, \"sleepTime\" likely represents the time or duration related to an entity's sleep, but further constraints or intended usage are not specified in the current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'sleepTime' does not have a defined range? | Can the property 'sleepTime' be assigned to any class, or should its domain be defined? | What can be the range of the property 'sleepTime'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: lightLevel\nDescription: The property \"lightLevel\" does not have explicitly defined characteristics, domain, range, super-properties, or inverse properties. No additional description or axiomatic restrictions are provided, suggesting its intended use is either unspecified or context-dependent within the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'lightLevel' take any subject, since its domain is undefined? | Is it correct that the 'lightLevel' property has no assigned domain? | Can 'lightLevel' have a range constraint besides being unspecified? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: sleepBedTime\nDescription: The property \"sleepBedTime\" has no defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely intended to represent the time at which an individual goes to bed for sleep, but no formal constraints or descriptions are provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of values can be the range of the property 'sleepBedTime'? | Can any entity be associated with the 'sleepBedTime' property regardless of its type? | What kinds of entities can be subjects of the 'sleepBedTime' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: numberOfArousals\nDescription: The property \"numberOfArousals\" has no explicitly defined characteristics, domain, or range restrictions, and is not specified as a sub-property or inverse of any other property. Based on its name, it is likely intended to represent the count or frequency of arousal events associated with an entity, but no formal constraints are provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Should 'numberOfArousals' be restricted to a specific class as its domain? | What can be the domain of the property 'numberOfArousals'? | Is it correct that the property 'numberOfArousals' does not specify any range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: numberOfCommunicativeAttempts\nDescription: The property \"numberOfCommunicativeAttempts\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it likely represents a quantitative value indicating how many times an entity attempts communication. No further semantic restrictions are specified by the axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'numberOfCommunicativeAttempts' be associated with subjects of any type, given the absence of a specified domain? | What entities can be used as the value for the property 'numberOfCommunicativeAttempts'? | Is it correct that the property 'numberOfCommunicativeAttempts' does not have a defined domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: numberOfNaps\nDescription: The property \"numberOfNaps\" has no explicitly defined characteristics, domain, or range constraints. It is not specified as a sub-property of any other property and does not have an inverse property. The intended use of this property may be to associate an entity with the number of naps it takes, but no formal restrictions are currently imposed.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What entities are permitted to be the value of the property 'numberOfNaps'? | What types of entities, if any, can be the subject of 'numberOfNaps'? | Is it correct that the property 'numberOfNaps' does not restrict its range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: strideLength\nDescription: The property \"strideLength\" has no explicitly defined characteristics, domain, or range restrictions, and is not specified as a sub-property or inverse of any other property. Its description and usage context should be clarified in the ontology, as no formal axioms currently constrain its application.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it valid for 'strideLength' to have no range defined? | Can 'strideLength' be used with subjects other than those in a specified class? | What possible entities can serve as the domain for the 'strideLength' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: sleepEfficiency\nDescription: The property \"sleepEfficiency\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. Its intended use is not further specified by axioms, indicating it may be used flexibly unless additional constraints are provided elsewhere in the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can entities outside of any specified class be associated as the value of 'sleepEfficiency'? | Can 'sleepEfficiency' relate to entities other than those with a defined domain? | What types of values can be assigned as the range of the property 'sleepEfficiency'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: numberOfFaceToFaceConversations\nDescription: The property \"numberOfFaceToFaceConversations\" has no explicitly defined characteristics, domain, or range restrictions, and is not specified as a subproperty or inverse of any other property. It is likely intended to represent the count of face-to-face conversations associated with an entity, but no further axiomatic constraints are provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that 'numberOfFaceToFaceConversations' has no specified range? | What potential classes or entities can be the domain of 'numberOfFaceToFaceConversations'? | Is 'numberOfFaceToFaceConversations' required to have a specific class as its domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: endTime\nDescription: The property \"endTime\" has no explicitly defined characteristics, domain, or range restrictions. It does not specify any super-properties or inverse properties. This suggests that \"endTime\" can be used flexibly to relate an entity to its corresponding end time, but the specific types of subjects and values are not constrained by the current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it valid for the property 'endTime' to have no specified range? | Is it correct that the property 'endTime' does not have a defined domain? | Can any resource, regardless of class, have an 'endTime' value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasValue\nDescription: The property \"hasValue\" has no specified domain, range, characteristics, or super-properties. It is not defined as an inverse of any other property. Based on the axiom, \"hasValue\" is a general-purpose property with unconstrained usage. Its intended meaning and constraints should be clarified within specific ontological contexts.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'hasValue' relate to any type of object as its value? | What kinds of entities can be the subject of the property 'hasValue'? | Is it correct that the property 'hasValue' does not have a specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: date\nDescription: The property \"date\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. This indicates that its intended usage and applicable types are not currently specified in the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'date range' does not have a specified domain? | What possible entities can act as the range for the property 'date range'? | Could the property 'date' be associated with subjects of any class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: numberOfSocialInteractions\nDescription: The property \"numberOfSocialInteractions\" has no explicitly defined characteristics, domain, or range constraints, and is not specified as a sub-property or inverse of any other property. This suggests it can be used flexibly to associate any subject and object, though its intended purpose is to represent the count or quantity of social interactions related to an entity.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'numberOfSocialInteractions' be associated with any particular type of value as its range? | What entities can act as the subject for the property 'numberOfSocialInteractions'? | Should the property 'numberOfSocialInteractions' be associated with any specific class as its domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: sleepMovementIndex\nDescription: The property \"sleepMovementIndex\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. Its use and meaning are unspecified in the ontology, as no descriptive information or axioms restrict or explain its application or value type.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it valid for 'sleepMovementIndex' to not specify a range? | Are there entities that should be explicitly in the range of 'sleepMovementIndex'? | What are the possible domains for the property 'sleepMovementIndex'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: walkSpeed\nDescription: The property \"walkSpeed\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely intended to represent the walking speed of an entity, but no formal constraints or further description are provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the 'walkSpeed' property take values of any type as its range? | What entities can serve as the range for the property 'walkSpeed'? | Is it correct that the property 'walkSpeed' does not specify a range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: forPatient\nDescription: The property \"forPatient\" has no explicitly defined domain, range, or characteristics. It does not specify any super-properties or inverse properties. Based on its name, it is intended to relate an entity or process to a patient, typically indicating that something is meant or designated for an individual receiving care.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'forPatient' have any value as its range? | What are the possible domain classes for the property 'forPatient'? | Is it correct that the property 'forPatient' does not specify any domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: accelerometerCountsPerMinute\nDescription: The property \"accelerometerCountsPerMinute\" has no specified domain, range, characteristics, super-properties, or inverse properties. It is designed to represent the number of counts detected by an accelerometer per minute but is not restricted to any particular subject or value type by current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of entities can be subjects of the 'accelerometerCountsPerMinute' property? | Is the property 'accelerometerCountsPerMinute' restricted to any particular domain? | Is it accurate that 'accelerometerCountsPerMinute' has no assigned domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: physicalHygiene\nDescription: The property \"physicalHygiene\" has no explicitly defined characteristics, domain, or range restrictions, and is not specified as a sub-property or inverse of any other property. Its usage and scope are not further restricted by current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'physicalHygiene' relate to instances of any class, or should its range be defined? | Can 'physicalHygiene' relate to entities of any type as its subject? | What can be the range of the property 'physicalHygiene'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: possibleContributingFactor\nDescription: The property \"possibleContributingFactor\" has no explicitly defined characteristics, domain, or range restrictions, and is not specified as a sub-property of any other property. No inverse property is defined. This property is intended to relate entities to possible factors that may contribute to a particular situation or event, but its usage is not restricted to specific classes or value types.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that 'possibleContributingFactor' does not specify a domain? | Are there any restrictions on what can be the range of 'possibleContributingFactor'? | What entities can serve as the domain for the property 'possibleContributingFactor'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: distanceTravelled\nDescription: The property \"distanceTravelled\" has no specified characteristics, domain, or range restrictions. It is not defined as a sub-property of any other property and has no declared inverse property. Based on its name, it is likely intended to represent the distance an entity has moved or covered, but no formal constraints are currently specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'distanceTravelled' does not have a specified range? | What possible types of values can serve as the range for 'distanceTravelled'? | What kinds of entities can serve as the subject for the property 'distanceTravelled'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:hasBeginning\nDescription: The property \"time:hasBeginning\" has no explicitly defined characteristics, domain, or range constraints, nor does it specify any super-properties or inverse properties. Based on its name, it is likely intended to relate a temporal entity to its starting point or beginning, but no formal axioms restrict its usage.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What entities can serve as the domain for the property 'time:hasBeginning'? | Can the property 'time:hasBeginning' be associated with subjects of any type? | Can 'time:hasBeginning' have a range other than what is currently defined? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: totalDurationOfNaps\nDescription: The property \"totalDurationOfNaps\" currently has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. Based on its name, it is intended to represent the total duration of naps associated with an entity. However, without further axioms, its precise usage within the ontology remains unspecified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it valid for the property 'totalDurationOfNaps' to have no specified range? | What entities can serve as the domain for the property 'totalDurationOfNaps'? | Should 'totalDurationOfNaps' be restricted to values of a certain datatype or class as its range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: sleepLatency\nDescription: The property \"sleepLatency\" has no defined domain, range, or formal characteristics, and lacks specification of super-properties or an inverse property. Its formal usage and intended meaning must be inferred from its name, which typically refers to the duration or interval between attempting to sleep and the onset of sleep. No additional restrictions or relationships are provided in the current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it accurate that the property 'sleepLatency' does not have a defined domain? | Is it correct that the property 'sleepLatency' does not have a defined range? | Are there any constraints on the range of 'sleepLatency', or can it be associated with any type of value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: numberOfPhoneConversations\nDescription: The property \"numberOfPhoneConversations\" has no explicitly defined characteristics, domain, or range restrictions, and is not declared as a sub-property or inverse of any other property. Its intended use is to represent the number of telephone conversations associated with an entity, but its application is unconstrained in the current specification.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'numberOfPhoneConversations' be associated with entities of any type as its range? | What types of values, if any, can be used as the range for the property 'numberOfPhoneConversations'? | Is it possible for 'numberOfPhoneConversations' to have a defined domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: time:hasDurationDescription\nDescription: The property \"time:hasDurationDescription\" has no specified domain, range, characteristics, super-properties, or inverse properties. It is used to associate entities with their duration descriptions, but no additional constraints or relationships are imposed by the current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of entities can be the subject of the property 'time:hasDurationDescription'? | Could 'time:hasDurationDescription' be used with values of any type, given it currently lacks a defined range? | What entities or data types can serve as the range for 'time:hasDurationDescription'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: duration\nDescription: The property \"duration\" has no explicitly defined domain, range, characteristics, super-properties, or inverse property. It is intended to represent the concept of duration, but no further constraints or relationships are specified by its current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'duration' refer to entities of any type as its range? | Are there entities that can act as the subject of 'duration', given its domain is undefined? | What can be the domain of the property 'duration'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: numberOfBedExits\nDescription: The property \"numberOfBedExits\" has no explicitly defined characteristics, domain, or range, and is not specified as a sub-property or inverse of any other property. Based on its name, it likely represents the quantity of times a bed exit occurs in a given context, but further specification of its scope and value type is not provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What can be the range of the property 'numberOfBedExits'? | Can 'numberOfBedExits' be associated with entities of any type, not restricted to a specific class? | Is it correct that the property 'numberOfBedExits' has no range specified? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: involvementInDiscussion\nDescription: The property \"involvementInDiscussion\" has no specified characteristics, domain, range, super-properties, or inverse properties. It is intended to relate two entities in the context of participation or involvement in a discussion, but its usage is unconstrained by ontological axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'involvementInDiscussion' has no specified domain? | What types of entities can be the domain of the 'involvementInDiscussion' property? | Is it correct that the property involvementInDiscussion does not define any range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: numberOfAwakenings\nDescription: The property \"numberOfAwakenings\" has no defined domain, range, characteristics, super-properties, or inverse properties. It is intended to represent the number of times an awakening event occurs, but its usage is not currently constrained by axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it accurate that the property 'numberOfAwakenings' does not have a specified range? | Can 'numberOfAwakenings' be associated with any type of subject regardless of its class? | What are the possible ranges for the property 'numberOfAwakenings'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: heartRate\nDescription: The property \"heartRate\" has no specified domain, range, super-properties, or inverse properties, and lacks defined characteristics. Its intended use is to associate an entity with its heart rate, but no formal constraints on its usage are currently defined.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'heartRate' be used with any type of subject, or are there implicit constraints? | Is it correct that the property 'heartRate' does not specify any range? | Is it correct that the property 'heartRate' does not have a defined domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: stressLevel\nDescription: The property \"stressLevel\" has no defined domain or range restrictions, and no specified characteristics, super-properties, or inverse properties. This indicates that \"stressLevel\" can relate any subject to any object, with its precise usage intended to be determined by context or further specification.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of entities can be the subject of the property 'stressLevel'? | What types of values can be used as the range for the property 'stressLevel'? | Is it correct that 'stressLevel' does not have a defined domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: wakeUpTime\nDescription: The property \"wakeUpTime\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely intended to relate an entity to a time value indicating when waking up occurs, but no formal constraints or additional documentation are currently specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of values can be used as the range for the 'wakeUpTime' property? | Is it correct that the 'wakeUpTime' property does not have a defined range? | Is it correct that 'wakeUpTime' has no specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: startTime\nDescription: The property \"startTime\" has no specified domain or range restrictions and does not inherit from any super-property. It has no explicitly defined characteristics, nor is any inverse property specified. This property is intended to represent the beginning time of an event or process, though the exact usage context is unconstrained by current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'startTime' point to values other than those specified as its range? | What kinds of entities can serve as the range for the property 'startTime'? | Is it correct that the property 'startTime' does not have a defined range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: exerciseIntensity\nDescription: The property \"exerciseIntensity\" has no defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely intended to relate an entity to a measure or classification of physical activity intensity, but no formal constraints or description are specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What types of entities can serve as the domain for the property 'exerciseIntensity'? | Are there entities that could be valid ranges for 'exerciseIntensity'? | Can 'exerciseIntensity' be associated with subjects outside of any defined class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: eatingLocation\nDescription: The property \"eatingLocation\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. This indicates that \"eatingLocation\" can relate any individuals without specific type constraints, and its intended semantics should be determined by its usage context.\nAxiom: {'characteristics': [], 'domain': ['EatingSummary'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it possible for something other than an EatingSummary to have an eatingLocation? | Are there any instances of EatingSummary that do not have an eatingLocation? | What types of subjects are allowed to use the eatingLocation property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: exerciseStartTime\nDescription: The property \"exerciseStartTime\" has no explicitly defined characteristics, domain, or range restrictions. It is not specified as a sub-property of any other property, nor does it have an inverse property. This property can be used flexibly without ontological constraints on its usage.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['time:hasBeginning'], 'inverseOf': []}\nGenerated CQs:", "output": "Is exerciseStartTime considered a more specific form of time:hasBeginning? | Which properties are classified as subproperties of time:hasBeginning? | Does exerciseStartTime always entail the use of time:hasBeginning when describing an event? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: exerciseDuration\nDescription: The property \"exerciseDuration\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. This indicates that the property's usage is unrestricted by specific class or value constraints within the ontology.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['time:hasBeginning'], 'inverseOf': []}\nGenerated CQs:", "output": "Is every instance of the exerciseDuration property also an instance of time:hasBeginning? | Which properties are subproperties encompassed by time:hasBeginning in the ontology? | What superproperties does exerciseDuration have according to the property hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: highlight\nDescription: The property \"highlight\" has no explicitly defined characteristics, domain, super-properties, or inverse properties. Its range is restricted to boolean values (xsd:boolean), indicating it is used to denote a true or false status for a given subject.\nAxiom: {'characteristics': [], 'domain': ['event:Event'], 'range': ['xsd:boolean'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is there any entity other than an Event that can be the subject of 'highlight'? | What types of individuals may appear as the domain of the 'highlight' property? | Must the subject of 'highlight' always be an Event? "}
