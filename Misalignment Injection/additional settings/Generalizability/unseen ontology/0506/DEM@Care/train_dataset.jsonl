{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CarnivorousPlant\nDescription: CarnivorousPlant is defined as a subclass of plant whose members are characterized by possessing the ability to consume animals; specifically, each member must eat at least some animals. This distinguishes CarnivorousPlant from other plants by its unique adaptation for animal consumption.\nAxiom: {'subClassOf': ['plant'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Must every CarnivorousPlant have at least one instance of 'eats' relating to an animal? | Is it required for CarnivorousPlants to exhibit the 'eats' property with some animal? | Does the existence of a CarnivorousPlant imply that it consumes at least one animal through the 'eats' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phloem\nDescription: Phloem is defined as a subclass of PlantParts and is characterized by being a proper part of some Stem. This formalization specifies that every instance of Phloem must be a plant part that exists as a structural component within a stem, reflecting its biological role in the transport system of plants.\nAxiom: {'subClassOf': ['PlantParts'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is it required that every instance of Phloem is a proper part of some Stem? | Is the relationship ‘is-proper-part-of’ between Phloem and Stem necessarily present for each Phloem? | Can there exist a Phloem that is not a proper part of any Stem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: leaf\nDescription: leaf is defined as a subclass of PlantParts and is characterized by the property restriction that each leaf must be part of either a twig or a branch. This formalization specifies that leaves are plant structures specifically found as components of twigs or branches, aligning with the description that leaves are parts of branches.\nAxiom: {'subClassOf': ['PlantParts'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Must a leaf always be part of a twig or a branch according to the ontology? | Can a leaf exist without being part of either a twig or a branch? | Are twigs and branches the only structures to which a leaf may belong as a part? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: carnivore\nDescription: carnivore is defined as a subclass of animal and is disjoint with herbivore, meaning that no individual can be both a carnivore and a herbivore. It is equivalent to the class of animals whose diet consists exclusively of other animals or of parts derived from animals (i.e., they eat only animals or only things that are part of animals). This formalization captures the precise biological definition: carnivores are exactly those animals that eat only animals or animal parts.\nAxiom: {'subClassOf': ['animal'], 'disjointWith': [], 'equivalentClass': ['([eats only animal] or [eats only [is-part-of some animal]])']}\nGenerated CQs:", "output": "What logical separation is specified between carnivore and herbivore within the ontology? | Is it permissible for an entity to be classified as both a carnivore and a herbivore? | Which classes are formally identified as disjoint with carnivore? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: lion\nDescription: lion is defined as a subclass of animal, with dietary restrictions stating that it eats only herbivores, and among its possible prey, it is known to eat impalas. This means any individual classified as a lion is exclusively a consumer of herbivores, consistent with its role as a carnivorous predator in ecological systems. The description affirms that lions are animals that restrict their diet strictly to herbivorous species.\nAxiom: {'subClassOf': ['animal'], 'propertyRestrictions': ['[eats some Impala]']}\nGenerated CQs:", "output": "Is every entity that a lion eats required to be a herbivore within the ontology? | Can a lion consume anything other than a herbivore according to the defined restrictions? | Does the ontology restrict lion's diet exclusively to entities classified as herbivores? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: animal\nDescription: animal is defined as a class that is explicitly disjoint with plant, meaning no individual can simultaneously be both an animal and a plant. This formalization ensures clear separation between instances of animals and plants within the ontology.\nAxiom: {'disjointWith': []}\nGenerated CQs:", "output": "What constraints prevent an entity from being both an animal and a plant in the ontology? | Is it allowed for an organism to be classified simultaneously as animal and plant within AfricanWildlifeOntology1? | Which other classes, aside from animal, are specified as disjoint with plant in AfricanWildlifeOntology1? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Berry\nDescription: Berry is defined as a subclass of FruitingBody, meaning every berry is a type of fruiting body. The class Berry encompasses all fruit structures that meet this ontological classification; no further restrictions or distinguishing characteristics are specified beyond their membership in the FruitingBody category.\nAxiom: {'subClassOf': ['FruitingBody']}\nGenerated CQs:", "output": "Which broader categories encompass Berry? | What types are included under FruitingBody, such as Berry? | Is Berry classified as a specialized kind of FruitingBody? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Apple\nDescription: Apple is defined as a subclass of FruitingBody, indicating that every apple is a specific type of fruiting body. This classification positions apple within the broader category of organisms or structures that produce fruit, consistent with its botanical role as the edible fruit of certain plants.\nAxiom: {'subClassOf': ['FruitingBody']}\nGenerated CQs:", "output": "Is Apple categorized under FruitingBody in the ontology? | What higher-level classes does Apple belong to according to the ontology? | Which entities are specified as subclasses of FruitingBody, such as Apple? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Grass\nDescription: Grass is defined as a subclass of plant, meaning all instances of grass are considered plants. No additional disjointness or property restrictions are specified, so grass inherits all general properties of the plant class. This class encompasses all plant entities characterized as grass.\nAxiom: {'subClassOf': ['plant']}\nGenerated CQs:", "output": "Which types of plant include Grass as a specialization? | Is every Grass instance also categorized under plant in the ontology? | What higher-level classes encompass Grass according to the ontology structure? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tree\nDescription: tree is defined as a subclass of plant, specifically within the plant kingdom. Trees are characterized as a distinct type of plant, aligning taxonomically as members of the broader plant group.\nAxiom: {'subClassOf': ['plant']}\nGenerated CQs:", "output": "Is tree a specialized type of plant? | Which broader classes encompass tree within the ontology? | What are all the subclasses classified under plant, specifically including tree? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Elephant\nDescription: Elephant is defined as a subclass of herbivore, indicating that all elephants are herbivorous animals. This formalization ensures that any individual classified as an elephant is necessarily a herbivore. If further biological or behavioral characteristics are provided, they can be incorporated to enhance the class description.\nAxiom: {'subClassOf': ['herbivore']}\nGenerated CQs:", "output": "Which animal classes are direct specializations of herbivore? | Is Elephant categorized under the class herbivore? | What broader groups encompass Elephant within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FruitingBody\nDescription: FruitingBody is defined as a subclass of PlantParts, meaning it represents a specific type of plant part within the ontology. This class is intended to capture plant structures specialized for producing and containing reproductive structures, typically involved in fruit or spore formation.\nAxiom: {'subClassOf': ['PlantParts']}\nGenerated CQs:", "output": "What are the specific types categorized within PlantParts, such as FruitingBody? | Which more general groups encompass FruitingBody in the ontology? | Does FruitingBody fall under the broader classification of PlantParts? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Root\nDescription: Root is defined as a subclass of PlantParts, indicating that every root is considered a type of plant part. This classification situates roots within the broader structural components of plants.\nAxiom: {'subClassOf': ['PlantParts']}\nGenerated CQs:", "output": "Does Root belong to the class hierarchy defined by PlantParts? | Which subclasses are included under PlantParts, specifically referencing Root? | Which broader classes encompass Root within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Stem\nDescription: Stem is defined as a subclass of PlantParts, indicating that every stem is categorized as a type of plant part. No further property restrictions or disjointness axioms are specified, so this class represents the general concept of a stem within the broader hierarchy of plant anatomical structures.\nAxiom: {'subClassOf': ['PlantParts']}\nGenerated CQs:", "output": "Which more general categories encompass Stem? | What plant part subclasses are present within PlantParts, such as Stem? | Is Stem classified as a type of PlantParts? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Twig\nDescription: Twig is formally defined as a subclass of PlantParts, indicating that every twig is considered a part of a plant. This classification ensures that only plant part entities can be recognized as twigs within the ontology.\nAxiom: {'subClassOf': ['PlantParts']}\nGenerated CQs:", "output": "To which higher-level classifications does Twig conceptually belong? | Is Twig categorized under the broader group of PlantParts? | Which entities are classified as more specific forms of PlantParts, such as Twig? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Impala\nDescription: Impala is defined as a subclass of animal. It is an African antelope, as described in external resources such as Wikipedia. This classification indicates that all individuals of the class impala are animals, specifically belonging to the group of antelopes native to Africa.\nAxiom: {'subClassOf': ['animal']}\nGenerated CQs:", "output": "What are the subclasses found under animal, and is Impala among them? | Which broader classes include Impala as an instance or subclass? | Is Impala classified as a type of animal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RockDassie\nDescription: RockDassie is defined as a subclass of animal. Members of this class are characterized by their diet, which mainly consists of grasses and broad-leafed plants. Further information about RockDassie can be found at http://en.wikipedia.org/wiki/Rock_Hyrax.\nAxiom: {'subClassOf': ['animal']}\nGenerated CQs:", "output": "To which higher-level groups does RockDassie pertain? | What instances fall under the category animal, specifically including RockDassie? | Is animal a broader classification that encompasses RockDassie? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Parsnip\nDescription: Parsnip is defined as a subclass of Root, which means every parsnip is formally classified as a type of root. This class inherits all characteristics of roots, establishing parsnip as a specific instance within the broader root category.\nAxiom: {'subClassOf': ['Root']}\nGenerated CQs:", "output": "What broader classes encompass Parsnip within the ontology? | Which entities fall under the subclassification of Root? | Is Parsnip classified as a type of Root? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Palmtree\nDescription: Palmtree is defined as a subclass of plant and is explicitly disjoint with tree, ensuring that no individual can be both a palmtree and a tree. Members of this class are characterized by the property restriction that they do not possess branches (i.e., each palmtree has no part that is a branch). This formalization distinguishes palmtrees from other trees and plants in the ontology, emphasizing their unique morphological trait of being branchless.\nAxiom: {'subClassOf': ['plant'], 'disjointWith': ['tree'], 'propertyRestrictions': ['[has-part only not branch]']}\nGenerated CQs:", "output": "Is it necessary that a Palmtree contains some parts that are not branches? | Can a Palmtree exist without having any part that is a branch? | Are there parts of a Palmtree that must be from categories other than branches? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: branch\nDescription: branch is defined as a subclass of PlantParts and must be part of some tree, according to the property restriction. The class is described as representing branches, which are components of trees. This formalization ensures that any individual classified as a branch is recognized as a type of plant part specifically serving as a structural component of a tree.\nAxiom: {'subClassOf': ['PlantParts'], 'propertyRestrictions': ['[is-part-of only tree]']}\nGenerated CQs:", "output": "Is it necessary for a branch to have the property 'is-part-of' with at least one tree? | Does every branch participate in the 'is-part-of' relationship with a tree in the ontology? | Must a branch always be included as part of a tree according to the property restriction? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Omnivore\nDescription: Omnivore is defined as a subclass of animal, disjoint with both carnivore and herbivore, meaning no individual can be both an omnivore and either a carnivore or herbivore. An individual is classified as an omnivore if it eats some animal matter, some plant matter, and also consumes something that is part of an animal or a plant. This formalization captures the core characteristic of omnivores: they are animals that include both animal- and plant-based items in their diet, and their consumption encompasses components from both kingdoms.\nAxiom: {'subClassOf': ['animal'], 'disjointWith': ['carnivore', 'herbivore'], 'equivalentClass': ['([eats only animal] and [eats only plant] and [eats some ([is-part-of only animal] or [is-part-of only plant])])']}\nGenerated CQs:", "output": "Is every Omnivore required to eat at least one animal, one plant, and something that is part of an animal or part of a plant? | Is Omnivore equivalent to the intersection of entities that eat animals, eat plants, and eat parts of either animals or plants? | Must an entity eat both animals and plants, as well as something that is a part of an animal or a part of a plant, to be classified as an Omnivore? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: giraffe\nDescription: giraffe is defined as a subclass of animal, disjoint with lion—meaning an individual cannot be both a giraffe and a lion. Members of this class are herbivores that eat exclusively leaves or twigs, as reflected by the restriction that giraffes only consume these plant parts. This ensures that any individual identified as a giraffe must have a diet limited to leaves and twigs.\nAxiom: {'subClassOf': ['animal'], 'disjointWith': ['lion'], 'propertyRestrictions': ['[eats some (Twig or leaf)]']}\nGenerated CQs:", "output": "Is a giraffe limited to eating only twigs or leaves, excluding all other food types? | Does the ontology constrain giraffes so that any food they consume must be either a twig or a leaf? | Can a giraffe, according to the ontology, have an 'eats' relation to anything other than twigs or leaves? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tasty-plant\nDescription: tasty-plant is defined as a subclass of plant, indicating that every tasty-plant is a type of plant. There are no additional constraints or distinguishing properties specified by the axiom beyond its membership in the broader plant class.\nAxiom: {'subClassOf': ['plant', '([eaten-by some carnivore] and [eaten-by some herbivore])']}\nGenerated CQs:", "output": "Which kinds of organisms eat tasty-plants, specifically distinguishing between carnivores and herbivores? | Is tasty-plant classified under things that are consumed by both carnivores and herbivores? | What plant subclasses are eaten by both members of carnivorous and herbivorous species? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Xylem\nDescription: Xylem is defined as a subclass of PlantParts, meaning every xylem is necessarily a part of a plant. There are currently no additional property restrictions specified for xylem in this definition.\nAxiom: {'subClassOf': ['PlantParts'], 'propertyRestrictions': ['[is-proper-part-of some Stem]']}\nGenerated CQs:", "output": "Is it necessary for Xylem to be a proper part of some Stem? | Can Xylem exist without being a proper part of any Stem? | Does every instance of Xylem participate as a proper part in at least one Stem? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Warthog\nDescription: Warthog is defined as a subclass of animal, indicating that every warthog is an animal and inherits all general characteristics of animals. No further distinguishing properties, relationships, or restrictions are specified for this class.\nAxiom: {'subClassOf': ['animal', '([eats some FruitingBody] and [eats some Grass] and [eats some Root] and [eats some animal])']}\nGenerated CQs:", "output": "Which kinds of food items are necessary to classify an animal as a Warthog in the ontology? | Is an individual that eats fruiting bodies, grass, roots, and animals a type of Warthog? | What dietary requirements define the Warthog subclass within the AfricanWildlifeOntology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: herbivore\nDescription: herbivore is defined as a subclass of animal. This means every herbivore is an animal, but no additional axioms such as equivalent classes or property restrictions are specified for this class. The description is limited to its taxonomic placement within animals, with no further formal constraints described.\nAxiom: {'subClassOf': ['animal'], 'equivalentClass': ['([eats only plant] or [eats only [is-part-of some plant]])']}\nGenerated CQs:", "output": "Is every herbivore in the ontology necessarily restricted to eating only plants or only entities that are part of a plant? | Is a herbivore defined as a class whose diet consists exclusively of either plants or things that include some part of a plant? | Is herbivore logically equivalent to the union of animals that eat only plants and those that eat only things with at least one part being a plant? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PlantParts\nDescription: PlantParts is a subclass of owl:Thing, representing a general category for all entities considered parts of plants. There are no additional property restrictions or specific characteristics defined for this class in the current axiomatization.\nAxiom: {'subClassOf': ['owl:Thing'], 'propertyRestrictions': ['[is-proper-part-of some plant]']}\nGenerated CQs:", "output": "Is every instance of PlantParts required to be a proper part of some plant? | Can a PlantPart exist without being a proper part of any plant? | Does the ontology allow for PlantParts that are not associated by the 'is-proper-part-of' property to a plant? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is-proper-part-of\nDescription: The property \"is-proper-part-of\" is an irreflexive property, meaning no entity can be a proper part of itself. It does not have explicitly defined domain or range restrictions. This property is a subproperty of \"is-part-of,\" indicating a more specific parthood relation where the part is strictly contained within another entity. No inverse property is specified.\nAxiom: {'characteristics': ['Irreflexive'], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is every instance of is-proper-part-of also an instance of is-part-of? | Which properties are defined as subproperties of is-part-of? | What superproperties does is-proper-part-of possess within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: eaten-by\nDescription: The property \"eaten-by\" has no explicit domain, range, characteristics, or super-properties defined. It is specified as the inverse of the property \"eats,\" indicating that if entity A is eaten by entity B, then entity B eats entity A. No further semantic constraints are applied.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What is the logical connection between ‘eaten-by’ and ‘eats’ in the ontology? | If animal A is eaten by animal B, does the ontology entail that B eats A? | Which property is recognized as the inverse of ‘eaten-by’ in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has-part\nDescription: The property \"has-part\" is defined as transitive, allowing relationships to propagate along chains of connections. It has no explicitly defined domain or range restrictions, indicating it can relate any entities. \"has-part\" has \"is-part-of\" as its inverse property, but it is not specified as a sub-property of any other property. This property is typically used to express part-whole relationships between entities.\nAxiom: {'characteristics': ['Transitive'], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "How are the properties ‘has-part’ and ‘is-part-of’ related in the ontology? | If entity A has-part entity B, does it follow that entity B is-part-of entity A? | Which property acts as the inverse of ‘has-part’ in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is-part-of\nDescription: The property \"is-part-of\" is defined as both transitive and reflexive, meaning that if an entity is part of another, and that entity is part of a third, then the first is part of the third, and every entity is considered part of itself. There are no explicit domain or range restrictions, no super-properties, and no defined inverse property. This property is typically used to represent part-whole relationships within the ontology.\nAxiom: {'characteristics': ['Transitive', 'Reflexive'], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it entailed that for any individual, the is-part-of property connects the individual to itself? | Does the is-part-of relation infer indirect part-whole associations through its transitivity? | Can 'is-part-of' be associated with entities of any type as its subject? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: eats\nDescription: The property \"eats\" has no specified characteristics, domain, range, super-properties, or inverse properties. It is an unconstrained property, allowing broad use without restrictions on the types of subjects or objects it can relate.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['(animal or plant or [is-part-of some animal] or [is-part-of some plant])'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'eats' relate to objects that are not an animal, plant, or a part of either within the AfricanWildlifeOntology1 domain? | Is there any entity within AfricanWildlifeOntology1 that is not allowed as the range of the property 'eats'? | What types of entities can serve as the range for the 'eats' property in AfricanWildlifeOntology1? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: return-parameter specification\nDescription: return-parameter specification is a subclass of specification, characterized by having at least one member that is a datatype and at least one associated identifier that qualifies as a parameter identifier. This formalization ensures that every return-parameter specification includes a datatype value and a means of uniquely identifying the parameter, which is essential for describing properties of parameters returned by functions or methods in structured data or APIs.\nAxiom: {'subClassOf': ['specification'], 'propertyRestrictions': ['[has_identifier some parameter identifier]']}\nGenerated CQs:", "output": "Is every return-parameter specification required to have at least one member of type datatype via the has_member property? | Can a return-parameter specification exist without being associated with any datatype through the has_member relation? | Does the ontology allow a return-parameter specification to have has_member only for datatype instances? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: excluding subtype generator\nDescription: excluding subtype generator is defined as a subclass of subtype generator, with the added restriction that it must have at least one member specified by the has_member property, where the member is of the type select-list. This means every instance of excluding subtype generator must be associated with at least one select-list through the has_member property, providing a mechanism for selecting or excluding specific subtypes via a list-based criteria.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some select-list]']}\nGenerated CQs:", "output": "Does excluding subtype generator fall under the category of subtype generator? | What specific subclasses are identified within subtype generator, apart from excluding subtype generator? | Which broader types does excluding subtype generator pertain to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: selection subtype generator\nDescription: selection subtype generator is defined as a subclass of subtype generator. Any instance of this class must have at least one member that is a select-list, enforced by the property restriction [has_member some select-list]. This ensures that selection subtype generators are specifically characterized by their association with select-list members, distinguishing them from other subtype generators.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some select-list]']}\nGenerated CQs:", "output": "Does selection subtype generator fall under the broader category of subtype generator? | What specific types are encompassed by subtype generator, including selection subtype generator? | Which higher-level categories include selection subtype generator as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled graph datatype\nDescription: labeled graph datatype is defined as a subclass of defined datatype, with the additional restriction that it must have at least one member produced by a directed labeled graph datatype generator. This means every labeled graph datatype is necessarily structured to include elements generated from a mechanism or process that produces directed labeled graph datatypes, distinguishing it from other defined datatypes that may lack this property.\nAxiom: {'subClassOf': ['defined datatype'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Must every labeled graph with propertyRestrictions have at least one has_member relation to a directed labeled graph datatype generator? | Is it required for any labeled graph with propertyRestrictions to be associated, via has_member, with a directed labeled graph datatype generator? | Can a labeled graph with propertyRestrictions exist without having the has_member property relating it to a directed labeled graph datatype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bag generator\nDescription: bag generator is defined as a subclass of homogenous unordered aggregate generator with variable size and is explicitly disjoint with set generator, indicating that an individual cannot be both a bag generator and a set generator. Members of this class are characterized by generating collections where items may have non-unique values (duplicates are permitted) and the way elements are accessed is implementation dependent. This ensures that bag generators support variable-sized, unordered aggregates allowing repeated elements, with element access properties not universally specified.\nAxiom: {'subClassOf': ['homogenous unordered aggregate generator with variable size'], 'disjointWith': [], 'propertyRestrictions': ['[has_quality some non-unique values]', '[has_quality some implementation dependent access]']}\nGenerated CQs:", "output": "How does the ontology differentiate between bag generators and set generators? | Is there any instance that can simultaneously belong to both bag generator and set generator classes? | Which classes are explicitly stated as disjoint with set generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record generator\nDescription: record generator is defined as a subclass of heterogenous aggregate generator and is explicitly disjoint with table datatype, ensuring that an individual cannot be both a record generator and a table datatype. Members of the record generator class must possess several qualities: they have a fixed size, are one-dimensional, form an unordered aggregate, support key access, and can contain non-unique values. This formalization captures the characteristic structure of a record generator, emphasizing its fixed, one-dimensional, unordered nature with keyed access and allowance for repeated values.\nAxiom: {'subClassOf': ['heterogenous aggregate generator'], 'disjointWith': [], 'propertyRestrictions': ['[has_quality some fixed size]', '[has_quality some one dimensional]', '[has_quality some unordered aggregate]', '[has_quality some key access]', '[has_quality some non-unique values]']}\nGenerated CQs:", "output": "What logical separation exists between the record generator and table datatype classes in the ontology? | Can an entity simultaneously be classified as both a record generator and a table datatype? | Which ontology classes are declared as disjoint with the table datatype class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous unordered aggregate generator with variable size\nDescription: homogenous unordered aggregate generator with variable size is a subclass of homogenous aggregate generator with variable size and is defined as being equivalent to either a bag generator or a set generator. Members of this class are characterized by having the quality of generating unordered aggregates, reflecting that the elements produced do not have intrinsic order. This ontology definition ensures that any homogenous unordered aggregate generator with variable size behaves as a variable-sized aggregate generator whose items are homogeneous and unordered, aligning with the behaviors of both bag generators and set generators.\nAxiom: {'subClassOf': [], 'equivalentClass': ['(bag generator or set generator)'], 'propertyRestrictions': ['[has_quality some unordered aggregate]']}\nGenerated CQs:", "output": "Does a homogenous unordered aggregate generator with variable size constitute a specific kind of homogenous aggregate generator with variable size? | Which aggregate generators with variable size fall under the category of homogenous aggregate generator with variable size, including homogenous unordered aggregate generator with variable size? | What broader aggregate generator classes encompass homogenous unordered aggregate generator with variable size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: table datatype\nDescription: table datatype is defined as a subclass of heterogenous aggregate datatype, and is explicitly disjoint with record (tuple) datatype, indicating that no instance can simultaneously belong to both classes. Members of the table datatype class are characterized by the following: they always have at least one table generator and a field-list as members; possess the qualities of being exact and non-numeric; and support several specific operations, including IsEmpty, MapToBag, Insert, Select, MapToTable, Delete, Fetch, and Serialize. This formalization distinguishes table datatype from other aggregate types, ensuring that it is uniquely identified by its supported operations, membership requirements, and data qualities.\nAxiom: {'subClassOf': ['heterogenous aggregate datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_member some table generator]', '[has_operation some IsEmpty:table]', '[has_operation some MapToBag:table]', '[has_operation some Insert:table]', '[has_operation some Select:table]', '[has_operation some MapToTable:table]', '[has_member some field-list]', '[has_quality some exact]', '[has_operation some Delete:table]', '[has_operation some Fetch:table]', '[has_operation some Serialize:table]', '[has_quality some non-numeric]']}\nGenerated CQs:", "output": "How is the relationship between table datatype and record (tuple) datatype defined in the ontology? | Is there any datatype that qualifies as both table datatype and record (tuple) datatype? | Which datatypes are explicitly specified as incompatible with record (tuple) datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: enumerated-value identifier\nDescription: enumerated-value identifier is a subclass of identifier, characterized by the restriction that its values must be associated (through the has-value property) with at least one literal value (rdfs:Literal). This formalization ensures that every enumerated-value identifier refers explicitly to a concrete literal value, distinguishing it from other identifiers that may not be directly tied to literal data.\nAxiom: {'subClassOf': ['identifier'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Are all enumerated-value identifiers required to have at least one property restriction with a value of type rdfs:Literal? | Is it necessary for every enumerated-value identifier to be associated with a property restriction whose value is a literal? | Does the presence of a property restriction with an rdfs:Literal value characterize all enumerated-value identifiers? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate-imposed identifier uniqueness\nDescription: aggregate-imposed identifier uniqueness is a subclass of aggregate generator property, and is explicitly disjoint with classes such as homogenity, aggregate size, uniqueness, component mandatoriness, structurness, recursiveness, and access type, ensuring mutual exclusivity with these notions. It is defined equivalently as a situation where an identifier may or may not be unique (identifier not unique or identifier unique), capturing precisely those cases where the uniqueness of identifiers is determined at the aggregate level rather than being strictly enforced or absent.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['homogenity', 'agregate size', 'uniqueness', 'component mandatoriness', 'structurness', 'recursiveness'], 'equivalentClass': ['(identifier not unique or identifier unique)']}\nGenerated CQs:", "output": "What is the formal differentiation between aggregate-imposed identifier uniqueness and access type in the ontology? | Is it allowable for an entity to be classified as both aggregate-imposed identifier uniqueness and access type? | Which other classes in the ontology are specified to be incompatible with access type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: agregate size\nDescription: aggregate size is a subclass of aggregate generator property and is formally equivalent to either fixed size or variable size, indicating that it refers to the characteristic of an aggregate having a specified or changeable quantity of components. It is explicitly disjoint with uniqueness, component mandatoriness, structurness, recursiveness, and access type, ensuring that no instance can simultaneously belong to these classes. This class is used to describe whether an aggregate maintains a constant number of elements or allows its size to vary.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['uniqueness', 'component mandatoriness', 'recursiveness', 'access type'], 'equivalentClass': ['(fixed size or variable size)']}\nGenerated CQs:", "output": "What logical separation is defined between agregate size and structurness in the ontology? | Is there any entity that can simultaneously possess agregate size and structurness? | Which classes within the ontology are explicitly incompatible with agregate size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: component mandatoriness\nDescription: component mandatoriness is defined as a subclass of aggregate generator property and is explicitly disjoint with structurness, recursiveness, and access type, ensuring no overlap among individuals of these classes. It is equivalent to the union of component mandatory and component non-mandatory, meaning every instance of component mandatoriness must be either component mandatory or component non-mandatory. This class categorizes aggregate generator properties by specifying whether a component is mandatory or not.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['recursiveness', 'access type'], 'equivalentClass': ['(component mandatory or component non-mandatory)']}\nGenerated CQs:", "output": "How does the ontology distinguish between component mandatoriness and structurness? | Is there any entity that can simultaneously possess both component mandatoriness and structurness? | Which concepts are defined as mutually exclusive with structurness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: recursiveness\nDescription: recursiveness is defined as a subclass of aggregate generator property, indicating it is a specific kind of property related to aggregate generators. It is explicitly disjoint with access type, meaning no entity can simultaneously be both an access type and exhibit recursiveness. Additionally, recursiveness is formally equivalent to either recursive or non-recursive, fully covering both possibilities as mutually exclusive characteristics within this context.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': [], 'equivalentClass': ['(recursive or non-recursive)']}\nGenerated CQs:", "output": "What differentiates recursiveness from access type according to the ontology? | Is it permissible for an entity to be classified as both recursiveness and access type? | Which ontology classes are shown as incompatible with access type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: generated datatype\nDescription: generated datatype is defined as a subclass of datatype and is explicitly disjoint with defined datatype, meaning no individual can be both a generated datatype and a defined datatype. Members of this class are further constrained by the property restriction that each generated datatype must have at least one member (has_member) that is a generated datatype generator. This formalization distinguishes generated datatypes from defined datatypes and ensures their association with specific generating mechanisms.\nAxiom: {'subClassOf': ['datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_member some generated datatype generator]']}\nGenerated CQs:", "output": "How does the ontology distinguish between generated datatype and defined datatype? | Is any entity allowed to be classified simultaneously as a generated datatype and a defined datatype? | Which datatypes are specified as being mutually exclusive with generated datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: alternative-type\nDescription: alternative-type is defined as a subclass of datatype role. Instances of this class must be the role of at least one datatype and must also be a member of some alternative component. This formalization ensures that alternative-type represents a specialized datatype role that is contextually linked both to specific datatypes and to alternative components.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[role_of some datatype]', '[is_member_of some alternative component]']}\nGenerated CQs:", "output": "Does alternative-type fall under the broader class of datatype role? | Which kinds of entities are recognized as subclasses of datatype role, and does that include alternative-type? | What are all the general categories (superclasses) that alternative-type is grouped within? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: parameter\nDescription: parameter is defined as a subclass of datatype role, representing entities that serve a specific function within a datatype context. Each parameter must be associated with some datatype (via the role_of property) and must have an identifier that is a member of the parameter identifier class. This ensures that every parameter is explicitly linked to the datatype it qualifies and is uniquely identified within the system.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[has_identifier some parameter identifier]']}\nGenerated CQs:", "output": "Is it necessary for parameter to have the property propertyRestrictions with some value that plays the role_of a specified datatype? | Can a parameter exist without propertyRestrictions relating to at least one instance of datatype through role_of? | Does every valid parameter exhibit propertyRestrictions to at least one entity classified as datatype by role_of? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: attribute component\nDescription: attribute component is defined as a subclass of datatype role, meaning each attribute component is a specific kind of datatype role. Additionally, attribute component instances are required to be associated with at least one attribute identifier through the has_identifier property. This ensures that every attribute component is uniquely identified by an attribute identifier.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_identifier some attribute identifier]']}\nGenerated CQs:", "output": "What broader categories encompass attribute component according to the ontology? | Which entities are more general than attribute component, including datatype role? | Are attribute component types always considered forms of datatype role? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boolean field-list\nDescription: boolean field-list is a subclass of field-list and is explicitly disjoint with discrete field-list, ensuring no instance can be both a boolean field-list and a discrete field-list. Every boolean field-list must include at least one member that is a boolean field component, establishing that the primary distinguishing feature of this class is the presence of boolean field components among its members.\nAxiom: {'subClassOf': ['field-list'], 'disjointWith': [], 'propertyRestrictions': ['[has_member some boolean field component]']}\nGenerated CQs:", "output": "How does the ontology differentiate boolean field-list from discrete field-list? | Is there a scenario where a field-list instance can be both boolean and discrete? | Which field-list types are declared as mutually exclusive with boolean field-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unlabeled dataset field-list\nDescription: unlabeled dataset field-list is a subclass of field-list, characterized by the axiom that its members must include at least one labeled dataset descriptive field component through the has_member property. This means any instance of unlabeled dataset field-list is a field-list that necessarily contains some labeled dataset descriptive field components.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some labeled dataset descriptive field component]']}\nGenerated CQs:", "output": "Is every unlabeled dataset field-list included under the general category of field-list? | What specific types of field-list include unlabeled dataset field-list as a subclass? | Which broader groupings encompass the unlabeled dataset field-list concept? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic operation\nDescription: dyadic operation is defined as a subclass of characterizing operation, and is disjoint with niladic operation, monadic operation, and n-adic operation, ensuring that no individual can be simultaneously classified as any of these mutually exclusive operation types. A dyadic operation is characterized by mapping a pair of values from a given datatype to either another value of the same datatype or to a Boolean value. This formalization supports the clear distinction and function of dyadic operations within the hierarchy of operation arities.\nAxiom: {'subClassOf': ['characterizing operation'], 'disjointWith': ['niladic operation', 'monadic operation']}\nGenerated CQs:", "output": "What is the ontological separation between dyadic operation and n-adic operation? | Is any mathematical operation classified as both a dyadic operation and an n-adic operation? | Which operation types are stated as disjoint with n-adic operation in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: niladic operation\nDescription: niladic operation is defined as a subclass of characterizing operation and is explicitly disjoint with both monadic operation and n-adic operation, ensuring that an operation cannot simultaneously belong to these classes. Niladic operations are characterized by yielding values of a given datatype, typically without requiring any input arguments.\nAxiom: {'subClassOf': ['characterizing operation'], 'disjointWith': ['n-adic operation']}\nGenerated CQs:", "output": "How are niladic operations and monadic operations conceptually differentiated within the ontology? | Is there any operation that can be classified as both niladic and monadic? | Which operation types are explicitly specified as incompatible with monadic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: monadic operation\nDescription: monadic operation is defined as a subclass of characterizing operation and is explicitly disjoint with n-adic operation, meaning an operation cannot be both monadic and n-adic. Monadic operations map a value of the given datatype to either another value of the same datatype or to a Boolean value, thus operating on a single input. This distinguishes monadic operations from n-adic operations, which take multiple inputs.\nAxiom: {'subClassOf': ['characterizing operation'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology formally distinguish between monadic operations and n-adic operations? | Is it permitted for an operation to be both monadic and n-adic simultaneously within the ontology framework? | Which types of operations are specified as being mutually exclusive with n-adic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: enumerated-value-list\nDescription: enumerated-value-list is defined as a subclass of list specification, with the defining property that it must have at least one member that is an enumerated-value identifier. This means any instance of enumerated-value-list is a list specification characterized by containing one or more explicitly enumerated values as its members.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is every member in an enumerated-value-list required to have at least one enumerated-value identified by the 'has_member' property? | Can an enumerated-value-list contain an element that does not meet the identifier criteria via 'has_member'? | Does the definition of enumerated-value-list ensure the inclusion of only those values that are explicitly connected through 'has_member' to a recognized enumerated-value identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tree datatype generator\nDescription: tree datatype generator is defined as a subclass of directed labeled graph datatype generator, meaning it inherits all structural properties of directed labeled graphs. Additionally, it is explicitly disjoint with DAG datatype generator, indicating that no datatype generator can be both a tree and a directed acyclic graph (DAG) generator at the same time. This class represents datatype generators that output trees, which are specialized directed labeled graphs, ensuring a clear distinction from generators that produce more general acyclic structures.\nAxiom: {'subClassOf': ['directed labeled graph datatype generator'], 'disjointWith': []}\nGenerated CQs:", "output": "What is the ontological distinction between tree datatype generators and DAG datatype generators? | Is there any entity categorized under both tree datatype generator and DAG datatype generator? | Which classes are declared as disjoint with DAG datatype generator in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real datatype\nDescription: real datatype is defined as a subclass of numeric ordered primitive datatype and is explicitly disjoint with both integer datatype and rational datatype, ensuring that no individual can be simultaneously classified as a real datatype and either of those classes. Members of this class support a range of operations, including addition (Add), multiplication (Multiply), negation (Negate), reciprocals (Reciprocal), equality comparison (Equal), order comparison (InOrder), and type promotion (Promote), all among real values. Instances of real datatype possess qualities of being unbounded and approximate, distinguishing them from other numeric types. They also include members such as real radix and real factor, further characterizing the structure and application of real datatypes.\nAxiom: {'subClassOf': ['numeric ordered primitive datatype'], 'disjointWith': ['rational datatype'], 'propertyRestrictions': ['[has_operation some Multiply:real]', '[has_quality some approximate]', '[has_operation some Negate:real]', '[has_member some real radix]', '[has_quality some unbounded]', '[has_operation some Reciprocal:real]', '[has_operation some InOrder:real]', '[has_operation some Add:real]', '[has_operation some Promote:real]', '[has_operation some Equal:real]', '[has_member some real factor]']}\nGenerated CQs:", "output": "How does the ontology differentiate between real datatype and integer datatype? | Is there any datatype that can belong to both real and integer datatypes concurrently? | Which datatypes are explicitly marked as incompatible with integer datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-aggregate generator\nDescription: non-aggregate generator is defined as a subclass of generated datatype generator, and is explicitly disjoint from defined generator, aggregate datatype, and aggregate generator. Every non-aggregate generator is equivalent to being either a choice generator, pointer generator, or procedure generator. This class groups generator types that are not aggregate in nature, thereby excluding those that represent defined, aggregate, or aggregate-related generator functionalities.\nAxiom: {'subClassOf': ['generated datatype generator'], 'disjointWith': ['defined generator', 'aggregate datatype'], 'equivalentClass': ['(choice generator or pointer generator or procedure generator)']}\nGenerated CQs:", "output": "What logical separation is formalized between non-aggregate generators and aggregate generators in the ontology? | Is any device allowed to be classified as both a non-aggregate generator and an aggregate generator simultaneously? | Which generator types, other than aggregate generators, are specified to be disjoint with non-aggregate generators? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: numericalness\nDescription: numericalness is a subclass of datatype property that classifies properties as either numeric or non-numeric. It is formally specified to be equivalent to the union of numeric and non-numeric, meaning all members must belong to one of these two categories. Additionally, numericalness is explicitly disjoint with cardinality, order, boundedness, and equality, ensuring these property types are mutually exclusive and no property can simultaneously belong to both numericalness and any of these other classes. This class captures the essential distinction between properties based on their numerical character.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['cardinality', 'order', 'equality'], 'equivalentClass': ['(numeric or non-numeric)']}\nGenerated CQs:", "output": "How does the ontology differentiate between numericalness and boundedness? | Is it allowed for an entity to possess both numericalness and boundedness simultaneously? | Which classes are explicitly marked as disjoint with boundedness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: order\nDescription: order is defined as a subclass of datatype property, meaning it is a specific kind of property whose value is a data value (as opposed to an object property). It is explicitly disjoint from the classes boundedness and equality, ensuring that no property instance can simultaneously be classified under these categories. Furthermore, order is equivalent to the union of ordered and non-ordered, indicating that any property that falls under the order class must be characterized as either ordered or non-ordered, and these two subclasses exhaust all possibilities for order. This structure formally differentiates order-related properties from those related to boundedness or equality.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['equality'], 'equivalentClass': ['(ordered or non-ordered)']}\nGenerated CQs:", "output": "What logical constraint separates order from boundedness within the ontology? | Is any entity allowed to belong to both order and boundedness categories simultaneously? | Which other concepts are formally specified as disjoint with boundedness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete field component\nDescription: discrete field component is a subclass of primitive field component and is explicitly disjoint with both real field component and boolean field component, ensuring that no individual can be classified as more than one of these types. Members of this class are characterized by their relationship to discrete datatypes, as every discrete field component must play the role of some discrete datatype. This formalization distinguishes discrete field components from other primitive field components based on their association with discrete data.\nAxiom: {'subClassOf': ['primitive field component'], 'disjointWith': ['real field component'], 'propertyRestrictions': ['[role_of some discrete datatype]']}\nGenerated CQs:", "output": "How does the ontology express the separation between discrete field components and boolean field components? | Is any field component allowed to be both a discrete field component and a boolean field component? | Which classes are identified as mutually exclusive to discrete field components? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: choice datatype\nDescription: choice datatype is a subclass of non-aggregate datatype, characterized by having values that represent a single value selected from a set of alternative datatypes. These alternative datatypes are differentiated by their correspondence to values from a tag-type, known as the tag datatype. Formally, a choice datatype has members such as tag-type, alternative-list, and a choice generator; it is subject to property restrictions requiring qualities such as exactness and being non-ordered. It supports specific operations, including Discriminant:choice, Tag:choice, Cast:choice, and Equal:choice, which facilitate the selection and identification of alternatives by tag values.\nAxiom: {'subClassOf': ['non-aggregate datatype'], 'propertyRestrictions': ['[has_quality some exact]', '[has_operation some Discriminant:choice]', '[has_quality some non-ordered]', '[has_operation some Tag:choice]', '[has_operation some Cast:choice]', '[has_operation some Equal:choice]', '[has_member some alternative-list]', '[has_member some choice generator]']}\nGenerated CQs:", "output": "Is every instance of 'choice' required to have at least one 'has_member' relationship to a 'tag-type'? | Can a 'choice' exist without being associated with any 'tag-type' via 'has_member'? | Does the ontology stipulate that 'choice' entities necessarily feature at least one 'has_member' link to a 'tag-type' entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DAG datatype\nDescription: DAG datatype is specified as a subclass of labeled graph datatype, meaning it inherits all characteristics of a labeled graph datatype. Additionally, every DAG datatype must have at least one member that is a DAG datatype generator, as indicated by the property restriction [has_member some DAG datatype generator]. This ensures each instance of DAG datatype is associated with a generator tailored for directed acyclic graph structures.\nAxiom: {'subClassOf': ['labeled graph datatype'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Must a DAG datatype always have at least one 'has_member' relationship with a DAG datatype generator? | Can a DAG datatype exist without being associated to any DAG datatype generator through the 'has_member' property? | Is the presence of a 'has_member' link to a DAG datatype generator necessary for every DAG datatype instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: lower bound\nDescription: lower bound is defined as a subclass of bound, representing a specific type of bound that is associated with exactly one integer value via the has-value property. This restriction ensures that each lower bound instance is uniquely identified by a single integer.\nAxiom: {'subClassOf': ['bound'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is there a requirement that lower bound has exactly one propertyRestriction with a value of type xsd:integer? | Can an instance of lower bound have more than one propertyRestriction with a value of type xsd:integer? | Is it possible for lower bound to have no propertyRestriction with a value of type xsd:integer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index lowerbound\nDescription: index lowerbound is a subclass of bound, representing a specific type of boundary. It is characterized by the property restriction that it must have exactly one value of type xsd:integer, indicating the precise lower limit or starting point within an index or range. This formalization ensures that each instance of index lowerbound uniquely defines a single integer value as its boundary.\nAxiom: {'subClassOf': ['bound'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is each instance of index required to have the property lowerbound with exactly one integer value? | Can an index possess more than one lowerbound value assigned as an integer? | Is it necessary that the lowerbound property of index refers to one and only one xsd:integer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: generated datatype generator\nDescription: generated datatype generator is defined as a subclass of datatype generator and is considered equivalent to either a non-aggregate generator or an aggregate generator. Members of this class must be associated, via the is_member_of property, with some generated datatype. The class is also described by the synonym \"datatype constructor.\"\nAxiom: {'subClassOf': ['datatype generator'], 'equivalentClass': ['(non-aggregate generator or aggregate generator)'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is it required that an entity classified under 'generated datatype' must be a member of at least one 'generated datatype' instance? | Does every instance of 'generated datatype' participate in the 'is_member_of' relationship with some instance of 'generated datatype'? | Can a 'generated datatype' exist without being linked via 'is_member_of' to any other 'generated datatype'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: integer base datatype\nDescription: integer base datatype is defined as a subclass of base type and is constrained by the axiom that it must play the role of some integer datatype. This means that every instance of integer base datatype is a specific kind of base type that is characterized by being related to at least one integer datatype through the role_of property.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[role_of some integer datatype]']}\nGenerated CQs:", "output": "Is integer base datatype categorized under the broader base type classification? | Which datatypes are more specific than base type, such as integer base datatype? | To which higher-level types does integer base datatype conceptually pertain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record of real datatype\nDescription: record of real datatype is defined as a subclass of record (tuple) datatype, and is explicitly disjoint with record of discrete datatype, ensuring that no individual can belong to both categories. Members of this class are characterized by the presence of at least one member field (has_member) that is of real type within its field-list. This constrains records in this class to contain real-valued data fields, distinguishing them from records composed entirely of discrete datatypes.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'disjointWith': [], 'propertyRestrictions': ['[has_member some real field-list]']}\nGenerated CQs:", "output": "How does the ontology differentiate between records of real datatype and records of discrete datatype? | Is there any instance that can be considered both a record of real datatype and a record of discrete datatype? | Which other record types are formally specified as disjoint with records of discrete datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled dataset record datatype\nDescription: labeled dataset record datatype is defined as a subclass of record (tuple) datatype. Each instance must have exactly one member, specified by the has_member property, which must be a labeled dataset field-list. This ensures that every labeled dataset record datatype represents a tuple structure with a precisely defined schema for its contents.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is it required that a labeled dataset record contains exactly one has_member property referring to a labeled dataset field-list? | Can a labeled dataset record be associated with more than one labeled dataset field-list via has_member? | Does a labeled dataset record exist if it lacks the has_member relationship with a labeled dataset field-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set of integer datatype\nDescription: set of integer datatype is defined as a subclass of set datatype. Each instance of this class is constrained by the requirement that it has members, all of which are from the integer base datatype. This ensures that any individual classified as set of integer datatype can only contain integers as its elements.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some integer base datatype]']}\nGenerated CQs:", "output": "Is set datatype a broader category that encompasses set of integer datatype? | Which datatypes are more specific than set datatype, such as set of integer datatype? | What general datatype groupings include set of integer datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: enumerated datatype\nDescription: enumerated datatype is defined as a subclass of non-numeric ordered primitive datatype, and is explicitly disjoint with both date and time datatype and ordinal datatype. As a discrete (synonymously, enumerated) datatype, it is characterized by having an explicit set of member values (enumerated-value-list) and supports specific operations such as equality checking (Equal:enumerated), successor determination (Successor:enumerated), and ordered comparison (InOrder:enumerated). Additionally, every enumerated datatype must possess qualities of being bounded (having finite limits) and exact (precisely defined), ensuring it only allows selection from a strictly defined, ordered set of non-numeric values.\nAxiom: {'subClassOf': ['non-numeric ordered primitive datatype'], 'disjointWith': ['ordinal datatype'], 'propertyRestrictions': ['[has_operation some Equal:enumerated]', '[has_member some enumerated-value-list]', '[has_operation some Successor:enumerated]', '[has_quality some bounded]', '[has_operation some InOrder:enumerated]', '[has_quality some exact]']}\nGenerated CQs:", "output": "What is the formal distinction between the enumerated datatype and the date and time datatype within the ontology? | Is it allowed for a datatype to be classified as both enumerated and date and time? | Which datatypes are explicitly set as disjoint with the date and time datatype in this model? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: size\nDescription: size is defined as a subclass of value expression, representing a value-based concept within the ontology. Members of the size class are characterized by having exactly one associated value of type xsd:integer through the has-value property. This means each individual of size must specify a single integer value, reflecting the quantitative measurement that the class is intended to capture.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has-value exactly 1 xsd:integer]']}\nGenerated CQs:", "output": "Is size categorized under value expression? | What broader category encompasses size in this ontology? | Which more specific concepts are grouped as subtypes of value expression, such as size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: extended datatype\nDescription: extended datatype is defined as a subclass of data representational model. It is characterized by possessing at least one datatype property (has_quality some datatype property), at least one subtype generator as a member (has_member some subtype generator), at least one value space attribute (has_attribute some value space), and at least one base type as a member (has_member some base type). The class is also associated with the synonym \"subtype\". This formalization ensures that any instance of extended datatype is richly described in terms of qualities, generative subtypes, value domains, and derived from fundamental base types.\nAxiom: {'subClassOf': ['data representational model'], 'propertyRestrictions': ['[has_quality some datatype property]', '[has_member some subtype generator]', '[has_member some base type]']}\nGenerated CQs:", "output": "Is every instance with the 'extended datatype propertyRestrictions' required to have at least one 'has_attribute' in the value space? | Can something classified under 'extended datatype propertyRestrictions' exist without possessing the 'has_attribute' property associated with any value space? | Does the existence of 'has_attribute' with any value from the specified space determine membership in 'extended datatype propertyRestrictions'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence of discrete datatype\nDescription: sequence of discrete datatype is defined as a subclass of sequence datatype, meaning it inherits all characteristics associated with sequence datatypes. Individuals of this class are further characterized by the property that each member of the sequence must be of a discrete base type. This restriction ensures that only elements classified as discrete base types are permitted as members in such sequences, differentiating this class from more general sequence datatypes that may include other types of elements.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some discrete base type]']}\nGenerated CQs:", "output": "Is sequence of discrete datatype classified as a kind of sequence datatype? | Which datatypes are more specific instances under the category of sequence datatype? | To which higher-level datatype categories does sequence of discrete datatype belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous  unordered aggregate datatype with variable size\nDescription: homogenous unordered aggregate datatype with variable size is a subclass of homogenous aggregate datatype with variable size. Each instance of this class must have at least one member that is an instance of homogenous unordered aggregate generator with variable size. This class groups together collections of elements that are all of the same type, where the order of elements is not significant, and the number of elements may vary.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_member some homogenous unordered aggregate generator with variable size]']}\nGenerated CQs:", "output": "Does every homogenous unordered aggregate datatype with variable size fall under the classification of homogenous aggregate datatype with variable size? | Which aggregate datatypes with variable size encompass homogenous unordered variants as specific types? | What are the more general datatype categories that include homogenous unordered aggregate datatype with variable size as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: node component\nDescription: node component is defined as a subclass of graph aggregate component and is explicitly disjoint with edge component, meaning an individual cannot simultaneously be a node component and an edge component. This class represents components within a graph structure that function as nodes, distinct from components serving as edges.\nAxiom: {'subClassOf': ['graph aggregate component'], 'disjointWith': []}\nGenerated CQs:", "output": "What is the formal distinction between node component and edge component within the ontology? | Is there any entity that can simultaneously be classified as both node component and edge component? | Which other classes are specified as disjoint with edge component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: void datatype\nDescription: void datatype is a subclass of primitive datatype and is explicitly disjoint from non-numeric primitive datatype, numeric primitive datatype, and non-numeric unordered primitive datatype—no individual can belong to more than one of these categories. Members of the void datatype class are characterized by supporting at least the Equal:void operation, meaning comparison for equality is defined. This class formalizes the concept of a primitive datatype that does not represent numeric or non-numeric unordered values, distinguishing it within datatype hierarchies.\nAxiom: {'subClassOf': ['primitive datatype'], 'disjointWith': ['non-numeric primitive datatype', 'numeric primitive datatype'], 'propertyRestrictions': ['[has_operation some Equal:void]']}\nGenerated CQs:", "output": "How does the ontology differentiate between void datatypes and non-numeric unordered primitive datatypes? | Is there any datatype that can simultaneously be classified as both a void datatype and a non-numeric unordered primitive datatype? | Which additional datatypes are defined as mutually exclusive with non-numeric unordered primitive datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous aggregate generator\nDescription: homogenous aggregate generator is defined as a subclass of aggregate generator and is equivalent to any generator that is an array generator, bag generator, sequence generator, or set generator. It is explicitly disjoint with heterogenous aggregate generator, meaning that no individual can belong to both classes simultaneously. Members of this class are further characterized by the property restriction that they must have at least one quality that is homogenous, indicating that the elements they generate are of a uniform type or nature.\nAxiom: {'subClassOf': ['aggregate generator'], 'disjointWith': [], 'equivalentClass': ['(array generator or bag generator or sequence generator or set generator)'], 'propertyRestrictions': ['[has_quality some homogenous]']}\nGenerated CQs:", "output": "What is the nature of the disjointness between homogenous aggregate generators and heterogenous aggregate generators? | Is it permissible for an entity to be classified as both a homogenous aggregate generator and a heterogenous aggregate generator? | Which types of generators are explicitly defined as disjoint with homogenous aggregate generators within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-numeric ordered primitive datatype\nDescription: non-numeric ordered primitive datatype is a subclass of non-numeric primitive datatype. Members of this class are characterized by possessing the quality of being ordered, meaning their values can be arranged in a specific sequence or order. This formalization specifies that any non-numeric primitive datatype classified here must inherently support order among its instances.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has_quality some ordered]']}\nGenerated CQs:", "output": "Is every non-numeric ordered primitive datatype encompassed within the category of non-numeric primitive datatype? | Which datatypes are classified as specializations under non-numeric primitive datatype, such as non-numeric ordered primitive datatype? | To which broader datatype categories does non-numeric ordered primitive datatype belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: direct access property\nDescription: direct access property is a subclass of access type and is disjoint with indirect access property, meaning no property can be both a direct access property and an indirect access property. It is formally defined as being equivalent to either index access or key access, specifying that any direct access property allows retrieval via a direct key or index rather than through intermediary steps.\nAxiom: {'subClassOf': ['access type'], 'disjointWith': [], 'equivalentClass': ['(index access or key access)']}\nGenerated CQs:", "output": "Is any property classified as both a direct access property and an indirect access property within the ontology? | Which properties are explicitly specified as disjoint with indirect access properties? | What is the ontological distinction between direct access property and indirect access property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bounded above\nDescription: bounded above is defined as a subclass of bounded, representing objects or sets that possess an upper bound. It is explicitly disjoint with bounded below, ensuring no individual can simultaneously be both bounded above and bounded below. This means any member of this class is characterized by having an upper bound but not a lower bound within the context of the ontology.\nAxiom: {'subClassOf': ['bounded'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology differentiate between entities that are bounded above and those that are bounded below? | Is an entity permitted to belong simultaneously to both the bounded above and bounded below categories? | Which classes, apart from bounded above, are specified as disjoint with bounded below within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unbounded above\nDescription: unbounded above is defined as a subclass of unbounded, representing entities that do not have an upper bound. It is explicitly disjoint with unbounded below, ensuring that no individual can simultaneously be both unbounded above and unbounded below. This class characterizes those entities that lack an upper limit but may or may not have a lower bound.\nAxiom: {'subClassOf': ['unbounded'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology establish separation between unbounded above and unbounded below? | Is any entity classified as both unbounded above and unbounded below within the ontology? | Which classes are defined as mutually exclusive with unbounded above? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bounded\nDescription: bounded is defined as a subclass of boundedness, representing entities that possess the property of being bounded. It is explicitly disjoint with unbounded, ensuring that no individual can be simultaneously classified as both bounded and unbounded. This classification enforces a strict separation between bounded and unbounded entities within the ontology.\nAxiom: {'subClassOf': ['boundedness'], 'disjointWith': []}\nGenerated CQs:", "output": "What is the nature of the distinction between bounded and unbounded entities within the ontology? | Is it permissible for a concept to be classified as both bounded and unbounded simultaneously? | Which classes are formally specified as incompatible with the concept of bounded? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: approximate\nDescription: approximate is defined as a subclass of exactness, meaning it represents a kind or degree of exactness. It is explicitly disjoint with exact, so no individual can simultaneously be both approximate and exact. This class formalizes the notion of approximation as distinct from strict exactness within the ontology.\nAxiom: {'subClassOf': ['exactness'], 'disjointWith': []}\nGenerated CQs:", "output": "What logical separation is established between approximate and exact in the ontology? | Is it valid for an entity to be classified as both approximate and exact simultaneously? | Which classes are explicitly defined as incompatible with exact? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: numeric\nDescription: numeric is defined as a subclass of numericalness, representing entities characterized by having numerical properties. It is explicitly disjoint with non-numeric, ensuring that no individual can simultaneously belong to both numeric and non-numeric classes. This formalization distinguishes numeric entities, which possess quantifiable or number-based characteristics, from those lacking such numerical nature.\nAxiom: {'subClassOf': ['numericalness'], 'disjointWith': []}\nGenerated CQs:", "output": "What differentiates numeric entities from non-numeric entities in the ontology? | Is there any instance that can simultaneously be classified as numeric and non-numeric? | Which classes have an explicit incompatibility declared with non-numeric? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ordered\nDescription: ordered is defined as a subclass of order, indicating that all instances of ordered are also considered orders according to the ontology. It is explicitly disjoint with non-ordered, meaning that no individual can be simultaneously classified as both ordered and non-ordered. This formalization distinguishes entities that possess or exhibit ordering from those that do not.\nAxiom: {'subClassOf': ['order'], 'disjointWith': []}\nGenerated CQs:", "output": "What formal separation exists between ordered and non-ordered entities within the ontology? | Is any instance permitted to belong simultaneously to both ordered and non-ordered types? | Which classes are declared as disjoint with ordered in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Delete:bag\nDescription: Delete:bag is defined as a subclass of delete operation, indicating that it represents a specific type of deletion action. It is also explicitly disjoint with Delete:table, ensuring that no individual can be both a Delete:bag and a Delete:table operation. This formalization distinguishes Delete:bag as a unique deletion process within the ontology, separate from deletion operations targeting tables.\nAxiom: {'subClassOf': ['delete operation'], 'disjointWith': []}\nGenerated CQs:", "output": "What distinguishes instances of Delete:bag from those of Delete:table in terms of their classification? | Is there any entity in the ontology that can belong to both Delete:bag and Delete:table simultaneously? | Which classes are asserted to be disjoint with Delete:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Difference:set\nDescription: Difference:set is defined as a subclass of the difference operation, representing the set-theoretic difference between collections or sets. It is explicitly disjoint with Difference:time&date, so no instance can be both a set difference and a time/date difference. This class captures operations or results concerning the removal of elements from one set that exist in another, and is restricted to set-based contexts.\nAxiom: {'subClassOf': ['difference operation'], 'disjointWith': []}\nGenerated CQs:", "output": "What entities are considered mutually exclusive between Difference:set and Difference:time&date in the ontology? | Is there any instance that could simultaneously belong to both Difference:set and Difference:time&date? | Which classes does the ontology specify as being disjoint with Difference:set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Select:array\nDescription: Select:array is defined as a subclass of dyadic select operation, indicating it is a specific kind of select operation involving two operands. It is explicitly disjoint with Select:table, ensuring no individual can be both a Select:array and a Select:table. This class is used to represent select operations that specifically operate on array data structures, and not on tables.\nAxiom: {'subClassOf': ['dyadic select operation'], 'disjointWith': []}\nGenerated CQs:", "output": "What formal difference is established between Select:array and Select:table in the ontology? | Is there any entity that can simultaneously be an instance of both Select:array and Select:table? | Which classes in the ontology are asserted as mutually exclusive with Select:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Insert:bag\nDescription: Insert:bag is defined as a subclass of insert operation, signifying that it represents a specific type of insertion action. It is declared disjoint with Insert:table, which means that an instance of Insert:bag cannot simultaneously belong to the Insert:table class. This distinction enforces mutual exclusivity between these two types of insertion operations.\nAxiom: {'subClassOf': ['insert operation'], 'disjointWith': []}\nGenerated CQs:", "output": "What is the ontological distinction between Insert:bag and Insert:table? | Can an individual simultaneously be classified as both Insert:bag and Insert:table? | Which classes are explicitly declared as disjoint with Insert:bag? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Select:bag\nDescription: Select:bag is defined as a subclass of monadic select operation, indicating that it represents a form of selection operation that applies to a single argument within a computational or logical context. It is explicitly disjoint with Select:set, ensuring that no instance can simultaneously be both a Select:bag and a Select:set. This conceptual separation enforces that Select:bag and Select:set represent fundamentally distinct kinds of select operations.\nAxiom: {'subClassOf': ['monadic select operation'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology distinguish between Select:bag and Select:set? | Is there any instance that can be classified as both Select:bag and Select:set? | Which classes are explicitly specified as disjoint with Select:set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NonNegative:integer\nDescription: NonNegative:integer is defined as a subclass of nonNegative operation, representing integers that are greater than or equal to zero. It is formally disjoint with NonNegative:rational, ensuring that no individual can be both a NonNegative:integer and a NonNegative:rational. This class captures the concept of all non-negative integer values, distinguishing them from non-negative rational numbers.\nAxiom: {'subClassOf': ['nonNegative operation'], 'disjointWith': []}\nGenerated CQs:", "output": "What logical separation is asserted between NonNegative:integer and NonNegative:rational within the ontology? | Is there any instance that could simultaneously belong to both NonNegative:integer and NonNegative:rational classes? | Which classes are declared as disjoint with NonNegative:rational in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Round:scaled\nDescription: Round:scaled is defined as a subclass of round operation, and it is explicitly disjoint with Round:time&date, meaning no entity can be an instance of both classes simultaneously. Members of the Round:scaled class represent rounding operations that are specifically not applicable to time or date values, but instead pertain to other types of values handled in scaled or quantitative contexts.\nAxiom: {'subClassOf': ['round operation'], 'disjointWith': []}\nGenerated CQs:", "output": "How are Round:scaled and Round:time&date conceptually separated within the ontology? | Is any entity allowed to belong simultaneously to both Round:scaled and Round:time&date categories? | Which classes in the ontology are specified as disjoint with Round:time&date? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Serialize:bag\nDescription: Serialize:bag is defined as a subclass of serialize operation, representing a specific type of serialization process. It is explicitly disjoint with Serialize:table, ensuring that no instance can be classified as both Serialize:bag and Serialize:table. This distinction enforces separation between bag-based and table-based serialization methods.\nAxiom: {'subClassOf': ['serialize operation'], 'disjointWith': []}\nGenerated CQs:", "output": "What distinguishes the classes Serialize:bag and Serialize:table within the ontology? | Is it allowed for an instance to be both a Serialize:bag and a Serialize:table? | Which classes are defined to be disjoint with Serialize:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Successor:enumerated\nDescription: Successor:enumerated is defined as a subclass of the successor operation, indicating it represents a specific type or aspect of the successor process. It is explicitly disjoint with Successor:ordinal, which formally ensures that no individual can be both a member of Successor:enumerated and Successor:ordinal simultaneously. This separation captures distinct interpretations or instances of successor within the relevant domain.\nAxiom: {'subClassOf': ['successor operation'], 'disjointWith': []}\nGenerated CQs:", "output": "How is the conceptual separation represented between enumerated and ordinal successors in the ontology? | Is it allowable for an entity to be classified as both an enumerated and an ordinal successor? | What are the defined disjoint classes for ordinal successors within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index access\nDescription: index access is defined as a subclass of direct access property and is explicitly disjoint with key access, meaning an individual cannot be both an index access and a key access. This class represents mechanisms or operations that permit direct access to elements based on their positional index within a collection, distinctly separating it from access methods based on explicit keys.\nAxiom: {'subClassOf': ['direct access property'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology differentiate index access from key access? | Is there an entity that can be classified simultaneously as supporting both index access and key access? | Which access types are explicitly defined as incompatible with key access? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ordered aggregate\nDescription: ordered aggregate is defined as a subclass of aggregate imposed ordering, meaning it inherits all properties of aggregates that have a specific ordering structure. It is explicitly disjoint with unordered aggregate, indicating that no individual can simultaneously be both an ordered and an unordered aggregate. This formalization captures the distinction between collections with an inherent order and those without, ensuring that ordered aggregates maintain a structured sequence among their elements.\nAxiom: {'subClassOf': ['aggregate imposed ordering'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology distinguish between ordered aggregates and unordered aggregates? | Is there any entity that can simultaneously be classified as both an ordered aggregate and an unordered aggregate? | Which classes are specified as incompatible with unordered aggregate in the ontology structure? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: identifier not unique\nDescription: identifier not unique is a subclass of aggregate-imposed identifier uniqueness and is disjoint with identifier unique, meaning no individual can simultaneously be both identifier not unique and identifier unique. This class represents identifiers within an aggregate context that are not required to be unique, distinguishing them from identifiers that have enforced uniqueness at the aggregate level.\nAxiom: {'subClassOf': ['aggregate-imposed identifier uniqueness'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology distinguish between 'identifier not unique' and 'identifier unique'? | Is any instance allowed to have both 'identifier not unique' and 'identifier unique' classifications? | Which classes are specified as mutually exclusive with 'identifier unique'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: fixed size\nDescription: fixed size is defined as a subclass of aggregate size, representing a type of size where the measurement remains constant. It is explicitly disjoint with variable size, indicating that no entity can simultaneously be considered both fixed size and variable size. This ensures that fixed size aggregates maintain a consistent value and cannot change over time or context.\nAxiom: {'subClassOf': ['agregate size'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology distinguish between fixed size and variable size entities? | Is it permitted for an entity to be classified as both fixed size and variable size? | Which classes within the ontology are defined as mutually exclusive with variable size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: component mandatory\nDescription: component mandatory is defined as a subclass of component mandatoriness and is explicitly disjoint with component non-mandatory, ensuring that no individual can simultaneously be both a component mandatory and component non-mandatory. This class characterizes components that are required or obligatory within a given context, distinguishing them from non-mandatory components.\nAxiom: {'subClassOf': ['component mandatoriness'], 'disjointWith': []}\nGenerated CQs:", "output": "What is the formal separation between component mandatory and component non-mandatory in the ontology? | Can an entity be classified as both a mandatory and a non-mandatory component simultaneously? | Which components are explicitly stated as disjoint with component non-mandatory? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous\nDescription: homogenous is defined as a subclass of homogenity, indicating that all instances of this class exhibit uniformity in composition or character. It is explicitly disjoint with heterogenous—no individual can be both homogenous and heterogenous—ensuring a clear distinction between classes characterized by uniformity and those characterized by diversity.\nAxiom: {'subClassOf': ['homogenity'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology differentiate between homogenous and heterogenous entities? | Is there any entity that can simultaneously belong to both homogenous and heterogenous categories? | Which classes are explicitly specified as mutually exclusive with homogenous? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: recursive\nDescription: recursive is defined as a subclass of recursiveness, signifying that every instance of recursive inherits properties from recursiveness. It is explicitly disjoint with non-recursive, ensuring that no individual can simultaneously belong to both recursive and non-recursive classes. This formalization distinguishes all recursive instances from those that are non-recursive.\nAxiom: {'subClassOf': ['recursiveness'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology distinguish between recursive and non-recursive classes? | Is any entity classified as both recursive and non-recursive in the ontology? | Which classes are formally specified as disjoint with non-recursive? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-unique values\nDescription: non-unique values is defined as a subclass of uniqueness, but is explicitly disjoint with unique values, meaning no instance can be both a non-unique value and a unique value. This class captures those values that do not fulfill the criteria for uniqueness within a given context, thereby representing data elements that may have duplicates or repeated entries within a dataset or collection.\nAxiom: {'subClassOf': ['uniqueness'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology distinguish between non-unique values and unique values? | Is it allowed for a value to be classified as both non-unique and unique simultaneously? | What other types of values, if any, are defined as disjoint with unique values? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive field identifier\nDescription: descriptive field identifier is a subclass of field identifier, and is explicitly disjoint with target field identifier, meaning that no individual can simultaneously be both a descriptive field identifier and a target field identifier. This class represents identifiers that have descriptive purposes, distinguishing them from identifiers that serve as targets. The disjointness axiom enforces a clear conceptual separation between descriptive and target field identifiers within the ontology.\nAxiom: {'subClassOf': ['field identifier'], 'disjointWith': []}\nGenerated CQs:", "output": "Are there any instances that can belong to both descriptive field identifier and target field identifier? | Which classes are asserted to be mutually exclusive with target field identifier? | What formal constraint distinguishes descriptive field identifier from target field identifier in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: list specification\nDescription: list specification is defined as a subclass of specification. This means all instances of list specification are also considered specifications. No additional disjointness, property restrictions, or further descriptive details are specified, so the class serves as a specialization of the general concept of specification for use cases where differentiation among specification types is needed.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "output": "Which broader specification classes does list specification belong to? | What categories of specifications include list specification as a more specific instance? | Is list specification classified as a type of specification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: value space\nDescription: value space is defined as a subclass of specification. This means that every value space is a type of specification, inheriting the general characteristics of specification while representing a distinct concept within that category. No additional distinguishing features or restrictions are asserted by the current axioms.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "output": "What higher-level categories does value space belong to? | Which specifications have value space as a specialized form? | Are all value spaces encompassed within the specification category? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tag-value list\nDescription: tag-value list is defined as a subclass of specification, indicating that it represents a specific kind of specification. This class formalizes entities that provide information or structure through a collection of tags and their corresponding values, typically used to encode attribute data in a structured format.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "output": "Does every tag-value list represent a form of specification? | What more general categories does tag-value list fall under in the ontology? | Which entities are classified as subtypes of specification, such as tag-value list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: direction\nDescription: direction is defined as a subclass of specification. This means that every direction is a specific type of specification, and it inherits all characteristics and properties applicable to specifications in the ontology. No further constraints or descriptions have been provided, so the class serves as a general categorization for directions under the broader concept of specifications.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "output": "What more specific subclasses exist under specification, such as direction? | Which general categories include direction as a member? | Does the concept direction fall under the broader category of specification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: select-item specification\nDescription: select-item specification is defined as a subclass of specification. This indicates that every select-item specification is a type of specification, inheriting all characteristics of the parent class, with no additional restrictions or distinctions provided in the current formalization. No further disjointness or property constraints are specified.\nAxiom: {'subClassOf': ['specification']}\nGenerated CQs:", "output": "Which specific types of specification encompass select-item specification? | What broader specification categories include select-item specification as a subclass? | Is select-item specification categorized under the broader group of specification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: datatype generator\nDescription: datatype generator is defined as a subclass of directive information entity. This indicates that any datatype generator inherits all structural and semantic characteristics of directive information entities, typically representing an information construct that prescribes or instructs the generation of datatypes. No further property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['directive information entity']}\nGenerated CQs:", "output": "Which higher-level categories encompass datatype generator? | Is datatype generator included within the broader class of directive information entity? | What entities are direct or indirect subclasses of directive information entity, specifically including datatype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: characterizing operation\nDescription: characterizing operation is a subclass of directive information entity. It refers to the set of operations that, either performed on or producing values of a datatype, distinguish that datatype from others with otherwise identical value spaces except potentially for symbol substitution. This class is used to formally capture the unique operational behaviors that define and differentiate datatypes in an information system.\nAxiom: {'subClassOf': ['directive information entity']}\nGenerated CQs:", "output": "Is characterizing operation a more specific kind of directive information entity? | What entities are covered under directive information entity, such as characterizing operation? | Which broader classifications include characterizing operation as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: data representational model\nDescription: data representational model is defined as a subclass of directive information entity. This means any instance of a data representational model is also an instance of directive information entity, inheriting all its properties and characteristics. The class is intended to capture entities that provide structured directives on how data is to be represented or organized.\nAxiom: {'subClassOf': ['directive information entity']}\nGenerated CQs:", "output": "What overarching entity types include data representational model within their classification? | Which entities are categorized as more specific forms of directive information entity, such as data representational model? | Does a data representational model fall under the broader grouping of directive information entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: explicit subtype generator\nDescription: explicit subtype generator is defined as a subclass of subtype generator, meaning every explicit subtype generator is also a subtype generator. No further restrictions or characteristics are specified by the current axioms or descriptions.\nAxiom: {'subClassOf': ['subtype generator']}\nGenerated CQs:", "output": "Is explicit subtype generator classified under subtype generator? | What broader classes encompass explicit subtype generator? | Which subclasses fall within the category of subtype generator, including explicit subtype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: natural number\nDescription: natural number is defined as a subclass of defined datatype, indicating that it represents a specific kind of datatype with well-established properties. Natural numbers typically include non-negative integers (0, 1, 2, ...), and are formally distinguished from other datatypes by their discrete, countable nature. This classification ensures that any individual of the class natural number is treated as a clearly defined, foundational numeric datatype.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "What broader datatype classifications include natural number as a subclass? | Is natural number categorized under defined datatype? | Which datatypes encompass natural number as a specialized type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: modulo\nDescription: modulo is defined as a subclass of defined datatype, indicating that it represents a specifically characterized datatype within the ontology. No further domain-specific properties or restrictions are specified for this class based on the current axiom.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Which defined datatypes have modulo as a specific subtype? | What broader categories encompass modulo under defined datatype? | Is modulo classified as a kind of defined datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bit\nDescription: bit is defined as a subclass of defined datatype, indicating that it represents a specific, well-defined data value within the ontology. As a data-oriented class, bit inherits all characteristics of defined datatypes but is further specialized for contexts where only binary or distinctly specified data values are relevant.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Which datatypes are more specific types within defined datatype, including bit? | To what broader datatype categories does bit belong? | Is bit classified under the general group of defined datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bit string\nDescription: bit string is defined as a subclass of defined datatype, representing a specific type of datatype whose values consist of sequences of bits. This classification situates bit string within the hierarchy of datatypes and indicates its specialization for encoding data as ordered collections of binary digits.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Which datatypes are classified as specializations of defined datatype, including bit string? | Is bit string categorized under defined datatype? | What higher-level datatypes does bit string fall under in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: character string\nDescription: character string is defined as a subclass of defined datatype. This means any instance of character string is also recognized as a defined datatype, typically representing a sequence of characters used to encode textual information.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Is character string classified as a subtype of defined datatype? | What general datatypes does character string fall under within the ontology? | Which datatypes are encompassed under defined datatype, including character string? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: time interval\nDescription: time interval is defined as a subclass of defined datatype, indicating that it represents a structured data value within the ontology. As a specialized datatype, time interval refers to a span or duration of time, inheriting all properties and constraints applicable to defined datatypes.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Does time interval fall within the category defined by defined datatype? | What specific types are classified under defined datatype, including time interval? | Which broader categories encompass time interval as a specific instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: octet\nDescription: octet is defined as a subclass of defined datatype, establishing it as a specific type of datatype within the ontology. This formalization indicates that any instance of octet must satisfy all constraints applicable to defined datatype, but provides no further restrictions or additional properties beyond this classification.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "To which higher-level datatypes does octet belong according to the ontology hierarchy? | Which datatypes are specified as subclasses of defined datatype, including octet? | Is octet a defined subtype within the category of defined datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: octet string\nDescription: octet string is defined as a subclass of defined datatype. This means that octet string represents a specific type of datatype, though its precise structure and constraints are not further elaborated in the current axioms. Members of this class inherit all characteristics of defined datatype.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "What broader data categories include octet string as a member? | Which data types fall under the category of defined datatype, such as octet string? | Is octet string classified as a specialized type of defined datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: private\nDescription: private is defined as a subclass of defined datatype, indicating that it represents a specific kind of datatype within the ontology. No additional restrictions or disjointness axioms are specified, so its primary characteristic is its hierarchical relationship as a more specialized form of defined datatype.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Does private fall under the general category of defined datatype? | Which specific types are classified as defined datatype, such as private? | What broader classes does private belong to in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: object identifier\nDescription: object identifier is defined as a subclass of defined datatype. This means that every object identifier is a specific type of defined datatype, typically used to uniquely distinguish individual entities or objects within a system or dataset.\nAxiom: {'subClassOf': ['defined datatype']}\nGenerated CQs:", "output": "Is every object identifier necessarily classified as a defined datatype? | To what broader datatype classes does object identifier belong? | Which defined datatypes have object identifier as a specific specialization? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: stack\nDescription: stack is defined as a subclass of defined generator. This means every stack is a type of defined generator, inheriting all characteristics associated with defined generators. No additional property restrictions, disjointness, or equivalence assertions are specified. This class is intended to capture entities that possess the structural or functional traits of defined generators, refined specifically as stacks.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "Is stack categorized as a specific type of defined generator? | What are the broader categories or superclasses to which stack belongs? | Which entities are identified as subclasses under defined generator, such as stack? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tree\nDescription: tree is defined as a subclass of defined generator. This indicates that any instance of tree is considered a type of defined generator, inheriting all properties and restrictions from that superclass. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "Is tree classified as a type of defined generator? | Which broader classes does tree pertain to within the context of defined generator? | What entities are specified as subclasses of defined generator, such as tree? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: optional\nDescription: optional is defined as a subclass of defined generator, indicating that every optional is a type of defined generator. This means all individuals classified as optional inherit the properties and restrictions of defined generator, but may have further distinguishing features or constraints specified elsewhere. There are no additional axioms or asserted properties currently restricting the class further.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "Does optional fall under the defined generator category? | What broader classes include optional within the context of defined generator classifications? | Which defined generator types encompass optional as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: directed labeled graph datatype generator\nDescription: directed labeled graph datatype generator is a subclass of defined generator. This class represents generators that are specifically designed to produce directed labeled graph datatypes, inheriting the general properties of defined generators while specializing in the context of graph structures with directed edges and labeled nodes or connections.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "To what higher-level generator classes does directed labeled graph datatype generator belong? | Which specific generator types are categorized under defined generator, such as directed labeled graph datatype generator? | Is every directed labeled graph datatype generator inherently classified as a defined generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-directed labeled graph generator\nDescription: non-directed labeled graph generator is defined as a subclass of defined generator. This means every non-directed labeled graph generator is a type of defined generator, inheriting its general properties. The class represents entities that produce non-directed graphs in which nodes and/or edges are assigned labels, but with no explicit directionality imposed on the connections.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "What broader generator classifications include non-directed labeled graph generator? | Which generator types are subclasses of defined generator? | Does a non-directed labeled graph generator fall under the category of defined generators? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: vector generator\nDescription: vector generator is a subclass of defined generator, indicating that every vector generator is also a defined generator. No additional constraints or unique characteristics have been specified beyond this hierarchical relationship. The purpose and specific properties of vector generator are inherited from defined generator.\nAxiom: {'subClassOf': ['defined generator']}\nGenerated CQs:", "output": "Is a vector generator classified as a type of defined generator? | Which generators fall under the defined generator category, such as vector generator? | What hierarchical categories include vector generator as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: procedure generator\nDescription: procedure generator is defined as a subclass of non-aggregate generator. This means that every procedure generator is a specific type of non-aggregate generator, inheriting all properties and constraints applicable to non-aggregate generators. No further restrictions or characteristics are provided by the current axioms.\nAxiom: {'subClassOf': ['non-aggregate generator']}\nGenerated CQs:", "output": "Does a procedure generator fall under the classification of non-aggregate generator? | Which types of generators are specific forms of non-aggregate generator, such as procedure generator? | To which broader generator categories does procedure generator belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: attribute identifier\nDescription: attribute identifier is defined as a subclass of identifier, indicating that every attribute identifier is an identifier with a specific role in distinguishing or denoting attributes within a system. This class inherits all properties associated with identifiers, but specializes them for use in the identification of attributes. No further property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "output": "Which specific types are encompassed by the identifier category, including attribute identifier? | What higher-level classes is attribute identifier associated with? | Is attribute identifier classified under the broader group of identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: parameter identifier\nDescription: parameter identifier is a subclass of identifier. This means every parameter identifier is an identifier, inheriting all its properties and characteristics, but is specifically used to denote or reference parameters (such as in functions or methods). The axiom ensures that all parameter identifiers are included within the broader category of identifiers.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "output": "Which subclasses exist under identifier, and does parameter identifier appear among them? | What general categories encompass parameter identifier as a member? | Is parameter identifier classified as a more specific instance within the category of identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: extended-value identifier\nDescription: extended-value identifier is defined as a subclass of identifier. Members of this class inherit all characteristics of identifiers, serving the purpose of uniquely distinguishing entities, but are further specified as relating to extended-value contexts. No additional property restrictions or disjointness axioms are currently asserted for this class.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "output": "What higher-level classes does extended-value identifier fall under within the identifier hierarchy? | Which subclasses of identifier encompass extended-value identifier? | Is every extended-value identifier classified as an identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: character-set identifier\nDescription: character-set identifier is defined as a subclass of identifier. This means every character-set identifier is an identifier, but with a more specific role, typically used to uniquely represent or designate different character sets within a system or context. There are no further axioms or restrictions specified for this class.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "output": "Is every character-set identifier also categorized as an identifier? | Which identifier types include character-set identifier as a specialization? | What broader classes does character-set identifier fall under in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: field identifier\nDescription: field identifier is defined as a subclass of identifier. Members of this class inherit all characteristics of identifiers, specifically representing identifiers that are associated with fields. This formalization ensures field identifiers are treated as a specialized type of identifier, typically used to uniquely reference or denote fields within a given context or system.\nAxiom: {'subClassOf': ['identifier']}\nGenerated CQs:", "output": "To which higher-level classes is field identifier related? | Does field identifier fall under the broader classification of identifier? | What specific subtypes exist within the identifier category, including field identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: date-time factor\nDescription: date-time factor is defined as a subclass of factor. This means every date-time factor is a type of factor, inheriting its general properties and constraints. No additional disjointness or property restrictions are specified, so instances of date-time factor possess all the characteristics of factors, potentially specializing in aspects related to date or time within their domain.\nAxiom: {'subClassOf': ['factor']}\nGenerated CQs:", "output": "Which higher-level categories include date-time factor? | What factors are more specific than factor, such as date-time factor? | Is date-time factor classified as a type under factor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: scaled factor\nDescription: scaled factor is defined as a subclass of factor. This means that every scaled factor is a specific kind of factor, inheriting all characteristics of factors, but may possess additional properties or constraints related to scaling, depending on further ontology specification. There are no further axioms provided, so this class serves as a specialization for factors that have been subject to scaling.\nAxiom: {'subClassOf': ['factor']}\nGenerated CQs:", "output": "What broader class does scaled factor conceptually fall under? | Is scaled factor classified as a specific kind of factor? | Which subcategories fall under factor, including scaled factor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real factor\nDescription: real factor is defined as a subclass of factor. This means every real factor is, by definition, a factor, inheriting all characteristics shared by factors in general. There are no further distinguishing restrictions or properties specified, so real factor can be understood as a type of factor without additional specified constraints.\nAxiom: {'subClassOf': ['factor']}\nGenerated CQs:", "output": "Is real factor categorized under the broader class of factor? | Which subclasses comprise the set defined by factor, including real factor? | To which general classes does real factor belong within the context of factors? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: complex factor\nDescription: complex factor is defined as a subclass of factor. This means that every complex factor is a kind of factor, inheriting all properties of the factor class. There are no additional restrictions, disjointness, or property constraints specified for complex factor in the current formalization.\nAxiom: {'subClassOf': ['factor']}\nGenerated CQs:", "output": "What are the broader class hierarchies that complex factor falls under? | Which subclasses are encompassed by factor, such as complex factor? | Does complex factor represent a specific kind under the general category of factor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: graph aggregate component\nDescription: graph aggregate component is defined as a subclass of aggregate field component. This indicates that every graph aggregate component inherits all characteristics of aggregate field components but may have additional specialized properties or constraints. Instances of this class are, therefore, specific types of aggregate field components, potentially involved in representing or handling aggregated data within a graph structure.\nAxiom: {'subClassOf': ['aggregate field component']}\nGenerated CQs:", "output": "Which aggregate field component subclasses include graph aggregate component? | What parent categories encompass graph aggregate component? | Is graph aggregate component classified under the broader category of aggregate field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: n-adic operation\nDescription: n-adic operation is defined as a subclass of characterizing operation. It represents operations that map ordered n-tuples of values—where each value may belong to a given or parameterized datatype—into a result that is also of the given or a parametric datatype. This class models operations with arity n, generalizing functions over sequences of values and emphasizing their domain and codomain datatype constraints.\nAxiom: {'subClassOf': ['characterizing operation']}\nGenerated CQs:", "output": "Which operations are specific types of characterizing operation, such as n-adic operation? | What broader operational categories include n-adic operation? | Is n-adic operation categorized under characterizing operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined generator parameter-list\nDescription: defined generator parameter-list is a subclass of list specification. This means every defined generator parameter-list is a type of list specification, inheriting all its properties and constraints. Individuals in this class are formally recognized as specialized list specifications used for defining generator parameters.\nAxiom: {'subClassOf': ['list specification']}\nGenerated CQs:", "output": "Is defined generator parameter-list categorized under list specification? | To which higher-level group does defined generator parameter-list conceptually belong? | What are the more specialized types within list specification, such as defined generator parameter-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DAG datatype generator\nDescription: DAG datatype generator is defined as a subclass of directed labeled graph datatype generator. Members of this class inherit all properties of directed labeled graph datatype generators, specializing in generating data types based on directed acyclic graph (DAG) structures. This class is used to represent systems or components that produce datatypes structured according to DAGs, ensuring acyclicity and directionality in their outputs.\nAxiom: {'subClassOf': ['directed labeled graph datatype generator']}\nGenerated CQs:", "output": "Which generators are categorized as subclasses of directed labeled graph datatype generator? | What broader datatype generator classes include DAG datatype generator? | Is DAG datatype generator classified under directed labeled graph datatype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: identifier\nDescription: identifier is defined as a subclass of information artifact entity. Members of this class represent informational constructs specifically designed to uniquely distinguish or label entities, concepts, or data within information systems. This formalization means every identifier is categorized under the broader class of information artifact entities, emphasizing its role in conveying and maintaining unique identity information.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "What types are classified under information artifact entity, including identifier? | Which higher-level categories encompass identifier? | Does identifier belong to the broader group of information artifact entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: value expression\nDescription: value expression is a subclass of information artifact entity. This means every value expression is formally classified as a type of information artifact entity, inheriting all its general properties and restrictions. No additional axioms or property restrictions are specified, so value expression is currently distinguished solely by its classification within the ontology hierarchy as a specialized form of information artifact entity.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "Which subclasses are defined within the scope of information artifact entity, such as value expression? | What general class does value expression fall under within the context of information artifact entity? | Does value expression inherit characteristics from information artifact entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: label\nDescription: label is defined as a subclass of information artifact entity, indicating that it represents a type of information artifact. Instances of this class are understood to bear, convey, or represent information, typically serving as markers or identifiers that provide descriptive or categorical details about other entities.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "Which information artifact entities include label as a subclass? | Is label a specific type of information artifact entity? | What are the more general classes that label is classified under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: directive information entity\nDescription: directive information entity is defined as a subclass of information artifact entity. This means that every directive information entity is a type of information artifact entity, with no additional property restrictions or disjointness specified. Members of this class represent entities that are informational in nature and classified within the broader category of information artifact entities.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "Is directive information entity classified under the broader group of information artifact entity? | Which specific subtypes of information artifact entity include directive information entity as a member? | What are the direct and indirect parent classes of directive information entity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: representation\nDescription: representation is defined as a subclass of information artifact entity, indicating that every instance of representation is an information-based object or artifact. This formalization situates representations within the broader context of informational entities, ensuring that they inherit all characteristic properties of information artifact entities. There are no additional property restrictions or disjointness conditions specified for this class.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "What are the broader categories that encompass representation? | Is representation a more specific type within the category of information artifact entity? | Which subclasses fall under information artifact entity, such as representation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: specification\nDescription: specification is defined as a subclass of information artifact entity. This means every specification is considered a type of information artifact, formally representing structured information or requirements typically used to describe, detail, or govern the properties or behavior of an entity, system, or process.\nAxiom: {'subClassOf': ['information artifact entity']}\nGenerated CQs:", "output": "Which entities are recognized as more specific forms of information artifact entity, including specification? | Is specification categorized under information artifact entity? | What general categories encompass specification in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: equality\nDescription: equality is defined as a subclass of datatype property, indicating that it represents a specific type of property that links individuals to data values. This classification ensures that equality is used exclusively in contexts appropriate for datatype properties, which relate individuals to literal values rather than to other individuals.\nAxiom: {'subClassOf': ['datatype property']}\nGenerated CQs:", "output": "Is equality classified as a kind of datatype property? | Which datatype properties encompass equality as a more specific type? | What are the broader property categories that include equality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: maximum-size\nDescription: maximum-size is a subclass of size, representing the largest possible or allowable extent within a given context. Any individual classified as maximum-size must also be an instance of size, specifying the upper limit or boundary in measurement or quantity.\nAxiom: {'subClassOf': ['size']}\nGenerated CQs:", "output": "Does maximum-size fall under the broader classification of size? | Which higher-level categories encompass maximum-size? | What are the specific types categorized within size, including maximum-size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: minimum-size\nDescription: minimum-size is defined as a subclass of size, indicating that it represents a more specific concept within the broader category of size. Members of this class inherit all characteristics of size, and are distinguished by representing some form of minimum or least amount within size-related contexts.\nAxiom: {'subClassOf': ['size']}\nGenerated CQs:", "output": "Does minimum-size represent a specialization of size? | Which concepts are encompassed within size and include minimum-size as a subclass? | Under which broader category is minimum-size classified? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate generator property\nDescription: aggregate generator property is defined as a subclass of quality, indicating that it represents a specialized type of quality. Members of this class inherit all characteristics of qualities, and specifically pertain to attributes or aspects associated with aggregate generators. No additional restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['quality']}\nGenerated CQs:", "output": "What are the more general categories that encompass aggregate generator property? | Which property types fall under the superclass quality, including aggregate generator property? | Is every aggregate generator property classified under the broader category of quality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: datatype property\nDescription: datatype property is defined as a subclass of quality, indicating that each instance of datatype property inherits characteristics associated with quality. This classification suggests that datatype properties are viewed as specific types of qualities within the ontology.\nAxiom: {'subClassOf': ['quality']}\nGenerated CQs:", "output": "Which properties are classified as more specific than quality, including datatype property? | Does every datatype property fall under the category of quality? | To which upper-level categories does datatype property belong within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: subtype generator\nDescription: subtype generator is defined as a subclass of datatype generator, indicating that every instance of subtype generator is also an instance of datatype generator. This classification specifies that subtype generators operate within the broader framework of datatype generators but may provide more specialized or refined functionality. No additional disjointness or property restrictions are specified.\nAxiom: {'subClassOf': ['datatype generator']}\nGenerated CQs:", "output": "Which generators are classified under datatype generator, including subtype generator? | Is subtype generator an example of datatype generator? | What general generator categories encompass subtype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: date-time unit\nDescription: date-time unit is defined as a subclass of label, indicating that it represents a specific type of label used to denote units of time such as seconds, minutes, or hours in the context of date and time. No additional constraints or disjointness are specified, so its primary distinguishing feature is its specialization from the broader category of label.\nAxiom: {'subClassOf': ['label']}\nGenerated CQs:", "output": "Is date-time unit encompassed within the hierarchy of label? | What specific subclasses are classified under label, such as date-time unit? | Which concept categories does date-time unit derive from, including label? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: date-time radix\nDescription: date-time radix is defined as a subclass of radix. This indicates that any instance of date-time radix inherits all characteristics of radix, while potentially adding more specific constraints or properties relevant to date and time representation bases. No further description or property restrictions are provided.\nAxiom: {'subClassOf': ['radix']}\nGenerated CQs:", "output": "What larger categories does date-time radix fall under in this ontology? | Which specialized forms are encompassed by the class radix, such as date-time radix? | Is date-time radix classified under the broader group of radix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: complex radix\nDescription: complex radix is a subclass of radix. This means every complex radix is a type of radix, inheriting all the general properties of radix. There are no additional property restrictions or disjointness axioms specified, so complex radix is simply categorized as a specialized form within the broader radix class.\nAxiom: {'subClassOf': ['radix']}\nGenerated CQs:", "output": "What are the parent categories that encompass complex radix? | Which specific types fall under the broader class of radix? | Is complex radix classified as a subtype under the category of radix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real radix\nDescription: real radix is a subclass of radix, representing those members of radix that have the property of being real. Every real radix is formally included in the broader category of radix, but may possess additional distinguishing characteristics specifying real-valued properties. No further property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['radix']}\nGenerated CQs:", "output": "Which specific types are categorized within radix, such as real radix? | What general classifications encompass real radix? | Does real radix fall under the broader classification of radix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: scaled radix\nDescription: scaled radix is defined as a subclass of radix. This means every instance of scaled radix is also considered a radix. No additional property restrictions or disjointness axioms are specified, so a scaled radix inherits all characteristics of radix, potentially with further differentiation implied by its name or use context.\nAxiom: {'subClassOf': ['radix']}\nGenerated CQs:", "output": "Which classifications are recognized as specializations of radix, such as scaled radix? | To which overarching categories is scaled radix assigned within the taxonomy? | Does scaled radix fall under the broader concept of radix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: factor\nDescription: factor is defined as a subclass of value expression, indicating that every instance of factor is also recognized as a value expression. There are no additional restrictions or disjointness axioms specified, so factor inherits all characteristics of value expressions without further constraints.\nAxiom: {'subClassOf': ['value expression']}\nGenerated CQs:", "output": "Does every factor represent a form of value expression? | Which entities are classified under value expression, such as factor? | To which broader classifications does factor belong within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: radix\nDescription: radix is defined as a subclass of value expression. This indicates that any radix is a specific kind of value expression, inheriting all characteristics of value expressions and further specializing their meaning, typically referring to the numerical base in mathematical or computational contexts.\nAxiom: {'subClassOf': ['value expression']}\nGenerated CQs:", "output": "Can radix be classified as a kind of value expression? | What are the general categories that radix is a member of within the ontology? | Which entities are subclasses under value expression, such as radix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bound\nDescription: bound is defined as a subclass of value expression, indicating that every instance of bound is also considered a value expression. No further restrictions or disjointness axioms are specified, so the defining characteristic of the bound class is its inheritance from value expression.\nAxiom: {'subClassOf': ['value expression']}\nGenerated CQs:", "output": "Which subclasses fall under value expression, and does bound appear among them? | What general class hierarchies encompass bound, considering its relation to value expression? | Is value expression a broader category that includes bound as a more specific concept? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: edge component\nDescription: edge component is defined as a subclass of graph aggregate component. This means that every edge component is a specialized type of graph aggregate component, inheriting all its characteristics. The class represents a distinct part or module within the broader category of aggregated components in graph structures. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['graph aggregate component']}\nGenerated CQs:", "output": "To what broader structural groups does edge component pertain? | Which components are classified as specializations of graph aggregate component, specifically noting edge component? | Is edge component included within the hierarchy of graph aggregate component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled dataset descriptive field component\nDescription: labeled dataset descriptive field component is defined as a subclass of field component. This means every labeled dataset descriptive field component is by definition a type of field component. No additional property restrictions or disjointness constraints are specified, so its unique characterization is its specialization of the more general field component class.\nAxiom: {'subClassOf': ['field component']}\nGenerated CQs:", "output": "What categories encompass labeled dataset descriptive field component as a more specific element? | Which components are more specific exemplars of field component, including labeled dataset descriptive field component? | Is every labeled dataset descriptive field component classified under the field component category? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled dataset target field component\nDescription: labeled dataset target field component is defined as a subclass of field component. This means every labeled dataset target field component is a specific type of field component, typically representing the target variable in a labeled dataset. No additional property or disjointness restrictions are specified for this class.\nAxiom: {'subClassOf': ['field component']}\nGenerated CQs:", "output": "Which entities are classified as field component subclasses, such as labeled dataset target field component? | To which broader groups does labeled dataset target field component belong within the hierarchy of field component? | Is every labeled dataset target field component a specific kind of field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: add operation\nDescription: add operation is defined as a subclass of dyadic arithmetic operation, indicating that it is an arithmetic operation that takes exactly two arguments. This formalization positions add operation within the hierarchy of arithmetic functions involving pairs of inputs, such as addition in standard mathematics.\nAxiom: {'subClassOf': ['dyadic aritmetic operation']}\nGenerated CQs:", "output": "Which operations are subclasses of dyadic arithmetic operation, such as add operation? | Does the add operation fall under the category of dyadic arithmetic operations? | What broader classifications include add operation as a specific example? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: multiply operation\nDescription: multiply operation is defined as a subclass of dyadic arithmetic operation, indicating that it is an arithmetic operation involving exactly two operands. Instances of this class perform multiplication, processing two input values to produce their product.\nAxiom: {'subClassOf': ['dyadic aritmetic operation']}\nGenerated CQs:", "output": "Is multiply operation categorized under dyadic arithmetic operation? | What broader classes encompass multiply operation in the context of arithmetic operations? | Which operations are defined as specializations of dyadic arithmetic operation, such as multiply operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Divide:scaled\nDescription: Divide:scaled is defined as a subclass of dyadic arithmetic operation. This indicates that it represents an arithmetic operation involving two inputs (operands). No further description or distinguishing constraints are specified by the current axioms, so its meaning is inherited from the broader category of dyadic arithmetic operations.\nAxiom: {'subClassOf': ['dyadic aritmetic operation']}\nGenerated CQs:", "output": "Which broader arithmetic operation classes include Divide:scaled as a specialized form? | What specific operations are subclasses of dyadic arithmetic operation, and does Divide:scaled appear among them? | Is Divide:scaled categorized under dyadic arithmetic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: delete operation\nDescription: delete operation is a subclass of dyadic updating operation. This means that every delete operation is considered a specific type of updating operation that involves two entities (typically an object and context). The axiom establishes the hierarchical relationship, indicating that delete operation inherits all structural characteristics of dyadic updating operations.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "What operations belong under the broader category of dyadic updating operation, specifically including delete operation? | Which higher-level operation types encompass delete operation in their hierarchy? | Is every delete operation classified as a kind of dyadic updating operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: insert operation\nDescription: insert operation is defined as a subclass of dyadic updating operation. This means that every insert operation is considered a specific type of dyadic updating operation, typically involving two entities and resulting in an update. No further distinguishing characteristics or property restrictions are specified.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "What broader operational categories does insert operation fall under? | Is insert operation classified as a kind of dyadic updating operation? | Which specific operations are recognized under the category of dyadic updating operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Append:sequence\nDescription: Append:sequence is defined as a subclass of dyadic updating operation, meaning it is a specific type of operation that updates data by taking two inputs. This class formalizes the concept of appending one sequence to another as an update, inheriting the general properties of dyadic updating operations.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "Is Append:sequence classified as a specialized form of dyadic updating operation? | Which operations are categorized under dyadic updating operation, such as Append:sequence? | What are the broader classes that encompass Append:sequence? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AttributeFunctionOverride:class\nDescription: AttributeFunctionOverride:class is defined as a subclass of dyadic updating operation. This indicates that any member of AttributeFunctionOverride:class represents a special kind of operation within the scope of dyadic updating, where typically two entities are involved in an updating process. Without further restriction or description, all instances of this class inherit the structural and semantic characteristics of dyadic updating operations.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "Does AttributeFunctionOverride:class fall under the broader category of dyadic updating operation? | What overarching types does AttributeFunctionOverride:class inherit from within the ontology? | Which types exhibit a more specific scope than dyadic updating operation, such as AttributeFunctionOverride:class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AttributeReplace:class\nDescription: AttributeReplace:class is defined as a subclass of dyadic updating operation. This means it represents a type of operation that updates data by replacing an attribute, and, as a dyadic operation, it involves two input entities. No further restrictions, disjointness, or property constraints are specified in the axiom, so its primary characterization is as a specialized updating action within the context of dyadic operations.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "Is AttributeReplace:class categorized under the broader group of dyadic updating operations? | What are the higher-level classes that encompass AttributeReplace:class? | Which concepts are more specific forms of dyadic updating operation, such as AttributeReplace:class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FieldReplace:record\nDescription: FieldReplace:record is defined as a subclass of dyadic updating operation. This means that it represents a specific type of updating operation involving two arguments or entities. As a subclass, FieldReplace:record inherits all the general characteristics of dyadic updating operations and is further specialized to represent operations where a field in a record is replaced or updated. No additional restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['dyadic updating operation']}\nGenerated CQs:", "output": "What higher-level operation types encompass FieldReplace:record? | Which dyadic updating operation subclasses include FieldReplace:record? | Is FieldReplace:record categorized under the group of dyadic updating operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: difference operation\nDescription: difference operation is defined as a subclass of dyadic operation, indicating it is a mathematical operation that requires exactly two operands. As a specific type of dyadic operation, the difference operation computes the result by evaluating the \"difference\" between its two input elements, distinguishing it from other dyadic operations such as sum or product.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Which operations are classified as more specific types under dyadic operations, including difference operations? | What broader operation categories encompass the difference operation? | Does the class of difference operations fall within the broader group of dyadic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic select operation\nDescription: dyadic select operation is defined as a subclass of dyadic operation, signifying that it is a binary operation acting on two operands. No additional constraints or distinguishing characteristics are specified beyond its membership in the broader class of dyadic operations.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Is every dyadic select operation also classified as a dyadic operation? | Which specialized operations fall under the category of dyadic operation, including dyadic select operation? | To what broader classes does dyadic select operation belong within the operation hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic aritmetic operation\nDescription: dyadic arithmetic operation is defined as a subclass of dyadic operation, indicating that every dyadic arithmetic operation involves exactly two inputs (operands). This class specifically focuses on operations in the arithmetic domain (such as addition, subtraction, multiplication, or division), extending the more general concept of dyadic operations by emphasizing their application to arithmetic computations.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "What other subclasses fall under dyadic operation alongside dyadic arithmetic operation? | Is every dyadic arithmetic operation classified under dyadic operation? | Which broader classes include dyadic arithmetic operation within their hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic logical operation\nDescription: dyadic logical operation is defined as a subclass of dyadic operation, meaning it is an operation that takes exactly two inputs. This class specifically refers to logical operations (such as AND, OR, XOR) applied to two operands, distinguishing it from other kinds of dyadic operations that may not be logical in nature.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "What are the broader categories that encompass dyadic logical operation? | Does every dyadic logical operation fall under the category of dyadic operation? | Which specific operations are classified as subclasses of dyadic operation, including dyadic logical operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic set operation\nDescription: dyadic set operation is defined as a subclass of dyadic operation. This class encompasses operations that act on two sets as inputs. Members of this class must satisfy all properties of dyadic operations, specifically within the context of set-theoretic functions or relations.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Which specific types fall under the class dyadic operation, such as dyadic set operation? | What categories are broader than dyadic set operation, including dyadic operation? | Is every dyadic set operation also classified as a dyadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic updating operation\nDescription: dyadic updating operation is defined as a subclass of dyadic operation, indicating that it involves two operands. While specific characteristics are not provided, this class inherits all properties of dyadic operations, typically meaning it operates on pairs of entities or values.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Does dyadic updating operation represent a specialized form of dyadic operation? | Which operations are encompassed by the broader class of dyadic operation, including dyadic updating operation? | Under which more general operation classifications does dyadic updating operation fall? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic comparison operation\nDescription: dyadic comparison operation is a subclass of dyadic operation. This class encompasses operations that involve two arguments and perform a comparative evaluation between them. Members of this class, as dyadic operations, specifically relate to comparison tasks (such as \"greater than\", \"less than\", or \"equal to\") applied to pairs of inputs.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "Which broader categories encompass dyadic comparison operation? | What specific operations are classified under dyadic operation, including dyadic comparison operation? | Are all dyadic comparison operations types of dyadic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dyadic retrieve operation\nDescription: dyadic retrieve operation is defined as a subclass of dyadic operation, indicating it is an operation that acts on exactly two inputs or entities. No further distinguishing axioms or properties are specified, so its classification relies solely on this generalization.\nAxiom: {'subClassOf': ['dyadic operation']}\nGenerated CQs:", "output": "What broader classes does dyadic retrieve operation belong to within the operation hierarchy? | Does every dyadic retrieve operation fall under the category of dyadic operation? | Which types of operations are more specific than dyadic operation, such as dyadic retrieve operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: equal operation\nDescription: equal operation is defined as a subclass of dyadic comparison operation. This class represents operations that perform a comparison between two entities and evaluate whether they are equal. As a refinement of dyadic comparison operation, equal operation specifically focuses on checking and indicating equality between two operands or values.\nAxiom: {'subClassOf': ['dyadic comparison operation']}\nGenerated CQs:", "output": "Is equal operation classified as a type of dyadic comparison operation? | To which broader operational classes does equal operation belong? | What operations fall under the category of dyadic comparison operation, such as equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: in order operation\nDescription: in order operation is defined as a subclass of dyadic comparison operation, indicating that it represents a specific type of comparison involving two entities. As a specialized comparison operation, in order operation inherits all characteristics of dyadic comparison operations but further constrains its meaning to those operations that assess or evaluate entities with respect to their sequence or ordering.\nAxiom: {'subClassOf': ['dyadic comparison operation']}\nGenerated CQs:", "output": "Does in order operation fall under the category of dyadic comparison operation? | What broader operation types encompass in order operation? | Which operations are recognized as specializations of dyadic comparison operation, such as in order operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: isEmpty operation\nDescription: isEmpty operation is defined as a subclass of boolean operation. This indicates that it represents a type of boolean operation, specifically one that evaluates a condition and returns a boolean value. No further restrictions or characteristics are provided by the axiom, so its primary purpose within the ontology is to serve as a specialized form of boolean operation.\nAxiom: {'subClassOf': ['boolean operation']}\nGenerated CQs:", "output": "What broader operation categories encompass isEmpty operation within the ontology? | Are all isEmpty operations classified under the category of boolean operations? | Which operations are considered specializations of boolean operation, such as isEmpty operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: nonNegative operation\nDescription: nonNegative operation is a subclass of boolean operation. Any instance of nonNegative operation is, by definition, a type of boolean operation, inheriting all related properties and constraints. This classification indicates that nonNegative operation participates in logical or truth-value manipulations typical of boolean operations, but may have additional distinguishing characteristics defined outside of the given axioms.\nAxiom: {'subClassOf': ['boolean operation']}\nGenerated CQs:", "output": "Is every nonNegative operation encompassed within the category of boolean operation? | To which broader operation types does nonNegative operation belong? | Which operations are more specific instances of boolean operation, such as nonNegative operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SetOf:set\nDescription: SetOf:set is defined as a subclass of boolean operation, indicating that it represents a form of operation consistent with the principles of Boolean logic. Members of this class inherit properties and constraints applicable to boolean operations. No further description is provided, so the class is formally understood as a type of boolean operation.\nAxiom: {'subClassOf': ['boolean operation']}\nGenerated CQs:", "output": "Does SetOf:set represent a subclass within the domain of boolean operation? | Which boolean operations include SetOf:set as a more specific category? | What are the more general classes that SetOf:set belongs to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: negate operation\nDescription: negate operation is defined as a subclass of monadic operation, meaning it represents an operation that acts on a single operand. As a monadic operation, negate operation typically involves transforming or inverting the value of its sole input.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Is every negate operation encompassed within the category of monadic operations? | To which higher-level operation classes does negate operation pertain? | Which types of operations are classified as specializations of monadic operation, including negate operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: promote operation\nDescription: promote operation is classified as a subclass of monadic operation. This indicates that promote operation is an operation involving a single operand or argument, inheriting all characteristics associated with monadic operations. No further distinguishing features or constraints are specified beyond its classification within this hierarchy.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What specific operations are subclasses of monadic operation, including promote operation? | Which broader categories encompass promote operation? | Does promote operation fall under the general category of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: serialize operation\nDescription: serialize operation is defined as a subclass of monadic operation. This means every serialize operation is, by definition, a type of monadic operation, inheriting its general behaviors and properties. There are no additional restrictions or relationships specified.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Is serialize operation classified under the broader category of monadic operation? | Which general operation categories encompass serialize operation? | What specific types of monadic operation include serialize operation as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: successor operation\nDescription: successor operation is defined as a subclass of monadic operation. This means that every successor operation is a type of operation that acts on a single argument. No additional restrictions or characteristics are specified, so the class inherits all properties of monadic operations.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What higher-level operation categories does successor operation belong to? | Is successor operation included in the set of operations classified as monadic operation? | Which specific operations fall under the more general category of monadic operation, such as successor operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cast:choice\nDescription: Cast:choice is defined as a subclass of monadic operation, indicating that it inherits all characteristics of monadic operations. This classification ensures that any instance of Cast:choice is considered a specific type of monadic operation, although further distinguishing properties or restrictions are not specified in the given axioms or description.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Does Cast:choice fall under the category of monadic operation? | Which operations are classified as specializations of monadic operation, such as Cast:choice? | To which more general operation classes does Cast:choice belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Dereference:pointer\nDescription: Dereference:pointer is defined as a subclass of monadic operation. This means it represents a specific kind of monadic operation, typically referring to an action that takes a single operand and retrieves the value or object being pointed to by a pointer. Individuals of this class inherently possess the characteristics and constraints of monadic operations.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What general operation categories encompass Dereference:pointer? | Which specific operations are subclasses of monadic operation, such as Dereference:pointer? | Is Dereference:pointer categorized as a type of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Discriminant:choice\nDescription: Discriminant:choice is defined as a subclass of monadic operation, indicating that it represents a specific type of operation that acts upon a single operand or input. No further restrictions or disjointness axioms are specified, so it inherits all characteristics of monadic operation while introducing the notion of 'choice' as its distinguishing feature.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "To what higher-level operational categories does Discriminant:choice belong? | Which concepts are more specifically classified than monadic operation, for example, Discriminant:choice? | Is Discriminant:choice categorized under the broader concept of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Extend:time&date\nDescription: Extend:time&date is defined as a subclass of monadic operation, indicating that it represents a single-argument operation within the ontology. No further restrictions or characteristics are specified beyond its placement in the class hierarchy as a specialized form of monadic operation.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What broader category does Extend:time&date belong to within the classification of operations? | Which operations are included as subclasses under monadic operation, such as Extend:time&date? | Is Extend:time&date a specific type of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Invoke:procedure\nDescription: Invoke:procedure is defined as a subclass of monadic operation, indicating that it represents a specific type of operation with a single argument or operand. This classification situates Invoke:procedure within the hierarchy of operations, emphasizing its functionality as a specialized, unary process. No further restrictions or disjoint relationships are specified.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What specific operations are included as subclasses of monadic operation, such as Invoke:procedure? | Which more general concepts is Invoke:procedure classified under within the ontology? | Is Invoke:procedure categorized under the broader class of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Not:boolean\nDescription: Not:boolean is defined as a subclass of monadic operation, indicating that it is a single-argument logical operation. Members of this class represent logical operations that act on one boolean input to produce a boolean output, specifically performing logical negation.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Does Not:boolean fall under the category of monadic operation? | What are the more general operation types that encompass Not:boolean? | Which operations are classified as subclasses of monadic operation, including Not:boolean? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: monadic aritmetic operation\nDescription: monadic arithmetic operation is defined as a subclass of monadic operation. This means any instance of this class is a monadic operation (an operation with a single operand) specifically within the domain of arithmetic. It inherits all characteristics of monadic operations, restricted to those that perform arithmetic functions. No additional distinguishing axioms or constraints are currently specified.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Is monadic arithmetic operation a specific kind of monadic operation? | Which operations are direct specializations of monadic operation, such as monadic arithmetic operation? | To which broader categories does monadic arithmetic operation belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: monadic retrive operation\nDescription: monadic retrieve operation is defined as a subclass of monadic operation. This means every monadic retrieve operation is a type of monadic operation, inheriting all its characteristics. No further property or restriction axioms are specified, so its definition is limited to this hierarchical relationship.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What more general types does monadic retrive operation fall under? | Is monadic retrive operation classified within the broader group of monadic operation? | Which specific operations are encompassed by the category monadic operation, such as monadic retrive operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: map operation\nDescription: map operation is defined as a subclass of monadic operation. This indicates that every map operation is itself a type of monadic operation, inheriting its general properties. The map operation typically represents an action that applies a given function to each element within a structure (such as a list, set, or collection), producing a new structure of the same form with the results. No additional constraints or disjointness axioms are specified.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "What more general types include map operation as a member within their hierarchy? | Does map operation fall under the category of monadic operation? | Which operations are classified as specializations of monadic operation, such as map operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boolean operation\nDescription: boolean operation is defined as a subclass of monadic operation. This indicates that every boolean operation is a kind of monadic operation, typically involving a single argument and producing a boolean output (true or false). The class encompasses operations that act on one operand and yield a binary (boolean) result.\nAxiom: {'subClassOf': ['monadic operation']}\nGenerated CQs:", "output": "Which operation types are defined as more specific forms within monadic operation, such as boolean operation? | Into which broader operation classes does boolean operation fall? | Is every boolean operation classified as a type of monadic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: reciprocial operation\nDescription: reciprocal operation is formally defined as a subclass of monadic arithmetic operation, meaning it is an arithmetic operation that acts on a single operand. This class captures operations whose primary purpose is to return the multiplicative inverse (reciprocal) of their input value.\nAxiom: {'subClassOf': ['monadic aritmetic operation']}\nGenerated CQs:", "output": "Is every reciprocial operation classified under monadic aritmetic operation? | What types of operations are subsumed by monadic aritmetic operation, specifically including reciprocial operation? | Which broader arithmetic operation categories encompass reciprocial operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: round operation\nDescription: round operation is defined as a subclass of monadic arithmetic operation. This means every round operation acts on a single numerical input to produce its output, characterizing it as a unary arithmetic process, such as rounding a number to the nearest integer.\nAxiom: {'subClassOf': ['monadic aritmetic operation']}\nGenerated CQs:", "output": "Which operations are classified under monadic aritmetic operation, including round operation? | To which broader operation classes does round operation conceptually relate? | Is round operation categorized as a type of monadic aritmetic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SquareRoot:complex\nDescription: SquareRoot:complex is defined as a subclass of monadic arithmetic operation, indicating that it represents an arithmetic operation involving only one operand (monadic) in the context of complex numbers. This class formalizes the concept of computing the square root specifically within the domain of complex arithmetic.\nAxiom: {'subClassOf': ['monadic aritmetic operation']}\nGenerated CQs:", "output": "Which operations are subclasses of monadic aritmetic operation, such as SquareRoot:complex? | Is SquareRoot:complex classified as a specific kind of monadic aritmetic operation? | What more general categories encompass SquareRoot:complex in the context of arithmetic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: monadic select operation\nDescription: monadic select operation is defined as a subclass of monadic retrieve operation. This means every monadic select operation is a type of monadic retrieve operation, inheriting its essential characteristics. No additional property restrictions or disjointness constraints are specified; thus, its definition is strictly as a specialized form of monadic retrieve operation with no further distinguishing axioms.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "Which operations fall under the specialization of monadic retrive operation, such as monadic select operation? | Is monadic select operation categorized as a kind of monadic retrive operation? | To which parent operation class does monadic select operation belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AttributeFunctionInvocation:class\nDescription: AttributeFunctionInvocation:class is defined as a subclass of monadic retrieve operation. This indicates that any instance of AttributeFunctionInvocation:class inherits the characteristics of a monadic retrieve operation, meaning it represents an operation that retrieves a value based on a single operand or argument. The class is intended to capture invocations related to retrieving attributes in a functional, monadic manner.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "What broader operation categories encompass AttributeFunctionInvocation:class? | Which specialized forms of monadic retrive operation exist, including AttributeFunctionInvocation:class? | Is AttributeFunctionInvocation:class classified under the general category of monadic retrieve operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AttributeSelect:class\nDescription: AttributeSelect:class is defined as a subclass of monadic retrieve operation. This means that any instance of AttributeSelect:class represents a specific type of retrieval operation that acts on a single operand to extract or select an attribute. By inheriting from monadic retrieve operation, AttributeSelect:class is characterized by supporting retrieval actions that involve one input and are focused on obtaining attribute-level data.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "Which operations encompass AttributeSelect:class as a specific type within monadic retrieve operations? | Is AttributeSelect:class classified under monadic retrieve operation? | To what broader categories related to retrieval does AttributeSelect:class belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FieldSelect:record\nDescription: FieldSelect:record is defined as a subclass of monadic retrieve operation, meaning it represents a specialized form of retrieval operation within a monadic (single-argument or single-result) context. No additional restrictions or properties are specified, so any instance of FieldSelect:record is also an instance of monadic retrieve operation, inheriting all its characteristics.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "Is FieldSelect:record classified as a specialized form of monadic retrive operation? | Which monadic retrive operation subclasses encompass FieldSelect:record? | What more general operations does FieldSelect:record inherit properties from? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Head:sequence\nDescription: Head:sequence is defined as a subclass of monadic retrieve operation. This means that every instance of Head:sequence is also considered a monadic retrieve operation, inheriting its fundamental characteristics and constraints. The class does not specify additional axioms or restrictions beyond this hierarchical relationship.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "Does Head:sequence fall under the broader classification of monadic retrive operation? | To which general operational categories does Head:sequence belong? | Which operations are considered more specific variants of monadic retrive operation, such as Head:sequence? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Tail:sequence\nDescription: Tail:sequence is defined as a subclass of monadic retrieve operation. This classification means that any individual instance of Tail:sequence is also a type of monadic retrieve operation, inheriting its foundational characteristics. In the absence of further description or additional axioms, Tail:sequence is interpreted as a specific kind of retrieval operation within a monadic context, implying it operates under the rules and structure of monads—commonly used in functional programming and computational logic for chaining operations.\nAxiom: {'subClassOf': ['monadic retrive operation']}\nGenerated CQs:", "output": "Does Tail:sequence fall under the category of monadic retrive operation? | What broader operation categories include Tail:sequence? | Which operations are considered more specific forms of monadic retrive operation, such as Tail:sequence? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: countable\nDescription: countable is defined as a subclass of cardinality, indicating that it represents a specific type of cardinality. Members of the countable class are characterized by having a cardinality that can be matched with the set of natural numbers, distinguishing them from other forms of cardinality.\nAxiom: {'subClassOf': ['cardinality']}\nGenerated CQs:", "output": "To which general concepts does the class countable belong? | Is every countable entity also classified under cardinality? | Which types are included under the broader category of cardinality, including countable? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: finite\nDescription: finite is a subclass of cardinality, indicating that it represents the concept of cardinalities that are limited or bounded. Any individual classified as finite is, by definition, also a cardinality but with the additional constraint that its size is not infinite.\nAxiom: {'subClassOf': ['cardinality']}\nGenerated CQs:", "output": "What are the more general classes associated with finite? | Which subtypes are encompassed by cardinality, including finite? | Is finite categorized under the broader concept of cardinality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: uncountable\nDescription: uncountable is defined as a subclass of cardinality, indicating that it represents a specific type of cardinality. Members of the uncountable class are those cardinalities that cannot be placed into a one-to-one correspondence with the natural numbers, distinguishing them from countable cardinalities.\nAxiom: {'subClassOf': ['cardinality']}\nGenerated CQs:", "output": "Does uncountable represent a more specific form under the general concept of cardinality? | What types of cardinality include uncountable as a subclass? | Into which broader classes does uncountable fall within the cardinality hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bounded below\nDescription: bounded below is a subclass of bounded, representing entities that possess the property of being bounded in a particular way—specifically, from below. Any member of bounded below is, by definition, also a member of bounded.\nAxiom: {'subClassOf': ['bounded']}\nGenerated CQs:", "output": "Which concepts are more specific than bounded, such as bounded below? | What broader categories does bounded below belong to within the ontology? | Is every instance of bounded below also an instance of bounded? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unbounded below\nDescription: unbounded below is defined as a subclass of unbounded, meaning every instance of unbounded below is also an instance of unbounded. This class represents entities that specifically possess the characteristic of being unbounded on their lower side or extent, while inheriting all properties and restrictions from the broader unbounded class.\nAxiom: {'subClassOf': ['unbounded']}\nGenerated CQs:", "output": "What specific concepts are considered subclasses of unbounded, such as unbounded below? | Is unbounded a broader class that encompasses unbounded below? | Which higher-level categories include unbounded below? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unbounded\nDescription: unbounded is defined as a subclass of boundedness. This indicates that unbounded is a specific type or form of boundedness, and any instance of unbounded is also considered an instance of boundedness. No additional property restrictions or disjointness axioms are specified, so the class is distinguished solely by its hierarchical relation.\nAxiom: {'subClassOf': ['boundedness']}\nGenerated CQs:", "output": "Is unbounded a specialized concept within the broader class of boundedness? | To which more general categories does unbounded belong? | Which subclasses fall under the category of boundedness, including unbounded? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: exact\nDescription: exact is defined as a subclass of exactness, indicating that any instance of exact exhibits all characteristics associated with exactness. No additional constraints or distinguishing axioms are specified for this class.\nAxiom: {'subClassOf': ['exactness']}\nGenerated CQs:", "output": "Under which broader categories does exact fall within the ontology? | What is the hierarchical connection between exact and exactness? | Which classes are subsumed by exactness, including exact? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-numeric\nDescription: non-numeric is defined as a subclass of numericalness, indicating that every instance of non-numeric falls under the broader concept of numericalness. This class is intended to capture entities that are related to numericalness but are explicitly characterized by the absence of numeric value or representation.\nAxiom: {'subClassOf': ['numericalness']}\nGenerated CQs:", "output": "Does non-numeric fall under the broader classification of numericalness? | What are the broader categories that non-numeric is a part of within this ontology? | Which subclasses does numericalness encompass, specifically including non-numeric? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-ordered\nDescription: non-ordered is defined as a subclass of order. This means that every instance of non-ordered is also an instance of order, but represents a specialized form or category within the broader concept of order. No additional property restrictions or disjointness axioms are specified, so the class is distinguished solely by its hierarchical position as a subclass.\nAxiom: {'subClassOf': ['order']}\nGenerated CQs:", "output": "What categories fall under order as subclasses, including non-ordered? | Can non-ordered be classified under the concept of order? | Which broader types encompass non-ordered within the ontology structure? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:complex\nDescription: Add:complex is defined as a subclass of add operation, indicating that it represents a specific form of addition within the broader category of add operations. This formalization establishes that every instance of add:complex is also inherently an add operation, possibly specialized for use with complex numbers or structures, depending on further specification.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "output": "What broader classes encompass Add:complex within the ontology? | Which types of add operation include Add:complex as a specialization? | Does Add:complex fall under the category of add operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:integer\nDescription: Add:integer is defined as a subclass of add operation, indicating that it specifically represents addition operations where the operands are integers. Any individual that is an instance of Add:integer is inherently an add operation, but specialized for use with integer values.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "output": "Is Add:integer categorized under add operation in the ontology? | Which broader groups encompass Add:integer within the classification hierarchy? | What operations are more specific than add operation, including Add:integer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:rational\nDescription: Add:rational is defined as a subclass of add operation, indicating that it represents a specialized type of addition focused on rational numbers. This class inherits all characteristics of add operations and is formally distinguished as pertaining to the addition of rational values.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "output": "Is add operation a broader class encompassing Add:rational? | What kinds of add operation exist as subclasses, such as Add:rational? | Which general classification does Add:rational fall under in the context of operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:real\nDescription: Add:real is defined as a subclass of add operation. This means that every instance of Add:real is an add operation, specifically focused on real numbers. The class inherits all the characteristics of generic add operations, but may specify additional constraints or behaviors relevant to addition in the domain of real numbers. No further restrictions or disjointness axioms are asserted.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "output": "What operations fall under the subclass Add:real within add operation? | Is Add:real categorized as a type of add operation? | Which parent concepts encompass Add:real? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Add:scaled\nDescription: scaled is defined as a subclass of add operation. This means that any scaled operation is recognized as a specific type of add operation, inheriting all characteristics of add operations while potentially introducing its own specialized behavior or constraints. No further disjointness or property restrictions are specified for this class.\nAxiom: {'subClassOf': ['add operation']}\nGenerated CQs:", "output": "Is add:scaled categorized as a specialized form of add operation? | What broader operations include add:scaled as a member? | Which subtypes are encompassed by add operation, including add:scaled? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Delete:table\nDescription: Delete:table is defined as a subclass of delete operation. This means that every instance of Delete:table is a specific type of delete operation, inheriting all characteristics of delete operations, and representing deletion actions applied at the table level.\nAxiom: {'subClassOf': ['delete operation']}\nGenerated CQs:", "output": "Which operations are classified as subtypes of delete operation, such as Delete:table? | What broader operation category encompasses Delete:table? | Is Delete:table categorized under delete operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Difference:time&date\nDescription: Difference:time&date is defined as a subclass of difference operation. This class represents operations specifically focused on calculating the difference between temporal values such as times or dates, distinguishing it from other types of difference operations. Members of this class inherit all properties and constraints associated with difference operations, but are restricted to application within time and date contexts.\nAxiom: {'subClassOf': ['difference operation']}\nGenerated CQs:", "output": "Which higher-level operations does Difference:time&date fall under within the ontology? | Is Difference:time&date categorized as a type of difference operation? | What difference operations have Difference:time&date as a more specific subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Select:table\nDescription: Select:table is defined as a subclass of dyadic select operation, indicating that it represents a specific type of select operation involving two inputs or components. This class inherits all the characteristics and constraints of dyadic select operations, and any instance of Select:table is, by definition, also an instance of a dyadic select operation. No additional restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['dyadic select operation']}\nGenerated CQs:", "output": "What are the specific select operations categorized under dyadic select operation, such as Select:table? | Which higher-level categories does Select:table fall under within the ontology? | Is Select:table classified as a type of dyadic select operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:array\nDescription: Equal:array is defined as a subclass of equal operation. This means Equal:array represents a specific type of equality operation, typically involving arrays, and inherits all the general characteristics of equal operations. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "What broader operation categories include Equal:array as a specialized form? | Which operations are specified as subclasses within equal operation? | Is Equal:array classified under equal operation in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:bag\nDescription: Equal:bag is defined as a subclass of equal operation, indicating that it represents a specific type of equality evaluation or operation. Any instance of Equal:bag inherits all characteristics of equal operation, positioning it within the broader context of equality comparisons. There are currently no additional restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Is Equal:bag classified under the category of equal operation? | What specific operations are subsumed by equal operation, including Equal:bag? | Which higher-level operation categories encompass Equal:bag? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:boolean\nDescription: Equal:boolean is a subclass of equal operation, representing operations that specifically check or enforce equality between two boolean values. Any individual of this class is an instance of an equal operation, with its domain restricted to boolean-type operands.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Into which broader categories can Equal:boolean be grouped? | Which concepts are classified as more specific versions under equal operation, including Equal:boolean? | Does Equal:boolean represent a specialized type of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:character\nDescription: Equal:character is defined as a subclass of equal operation. This means every instance of Equal:character represents a specific kind of equality operation, likely focused on comparing characters. Since it inherits all characteristics of equal operation, Equal:character is used where character equality checks are required.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "What are the parent classes for Equal:character within the ontology? | Is Equal:character classified as a kind of equal operation? | Which specific operations fall under the category of equal operation, such as Equal:character? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:choice\nDescription: Equal:choice is a subclass of equal operation, indicating that each instance of Equal:choice is a specialized form of equal operation. No additional restrictions, disjointness, or property constraints are defined for this class, so its characterization is derived solely from its position in the class hierarchy.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which operations are considered specializations of equal operation, including Equal:choice? | Is Equal:choice classified under the broader category of equal operation? | What more general categories encompass Equal:choice within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:class\nDescription: Equal:class is defined as a subclass of equal operation, indicating that every instance of Equal:class is a specific type of equal operation. This formalization ensures that any individual classified as Equal:class must also satisfy the properties and constraints of equal operations within the ontology.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Is Equal:class categorized under equal operation? | Which specific types are classified beneath equal operation, including Equal:class? | What operations are broader in scope than Equal:class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:complex\nDescription: Equal:complex is defined as a subclass of equal operation. This means that every instance classified as Equal:complex is, by definition, also an instance of equal operation. No further distinguishing axioms or restrictions are specified for this class beyond its hierarchical placement.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Is Equal:complex categorized under equal operation? | What broader operation classes encapsulate Equal:complex? | Which equal operations have more specific types such as Equal:complex? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:enumerated\nDescription: Equal:enumerated is defined as a subclass of equal operation. This indicates that every instance of Equal:enumerated represents a specific kind of equal operation, inheriting all characteristics of equal operation while potentially introducing further constraints or properties relevant to enumerated equality.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which operations are classified as subtypes under equal operation, including Equal:enumerated? | To what more general operation classes does Equal:enumerated belong? | Does Equal:enumerated represent a specialized form of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:integer\nDescription: Equal:integer is defined as a subclass of equal operation, indicating that it represents a specialized type of equality operation specifically applied to integers. Any instance of Equal:integer is inherently an equal operation, but it is characterized by its restriction to operands of the integer type.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which subclasses are encompassed by equal operation, such as Equal:integer? | Is Equal:integer categorized under the broader class of equal operation? | What more general classes include Equal:integer within their hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:ordinal\nDescription: Equal:ordinal is defined as a subclass of equal operation, indicating that it specifically represents equality operations within the context of ordinal numbers or positions. Instances of this class inherit all properties of equal operations but are semantically restricted to comparisons involving ordinality.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "What parent operation categories does Equal:ordinal pertain to? | Does Equal:ordinal fall under the category of equal operation? | Which specific operations are specialized forms of equal operation, such as Equal:ordinal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:pointer\nDescription: Equal:pointer is defined as a subclass of equal operation. This means it inherits all characteristics of an equal operation and represents a specific form or type of equality operation within the ontology. There are no further restrictions or differentiating axioms provided, so it can be broadly understood as any equality operation that is categorized or implemented as a \"pointer.\"\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Does Equal:pointer fall under the category of equal operation? | What specific operations are subclasses of equal operation, including Equal:pointer? | To which higher-level operation types does Equal:pointer belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:procedure\nDescription: Equal:procedure is defined as a subclass of equal operation, indicating that it represents a specific type of equal operation. All instances of Equal:procedure inherit the characteristics and constraints of equal operations. No additional restrictions or properties are specified beyond this subclass relationship.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "What broader classes encompass Equal:procedure within the hierarchy? | Does Equal:procedure represent a specific type of equal operation? | Which equal operations have more specific subclasses such as Equal:procedure? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:rational\nDescription: Equal:rational is defined as a subclass of equal operation. This means every instance of Equal:rational is also an instance of equal operation, inheriting its properties and characteristics. This class specifically represents the application of equality within the context of rational values, distinguishing it from other types of equal operations.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Does Equal:rational fall under the broader concept of equal operation? | Which operations are categorized as more specific types within equal operation, such as Equal:rational? | To which more general operation classes does Equal:rational belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:real\nDescription: Equal:real is defined as a subclass of equal operation, representing equality operations that specifically pertain to real numbers. Any instance of Equal:real is an equal operation, and this class captures the concept of evaluating or asserting equality within the domain of real numbers.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which specific equal operations include Equal:real as a subclass? | What are the broader categories under which Equal:real is organized? | Is Equal:real classified as a kind of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:record\nDescription: Equal:record is defined as a subclass of equal operation, indicating that it represents a specialized form of comparison operation focused on evaluating equality. All instances of Equal:record inherit the characteristics and constraints associated with equal operations.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "What general concepts encompass Equal:record in the ontology? | Which entities are direct specializations of equal operation, such as Equal:record? | Does Equal:record fall under the broader class of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:scaled\nDescription: Equal:scaled is defined as a subclass of equal operation, meaning it inherits all characteristics of equal operations. This class represents a specific type of equal operation, but is further specialized under the general category of equality operations. There are no additional restrictions or disjointness axioms specified.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which operations are included as subclasses within equal operation, such as Equal:scaled? | Is Equal:scaled categorized under equal operation in the ontology? | To what broader operation categories does Equal:scaled belong according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:sequence\nDescription: Equal:sequence is defined as a subclass of equal operation, indicating that it represents a specific type of equality operation. Any instance of Equal:sequence is thus an equal operation, inheriting its general characteristics and semantic constraints. No additional restrictions or disjointness axioms are specified, so its primary distinguishing feature is its specialization within the equal operation hierarchy.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Does Equal:sequence fall under the category of equal operation? | Which specific operations are categorized as equal operations, such as Equal:sequence? | What broader categories include Equal:sequence as a more specific subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:set\nDescription: Equal:set is defined as a subclass of equal operation. This means that every instance of Equal:set is a type of equal operation, inheriting all characteristics and properties of equal operations. No further constraints or disjointness are specified, so its primary ontological role is to represent a specific kind or subset of equal operations.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which operations are broader in scope than Equal:set under equal operation? | Is Equal:set classified as a subclass within equal operation? | What specific subcategories are encompassed by equal operation, including Equal:set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:discrete\nDescription: Equal:discrete is a subclass of equal operation, representing a specific type of equality operation within the ontology. Any instance classified as Equal:discrete inherently possesses all characteristics of equal operation, but denotes a discrete (distinct and separate) form of equality as opposed to potentially other forms covered under the broader parent class.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "What are the broader operation categories encompassing Equal:discrete? | Which operations are considered specific types within equal operation, such as Equal:discrete? | Is Equal:discrete classified under the general category of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:table\nDescription: Equal:table is defined as a subclass of equal operation, indicating that it represents a specific type of equal operation within the ontology. There are no further restrictions or disjointness axioms provided, so its characteristics are inherited entirely from equal operation. This formalization ensures that every instance of Equal:table is also considered an instance of equal operation.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which operations are subcategories of equal operation, specifically including Equal:table? | What overarching categories does Equal:table belong to within the ontology? | Does Equal:table fall under the category of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:time&date\nDescription: Equal:time&date is defined as a subclass of equal operation. This class represents equality operations specifically applied to time and date values, inheriting all characteristics of general equal operations while restricting its domain to temporal data. There are no additional property restrictions or disjointness axioms specified.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which specific operations are categorized under equal operation, such as equal:time&date? | Is equal:time&date classified as a type of equal operation? | What broader operational categories encompass equal:time&date? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Equal:void\nDescription: Equal:void is defined as a subclass of equal operation, indicating that it represents a specific type of equality operation within the ontology. Instances of Equal:void inherit all characteristics of equal operation but are further specialized to reflect this subclass distinction. No additional constraints or property restrictions are present.\nAxiom: {'subClassOf': ['equal operation']}\nGenerated CQs:", "output": "Which concepts are included as narrower types under equal operation, such as Equal:void? | Of which broader categories is Equal:void a member in relation to equal operation? | Does Equal:void represent a specialized form of equal operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:enumerated\nDescription: InOrder:enumerated is defined as a subclass of in order operation. This indicates that it inherits all characteristics of in order operations, and further restricts its members to those specifically classified as InOrder:enumerated. No additional disjointness or property restrictions are specified.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "What broader operational classifications include InOrder:enumerated as a subtype? | Which specialized operations are classified as in order operation, including InOrder:enumerated? | Does InOrder:enumerated fall under the category of in order operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:interger\nDescription: InOrder:integer is defined as a subclass of in order operation. This means every instance of InOrder:integer is also an instance of in order operation, inheriting its properties and characteristics. No additional restrictions or properties are specified.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Does InOrder:integer represent a specific kind of in order operation? | What broader categories does InOrder:integer fall under within in order operation? | Which in order operation subclasses include InOrder:integer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:ordinal\nDescription: InOrder:ordinal is defined as a subclass of in order operation, meaning every instance of InOrder:ordinal is also an instance of in order operation. This class captures operations that are performed in a specific, sequential order, consistent with the broader concept of ordered computational procedures.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Which general operations is InOrder:ordinal classified under? | Is in order operation a broader category that includes InOrder:ordinal as a specific type? | What are all the subclasses under in order operation, and does that list include InOrder:ordinal? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:rational\nDescription: InOrder:rational is defined as a subclass of in order operation. This means every instance of InOrder:rational is also an instance of in order operation, inheriting its essential properties and behavioral constraints. There are currently no additional property restrictions or disjointness axioms specified for this class, so its definition is primarily characterized by its position within the hierarchy of ordered operations.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "What in order operations have InOrder:rational as a more specific instance? | Is InOrder:rational categorized as a type of in order operation? | Which general operations encompass InOrder:rational as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:real\nDescription: InOrder:real is defined as a subclass of in order operation. This means that every instance of InOrder:real is necessarily an in order operation, inheriting all characteristics and constraints of its parent class. No further distinguishing features or restrictions are specified in the current axiom.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Which broader categories subsume InOrder:real in the ontology? | Is InOrder:real classified under in order operation? | What specific types are encompassed by in order operation, including InOrder:real? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:scaled\nDescription: InOrder:scaled is defined as a subclass of in order operation, indicating that it represents a specialized type of in order operation. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Which upper-level operations encompass InOrder:scaled? | Does InOrder:scaled fall under the category of in order operation? | What are the specific subtypes classified under in order operation, such as InOrder:scaled? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InOrder:time&date\nDescription: InOrder:time&date is defined as a subclass of in order operation. This means that every instance of InOrder:time&date is also an instance of in order operation, inheriting all its characteristics and constraints. The class represents a specific type of in order operation that is distinguished within the ontology for handling operations related to time and date.\nAxiom: {'subClassOf': ['in order operation']}\nGenerated CQs:", "output": "Which in order operations include more specialized types such as InOrder:time&date? | To what higher-level categories does InOrder:time&date belong within the hierarchy of in order operation? | Is InOrder:time&date recognized as a specific form of in order operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Insert:table\nDescription: Insert:table is defined as a subclass of insert operation, representing a specialized form of data insertion that specifically targets tables. Any individual of Insert:table is by definition an insert operation, but this class serves to distinguish insert actions that are restricted to table-type data structures.\nAxiom: {'subClassOf': ['insert operation']}\nGenerated CQs:", "output": "Which operations are categorized as specializations of insert operation, including Insert:table? | Is Insert:table classified as a specific form of insert operation? | What broader categories encompass Insert:table as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:complex\nDescription: Multiply:complex is defined as a subclass of multiply operation, indicating that it represents a specialized form of multiplication specifically applicable to certain contexts (such as complex numbers or more advanced multiplicative structures). As a subclass, all characteristics and constraints of multiply operation apply, while distinguishing multiply:complex as a distinct category within the overall multiplication framework. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "output": "What operations are considered subclasses of multiply operation? | Is multiply:complex classified under multiply operation types? | Which higher-level operation categories encompass multiply:complex? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:integer\nDescription: Multiply:integer is defined as a subclass of multiply operation. This class represents multiplication operations specifically involving integer values, inheriting all properties and constraints of general multiplication operations but restricted to the integer domain.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "output": "Is Multiply:integer classified under the broader category of multiply operation? | Which specialized operations are considered subclasses of multiply operation, such as Multiply:integer? | Within what more general operation types is Multiply:integer included? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:rational\nDescription: Multiply:rational is a subclass of multiply operation. This class represents multiplication operations where the operands are specifically rational numbers, distinguishing it from multiply operations over other numeric domains.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "output": "To which general operation types does multiply:rational belong? | Is multiply:rational included among the operations classified as multiply operation? | What multiply operations encompass multiply:rational as a more specific subcategory? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:real\nDescription: Multiply:real is defined as a subclass of multiply operation, indicating that it represents multiplication specifically within the domain of real numbers. Any instance of Multiply:real inherits the characteristics and constraints of the general multiply operation, but is restricted in application to real-valued operands.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "output": "Is Multiply:real categorized as a multiply operation? | Into what broader classes is Multiply:real hierarchically organized? | Which multiply operations encompass Multiply:real as a specialized form? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multiply:scaled\nDescription: Multiply:scaled is defined as a subclass of multiply operation. This indicates that it inherits all characteristics of multiply operations while representing a more specific variant or context of multiplication. No additional restrictions or disjointness axioms are specified. Without a current description, its identity is determined solely by its position in the class hierarchy, denoting a specialized type of multiplication operation.\nAxiom: {'subClassOf': ['multiply operation']}\nGenerated CQs:", "output": "What general multiply operation categories encompass Multiply:scaled? | Which specific multiply operations include Multiply:scaled as a subclass? | Is Multiply:scaled categorized as a type of multiply operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: And:boolean\nDescription: And:boolean is defined as a subclass of dyadic logical operation, indicating that it is a logical operation involving two operands. This class represents the AND operation, commonly used in logic to yield true only when both input values are true.\nAxiom: {'subClassOf': ['dyadic logical operation']}\nGenerated CQs:", "output": "Does And:boolean fall under the classification of dyadic logical operation? | Which logical operations exist as subclasses of dyadic logical operation, And:boolean among them? | What general categories encompass And:boolean within logical operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Or:boolean\nDescription: Or:boolean is defined as a subclass of dyadic logical operation, representing a logical operation that takes two inputs. It corresponds to the Boolean \"or\" operation, where the result is true if at least one of the inputs is true. Members of this class are restricted to binary (dyadic) logic functions operating under the inclusive disjunction principle.\nAxiom: {'subClassOf': ['dyadic logical operation']}\nGenerated CQs:", "output": "Does Or:boolean fall under the general category of dyadic logical operation? | Which more general logical operation classes encompass Or:boolean? | What dyadic logical operations include Or:boolean as a specific type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Fetch:table\nDescription: Fetch:table is defined as a subclass of dyadic retrieve operation, indicating that it represents a specific type of retrieve action that involves two entities. As a specialized dyadic retrieve operation, Fetch:table inherits all the relevant characteristics of such operations within the ontology, distinguishing it from other forms of retrieval actions.\nAxiom: {'subClassOf': ['dyadic retrieve operation']}\nGenerated CQs:", "output": "Is Fetch:table recognized as a specific type of dyadic retrieve operation? | What operations are classified under dyadic retrieve operation, including Fetch:table? | Which broader categories encompass Fetch:table as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Tag:choice\nDescription: Tag:choice is defined as a subclass of dyadic retrieve operation, indicating that it represents a specific retrieval action involving two inputs or arguments. This class is thus characterized by its relation to operations that retrieve or select information based on two distinct pieces of input, inheriting all properties and restrictions applicable to dyadic retrieve operations.\nAxiom: {'subClassOf': ['dyadic retrieve operation']}\nGenerated CQs:", "output": "Is Tag:choice categorized under dyadic retrieve operation? | To which broader operational category does Tag:choice belong? | Which operations fall under the dyadic retrieve operation class? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Intersection:set\nDescription: Intersection:set is defined as a subclass of dyadic set operation, signifying that it operates on two sets. This class represents the set operation that yields a set containing all elements that are common to both input sets. As a dyadic set operation, it explicitly requires two sets as operands and produces a new set consisting only of elements present in both.\nAxiom: {'subClassOf': ['dyadic set operation']}\nGenerated CQs:", "output": "Which set operations fall under the category of dyadic set operation, including Intersection:set? | Is Intersection:set classified as a type of dyadic set operation? | What broader categories encompass Intersection:set within the hierarchy of set operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Lsln:set\nDescription: Lsln:set is formally defined as a subclass of dyadic set operation, indicating that it represents a type of operation involving two sets. No additional constraints or distinguishing characteristics are specified beyond its categorization under dyadic set operations.\nAxiom: {'subClassOf': ['dyadic set operation']}\nGenerated CQs:", "output": "Is Lsln:set categorized as a type of dyadic set operation? | What specific set operations are subclasses of dyadic set operation, Lsln:set included? | To which higher-level set operation categories does Lsln:set belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Subset:set\nDescription: Subset:set is defined as a subclass of dyadic set operation, which means it represents a specific type of set operation that involves two sets. Members of this class pertain to operations that determine whether one set is a subset of another, inheriting all formal properties of dyadic set operations.\nAxiom: {'subClassOf': ['dyadic set operation']}\nGenerated CQs:", "output": "Into which higher-level set operation categories does Subset:set fall? | Is Subset:set categorized under the broader class of dyadic set operation? | Which specialized operations are contained within the class dyadic set operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Union:set\nDescription: Union:set is defined as a subclass of dyadic set operation, indicating that it represents a type of set operation involving two sets. Members of this class perform the union operation, which combines all distinct elements from both input sets into a single set. This classification situates Union:set within the broader context of binary operations on sets.\nAxiom: {'subClassOf': ['dyadic set operation']}\nGenerated CQs:", "output": "To which upper-level operation types does Union:set belong? | Which set operations are categorized under dyadic set operation, including Union:set? | Is Union:set classified as a kind of dyadic set operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IsEmpty:bag\nDescription: IsEmpty:bag is defined as a subclass of isEmpty operation. This indicates that IsEmpty:bag represents a specific type of isEmpty operation applied to bags, distinguishing it from other isEmpty operations that may apply to different data structures. Any instance of IsEmpty:bag is necessarily an isEmpty operation, constrained in scope to the context of bags.\nAxiom: {'subClassOf': ['isEmpty operation']}\nGenerated CQs:", "output": "To which upper-level operation categories does IsEmpty:bag pertain? | What operations are more specific variants of isEmpty operation, such as IsEmpty:bag? | Does IsEmpty:bag fall under the broader classification of isEmpty operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IsEmpty:sequence\nDescription: IsEmpty:sequence is defined as a subclass of the isEmpty operation. This class represents operations that are specific forms of isEmpty, likely indicating procedures to determine whether a sequence is empty. By subclassing isEmpty operation, IsEmpty:sequence inherits all properties and constraints associated with isEmpty operations, but is further specialized to apply specifically to sequences.\nAxiom: {'subClassOf': ['isEmpty operation']}\nGenerated CQs:", "output": "What broader operation classes does IsEmpty:sequence fall under? | Is IsEmpty:sequence categorized as a specialization of the isEmpty operation? | Which operations encompass IsEmpty:sequence as a more specific form? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IsEmpty:table\nDescription: IsEmpty:table is defined as a subclass of the isEmpty operation. This means that it represents a specific isEmpty operation applied to tables, inheriting all general properties of isEmpty operations and specializing them for table data structures. Any instance of IsEmpty:table can be understood as an operation that checks or determines whether a table is empty.\nAxiom: {'subClassOf': ['isEmpty operation']}\nGenerated CQs:", "output": "Which operations are classified as subtypes of isEmpty operation, including IsEmpty:table? | Does IsEmpty:table fall under the broader concept of isEmpty operation? | What higher-level operations encompass IsEmpty:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Select:set\nDescription: Select:set is defined as a subclass of monadic select operation, indicating that it represents a specific type of selection operation that acts on a single input or operand. This formalization ensures that any instance of Select:set inherits the properties and constraints associated with monadic select operations. No further distinguishing characteristics or disjointness conditions are specified.\nAxiom: {'subClassOf': ['monadic select operation']}\nGenerated CQs:", "output": "Does Select:set represent a specific type of monadic select operation? | What kinds of operations fall under the category of monadic select operation, including Select:set? | Which higher-level classes encompass Select:set in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:complex\nDescription: Negate:complex is formally defined as a subclass of negate operation. This indicates that every instance of Negate:complex is a specific type of negate operation, inheriting all properties and constraints associated with negate operations. No additional distinguishing characteristics or property restrictions are specified at this level.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "output": "Within the domain of negate operation, which subordinate classes exist aside from Negate:complex? | What higher-level concepts encompass Negate:complex in this ontology? | Is Negate:complex categorized as a subtype of negate operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:integer\nDescription: Negate:integer is defined as a subclass of negate operation. This class represents the operation of taking an integer and producing its additive inverse (negation). Any instance of Negate:integer is a specific case of a negate operation, restricted to the integer domain.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "output": "Is Negate:integer a type of negate operation? | Which operations are categorized under negate operation, specifically including Negate:integer? | What broader classes does Negate:integer belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:rational\nDescription: Negate:rational is defined as a subclass of negate operation. This class represents operations that perform negation specifically within the domain of rational numbers. Any instance of this class is considered a type of negate operation, formally representing the mathematical action of producing the additive inverse of a rational value.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "output": "What are the broader classes that encompass Negate:rational? | Which specific operations are categorized beneath negate operation, such as Negate:rational? | Does Negate:rational fall under the classification of negate operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:real\nDescription: Negate:real is defined as a subclass of the negate operation. This class represents the negation operation as specifically applied to real numbers, inheriting all constraints and characteristics of the more general negate operation category.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "output": "Which operations are classified as specific types of negate operation, including Negate:real? | Does Negate:real fall under the general class of negate operation? | Under which hierarchical categories can Negate:real be grouped? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Negate:scaled\nDescription: Negate:scaled is defined as a subclass of negate operation. This means that every instance of Negate:scaled is a specific type of negate operation, inheriting all properties and restrictions associated with negate operations. The class is intended to represent a specialized negation process, although additional characteristics would depend on further axioms or descriptions.\nAxiom: {'subClassOf': ['negate operation']}\nGenerated CQs:", "output": "Does Negate:scaled fall under the broader classification of negate operation? | Which specific operations are categorized as variants of negate operation, such as Negate:scaled? | What are the general operation types to which Negate:scaled is related? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NonNegative:rational\nDescription: NonNegative:rational is defined as a subclass of nonNegative operation. This means every instance of NonNegative:rational is also an instance of nonNegative operation, specifically representing rational values or operations constrained to non-negative results. The class formalizes the distinction between all nonNegative operations and those that pertain strictly to rational (i.e., fractional or whole number) non-negative values.\nAxiom: {'subClassOf': ['nonNegative operation']}\nGenerated CQs:", "output": "Is NonNegative:rational categorized as a type of nonNegative operation? | Which broader operation classes include NonNegative:rational as a member? | What specific operations are subclasses under nonNegative operation, such as NonNegative:rational? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Promote:complex\nDescription: Promote:complex is defined as a subclass of promote operation, indicating that every instance of Promote:complex is also an instance of promote operation. This class inherits all the properties and characteristics of promote operation, while potentially introducing additional specificity or constraints unique to Promote:complex.\nAxiom: {'subClassOf': ['promote operation']}\nGenerated CQs:", "output": "Under which categories of promote operation does Promote:complex fall? | Is Promote:complex an instance within the promote operation hierarchy? | Which promote operations have more specific subclasses, such as Promote:complex? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Promote:rational\nDescription: Promote:rational is defined as a subclass of the promote operation class. This indicates that every instance of Promote:rational is a specific type of promote operation, inheriting all general characteristics of promote operations. No further restrictions, disjointness, or additional axioms are specified for this class.\nAxiom: {'subClassOf': ['promote operation']}\nGenerated CQs:", "output": "Is Promote:rational categorized as a subtype of promote operation? | What promote operations have Promote:rational as a specific instance or subclass? | Under which broader operation classes does Promote:rational fall? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Promote:real\nDescription: Promote:real is a subclass of promote operation, indicating that it represents a specialized form of promote operation within the ontology. Any individual classified as Promote:real inherits all characteristics and constraints associated with promote operation. No additional distinguishing axioms or restrictions are currently specified for this class.\nAxiom: {'subClassOf': ['promote operation']}\nGenerated CQs:", "output": "Is Promote:real classified under the category of promote operation? | Which promote operations encompass subtypes such as Promote:real? | What higher-level classes does Promote:real fall under in the promote operation hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Reciprocal:rational\nDescription: Reciprocal:rational is defined as a subclass of reciprocal operation. This means every instance of Reciprocal:rational is a specific type of reciprocal operation, typically involving rational numbers. No additional property restrictions or disjointness axioms are specified, so members of this class inherit all general properties of reciprocal operations.\nAxiom: {'subClassOf': ['reciprocial operation']}\nGenerated CQs:", "output": "Which specific operations are categorized as subtypes of reciprocial operation, and does this include reciprocal:rational? | Is reciprocal:rational classified under the broader category of reciprocial operation? | What are the more general operation classes to which reciprocal:rational belongs? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Reciprocal:real\nDescription: Reciprocal:real is defined as a subclass of reciprocal operation. This class represents the operation of finding the reciprocal specifically within the domain of real numbers. Any instance of Reciprocal:real is a kind of reciprocal operation applied to real numbers.\nAxiom: {'subClassOf': ['reciprocial operation']}\nGenerated CQs:", "output": "Is Reciprocal:real classified under the broader category of reciprocial operation? | What are the direct parent categories for Reciprocal:real? | Which operations are encompassed as more specific types of reciprocial operation, such as Reciprocal:real? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Reciprocal:complex\nDescription: Reciprocal:complex is defined as a subclass of reciprocal operation. This means every instance of Reciprocal:complex is also a reciprocal operation. The class is characterized by operations that involve computing the reciprocal (multiplicative inverse) specifically within the context of complex numbers.\nAxiom: {'subClassOf': ['reciprocial operation']}\nGenerated CQs:", "output": "Which broader operation classes does Reciprocal:complex belong to within the ontology? | What specific operations fall under the category of reciprocial operation, including Reciprocal:complex? | Is Reciprocal:complex classified as a subtype of reciprocial operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Round:time&date\nDescription: Round:time&date is defined as a subclass of round operation. This means that all instances of Round:time&date are specific types of rounding operations that pertain to time and date values. The class captures rounding processes as applied to temporal data, inheriting all general properties of round operations.\nAxiom: {'subClassOf': ['round operation']}\nGenerated CQs:", "output": "Does Round:time&date fall under the category of round operation? | What specific types are classified as round operation, and does Round:time&date belong to this group? | Which broader operations encompass Round:time&date as a subtype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Serialize:table\nDescription: Serialize:table is defined as a subclass of serialize operation. This indicates that it represents a specific type of serialization process, inheriting all characteristics of a serialize operation but further specializing to handle table data structures. Any individual of Serialize:table is, by axiom, a serialize operation specifically concerned with tables.\nAxiom: {'subClassOf': ['serialize operation']}\nGenerated CQs:", "output": "Is Serialize:table categorized as a type of serialize operation? | Which more general operation types encompass Serialize:table? | What kinds of operations fall under the category of serialize operation, specifically including Serialize:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Successor:ordinal\nDescription: Successor:ordinal is a subclass of successor operation, representing those operations specifically associated with generating the next ordinal in a well-ordered sequence. Members of this class perform the function of yielding the immediate successor ordinal, as formalized within the framework of ordinal arithmetic.\nAxiom: {'subClassOf': ['successor operation']}\nGenerated CQs:", "output": "Which subclasses are encompassed within the category of successor operation, including Successor:ordinal? | To what broader parent classes does Successor:ordinal belong in the ontology? | Is Successor:ordinal classified as a specific type of successor operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MapToBag:table\nDescription: MapToBag:table is a subclass of map operation, representing a specific type of mapping operation. This class inherits all characteristics of map operations and specifies entities that perform mapping tasks in a tabular context.\nAxiom: {'subClassOf': ['map operation']}\nGenerated CQs:", "output": "Which specific operations are included as subclasses of map operation, such as MapToBag:table? | What broader operations is MapToBag:table categorized under according to the ontology? | Is MapToBag:table classified under map operation in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MapToTable:table\nDescription: MapToTable:table is defined as a subclass of map operation, indicating that it inherits all characteristics of map operations. This class represents a specific type of mapping process with the intended outcome or function directly associated with tables. Individuals of this class are specialized map operations that result in or involve tables as part of their output or transformation.\nAxiom: {'subClassOf': ['map operation']}\nGenerated CQs:", "output": "Is MapToTable:table classified as a kind of map operation? | What broader concepts does MapToTable:table relate to in this context? | Which operations fall under the category of map operation, including MapToTable:table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Replace:array\nDescription: Replace:array is defined as a subclass of n-adic operation, signifying that it represents an operation which can take an arbitrary number of arguments. Individuals of this class inherit all properties and constraints associated with n-adic operations, and the class serves to specify operations that involve the replacement of elements within arrays or similar data structures. No further characteristics or constraints are specified beyond its position in the class hierarchy.\nAxiom: {'subClassOf': ['n-adic operation']}\nGenerated CQs:", "output": "What are the specific subtypes of n-adic operation, including Replace:array? | Which broader categories encompass Replace:array? | Is Replace:array classified as a type of n-adic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Empty:bag\nDescription: Empty:bag is defined as a subclass of niladic operation, indicating that it represents an operation which does not require any arguments or inputs. This class models entities or operations that, by their formal definition, do not take parameters.\nAxiom: {'subClassOf': ['niladic operation']}\nGenerated CQs:", "output": "Is Empty:bag classified under niladic operation? | What higher-level operation categories does Empty:bag belong to? | Which operations fall under the category of niladic operation, including Empty:bag? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Empty:sequence\nDescription: Empty:sequence is defined as a subclass of niladic operation, indicating that it represents a special operation that does not take any arguments or inputs. This class characterizes sequences that are inherently empty and do not exhibit any elements or content, consistent with the semantics of niladic operations in formal systems.\nAxiom: {'subClassOf': ['niladic operation']}\nGenerated CQs:", "output": "Is Empty:sequence classified under the category of niladic operation? | Which operations are subclasses of niladic operation, including Empty:sequence? | Which more general operation categories encompass Empty:sequence? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Empty:set\nDescription: Empty:set is defined as a subclass of niladic operation. This means that an empty set inherits all characteristics of niladic operations, which are operations that do not require any operands. The classification suggests that empty:set is conceptualized in an operational framework where no input or elements are involved.\nAxiom: {'subClassOf': ['niladic operation']}\nGenerated CQs:", "output": "Which specific niladic operations include Empty:set as a subclass? | What broader classes encompass Empty:set within the hierarchy of niladic operations? | Is Empty:set categorized as a type of niladic operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Empty:table\nDescription: Empty:table is defined as a subclass of niladic operation, indicating that it represents an operation or entity that does not take any input arguments. As a specific type of niladic operation, Empty:table is characterized by being an operation without operands, typically used to denote or construct an empty table structure within its context.\nAxiom: {'subClassOf': ['niladic operation']}\nGenerated CQs:", "output": "Which niladic operations have Empty:table as a more specific type? | What broader operation categories encompass Empty:table? | Does Empty:table fall under the category of niladic operations? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: key access\nDescription: key access is defined as a subclass of direct access property, meaning it inherits all characteristics of direct access property while representing a more specific type. Members of the key access class pertain to properties or relationships that enable or characterize direct forms of access, distinguished from other access mechanisms by their explicit subclass designation.\nAxiom: {'subClassOf': ['direct access property']}\nGenerated CQs:", "output": "Is key access classified as a direct access property? | Which access properties fall under the category of direct access property, including key access? | What are the more general property types that encompass key access? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: access by value\nDescription: access by value is defined as a subclass of indirect access property, indicating that it represents a specific type of indirect access. Any individual classified as access by value inherits all the characteristics of indirect access property, typically referring to situations where access is achieved through the value rather than the reference or pointer itself.\nAxiom: {'subClassOf': ['indirect acess property']}\nGenerated CQs:", "output": "What more general properties include access by value as a specialization? | Is access by value categorized under indirect access property? | Which types of properties fall within the scope of indirect access property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: implementation dependent access\nDescription: implementation dependent access is defined as a subclass of indirect access property, indicating that it inherits all characteristics of indirect access property. This means any instance of implementation dependent access is also considered an indirect access property, but with specific details or constraints determined by the particular implementation. There is no further specification beyond its placement in the class hierarchy.\nAxiom: {'subClassOf': ['indirect acess property']}\nGenerated CQs:", "output": "To which broader types does implementation dependent access conceptually relate? | Which access properties are more specific than indirect access property, such as implementation dependent access? | Does implementation dependent access fall within the category of indirect access property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: position access\nDescription: position access is defined as a subclass of indirect access property, indicating that it represents a type of access property that is not direct but mediated through some intermediary or reference. All instances of position access therefore inherit the characteristics and constraints associated with indirect access property.\nAxiom: {'subClassOf': ['indirect acess property']}\nGenerated CQs:", "output": "What more general property categories does position access belong to? | Is position access a type of indirect access property? | Which properties are subclasses under the indirect access property category? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unordered aggregate\nDescription: unordered aggregate is a subclass of aggregate imposed ordering. This means every unordered aggregate is an aggregate where some ordering has been considered, but specifically, unordered aggregate refers to those aggregates where the order of the constituents is irrelevant or not specified. No additional disjointness or property restrictions are defined.\nAxiom: {'subClassOf': ['aggregate imposed ordering']}\nGenerated CQs:", "output": "To which broader aggregation categories does unordered aggregate belong? | Which specific types of aggregate imposed ordering include unordered aggregate as a subclass? | Is aggregate imposed ordering a superclass of unordered aggregate? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: identifier unique\nDescription: identifier unique is defined as a subclass of aggregate-imposed identifier uniqueness. This indicates that any individual or instance of identifier unique inherits all properties and constraints of aggregate-imposed identifier uniqueness, implying that the uniqueness of identifiers is imposed at the aggregate level. Without additional description, this class specifically represents entities for which unique identification is ensured by aggregate-imposed mechanisms.\nAxiom: {'subClassOf': ['aggregate-imposed identifier uniqueness']}\nGenerated CQs:", "output": "What more general categories encompass identifier unique within the ontology? | Does identifier unique fall under the broader classification of aggregate-imposed identifier uniqueness? | Which kinds of identifier uniqueness are specified as subclasses of aggregate-imposed identifier uniqueness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: variable size\nDescription: variable size is defined as a subclass of aggregate size. This specifies that any instance of variable size is also an instance of aggregate size, inheriting all its properties and restrictions. No further distinguishing characteristics or disjointness constraints are specified for variable size beyond its hierarchical relationship.\nAxiom: {'subClassOf': ['agregate size']}\nGenerated CQs:", "output": "Which specific types are encompassed by aggregate size, such as variable size? | To what higher-level groups does variable size belong according to the ontology? | Does variable size fall under the broader classification of aggregate size? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: component non-mandatory\nDescription: component non-mandatory is defined as a subclass of component mandatoriness. This classification indicates that component non-mandatory represents components characterized by a specific mandatoriness status, distinguishing them from other types of component mandatoriness. No further restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['component mandatoriness']}\nGenerated CQs:", "output": "Which types are more specific than component mandatoriness, including component non-mandatory? | To which general mandatoriness classifications does component non-mandatory belong? | What broader mandatoriness categories encompass component non-mandatory? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: one dimensional\nDescription: one dimensional is defined as a subclass of dimensionality. This class represents entities or concepts that possess exactly one dimension, distinguishing them from higher-dimensional counterparts. Any individual classified as one dimensional must inherently exhibit characteristics specific to single-dimensionality.\nAxiom: {'subClassOf': ['dimensionality']}\nGenerated CQs:", "output": "Which concepts are encompassed under dimensionality, such as one dimensional? | Is one dimensional classified as a specialized form under dimensionality? | What broader type does one dimensional inherit from in the dimensional hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: two dimensional\nDescription: two dimensional is defined as a subclass of dimensionality. This class represents entities or concepts characterized specifically by having two dimensions (such as length and width), distinguishing them within the broader category of dimensionality.\nAxiom: {'subClassOf': ['dimensionality']}\nGenerated CQs:", "output": "What are the subclasses categorized under dimensionality, such as two dimensional? | Is two dimensional a more specific type of dimensionality? | Which general category encompasses two dimensional in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: multi dimensional\nDescription: multi dimensional is defined as a subclass of dimensionality, meaning it represents a specific type or instance within the broader concept of dimensionality. Any entity classified as multi dimensional inherently possesses the quality of having multiple dimensions, as specified by its placement under the dimensionality hierarchy.\nAxiom: {'subClassOf': ['dimensionality']}\nGenerated CQs:", "output": "Is multi dimensional categorized under the broader concept of dimensionality? | To which higher-level classes does multi dimensional belong in the context of dimensionality? | Which subclasses are encompassed by dimensionality, such as multi dimensional? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: heterogenous\nDescription: heterogenous is defined as a subclass of homogenity. This means every heterogenous entity is considered a type of homogenity, establishing a hierarchical relationship in which heterogenous inherits all characteristics of homogenity; however, further distinctions or defining properties are not specified by the current axioms or descriptions.\nAxiom: {'subClassOf': ['homogenity']}\nGenerated CQs:", "output": "What broader classes is heterogenous associated with in the ontology? | Is heterogenous included as a specific type under homogenity? | Which subclasses fall under the concept of homogenity, such as heterogenous? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-recursive\nDescription: non-recursive is defined as a subclass of recursiveness, meaning every non-recursive entity is a specific type of recursiveness. This class represents elements that, while related to the broader concept of recursiveness, possess characteristics that distinguish them as non-recursive within that context.\nAxiom: {'subClassOf': ['recursiveness']}\nGenerated CQs:", "output": "Is non-recursive categorized under recursiveness as a more specific classification? | What categories are directly encompassed by recursiveness, including non-recursive? | Which higher-order classes does non-recursive fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: structured\nDescription: structured is defined as a subclass of structurness. This indicates that every instance of structured also inherits all characteristics and constraints of structurness. No further properties or restrictions are specified for this class.\nAxiom: {'subClassOf': ['structurness']}\nGenerated CQs:", "output": "Which higher-level categories encompass the concept of structured? | Is structurness a direct superclass of structured? | What more specific classes fall under structurness, such as structured? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unstructured\nDescription: unstructured is defined as a subclass of structurness. This means that every instance of unstructured is also an instance of structurness, inheriting all properties and constraints applicable to structurness. There are no additional property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['structurness']}\nGenerated CQs:", "output": "Does unstructured fall under the category of structurness? | To what higher-level groupings does unstructured pertain? | Which types are categorized more specifically than structurness, such as unstructured? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: semi-structured\nDescription: semi-structured is defined as a subclass of structurness. This means that every instance of semi-structured is also an instance of structurness, inheriting its general properties while specializing or refining its concept. No additional property restrictions or disjointness axioms are specified, so the class is characterized primarily by its placement within the structurness hierarchy.\nAxiom: {'subClassOf': ['structurness']}\nGenerated CQs:", "output": "Is semi-structured classified as a type of structurness? | What broader categories encompass semi-structured within the ontology? | Which subclasses of structurness include semi-structured? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unique values\nDescription: unique values is defined as a subclass of uniqueness, indicating that every instance of unique values is also an instance of uniqueness. This classification implies that members of this class represent values that are distinguished by not being duplicated within a given context, enforcing a guarantee of singularity for each value.\nAxiom: {'subClassOf': ['uniqueness']}\nGenerated CQs:", "output": "Are unique values considered a specific type of uniqueness? | What are the broader classes that unique values are classified under? | Which subclasses fall under the category of uniqueness, including unique values? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target field identifier\nDescription: target field identifier is defined as a subclass of field identifier. This means that every target field identifier is a specialized form of field identifier and inherits all its properties and constraints. No additional axioms or distinguishing properties are specified for this class.\nAxiom: {'subClassOf': ['field identifier']}\nGenerated CQs:", "output": "Does target field identifier belong to the broader group defined by field identifier? | Which field identifier subtypes encompass target field identifier as a member? | What higher-level field identifiers categorize target field identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: positive integer\nDescription: positive integer is defined as a subclass of extended datatype, indicating that it is a specialized numerical datatype representing integers greater than zero within the broader category of extended datatypes. No additional constraints or properties are specified beyond this hierarchical relationship.\nAxiom: {'subClassOf': ['extended datatype']}\nGenerated CQs:", "output": "Which datatypes fall within the category of extended datatype, encompassing positive integer? | What broader datatype groups does positive integer inherit from? | Is positive integer classified as a more specific type under extended datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: positive integer range generator\nDescription: positive integer range generator is defined as a subclass of range subtype generator. This class represents generators specifically designed to produce ranges consisting only of positive integers, inheriting all characteristics of range subtype generator while specializing in handling positive integer values.\nAxiom: {'subClassOf': ['range subtype generator']}\nGenerated CQs:", "output": "Which specialized generators are classified beneath range subtype generator, including positive integer range generator? | Under which broader generator types does positive integer range generator fall? | Is every positive integer range generator categorized under range subtype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: procedure-paremeter declaration\nDescription: procedure-parameter declaration is defined as a subclass of specification. All instances of this class must include at least one member with the type parameter and at least one member with the type direction, as specified by the property restrictions. This class formally represents declarations in a procedure that specify the required parameters and their directions, ensuring that every procedure-parameter declaration comprehensively describes its involved parameters and their input/output directions.\nAxiom: {'subClassOf': ['specification'], 'propertyRestrictions': ['[has_member some parameter]', '[has_member only direction]']}\nGenerated CQs:", "output": "Is every procedure-parameter required to have at least one member that is a direction? | Must a procedure-parameter always be associated with a direction through the has_member relationship? | Can a procedure-parameter exist without referencing any direction via the has_member property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: datatype role\nDescription: datatype role is defined as a subclass of role, with the property restriction that it must be the role_of at least one datatype. This means every instance of datatype role is associated with, and specifically plays a role in the context of, some datatype.\nAxiom: {'subClassOf': ['role'], 'propertyRestrictions': ['[role_of only datatype]']}\nGenerated CQs:", "output": "Is it required that every instance with the role 'role_of' is associated with a value of datatype? | Does the property 'role_of' necessarily relate an individual only to values belonging to datatype? | Can an entity be considered within the scope if its 'role_of' relation points to something other than the specified datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: range subtype generator\nDescription: range subtype generator is defined as a subclass of subtype generator. Members of this class are characterized by the existence of at least one member related via the has_member property that is an instance of range. This formalization ensures that any range subtype generator must be associated with at least one range through the has_member relationship.\nAxiom: {'subClassOf': ['subtype generator'], 'propertyRestrictions': ['[has_member only range]']}\nGenerated CQs:", "output": "Does a Range Subtype Generator necessarily have at least one member that is a Range? | Is it required for every Range Subtype Generator to have a 'has_member' relationship with some instance of Range? | Can a Range Subtype Generator be defined without possessing the property 'has_member' that connects it to any Range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-directed labeled graph datatype\nDescription: non-directed labeled graph datatype is defined as a subclass of defined datatype. Any member of this class must include at least one non-directed labeled graph generator and at least one graph aggregate component as elements (as specified by the has_member property). This formalization captures datatypes representing non-directed labeled graphs constructed or characterized by these required components.\nAxiom: {'subClassOf': ['defined datatype'], 'propertyRestrictions': ['[has_member some graph aggregate component]', '[has_member only non-directed labeled graph generator]']}\nGenerated CQs:", "output": "Is every non-directed labeled graph required to have at least one member that is a non-directed labeled graph generator? | Can a non-directed labeled graph exist without having a has_member relationship to a non-directed labeled graph generator? | Does the presence of the has_member relationship to a non-directed labeled graph generator define membership within a non-directed labeled graph? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: array generator\nDescription: array generator is a subclass of homogenous aggregate generator and is explicitly disjoint with homogenous aggregate generator with variable size, ensuring that an instance cannot belong to both classes simultaneously. Members of the array generator class are characterized by possessing certain qualities: they are unordered aggregates, have a fixed size, can be multi-dimensional, allow index-based access, and may contain non-unique values. This combination of properties formally describes the essential characteristics of array generators, distinguishing them from other types of homogenous aggregate generators.\nAxiom: {'subClassOf': ['homogenous aggregate generator'], 'disjointWith': ['homogenous aggregate generator with variable size'], 'propertyRestrictions': ['[has_quality some unordered aggregate]', '[has_quality some fixed size]', '[has_quality some index access]', '[has_quality some non-unique values]', '[has_quality only multi dimensional]']}\nGenerated CQs:", "output": "Is it required that every array generator possesses at least one quality classified as multi dimensional? | Can an array generator exist without exhibiting the multi dimensional quality? | Does the presence of the multi dimensional quality define array generator entities within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: class generator\nDescription: class generator is defined as a subclass of heterogenous aggregate generator and is explicitly disjoint with both record generator and table generator, meaning an individual cannot belong to more than one of these classes simultaneously. Members of the class generator are characterized by having the following qualities: key access, unordered aggregate structure, non-unique values, one-dimensional organization, and fixed size. These properties collectively define class generator as a type of aggregate generator that supports key-based, unordered collections with potentially repeated values, all arranged in a single dimension with a fixed number of elements.\nAxiom: {'subClassOf': ['heterogenous aggregate generator'], 'disjointWith': ['record generator', 'table generator'], 'propertyRestrictions': ['[has_quality some key access]', '[has_quality some unordered aggregate]', '[has_quality some non-unique values]', '[has_quality some one dimensional]', '[has_quality only fixed size]']}\nGenerated CQs:", "output": "Is it required that every generator has at least one quality that is a fixed size? | Can a generator possess a quality other than fixed size, or is fixed size the only necessary quality? | Does the ontology require the existence of a fixed size quality for all instances of generators? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence generator\nDescription: sequence generator is defined as a subclass of homogenous aggregate generator with variable size, and is explicitly disjoint from homogenous unordered aggregate generator with variable size—meaning an individual cannot belong to both classes at once. Members of the sequence generator class are characterized by possessing certain qualities: they generate aggregates with non-unique values, maintain an ordered structure, and support position-based access to elements. These constraints formally specify that sequence generators create ordered collections (or aggregates) where repeated values are permissible and positional referencing is available, distinguishing them from unordered aggregate generators.\nAxiom: {'subClassOf': ['homogenous aggregate generator with variable size'], 'disjointWith': ['homogenous unordered aggregate generator with variable size'], 'propertyRestrictions': ['[has_quality some non-unique values]', '[has_quality some ordered aggregate]', '[has_quality only position access]']}\nGenerated CQs:", "output": "Does every sequence generator necessarily have at least one quality associated with position access? | Is possessing the quality of position access required for an entity to be classified as a sequence generator? | Can a sequence generator exist without having the property 'has_quality' linked to position access? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: pointer generator\nDescription: pointer generator is defined as a subclass of non-aggregate generator. Every instance of pointer generator must be a member of some pointer datatype, indicating that this class is characterized by its association with pointer datatypes. This structure ensures that all pointer generators participate specifically within the context of pointer datatypes and inherit the properties of non-aggregate generators.\nAxiom: {'subClassOf': ['non-aggregate generator'], 'propertyRestrictions': ['[is_member_of only pointer datatype]']}\nGenerated CQs:", "output": "Is every pointer generator necessarily associated with at least one pointer datatype through the 'is_member_of' property? | Does a pointer generator require the existence of some related pointer datatype via the 'is_member_of' relationship? | Must each instance of pointer generator be linked to a pointer datatype by the 'is_member_of' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: class datatype\nDescription: class datatype is a subclass of heterogenous aggregate datatype and is explicitly disjoint with record (tuple) datatype, ensuring that no individual can belong to both classes. Members of class datatype are characterized by the following property restrictions: they must have operations such as AttributeSelect, AttributeReplace, and Equal (each operating on class), must include members such as a class generator and an attribute-list, and must exhibit the qualities of being non-ordered and non-numeric. This formalization distinguishes class datatypes from other aggregates (like records) by their operations and inherent qualities.\nAxiom: {'subClassOf': ['heterogenous aggregate datatype'], 'disjointWith': ['record (tuple) datatype'], 'propertyRestrictions': ['[has_operation some AttributeSelect:class]', '[has_operation some AttributeReplace:class]', '[has_operation some Equal:class]', '[has_quality some non-ordered]', '[has_quality some non-numeric]', '[has_member some attribute-list]', '[has_member only class generator]']}\nGenerated CQs:", "output": "Is every instance of 'propertyRestrictions' required to have at least one value for 'has_member' that is a 'generator'? | Does 'propertyRestrictions' necessarily include a 'generator' through the 'has_member' property? | Can an instance of 'propertyRestrictions' exist without being related to a 'generator' via 'has_member'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate imposed ordering\nDescription: aggregate imposed ordering is defined as a subclass of aggregate generator property and is disjoint with aggregate-imposed identifier uniqueness, homogenity, aggregate size, uniqueness, component mandatoriness, structurness, recursiveness, and access type—ensuring that no individual can simultaneously belong to these disjoint classes. It is equivalent to the union of ordered aggregate and unordered aggregate, indicating that every aggregate imposed ordering instance must be either an ordered aggregate or an unordered aggregate. This class captures the property by which an aggregate specifies an ordering—imposed or absent—over its components, distinguishing it from other aggregate generator properties.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['aggregate-imposed identifier uniqueness', 'homogenity', 'agregate size', 'uniqueness', 'component mandatoriness', 'structurness', 'recursiveness', 'access type'], 'equivalentClass': ['(ordered aggregate and unordered aggregate)']}\nGenerated CQs:", "output": "Is aggregate imposed ordering equivalent to the union of ordered aggregate and unordered aggregate? | Can every instance of aggregate imposed ordering be classified as either an ordered aggregate or an unordered aggregate? | Are there any instances of aggregate imposed ordering that are not part of ordered aggregate or unordered aggregate? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenity\nDescription: homogenity is defined as a subclass of aggregate generator property and is explicitly disjoint with the classes aggregate size, uniqueness, component mandatoriness, structurness, recursiveness, and access type, ensuring that no individual can simultaneously belong to these. It is also equivalent to the union of homogenous or heterogenous, indicating that any instance of homogenity must be categorized as either homogenous or heterogenous with respect to an aggregate generator property.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['agregate size', 'uniqueness', 'component mandatoriness', 'structurness', 'recursiveness', 'access type'], 'equivalentClass': ['(homogenous and heterogenous)']}\nGenerated CQs:", "output": "Is every instance classified as homogenity necessarily either homogenous or heterogenous? | Is the class homogenity equivalent to the union of homogenous and heterogenous? | Can anything be considered homogenity that does not fall under either homogenous or heterogenous? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: uniqueness\nDescription: uniqueness is defined as a subclass of aggregate generator property and is explicitly disjoint from component mandatoriness, structurness, recursiveness, and access type, meaning no entity can be an instance of both uniqueness and any of these disjoint classes simultaneously. It is equivalent to the presence of either unique values or non-unique values, capturing the property of whether values are distinct or may repeat within an aggregate context. This definition formalizes how uniqueness characterizes and distinguishes value patterns in aggregate generator properties.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['component mandatoriness', 'structurness', 'recursiveness', 'access type'], 'equivalentClass': ['(non-unique values and unique values)']}\nGenerated CQs:", "output": "Is uniqueness equivalent to the class containing either only non-unique values or only unique values? | Can all instances classified as uniqueness be described as those having non-unique values or unique values? | Does the definition of uniqueness encompass exclusively the union of non-unique values and unique values? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: structurness\nDescription: structurness is defined as a subclass of aggregate generator property and is disjoint with both recursiveness and access type, indicating that no entity can simultaneously belong to structurness and either of these disjoint classes. Additionally, structurness is formally equivalent to the union of structured, unstructured, or semi-structured, meaning any entity that is classified as one of these three types is also considered an instance of structurness. This definition situates structurness as a categorical property that distinguishes types of structural organization within aggregate generator properties.\nAxiom: {'subClassOf': ['aggregate generator property'], 'disjointWith': ['recursiveness', 'access type'], 'equivalentClass': ['(structured and unstructured and semi-structured)']}\nGenerated CQs:", "output": "Is structurness equivalent to the union of structured, unstructured, and semi-structured? | Can structurness include any entities other than structured, unstructured, or semi-structured? | Are all entities classified as structurness either structured, unstructured, or semi-structured? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: primitive datatype\nDescription: primitive datatype is a subclass of datatype, and is explicitly disjoint from both generated datatype and defined datatype, ensuring that no individual can simultaneously belong to these classes. Members of primitive datatype are characterized by the requirement that they possess at least one quality related to equality (expressed as having some has_quality relationship to equality). This formalization captures the basic, irreducible nature of primitive datatypes, differentiating them from those that are constructed or defined based on other rules.\nAxiom: {'subClassOf': ['datatype'], 'disjointWith': ['generated datatype', 'defined datatype'], 'propertyRestrictions': ['[has_quality only equality]']}\nGenerated CQs:", "output": "Is it required for every instance with a primitive datatype propertyRestriction to possess at least one has_quality relation to equality? | Does the definition of primitive datatype propertyRestrictions ensure that the has_quality property always connects to equality for its instances? | Must all primitive datatype propertyRestrictions have the property has_quality with the value equality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tag-type\nDescription: tag-type is defined as a subclass of datatype role. Every instance of tag-type must serve as the role_of at least one datatype, meaning that each tag-type is associated with one or more datatype instances through the role_of property. This establishes tag-type as a specific role related to datatypes within the ontology.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[role_of only datatype]']}\nGenerated CQs:", "output": "Must every tag of type 'propertyRestrictions' necessarily have at least one 'role_of' relationship with some datatype? | Is it required for instances of propertyRestrictions to be associated, via the 'role_of' property, with one or more datatypes? | Can a propertyRestrictions tag exist without participating in a 'role_of' connection to any datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: pointer-element-type\nDescription: pointer-element-type is a subclass of datatype role, characterized by the restriction that it must be a role of some datatype. This means that any instance of pointer-element-type is specifically associated with at least one datatype through the \"role_of\" property, formalizing its function as a role connecting to datatypes within the ontology.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[role_of only datatype]']}\nGenerated CQs:", "output": "Is every pointer element type required to be related through the 'role_of' property to some datatype? | Can a pointer element type exist without participating in a 'role_of' relationship with at least one datatype? | Does the presence of 'role_of' with a datatype define membership in the pointer element type category? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: base type\nDescription: base type is defined as a subclass of datatype role. Any instance of base type must fulfill two key conditions: it must have a relationship 'role_of' to at least one datatype, and it must be a member of at least one complex datatype—specifically, an array datatype, sequence datatype, bag datatype, set datatype, or extended datatype. This formalization ensures that base type instances are foundational datatypes actively participating in, and forming members of, various structured or composite datatypes.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[role_of some datatype]', '[is_member_of some (array datatype and sequence datatype and bag datatype and set datatype and extended datatype)]']}\nGenerated CQs:", "output": "Is it required that every base type with property restrictions is a member of at least one of array, sequence, bag, set, or extended datatypes? | Can a base type propertyRestrictions instance exist that is not associated with any of the array, sequence, bag, set, or extended datatypes? | Does the membership of base type propertyRestrictions always include at least one datatype from array, sequence, bag, set, or extended? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real field-list\nDescription: real field-list is defined as a subclass of field-list, explicitly disjoint from boolean field-list and discrete field-list, ensuring no overlap in membership between these types. Members of real field-list are characterized by the property that they contain at least one real field component as a member. This formalization guarantees that any real field-list includes real-valued field components and cannot simultaneously be considered a boolean or discrete field-list.\nAxiom: {'subClassOf': ['field-list'], 'disjointWith': ['boolean field-list', 'discrete field-list'], 'propertyRestrictions': ['[has_member only real field component]']}\nGenerated CQs:", "output": "Is every real field-list required to have at least one member that is a real field component? | Does the property 'has_member' applied to a real field-list necessarily include some real field component? | Can a real field-list exist without having any members from the class of real field components? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: labeled dataset field-list\nDescription: labeled dataset field-list is defined as a subclass of field-list that must contain at least one member that is a labeled dataset target field component and at least one member that is a labeled dataset descriptive field component. This structure ensures that any labeled dataset field-list necessarily includes both target and descriptive components, reflecting the typical schema of labeled datasets where descriptive fields provide input features and target fields represent outputs or labels.\nAxiom: {'subClassOf': ['field-list'], 'propertyRestrictions': ['[has_member some labeled dataset descriptive field component]', '[has_member only labeled dataset target field component]']}\nGenerated CQs:", "output": "Is it required for a labeled dataset field-list to have at least one has_member relation to a labeled dataset target field component? | Can every labeled dataset field-list include members other than labeled dataset target field components? | Does the property restriction on labeled dataset field-list ensure that its has_member property always relates to at least one labeled dataset target field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete-value-list\nDescription: discrete-value-list is defined as a subclass of list specification. Every instance of discrete-value-list must have at least one member that is a discrete-value identifier. This formalization ensures that all discrete-value-lists are specifically collections containing discrete-value identifiers as elements, distinguishing them from other types of lists.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member only discrete-value identifier]']}\nGenerated CQs:", "output": "Is it required that a discrete-value-list always contains at least one member of type discrete-value identifier? | Can a discrete-value-list exist without having any has_member relationship to a discrete-value identifier? | Does the presence of a has_member relationship to a discrete-value identifier define the membership criteria for discrete-value-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: procedure-parameter-list\nDescription: procedure-parameter-list is defined as a subclass of list specification, restricted so that it must have at least one member which is a procedure-parameter declaration. This formalization ensures that any instance of procedure-parameter-list represents a list where each member is specifically a declaration pertaining to procedure parameters.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member only procedure-paremeter declaration]']}\nGenerated CQs:", "output": "Must every procedure-parameter-list include at least one member that is a procedure-parameter declaration? | Is the presence of a procedure-parameter declaration as a member required for an instance to be recognized as a procedure-parameter-list? | Can a procedure-parameter-list exist without having any procedure-parameter declaration as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: select-list\nDescription: select-list is defined as a subclass of list specification, representing a specialized type of list that must include at least one member which is a select-item specification. Any instance of select-list is thus required to be a list specification containing one or more select-item specifications as its members.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member only select-item specification]']}\nGenerated CQs:", "output": "Are all individuals in select-list required to have at least one member specified by the property has_member from the select-item specification? | Can an instance belonging to select-list exist without having a member that satisfies the select-item specification through has_member? | Is it necessary for any member of select-list to be linked to some entity defined by the select-item specification via has_member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index-type list\nDescription: index-type list is a subclass of list specification, defined as a collection that has at least one member of type index-type. This means any instance of index-type list must contain one or more elements that are classified as index-type.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member only index-type]']}\nGenerated CQs:", "output": "Must an index-type list always include at least one member that is an index-type? | Can an index-type list be valid if it does not have any member of type index-type? | Is every index-type list required to have the has_member property relating it to an index-type individual? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: array datatype\nDescription: array datatype is defined as a subclass of homogenous aggregate datatype, and is explicitly disjoint from homogenous aggregate datatype with variable size, indicating arrays have a fixed size. Members of this class possess the following characteristics: they have members of a specific base type, members are indexed (by an index-type list), and an array can be generated by an array generator. Arrays are associated with qualities such as being exact, non-ordered, and non-numeric. They support operations including selection (Select:table), replacement (Replace:array), and testing for equality (Equal:array). These axioms provide a formal definition capturing the essential nature and operational behavior of array datatypes.\nAxiom: {'subClassOf': ['homogenous aggregate datatype'], 'disjointWith': ['homogenous aggregate datatype with variable size'], 'propertyRestrictions': ['[has_operation some Select:table]', '[has_member some index-type list]', '[has_operation some Replace:array]', '[has_member some base type]', '[has_quality some non-ordered]', '[has_quality some non-numeric]', '[has_operation some Equal:array]', '[has_member some array generator]', '[has_quality only exact]']}\nGenerated CQs:", "output": "Is it required that entities classified under 'array' always possess the 'has_quality' property with at least one value of 'exact'? | Does every instance of an array have a 'has_quality' relation to some 'exact' value? | Can something be an array if it lacks an association via 'has_quality' to exact? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: scaled datatype\nDescription: scaled datatype is defined as a subclass of numeric ordered primitive datatype and is disjoint with both integer datatype and rational datatype, meaning it cannot overlap with these types. Members of the scaled datatype class must possess qualities such as being unbounded and exact, and must have members including scaled radix and scaled factor. They also support a defined set of operations, including divide, multiply, add, round, negate, equal, and in-order comparisons, all specific to the scaled datatype. This formalization distinguishes scaled datatype as a numeric primitive that facilitates arithmetic and ordering operations based on scaling factors, but is neither a traditional integer nor a rational type.\nAxiom: {'subClassOf': ['numeric ordered primitive datatype'], 'disjointWith': ['integer datatype', 'rational datatype'], 'propertyRestrictions': ['[has_operation some Divide:scaled]', '[has_operation some InOrder:scaled]', '[has_operation some Multiply:scaled]', '[has_member some scaled radix]', '[has_quality some exact]', '[has_operation some Negate:scaled]', '[has_operation some Round:scaled]', '[has_operation some Add:scaled]', '[has_member some scaled factor]', '[has_operation some Equal:scaled]', '[has_quality only unbounded]']}\nGenerated CQs:", "output": "Is it required that every scaled datatype possesses at least one 'has_quality' relationship to an unbounded value? | Can a scaled datatype exist without having the 'has_quality' property linking to something that is unbounded? | Does the axiom entail that the property 'has_quality' on scaled datatypes must reference at least one entity that is unbounded? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: integer datatype\nDescription: integer datatype is a subclass of numeric ordered primitive datatype, characterized by qualities such as being ordered, numeric, exact, and unbounded. It supports operations including addition, multiplication, negation, equality checking, and ordered comparison among integers, as well as ensuring the existence of non-negative integers. The class is explicitly disjoint with rational datatype, indicating that no individual can be both an integer and a rational that is not an integer. These axioms formalize the mathematical and operational properties unique to the integer datatype.\nAxiom: {'subClassOf': ['numeric ordered primitive datatype'], 'disjointWith': ['rational datatype'], 'propertyRestrictions': ['[has_operation some NonNegative:integer]', '[has_quality some ordered]', '[has_operation some Equal:integer]', '[has_quality some numeric]', '[has_quality some exact]', '[has_operation some Add:integer]', '[has_quality some unbounded]', '[has_operation some Multiply:integer]', '[has_operation some Negate:integer]', '[has_operation only InOrder:interger]']}\nGenerated CQs:", "output": "Must every instance with an integer datatype have at least one 'has_operation' property relating it to an integer in the set InOrder? | Is it required for entities described by this axiom to possess some operation involving an integer classified as InOrder? | Can an entity with an integer datatype exist in this ontology without being linked by 'has_operation' to at least one InOrder integer value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: exactness\nDescription: exactness is defined as a subclass of datatype property and is explicitly disjoint from the classes numericalness, cardinality, order, boundedness, and equality—meaning no instance can belong to any of these classes simultaneously. Additionally, exactness is equivalent to the union of approximate or exact, capturing the notion that it characterizes properties specifying whether something is described with complete precision or approximation. This class formally distinguishes the aspect of being exact from other quantitative or structural datatype attributes.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['numericalness', 'cardinality', 'order', 'boundedness', 'equality'], 'equivalentClass': ['(approximate and exact)']}\nGenerated CQs:", "output": "Is exactness defined by the union of approximate and exact categories? | Is every instance of exactness necessarily classified as either approximate or exact? | Are there any examples of exactness that do not fall under approximate or exact? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: cardinality\nDescription: cardinality is a subclass of datatype property and is disjoint from the classes order, boundedness, and equality, meaning no entity can simultaneously belong to both cardinality and any of these classes. It is formally equivalent to the union of countable, finite, and uncountable, reflecting that cardinality expresses the size or \"number of elements\" in a set, which may be countable, finite, or uncountable. This structure ensures clear differentiation from related set properties such as order, boundedness, and equality.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['order', 'boundedness', 'equality'], 'equivalentClass': ['(countable and finite and uncountable)']}\nGenerated CQs:", "output": "Is cardinality equivalent to the union of countable, finite, and uncountable concepts? | Can every instance classified under cardinality be either countable, finite, or uncountable? | Does cardinality include only those entities that are finite, countable, or uncountable, with no others? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boundedness\nDescription: boundedness is defined as a subclass of datatype property and is explicitly disjoint with equality, indicating that no instance can simultaneously represent boundedness and equality. It is further specified as being equivalent to either bounded or unbounded, meaning every instance of boundedness must fall into one of these two categories. This class formally captures the notion of whether a datatype property exhibits bounds or not, distinguishing it from properties concerning equality.\nAxiom: {'subClassOf': ['datatype property'], 'disjointWith': ['equality'], 'equivalentClass': ['(bounded and unbounded)']}\nGenerated CQs:", "output": "Is boundedness defined as the union of bounded and unbounded classes? | Are all instances of boundedness either bounded or unbounded? | Does boundedness include any class other than bounded and unbounded? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real field component\nDescription: real field component is defined as a subclass of primitive field component, disjoint with boolean field component—which ensures that no individual can be both a real field component and a boolean field component simultaneously. Members of this class are further constrained by a property restriction: each real field component must have a role with respect to some real datatype. This means that any real field component always relates in some way to a real (numeric, continuous) datatype, distinguishing it from other types of primitive field components.\nAxiom: {'subClassOf': ['primitive field component'], 'disjointWith': ['boolean field component'], 'propertyRestrictions': ['[role_of only real datatype]']}\nGenerated CQs:", "output": "Does a real field component necessarily play the role of some real datatype? | Is it required for every real field component to be associated, through 'role_of', with at least one instance of real datatype? | Can a real field component exist without participating in the 'role_of' relationship with any real datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: tree datatype\nDescription: tree datatype is defined as a subclass of labeled graph datatype, ensuring that every tree datatype inherits all structural features of labeled graph datatypes. It is explicitly disjoint with DAG datatype, meaning no instance can simultaneously belong to both classes. Additionally, every member of the tree datatype class must have at least one associated tree datatype generator, as specified by the property restriction. This formalization captures tree datatypes as hierarchical, non-cyclic structures generated by specific mechanisms and distinct from more general directed acyclic graphs.\nAxiom: {'subClassOf': ['labeled graph datatype'], 'disjointWith': ['DAG datatype'], 'propertyRestrictions': ['[has_member only tree datatype generator]']}\nGenerated CQs:", "output": "Is it required that a tree datatype property restriction always involves at least one has_member relation to a tree datatype generator? | Can a tree datatype property restriction exist without relating via has_member to any tree datatype generator? | Does every tree datatype property restriction necessarily specify the presence of a has_member property with a tree datatype generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: character datatype\nDescription: character datatype is defined as a subclass of non-numeric unordered primitive datatype. It is disjoint with discrete datatype and boolean datatype, ensuring that no datatype can be both a character datatype and either of those types. Members of the character datatype class are characterized by possessing at least one exact quality, supporting the Equal operation restricted to characters, and being associated with at least one character-set identifier. This formalization captures the essential properties of character datatypes, which are used to represent single text characters from specific character sets and are distinct from numeric or logical datatypes.\nAxiom: {'subClassOf': ['non-numeric unordered primitive datatype'], 'disjointWith': ['discrete datatype', 'boolean datatype'], 'propertyRestrictions': ['[has_quality some exact]', '[has_operation some Equal:character]', '[has_identifier only character-set identifier]']}\nGenerated CQs:", "output": "Must every character have at least one identifier from some character-set? | Is it required that a character is associated with an identifier belonging to a specific character-set? | Can a character exist without possessing any identifier corresponding to a character-set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete datatype\nDescription: discrete datatype is a subclass of non-numeric unordered primitive datatype, and it is explicitly disjoint with boolean datatype, ensuring that no individual can be both a discrete datatype and a boolean datatype. Members of this class must have at least one member from a discrete-value-list, support at least the equality operation (Equal:discrete), and possess the quality of exactness. This formalization captures the distinct, non-numeric, unordered nature of discrete datatypes, characterized by well-defined, separate values and an emphasis on precise equality comparisons.\nAxiom: {'subClassOf': ['non-numeric unordered primitive datatype'], 'disjointWith': ['boolean datatype'], 'propertyRestrictions': ['[has_member some discrete-value-list]', '[has_quality some exact]', '[has_operation only Equal:discrete]']}\nGenerated CQs:", "output": "Is it required that an entity with discrete datatype property restrictions must have at least one operation classified as 'Equal:discrete'? | Can a discrete datatype property restriction exist without being related to an 'Equal:discrete' operation through the has_operation property? | Does every instance with discrete datatype property restrictions necessarily possess some 'has_operation' relation to the 'Equal:discrete' operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined generator\nDescription: defined generator is a subclass of datatype generator. Every instance of defined generator is required to be associated with at least one defined datatype through the property is_member_of. This formalization ensures that defined generators are specifically linked to defined datatypes within the ontology.\nAxiom: {'subClassOf': ['datatype generator'], 'propertyRestrictions': ['[is_member_of only defined datatype]']}\nGenerated CQs:", "output": "Is it necessary for a generator to have the property 'is_member_of' with at least one defined datatype? | Can a generator exist without being a member of any defined datatype? | Does a generator always possess an association to some defined datatype through the 'is_member_of' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete base type\nDescription: discrete base type is defined as a subclass of base type, and is disjoint with real base type, ensuring that no individual can belong to both classes simultaneously. Members of this class participate in the role_of relationship with at least one discrete datatype, meaning that every discrete base type must be associated with some discrete datatype. This formalization distinguishes discrete base types from real base types and characterizes them by their association with discrete datatypes.\nAxiom: {'subClassOf': ['base type'], 'disjointWith': ['real base type'], 'propertyRestrictions': ['[role_of only discrete datatype]']}\nGenerated CQs:", "output": "Is every instance of discrete base type required to fulfill the role_of property with at least one discrete datatype? | Does discrete base type necessarily participate in the role_of relationship with some member of the discrete datatype class? | Are there any instances of discrete base type that do not have a role_of relation to any discrete datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record of boolean datatype\nDescription: record of boolean datatype is a subclass of record (tuple) datatype, disjoint from both record of real datatype and record of discrete datatype, ensuring that no individual can belong to any two of these classes simultaneously. Members of this class are characterized by having at least one member that is a boolean field-list, meaning each record must include at least one field of boolean type. This enforces that the records grouped under this class are distinguished by containing boolean data fields.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'disjointWith': ['record of real datatype', 'record of discrete datatype'], 'propertyRestrictions': ['[has_member only boolean field-list]']}\nGenerated CQs:", "output": "Is it required that a record includes at least one value for the field 'has_member' and that this value is of boolean type? | Must every record assign the 'has_member' property exclusively to fields of type boolean? | Can a record instance exist without providing a boolean value for the 'has_member' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unlabeled dataset record datatype\nDescription: unlabeled dataset record datatype is defined as a subclass of record (tuple) datatype. Members of this class are characterized by the presence of at least one has_member relationship to an unlabeled dataset field-list, meaning each record contains a list of fields but without associated labels. This structure is suitable for representing data records in datasets where attribute names are absent.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'propertyRestrictions': ['[has_member only unlabeled dataset field-list]']}\nGenerated CQs:", "output": "Does every unlabeled dataset record necessarily have at least one has_member relationship to an unlabeled dataset field-list? | Is it required for unlabeled dataset records to include some member from the unlabeled dataset field-list? | Can an unlabeled dataset record exist without being related via has_member to any unlabeled dataset field-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set of discrete datatype\nDescription: set of discrete datatype is defined as a subclass of set datatype, representing collections where each member belongs to a discrete base type (such as integers or other countable values). This class is explicitly disjoint from set of real datatype, ensuring that no instance can simultaneously be a set of both discrete and real datatypes. The axiom requires that every member of a set of discrete datatype must be of a discrete base type, emphasizing its use for finite or countably infinite elements.\nAxiom: {'subClassOf': ['set datatype'], 'disjointWith': ['set of real datatype'], 'propertyRestrictions': ['[has_member only discrete base type]']}\nGenerated CQs:", "output": "Must every instance in the set have at least one member of the specified discrete base type through the property 'has_member'? | Is it required that all elements related by 'has_member' belong to the discrete base type defined for the set? | Can any element in the set have a 'has_member' relationship to a value outside the defined discrete base type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate datatype\nDescription: aggregate datatype is defined as a subclass of generated datatype and is explicitly disjoint with non-aggregate datatype, ensuring that no individual can be both an aggregate and a non-aggregate datatype. It is characterized by having at least one member that is an aggregate generator (has_member some aggregate generator). Commonly referred to as a \"structured datatype,\" this class captures datatypes that are composed of multiple components or members rather than being atomic.\nAxiom: {'subClassOf': ['generated datatype'], 'disjointWith': ['non-aggregate datatype'], 'propertyRestrictions': ['[has_member only aggregate generator]']}\nGenerated CQs:", "output": "Is it required for an aggregate to have at least one member that is an aggregate generator? | Does every aggregate necessarily include some entity related by 'has_member' to the class aggregate generator? | Can an aggregate exist without having a 'has_member' relationship to any aggregate generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: date and time datatype\nDescription: date and time datatype is a subclass of non-numeric ordered primitive datatype, and is explicitly disjoint with ordinal datatype—meaning no instance can simultaneously belong to both classes. Members of this class possess qualities of being exact and potentially unbounded, and they necessarily have members such as date-time units, date-time radices, and date-time factors. The class supports specific operations, including extension, equality checking, ordering, difference calculation, and rounding of date and time values. This formalization ensures a precise and operation-rich definition of datatypes used for representing and manipulating combined date and time information, distinct from ordinal forms of data.\nAxiom: {'subClassOf': ['non-numeric ordered primitive datatype'], 'disjointWith': ['ordinal datatype'], 'propertyRestrictions': ['[has_operation some Extend:time&date]', '[has_operation some Equal:time&date]', '[has_operation some InOrder:time&date]', '[has_member some date-time unit]', '[has_operation some Difference:time&date]', '[has_quality some unbounded]', '[has_quality some exact]', '[has_operation some Round:time&date]', '[has_member some date-time factor]', '[has_member only date-time radix]']}\nGenerated CQs:", "output": "Is it required that has_member property of a date and time datatype always relates to at least one date-time radix? | Does every date and time datatype necessarily include a member that is a date-time radix? | Can a date and time datatype exist without being linked via has_member to any date-time radix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: datatype\nDescription: datatype is defined as a subclass of data representational model. Members of this class are characterized by three property restrictions: they possess at least one datatype property (has_quality some datatype property), are associated with at least one characterizing operation (has_operation some characterizing operation), and have at least one value space (has_attribute some value space). This formalization ensures that any individual classified as a datatype is a type of data representation distinguished by its qualities, the operations applicable to it, and its defined set of possible values.\nAxiom: {'subClassOf': ['data representational model'], 'propertyRestrictions': ['[has_operation some characterizing operation]', '[has_attribute some value space]', '[has_quality only datatype property]']}\nGenerated CQs:", "output": "Is it a requirement that instances must have at least one 'has_quality' property with a value of the specified datatype? | Are there any instances that lack the 'has_quality' property altogether under this restriction? | Does the ontology allow an individual to have multiple 'has_quality' relationships with values of the defined datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: complex datatype\nDescription: complex datatype is defined as a subclass of numeric primitive datatype and is disjoint with numeric ordered primitive datatype—meaning no individual can simultaneously belong to both classes. Members of this class are characterized as numeric, non-ordered, and approximate in nature. They support operations specific to complex numbers, such as reciprocal, negation, square root, multiplication, addition, promotion, and equality (all in the complex domain). Instances of complex datatype must include members such as complex radix and complex factor. This formalization captures the essential characteristics and operations associated with complex numbers in data representation, distinguishing them from ordered numeric primitive datatypes.\nAxiom: {'subClassOf': ['numeric primitive datatype'], 'disjointWith': ['numeric ordered primitive datatype'], 'propertyRestrictions': ['[has_operation some Reciprocal:complex]', '[has_operation some Negate:complex]', '[has_quality some non-ordered]', '[has_member some complex radix]', '[has_quality some numeric]', '[has_operation some SquareRoot:complex]', '[has_operation some Multiply:complex]', '[has_operation some Add:complex]', '[has_operation some Promote:complex]', '[has_member some complex factor]', '[has_operation some Equal:complex]', '[has_quality only approximate]']}\nGenerated CQs:", "output": "Is every complex entity required to have at least one quality that is approximate? | Does the existence of a complex entity entail the presence of some approximate quality? | Can a complex entity exist without being associated with an approximate quality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence datatype\nDescription: sequence datatype is defined as a subclass of homogenous aggregate datatype with variable size, and is explicitly disjoint with homogenous unordered aggregate datatype with variable size, ensuring no individual can belong to both classes. Members of this class are characterized by being non-ordered and non-numeric, containing only elements (members) of a base type and potentially a sequence generator. Sequence datatype supports several operations: checking for equality with another sequence, checking if the sequence is empty, retrieving the head (first element), appending elements, and retrieving the tail (all elements except the head). The inclusion of only these features signifies that sequence datatype represents an ordered, variable-sized, homogenous collection of elements with well-defined sequence-based operations.\nAxiom: {'subClassOf': ['homogenous aggregate datatype with variable size'], 'disjointWith': ['homogenous  unordered aggregate datatype with variable size'], 'propertyRestrictions': ['[has_operation some Equal:sequence]', '[has_quality some exact]', '[has_operation some IsEmpty:sequence]', '[has_quality some non-ordered]', '[has_operation some Head:sequence]', '[has_quality some non-numeric]', '[has_member some base type]', '[has_operation some Append:sequence]', '[has_operation some Tail:sequence]', '[has_member only sequence generator]']}\nGenerated CQs:", "output": "Must a sequence always have at least one member associated with a sequence generator? | Is the existence of a sequence generator mandatory for any member of a sequence? | Does every sequence necessarily require that at least one of its members is linked to a sequence generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bag datatype\nDescription: bag datatype is defined as a subclass of homogenous unordered aggregate datatype with variable size, and is explicitly disjoint with set datatype, ensuring that no instance can be both a bag and a set. Members of this class are characterized by containing elements (members) from a specified base type as well as from possible bag generators. Bags possess qualities of being non-ordered (element sequence is not significant), non-numeric, and \"exact\" (potentially referring to preserving element multiplicities). Bags support the following operations: Select, Insert, Delete, IsEmpty, Equal, and Serialize. This formalization models bags as flexible, unordered collections that can contain duplicate elements, are distinguished from sets by their handling of element multiplicity, and provide standard collection manipulation operations.\nAxiom: {'subClassOf': ['homogenous  unordered aggregate datatype with variable size'], 'disjointWith': ['set datatype'], 'propertyRestrictions': ['[has_quality some non-ordered]', '[has_operation some Insert:bag]', '[has_member some base type]', '[has_operation some Delete:bag]', '[has_operation some IsEmpty:bag]', '[has_operation some Equal:bag]', '[has_member some bag generator]', '[has_quality some non-numeric]', '[has_operation some Serialize:bag]', '[has_quality some exact]', '[has_operation only Select:bag]']}\nGenerated CQs:", "output": "Is it required that every bag instance must perform at least one 'Select:bag' operation? | Can any bag have an operation other than 'Select:bag', or is 'Select:bag' the only necessary operation for bags? | Does the existence of the 'has_operation' property for a bag necessarily imply the presence of a 'Select:bag' operation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate field component\nDescription: aggregate field component is defined as a subclass of field component and is explicitly disjoint with primitive field component, meaning no instance can belong to both classes simultaneously. Every aggregate field component must play the role of or be associated with some aggregate datatype, as specified by the property restriction (role_of some aggregate datatype). This formalization captures that aggregate field components are complex field components characterized by their association with aggregate datatypes, distinguishing them from primitive field components.\nAxiom: {'subClassOf': ['field component'], 'disjointWith': ['primitive field component'], 'propertyRestrictions': ['[role_of only aggregate datatype]']}\nGenerated CQs:", "output": "Does every aggregate field necessarily include at least one component that plays the role_of some aggregate datatype? | Is it required for an aggregate field to have a component related through role_of to an aggregate datatype? | Can an aggregate field exist without any component that fulfills the role_of some aggregate datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-numeric primitive datatype\nDescription: non-numeric primitive datatype is a subclass of primitive datatype and is explicitly disjoint with numeric primitive datatype, ensuring no individual can belong to both classes simultaneously. Members of this class must possess at least one quality that is non-numeric, as specified by the existential property restriction [has_quality some non-numeric]. This formalization captures primitive datatypes whose essential characteristics are not quantifiable numerically.\nAxiom: {'subClassOf': ['primitive datatype'], 'disjointWith': ['numeric primitive datatype'], 'propertyRestrictions': ['[has_quality only non-numeric]']}\nGenerated CQs:", "output": "Is it necessary for a resource to have at least one 'has_quality' property value of non-numeric type? | Does the use of the 'has_quality' property guarantee assignment with only non-numeric values? | Can an entity exist without any non-numeric value for its 'has_quality' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-numeric unordered primitive datatype\nDescription: non-numeric unordered primitive datatype is defined as a subclass of non-numeric primitive datatype, and is explicitly disjoint with non-numeric ordered primitive datatype, ensuring that no datatype can simultaneously be both unordered and ordered. Members of this class are characterized by the property restriction that they possess the quality of being non-ordered (has_quality some non-ordered), indicating that instances do not have an inherent order among their possible values.\nAxiom: {'subClassOf': ['non-numeric primitive datatype'], 'disjointWith': ['non-numeric ordered primitive datatype'], 'propertyRestrictions': ['[has_quality only non-ordered]']}\nGenerated CQs:", "output": "Is every instance with property 'has_quality' required to have at least one value from the class 'non-ordered'? | Must the property 'has_quality' always relate to some individual classified as 'non-ordered'? | Does possessing the 'has_quality' property necessarily entail an association with a 'non-ordered' value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous aggregate datatype\nDescription: homogenous aggregate datatype is defined as a subclass of aggregate datatype, and is explicitly disjoint with heterogenous aggregate datatype, ensuring that no individual can belong to both classes simultaneously. Members of this class are characterized by the property that they must have at least one member that is a homogenous aggregate generator. This formalization captures collections whose elements are produced by uniform (homogeneous) mechanisms, distinguishing them from heterogeneous aggregates both in structure and membership requirements.\nAxiom: {'subClassOf': ['aggregate datatype'], 'disjointWith': ['heterogenous aggregate datatype'], 'propertyRestrictions': ['[has_member only homogenous aggregate generator]']}\nGenerated CQs:", "output": "Is every homogenous aggregate required to have at least one member that is a homogenous aggregate generator? | Does a homogenous aggregate necessarily possess the property 'has_member' with respect to a homogenous aggregate generator? | Can a homogenous aggregate exist without any association via 'has_member' to a homogenous aggregate generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target primitive field component\nDescription: target primitive field component is defined as a subclass of labeled dataset target field component, specializing the notion of dataset fields that serve as targets in labeled datasets. Individuals in this class must play the role of some real, discrete, or boolean datatype, meaning the value types associated with these components are restricted to basic primitive datatypes (real numbers, discrete values, or boolean values). This specification clarifies that target primitive field components are intended for use where target variables are representable by primitive datatypes.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only (real datatype or discrete datatype or boolean datatype)]']}\nGenerated CQs:", "output": "Is every target primitive field component required to participate in the role_of relationship with a real, discrete, or boolean datatype? | Can a target primitive field component have a role_of property with something that is not a real, discrete, or boolean datatype? | Are real datatype, discrete datatype, and boolean datatype the only types permitted in the role_of property for target primitive field components? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target discrete field component\nDescription: target discrete field component is defined as a subclass of labeled dataset target field component. It is characterized by having a role that is associated with some discrete datatype, meaning the data values it represents are distinct and separate (e.g., categories or integers) rather than continuous. This ensures that every target discrete field component specifically involves target fields where the underlying data type is discrete.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only discrete datatype]']}\nGenerated CQs:", "output": "Is it required that every target discrete field component is associated with some role_of discrete datatype? | Can a target discrete field component exist without having the role_of property with a discrete datatype? | Does having the role_of property with at least one discrete datatype qualify an entity as a target discrete field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target sequence of real field component\nDescription: target sequence of real field component is a subclass of labeled dataset target field component. Members of this class are characterized by having the role_of some sequence of real datatype, meaning that each instance serves as a target field in a labeled dataset and fills a role associated with a sequence of real numbers (e.g., real-valued vectors or time series). This formalization restricts class membership to those dataset components whose target data are structured as sequences of real numbers.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only sequence of real datatype]']}\nGenerated CQs:", "output": "Is every target sequence of real field component required to be associated by the role_of property with at least one value of the real datatype? | Can a target sequence of real field component exist without possessing the role_of relation to elements of the real type? | Does the class target sequence of real field component necessarily have a role_of property restricted only to instances of the real datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target DAG field component\nDescription: target DAG field component is defined as a subclass of labeled dataset target field component and is further characterized by the property restriction that it must serve in the role_of some DAG datatype. This means that any instance of target DAG field component is specifically related to Directed Acyclic Graph (DAG) datatypes, describing target fields in labeled datasets that are intended to represent or interact with DAG structures.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only DAG datatype]']}\nGenerated CQs:", "output": "Is every target DAG field component required to have at least one property that fulfills the role_of some DAG datatype condition? | Can a target DAG field component lack the role_of relationship to any DAG datatype? | Does the existence of a role_of connection to a DAG datatype define the target DAG field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target set of discrete field component\nDescription: target set of discrete field component is defined as a subclass of labeled dataset target field component. Every individual in this class must play the role of some set of discrete datatype, meaning each component serves as a target field in a labeled dataset whose values are constrained to a discrete set. This ensures that the target values for this component are not continuous but instead belong to a well-defined set, aligning with tasks such as multi-class classification in machine learning.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only set of discrete datatype]']}\nGenerated CQs:", "output": "Must every target set of discrete field component have at least one role_of relation to a set of discrete datatype? | Is it required for the target set of discrete field component to be connected, through the role_of property, to a set of discrete datatype? | Does the existence of a target set of discrete field component imply that it plays the role_of with some set of discrete datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target record of boolean field component\nDescription: target record of boolean field component is defined as a subclass of labeled dataset target field component. Members of this class are characterized by the property that they play the role_of some record of boolean datatype, indicating that these components specifically serve as targets in datasets where the associated data is restricted to boolean (true/false) values. This formalization ensures that any instance of this class must be linked to records containing only boolean-typed data, supporting clear distinction in data modeling for boolean-labeled target fields.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only record of boolean datatype]']}\nGenerated CQs:", "output": "Is every target record required to have at least one property restriction where the role_of property relates to a record with a boolean datatype? | Can a target record exist without having any role_of property pointing to a record with a boolean value? | Does the ontology allow a target record to have role_of relationships only with records of non-boolean datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target record of reals field component\nDescription: target record of reals field component is defined as a subclass of labeled dataset target field component. Each member of this class must fulfill the property restriction of being the role_of some record of real datatype, ensuring that instances of this class represent components associated with labeled dataset targets, specifically those that play a role in or are linked to data records typed as real values (real numbers).\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of only record of real datatype]']}\nGenerated CQs:", "output": "Must every target record of reals field component have the role_of property relating it to at least one record of real datatype? | Is it mandatory for each target record of reals field component to participate in a role_of relationship with some instance classified as a record of real datatype? | Can a target record of reals field component exist without having the role_of property to any record of real datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive record of primitives field component\nDescription: descriptive record of primitives field component is a subclass of labeled dataset descriptive field component. Every instance of this class must be associated, via the property role_of, with at least one record of primitives datatype. This formalization indicates that members play a specific role in describing labeled datasets by being directly linked to data representations consisting of primitive types.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of only record of primitives datatype]']}\nGenerated CQs:", "output": "Does every descriptive record of primitives field component necessarily have a role_of relation with some record of primitives datatype? | Are all instances of descriptive record of primitives field component required to participate in at least one role_of relation with a record of primitives datatype? | Is it possible for a descriptive record of primitives field component not to be related via role_of to any record of primitives datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive record of boolean field component\nDescription: A descriptive record of boolean field component is defined as a subclass of labeled dataset descriptive field component. Any instance of this class must play the role of some record associated with a boolean datatype, signifying that its descriptive information pertains specifically to data fields that store boolean values.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of only record of boolean datatype]']}\nGenerated CQs:", "output": "Must every descriptive record of a boolean field component have at least one 'role_of' relation to a record of boolean datatype? | Is it required that any descriptive record of a boolean field component be linked by 'role_of' only to records of boolean datatype? | Are there descriptive records of boolean field components that lack any 'role_of' connection with a record of boolean datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive set of integer field component\nDescription: descriptive set of integer field component is a subclass of labeled dataset descriptive field component. Members of this class are characterized by having a role that involves some association with a set of integer datatype. This formalization ensures that any individual belonging to this class serves as a descriptive field within a labeled dataset, specifically representing or relating to a set of integer values.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of only set of integer datatype]']}\nGenerated CQs:", "output": "Is every descriptive set of integer field component required to have at least one role_of relationship to a set of integer datatype? | Must all descriptive sets of integer field components be assigned some role_of that connects them with a set of integer datatype? | Does the presence of a role_of link to a set of integer datatype necessarily characterize every descriptive set of integer field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Datatype Specification Language Representation\nDescription: Datatype Specification Language Representation is a class that is characterized by the requirement that its members must represent at least one datatype. There are no explicit superclass constraints, but it is formally defined such that any individual of this class must be linked via the 'represents' property to some datatype.\nAxiom: {'subClassOf': ['representation'], 'propertyRestrictions': ['[represents some datatype]']}\nGenerated CQs:", "output": "Is Datatype Specification Language Representation categorized under the broader class of representation? | Which representation subclasses include Datatype Specification Language Representation? | What are the parent classes of Datatype Specification Language Representation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined generator parameter\nDescription: defined generator parameter is a subclass of specification. This means that any individual classified as a defined generator parameter necessarily inherits all properties and constraints of a specification. There are no additional property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['specification'], 'propertyRestrictions': ['[has_identifier some parameter identifier]']}\nGenerated CQs:", "output": "Must every defined generator parameter have at least one 'has_identifier' relationship with a parameter identifier? | Is it required that a defined generator parameter is associated, via the 'has_identifier' property, to some parameter identifier? | Can a defined generator parameter exist without any 'has_identifier' link to a parameter identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: extending subtype generator\nDescription: An extending subtype generator is a class defined by the property restriction that it must have at least one member (has_member) belonging to the class extended-value-list. There are no specified superclasses, indicating that its primary defining characteristic is this existential relationship to extended-value-list.\nAxiom: {'subClassOf': ['subtype generator'], 'propertyRestrictions': ['[has_member some extended-value-list]']}\nGenerated CQs:", "output": "Is extending subtype generator categorized under subtype generator? | Which generators are classified as subtypes of subtype generator, including extending subtype generator? | What broader generator categories does extending subtype generator fall into? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: size subtype generator\nDescription: size subtype generator is a class whose members are defined by having at least one associated member via the has_member property that is of type size. This means any instance of size subtype generator must be linked to at least one instance of size, ensuring that all members are characterized by their connection to a size entity.\nAxiom: {'subClassOf': ['subtype generator'], 'propertyRestrictions': ['[has_member some size]']}\nGenerated CQs:", "output": "Is size subtype generator categorized under subtype generator? | What specific types are included within the broader class of subtype generator? | Which more general classes is size subtype generator a member of? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous aggregate generator with variable size\nDescription: homogenous aggregate generator with variable size is defined as a subclass of homogenous aggregate generator. This class inherits all properties and constraints of homogenous aggregate generators, and is intended to represent a specialized type where variable sizing is a distinguishing feature, although no further property restrictions are formally stated in the current axioms.\nAxiom: {'subClassOf': ['homogenous aggregate generator'], 'propertyRestrictions': ['[has_quality some variable size]']}\nGenerated CQs:", "output": "Is every homogenous aggregate generator required to have at least one quality corresponding to variable size? | Can a homogenous aggregate generator exist without exhibiting the variable size quality? | Does the property 'has_quality' for homogenous aggregate generators necessarily include variable size among its attributes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set generator\nDescription: set generator is a class defined by possessing certain qualities, specifically: every instance must have at least some quality of \"access by value\" and must also exhibit the quality of \"unique values.\" There are no specified superclasses. This means any member of the set generator class is characterized by being accessed by value and ensuring that its values are unique.\nAxiom: {'subClassOf': ['homogenous unordered aggregate generator with variable size'], 'propertyRestrictions': ['[has_quality some access by value]', '[has_quality some unique values]']}\nGenerated CQs:", "output": "Is every set generator classified under homogenous unordered aggregate generator with variable size? | Which specific generators fall under the category of homogenous unordered aggregate generator with variable size? | What broader categories include set generator as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: table generator\nDescription: table generator is defined as a class whose members possess several distinguishing qualities: they must exhibit non-unique values, have variable size, function as unordered aggregates, and possess a two-dimensional structure. These axioms constrain instances of table generator to entities that generate collections or aggregates of values in a two-dimensional, unordered manner, where the values are not necessarily unique and the total number of elements can vary.\nAxiom: {'subClassOf': ['heterogenous aggregate generator'], 'propertyRestrictions': ['[has_quality some non-unique values]', '[has_quality some variable size]', '[has_quality some unordered aggregate]', '[has_quality some two dimensional]']}\nGenerated CQs:", "output": "Is table generator classified under the broader category of heterogenous aggregate generator? | What specific types are encompassed by heterogenous aggregate generator, including table generator? | To which higher-level categories does table generator belong within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: choice generator\nDescription: choice generator is defined as a subclass of non-aggregate generator. This means every instance of choice generator is also an instance of non-aggregate generator, inheriting all its characteristics. There are no additional property restrictions specified for this class.\nAxiom: {'subClassOf': ['non-aggregate generator'], 'propertyRestrictions': ['[is_member_of some choice datatype]']}\nGenerated CQs:", "output": "Is it required that a choice generator possesses at least one is_member_of relationship with an instance of the choice datatype? | Can a choice generator exist without being linked to any element from the choice datatype through the is_member_of property? | Are all choice generators necessarily associated via is_member_of with members from the specified choice datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record (tuple) datatype\nDescription: The class \"record (tuple) datatype\" is characterized by several structural and behavioral properties: its members must possess at least one quality that is non-numeric, exact, and non-ordered. Each instance must be composed of member elements, specifically a record generator and a field-list. Additionally, this class supports several operations, including field selection (FieldSelect:record), field replacement (FieldReplace:record), and equality checking (Equal:record). These axioms formally define the class as an exact, non-numeric, non-ordered data structure with specialized field-based operations and a specified internal composition.\nAxiom: {'subClassOf': ['heterogenous aggregate datatype'], 'propertyRestrictions': ['[has_quality some non-numeric]', '[has_operation some FieldSelect:record]', '[has_operation some Equal:record]', '[has_quality some exact]', '[has_quality some non-ordered]', '[has_member some record generator]', '[has_operation some FieldReplace:record]', '[has_member some field-list]']}\nGenerated CQs:", "output": "Is every record (tuple) datatype classified under heterogenous aggregate datatype? | What specific datatypes are recognized as subclasses of heterogenous aggregate datatype, including record (tuple) datatype? | Which broader categories encompass the record (tuple) datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete-value identifier\nDescription: discrete-value identifier is defined as a subclass of identifier. This means every discrete-value identifier is an identifier, inheriting its general properties. No additional property restrictions or disjointness axioms are specified, so this class is characterized primarily by its position within the identifier hierarchy.\nAxiom: {'subClassOf': ['identifier'], 'propertyRestrictions': ['[has-value some rdfs:Literal]']}\nGenerated CQs:", "output": "Does every discrete-value identifier necessarily have a value for the property 'propertyRestrictions' that is a literal? | Is it required that each discrete-value identifier possesses at least one propertyRestrictions value belonging to rdfs:Literal? | Can a discrete-value identifier exist without having propertyRestrictions set to any literal value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: access type\nDescription: access type is defined as a class equivalent to the union of direct access property and indirect access property. This means that any instance of access type must be either a direct access property or an indirect access property, and vice versa. There are no additional subclass or disjointness constraints specified for this class.\nAxiom: {'subClassOf': ['aggregate generator property'], 'equivalentClass': ['(direct access property or indirect acess property)']}\nGenerated CQs:", "output": "Is access type categorized under aggregate generator property? | Which types are more specific than aggregate generator property, such as access type? | What broader property classes include access type as a specialized type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dimensionality\nDescription: dimensionality is a class defined as equivalent to the union of one dimensional, two dimensional, or multi dimensional. This means that any instance of dimensionality must be either one dimensional, two dimensional, or multi dimensional, and vice versa. No other types are permitted as instances of dimensionality outside these specified categories.\nAxiom: {'subClassOf': ['aggregate generator property'], 'equivalentClass': ['(one dimensional or two dimensional or multi dimensional)']}\nGenerated CQs:", "output": "Does dimensionality fall under the classification of aggregate generator property? | Which properties are more specific than aggregate generator property, such as dimensionality? | What broader property categories is dimensionality a member of? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined datatype\nDescription: defined datatype is a subclass of datatype, characterized by the requirement that it must have at least one member generated by a defined generator. This means every instance of defined datatype is associated with some entity that acts as its defined generator, ensuring a specific mechanism for the generation of its members.\nAxiom: {'subClassOf': ['datatype'], 'propertyRestrictions': ['[has_member some defined generator]', '[has_member some defined datatype parameter-list]']}\nGenerated CQs:", "output": "Is it required that an instance with defined datatype propertyRestrictions must have at least one has_member relationship to a defined datatype parameter-list? | Can something be described by defined datatype propertyRestrictions if it does not have any has_member relation to parameter-list? | Does the existence of defined datatype propertyRestrictions imply the presence of at least one member drawn from parameter-list via has_member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined datatype parameter\nDescription: defined datatype parameter is a class whose members are required to have an identifier (via the has_identifier property) and to be members of a defined datatype parameter-list (through the is_member_of property). Additionally, all instances of this class must play the role_of some datatype. There are no explicit superclass relationships specified for this class. These constraints formally specify that any defined datatype parameter is uniquely identified, associated with a particular datatype parameter list, and fulfills a datatype-related role.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[has_identifier some parameter identifier]', '[is_member_of some defined datatype parameter-list]', '[role_of some datatype]']}\nGenerated CQs:", "output": "Is defined datatype parameter classified under datatype role? | Which roles encompass defined datatype parameter as a specific member? | What more general concepts does defined datatype parameter fall under with respect to datatype role? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: field component\nDescription: field component is a class characterized by the presence of two property restrictions: every instance plays some role with respect to a datatype (role_of some datatype) and possesses at least one identifier of type field identifier (has_identifier some field identifier). This formalization ensures that any individual classified as a field component is associated with a datatype through a specific role and is uniquely identified by at least one field identifier.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[role_of some datatype]', '[has_identifier some field identifier]']}\nGenerated CQs:", "output": "Does field component fall under the category of datatype role? | What components are classified as more specific types within datatype role, including field component? | Which broader categories encompass field component as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: alternative component\nDescription: alternative component is defined as a subclass of datatype role and is further characterized by the property that it must have at least one member that is of the alternative-type. This means that any individual belonging to the class alternative component is necessarily a kind of datatype role and is linked, via the has_member property, to at least one alternative-type entity.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[has_member some alternative-type]', '[has_member some tag-value list]']}\nGenerated CQs:", "output": "Is it required that an alternative component must have at least one member belonging to a tag-value list? | Can an alternative component exist without having any member that is included in a tag-value list? | Are all alternative components necessarily associated with the has_member property linked to some tag-value list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index-type\nDescription: index-type is defined as a subclass of datatype role. Members of this class are required to have at least one member that is an index upperbound and at least one member that is an index lowerbound. Additionally, each index-type must be a member of some index-type list. This formalization ensures that index-types are characterized both by their bounds (upper and lower) and by their participation in larger index-type lists.\nAxiom: {'subClassOf': ['datatype role'], 'propertyRestrictions': ['[has_member some index upperbound]', '[is_member_of some index-type list]', '[has_member some index lowerbound]', '[role_of some datatype]']}\nGenerated CQs:", "output": "Is it required that every index-type has at least one role_of relationship to a datatype? | Can an index-type exist without being associated through role_of to any datatype? | Does the presence of a role_of link with a datatype distinguish index-type from other classes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: discrete field-list\nDescription: discrete field-list is a class defined by the property restriction that every instance must have at least one member that is a discrete field component. This means each discrete field-list contains one or more discrete field components, but no additional subclass or disjointness constraints are specified.\nAxiom: {'subClassOf': ['field-list'], 'propertyRestrictions': ['[has_member some discrete field component]']}\nGenerated CQs:", "output": "Is discrete field-list categorized under field-list? | What types are included within the field-list category? | Which general groupings contain discrete field-list as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: primitive field-list\nDescription: primitive field-list is defined as a subclass of field-list, meaning every primitive field-list is also a field-list. There are no additional property restrictions specified, so primitive field-list inherits all characteristics of field-list without further constraints.\nAxiom: {'subClassOf': ['field-list'], 'propertyRestrictions': ['[has_member some primitive field component]']}\nGenerated CQs:", "output": "Is every primitive field-list required to have at least one 'has_member' relationship with a primitive field component? | Can a primitive field-list exist if it does not include any primitive field component as a member? | Does the existence of a 'primitive field-list' imply the presence of a related 'primitive field component' via the 'has_member' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: attribute-list\nDescription: attribute-list is defined as a subclass of list specification. This means that every attribute-list is a type of list specification, inheriting all general characteristics of list specifications, but with no additional property restrictions specified.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member some attribute component]']}\nGenerated CQs:", "output": "Is it required that every attribute-list includes at least one component as a member? | Does the existence of a member with the attribute 'component' suffice for something to be classified under attribute-list? | Can an attribute-list be identified solely by having the property 'has_member' with at least one component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: alternative-list\nDescription: alternative-list is defined as a subclass of list specification. This means that every alternative-list is a type of list specification, inheriting all its characteristics, but may have additional properties or constraints not specified in this axiom. No additional property restrictions or disjointness are defined for this class.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member some alternative component]']}\nGenerated CQs:", "output": "Must every alternative-list include at least one alternative component as a member? | Is it required that alternative-list items possess a member that is classified as an alternative component? | Does the structure of alternative-list entail having some association with an alternative component through the has_member property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: defined datatype parameter-list\nDescription: defined datatype parameter-list is a subclass of list specification. This means every defined datatype parameter-list is a kind of list specification, inheriting its general properties and constraints. There are no additional property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member some defined datatype parameter]']}\nGenerated CQs:", "output": "Is it required for a parameter-list to have at least one has_member relationship with a defined datatype parameter? | Can a parameter-list exist without including any defined datatype parameter as a member? | Does every instance of parameter-list necessarily possess a has_member link with some defined datatype parameter? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: extended-value-list\nDescription: extended-value-list is defined as a subclass of list specification. This means that every extended-value-list is a specific kind of list specification, inheriting all its characteristics. No additional property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_identifier some extended-value identifier]']}\nGenerated CQs:", "output": "Is every instance of an extended-value-list required to have at least one has_identifier relationship with an extended-value identifier? | Can an extended-value-list exist without being linked by has_identifier to an extended-value identifier? | Does the presence of the has_identifier property between an extended-value-list and an extended-value identifier define the membership of extended-value-list in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: field-list\nDescription: field-list is a class whose members are characterized by containing at least one field component via the has_member property. There are no explicit superclass assignments or additional constraints, so any individual in this class must be related through has_member to at least one field component.\nAxiom: {'subClassOf': ['list specification'], 'propertyRestrictions': ['[has_member some field component]']}\nGenerated CQs:", "output": "Is field-list classified as a subtype of list specification? | What broader category does field-list fall under within the list specification hierarchy? | Which list specification subclasses encompass field-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: homogenous aggregate datatype with variable size\nDescription: homogenous aggregate datatype with variable size is a class defined by the property restriction that its members must have at least one member that is a homogenous aggregate generator with variable size. This implies that each instance of this class is composed, at minimum, of one such generator, capturing the characteristic of a homogenous aggregate whose overall size can vary.\nAxiom: {'subClassOf': ['homogenous aggregate datatype'], 'propertyRestrictions': ['[has_member some homogenous aggregate generator with variable size]']}\nGenerated CQs:", "output": "Can a homogenous aggregate datatype with variable size be classified under homogenous aggregate datatype? | What are the specific types categorized as homogenous aggregate datatype, including those with variable size? | Which general datatype categories include homogenous aggregate datatype with variable size as a specialization? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: rational datatype\nDescription: rational datatype is defined as a subclass of numeric ordered primitive datatype. Instances of rational datatype support a range of operations, including addition, multiplication, negation, equality testing, promotion, calculation of reciprocals, enforcement of non-negativity, and ordering comparisons—each operation resulting in another rational value. Members of this class are characterized by numeric, exact, and unbounded qualities, ensuring precise representation and manipulation without inherent range limitations.\nAxiom: {'subClassOf': ['numeric ordered primitive datatype'], 'propertyRestrictions': ['[has_operation some Multiply:rational]', '[has_operation some Reciprocal:rational]', '[has_quality some numeric]', '[has_operation some NonNegative:rational]', '[has_operation some Promote:rational]', '[has_operation some Equal:rational]', '[has_operation some Add:rational]', '[has_operation some Negate:rational]', '[has_quality some exact]', '[has_operation some InOrder:rational]', '[has_quality some unbounded]', '[has_quality some ordered]']}\nGenerated CQs:", "output": "Does every rational entity necessarily have at least one quality that is ordered? | Can a rational entity exist without the property 'has_quality' relating it to at least one ordered item? | Is it required that rational entities be associated exclusively with qualities that are ordered? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aggregate generator\nDescription: aggregate generator is defined as a class equivalent to the union of array generator, bag generator, class generator, record generator, sequence generator, set generator, and table generator. This means any individual classified as an aggregate generator is necessarily an instance of at least one of these generator classes, reflecting its role in producing or managing aggregate data structures in various forms.\nAxiom: {'subClassOf': ['generated datatype generator'], 'equivalentClass': ['(array generator or bag generator or class generator or record generator or sequence generator or set generator or table generator)']}\nGenerated CQs:", "output": "Does every aggregate generator fall under the category of generated datatype generator? | Which generator types are encompassed by the generated datatype generator class? | To which higher-level classes does aggregate generator pertain within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: vector datatype\nDescription: vector datatype is defined as a subclass of array datatype, indicating that every vector datatype is a specific kind of array datatype. There are no additional property restrictions constraining this class. This formalization means that all characteristics of array datatype apply to vector datatype, but not necessarily vice versa.\nAxiom: {'subClassOf': ['array datatype'], 'propertyRestrictions': ['[has_member some vector generator]']}\nGenerated CQs:", "output": "Is every instance with a 'has_member' relation to a vector required to be associated with a vector generator? | Can an entity with the 'has_member' property pointing to a vector be something other than a vector generator? | Are all entities that have members of type vector necessarily linked to a vector generator through the 'has_member' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boolean field component\nDescription: boolean field component is defined as a subclass of primitive field component. This means every boolean field component inherits all the characteristics of a primitive field component but is further distinguished as representing a boolean value (true/false). There are no additional property restrictions specified for this class.\nAxiom: {'subClassOf': ['primitive field component'], 'propertyRestrictions': ['[role_of some boolean datatype]']}\nGenerated CQs:", "output": "Is it required that the 'component' property of a boolean field always relates only to values of the boolean datatype? | Can a boolean field have a 'component' relationship to any entity that is not of boolean datatype? | Does every instance of a boolean field necessarily possess at least one 'component' that is a boolean datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: pointer datatype\nDescription: pointer datatype is defined as a subclass of non-aggregate datatype. It is characterized by several property restrictions: each instance must have some qualities that are non-ordered, non-numeric, and exact; must have members of both pointer generator and pointer-element-type; and must support an operation of Dereference:pointer. This ensures that pointer datatype is a non-aggregate datatype with specific qualities and structural members, and is associated with a dereference operation, aligning with typical formalizations of pointer representations in data models.\nAxiom: {'subClassOf': ['non-aggregate datatype'], 'propertyRestrictions': ['[has_quality some non-ordered]', '[has_quality some non-numeric]', '[has_member some pointer generator]', '[has_member some pointer-element-type]', '[has_operation some Dereference:pointer]', '[has_quality some exact]', '[has_operation some Equal:pointer]']}\nGenerated CQs:", "output": "Is every instance of pointer required to have at least one has_operation relationship with an individual of type Equal:pointer? | Must a pointer necessarily be associated with an Equal:pointer entity through the has_operation property? | Can a pointer exist without having has_operation linked to any Equal:pointer? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: procedure datatype\nDescription: procedure datatype is defined as a subclass of non-aggregate datatype, representing a data type that is not composed of multiple aggregated elements. Members of this class are constrained by the following: they possess at least one non-numeric quality and at least one quality of being exact; they necessarily include as members a procedure generator, a procedure-parameter-list, and a return-parameter specification. Additionally, procedure datatypes support the operations Equal:procedure and Invoke:procedure. This characterization ensures that a procedure datatype is a precise, non-aggregate entity equipped for procedural operations with defined parameters and qualities.\nAxiom: {'subClassOf': ['non-aggregate datatype'], 'propertyRestrictions': ['[has_quality some non-numeric]', '[has_member some procedure generator]', '[has_quality some exact]', '[has_member some procedure-parameter-list]', '[has_member some return-parameter specification]', '[has_operation some Equal:procedure]', '[has_operation some Invoke:procedure]', '[has_quality some non-ordered]']}\nGenerated CQs:", "output": "Is every procedure required to have at least one has_quality relationship to a non-ordered value? | Can a procedure exist without exhibiting the has_quality property to a non-ordered entity? | Does the property restriction on procedures mean that non-ordered qualities are necessarily associated with them via has_quality? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: upper bound\nDescription: upper bound is defined as a subclass of bound. This means every individual that is an upper bound is also a bound, inheriting all the characteristics of the bound class. No additional property restrictions have been specified for this class.\nAxiom: {'subClassOf': ['bound'], 'propertyRestrictions': ['[has-value exactly 1 xsd:integer]']}\nGenerated CQs:", "output": "Is it required that an upper bound always has exactly one property restriction with a value of type integer? | Can an upper bound possess more than one property restriction assigned to integer values? | Are multiple xsd:integer values allowed for the property restriction in the context of an upper bound? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: index upperbound\nDescription: index upperbound is defined as a subclass of bound. This indicates that every index upperbound is a type of bound, inheriting all general characteristics of bounds. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['bound'], 'propertyRestrictions': ['[has-value exactly 1 xsd:integer]']}\nGenerated CQs:", "output": "Is an index upperbound characterized by having exactly one value of type xsd:integer for its property restrictions? | Can an index upperbound have more than one xsd:integer value as a property restriction? | Must the property restriction for index upperbound be limited to a single xsd:integer value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: boolean datatype\nDescription: boolean datatype is defined as a subclass of non-numeric unordered primitive datatype. Each boolean datatype must possess at least one non-numeric and exact quality. It is characterized by specific logical operations: Not, And, Or, and Equal, with the results of these operations also being booleans. This formalization distinguishes boolean datatypes from other datatypes by their operations and by disallowing numeric and ordered qualities.\nAxiom: {'subClassOf': ['non-numeric unordered primitive datatype'], 'propertyRestrictions': ['[has_quality some non-numeric]', '[has_quality some exact]', '[has_operation some Not:boolean]', '[has_operation some And:boolean]', '[has_operation some Or:boolean]', '[has_operation some Equal:boolean]', '[has_quality some non-ordered]']}\nGenerated CQs:", "output": "Is every instance with the property 'has_quality' necessarily associated with at least one 'non-ordered' value? | Does the presence of 'has_quality' for an entity imply it must exhibit some form of 'non-ordered' quality? | Can an entity qualify if it does not have the 'has_quality' property linked to a 'non-ordered' value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: real base type\nDescription: real base type is defined as a subclass of base type. It inherits all characteristics of base type but is not further restricted by any additional property constraints. This class serves to specialize base type within the ontology hierarchy without imposing further conditions.\nAxiom: {'subClassOf': ['base type'], 'propertyRestrictions': ['[role_of some real datatype]']}\nGenerated CQs:", "output": "Is it necessary for a real base type to have the property 'role_of' with at least one real datatype? | Which kinds of real datatypes must be associated with real base types through the 'role_of' property? | Can a real base type exist without having a 'role_of' relationship to any real datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record of primitives datatype\nDescription: record of primitives datatype is a class whose members are defined by having at least one member from primitive field-list through the property has_member. There are no superclass assignments, and the only necessary condition for membership is the existence of at least one has_member relationship to a primitive field-list element.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'propertyRestrictions': ['[has_member some primitive field-list]']}\nGenerated CQs:", "output": "Is record of primitives datatype encompassed within the record (tuple) datatype category? | Which datatypes are specialized forms of record (tuple) datatype, including record of primitives datatype? | What broader datatype categories does record of primitives datatype fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: record of discrete datatype\nDescription: record of discrete datatype is defined as a subclass of record (tuple) datatype. This indicates that any instance of record of discrete datatype inherits all the structural characteristics of a record (tuple) datatype, but is specifically tailored to represent records whose elements are of discrete datatypes. There are no additional property restrictions specified for this class.\nAxiom: {'subClassOf': ['record (tuple) datatype'], 'propertyRestrictions': ['[has_member some discrete field-list]']}\nGenerated CQs:", "output": "Must every record of discrete datatype necessarily have at least one has_member relationship to an entity within discrete field-list? | Is it obligatory for a record of discrete datatype to include a member from the discrete field-list through the has_member property? | Can a record of discrete datatype exist without the has_member property linking it to some element of the discrete field-list? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set of real datatype\nDescription: set of real datatype is a class whose members are characterized by the property that they have at least one member belonging to the real base type. This means any instance of set of real datatype must contain at least one element that is a real number, as specified by the property restriction [has_member some real base type]. There are no additional subclass conditions or disjointness axioms specified.\nAxiom: {'subClassOf': ['set datatype'], 'propertyRestrictions': ['[has_member some real base type]']}\nGenerated CQs:", "output": "Is the set of real datatype encompassed within the set datatype category? | Which datatype classes are direct specializations of set datatype, such as set of real datatype? | To which datatype hierarchies does set of real datatype belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: non-aggregate datatype\nDescription: non-aggregate datatype is defined as a class whose members are characterized by having at least one relationship via the property has_member to some individual of the class non-aggregate generator. This means that every instance of non-aggregate datatype must be associated with at least one non-aggregate generator through the has_member property.\nAxiom: {'subClassOf': ['generated datatype'], 'propertyRestrictions': ['[has_member some non-aggregate generator]']}\nGenerated CQs:", "output": "Does every non-aggregate datatype belong under the category of generated datatype? | Which datatypes are explicitly classified as specializations of generated datatype? | To what higher-level datatype categories does non-aggregate datatype correspond? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ordinal datatype\nDescription: ordinal datatype is defined as a class whose members possess the qualities of being bounded below, unbounded above, ordered, non-numeric, and exact. Ordinal datatypes support specific operations, including InOrder, Successor, and Equal, each applied within the context of ordinal values. These restrictions ensure that instances of ordinal datatype represent ordered entities with a clear sense of sequence, are not inherently numeric, and have well-defined ordering and comparison capabilities.\nAxiom: {'subClassOf': ['non-numeric ordered primitive datatype'], 'propertyRestrictions': ['[has_operation some InOrder:ordinal]', '[has_quality some bounded below]', '[has_quality some unbounded above]', '[has_quality some ordered]', '[has_operation some Successor:ordinal]', '[has_operation some Equal:ordinal]', '[has_quality some non-numeric]', '[has_quality some exact]']}\nGenerated CQs:", "output": "Is ordinal datatype encompassed within the general classification of non-numeric ordered primitive datatype? | Which datatypes are more specialized forms of non-numeric ordered primitive datatype, including ordinal datatype? | What higher-level categories can ordinal datatype be assigned to within the datatype hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: range\nDescription: range is defined as a subclass of value expression. Members of this class are characterized by the property restriction that they must have at least one member related via the has_member property to an upper bound. This specifies that any range must include some upper bound among its members.\nAxiom: {'subClassOf': ['value expression'], 'propertyRestrictions': ['[has_member some upper bound]', '[has_member some lower bound]']}\nGenerated CQs:", "output": "Is every value of the property 'has_member' required to include at least one instance from the class 'lower bound'? | Does enforcing the property restriction 'has_member some lower bound' ensure that any entity linked by 'has_member' must have a member from the 'lower bound' class? | Can an entity have the 'has_member' property without referencing at least one 'lower bound' individual? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: numeric ordered primitive datatype\nDescription: numeric ordered primitive datatype is a class characterized by members that possess some quality of being ordered. This class is not asserted as a subclass of any other class, but every instance must exhibit the property has_quality with a value from the class ordered, indicating inherent orderability within its definition.\nAxiom: {'subClassOf': ['numeric primitive datatype'], 'propertyRestrictions': ['[has_quality some ordered]']}\nGenerated CQs:", "output": "Is numeric ordered primitive datatype one of the specific types classified under numeric primitive datatype? | What datatypes fall under the broader category of numeric primitive datatype, such as numeric ordered primitive datatype? | Which higher-level datatype categories include numeric ordered primitive datatype as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence of real datatype\nDescription: sequence of real datatype is a class whose members are defined by the property restriction that each individual must have at least one member that is of the real base type. This means that any instance of this class represents a sequence containing one or more elements, with each element being a real number.\nAxiom: {'subClassOf': ['sequence datatype'], 'propertyRestrictions': ['[has_member some real base type]']}\nGenerated CQs:", "output": "Is sequence of real datatype a specialization of sequence datatype? | Which datatypes fall under the general class of sequence datatype, including sequence of real datatype? | What broader datatype categories encompass sequence of real datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: set datatype\nDescription: set datatype is defined as a subclass of homogenous unordered aggregate datatype with variable size. Members of this class are characterized by having the following operations: set creation (Lsln:set, SetOf:set, Empty:set), set operations (Union:set, Intersection:set, Difference:set, Subset:set, Equal:class, Select:set), and membership relations (has_member some base type, has_member some set generator). Sets of this datatype possess qualities of being non-numeric and exact. This formalization enforces that each set is unordered, contains only elements of a single base type, and supports essential set-theoretic operations and properties as required by mathematical set theory and data modeling.\nAxiom: {'subClassOf': ['homogenous  unordered aggregate datatype with variable size'], 'propertyRestrictions': ['[has_operation some Lsln:set]', '[has_operation some Intersection:set]', '[has_member some base type]', '[has_operation some SetOf:set]', '[has_member some set generator]', '[has_operation some Select:set]', '[has_operation some Equal:class]', '[has_quality some non-numeric]', '[has_quality some exact]', '[has_operation some Empty:set]', '[has_operation some Difference:set]', '[has_operation some Union:set]', '[has_operation some Subset:set]', '[has_quality some non-ordered]']}\nGenerated CQs:", "output": "Must every instance that has 'has_quality' property possess at least one 'non-ordered' quality? | Is it obligatory for an entity with the 'has_quality' relation to always be associated with some non-ordered attribute? | Are there any entities for which the 'has_quality' property exists but does not connect to a non-ordered value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: primitive field component\nDescription: primitive field component is defined as a class whose instances must participate in the role_of property with at least one primitive datatype. This means that every primitive field component is related, via the role_of relationship, to some instance of a primitive datatype. There are no specified superclasses or disjointness axioms for this class.\nAxiom: {'subClassOf': ['field component'], 'propertyRestrictions': ['[role_of some primitive datatype]']}\nGenerated CQs:", "output": "Is primitive field component a specialized form within the broader class of field component? | Which entities are direct subclasses of field component, including primitive field component? | What higher-level classes encompass primitive field component in the ontology hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: numeric primitive datatype\nDescription: numeric primitive datatype is defined as a class whose members are entities that must possess some numeric quality, as indicated by the restriction that each instance has at least one quality classified as numeric. There are no explicitly stated superclasses for this class.\nAxiom: {'subClassOf': ['primitive datatype'], 'propertyRestrictions': ['[has_quality some numeric]']}\nGenerated CQs:", "output": "Is numeric primitive datatype categorized under the broader class of primitive datatype? | Which datatypes are considered specializations of primitive datatype, specifically including numeric primitive datatype? | To which more general datatype groups does numeric primitive datatype belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: heterogenous aggregate generator\nDescription: heterogenous aggregate generator is defined as any instance that is equivalent to either a generator, a record generator, or a table datatype, and possesses at least one quality that is heterogenous. This means that members of this class share essential characteristics with these three types and are distinguished by the presence of diverse or varied qualities.\nAxiom: {'subClassOf': ['aggregate generator'], 'equivalentClass': ['(class generator or record generator or table datatype)'], 'propertyRestrictions': ['[has_quality some heterogenous]']}\nGenerated CQs:", "output": "Is a heterogenous aggregate generator classified as a kind of aggregate generator? | Which aggregate generator types encompass heterogenous aggregate generators as subclasses? | What broader generator categories include heterogenous aggregate generator within their hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: heterogenous aggregate datatype\nDescription: heterogenous aggregate datatype is defined as a subclass of aggregate datatype. This class consists of aggregate datatypes where the constituent elements can be of different types or classes, distinguishing it from homogeneous aggregates where all elements must belong to the same type. No additional property restrictions are specified for this class.\nAxiom: {'subClassOf': ['aggregate datatype'], 'propertyRestrictions': ['[has_member some heterogenous aggregate generator]']}\nGenerated CQs:", "output": "Is every heterogenous aggregate required to have at least one member that is a heterogenous aggregate generator? | Must the property 'has_member' for a heterogenous aggregate always include a heterogenous aggregate generator as a possible member? | Can a heterogenous aggregate exist without being associated, via 'has_member', to any heterogenous aggregate generator? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: indirect acess property\nDescription: indirect access property is defined as a subclass of access type. This means that every instance of indirect access property is also an instance of access type, inheriting all characteristics and constraints of access type. There are no specified equivalent classes, so its definition relies solely on its subclass relationship.\nAxiom: {'subClassOf': ['access type'], 'equivalentClass': ['(access by value or implementation dependent access or position access)']}\nGenerated CQs:", "output": "Is an indirect access property necessarily either an access by value, an implementation dependent access, or a position access? | Is the class of indirect access property equivalent to the union of access by value, implementation dependent access, and position access? | Are there any types of access that are not covered by access by value, implementation dependent access, or position access when defining indirect access property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target boolean field component\nDescription: target boolean field component is defined as a subclass of labeled dataset target field component. This means every target boolean field component is also a labeled dataset target field component, but with more specific characteristics determined by its context or further specialization. No additional property restrictions are specified for this class.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some boolean datatype]']}\nGenerated CQs:", "output": "Is every instance of 'target' required to have the 'component' property with at least one value linked to the role_of property associated with a boolean datatype? | Can 'target' possess the 'component' property only if there is a related role_of property with values of boolean type? | Does the definition of 'target' entail that the 'component' property must always reference some boolean value through the role_of property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target real field component\nDescription: target real field component is defined as a subclass of labeled dataset target field component. This indicates that every target real field component inherits the properties and constraints of labeled dataset target field component, while potentially introducing further specification or specialization. There are no additional property restrictions defined for this class.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some real datatype]']}\nGenerated CQs:", "output": "Is every target real field component required to play the role_of property with at least one real datatype? | Can a target real field component exist without having a role_of relationship to any real datatype? | Does the ontology restrict target real field components to only have role_of relationships with real datatypes? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target hierarchical field component\nDescription: A target hierarchical field component is defined as a subclass of labeled dataset target field component. This indicates that every instance of target hierarchical field component is also considered a labeled dataset target field component, inheriting its properties and characteristics. No additional property restrictions are specified for this class.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some (tree datatype or DAG datatype)]']}\nGenerated CQs:", "output": "Is every target hierarchical field component necessarily associated through the 'role_of' property with either a tree datatype or a DAG datatype? | Can a target hierarchical field component have the 'role_of' property linked to both a tree datatype and a DAG datatype? | Does the presence of a 'role_of' relationship to any datatype other than tree or DAG preclude the entity from being classified as a target hierarchical field component? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target tree field component\nDescription: target tree field component is a class whose individuals are characterized by participating in a role_of relationship with at least one instance of tree datatype. There are no asserted superclasses, and its primary defining feature is its existential property restriction linking it to tree datatype.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some tree datatype]']}\nGenerated CQs:", "output": "Is target tree field component a specific type of labeled dataset target field component? | Which field components are classified under labeled dataset target field component, including target tree field component? | What broader classifications does target tree field component fall under in the dataset context? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target record of primitives field component\nDescription: target record of primitives field component is defined as any individual that plays a role in relation to at least one record of primitives datatype. This class has a property restriction, requiring that its members must be connected by the relation 'role_of' to some instance of record of primitives datatype. No additional subclass relationships are specified.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some record of primitives datatype]']}\nGenerated CQs:", "output": "Is every target record of primitives field component categorized under labeled dataset target field component? | Which specialized components fall under labeled dataset target field component, such as target record of primitives field component? | What are the parent classes of target record of primitives field component within the dataset ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target record of discrete field component\nDescription: target record of discrete field component is defined as any entity that has the role_of relationship to some record of discrete datatype. This class has a necessary condition that its instances must participate in the role_of property with at least one record of discrete datatype. No additional subclass relationships or disjointness axioms are specified.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some record of discrete datatype]']}\nGenerated CQs:", "output": "Is every target record of discrete field component classified under labeled dataset target field component? | What are the more specific concepts included within labeled dataset target field component, such as target record of discrete field component? | To which overarching categories does target record of discrete field component belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: target structured field component\nDescription: target structured field component is defined as a subclass of labeled dataset target field component. This indicates that every target structured field component is also a labeled dataset target field component, inheriting all characteristics of its superclass. No additional property restrictions or disjointness axioms are specified, so its meaning is fully determined by its subclass relationship.\nAxiom: {'subClassOf': ['labeled dataset target field component'], 'propertyRestrictions': ['[role_of some (table datatype or array datatype or class datatype or sequence datatype or bag datatype or set datatype)]']}\nGenerated CQs:", "output": "Is every target structured field component required to have a role_of relationship with at least one of the following datatypes: table, array, class, sequence, bag, or set? | Does the definition of target structured field component necessitate that its role_of property is fulfilled by at least one datatype among table, array, class, sequence, bag, or set? | Can a target structured field component possess a role_of relation to any datatype beyond table, array, class, sequence, bag, or set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive record of reals field component\nDescription: descriptive record of reals field component is defined as a subclass of labeled dataset descriptive field component. This means that any instance of descriptive record of reals field component is also considered a labeled dataset descriptive field component, inheriting all associated characteristics. No additional property restrictions are specified for this class.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of some record of real datatype]']}\nGenerated CQs:", "output": "Is every descriptive record of a reals field component required to have at least one 'role_of' relationship with a record of real datatype? | Can a descriptive record of a reals field component exist without being related via 'role_of' to any record of real datatype? | Does the ontology ensure that the presence of the 'role_of' property in a descriptive record of a reals field component necessarily points to an individual of type record of real datatype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive record of discrete field component\nDescription: descriptive record of discrete field component is defined as any entity that plays the role_of some record of discrete datatype. This means that every instance of this class must be related via the role_of property to at least one record of discrete datatype, reflecting its function as a descriptive entity specifically associated with discrete data records.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of some record of discrete datatype]']}\nGenerated CQs:", "output": "Is every descriptive record of discrete field component classified under labeled dataset descriptive field component? | Which entities fall under the labeled dataset descriptive field component category, such as descriptive record of discrete field component? | What broader categories include descriptive record of discrete field component as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: descriptive strucured field component\nDescription: descriptive structured field component is defined as a subclass of labeled dataset descriptive field component. This indicates that every descriptive structured field component inherits all characteristics of a labeled dataset descriptive field component and specializes it, but no additional property restrictions are imposed for further differentiation.\nAxiom: {'subClassOf': ['labeled dataset descriptive field component'], 'propertyRestrictions': ['[role_of some (array datatype or class datatype or sequence datatype or bag datatype or set datatype)]']}\nGenerated CQs:", "output": "Must every descriptive structured field component play a role in at least one array, class, sequence, bag, or set datatype? | Is it required that a descriptive structured field component serves in a role involving only array, class, sequence, bag, or set datatypes? | Can a descriptive structured field component have the role_of property with any datatype type other than array, class, sequence, bag, or set? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_identifier\nDescription: The property \"has_identifier\" is defined as a sub-property of \"has_attribute\" and does not have explicitly stated characteristics, domain, or range restrictions. It represents an attribute relationship, likely used to associate an entity with a unique identifier, though no inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Which properties are considered subproperties under has_attribute? | Is has_identifier categorized as a subproperty of has_attribute? | Does assigning a has_identifier property inherently assign a has_attribute property as well? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is_member_of\nDescription: The property \"is_member_of\" does not have specified domain or range restrictions and has no special characteristics defined. It is a sub-property of \"attribute_of\" and has \"has_member\" as its inverse property. This property is used to relate an entity to a group or collection to which it belongs.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['attribute_of'], 'inverseOf': []}\nGenerated CQs:", "output": "What is the logical connection between ‘is_member_of’ and ‘has_member’ in the ontology? | If entity A is a member of entity B, does that entail that B has member A according to the ontology? | Which property is declared as the inverse of ‘is_member_of’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is_quality_of\nDescription: The property \"is_quality_of\" has no explicitly defined characteristics, domain, or range restrictions, and is not specified as a sub-property of any other property. It is defined as the inverse of the property \"has_quality,\" indicating that it relates a quality to the entity it qualifies.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What is the logical connection between ‘is_quality_of’ and ‘has_quality’ as defined in the ontology? | If entity A is related to entity B via ‘is_quality_of’, does this entail that B is related to A via ‘has_quality’? | Which object property is specified as the inverse of ‘is_quality_of’ in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: identifier_for\nDescription: The property \"identifier_for\" does not specify explicit domain or range restrictions and has no defined characteristics. It is a sub-property of \"attribute_of\" and serves as the inverse of the property \"has_identifier.\" This property is used to relate an identifier to the entity it identifies, reflecting an attribute relationship between the identifier and the entity.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['attribute_of'], 'inverseOf': []}\nGenerated CQs:", "output": "What is the logical correspondence between the properties ‘identifier_for’ and ‘has_identifier’ in the ontology? | If entity A is identified by B using ‘identifier_for’, does it follow that B has A as an identifier via ‘has_identifier’? | Which property operates as the inverse of ‘identifier_for’ in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: represents\nDescription: The property \"represents\" has no explicitly defined domain, range, or characteristics, and does not specify an inverse property. It is a sub-property of owl:topObjectProperty, indicating it is a very general object property that can relate any two individuals in the ontology. No further semantic constraints are provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is represents a subproperty of any top-level object property in the ontology? | Which properties are classified as superproperties of represents? | Does every use of the represents property imply a relationship defined by the most general object property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_attribute\nDescription: The property \"has_attribute\" has no explicitly defined characteristics, domain, or range restrictions. It is a sub-property of owl:topObjectProperty and is defined as being its own inverse property, indicating a symmetric relationship. No additional description is currently provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "What is the inverse property associated with ‘has_attribute’ defined in the ontology? | If entity A has an attribute B, can we infer that B has an attribute A within the ontology’s structure? | How does the ontology specify the logical connection between ‘has_attribute’ and its inverse? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: role_of\nDescription: The property \"role_of\" does not have explicitly specified domain or range restrictions and lacks defining characteristics. It is a sub-property of \"owl:topObjectProperty\" and has \"has_role\" as its inverse property. This property is typically used to relate a role to an entity, indicating that the entity plays or fulfills a particular role.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "How are 'role_of' and 'has_role' semantically connected as inverse properties in the ontology? | If entity E is linked to F via 'role_of', does the ontology entail that F is connected to E via 'has_role'? | Which property is defined as the inverse of 'role_of' in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is_operation_of\nDescription: The property \"is_operation_of\" has no explicitly defined domain or range restrictions and does not possess any special logical characteristics. It is defined as a sub-property of \"attribute_of,\" indicating that it represents a specific kind of attributions between entities. Additionally, it has an inverse property \"has_operation,\" establishing a bidirectional relationship between related entities.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['attribute_of'], 'inverseOf': []}\nGenerated CQs:", "output": "How are the properties ‘is_operation_of’ and ‘has_operation’ interconnected in the ontology? | If an entity X is an operation of Y, does it follow that Y has operation X under the ontology’s semantics? | Which property is designated as the inverse of ‘is_operation_of’ in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has-value\nDescription: The property \"has-value\" does not have explicitly defined characteristics, domain, range, super-properties, or inverse properties. This indicates a general-purpose property whose usage and constraints are not restricted by axioms in the current ontology specification.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can anything be the domain of the 'has-value' property, or is its domain truly undefined? | What types of entities, if any, can act as subjects for the 'has-value' property? | Can 'has-value' relate to objects other than those with a specified range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: attribute_of\nDescription: The property \"attribute_of\" has no explicitly defined characteristics, domain, or range restrictions. It is not specified as a sub-property of any other property and does not have an inverse property. This property can be used generally to relate an attribute to any entity without further ontological constraints.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that the property 'attribute_of' does not have a specified domain? | What are the possible domains for the property 'attribute_of'? | What kinds of entities can be the range of the property 'attribute_of'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: owl:topObjectProperty\nDescription: The property \"owl:topObjectProperty\" has no specified domain, range, characteristics, super-properties, or inverse property. It is the most general object property in OWL ontologies, capable of relating any pair of individuals without restriction.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'owl:topObjectProperty' relate to any type of object as its range? | Are there restrictions on the types of subjects that owl:topObjectProperty can be used with? | Is it valid for owl:topObjectProperty to lack a specified domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is-about\nDescription: The property \"is-about\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. It can be used without restriction between individuals, as no specific limitations or semantics are imposed by the given axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "Is is-about classified as a subproperty of owl:topObjectProperty? | Which superproperties are associated with is-about in the ontology? | What subproperties, if any, are defined under owl:topObjectProperty? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_operation\nDescription: The property \"has_operation\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. Its usage and interpretation are not restricted by axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['has_attribute'], 'inverseOf': []}\nGenerated CQs:", "output": "Is every instance of has_operation necessarily an instance of has_attribute? | Which properties are defined as subproperties under has_attribute? | What superproperties are associated with has_operation in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_role\nDescription: The property \"has_role\" has no specified characteristics, domain, range, super-properties, or inverse properties. It serves as a general-purpose property with no explicit usage constraints.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "Is has_role a specialization of owl:topObjectProperty? | Which properties are classified as subproperties under owl:topObjectProperty? | Does the assertion of has_role between entities entail a more general relationship as defined by owl:topObjectProperty? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_quality\nDescription: The property \"has_quality\" has no specified characteristics, domain, range, super-properties, or inverse properties. This indicates it is a general-purpose property that can relate any entities to unspecified qualities, without imposed logical constraints.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "Is has_quality a subproperty of owl:topObjectProperty? | Which properties are subproperties of owl:topObjectProperty? | What superproperties does has_quality have within the property hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has_member\nDescription: The property \"has_member\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. It can be used to relate any entities without restriction and does not inherit constraints from other properties.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['has_attribute'], 'inverseOf': []}\nGenerated CQs:", "output": "Is has_member considered a specific type of has_attribute property? | Which properties are categorized as subproperties of has_attribute? | What are the direct superproperties of has_member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: denotes\nDescription: The property \"denotes\" has no explicitly defined characteristics, domain or range restrictions, super-properties, or inverse properties. This indicates that it can be used flexibly to relate any two entities without ontological constraints.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['is-about'], 'inverseOf': []}\nGenerated CQs:", "output": "Which properties are defined as subproperties under is-about, such as denotes? | Does an assertion using denotes also satisfy constraints requiring is-about? | What superproperties are associated with denotes in the ontology hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein-ligand docking\nDescription: Protein-ligand docking is a subclass of molecular docking, focused on modeling the binding interactions between proteins and ligands. It is formally restricted to topics involving protein interactions and must produce as output a protein-ligand complex. Methods in this class aim to predict both the position and orientation of a ligand when bound to a protein receptor or enzyme, utilizing comparative modeling or other computational techniques to model protein-ligand (e.g., protein-peptide) binding events.\nAxiom: {'subClassOf': ['Molecular docking'], 'propertyRestrictions': ['[has output some Protein-ligand complex]']}\nGenerated CQs:", "output": "Does every protein-ligand docking necessarily involve some aspect related to protein interactions? | Is it required that protein-ligand docking has a topic associated with protein interactions? | Does protein-ligand docking always pertain to a subject within the domain of protein interactions? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ensembl gene ID\nDescription: Ensembl gene ID is a subclass of both Gene ID and Ensembl ID, representing a unique identifier specifically assigned to a gene or related feature within the Ensembl database. This class is used to distinctly reference genetic loci in the Ensembl genome annotation system, ensuring unambiguous identification of genetic entities and facilitating cross-referencing between biological databases.\nAxiom: {'subClassOf': ['Gene ID']}\nGenerated CQs:", "output": "Is Ensembl gene ID classified under Ensembl ID? | Which instances are defined as specific types of Ensembl ID, such as Ensembl gene ID? | What broader identifiers encompass the Ensembl gene ID category? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GeneR\nDescription: GeneR is defined as a subclass of software that is implemented in the R programming language. Members of this class are characterized by accepting multiple specified data input types: general data formatted as R data frames, gene lists with specific data format specifications, and data in FASTA format. These input constraints ensure that any instance of GeneR-typed software is capable of handling commonly used biological data formats, particularly those relevant for bioinformatics applications in R.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has specified data input some (data and [has format specification some R data frame])]', '[has specified data input some (Gene list and [has format specification some data format specification])]', '[is encoded in some R language]', '[has specified data input some (data and [has format specification some FASTA])]']}\nGenerated CQs:", "output": "Is GeneR categorized under the broader class of software? | What are the specific subclasses defined within the class of software, including GeneR? | To which upper-level classes does GeneR belong according to the hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: maCorrPlot\nDescription: maCorrPlot is a subclass of software designed for use in data visualization, background correction, and data normalization workflows. It requires data inputs specifically in mas5 or .rma formats, and its outputs include at least one Graph plot. maCorrPlot is implemented in the R language, and the authoritative source for this software is Bioconductor. This class formalizes the functional characteristics and technical restrictions of maCorrPlot, ensuring its application in specialized bioinformatic data analysis pipelines.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data output some Graph plot]', '[is encoded in some R language]', '[is published by hasValue Bioconductor]', '[is executed in some (data visualization and background correction and data normalization)]']}\nGenerated CQs:", "output": "Is it required that any specified data input for maCorrPlot has a format specification restricted exclusively to mas5 format or .rma format? | Can maCorrPlot accept a specified data input if its format specification is neither mas5 format nor .rma format? | Does the property restriction ensure that all specified data inputs for maCorrPlot must have a format specification only among mas5 format or .rma format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CRG Expresso Web Tool\nDescription: CRG Expresso Web Tool is defined as a subclass of TCoffee, with several specific characteristics. Individuals of this class are required to have documentation identified as ns6:gkl092 and provide at least one web user interface. They must utilize some version of the CRG TCoffee 9.02.r1228 software. Additionally, their outputs must result from a software publishing process in which the Centre for Genomic Regulation (CRG) of Barcelona is a participant. This class models web-based tools for TCoffee developed and documented by CRG, with online accessibility and provenance traceable to the institution.\nAxiom: {'subClassOf': ['TCoffee'], 'propertyRestrictions': ['[has documentation hasValue ns6:gkl092]', '[has interface some web user interface]', '[output of some (software publishing process and [has participant hasValue Centre for Genomic Regulation (CRG) of Barcelona])]']}\nGenerated CQs:", "output": "Is it required for the CRG Expresso Web Tool to utilize at least one instance of the CRG TCoffee 9.02.r1228 software? | Does every use of the CRG Expresso Web Tool involve employing the CRG TCoffee 9.02.r1228 as software? | Can the CRG Expresso Web Tool use software other than CRG TCoffee 9.02.r1228, or is use restricted to this version only? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Transcriptomics\nDescription: Transcriptomics is defined as a subclass of both Genomics and Gene expression, focusing on the comprehensive analysis of transcriptomes—the complete set of RNA molecules present in a given cell, tissue, or organism. This class encompasses topics and research related to measuring, analyzing, and interpreting gene expression at the RNA level, thereby linking the study of genetic material (genomics) with the actual molecular output (gene expression) observed in biological samples.\nAxiom: {'subClassOf': ['Gene expression']}\nGenerated CQs:", "output": "Is Transcriptomics classified within the hierarchy of Genomics? | What broader categories encompass Transcriptomics in the context of genomics research? | Which specialized fields are narrower in scope than Genomics, such as Transcriptomics? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: qpgraph\nDescription: qpgraph is a subclass of software that is specifically designed for use in descriptive statistical calculations, particularly those involving gene expression data as input. It outputs graph plots, with data formats specified as R data frames. qpgraph implements Pearson correlation estimators and AvgNRRs, and is encoded in the R programming language. This software is published by Bioconductor, ensuring its integration within the bioinformatics community.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is executed in some descriptive statistical calculation]', '[has specified data output some (Graph plot and [has format specification only R data frame])]', '[has specified data input some Gene expression data]', '[is encoded in some R language]', '[is published by hasValue Bioconductor]']}\nGenerated CQs:", "output": "Does every qpgraph have to implement at least one functionality that is both a Pearson correlation estimator and an AvgNRRs? | Is it required for qpgraph to employ methods that satisfy the criteria of both Pearson correlation estimator and AvgNRRs? | Can an entity be classified as qpgraph if it lacks an implementation comprising both Pearson correlation estimator and AvgNRRs? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AtlasImage\nDescription: AtlasImage is defined as a subclass of software, specifically distinguished by being the output of at least one software publishing process in which Clontech Laboratories, Inc is a participant. This ensures that any instance of AtlasImage is software generated or published through such a process involving Clontech Laboratories, Inc.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[output of some (software publishing process and [has participant hasValue Clontech Laboratories, Inc])]']}\nGenerated CQs:", "output": "Is AtlasImage classified under the broader category of software? | Which specific entities are categorized as subclasses of software, such as AtlasImage? | To what higher-level categories does AtlasImage pertain within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: affypdnn\nDescription: affypdnn is defined as a subclass of software, with several specific characteristics. It operates on input that must be a text data set in the format of an R data frame, and it is encoded in the R programming language. The software produces output in the form of graph plots. Additionally, it is explicitly published by Bioconductor. These axioms collectively specify affypdnn as R-based software for producing graphical representations from structured text data sets, distributed via Bioconductor.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has specified data input some (Text data set and [has format specification some R data frame])]', '[is encoded in some R language]', '[has specified data output some Graph plot]', '[is published by hasValue Bioconductor]']}\nGenerated CQs:", "output": "Is affypdnn categorized as a type of software? | What other subclasses fall under software alongside affypdnn? | Which higher-level classes encompass affypdnn? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: rsbml\nDescription: rsbml is defined as a subclass of software, specifically characterized by several axioms. It must be executed through at least one of the following processes: parse or cross validation. The software is encoded in the R programming language and is published by Bioconductor. Regarding data interaction, rsbml takes as input data that is strictly formatted according to the SBML specification and produces output data formatted exclusively according to the XML specification. These axioms collectively ensure that any instance of rsbml adheres to these strict requirements concerning its function, implementation language, publisher, and I/O data format.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is executed in some (parse and cross validation)]', '[is published by hasValue Bioconductor]', '[has specified data input some [has format specification only SBML]]', '[has specified data output some [has format specification only XML]]']}\nGenerated CQs:", "output": "Is it required that every rsbml property restriction be encoded in at least one R language? | Can an rsbml property restriction exist without being encoded in any R language? | Does the ontology allow for multiple R languages to encode a single rsbml property restriction? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Data retrieval\nDescription: Data retrieval is defined as a subclass of Query and retrieval, specifically focusing on retrieving an entry or part of an entry from a data resource that matches a supplied query. Every instance of Data retrieval requires an input that is an Identifier, such as an accession number or an indexed term. This process may involve obtaining primary data and annotations associated with the query. The class formalizes retrieval activities where a unique identifier or an indexed keyword is used to locate and access relevant data entries within a resource.\nAxiom: {'subClassOf': ['Query and retrieval'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is it required that a Data retrieval instance has at least one 'has input' relationship to an Identifier? | Can a Data retrieval process exist without being associated with any Identifier through the 'has input' property? | Does Data retrieval necessarily involve input that is classified as an Identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Raw microarray data\nDescription: Raw microarray data is a subclass of both Experimental measurement and Microarray hybridisation data. It refers to the unprocessed data generated from microarray experiments, as commonly found in formats like Affymetrix CEL or GPR files. This data typically adheres to MIAME compliance and captures the initial measurements resulting from hybridisation events in a microarray assay.\nAxiom: {'subClassOf': ['Experimental measurement']}\nGenerated CQs:", "output": "Is Raw microarray data classified under the broader category of Microarray hybridisation data? | Which specific data types fall under Microarray hybridisation data, such as Raw microarray data? | What are the parent categories for Raw microarray data within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Dotplot plotting\nDescription: Dotplot plotting is a subclass of Plotting, Sequence word comparison, and Sequence alignment visualisation, indicating its role in both visual representation and comparative analysis of biological sequences. Any Dotplot plotting process is characterized by producing some Dotplot as output. It specifically involves drawing a dotplot to visualize sequence similarities, which are identified through word-matching or character comparison techniques. This class formalizes visualization methods for interpreting sequence alignments using dotplots.\nAxiom: {'subClassOf': ['Plotting', 'Sequence alignment visualisation'], 'propertyRestrictions': ['[has output some Dotplot]']}\nGenerated CQs:", "output": "Does Dotplot plotting fall under the category of Sequence word comparison? | Which methods are classified under Sequence word comparison, such as Dotplot plotting? | What broader methodological class does Dotplot plotting belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Obsolete\nDescription: Obsolete is defined as a subclass of Development status, indicating it represents a specific developmental state. It is explicitly disjoint with Maintained, meaning an entity cannot simultaneously be classified as both Obsolete and Maintained. This ensures a clear distinction between entities that are no longer in active use or development (Obsolete) and those that continue to be supported or updated (Maintained).\nAxiom: {'subClassOf': ['Development status'], 'disjointWith': []}\nGenerated CQs:", "output": "What logical separation is asserted between Obsolete and Maintained entities in the ontology? | Is it permitted for a resource to be classified as both Obsolete and Maintained? | Which classes are declared as disjoint with Maintained in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein family report\nDescription: Protein family report is defined as a subclass of Protein report, focusing specifically on content whose topic concerns one or more protein families. It is formally characterized by the requirement that it pertains to, or discusses, some protein families. According to its current definition, it provides informative content on a specific protein family or related classification, encompassing groups of protein sequences or structures.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has topic some Protein families]']}\nGenerated CQs:", "output": "Is Protein report a broader category that encompasses Protein family report? | Which types of reports are classified under Protein report, including Protein family report? | To what higher-level categories does Protein family report belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CDF binary format\nDescription: CDF binary format is defined as a subclass of Binary format and is specifically published by Affymetrix. This class represents the binary variant of the CDF format; due to historical uncertainty about the format's original specification (ASCII or binary), this class has been clearly designated for the binary version, while a separate class (CDF ASCII format) exists for the ASCII variant.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[is published by hasValue Affymetrix]']}\nGenerated CQs:", "output": "Is CDF binary format categorized as a subclass of Binary format? | Which types are encompassed by the Binary format class, and does this include CDF binary format? | What are the broader format categories that include CDF binary format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: derivative software not allowed\nDescription: derivative software not allowed is defined as a subclass of Derivatives clause, and is explicitly disjoint with derivative software allowed. This means that any clause categorized under derivative software not allowed falls within the broader category of Derivatives clause, but cannot simultaneously be considered as allowing derivative software. This class formalizes the restriction that the creation or use of derivative software is not permitted under this clause.\nAxiom: {'subClassOf': ['Derivatives clause'], 'disjointWith': []}\nGenerated CQs:", "output": "What logical separation exists between 'derivative software not allowed' and 'derivative software allowed' within the ontology? | Is any software classified as both 'derivative software not allowed' and 'derivative software allowed'? | Which software permission classes are specifically declared as disjoint with 'derivative software allowed'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence Alignment and Modeling System\nDescription: Sequence Alignment and Modeling System is a subclass of software, characterized by its role in the context of multiple sequence alignment. Any instance of this class must be executed within at least one multiple sequence alignment process, reflecting its functional application in computational biology for aligning and modeling biological sequences.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[is executed in some multiple sequence alignment]']}\nGenerated CQs:", "output": "Is Sequence Alignment and Modeling System classified as a type of software? | What are the specialized systems categorized under software, such as Sequence Alignment and Modeling System? | Which broader classes include Sequence Alignment and Modeling System? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PubChem bioassay ID\nDescription: PubChem bioassay ID is a subclass of both Identifier (typed) and PubChem ID, indicating it is a specific type of identifier used within the PubChem resource. It is defined as the identifier assigned to an assay entry in the PubChem database, enabling unambiguous reference to bioassays curated by PubChem.\nAxiom: {'subClassOf': ['PubChem ID']}\nGenerated CQs:", "output": "Does PubChem bioassay ID represent a specialized form of Identifier (typed)? | Which identifiers encompass PubChem bioassay ID as a more specific type? | Under which higher-level identifier categories does PubChem bioassay ID fall? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Surface rendering\nDescription: Surface rendering is defined as a subclass of both Structure visualisation and Protein surface calculation. It involves calculating the positions of dots, each specified by three coordinates (x, y, z) and typically a color, which are homogeneously distributed over the surface of a molecule. This process aids in the visual representation and analysis of molecular surfaces.\nAxiom: {'subClassOf': ['Protein surface calculation']}\nGenerated CQs:", "output": "Is Surface rendering categorized under the broader class of Structure visualisation? | What are the specific subclasses encompassed by Structure visualisation such as Surface rendering? | Under which higher-level visualisation categories can Surface rendering be classified? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Structural (3D) profile ID\nDescription: Structural (3D) profile ID is a subclass of both Identifier (typed) and Accession, representing identifiers or names specifically assigned to structural (3D) profiles or templates. Members of this class serve as identifiers for some Structural profile, such as those representing structures or structure alignments, ensuring unambiguous referencing within structural data repositories.\nAxiom: {'subClassOf': ['Accession'], 'propertyRestrictions': ['[is identifier of some Structural profile]']}\nGenerated CQs:", "output": "Is Structural (3D) profile ID categorized under the broader class of Identifier (typed)? | Which specific subclasses fall under Identifier (typed), including Structural (3D) profile ID? | What higher-level categories encompass Structural (3D) profile ID? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FreeBSD\nDescription: FreeBSD is defined as a subclass of software license and is compatible with both GNU GPL v2 and GNU GPL v3 licenses. This license includes several clauses: the requirement that source code must be available, that distribution must include notices, and that derivative software is permitted. These characteristics ensure that FreeBSD enables broad software reuse and distribution while maintaining attribution and allowing for the creation of derivative works.\nAxiom: {'subClassOf': ['software license'], 'propertyRestrictions': ['[is compatible license of some GNU GPL v2]', '[has clause some Source code available]', '[has clause some derivative software allowed]', '[is compatible license of some GNU GPL v3]']}\nGenerated CQs:", "output": "Is it required that every FreeBSD instance has at least one clause associated with a distribution that includes notices? | Can FreeBSD possess a clause if it is not linked to any distribution with notices? | Does FreeBSD necessarily have a relationship via ‘has clause’ to some distribution entity that contains notices? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Secondary structure comparison\nDescription: Secondary structure comparison is a subclass of Comparison, specifically focused on evaluating or comparing molecular secondary structures. It is defined by the property restriction that its topic involves some form of structure comparison. Members of this class are concerned with the comparative analysis of two or more molecular secondary structures, as indicated by its definition.\nAxiom: {'subClassOf': ['Comparison'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Must every instance of the secondary structure comparison propertyRestrictions involve the topic of structure comparison? | Is it necessary for secondary structure comparison propertyRestrictions to relate to at least one structure comparison topic? | Can a secondary structure comparison propertyRestriction exist without referencing the structure comparison topic? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: phyloXML\nDescription: phyloXML is a standardized XML-based file format specifically designed for representing phylogenetic trees, networks, and their associated data. It is defined as a subclass of both XML and \"Phylogenetic tree format (XML)\", situating it within the hierarchy of XML-based structured formats and explicitly identifying its domain focus on phylogenetics. This ensures that instances of phyloXML are recognized as conforming to general XML standards while also supporting specialized requirements for phylogenetic data representation.\nAxiom: {'subClassOf': ['XML']}\nGenerated CQs:", "output": "Is phyloXML a specialized instance of Phylogenetic tree format (XML)? | Which formats are encompassed by the category of Phylogenetic tree format (XML), including phyloXML? | What broader data format categories does phyloXML fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Query and retrieval\nDescription: Query and retrieval is a subclass of information processing that focuses on searching or querying data resources to retrieve entries or annotations. Members of this class produce some form of data as output and are concerned specifically with topics related to data search, query, and retrieval. This formalization ensures that any process classified under query and retrieval involves both the act of querying/searching and the acquisition of data or annotations from relevant data resources.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has output some data]', '[has topic some Data search, query and retrieval]']}\nGenerated CQs:", "output": "Does Query and retrieval fall under the broader classification of information processing? | Which specific categories are encompassed within information processing, including Query and retrieval? | What higher-level concepts include Query and retrieval as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LBE\nDescription: LBE is defined as a subclass of software specifically designed for execution within differential expression analysis workflows. LBE must be encoded in some R language and is required to implement the FDR (False Discovery Rate) method. It accepts as input gene expression datasets, which must conform to a specified data format. The outputs of LBE include (1) graphical plots, which are constrained to possess image format specifications, and (2) data outputs provided as R data frames. This class formalization highlights LBE's role as a specialized analytical software tool in genomics, with rigorous specifications for input formats, output formats, and methodological implementation.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is encoded in some R language]', \"[implements some 'FDR']\", '[has specified data output some (data and [has format specification some R data frame])]', '[is executed in some differential expression analysis]', '[has specified data input some (Gene expression dataset and [has format specification some data format specification])]']}\nGenerated CQs:", "output": "Is it required that an LBE propertyRestriction's specified data output includes both a Graph plot and at least one image format? | Must the specified data output produced by an LBE propertyRestriction combine a Graph plot with an output that conforms to some image format? | Does every LBE propertyRestriction ensure that its specified data output is composed of a Graph plot which is provided in some image format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence redundancy removal\nDescription: Sequence redundancy removal is defined as a subclass of Sequence comparison. This class includes processes that take two or more molecular sequences as input, compare them, and identify and remove redundant sequences based on specific criteria. According to its axioms, any instance of Sequence redundancy removal must have at least one output that is a Sequence.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has output some Sequence]']}\nGenerated CQs:", "output": "Does sequence redundancy removal fall under the broader category of sequence comparison? | What are the specific subclasses encompassed by sequence comparison, including sequence redundancy removal? | Which parent categories include sequence redundancy removal within their hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dhf\nDescription: dhf is a subclass of both Textual format and Database hits (sequence) format. It represents a format for EMBASSY domain hits files (DHF), which store sequence hits that have domain classification information, specifically relating the hits to SCOP or CATH protein families as identified from sequence database searches. This format is used for capturing and conveying domain-related relationships identified through such searches.\nAxiom: {'subClassOf': ['Database hits (sequence) format']}\nGenerated CQs:", "output": "Is dhf classified as a type of Textual format? | Which specific formats are categorized under Textual format, such as dhf? | What broader categories encompass dhf within the hierarchy of formats? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Map\nDescription: Map is defined as a subclass of data, with the restriction that it must be associated with at least one instance of Mapping via the has topic property. It is described as a map of (typically one) DNA sequence annotated with positional or non-positional features, indicating that instances of this class function as representations of sequence data linked to mapping information.\nAxiom: {'subClassOf': ['data'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is it required that every Map has at least one topic associated via the has topic property that is an instance of Mapping? | Can a Map exist that does not have the has topic property relating it to any Mapping? | Does the presence of a Mapping as a value for the has topic property qualify an entity as a Map? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence feature detection\nDescription: Sequence feature detection is a subclass of the obsolete concept in EDAM, as well as sequence analysis and prediction and recognition. It specifically concerns the detection of positional sequence features, such as functional and other key sites, within molecular sequences. Formally, this class includes topics related to sequence sites, features, and motifs (via the 'has topic' property), and is characterized by producing sequence features as output (via the 'has output' property). This ensures the class encompasses analysis methods that predict or recognize annotated features within sequences.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)', 'Prediction and recognition'], 'propertyRestrictions': ['[has topic some Sequence sites, features and motifs]', '[has output some Sequence features]']}\nGenerated CQs:", "output": "Is Sequence analysis a general category that encompasses Sequence feature detection? | What specific types of analyses fall under the umbrella of Sequence analysis, such as Sequence feature detection? | To which broader analytical categories does Sequence feature detection belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Restriction map\nDescription: Restriction map is defined as a subclass of both Sequence map and Sequence image, meaning it inherits characteristics of representing ordered features on a nucleic acid sequence and being a visual representation. A restriction map specifically depicts the locations of restriction enzyme cleavage sites (restriction sites) along a nucleic acid sequence, providing a visual overview of where enzymes cut within the sequence.\nAxiom: {'subClassOf': ['Sequence image']}\nGenerated CQs:", "output": "Does Restriction map fall under the classification of Sequence map? | Which map types are more specific than Sequence map, such as Restriction map? | What broader mapping categories include Restriction map as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Organism name\nDescription: Organism name is defined as a subclass of both Name and Organism identifier. It represents the name assigned to an organism or a group of organisms, serving as an identifier within biological contexts. This class formalizes organism names as entities that are both names and identifiers specific to organisms.\nAxiom: {'subClassOf': ['Name']}\nGenerated CQs:", "output": "Is Organism identifier a generalization of Organism name? | What identifiers encompass Organism name as a more specific instance? | Which classes are broader than Organism name, including Organism identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Medline Display Format\nDescription: Medline Display Format is a type of textual and bibliographic reference format specifically designed for presenting abstracts and citation information from the Medline database. This format ensures that bibliographic reference information, including essential citation details, is systematically included for scientific articles indexed in Medline.\nAxiom: {'subClassOf': ['Bibliographic reference format']}\nGenerated CQs:", "output": "Is Medline Display Format categorized as a type of Textual format? | Which specific formats fall under the category of Textual format, including Medline Display Format? | What broader format classes does Medline Display Format belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Pathway or network identifier\nDescription: Pathway or network identifier is a subclass of Identifier (typed) and is characterized by the property that it serves as an identifier for some Pathway or network. This class represents identifiers assigned to entries within databases cataloging biological pathways or networks. Any instance of this class functions specifically to uniquely reference a pathway or network entity.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[is identifier of some Pathway or network]']}\nGenerated CQs:", "output": "Is every Pathway or network identifier categorized under Identifier (typed)? | What identifiers exist as more specific types beneath Identifier (typed), including Pathway or network identifier? | To which higher-level identifier categories does Pathway or network identifier belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Database search\nDescription: Database search is a subclass of Query and retrieval, constrained such that it produces at least some Database search results as output. This class represents processes where a supplied query is compared against each entry in a database or data resource, returning those entries—or parts thereof—that are similar to the query. Typically, this involves identifying high-scoring matches, as exemplified by tasks like a BLAST search of a sequence database.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has output some Database search results]']}\nGenerated CQs:", "output": "Is Database search classified under Query and retrieval? | What specific types fall under Query and retrieval, including Database search? | Which broader categories encompass Database search? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: aaindex\nDescription: aaindex is defined as a subclass of both Textual format and Amino acid index format. It specifically refers to the amino acid index format utilized by the AAindex database, which is used to represent data about amino acid properties in a textual structure. This class ensures that any format identified as aaindex must inherit characteristics of textual formats for amino acid indices.\nAxiom: {'subClassOf': ['Textual format']}\nGenerated CQs:", "output": "Is aaindex classified as a more specific form of Amino acid index format? | Which formats fall under the category of Amino acid index format, such as aaindex? | What broader classes does aaindex belong to within the context of amino acid index representation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Affymetrix-compliant data\nDescription: Affymetrix-compliant data is defined as a subclass of data, and is equivalent to data that has some format specification which itself is a data format specification published by Affymetrix. This means any instance of Affymetrix-compliant data must be associated with at least one data format specification that is officially published by Affymetrix, ensuring adherence to the standards set by the organization.\nAxiom: {'subClassOf': ['data'], 'equivalentClass': []}\nGenerated CQs:", "output": "Is Affymetrix-compliant data defined as data that has a format specification which is published by Affymetrix? | Does Affymetrix-compliant data require at least one format specification that is both a data format specification and has Affymetrix as its publisher? | Is being Affymetrix-compliant equivalent to having a format specification that is simultaneously a data format specification and published by Affymetrix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Book ID\nDescription: Book ID is defined as a subclass of both Identifier (typed) and Accession, representing a unique identifier assigned specifically to a book. This class ensures that each book instance can be distinctly referenced and accessed via its Book ID, supporting precise identification and management within collections or systems.\nAxiom: {'subClassOf': ['Accession']}\nGenerated CQs:", "output": "Is every Book ID classified under the broader group of Identifier? | What identifiers specifically fall under the category of Book ID? | Which superordinate classes does Book ID belong to in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: 2bit\nDescription: 2bit is a binary format specifically designed for storing nucleotide sequences, utilizing 2 bits per nucleotide to enable compact representation. It is formally defined as a subclass of both Raw sequence format and Binary format. In addition to encoding standard nucleotide bases, the 2bit format allows for the representation of unknown nucleotides and supports lower-case masking to indicate regions of reduced confidence or biological relevance.\nAxiom: {'subClassOf': ['Binary format']}\nGenerated CQs:", "output": "Is 2bit categorized under the broader class of Raw sequence format? | Which data formats are specific types of Raw sequence format, including 2bit? | What general format classifications does 2bit inherit within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Structural variation\nDescription: Structural variation is defined as a subclass of both Genetic variation and Chromosomes, representing changes in the structure of chromosomes. This class encompasses various types of chromosomal alterations, including deletions, duplications, copy-number variants, insertions, inversions, and translocations. These variations can be either microscopic or submicroscopic, reflecting a broad spectrum of structural differences within chromosomes that contribute to genetic diversity.\nAxiom: {'subClassOf': ['Chromosomes']}\nGenerated CQs:", "output": "Is Structural variation categorized as a type of Genetic variation? | Which specific variations fall under the broader class of Genetic variation, including Structural variation? | What higher-level categories encompass Structural variation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Stock number\nDescription: Stock number is defined as a subclass of both Identifier (typed) and Accession, representing a specific type of typed identifier used for cataloguing. It is characterized as an identifier assigned to stock from a catalogue of biological resources, enabling precise identification and tracking of biological material in resource collections.\nAxiom: {'subClassOf': ['Accession']}\nGenerated CQs:", "output": "Does Stock number fall under the category of Identifier? | Which specific Identifier types include Stock number as a subclass? | What broader categories is Stock number classified under according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence similarity search\nDescription: Sequence similarity search is defined as a subclass of both Sequence comparison and Database search. It refers to the process of searching a sequence database to retrieve sequences that are similar to a given query sequence. This class links the computational method of comparing biological or other sequences with the practical task of searching databases, emphasizing the retrieval of similar sequences based on a defined similarity criterion.\nAxiom: {'subClassOf': ['Sequence comparison']}\nGenerated CQs:", "output": "Is Sequence similarity search classified under Database search within the ontology? | What specific search types are categorized as subclasses of Database search, including Sequence similarity search? | Which overarching classes encompass Sequence similarity search? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene name\nDescription: Gene name is defined as a subclass of both Name and Gene identifier. It refers to the name of a gene, typically assigned by a person or according to a specific naming scheme. Gene names are generally more intuitive and readable than gene symbols, may include whitespace, and are often used to identify similar genes across different species or to help derive gene symbols.\nAxiom: {'subClassOf': ['Name']}\nGenerated CQs:", "output": "Is Gene identifier a broader classification encompassing Gene name? | Which entities are categorized as more specific types under Gene identifier, such as Gene name? | To which higher-level categories does Gene name conceptually relate within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: metahdep\nDescription: metahdep is a subclass of software, characterized by several specific property restrictions. It implements at least one Bayesian Model and must be encoded in the R programming language. Additionally, metahdep is published exclusively by Bioconductor. In terms of data handling, it requires a gene expression dataset as input and produces graph plots as outputs, with these outputs specifically formatted as R data frames. This formalization ensures that any software classified as metahdep aligns with these ontological and technical specifications.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[implements some Bayesian Model]', '[is encoded in some R language]', '[has specified data output some (Graph plot and [has format specification only R data frame])]', '[has specified data input some Gene expression dataset]']}\nGenerated CQs:", "output": "Is it necessary for a metahdep to be published exclusively by Bioconductor? | Does the property restriction on metahdep imply that Bioconductor must always be its publisher? | Can a metahdep be considered valid if it is published by any entity other than Bioconductor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: xls\nDescription: xls is defined as a subclass of both XML and Document format, indicating that it is a type of document format that utilizes XML technology. It specifically refers to the Microsoft Excel spreadsheet format, which is used for storing, organizing, and exchanging tabular data in Excel.\nAxiom: {'subClassOf': ['XML']}\nGenerated CQs:", "output": "Is xls classified under the broader group of Document format? | Which formats fall under the category of Document format, specifically including xls? | What broader format categories encompass xls as a type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylip character frequencies format\nDescription: Phylip character frequencies format is a subclass of both Textual format and Phylogenetic continuous quantitative character format. It is defined as a PHYLIP file format specifically intended to represent character frequency data within phylogenetic analyses. Members of this class are textual file formats designed to encode continuous quantitative character frequencies, supporting data exchange and processing in phylogenetic studies.\nAxiom: {'subClassOf': ['Phylogenetic continuous quantitative character format']}\nGenerated CQs:", "output": "Is Phylip character frequencies format classified under the broader group of Textual format? | Which formats are specified as subcategories of Textual format, including Phylip character frequencies format? | What higher-level categories encompass Phylip character frequencies format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NCBI taxonomy ID\nDescription: NCBI taxonomy ID is defined as a subclass of both Ontology concept ID and Organism accession. This class represents a stable, unique identifier assigned to each taxonomic group (such as species, family, order, or any other rank) in the NCBI taxonomy database. It provides a persistent and distinct reference for organisms within the taxonomy framework.\nAxiom: {'subClassOf': ['Organism accession']}\nGenerated CQs:", "output": "Is the NCBI taxonomy ID classified as a type of Ontology concept ID? | Which identifiers are subclasses of Ontology concept ID, including NCBI taxonomy ID? | What broader categories encompass the NCBI taxonomy ID as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MIRIAM data type name\nDescription: MIRIAM data type name is a subclass of Data resource definition name, representing the name of a data type sourced from the MIRIAM database. Additionally, each instance serves as an identifier for some Database metadata. This ensures that every MIRIAM data type name uniquely references metadata within a database context, as per the definition from MIRIAM.\nAxiom: {'subClassOf': ['Data resource definition name'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Does every MIRIAM data type name have the property 'is identifier of' with at least one Database metadata? | Is it necessary for a MIRIAM data type name to serve as an identifier for some Database metadata? | Can a MIRIAM data type name exist without being an identifier for any Database metadata? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DNDC\nDescription: DNDC is a subclass of software, specifically described as a Soil Chemistry Model. It is characterized by having both graphical user interface (GUI) and command-line interface (CLI) options for user interaction. The software is accessible online, with its homepage given as both ns15:dndc.html and http://www.dndc.sr.unh.edu/. DNDC requires as input data that conforms to a tab-delimited file format. The output of DNDC results from a software development process involving the University of New Hampshire as a participant. Furthermore, DNDC is used within the context of modelling.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has interface some graphical user interface]', '[has specified data input some (data and [has format specification some tab delimited file format])]', '[output of some (software development process and [has participant hasValue University of New Hampshire])]', '[has interface some command-line interface]', '[is executed in some modelling]', '[has website homepage hasValue http://www.dndc.sr.unh.edu/]']}\nGenerated CQs:", "output": "Must every instance of DNDC have the website homepage property set specifically to ns15:dndc.html? | Can the website homepage of a DNDC instance be assigned any value other than ns15:dndc.html? | Is ns15:dndc.html the exclusive value permitted for the website homepage property of DNDC? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Proteolytic digest\nDescription: Proteolytic digest is defined as a subclass of Sequence set (protein), where each instance is characterized by having some association with the topic of Proteomics. According to its description, a proteolytic digest consists of a protein sequence that has been cleaved into peptide fragments—either enzymatically or chemically—with known fragment masses. This class formalization ensures that any proteolytic digest is a specialized set of protein sequences relevant to studies or analyses in proteomics.\nAxiom: {'subClassOf': [], 'propertyRestrictions': ['[has topic some Proteomics]']}\nGenerated CQs:", "output": "Is Proteolytic digest classified under the broader category of Sequence set (protein)? | Which subclasses are encompassed by Sequence set (protein), including Proteolytic digest? | What general categories does Proteolytic digest fall under within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GIF\nDescription: GIF (Graphics Interchange Format) is a binary format and a type of raster image format. As a subclass of both 'Binary format' and 'raster image format', GIF files encode images in a way suitable for binary data storage and manipulation, and specifically for raster-based rendering. This class defines digital image files that use the GIF specification for encoding, widely recognized for supporting simple graphics and animations.\nAxiom: {'subClassOf': ['raster image format']}\nGenerated CQs:", "output": "Is GIF classified as a type of Binary format? | Which file formats are categorized under Binary format, including GIF? | What broader format categories does GIF fall under in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GeneticsDesign\nDescription: GeneticsDesign is a subclass of software, characterized by its input and output specifications and its implementation language. Specifically, any instance of GeneticsDesign must accept as input data that is in the form of an R data frame (with an associated format specification), produce as output a text data set (constrained to specified textual formats), and be encoded in the R programming language. This formalization ensures standardized interoperability and data handling within the class's defined domain.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data output some (Text data set and [has format specification some Textual format])]', '[has specified data input some (data and [has format specification some R data frame])]']}\nGenerated CQs:", "output": "Is every GeneticsDesign necessarily encoded in at least one instance of R language? | Can a GeneticsDesign exist without being encoded in R language? | Does the ontology require that each GeneticsDesign is linked to some R language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unambiguous sequence\nDescription: unambiguous sequence is a subclass of both Textual format and Raw sequence format. It represents a molecular sequence expressed using an alphabet that may include unknown positions but explicitly excludes any ambiguity characters. This ensures that while some sequence positions can be unspecified, there is no use of letters or codes that represent multiple possible residues or bases at a single position.\nAxiom: {'subClassOf': ['Raw sequence format']}\nGenerated CQs:", "output": "Is unambiguous sequence categorized under the broader class of Textual format? | Which types are directly more general than unambiguous sequence, specifically including Textual format? | What specific subcategories does Textual format encompass, such as unambiguous sequence? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: codata\nDescription: codata is defined as a subclass of both Textual format and Sequence record format (text), indicating that it is a text-based file format specifically designed for representing sequence records. It is referenced as the \"Codata entry format,\" meaning that its primary use is to encode and store sequence data in a structured text format, consistent with conventions of both its parent classes.\nAxiom: {'subClassOf': ['Textual format']}\nGenerated CQs:", "output": "Is codata a specialization of Sequence record format? | Which record formats are classified as types of Sequence record format, including codata? | What broader record format categories encompass codata? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: iHOP symbol\nDescription: iHOP symbol is defined as a unique identifier of a protein or gene used in the iHOP database. Formally, this class is a subclass of Gene ID, Identifier (hybrid), and Protein accession, indicating that any iHOP symbol instance can be considered a specialized identifier spanning gene and protein contexts. This class captures identifiers with hybrid characteristics, linking gene and protein entities within the iHOP database.\nAxiom: {'subClassOf': ['Identifier (hybrid)', 'Protein accession']}\nGenerated CQs:", "output": "Is iHOP symbol classified under the broader category of Gene ID? | Which identifiers are more specific classifications within Gene ID, such as iHOP symbol? | What general types does iHOP symbol fall under in the context of biological identifiers? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: unambiguous pure rna sequence\nDescription: unambiguous pure rna sequence is a subclass of both unambiguous pure and rna. Members of this class are defined as RNA sequences composed strictly of the characters A, C, G, and U, allowing for possible unknown positions but excluding any ambiguity or non-sequence characters. This ensures that all instances represent RNA sequences that are both unambiguous and free from characters outside the canonical RNA alphabet.\nAxiom: {'subClassOf': ['unambiguous pure']}\nGenerated CQs:", "output": "Is unambiguous pure rna sequence classified as a type of rna? | Which subclasses are found under rna, specifically including unambiguous pure rna sequence? | What are the parent classes that unambiguous pure rna sequence is associated with? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: process\nDescription: process is a class that is explicitly disjoint with 'Obsolete concept (EDAM)', meaning no individual can be simultaneously classified as both a process and an obsolete concept. This distinction ensures clarity in categorization by separating active processes from deprecated or outdated conceptual entities.\nAxiom: {'disjointWith': []}\nGenerated CQs:", "output": "Is there any overlap defined between process and Obsolete concept (EDAM) in the ontology? | Can an entity be simultaneously classified as both a process and an Obsolete concept (EDAM)? | Which concepts are declared as disjoint with process in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: spML\nDescription: spML is a standardized format, defined as a subclass of both XML and experiment annotation format, specifically designed for the description of proteomics sample processing methods excluding the use of gels, prior to mass spectrometric protein identification. The standardization is overseen by HUPO PSI PS, and beyond proteomics, spML may also be applicable in the context of metabolomics.\nAxiom: {'subClassOf': ['Experiment annotation format']}\nGenerated CQs:", "output": "Is spML classified as a more specific type of XML? | Which markup languages are categorized under XML, such as spML? | To what higher-level language categories does spML belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence file editing\nDescription: Sequence file editing is a subclass of both Sequence analysis and Sequence editing. It encompasses basic, non-analytical operations performed on sequence files or reports (potentially including sequence features). Such operations include concatenating files, removing or reordering sequences, and creating subsets or new sequence files. Sequence file editing does not include analytical transformations but is focused on managing and organizing sequence data within files.\nAxiom: {'subClassOf': ['Sequence analysis']}\nGenerated CQs:", "output": "Is Sequence file editing categorized under the broader class of Sequence editing? | Which editing processes are subtypes of Sequence editing, including Sequence file editing? | To which higher-level categories does Sequence file editing pertain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TraML\nDescription: TraML (Transition Markup Language) is a standardized format established by HUPO PSI MSS for representing mass spectrometry transitions. In the ontology, TraML is defined as a subclass of both XML and Mass spectrometry data format, situating it as a specialized XML-based data format specifically for encoding transition information within the mass spectrometry domain.\nAxiom: {'subClassOf': ['XML']}\nGenerated CQs:", "output": "Is TraML classified under the broader category of Mass spectrometry data format? | Which data formats are narrower in scope than Mass spectrometry data format, such as TraML? | What higher-level categories include TraML as a member format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein property calculation (from sequence)\nDescription: Protein property calculation (from sequence) is defined as a subclass of both Protein property calculation and Protein sequence analysis. This class encompasses methods that calculate or predict physical or chemical properties—specifically non-positional properties—of a protein by processing its molecular sequence. The class focuses on deriving such properties based solely on sequence analysis, enabling the assessment of overall protein characteristics without reference to specific positional residues.\nAxiom: {'subClassOf': ['Protein property calculation']}\nGenerated CQs:", "output": "Is Protein property calculation (from sequence) classified as a form of Protein sequence analysis? | Which analyses fall under Protein sequence analysis, including Protein property calculation (from sequence)? | To what higher-level analytical category does Protein property calculation (from sequence) belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Clustal\nDescription: Clustal is defined as a subclass of software, specifically characterized by the requirement that it is executed in at least one multiple sequence alignment process. This formalization indicates that any instance of Clustal must play a role in the execution of multiple sequence alignment tasks, reflecting its intended use as an alignment software tool within bioinformatics applications.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is Clustal required to be executed in at least one multiple sequence alignment? | Does the execution of Clustal always involve a multiple sequence alignment process? | Can Clustal exist without being executed in any multiple sequence alignment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence composition plot\nDescription: Sequence composition plot is defined as a subclass of both Sequence composition report and Plot, indicating that it inherits characteristics of compositional analysis reports and graphical representations. It represents a plot visualizing the character or word composition or their frequency within a molecular sequence, serving as a graphical summary of sequence content.\nAxiom: {'subClassOf': ['Plot']}\nGenerated CQs:", "output": "Is Sequence composition plot classified as a type under Sequence composition report? | Which specific reports fall under Sequence composition report, such as Sequence composition plot? | Under which broader report categories is Sequence composition plot organized? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: newick\nDescription: newick is defined as a subclass of both Textual format and Phylogenetic tree format (text). It represents a specific text-based notation for encoding phylogenetic trees, commonly referred to as the Newick format. This formalization positions newick within the hierarchy of textual data formats, specifically those used to represent phylogenetic tree structures.\nAxiom: {'subClassOf': ['Phylogenetic tree format (text)']}\nGenerated CQs:", "output": "Does newick fall under the general category of Textual format? | Which formats are subclassified beneath Textual format, such as newick? | What broader classifications encompass newick as a specific type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bigBed\nDescription: bigBed is a subclass of both Binary format and Sequence annotation track format, representing a file format used to store large-scale sequence annotation tracks. It is defined as a binary embodiment of the textual BED format, designed for efficient storage and access to extensive genomic annotation data.\nAxiom: {'subClassOf': ['Binary format']}\nGenerated CQs:", "output": "Is bigBed classified under the general category of Sequence annotation track format? | What formats are considered specializations of Sequence annotation track format, such as bigBed? | Which higher-level track format categories include bigBed as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ClustalW format\nDescription: ClustalW format is a type of textual format that is also classified as an alignment format (text), meaning it is intended for representing sequence alignments in a human-readable text form. It is specifically defined for aligned biological sequences, as described in its definition, and inherits structural properties from both the general category of textual formats and the more specific alignment formats.\nAxiom: {'subClassOf': ['Alignment format (text)']}\nGenerated CQs:", "output": "Is ClustalW format classified under the broader class of Textual format? | What specific formats are categorized as subtypes of Textual format, including ClustalW format? | To which higher-level categories is ClustalW format hierarchically related? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TreeCon format\nDescription: TreeCon format is a type of phylogenetic tree format represented in text form. It is defined as a subclass of both Textual format and Phylogenetic tree format (text). The TreeCon format is specifically used for representing phylogenetic trees in a textual notation.\nAxiom: {'subClassOf': ['Phylogenetic tree format (text)']}\nGenerated CQs:", "output": "Is TreeCon format considered a specialized kind of Textual format? | What are the different subtypes classified under Textual format, including TreeCon format? | Which broader formats encompass TreeCon format as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: 'codelink'\nDescription: codelink is defined as a subclass of software, specifically characterized by several property restrictions. It operates on specified data inputs that are XML or text data sets, and produces outputs in the form of text data sets and graph plots. codelink implementations are encoded in the R programming language and are used for executing background correction, data normalization, descriptive statistical calculation, and differential expression analysis. This formal definition ensures that codelink refers to R-based software tools designed for advanced data processing and statistical analysis workflows with defined input and output requirements.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data input some (XML or Text data set)]', '[has specified data output some (Text data set and Graph plot)]', '[is executed in some (background correction and data normalization and descriptive statistical calculation and differential expression analysis)]']}\nGenerated CQs:", "output": "Is it required for every codelink to be associated with at least one encoding in the R language? | Can a codelink exist without being encoded in the R language? | Are all instances of codelink necessarily linked to some resource in the R programming language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence record format\nDescription: Sequence record format is defined as a subclass of Format (typed) and is used specifically for representing a molecular sequence record. By axiom, every Sequence record format must be a format of at least one Sequence record. This class formalizes data formats that encode and store molecular sequence records, capturing the structural and representational standards utilized in molecular sequence data management.\nAxiom: {'subClassOf': ['Format (typed)'], 'propertyRestrictions': []}\nGenerated CQs:", "output": "Is every sequence record format necessarily associated with at least one sequence record via the 'is format of' property? | Does the existence of the 'is format of' relation from a sequence record format imply the presence of a linked sequence record? | Can a sequence record format be valid without being the format of any sequence record? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein sequence (raw)\nDescription: Protein sequence (raw) is defined as a subclass of both Protein sequence and Raw sequence, representing protein sequences in their unprocessed, primary form. Members of this class are characterized by being a string of characters that encode the raw sequence of amino acids without any modifications or annotations. This definition reflects the unaltered, direct representation of protein data.\nAxiom: {'subClassOf': ['Protein sequence']}\nGenerated CQs:", "output": "Is Protein sequence (raw) classified under the broader group of Raw sequence? | What are the more specific types of Raw sequence, including Protein sequence (raw)? | To which higher-level categories does Protein sequence (raw) belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Nucleic acid features (quadruplexes)\nDescription: Nucleic acid features (quadruplexes) is classified as a subclass of Obsolete concept (EDAM), indicating that it represents a concept that is no longer active or recommended for current use in the ontology. The class is defined as a report on quadruplex-forming motifs in a nucleotide sequence, highlighting its focus on sequence motifs capable of forming quadruplex structures.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which concepts fall under the category of Obsolete concept (EDAM), including Nucleic acid features (quadruplexes)? | What broader categories include Nucleic acid features (quadruplexes) in this ontology? | Is Nucleic acid features (quadruplexes) classified under Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CpG island and isochores\nDescription: CpG island and isochores is defined as a subclass of Gene transcription features, focusing on CpG-rich regions—commonly referred to as isochores—within nucleotide sequences. These regions are characterized by a high frequency of CpG dinucleotides and play important roles in gene regulation and transcriptional processes. The class specifically encompasses features related to the presence and function of CpG-rich regions in genomic sequences.\nAxiom: {'subClassOf': ['Gene transcription features']}\nGenerated CQs:", "output": "Which subclasses are defined within Gene transcription features, such as CpG island and isochores? | Are CpG island and isochores included as specific types under Gene transcription features? | What higher-level categories encompass CpG island and isochores in the context of gene transcription? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Logit-t algorithm\nDescription: Logit-t algorithm is a subclass of algorithm, indicating that it inherits all general characteristics of algorithms. No further constraints or distinguishing axioms are provided, so its definition is currently limited to being a type of algorithm.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "What are the specialized subclasses included within algorithm, such as Logit-t algorithm? | Which types of algorithm encompass the Logit-t algorithm as a specific example? | Is Logit-t algorithm classified under the general category of algorithm? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Amino acid index (White-Wimley data)\nDescription: Amino acid index (White-Wimley data) is a subclass of Amino acid index, specifically representing experimental free energy values associated with water-interface and water-octanol transitions for amino acids. This class formalizes data characterizing the thermodynamic properties of amino acids as measured by the White-Wimley method.\nAxiom: {'subClassOf': ['Amino acid index']}\nGenerated CQs:", "output": "What are the higher-level categories associated with \"Amino acid index (White-Wimley data)\"? | Which specific indices fall under the broader class of \"Amino acid index\" and include \"Amino acid index (White-Wimley data)\"? | Is \"Amino acid index (White-Wimley data)\" classified under the category \"Amino acid index\"? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence database search (by sequence using global alignment-based methods)\nDescription: Sequence database search (by sequence using global alignment-based methods) is classified as a subclass of Obsolete concept (EDAM). This class encompasses search tools and processes that identify sequences similar to a query by applying global alignment-based methods, such as the Needleman and Wunsch algorithm. These approaches compare entire sequences to maximize overall alignment, and are considered outdated in the current ontology context.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which general knowledge categories encompass Sequence database search (by sequence using global alignment-based methods)? | What are the more specific concepts classified within Obsolete concept (EDAM), for example, Sequence database search (by sequence using global alignment-based methods)? | Does Sequence database search (by sequence using global alignment-based methods) fall under the category of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Database search (by sequence)\nDescription: Database search (by sequence) is classified as a subclass of Obsolete concept (EDAM), indicating it is no longer in active use within the ontology. It refers to the process of screening one or more molecular sequences against a database to identify similarities between the query sequence and database entries. This class represents a type of analysis focused on sequence comparison for the purpose of finding related or homologous sequences.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Database search (by sequence) classified under the broader category of Obsolete concept (EDAM)? | What are the more specific concepts that fall within Obsolete concept (EDAM), including Database search (by sequence)? | Which obsolete concepts, as defined in EDAM, encompass Database search (by sequence)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: 50-50 MANOVA algorithm\nDescription: 50-50 MANOVA algorithm is defined as a subclass of algorithm, indicating it is a specific type of computational method. While no further axioms or restrictions are provided, this class represents algorithms designed for multivariate analysis of variance (MANOVA) employing a 50-50 partitioning strategy or criterion within their procedure.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "What algorithms encompass the 50-50 MANOVA algorithm as their subclass? | Under which broader algorithmic categories can the 50-50 MANOVA algorithm be grouped? | Is the 50-50 MANOVA algorithm classified as a specific type of algorithm? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Job identifier\nDescription: Job identifier is defined as a subclass of Identifier (typed). It represents an identifier specifically assigned to a submitted job, uniquely distinguishing it within a system or workflow. This class inherits all characteristics of Identifier (typed), ensuring that each job identifier maintains the constraints and semantics of typed identifiers.\nAxiom: {'subClassOf': ['Identifier (typed)']}\nGenerated CQs:", "output": "Which broader classes encompass Job identifier within the Identifier hierarchy? | Is Job identifier classified as a more specific type of Identifier? | What specific kinds of Identifier include Job identifier in their classification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: JPEG 2000\nDescription: JPEG 2000 is a subclass of raster image format, indicating that it is a specific type of raster image format. This classification places JPEG 2000 within the hierarchy of digital image encoding formats that represent images as a grid of pixels.\nAxiom: {'subClassOf': ['raster image format']}\nGenerated CQs:", "output": "What broader categories is JPEG 2000 an instance or subclass of? | Which raster image format subclasses include JPEG 2000? | Is JPEG 2000 classified as a kind of raster image format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DNA transduction map\nDescription: DNA transduction map is defined as a subclass of Genetic map. It specifically refers to a gene map that illustrates the distances between loci by utilizing relative cotransduction frequencies. This means such maps provide information about the relative positions of genes based on the likelihood of their co-transfer during the process of genetic transduction.\nAxiom: {'subClassOf': ['Genetic map']}\nGenerated CQs:", "output": "Which genetic map subclasses exist, and does this include DNA transduction map? | What are the direct superclasses associated with DNA transduction map? | Is DNA transduction map categorized under Genetic map? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Article comparison\nDescription: Article comparison is a subclass of Comparison, defined as an activity that involves the comparison of two or more scientific articles. This class formalizes instances where scientific articles are systematically contrasted or evaluated with respect to each other.\nAxiom: {'subClassOf': ['Comparison']}\nGenerated CQs:", "output": "Which comparisons encompass subtypes such as Article comparison? | What broader concept does Article comparison fall under within the ontology? | Is Article comparison categorized as a more specific form of Comparison? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: obsolete_Microarray data\nDescription: obsolete_Microarray data is defined as a subclass of Obsolete concept (EDAM), indicating that it represents a concept that is no longer in active use or has been superseded within the ontology. As an obsolete class, individuals should no longer be assigned to this category, and usage is discouraged in favor of more current concepts.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What broader category encompasses obsolete_Microarray data in the ontology? | Which data types are specified as subclasses of Obsolete concept (EDAM)? | Is obsolete_Microarray data classified under Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Lognormal Normal with Modied Variance Model\nDescription: Lognormal Normal with Modified Variance Model is defined as a subclass of algorithm. This class represents a specific type of algorithm, and is formally categorized under the general class of algorithms. Further specialization or characteristics about its function, parameters, or use are not specified in the current axioms.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "Is Lognormal Normal with Modied Variance Model categorized under algorithm? | Which types of algorithm include Lognormal Normal with Modied Variance Model as a specialization? | What broader classes encompass Lognormal Normal with Modied Variance Model within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Nucleic acid stitch profile\nDescription: Nucleic acid stitch profile is a subclass of Nucleic acid melting profile. It represents a diagrammatic or computational depiction of hybridized or double-stranded nucleic acids (such as DNA or DNA/RNA hybrids) showing partly melted conformations and their associated probabilities across a range of temperatures. The stitch profile captures detailed features such as location, size, probability, and fluctuations of possible loop openings at specific temperatures, providing insights into the thermal stability and dynamic structural transitions of nucleic acids.\nAxiom: {'subClassOf': ['Nucleic acid melting profile']}\nGenerated CQs:", "output": "To which higher-level profile classes does Nucleic acid stitch profile belong? | Which more specific profiles fall under the category of Nucleic acid melting profile? | Is Nucleic acid stitch profile categorized under the broader class of Nucleic acid melting profile? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Structure alignment report\nDescription: Structure alignment report is defined as a subclass of Report, serving as a broad data type used primarily as a placeholder for more specific report types. It represents an informative report detailing data derived from the alignment of molecular tertiary structures, providing insight into structural similarities or differences between molecules.\nAxiom: {'subClassOf': ['Report']}\nGenerated CQs:", "output": "Which types of reports encompass Structure alignment report as a specific kind? | What broader report categories is Structure alignment report associated with? | Does Structure alignment report fall under the general classification of Report? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: predictive modeling task\nDescription: predictive modeling task is defined as a subclass of data mining task. It involves learning a (probabilistic) predictive model from a dataset comprising pairs (d, c), where d represents the description (of type Td) and c is the class or target (of type Tc). The core objective is to learn a mapping, m :: Td → Tc, that accurately predicts the target value c from the description d. The quality of a predictive modeling task is measured by how closely the predicted target values (m(d)) match the actual observed target values in the dataset.\nAxiom: {'subClassOf': ['data mining task']}\nGenerated CQs:", "output": "What broader task categories is predictive modeling task associated with? | Does predictive modeling task fall under the classification of data mining task? | Which data mining task subclasses include predictive modeling task? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Interaction data\nDescription: Interaction data is defined as a subclass of data. It represents information specifically pertaining to interactions, thereby inheriting all characteristics of data while providing a more focused context on records or attributes related to interactive events or behaviors.\nAxiom: {'subClassOf': ['data']}\nGenerated CQs:", "output": "Which specific data subclasses include Interaction data? | What broader categories does Interaction data fall under within the data hierarchy? | Is Interaction data classified as a type of data? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Spectral analysis\nDescription: Spectral analysis is a subclass of Analysis and refers to the process of analyzing a spectrum generated from a mass spectrometry experiment or other types of experiments. This class encompasses methods and practices for interpreting spectral data to extract relevant information, and is formally categorized under the broader concept of Analysis.\nAxiom: {'subClassOf': ['Analysis']}\nGenerated CQs:", "output": "What general classes does Spectral analysis fall under within the classification of Analysis? | Is Spectral analysis recognized as a category within the broader concept of Analysis? | Which types of Analysis include Spectral analysis as a more specific instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ChemSpider entry format\nDescription: ChemSpider entry format is defined as a subclass of Obsolete concept (EDAM). It refers to the format used for entries in ChemSpider, a database of chemical structures and property predictions. The classification under \"Obsolete concept\" indicates that this format is no longer in active use or recommended.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which specific formats are categorized under Obsolete concept (EDAM), such as ChemSpider entry format? | What broader conceptual groups encompass ChemSpider entry format according to the classification hierarchy? | Is ChemSpider entry format classified as a type of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Codon usage\nDescription: Codon usage is defined as a subclass of the obsolete concept in EDAM, indicating that it is no longer actively maintained. The class represents a broad data type concerning patterns in the use of codons, and currently serves as a placeholder for more specific types related to codon usage data.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is codon usage classified as an obsolete concept in the EDAM ontology? | What concepts are categorized under the obsolete concept class in EDAM, including codon usage? | Which broader classes does codon usage belong to within the EDAM ontology structure? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Plasmid map drawing\nDescription: Plasmid map drawing is defined as a subclass of map drawing, specifically focused on the creation of circular maps depicting DNA structures, such as plasmids. This class encompasses graphical representations that illustrate the features, genes, and elements present on plasmid DNA, ensuring their visualization aligns with the broader category of map drawings.\nAxiom: {'subClassOf': ['Map drawing']}\nGenerated CQs:", "output": "Is plasmid map drawing classified under the broader category of map drawing? | Which types of map drawing include plasmid map drawing as a specific instance? | What are the parent categories of plasmid map drawing? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: EMBOSS supermatcher error file\nDescription: EMBOSS supermatcher error file is categorized as an obsolete concept (EDAM ontology), indicating it is no longer in active use. It specifically refers to error files generated by the EMBOSS (EMBASSY) supermatcher tool.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is EMBOSS supermatcher error file classified under the broader concept of Obsolete concept (EDAM)? | What higher-level concepts encompass EMBOSS supermatcher error file within the ontology? | Which entities are specified as subclasses of Obsolete concept (EDAM), such as EMBOSS supermatcher error file? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence database name\nDescription: Sequence database name is defined as a subclass of Obsolete concept (EDAM), indicating that it represents a concept no longer in active use. The class refers to the name assigned to a molecular sequence database, specifying the designation or title under which such a database is identified. This definition clarifies that instances of this class are used to denote the names of molecular sequence databases but are considered obsolete within the ontology context.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which specific concepts are contained within the category Obsolete concept (EDAM), including Sequence database name? | Is Sequence database name classified under the broader concept of Obsolete concept (EDAM)? | To which higher-level classes does Sequence database name belong within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Trauma medicine\nDescription: Trauma medicine is a subclass of Medicine, specifically focused on the treatment of bodily wounds or shock resulting from sudden physical injuries such as those caused by violence or accidents. This class encompasses the medical knowledge and practices involved in the immediate assessment, management, and care of trauma patients.\nAxiom: {'subClassOf': ['Medicine']}\nGenerated CQs:", "output": "Which medical specialties fall under the category of Medicine, including Trauma medicine? | What general medical domains encompass Trauma medicine? | Is Trauma medicine classified under the broader category of Medicine? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DTD\nDescription: DTD is a subclass of Obsolete concept (EDAM) and represents a document type definition (DTD). This class denotes a concept that is considered obsolete within the ontology. DTD is defined as a specification that describes the structure and permissible content of an XML document.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is DTD categorized under the broader concept of Obsolete concept (EDAM)? | Which concepts are classified as more specific instances of Obsolete concept (EDAM), such as DTD? | What higher-level classifications does DTD fall under in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: G protein-coupled receptors (GPCR)\nDescription: G protein-coupled receptors (GPCR) are defined as a subclass of Obsolete concept (EDAM). This class covers the topic of G-protein coupled receptors (GPCRs), as specified in its definition. Classification as an obsolete concept indicates that this class is no longer in active use or has been superseded within the ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which entities are categorized as specializations of Obsolete concept (EDAM), including G protein-coupled receptors (GPCR)? | Are G protein-coupled receptors (GPCR) classified under the obsolete concepts in EDAM ontology? | What broader categories encompass G protein-coupled receptors (GPCR) within the EDAM framework? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: geneseq\nDescription: geneseq is defined as a subclass of EMBL-like (text), indicating that it inherits the foundational characteristics of EMBL-like sequence formats. The class represents data in the Geneseq sequence format, serving as a specific variant or instance within the broader category of EMBL-like text formats.\nAxiom: {'subClassOf': ['EMBL-like (text)']}\nGenerated CQs:", "output": "Is geneseq categorized as a type of EMBL-like? | Which sequence types are narrower classifications under EMBL-like, such as geneseq? | What broader sequence categories encompass geneseq? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Molecular similarity score\nDescription: Molecular similarity score is defined as a subclass of Obsolete concept (EDAM). It refers to a score that quantifies the structural similarities between two molecules. This class represents outdated or deprecated concepts within the ontology context.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What are the more specific concepts classified beneath Obsolete concept (EDAM), such as Molecular similarity score? | Does Molecular similarity score fall under the category of Obsolete concept (EDAM)? | Which broader categories encompass Molecular similarity score within the EDAM ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: graphical user interface\nDescription: graphical user interface is defined as a subclass of software interface. This means every graphical user interface is a type of software interface, distinguished by its focus on visual elements for user interaction such as windows, icons, and menus, as opposed to purely text-based interfaces.\nAxiom: {'subClassOf': ['software interface']}\nGenerated CQs:", "output": "What higher-level categories encompass graphical user interface? | Which interfaces are specialized types of software interface, such as graphical user interface? | Is graphical user interface classified under the broader category of software interface? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Article report\nDescription: Article report is a subclass of Obsolete concept (EDAM). It refers to data derived from the analysis of a scientific text, such as a full-text article from a scientific journal. This classification indicates that the \"Article report\" concept is considered obsolete within the EDAM ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Article report classified under the broader category of Obsolete concept (EDAM)? | Which specific concepts fall under Obsolete concept (EDAM), including Article report? | What more general concepts encompass Article report within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GenePix Pro 3\nDescription: GenePix Pro 3 is defined as a subclass of GenePix Pro. This means that every instance of GenePix Pro 3 is also an instance of GenePix Pro, inheriting all characteristics and constraints of the parent class. There are no additional distinguishing axioms or restrictions specified for this class beyond its hierarchical classification.\nAxiom: {'subClassOf': ['GenePix Pro']}\nGenerated CQs:", "output": "Is GenePix Pro 3 categorized as a type of GenePix Pro? | What broader categories does GenePix Pro 3 fall under in the classification hierarchy? | Which software types are classified under GenePix Pro, including GenePix Pro 3? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Lipids\nDescription: Lipids is defined as a subclass of Biochemistry, formally situating it within the domain of biochemical studies. The class concerns lipids and their structures, encompassing topics related to the molecular composition, properties, and functions of lipids within biological systems.\nAxiom: {'subClassOf': ['Biochemistry']}\nGenerated CQs:", "output": "What higher-level categories include lipids in their classification hierarchy? | Which entities are more specific subcategories under biochemistry, such as lipids? | Are lipids encompassed within the broader classification of biochemistry? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Complex Estimation Algorithm\nDescription: Complex Estimation Algorithm is defined as a subclass of algorithm. This means that every complex estimation algorithm is an algorithm, inheriting all general properties applicable to algorithms, while also indicating a specialization focused on complex estimation tasks. No additional axioms or property restrictions are specified.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "Is Complex Estimation Algorithm categorized under the broader class of algorithm? | What types fall under the classification of algorithm, including Complex Estimation Algorithm? | Which more abstract groupings does Complex Estimation Algorithm belong to within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene features (exonic splicing enhancer)\nDescription: Gene features (exonic splicing enhancer) is defined as a subclass of Obsolete concept (EDAM), indicating that this concept is no longer in active use within the ontology. It refers to a report on exonic splicing enhancers (ESE) within an exon, documenting regions that promote the inclusion of exons during RNA splicing. The classification as obsolete suggests that researchers should refer to more current terms or concepts for this topic.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What broader categories encompass exonic splicing enhancer within the EDAM classification? | Is exonic splicing enhancer classified as an obsolete concept in EDAM? | Which gene features are designated as obsolete concepts according to EDAM? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cell biology\nDescription: Cell biology is a subclass of Biology, focusing on the study of cells. This class encompasses topics related to cells, including key genes and proteins involved in the cell cycle. It serves to address the molecular and functional aspects of cells within the broader context of biological sciences.\nAxiom: {'subClassOf': ['Biology']}\nGenerated CQs:", "output": "What specialized fields are classified as subtypes of Biology, such as Cell biology? | Which higher-level domains encompass Cell biology within their classification hierarchy? | Is Cell biology categorized under the broader discipline of Biology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence alignment (nucleic acid)\nDescription: Sequence alignment (nucleic acid) is a subclass of Sequence alignment, specifically referring to the alignment of multiple nucleotide sequences. This class captures the process by which two or more nucleic acid (DNA or RNA) sequences are arranged to identify regions of similarity, which may indicate functional, structural, or evolutionary relationships.\nAxiom: {'subClassOf': ['Sequence alignment']}\nGenerated CQs:", "output": "Which hierarchical parent classes is Sequence alignment (nucleic acid) associated with? | Is Sequence alignment (nucleic acid) classified under the broader category of Sequence alignment? | What specific types fall under Sequence alignment, and does this include Sequence alignment (nucleic acid)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence length range\nDescription: Sequence length range is a subclass of Obsolete concept (EDAM). It represents the specification of range(s) of length of sequences. This class is considered obsolete within the ontology, and its primary purpose was to define limits or intervals for the lengths that sequences can have.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What are the more specific subclasses represented under Obsolete concept (EDAM), such as Sequence length range? | Is Sequence length range classified as a kind of Obsolete concept (EDAM)? | Which categories encompass Sequence length range, specifically considering its relationship to Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FACS data\nDescription: FACS data is defined as a subclass of data. This means that any instance of FACS data is categorized as data, with no additional constraints or distinguishing properties specified by the current axiom.\nAxiom: {'subClassOf': ['data']}\nGenerated CQs:", "output": "What broader data classifications does FACS data fall under? | Which data subtypes encompass FACS data as a more specialized instance? | Is FACS data recognized as a specific type under the general category of data? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dynamic Bayesian network model\nDescription: dynamic Bayesian network model is defined as a subclass of Bayesian Model. This means every dynamic Bayesian network model is, by definition, a type of Bayesian Model, inheriting all its fundamental properties and characteristics. This class typically represents Bayesian models that allow for temporal or sequential representation of probabilistic dependencies, suitable for modeling dynamic systems where variables evolve over time.\nAxiom: {'subClassOf': ['Bayesian Model']}\nGenerated CQs:", "output": "Is dynamic Bayesian network model classified as a type of Bayesian Model? | Which models are categorized under Bayesian Model, including dynamic Bayesian network model? | What broader modeling categories encompass dynamic Bayesian network model? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Atomic x coordinate\nDescription: Atomic x coordinate is a subclass of Atomic coordinate that specifically represents the Cartesian x coordinate of an atom within a molecular structure. This class is used to denote the x-axis spatial position of an atom, distinguishing it from other possible spatial coordinates in molecular data.\nAxiom: {'subClassOf': ['Atomic coordinate']}\nGenerated CQs:", "output": "Which specific subtypes fall within Atomic coordinate, such as Atomic x coordinate? | What are the hierarchical parent classes of Atomic x coordinate? | Is Atomic x coordinate classified under the broader category of Atomic coordinate? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Northern blot experiment\nDescription: Northern blot experiment is defined as a subclass of Proteomics experiment. It concerns the investigation and analysis techniques used in Northern Blot experiments, which typically involve the detection and study of RNA molecules. This class is used to capture information, protocols, or procedures specifically related to Northern Blot experimental methods under the broader category of proteomics research.\nAxiom: {'subClassOf': ['Proteomics experiment']}\nGenerated CQs:", "output": "Is Northern blot experiment a specialized form of Proteomics experiment? | Does the category of Proteomics experiment include more specific experiments such as Northern blot experiment? | Which experiments fall under the class of Proteomics experiment, including Northern blot experiment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ensembl ID ('Danio rerio')\nDescription: Ensembl ID ('Danio rerio') is defined as a subclass of 'Obsolete concept (EDAM)'. It represents the identifier assigned to an entry—such as an exon, gene, transcript, or protein—in the Ensembl 'core' database for the 'Danio rerio' (zebrafish) division. This class specifies identifiers that are considered obsolete within the EDAM ontology context.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What parent classes are defined for Ensembl ID ('Danio rerio') within the ontology? | Is Ensembl ID ('Danio rerio') categorized under the broader class of Obsolete concept (EDAM)? | Which identifiers are classified as subclasses of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: System metadata\nDescription: System metadata is defined as a subclass of Resource metadata. It specifically encompasses metadata that pertains to software, hardware, or other aspects of a computer system, distinguishing it from broader resource metadata by its focus on computer system components and their characteristics.\nAxiom: {'subClassOf': ['Resource metadata']}\nGenerated CQs:", "output": "Which types of metadata are included within the category of Resource metadata? | What broader metadata categories encompass System metadata? | Is System metadata categorized under Resource metadata? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: EMBL accession\nDescription: EMBL accession is defined as a subclass of EMBL/GenBank/DDBJ ID, which means it is a specific type of sequence identifier within the broader INSDC (International Nucleotide Sequence Database Collaboration) context. Members of this class are accession numbers assigned to entries in the EMBL sequence database, serving as unique identifiers for nucleotide sequence records within EMBL.\nAxiom: {'subClassOf': ['EMBL/GenBank/DDBJ ID']}\nGenerated CQs:", "output": "Is every EMBL accession classified as an EMBL/GenBank/DDBJ ID? | What are the direct superclass categories for EMBL accession? | Which identifiers are specified as subclasses under EMBL/GenBank/DDBJ ID, such as EMBL accession? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene regulatory network processing\nDescription: Gene regulatory network processing is defined as a subclass of Obsolete concept (EDAM). It refers to processes that read and/or write networks of gene regulation. As an obsolete concept, its use is deprecated in favor of more current or accurate terms, but historically it represented the computational handling or manipulation of gene regulatory networks.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What higher-level classifications does gene regulatory network processing fall under? | Which concepts are classified as specializations of obsolete concept (EDAM), including gene regulatory network processing? | Is gene regulatory network processing categorized under obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: web user interface\nDescription: web user interface is defined as a subclass of graphical user interface, indicating that it inherits all properties and characteristics of graphical user interfaces. This class encompasses user interfaces accessed through web technologies, typically rendered in web browsers, and facilitates user interaction with software applications over the internet or an intranet.\nAxiom: {'subClassOf': ['graphical user interface']}\nGenerated CQs:", "output": "Which interfaces fall under the category of graphical user interface, such as web user interface? | Is web user interface classified as a type of graphical user interface? | What broader categories encompass web user interface? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Nucleic acid features report (expression signal)\nDescription: Nucleic acid features report (expression signal) is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer maintained or recommended for use. This class concerns regions within a nucleic acid sequence that contain a signal which alters a biological function, capturing sequence features relevant to changes in gene expression or functional activity.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Nucleic acid features report (expression signal) classified as a more specific concept under Obsolete concept (EDAM)? | What specialized types are listed within Obsolete concept (EDAM), including Nucleic acid features report (expression signal)? | Which broader groups encompass Nucleic acid features report (expression signal)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NONMEM data format\nDescription: NONMEM data format is a subclass of data format specification. It represents a specific data format standard used primarily for the input and handling of pharmacometric and population modeling data in NONMEM software. This class encapsulates all data structure requirements and constraints defined for compliant data interchange within NONMEM workflows.\nAxiom: {'subClassOf': ['data format specification']}\nGenerated CQs:", "output": "Is NONMEM data format categorized under data format specification? | Which data format specifications encompass more specific types such as NONMEM data format? | What are the superclass categories to which NONMEM data format belongs? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein structure raw data\nDescription: Protein structure raw data is defined as a subclass of Experimental measurement. It represents raw data obtained from experimental methods used to determine protein structure. This class serves as a broad, placeholder data type, primarily intended to facilitate navigation within EDAM, rather than for direct annotation.\nAxiom: {'subClassOf': ['Experimental measurement']}\nGenerated CQs:", "output": "Which subtypes are encompassed within Experimental measurement, specifically including Protein structure raw data? | Is Protein structure raw data classified as a more specific type under Experimental measurement? | To which higher-level categories does Protein structure raw data pertain within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ASCII format\nDescription: ASCII format is defined as a subclass of plain text file format. This means that any instance of ASCII format is also a plain text file format, characterized by storing data as unformatted text using the ASCII character encoding standard. The definition ensures that ASCII format files are recognized specifically as plain text representations, inheriting all properties of plain text file formats.\nAxiom: {'subClassOf': ['plain text file format']}\nGenerated CQs:", "output": "Which file formats are subclasses within the plain text file format category, including ASCII format? | Is ASCII format categorized as a more specific type under plain text file format? | What broader file format categories does ASCII format fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylogeny\nDescription: Phylogeny is defined as a subclass of Evolutionary biology, focusing on the study of evolutionary relationships among organisms. This class encompasses diverse phylogenetic methods, including the construction of phylogenetic trees from molecular sequence or morphological data, simulation of DNA sequence evolution, estimation or use of molecular clock and stratigraphic (age) data, and techniques for studying gene evolution. These methods collectively facilitate the analysis and inference of evolutionary patterns and relationships within and across species.\nAxiom: {'subClassOf': ['Evolutionary biology']}\nGenerated CQs:", "output": "Is Phylogeny categorized under the broader domain of Evolutionary biology? | What higher-level disciplines encompass Phylogeny within their scope? | Which fields are classified as subtypes of Evolutionary biology, such as Phylogeny? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: database creation\nDescription: database creation is classified as a subclass of information processing, meaning it represents a specific type of process involved in the handling or manipulation of information. Individuals of this class are characterized as activities or operations whose primary function is to establish or generate databases as part of broader information processing tasks.\nAxiom: {'subClassOf': ['information processing']}\nGenerated CQs:", "output": "What specific processes are included under information processing, such as database creation? | Is database creation classified as a form of information processing? | Which broader categories encompass database creation within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Amino acid name (single letter)\nDescription: Amino acid name (single letter) is defined as a subclass of Amino acid name. It represents a single-letter identifier used to denote amino acids, for example, \"G\" for glycine. This class is used to capture the standardized single-character codes assigned to specific amino acids.\nAxiom: {'subClassOf': ['Amino acid name']}\nGenerated CQs:", "output": "Does the single-letter amino acid name fall under the broader category of amino acid name? | To which higher-level groups is the single-letter amino acid name associated within the ontology? | Which specific designations are recognized as subclasses of amino acid name, including the single-letter representation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: raster image format\nDescription: raster image format is defined as a subclass of image format. This means every raster image format is an image format, but not all image formats are raster. Members of this class represent image formats in which images are composed of a grid of pixels, as opposed to formats based on vectors or other representations.\nAxiom: {'subClassOf': ['image format']}\nGenerated CQs:", "output": "Is raster image format encompassed within the broader classification of image format? | Which types of image format specifically include raster image format as a subclass? | What general format categories does raster image format fall under according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence alignment type\nDescription: Sequence alignment type is a subclass of Obsolete concept (EDAM). It represents a label or text token used to describe the type of a sequence alignment. Possible values encompass various alignment categories, such as those defined by EMBOSS and BLAST. This class captures the categorization of sequence alignments based on their methodological or functional characteristics.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which specific concepts are defined as subclasses of Obsolete concept (EDAM), such as Sequence alignment type? | What broader category encompasses Sequence alignment type according to the ontology? | Is Sequence alignment type categorized under Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ensembl ID (Homo sapiens)\nDescription: Ensembl ID (Homo sapiens) is defined as a subclass of Obsolete concept (EDAM), indicating that it represents an outdated or deprecated notion within the ontology. It refers specifically to identifiers assigned to entries such as exons, genes, transcripts, or proteins within the Homo sapiens division of the Ensembl 'core' database. This class is intended for referencing unique identifiers for human genomic entities as catalogued in Ensembl, but it is marked as obsolete within the current ontology structure.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What parent categories include Ensembl ID (Homo sapiens) within the ontology? | Which concepts are more specific than Obsolete concept (EDAM), such as Ensembl ID (Homo sapiens)? | Is Ensembl ID (Homo sapiens) categorized under the broader group Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GO (molecular function)\nDescription: GO (molecular function) is classified as a subclass of Obsolete concept (EDAM), indicating it is no longer in active use within the ontology framework. It represents an enumerated string data type that provides a term definition for a molecular function from the Gene Ontology (GO). This class captures definitions associated with molecular functional terms, but is considered obsolete for current applications.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is molecular function classified under the category of Obsolete concept (EDAM)? | Which concepts are more specific subclasses within Obsolete concept (EDAM), including molecular function? | To which higher-level categories does molecular function, as represented by GO, belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene ID (ZFIN)\nDescription: Gene ID (ZFIN) is defined as a subclass of Gene ID and represents an identifier specifically assigned to a gene in the Zebrafish Information Network (ZFIN) genome database. This class is intended to uniquely reference zebrafish genes within the context of ZFIN, ensuring clear identification and integration with the ZFIN resource.\nAxiom: {'subClassOf': ['Gene ID']}\nGenerated CQs:", "output": "Is every Gene ID (ZFIN) instance included under the broader Gene ID category? | What hierarchical categories does Gene ID (ZFIN) fall under within the ontology? | Which specific types of Gene ID exist, such as Gene ID (ZFIN)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence assembly format (text)\nDescription: Sequence assembly format (text) is a subclass of Sequence assembly format and refers specifically to formats used to represent sequence assembly data in a text-based form. This class encompasses any text format designed to store, exchange, or process sequence assembly information.\nAxiom: {'subClassOf': ['Sequence assembly format']}\nGenerated CQs:", "output": "Which sequence assembly formats encompass Sequence assembly format (text) as a more specific type? | What broader classes include Sequence assembly format (text) as a member? | Is Sequence assembly format (text) classified as a specific kind of Sequence assembly format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: 2D PAGE experiment\nDescription: 2D PAGE experiment is defined as a subclass of Proteomics experiment. It specifically concerns two-dimensional gel electrophoresis (2D-PAGE) techniques, encompassing experiments, gels, or spots observed within a gel. This class captures experimental processes and data associated with the separation and analysis of proteins based on two distinct properties, typically isoelectric point and molecular weight, as utilized in 2D-PAGE within proteomic studies.\nAxiom: {'subClassOf': ['Proteomics experiment']}\nGenerated CQs:", "output": "Which broader experiment categories encompass 2D PAGE experiment? | What specific experiments are categorized as Proteomics experiment, such as 2D PAGE experiment? | Is every 2D PAGE experiment classified under the category of Proteomics experiment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Genome index\nDescription: Genome index is defined as a subclass of Data index. It refers to an index specifically constructed for a genome sequence, serving as a precomputed organizational structure that facilitates rapid sequence alignment, especially when dealing with large or numerous sequences. This enables efficient retrieval and comparison operations by accelerating computational alignment tasks involving genome data.\nAxiom: {'subClassOf': ['Data index']}\nGenerated CQs:", "output": "Which indexes are subclasses of Data index, with Genome index as an example? | Is Genome index categorized as a type of Data index? | What broader classifications encompass Genome index? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Database cross-mapping\nDescription: Database cross-mapping is a subclass of Data reference, representing the process or entity in which accession numbers or other database identifiers are mapped between two or more biological or biomedical databases. Typically implemented as a table, each row corresponds to an accession number and each column to a database being referenced, with cells containing identifiers of corresponding entries. Empty cells indicate the absence of a mapping for that database. Additional metadata such as version or date may also be included. This structure facilitates the integration and comparison of related data across different database sources.\nAxiom: {'subClassOf': ['Data reference']}\nGenerated CQs:", "output": "Which broader concepts is Database cross-mapping subsumed by? | What specific types fall under the category of Data reference, and does Database cross-mapping belong to them? | Is Database cross-mapping classified as a kind of Data reference? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Alignment processing\nDescription: Alignment processing is a subclass of 'Obsolete concept (EDAM)', indicating that it is no longer recommended for use. It is defined as the process of reading and/or writing alignments of two or more molecular sequences, structures, or derived data. This class encompasses methods or workflows that manipulate such alignments, but its obsolescence status suggests use of alternative, updated concepts where possible.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Alignment processing classified as an Obsolete concept (EDAM)? | What broader category encompasses Alignment processing within the EDAM ontology? | Which concepts fall under the category of Obsolete concept (EDAM), such as Alignment processing? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence alignment parameter\nDescription: Sequence alignment parameter is a subclass of Obsolete concept (EDAM) and is defined as some simple value controlling a sequence alignment or similar 'match' operation. This class represents conceptual parameters that guide how sequence alignment procedures are performed, but has been marked as obsolete in the EDAM ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which parameters are considered subclasses of Obsolete concept (EDAM), including Sequence alignment parameter? | Is Sequence alignment parameter classified under the category of Obsolete concept (EDAM)? | What broader classes encompass the Sequence alignment parameter within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Recombination detection\nDescription: Recombination detection is a subclass of nucleic acid sequence alignment analysis, focused on identifying recombination events in aligned genetic sequences. This class covers the detection of recombination hotspots and coldspots, as well as the precise identification of recombination breakpoints within sequence alignments. Tools for recombination detection may employ various methods, including genetic algorithms, quartet-mapping, bootscanning, graphical techniques, or machine learning models such as random forests.\nAxiom: {'subClassOf': ['Nucleic acid sequence alignment analysis']}\nGenerated CQs:", "output": "Is Recombination detection classified under the broader category of Nucleic acid sequence alignment analysis? | To what higher-level analytical domains does Recombination detection pertain? | Which analytical methods are considered specializations of Nucleic acid sequence alignment analysis, such as Recombination detection? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Motif database search\nDescription: Motif database search is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer recommended for current use within the EDAM ontology. It refers to the process of screening a biological sequence against a motif or pattern database to identify potential matches. This category encompasses methods or tools designed to perform such computational searches, but is now considered outdated or superseded in this context.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Motif database search classified as an instance of the broader category Obsolete concept (EDAM)? | Which concepts are encompassed by the Obsolete concept (EDAM) category, including Motif database search? | What hierarchical parent classes does Motif database search fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Residue bump detection\nDescription: Residue bump detection is a subclass of Residue non-canonical interaction detection. This class encompasses methods or processes that identify 'bumps' between residues in a molecular structure, defined as pairs of atoms where the Van der Waals' radii overlap (interpenetrate) beyond a specified threshold. This detection helps characterize unusual or sterically hindered residue interactions not considered canonical.\nAxiom: {'subClassOf': ['Residue non-canonical interaction detection']}\nGenerated CQs:", "output": "What detection types are encompassed by Residue non-canonical interaction detection, specifically including Residue bump detection? | Is Residue bump detection categorized under the broader group of Residue non-canonical interaction detection? | Which overarching detection categories does Residue bump detection fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: STRIDE log file\nDescription: STRIDE log file is defined as a subclass of Obsolete concept (EDAM), indicating that it represents a concept no longer in active use or recommended within the EDAM ontology. This class refers specifically to STRIDE log files, but its status as an obsolete concept suggests it should not be used for new data or annotation activities.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is STRIDE log file classified as a type of Obsolete concept (EDAM)? | Which log file types are included under Obsolete concept (EDAM), specifically encompassing STRIDE log file? | To which overarching categories does STRIDE log file belong according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Laboratory techniques\nDescription: Laboratory techniques is a subclass of Topic, defined as a topic concerning the procedures used to conduct an experiment. This class encapsulates various methods and processes essential for carrying out experimental investigations within laboratory settings.\nAxiom: {'subClassOf': ['Topic']}\nGenerated CQs:", "output": "Which categories under Topic encompass Laboratory techniques? | What broader conceptual groupings include Laboratory techniques? | Are laboratory techniques classified as a subset of Topic? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LabVIEW\nDescription: LabVIEW is defined as a subclass of programming language. This indicates that LabVIEW inherits all characteristics of programming languages, and any instance of LabVIEW is also considered a programming language. No further restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['programming language']}\nGenerated CQs:", "output": "Is LabVIEW classified under the category of programming languages? | Which broader classes encompass LabVIEW as a specialized instance? | What other concepts are subclasses of programming language alongside LabVIEW? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Atom ID\nDescription: Atom ID is defined as a subclass of Identifier (typed). It serves as an identifier—such as a character symbol—for a specific atom. This class captures identifiers that are explicitly associated with individual atoms, ensuring precise atom-level reference within the ontology.\nAxiom: {'subClassOf': ['Identifier (typed)']}\nGenerated CQs:", "output": "Is Atom ID categorized as a kind of Identifier? | Which specialized types are encompassed by the class Identifier? | What are the parent classes of Atom ID within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence alignment (hybrid)\nDescription: Sequence alignment (hybrid) is a subclass of Sequence alignment, specifically referring to the alignment of multiple molecular sequences of different types, such as genomic DNA and expressed sequence tags (EST), cDNA, or mRNA. This class captures alignments that integrate sequences representing distinct biological molecules, allowing for comparative analysis across different molecular sequence types.\nAxiom: {'subClassOf': ['Sequence alignment']}\nGenerated CQs:", "output": "Under which more general classes does Sequence alignment (hybrid) fall within the ontology? | Which types of alignment fall under the broader category of Sequence alignment, specifically including Sequence alignment (hybrid)? | Is Sequence alignment (hybrid) classified as a specialized form of Sequence alignment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DictyBase gene report format\nDescription: DictyBase gene report format is defined as an entry format used within the DictyBase genome database. It is formally classified as a subclass of Obsolete concept (EDAM), indicating that this format is no longer in active use and has been superseded or retired. This class represents reporting structures for gene information specific to DictyBase, but its obsolete status means it should not be applied to current datasets or applications.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What are the higher-level categories associated with DictyBase gene report format? | Which data formats are considered subclasses of Obsolete concept (EDAM)? | Is DictyBase gene report format classified under the broader category of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence-profile alignment (HMM) format\nDescription: Sequence-profile alignment (HMM) format is defined as a data format specifically used for representing alignments between biological sequences and hidden Markov model (HMM) profiles. According to its axioms, this class is a subclass of Obsolete concept (EDAM), indicating that it is no longer considered current or in active use within the EDAM ontology. This classification helps ensure that this format is recognized as deprecated and should not be used for new data or tools.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What more general classes does Sequence-profile alignment (HMM) format fall under within the ontology? | Is Sequence-profile alignment (HMM) format classified under the broader category of Obsolete concept (EDAM)? | Which formats are considered specific types of Obsolete concept (EDAM), such as Sequence-profile alignment (HMM) format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence editing (nucleic acid)\nDescription: Sequence editing (nucleic acid) is defined as a subclass of Obsolete concept (EDAM). It refers to the process of editing or changing a nucleic acid sequence, either in a random or specific manner. This class has been marked obsolete, indicating that its use is deprecated in the ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Sequence editing (nucleic acid) categorized under Obsolete concept (EDAM)? | What obsolete concepts in EDAM encompass Sequence editing (nucleic acid)? | Which specific processes are included within the Obsolete concept (EDAM) class, such as Sequence editing (nucleic acid)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: BIND entry format\nDescription: BIND entry format is defined as a subclass of the obsolete concept in EDAM, indicating it is no longer current or recommended for use. It specifically refers to the entry format used in the BIND database for protein interaction data. This classification marks the BIND entry format as both historically significant and deprecated within contemporary bioinformatics ontologies.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What higher-level classifications include BIND entry format? | Which entity types are classified as more specific than Obsolete concept (EDAM), such as BIND entry format? | Is BIND entry format categorized under the broader concept of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Multivariate correlation estimator\nDescription: Multivariate correlation estimator is defined as a subclass of algorithm. It encompasses algorithms specifically designed to estimate the correlation structure among multiple variables simultaneously. This class formalizes methods that take multivariate data as input and output information about the linear or nonlinear relationships among variables, supporting multivariate statistical analysis.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "Which broader categories encompass Multivariate correlation estimator beyond its direct classification? | What algorithms exist that include Multivariate correlation estimator as a specific variant? | Is Multivariate correlation estimator categorized as a type of algorithm? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Genes and proteins resources\nDescription: Genes and proteins resources is defined as a subclass of the obsolete concept category in EDAM, indicating that it is no longer in current use or has been superseded. This class encompasses topics concerning specific genes, their encoded proteins, and groupings such as gene or protein families, focusing on resources related to molecular genetics and proteomics.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which resources are classified as subclasses of Obsolete concept (EDAM), such as Genes and proteins resources? | What higher-level classes does Genes and proteins resources fall under in the ontology? | Is Obsolete concept (EDAM) a superclass for Genes and proteins resources? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Peptide annotation\nDescription: Peptide annotation is defined as a subclass of the obsolete concept (EDAM), indicating that it is deprecated or no longer recommended for use. It is described as an informative report about a specific peptide, suggesting its historical role in providing details or metadata relating to peptides. Use of this class should be reconsidered due to its obsolete status.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What are all the subclasses defined within Obsolete concept (EDAM), including Peptide annotation? | To which higher-level concepts does Peptide annotation belong? | Is Peptide annotation categorized under the broader class of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene name (MaizeGDB)\nDescription: Gene name (MaizeGDB) is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer in active use within the referenced ontology. It represents the name of a gene from the MaizeGDB (maize genes) database. This class should not be used for current annotation, as it has been marked obsolete.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "To which higher-level classes does Gene name (MaizeGDB) belong according to the ontology? | Which specific entities are classified as subclasses of Obsolete concept (EDAM), including Gene name (MaizeGDB)? | Is Gene name (MaizeGDB) categorized under the broader class of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: markx0\nDescription: markx0 is defined as a subclass of markx0 variant. It represents the Pearson MARKX0 alignment format, which pertains to a specific format used for sequence alignments. This class inherits all properties of markx0 variant and is characterized by its association with the MARKX0 alignment specification.\nAxiom: {'subClassOf': ['markx0 variant']}\nGenerated CQs:", "output": "What overarching classes include markx0 within the markx0 variant hierarchy? | Is markx0 classified under the broader group of markx0 variant? | Which variants categorize markx0 as a more specific form? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: EMBOSS database resource definition\nDescription: EMBOSS database resource definition is a subclass of Obsolete concept (EDAM), indicating it is no longer in active use or has been superseded. It refers to a resource definition for an EMBOSS database, representing the specification or structured description of a database resource within the EMBOSS bioinformatics suite.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which concepts are direct specializations of Obsolete concept (EDAM), such as EMBOSS database resource definition? | What general categories encompass EMBOSS database resource definition in the EDAM ontology? | Is EMBOSS database resource definition classified as a type of Obsolete concept in EDAM? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein targeting and localization\nDescription: Protein targeting and localization is defined as a subclass of Protein expression. It encompasses the study of the mechanisms by which proteins are transported to specific locations within or outside the cell, including processes such as signal peptide-mediated transport, subcellular localization, and protein export. This class focuses on understanding how proteins reach their functional destinations as part of cellular protein expression dynamics.\nAxiom: {'subClassOf': ['Protein expression']}\nGenerated CQs:", "output": "What are the specialized subtypes of Protein expression, including Protein targeting and localization? | Which categories does Protein targeting and localization fall under with respect to Protein expression? | Is Protein expression a general category that encompasses Protein targeting and localization? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Microarray raw data analysis\nDescription: Microarray raw data analysis is defined as a subclass of Obsolete concept (EDAM), indicating it is no longer an actively maintained or recommended concept. It refers to the process of analyzing raw microarray data, typically involving the initial computational and statistical procedures applied to uninterpreted data obtained from microarray experiments. The obsolete status suggests that this method or term has been superseded by newer approaches or terminologies.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What are the more specific types encompassed by Obsolete concept (EDAM), including Microarray raw data analysis? | Which broader concepts does Microarray raw data analysis inherit from within the ontology? | Is Microarray raw data analysis classified under the Obsolete concept (EDAM) category? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Dylan\nDescription: Dylan is defined as a subclass of programming language, indicating that it represents a specific type of programming language. No additional axioms or restrictions are provided, so members of this class inherit all the general characteristics of programming languages.\nAxiom: {'subClassOf': ['programming language']}\nGenerated CQs:", "output": "What are the parent categories of Dylan in the ontology? | Which programming languages have Dylan as a specific type within their hierarchy? | Does Dylan belong to the category of programming languages? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Usage restricted\nDescription: Usage restricted is defined as a subclass of Usage clause. This means that every instance of Usage restricted is also considered a Usage clause, typically signifying a specific type of usage limitation or regulation formalized within a broader policy or agreement context. No further restrictions or disjointness are specified beyond this hierarchical relationship.\nAxiom: {'subClassOf': ['Usage clause']}\nGenerated CQs:", "output": "What broader clauses encompass Usage restricted as a subtype? | Does Usage restricted fall under the general category of Usage clause? | Which specific usages are classified within the Usage clause category? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Metabolic disease\nDescription: Metabolic disease is defined as a subclass of Obsolete concept (EDAM), indicating its deprecated status within the ontology. It refers to a topic concerning the study of metabolic diseases, though its classification as obsolete suggests it should not be used for current or future annotation.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Does Metabolic disease fall under the overarching class of Obsolete concept (EDAM)? | Which specific concepts are categorized under Obsolete concept (EDAM), such as Metabolic disease? | What general classes or categories does Metabolic disease directly inherit from? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: application programming interface\nDescription: application programming interface is defined as a subclass of software interface. This means every application programming interface is a specialized form of software interface, facilitating communication and interaction between different software components or systems.\nAxiom: {'subClassOf': ['software interface']}\nGenerated CQs:", "output": "Does application programming interface fall under the category of software interface? | What are the more specific types classified within software interface, such as application programming interface? | To which higher-level categories is application programming interface assigned? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylogenetic tree generation (minimum distance methods)\nDescription: Phylogenetic tree generation (minimum distance methods) is a subclass of Phylogenetic tree generation (method centric). This class comprises approaches—such as the neighbor joining (NJ) clustering method—that construct phylogenetic trees by calculating or utilizing precomputed distances between sequences. The goal is to identify a tree where the discrepancies between the observed pairwise distances and those implied by the tree structure are minimized, allowing for accurate inference of evolutionary relationships.\nAxiom: {'subClassOf': ['Phylogenetic tree generation (method centric)']}\nGenerated CQs:", "output": "Which higher-level categories encompass Phylogenetic tree generation (minimum distance methods)? | Is Phylogenetic tree generation (minimum distance methods) classified within the broader group of Phylogenetic tree generation (method centric)? | What are the more specific types under Phylogenetic tree generation (method centric), including minimum distance methods? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein signal peptide detection (eukaryotes)\nDescription: Protein signal peptide detection (eukaryotes) is a subclass of Protein signal peptide detection. Members of this class are concerned with detecting or predicting signal peptides specifically in eukaryotic proteins, often also predicting their subcellular localization. This classification formalizes tasks or methods focused on identifying signal peptides in eukaryotic protein sequences.\nAxiom: {'subClassOf': ['Protein signal peptide detection']}\nGenerated CQs:", "output": "Which broader detection classes encompass 'Protein signal peptide detection (eukaryotes)'? | What specific detection categories are subclasses of 'Protein signal peptide detection', including the eukaryote-focused type? | Is 'Protein signal peptide detection (eukaryotes)' classified as a kind of 'Protein signal peptide detection'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Coding region prediction\nDescription: Coding region prediction is defined as a subclass of gene component prediction. It refers to the computational process of identifying protein-coding regions, such as coding sequences (CDS), exons, or open reading frames, within nucleotide sequences. This class formalizes prediction methods aimed specifically at detecting the parts of genes that encode proteins, distinguishing them from non-coding regions.\nAxiom: {'subClassOf': ['Gene component prediction']}\nGenerated CQs:", "output": "Does Coding region prediction represent a specialized form of Gene component prediction? | To which major prediction category does Coding region prediction belong? | Which subcategories fall under Gene component prediction, such as Coding region prediction? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein secondary structure image\nDescription: Protein secondary structure image is a subclass of Protein image. It represents images specifically depicting the secondary structure of proteins, such as alpha helices and beta sheets. This class is defined by the oboInOwl:hasDefinition property: \"Image of protein secondary structure.\"\nAxiom: {'subClassOf': ['Protein image']}\nGenerated CQs:", "output": "Is Protein image a more general category that includes Protein secondary structure image? | Which specific types of Protein image exist, and does this include Protein secondary structure image? | To which superordinate image categories does Protein secondary structure image belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence cluster ID (UniRef90)\nDescription: Sequence cluster ID (UniRef90) is a subclass of Sequence cluster ID (UniRef). It represents a unique identifier assigned to each entry in the UniRef90 database, enabling the unambiguous referencing and retrieval of sequence clusters within the UniRef90 dataset.\nAxiom: {'subClassOf': ['Sequence cluster ID (UniRef)']}\nGenerated CQs:", "output": "Which specific sequence cluster IDs are included within Sequence cluster ID (UniRef), such as UniRef90? | What broader cluster identifier categories does Sequence cluster ID (UniRef90) fall under? | Is Sequence cluster ID (UniRef90) categorized under Sequence cluster ID (UniRef)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: REBASE proto enzyme report format\nDescription: REBASE proto enzyme report format is defined as a subclass of Obsolete concept (EDAM). It represents the format of an entry from the proto section of the REBASE enzyme database. This class is considered obsolete, indicating that the format is no longer in active use or has been superseded.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which broader conceptual categories recognize REBASE proto enzyme report format as a subordinate member? | Is REBASE proto enzyme report format classified under the overarching category of Obsolete concept (EDAM)? | What obsolete concepts (EDAM) include REBASE proto enzyme report format as a more specific subtype? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence word comparison\nDescription: Sequence word comparison is a subclass of Sequence comparison, specialized in identifying exact character or word matches between molecular sequences. Unlike full sequence alignment, this class represents operations that focus solely on pinpointing matching words or characters, providing a targeted approach for comparative analysis of sequence fragments.\nAxiom: {'subClassOf': ['Sequence comparison']}\nGenerated CQs:", "output": "Which types of comparisons are classified as subclasses of Sequence comparison? | Does Sequence word comparison fall under the broader class of Sequence comparison? | What general comparison categories include Sequence word comparison? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: amino acid protein sequence data\nDescription: amino acid protein sequence data is defined as a subclass of biological sequence data. This class represents sequence data composed specifically of amino acids, typically encoding the primary structure of proteins. Members of this class are distinguished from other types of biological sequence data, such as nucleic acid sequences, by representing the ordered series of amino acids that form protein molecules.\nAxiom: {'subClassOf': ['biological sequence data']}\nGenerated CQs:", "output": "Which subcategories fall under the class of biological sequence data? | Is amino acid protein sequence data a more specialized form of biological sequence data? | To which higher-level groups does amino acid protein sequence data pertain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ontology concept comment\nDescription: Ontology concept comment is a subclass of Obsolete concept (EDAM), representing a comment made on a concept within an ontology. This class is intended to capture annotations or remarks relevant to ontology concepts, though it is now considered obsolete within the EDAM framework.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What broader classes does Ontology concept comment directly belong to? | Which concepts fall under the Obsolete concept (EDAM) class, including Ontology concept comment? | Is every Ontology concept comment categorized under Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Image\nDescription: Image is defined as a subclass of data, specifically representing biological or biomedical data that can be visually rendered—such as being displayed on a screen or plotted on a graph. Members of this class are characterized by their suitability for visual representation, distinguishing them within the spectrum of data types.\nAxiom: {'subClassOf': ['data']}\nGenerated CQs:", "output": "Which upper-level groups does Image fall under within the ontology? | Is Image categorized as a specialized type of data? | What types are encompassed under data, specifically including Image? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HGVbase entry format\nDescription: HGVbase entry format is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer in active use or has been deprecated. It represents the format of a record originating from the HGVbase database, which stored information about genotypes and phenotypes.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What specific concepts fall within Obsolete concept (EDAM), such as HGVbase entry format? | Which upper-level categories does HGVbase entry format belong to according to the ontology? | Is HGVbase entry format classified under the broader category of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GO concept name\nDescription: GO concept name is a subclass of Obsolete concept (EDAM), indicating that it refers to a concept that is no longer actively used within the EDAM ontology. It is defined as the name of a concept from the Gene Ontology (GO), according to its current definition. This class captures deprecated labels or identifiers associated with GO concepts.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is every GO concept name classified under Obsolete concept in EDAM? | What broader EDAM categories include GO concept name as a more specific class? | Which GO concept names fall within the scope of Obsolete concept in EDAM? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Directory metadata\nDescription: Directory metadata is defined as a subclass of the obsolete concept (EDAM), indicating that it is no longer in current use. It is characterized as a directory on disk from which files are read. This class groups metadata associated specifically with such directories, although its use is considered outdated within the ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Directory metadata categorized as a specialized form of Obsolete concept (EDAM)? | What broader conceptual groupings encompass Directory metadata? | Which concepts are classified under Obsolete concept (EDAM), such as Directory metadata? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Nucleic acid comparison\nDescription: Nucleic acid comparison is a subclass of Comparison, defined as the process of analyzing two or more nucleic acids to identify their similarities. This class is intended to capture activities focused on the comparative assessment of nucleic acid sequences or structures.\nAxiom: {'subClassOf': ['Comparison']}\nGenerated CQs:", "output": "To which parent classes does Nucleic acid comparison belong? | Which comparisons are classified more specifically as Nucleic acid comparisons? | Does Nucleic acid comparison fall under the category of Comparison? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: beta\nDescription: beta is defined as a subclass of Development status. This indicates that beta represents a specific stage or category within the broader concept of Development status, used to characterize entities according to their progress or phase in a development lifecycle. No further property restrictions or disjointness axioms are specified.\nAxiom: {'subClassOf': ['Development status']}\nGenerated CQs:", "output": "Which specific subclasses fall within Development status, such as beta? | Is beta categorized under the broader class of Development status? | What general classifications does beta fall under in terms of Development status hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Rank-invariant set normalization\nDescription: Rank-invariant set normalization is an algorithm and thus a subclass of algorithm. While no further properties or relationships are specified in the given axiom, this class represents computational procedures designed for data normalization in which certain ranked sets or features remain unchanged, ensuring comparability across samples.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "Is rank-invariant set normalization classified under the general category of algorithm? | Which instances are recognized as more specific types of algorithm, such as rank-invariant set normalization? | What broader categories contain rank-invariant set normalization as a specific method? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CBS\nDescription: CBS is defined as a subclass of algorithm. This indicates that every instance of CBS is recognized as a type of algorithm, inheriting all properties and characteristics typical of algorithms. No additional distinguishing axioms or restrictions are specified for CBS.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "What are the specific subclasses found within the class algorithm, such as CBS? | Is CBS classified under the broader category of algorithm? | Which higher-level categories does CBS conceptually fall into? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Perl\nDescription: Perl is defined as a subclass of programming language, indicating that any instance of Perl is also an instance of programming language. This classification situates Perl within the broader category of languages designed for coding and software development.\nAxiom: {'subClassOf': ['programming language']}\nGenerated CQs:", "output": "To which higher-level categories does Perl belong within the programming language hierarchy? | Which programming languages include subclasses such as Perl? | Is Perl classified as a specialized form of programming language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Functional mapping\nDescription: Functional mapping is defined as a subclass of the obsolete concept (EDAM), indicating it is no longer recommended for current use. It refers to mapping the genetic architecture of dynamic complex traits, often involving the characterization of underlying quantitative trait loci (QTLs) or nucleotides (QTNs). This term historically described approaches for associating genetic markers with complex trait variation through quantitative analysis.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What broader conceptual categories include Functional mapping within the EDAM ontology? | Which concepts are classified under Obsolete concept (EDAM), including Functional mapping? | Is Functional mapping recognized as a specialized form of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ecology\nDescription: Ecology is a subclass of Biology, focused on the study of ecological and environmental sciences. It is especially concerned with the application of information technology in these fields, as emphasized in ecoinformatics. This class covers both foundational ecological knowledge and the technological methods used to analyze and manage ecological data.\nAxiom: {'subClassOf': ['Biology']}\nGenerated CQs:", "output": "Is Ecology classified under the broader discipline of Biology? | To which overarching domains does Ecology pertain within the life sciences hierarchy? | Which specialized fields fall under Biology, specifically referencing Ecology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Shell\nDescription: Shell is defined as a subclass of programming language, indicating that every shell is considered a type of programming language within the ontology. No additional constraints or distinguishing characteristics are provided in the axioms. Thus, any individual classified as a shell must also be recognized as a programming language.\nAxiom: {'subClassOf': ['programming language']}\nGenerated CQs:", "output": "Which specific constructs fall under the category of programming language, including Shell? | What broader classes does Shell belong to within the ontology? | Is Shell classified as a type of programming language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylogenetic tree analysis (shape)\nDescription: Phylogenetic tree analysis (shape) is a subclass of Phylogenetic tree analysis, focused on analyzing the shape or topology of a phylogenetic tree. This class encompasses methods and approaches that examine structural features of the tree, such as its branching patterns, symmetry, or imbalance, to infer evolutionary relationships and patterns.\nAxiom: {'subClassOf': ['Phylogenetic tree analysis']}\nGenerated CQs:", "output": "Does Phylogenetic tree analysis (shape) fall under the general category of Phylogenetic tree analysis? | Which larger conceptual classes include Phylogenetic tree analysis (shape)? | What specific analyses are classified as subtypes of Phylogenetic tree analysis, such as Phylogenetic tree analysis (shape)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: data processing task\nDescription: data processing task is a subclass of information processing. It is defined as an information processing objective that specifies the goal for a data processing algorithm execution process, which, when applied to a dataset, is intended to produce a new dataset as output. This class formalizes the role of tasks that guide algorithm execution in transforming input datasets into resulting datasets.\nAxiom: {'subClassOf': ['information processing']}\nGenerated CQs:", "output": "Which tasks are recognized as specific kinds of information processing, such as data processing tasks? | To what higher-level categories does data processing task correspond within the information processing domain? | Is every data processing task classified under the broader group of information processing? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Structure-based sequence alignment\nDescription: Structure-based sequence alignment is a subclass of sequence alignment generation. This class refers to the process of aligning molecular sequences using both sequence and structural information, integrating structural data to improve alignment accuracy compared to purely sequence-based methods.\nAxiom: {'subClassOf': ['Sequence alignment generation']}\nGenerated CQs:", "output": "Is structure-based sequence alignment categorized under sequence alignment generation? | What specific types of sequence alignment generation include structure-based sequence alignment? | Which broader alignment processes encompass structure-based sequence alignment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: UMLS\nDescription: UMLS is defined as a subclass of Obsolete concept (EDAM), indicating that it represents a retired or superseded entity within the ontology. The class refers specifically to a term originating from the UMLS vocabulary, providing a clear provenance but signaling that the concept is no longer in active use within the EDAM framework.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is UMLS categorized under the broader Obsolete concept (EDAM)? | What are the direct parent categories of UMLS within this ontology? | Which concepts are subsumed by Obsolete concept (EDAM), and does this include UMLS? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Transcriptome assembly (de novo)\nDescription: Transcriptome assembly (de novo) is a subclass of Obsolete concept (EDAM). It is defined as the process of inferring a transcriptome sequence without the aid of a reference genome, by comparing short sequence reads directly to each other. This approach does not rely on any pre-existing genomic reference, and the class is considered obsolete in the referenced ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What concepts are specified as subclasses of Obsolete concept (EDAM), including transcriptome assembly (de novo)? | Which higher-level categories does transcriptome assembly (de novo) fall under in relation to Obsolete concept (EDAM)? | Is transcriptome assembly (de novo) classified under the category of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Structure formatting\nDescription: Structure formatting is defined as a subclass of Formatting. It involves the process of reformatting, specifically applied to files or reports containing tertiary structure data. This class represents formatting operations aimed at reorganizing or restructuring information related to tertiary structures.\nAxiom: {'subClassOf': ['Formatting']}\nGenerated CQs:", "output": "Is Structure formatting classified as a type of Formatting? | What are the distinct subclasses that fall under Formatting, including Structure formatting? | Which formatting categories encompass Structure formatting as a more specific subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: phylip sequence format\nDescription: phylip sequence format is a subclass of Obsolete concept (EDAM), indicating that it is no longer recommended for active use. This class represents the Phylip interleaved sequence format, a file format for representing sequence data. Its use is deprecated in favor of more current standards.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "To which broader concepts does phylip sequence format conceptually pertain? | Which sequence formats are considered more specific instances of Obsolete concept (EDAM), such as phylip sequence format? | Is phylip sequence format categorized under the broader concept of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Helical wheel\nDescription: Helical wheel is defined as a subclass of Protein secondary structure image. It represents an image depicting a peptide sequence as viewed along the axis of a helix, specifically designed to highlight amphipathicity and other structural properties. This class is used to capture visual representations relevant to the analysis of helical structures in proteins.\nAxiom: {'subClassOf': ['Protein secondary structure image']}\nGenerated CQs:", "output": "Which specific images fall under the category of Protein secondary structure image, including Helical wheel? | To which broader image classifications does Helical wheel belong? | Is Helical wheel recognized as a type of Protein secondary structure image? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene ID (VBASE2)\nDescription: Gene ID (VBASE2) is defined as a subclass of Gene ID and represents an identifier assigned to a gene in the VBASE2 database. This class is intended to uniquely specify gene records within VBASE2, aligning with its formal role as a specialization of general gene identifiers.\nAxiom: {'subClassOf': ['Gene ID']}\nGenerated CQs:", "output": "Which general identifiers include VBASE2 as a specialized Gene ID? | Does VBASE2 fall under the broader classification of Gene ID? | What more specific Gene ID types encompass VBASE2? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence alignment (pair)\nDescription: Sequence alignment (pair) is defined as a subclass of Sequence alignment, specifically referring to the alignment of exactly two molecular sequences. This class formalizes pairwise comparison, distinguishing it from alignments involving multiple sequences.\nAxiom: {'subClassOf': ['Sequence alignment']}\nGenerated CQs:", "output": "What broader categories encompass Sequence alignment (pair)? | Is Sequence alignment (pair) a specific type under the general category of Sequence alignment? | Which types are classified as Sequence alignment, including Sequence alignment (pair)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gramene identifier\nDescription: Gramene identifier is defined as a subclass of Sequence accession (protein), representing an identifier that uniquely denotes an entry within the Gramene database. This class formalizes Gramene database entries as specific types of protein sequence accessions, ensuring any individual in this class is both a protein sequence accession and a valid Gramene database identifier.\nAxiom: {'subClassOf': ['Sequence accession (protein)']}\nGenerated CQs:", "output": "What higher-level classes encompass Gramene identifier within the context of protein sequence accessions? | Which identifiers are categorized under Sequence accession (protein), including Gramene identifier? | Does Gramene identifier represent a specialized form of Sequence accession (protein)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence submission\nDescription: Sequence submission is defined as a subclass of Obsolete concept (EDAM). It refers to the process of submitting a molecular sequence to a database. This categorization indicates that sequence submission is now considered an outdated or deprecated concept within the EDAM ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What concepts are included as subclasses within Obsolete concept (EDAM), such as Sequence submission? | Is Sequence submission classified under the broader category of Obsolete concept (EDAM)? | Which higher-level categories encompass Sequence submission in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Backbone torsion angle calculation\nDescription: Backbone torsion angle calculation is a subclass of torsion angle calculation. This class represents the process of computing all backbone torsion angles for each residue within a protein structure, enabling detailed analysis of the protein’s conformational properties.\nAxiom: {'subClassOf': ['Torsion angle calculation']}\nGenerated CQs:", "output": "What categories fall under torsion angle calculation, and does that list include backbone torsion angle calculation? | Is backbone torsion angle calculation classified under torsion angle calculation? | Which broader calculation types encompass backbone torsion angle calculation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Nucleic acid sequences\nDescription: Nucleic acid sequences is defined as a subclass of Obsolete concept (EDAM). This class represents topics related to nucleotide sequences, encompassing associated concepts such as sequence sites, alignments, motifs, and profiles. Its classification as obsolete indicates that it is no longer actively maintained or recommended for current use within the ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Are nucleic acid sequences classified as a type of obsolete concept within EDAM? | What broader concepts encompass nucleic acid sequences in the EDAM ontology? | Which concepts are categorized under Obsolete concept (EDAM), including nucleic acid sequences? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: probability distribution estimation algorithm\nDescription: probability distribution estimation algorithm is defined as a subclass of single generalization algorithm. This class comprises algorithms that infer or estimate a probability distribution from data, rather than focusing on mapping individual inputs to outputs. Members of this class generalize from data in a way that results in a probabilistic model, which can then be used for tasks such as sampling, density estimation, or uncertainty quantification.\nAxiom: {'subClassOf': ['single generalization algorithm']}\nGenerated CQs:", "output": "Is every probability distribution estimation algorithm categorized as a type of single generalization algorithm? | Which algorithms are classified under single generalization algorithm, such as probability distribution estimation algorithm? | To what higher-level categories does probability distribution estimation algorithm belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ontology concept reference\nDescription: Ontology concept reference is defined as a subclass of Obsolete concept (EDAM), indicating that it is considered an outdated or superseded concept within the EDAM ontology framework. It refers specifically to a reference for a concept from an ontology, serving as a means to denote or cite ontology concepts.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Ontology concept reference categorized under Obsolete concept (EDAM)? | Which concepts are classified as subclasses of Obsolete concept (EDAM)? | To which higher-level concepts does Ontology concept reference belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Small molecule data\nDescription: Small molecule data is defined as a subclass of Obsolete concept (EDAM). It represents data concerning one or more small molecules and is considered a broad data type, typically used as a placeholder for more specific types. This class is deprecated in favor of more precise classifications.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which obsolete concepts within EDAM have Small molecule data as a subclass? | What broader categories include Small molecule data as a specific instance? | Is Obsolete concept (EDAM) a direct superclass of Small molecule data? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene ID (GeneDB Trypanosoma brucei)\nDescription: Gene ID (GeneDB Trypanosoma brucei) is defined as a subclass of Obsolete concept (EDAM), indicating it is no longer in active use within the ontology. This class refers to gene identifiers that originate from the GeneDB database specifically for Trypanosoma brucei.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which concepts are designated as subclasses of Obsolete concept (EDAM), such as Gene ID (GeneDB Trypanosoma brucei)? | Is Gene ID (GeneDB Trypanosoma brucei) categorized under Obsolete concept (EDAM)? | What are the direct and indirect superclasses of Gene ID (GeneDB Trypanosoma brucei)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Chemical formula\nDescription: Chemical formula is a subclass of Molecular property (general) and is defined as a specification of a chemical structure. This class captures the properties related to the way a chemical structure is formally represented, linking it to the broader category of molecular properties.\nAxiom: {'subClassOf': ['Molecular property (general)']}\nGenerated CQs:", "output": "To which higher-level molecular property categories does chemical formula belong? | Which molecular properties have chemical formula as a more specific type? | Is a chemical formula classified under the broader category of molecular property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene ID (GeneDB Glossina morsitans)\nDescription: Gene ID (GeneDB Glossina morsitans) is defined as a subclass of Obsolete concept (EDAM), indicating that it represents a concept no longer in active use. This class refers specifically to gene identifiers from the Glossina morsitans GeneDB database.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What are the specific subclasses that are included in Obsolete concept (EDAM), such as Gene ID (GeneDB Glossina morsitans)? | Does Gene ID (GeneDB Glossina morsitans) fall under the category of Obsolete concept (EDAM)? | Which broader classes does Gene ID (GeneDB Glossina morsitans) belong to within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: UniProt format\nDescription: UniProt format is a subclass of the obsolete concept in the EDAM ontology, indicating it is no longer actively used or recommended for new work. It is defined as the sequence format used for UniProt entries. This class represents formats specifically designed for recording and representing protein sequence information in the UniProt knowledgebase.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is UniProt format classified under the broader category of Obsolete concept (EDAM)? | Which specific formats are subsumed by the Obsolete concept (EDAM), including UniProt format? | What more general concept categories encompass UniProt format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein surface report\nDescription: Protein surface report is an obsolete concept in the EDAM ontology, serving as a broad data type that acts as a placeholder for more specific types. It primarily facilitates navigation within EDAM and is not typically intended for annotation. This class encompasses data regarding the surface properties of protein structures, such as shape, hydropathy, and electrostatic patches.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which higher-level classes include Protein surface report as a member? | What are the concepts categorized under Obsolete concept (EDAM), including Protein surface report? | Is Obsolete concept (EDAM) a generalization of Protein surface report? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Data analysis\nDescription: Data analysis is defined as a subclass of Data management, representing processes focused on the systematic application of statistical and/or logical techniques to describe, illustrate, condense, recap, and evaluate data. This class encompasses activities that transform raw data into meaningful insights, ensuring that data is interpreted and summarized accurately within the broader framework of data management.\nAxiom: {'subClassOf': ['Data management']}\nGenerated CQs:", "output": "Which broader categories encompass Data analysis within their scope? | Is Data analysis regarded as a specialized form of Data management? | What are the more specific types classified under Data management, such as Data analysis? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Database\nDescription: Database is defined as a subclass of Obsolete concept (EDAM). It refers to a digital data archive, generally structured around a relational model, but it can also utilize object-oriented, tree, or graph-based models. This formalization indicates that the concept of 'Database'—as described here—has been superseded or rendered obsolete within its ontological context.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Can Database be categorized under Obsolete concept (EDAM)? | Which concepts are considered more specific types within the Obsolete concept (EDAM) category, including Database? | What broader classifications does Database fall under according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: clustering algorithm\nDescription: clustering algorithm is defined as a subclass of single generalization algorithm, indicating that it represents a specialized type of algorithm focused on grouping data points based on similarity or shared characteristics. By this axiom, every clustering algorithm is inherently a single generalization algorithm, inheriting its properties and constraints, but with a specific emphasis on unsupervised partitioning of data into clusters.\nAxiom: {'subClassOf': ['single generalization algorithm']}\nGenerated CQs:", "output": "Is every clustering algorithm encompassed by the category of single generalization algorithm? | Which specific algorithms fall under the single generalization algorithm category, including clustering algorithms? | To what higher-level algorithm categories does clustering algorithm belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CMA\nDescription: CMA is defined as a subclass of algorithm, meaning it inherits all characteristics of algorithms and represents a more specific type within this category. No further restrictions or disjointness axioms are specified, so CMA encompasses all properties of algorithm without any additional constraints.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "Which kinds of algorithms include CMA as a more specific example? | What broader classes does CMA fall under in the ontology? | Is CMA categorized as a subtype of algorithm? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: INOH entry format\nDescription: INOH entry format is defined as a subclass of Obsolete concept (EDAM), indicating it represents a deprecated concept within the ontology. It refers specifically to the format of an entry from the INOH signal transduction pathways database, describing the data structure or specification once used by this resource.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Does INOH entry format belong to the broader category of Obsolete concept (EDAM)? | To which higher-level groupings is INOH entry format subsumed? | What specific formats are classified under Obsolete concept (EDAM), including INOH entry format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sequence alignment\nDescription: sequence alignment is defined as a subclass of pattern discovery task. This means that every sequence alignment is considered a type of pattern discovery task, focusing on the process of arranging sequences (such as DNA, RNA, or protein sequences) to identify regions of similarity that may indicate functional, structural, or evolutionary relationships. This classification establishes sequence alignment as a specialized activity within the broader domain of discovering patterns in data.\nAxiom: {'subClassOf': ['pattern discovery task']}\nGenerated CQs:", "output": "What are the higher-level categories that encompass sequence alignment as a subclass? | Which specific tasks are subclasses of pattern discovery task, such as sequence alignment? | Is sequence alignment categorized under the broader class of pattern discovery task? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MRI\nDescription: MRI is defined as a subclass of Imaging and refers to techniques that use magnetic fields and radio waves to produce images, typically for investigating the anatomy and physiology of the human body. This classification ensures that MRI is recognized as a specific type of imaging modality, distinct in its mechanism and applications.\nAxiom: {'subClassOf': ['Imaging']}\nGenerated CQs:", "output": "What broader categories encompass MRI within the ontology? | Is MRI classified as a type of Imaging? | Which procedures fall under the category of Imaging, such as MRI? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ensembl ID ('Bos taurus')\nDescription: Ensembl ID ('Bos taurus') is defined as a subclass of Obsolete concept (EDAM), indicating that it is considered deprecated or outdated in the ontology context. This class represents an identifier assigned to an entry—such as an exon, gene, transcript, or protein—in the Ensembl 'core' database specific to the Bos taurus division.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which concepts are categorized as subclasses under Obsolete concept (EDAM), such as Ensembl ID ('Bos taurus')? | What are the broader classes that include Ensembl ID ('Bos taurus') as a member? | Does the Ensembl ID ('Bos taurus') belong to the set of Obsolete concepts (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: 1 or more\nDescription: 1 or more is defined as a subclass of Obsolete concept (EDAM). It represents the idea of \"one or more things.\" This class is considered obsolete within the ontology and is not intended for current use.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is 1 or more categorized as an instance of the Obsolete concept in EDAM? | What higher-level classifications encompass 1 or more in the context of EDAM? | Which concepts are designated as subclasses under the Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene ID (GeneDB Plasmodium falciparum)\nDescription: Gene ID (GeneDB Plasmodium falciparum) is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer in active use or superseded by other identifiers. It specifically represents a gene identifier assigned by the Plasmodium falciparum GeneDB database. This class captures identifiers unique to genes in this database, but should not be used for current annotation due to its obsolete status.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What other concepts, like Gene ID (GeneDB Plasmodium falciparum), are classified as subclasses of Obsolete concept (EDAM)? | Does Gene ID (GeneDB Plasmodium falciparum) fall under the general category of Obsolete concept (EDAM)? | Which higher-level groups include Gene ID (GeneDB Plasmodium falciparum) according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Position frequency matrix\nDescription: Position frequency matrix is defined as a subclass of Position-specific scoring matrix. It represents a profile, typically derived from a sequence alignment, structured as a simple matrix where each entry reflects the count of nucleotides or amino acids at each position. This formalization distinguishes Position frequency matrices by their use of raw residue counts per position, rather than scores or probabilities, within the broader category of position-specific scoring matrices.\nAxiom: {'subClassOf': ['Position-specific scoring matrix']}\nGenerated CQs:", "output": "What general matrix categories include Position frequency matrix as a conceptual member? | Which matrix types are classified beneath Position-specific scoring matrix, such as Position frequency matrix? | Does the Position frequency matrix fall under the broader grouping of Position-specific scoring matrix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Agilent Feature Extraction software version 7.5\nDescription: Agilent Feature Extraction software version 7.5 is defined as a subclass of Agilent Feature Extraction Software. This classification indicates that version 7.5 inherits all general characteristics of the broader software class while representing a specific version distinguished by its unique features or updates. No additional constraints, disjointness, or property restrictions are asserted in the current axiom.\nAxiom: {'subClassOf': ['Agilent Feature Extraction Software']}\nGenerated CQs:", "output": "Is Agilent Feature Extraction software version 7.5 classified under Agilent Feature Extraction Software? | Which specific versions or types are encompassed by Agilent Feature Extraction Software? | Which broader software categories does Agilent Feature Extraction software version 7.5 fall into? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Error\nDescription: Error is defined as a subclass of the obsolete concept category, indicating that it is considered deprecated within the ontology. It represents data pertaining to an error generated by a computer system or tool. This class is maintained for reference to legacy data representations but should not be used for modeling current or future concepts.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which concepts are more specific than Obsolete concept (EDAM), including Error? | Is Error categorized as an instance of the broader Obsolete concept (EDAM)? | To what higher-level concepts does Error belong within the EDAM classification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Annotation retrieval\nDescription: Annotation retrieval is a subclass of Obsolete concept (EDAM). This class is intended for tools or methods that retrieve existing annotations (or documentation), typically on database entities, rather than predicting or generating new annotations. The focus is on accessing pre-existing information, distinguishing it from annotation prediction methods.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What are the broader categories that Annotation retrieval is associated with? | Which concepts fall under the category of Obsolete concept (EDAM), such as Annotation retrieval? | Is Annotation retrieval classified as a narrower concept under Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Diffraction data reduction\nDescription: Diffraction data reduction is defined as a subclass of Diffraction data analysis. It involves the processing of diffraction data into a corrected, ordered, and simplified form, preparing the data for further interpretation or analysis. This class represents methods and procedures specifically focused on transforming raw diffraction measurements into structured datasets suitable for downstream applications.\nAxiom: {'subClassOf': ['Diffraction data analysis']}\nGenerated CQs:", "output": "Is Diffraction data analysis a broader category that encompasses Diffraction data reduction? | What are the parent categories associated with Diffraction data reduction? | Which specific processes are classified under Diffraction data analysis, such as Diffraction data reduction? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: lma\nDescription: lma is defined as a subclass of Binary format. This classification indicates that every instance of lma is, by definition, a type of Binary format, inheriting all its properties and constraints. No further characteristics or restrictions are specified in the given axiom.\nAxiom: {'subClassOf': ['Binary format']}\nGenerated CQs:", "output": "Is lma categorized under Binary format? | Which formats are more specific than Binary format, such as lma? | What broader classifications encompass lma as a type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Genome identifier\nDescription: Genome identifier is defined as a subclass of Identifier (typed), representing an identifier specifically assigned to a particular genome. This class formalizes genome identifiers as a distinct type of typed identifiers, ensuring that any instance classified under Genome identifier must be used to uniquely denote a genome within biological datasets.\nAxiom: {'subClassOf': ['Identifier (typed)']}\nGenerated CQs:", "output": "Is Genome identifier regarded as a more specific form of Identifier? | What broader classes does Genome identifier inherit characteristics from, given its classification? | Which types of Identifier encompass Genome identifier as a specialized instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: REST service\nDescription: REST service is defined as a subclass of web service. This means every REST service is a type of web service, inheriting all its general characteristics. No additional property restrictions or disjointness axioms are specified, so a REST service is formally distinguished only by its placement under the broader category of web service.\nAxiom: {'subClassOf': ['web service']}\nGenerated CQs:", "output": "What broader categories does REST service fall under according to the ontology? | Which web service subclasses include REST service within their classification? | Is REST service classified as a type of web service? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: EMBOSS graph\nDescription: EMBOSS graph is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer in active use or recommended for use. Members of this class refer specifically to images of graphs generated by the EMBOSS suite, as stated in its definition.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is EMBOSS graph classified under the broader group of Obsolete concept (EDAM)? | Which concepts are categorized as specializations of Obsolete concept (EDAM), such as EMBOSS graph? | What higher-level classes include EMBOSS graph according to the ontology structure? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein features report (membrane regions)\nDescription: Protein features report (membrane regions) is a subclass of Obsolete concept (EDAM). It refers to topics concerning trans- or intra-membrane regions of a protein, typically describing physicochemical properties of secondary structure elements. As an obsolete concept, it indicates that this classification is no longer in current use or has been replaced in the EDAM ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which specific concepts are considered subtypes of Obsolete concept (EDAM), such as Protein features report (membrane regions)? | Are all Protein features report (membrane regions) instances categorized under Obsolete concept (EDAM)? | To which broader classifications does Protein features report (membrane regions) pertain within EDAM? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RNAi report\nDescription: RNAi report is defined as a subclass of Obsolete concept (EDAM). This class represents topics concerning RNAi (RNA interference) experiments. Its classification under \"Obsolete concept\" indicates that this topic is no longer in active use within the ontology, although it historically referred to documenting or reporting on RNAi experimental data or findings.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is RNAi report categorized under the broader class of Obsolete concept (EDAM)? | What are the more general categories to which RNAi report belongs? | Which concepts are specific instances or subtypes of Obsolete concept (EDAM), including RNAi report? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence retrieval\nDescription: Sequence retrieval is defined as a subclass of Obsolete concept (EDAM), indicating that it represents a retired or deprecated concept within the EDAM ontology. This class encompasses methods for directly querying a sequence data resource—typically a sequence database—and retrieving sequences and/or their annotations. Direct retrieval methods, such as dbfetch, are included, but methods that perform calculations or further analysis on the sequences are excluded from this category.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Sequence retrieval categorized under the broader class of Obsolete concept (EDAM)? | What specific concepts are designated as subtypes of Obsolete concept (EDAM), including Sequence retrieval? | Which higher-level groupings encompass Sequence retrieval within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ligand identifier\nDescription: Ligand identifier is a subclass of Obsolete concept (EDAM), meaning it is considered outdated or superseded within the ontology. It is defined as a code word used to represent a ligand, such as those assigned in a PDB (Protein Data Bank) file. This classification and definition clarify that the concept was primarily employed to specify ligand codes in structural data resources but is no longer actively used.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which higher-level concepts encompass Ligand identifier within the EDAM ontology? | Is Ligand identifier currently categorized as an instance of Obsolete concept (EDAM)? | What identifiers are classified as obsolete concepts according to EDAM? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Pfam clan ID\nDescription: Pfam clan ID is defined as a subclass of Protein family accession, representing the accession number associated specifically with a Pfam clan. This class captures unique identifiers used for referencing Pfam clans within the broader context of protein family accessions.\nAxiom: {'subClassOf': ['Protein family accession']}\nGenerated CQs:", "output": "What higher-level classifications does Pfam clan ID belong to within protein family ontologies? | Is every Pfam clan ID classified under the broader category of Protein family accession? | Which specific identifiers fall under the class Protein family accession, such as Pfam clan ID? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DragonDB author identifier\nDescription: DragonDB author identifier is defined as a subclass of Author ID, representing an identifier specifically assigned to authors within the DragonDB database. This class ensures that any instance identified as a DragonDB author identifier is formally recognized as a type of Author ID, uniquely referencing author entities in the DragonDB resource.\nAxiom: {'subClassOf': ['Author ID']}\nGenerated CQs:", "output": "Which identifier types are classified under Author ID, including DragonDB author identifier? | What broader categories encompass DragonDB author identifier? | Is DragonDB author identifier a more specific form of Author ID? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GenePix\nDescription: GenePix is defined as a subclass of Gene Pix. This indicates that any individual classified as GenePix must also meet all criteria associated with Gene Pix. No additional property restrictions, equivalence, or disjointness axioms are specified, thus GenePix inherits all characteristics of its superclass.\nAxiom: {'subClassOf': ['Gene Pix']}\nGenerated CQs:", "output": "Is Gene Pix a generalization of GenePix? | Which entities are more specific than Gene Pix, such as GenePix? | To what broader classes does GenePix belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Carbohydrates\nDescription: Carbohydrates is a subclass within the broader domain of Biochemistry. This class focuses on topics related to carbohydrates, typically encompassing their structural information. It formalizes the study and categorization of carbohydrates as chemical compounds within biochemistry, emphasizing their molecular structure and relevance in biological systems.\nAxiom: {'subClassOf': ['Biochemistry']}\nGenerated CQs:", "output": "Are Carbohydrates categorized under the broader domain of Biochemistry? | What higher-level classifications include Carbohydrates within their scope? | Which specific entities are classified as subtypes of Biochemistry, such as Carbohydrates? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene features (SECIS element)\nDescription: Gene features (SECIS element) is defined as a subclass of Obsolete concept (EDAM), indicating that this concept is no longer considered current or in active use. It is described as a report on the selenocysteine insertion sequence (SECIS) element in a DNA sequence, which pertains to the identification or annotation of SECIS elements involved in the incorporation of selenocysteine during translation. The obsolete status suggests that this class has been deprecated in favor of more up-to-date concepts.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "To which broader EDAM categories does the SECIS element gene feature belong? | Which gene features are defined as subclasses of the obsolete concept (EDAM), such as the SECIS element? | Is the SECIS element gene feature categorized under the obsolete concept class from EDAM? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein folding report\nDescription: Protein folding report is defined as a subclass of Obsolete concept (EDAM), indicating that this concept is no longer in active use. It refers to a report detailing the analysis or modeling of protein folding properties, folding pathways, and identifying residues or sites key to protein folding, such as nucleation or stabilization centers. This class encompasses documentation surrounding investigations into the mechanisms and factors governing protein folding.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which concepts fall under the category of Obsolete concept (EDAM), specifically including Protein folding report? | Is Protein folding report classified as a kind of Obsolete concept (EDAM)? | What broader conceptual group does Protein folding report belong to according to the taxonomy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Immunology\nDescription: Immunology is a subclass of Biomedical science, focusing on the application of information technology to the study of immunological processes, including immunological genes, proteins, peptide ligands, antigens, and related topics. This class captures the intersection of informatics and immunology within the broader context of biomedical sciences.\nAxiom: {'subClassOf': ['Biomedical science']}\nGenerated CQs:", "output": "What are the specialized fields that fall under Biomedical science, such as Immunology? | Is Immunology classified under the broader category of Biomedical science? | Which overarching scientific domains encompass Immunology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DiProDB ID\nDescription: DiProDB ID is defined as a subclass of Oligonucleotide ID, representing an identifier specifically assigned to a dinucleotide property within the DiProDB database. This class is intended to uniquely reference dinucleotide properties catalogued in DiProDB, ensuring structured identification within oligonucleotide-related datasets.\nAxiom: {'subClassOf': ['Oligonucleotide ID']}\nGenerated CQs:", "output": "Which identifiers are considered specific forms of Oligonucleotide ID, including DiProDB ID? | What more general identifier categories encompass DiProDB ID? | Is DiProDB ID classified under the broader category of Oligonucleotide ID? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Wilcoxon\nDescription: Wilcoxon is defined as a subclass of algorithm, indicating that all instances of Wilcoxon are considered algorithms. No further property constraints or disjointness are specified, so its principal characteristic is its classification under the broader category of algorithm.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "Which algorithms encompass Wilcoxon as a more specialized form? | What broader categories does Wilcoxon, as a subclass, fall under? | Is Wilcoxon classified as a specific kind of algorithm? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Neurobiology\nDescription: Neurobiology is a subclass of Biomedical science, focused on the study of the nervous system and brain, including their anatomy, physiology, and functional aspects. This class encompasses research and knowledge relating to how nervous tissue develops, operates, and influences behavior and health.\nAxiom: {'subClassOf': ['Biomedical science']}\nGenerated CQs:", "output": "What disciplines are categorized under Biomedical science, specifically including Neurobiology? | Which higher-level scientific categories encompass Neurobiology? | Is Neurobiology classified as a subset of Biomedical science? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Pascal\nDescription: Pascal is defined as a subclass of programming language. This specifies that every instance of Pascal is inherently a programming language, inheriting all general characteristics and constraints of programming languages. No additional property restrictions or distinctions are currently asserted for this class.\nAxiom: {'subClassOf': ['programming language']}\nGenerated CQs:", "output": "What broader classes include Pascal as a member? | Which programming languages have Pascal as a specific example? | Is Pascal categorized as a type of programming language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence cutting\nDescription: Sequence cutting is defined as a subclass of Sequence editing, representing an operation that involves cutting or removing characters or a specific region from a molecular sequence. This class specifically captures the molecular sequence alteration process where a segment is excised, aligning with its role as a specialized form of sequence editing.\nAxiom: {'subClassOf': ['Sequence editing']}\nGenerated CQs:", "output": "Which higher-level classes contain Sequence cutting as a subclass? | What specific subtypes are encompassed within Sequence editing, including Sequence cutting? | Does Sequence cutting fall under the general category of Sequence editing? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Physicochemical property data processing\nDescription: Physicochemical property data processing is defined as a subclass of Obsolete concept (EDAM), representing processes that involve reading and/or writing data related to the physicochemical properties of molecules. This class is considered obsolete, meaning it is no longer recommended for use in current ontological frameworks.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "To which higher-level categories does Physicochemical property data processing belong? | Is Physicochemical property data processing classified as a type of Obsolete concept (EDAM)? | Which specific concepts are categorized under Obsolete concept (EDAM), including Physicochemical property data processing? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GenePix Pro [Axon Instruments]\nDescription: GenePix Pro [Axon Instruments] is defined as a subclass of GenePix Pro. This indicates that it inherits all characteristics and constraints of GenePix Pro, but may also include additional specific features or distinctions related to the Axon Instruments variant. No further disjointness or property restrictions are specified for this class.\nAxiom: {'subClassOf': ['GenePix Pro']}\nGenerated CQs:", "output": "Is GenePix Pro [Axon Instruments] classified under the broader category of GenePix Pro? | What higher-level categories include GenePix Pro [Axon Instruments] as a member? | Which software tools are specialized types of GenePix Pro, such as GenePix Pro [Axon Instruments]? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Locus ID (MMP)\nDescription: Locus ID (MMP) is defined as a subclass of Locus ID, representing identifiers specifically assigned to loci within the Maize Mapping Project. These identifiers uniquely reference genetic loci mapped in the context of this project, ensuring precise identification and integration with broader genetic resources.\nAxiom: {'subClassOf': ['Locus ID']}\nGenerated CQs:", "output": "What distinguishes Locus ID (MMP) as a specialized form of Locus ID? | Which instances are classified under Locus ID (MMP) within the overall set of Locus ID? | What hierarchical categories encompass Locus ID (MMP)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Reaction ID (SABIO-RK)\nDescription: Reaction ID (SABIO-RK) is defined as a subclass of Reaction ID and functions as an identifier for biological reactions specifically sourced from the SABIO-RK reactions database. This class ensures that any instance categorized as Reaction ID (SABIO-RK) serves to uniquely identify a biological reaction entry within the SABIO-RK database.\nAxiom: {'subClassOf': ['Reaction ID']}\nGenerated CQs:", "output": "What broader categories can Reaction ID (SABIO-RK) be classified under? | Does Reaction ID (SABIO-RK) belong to the more general class of Reaction ID? | Which specific types of Reaction ID encompass Reaction ID (SABIO-RK)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: outline document format\nDescription: outline document format is defined as a subclass of data format specification. This means it represents a specific type of data format specification focused on encoding or structuring outline documents, distinguishing it from other forms of data format specifications.\nAxiom: {'subClassOf': ['data format specification']}\nGenerated CQs:", "output": "Which types are encompassed by data format specification, such as outline document format? | Is outline document format classified under data format specification? | What higher-level categories does outline document format fall within? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Local-pooled-error\nDescription: Local-pooled-error is defined as a subclass of algorithm, indicating that it represents a specific type of algorithm. No further restrictions or distinguishing axioms are specified, so any instance of local-pooled-error must also be an instance of algorithm.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "What are the specific types of algorithm that include Local-pooled-error? | Does Local-pooled-error fall under the general category of algorithm? | To which broader classes does Local-pooled-error belong in the ontology hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene ID (JCVI)\nDescription: Gene ID (JCVI) is a subclass of Gene ID and represents a unique identifier assigned to a gene by the J. Craig Venter Institute (JCVI). This ensures distinct identification and referencing of genes specifically annotated by JCVI within biological databases.\nAxiom: {'subClassOf': ['Gene ID']}\nGenerated CQs:", "output": "Does Gene ID (JCVI) represent a specialized form of Gene ID? | What specific identifiers are encompassed by the broader category Gene ID, such as Gene ID (JCVI)? | To which general identifier classes does Gene ID (JCVI) belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Nucleic acid property\nDescription: Nucleic acid property is a subclass of Molecular property, representing reports that primarily describe intrinsic physical, chemical, or other properties of nucleic acid molecules, rather than their position in a sequence. This class encompasses broad data types, typically based on the analysis of nucleic acid sequence or structural data, and serves as a placeholder for more specific nucleic acid property types.\nAxiom: {'subClassOf': ['Molecular property']}\nGenerated CQs:", "output": "What specific properties are categorized under Molecular property, such as Nucleic acid property? | Does every Nucleic acid property fall under the broader group of Molecular properties? | Which higher-level classes encompass the Nucleic acid property category? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Secondary structure processing\nDescription: Secondary structure processing is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer in active use within the EDAM ontology. This class refers to processes involving the reading and/or writing of molecular secondary structure, encompassing the handling or manipulation of such structural information.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which concepts are defined as subclasses of Obsolete concept (EDAM)? | To what higher-level groupings does Secondary structure processing belong? | Is Secondary structure processing categorized under Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Affymetrix probe sets library file\nDescription: Affymetrix probe sets library file is defined as a subclass of Obsolete concept (EDAM). This class refers to an Affymetrix library file containing information about which probes belong to which probe set. As it is classified under obsolete concepts, it is considered deprecated within the ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What broader conceptual groups include Affymetrix probe sets library file? | Is Affymetrix probe sets library file classified as an instance of the broader Obsolete concept (EDAM)? | Which specific concepts are categorized under Obsolete concept (EDAM), such as Affymetrix probe sets library file? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence-profile alignment (Domainatrix signature)\nDescription: Sequence-profile alignment (Domainatrix signature) is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer in active use or recommended for current applications. This class represents the alignment of molecular sequences to a Domainatrix signature, where the signature itself embodies a sequence alignment. This concept is retained for historical or reference purposes within the ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Sequence-profile alignment (Domainatrix signature) classified under the broader category of Obsolete concept (EDAM)? | What are the more specific concepts included within Obsolete concept (EDAM), such as Sequence-profile alignment (Domainatrix signature)? | Which higher-level categories does Sequence-profile alignment (Domainatrix signature) fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Primer3 internal oligo mishybridizing library\nDescription: Primer3 internal oligo mishybridizing library is a subclass of Obsolete concept (EDAM). It represents a library of nucleotide sequences specifically designated to be avoided during hybridization events involving internal oligos. The purpose of this library is to prevent internal oligos from hybridizing to these sequences, rather than initiating priming from them. The library data is provided in a restricted FASTA format. As a member of the \"Obsolete concept (EDAM)\" category, this concept is no longer recommended for current use.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What specialized concepts are subsumed by Obsolete concept (EDAM), including Primer3 internal oligo mishybridizing library? | Does Primer3 internal oligo mishybridizing library fall under the general classification of Obsolete concept (EDAM)? | Which broader classes include Primer3 internal oligo mishybridizing library as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Calculation\nDescription: Calculation is defined as a subclass of Analysis. This class encompasses mathematical determinations of the value of something, typically a property of a molecule. Any individual of this class represents a process or act in which a quantitative or qualitative property—especially of a molecule—is derived through mathematical means, reflecting its analytical role within the ontology.\nAxiom: {'subClassOf': ['Analysis']}\nGenerated CQs:", "output": "Is Calculation categorized as a specific type of Analysis? | Which broader classes does Calculation belong to within the ontology? | What specialized concepts fall under the broader class of Analysis, such as Calculation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Strain data format\nDescription: Strain data format is defined as a subclass of the obsolete concept (EDAM), indicating that it is no longer actively maintained or recommended for use. It refers to the format used for reports on organism strain data or cell lines. This classification suggests that while historically relevant, this data format is now superseded or discouraged in current practices.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What more general categories include Strain data format within the ontology? | Is Strain data format classified as a type of Obsolete concept (EDAM)? | Which data formats fall under the broader category of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Distribution clause\nDescription: Distribution clause is defined as a subclass of license clause, indicating that it represents a specific type or aspect of licensing terms. Any individual of Distribution clause inherently possesses all characteristics of a license clause, but with additional specialization relevant to distribution-related conditions within a license.\nAxiom: {'subClassOf': ['license clause']}\nGenerated CQs:", "output": "Is a distribution clause categorized as a type of license clause? | What broader classes encompass a distribution clause, such as license clause? | Which specific clauses fall under the classification of license clause, including distribution clause? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein sites and features\nDescription: Protein sites and features is defined as a subclass of the obsolete concept (EDAM), indicating that this class is deprecated and should not be used for new annotation. It refers to topics concerning the detection, identification, and analysis of positional features in proteins, such as functional sites. This class is preserved for historic or compatibility purposes rather than active use in current ontology models.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What broader ontology classes encompass protein sites and features in EDAM? | Which specific subclasses fall within the obsolete concept (EDAM), including protein sites and features? | Are all protein sites and features categorized under the obsolete concept in EDAM? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene ID (MIPS Maize)\nDescription: Gene ID (MIPS Maize) is defined as an identifier for genetic elements specific to the MIPS Maize database. This class is a subclass of Obsolete concept (EDAM), indicating that it is no longer recommended for use in contemporary ontological modeling or data annotation. Its usage is primarily historical or for legacy data referencing within the scope of MIPS Maize genetic element identification.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What are the parent classes associated with Gene ID (MIPS Maize)? | Which concepts are directly classified as Obsolete concept (EDAM) and include Gene ID (MIPS Maize)? | Does Gene ID (MIPS Maize) fall under the broader classification of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ensembl ID ('Monodelphis domestica')\nDescription: Ensembl ID ('Monodelphis domestica') is defined as a subclass of Obsolete concept (EDAM). This class represents identifiers for entries such as exons, genes, transcripts, or proteins from the Ensembl 'core' database specific to the 'Monodelphis domestica' division. The obsolete status indicates that this identifier or concept is no longer recommended for current use.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What broader EDAM concepts encompass the Ensembl ID for Monodelphis domestica? | Is Monodelphis domestica Ensembl ID classified under the category of Obsolete concept in EDAM? | Which Ensembl IDs are designated as subclasses of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Free\nDescription: Free is defined as a subclass of Purchase cost, representing instances where the cost of software is zero. This class exclusively addresses the price aspect of software and does not pertain to the broader definition of \"free software\" as established by the GNU Project, which emphasizes user freedoms and community rights. The scope of this class is limited solely to monetary cost, clarifying that \"free\" in this context means no purchase payment is required for the software.\nAxiom: {'subClassOf': ['Purchase cost']}\nGenerated CQs:", "output": "Under what broader purchase cost categories does Free fall? | Is Free regarded as a specialized form of Purchase cost? | Which specific purchase costs include Free as an instance or subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Alignment format (XML)\nDescription: Alignment format (XML) is a subclass of Alignment format, specifically representing the XML-based standard used for encoding molecular sequence alignment information. This class formalizes alignment data expressed in XML format, ensuring structured, standardized representation and exchange within bioinformatics workflows.\nAxiom: {'subClassOf': ['Alignment format']}\nGenerated CQs:", "output": "What are the direct subclasses found under Alignment format, including Alignment format (XML)? | Is Alignment format (XML) categorized as a kind of Alignment format? | Which higher-level classification groups include Alignment format (XML)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Virus annotation (taxonomy)\nDescription: Virus annotation (taxonomy) is defined as a subclass of Obsolete concept (EDAM), indicating that it is considered outdated within the context of the ontology. It is described as an informative report on the taxonomy of a specific virus, providing taxonomic classification details relevant to viral species.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What broader classifications encompass Virus annotation (taxonomy) within the ontology? | Which concepts are specialized forms of Obsolete concept (EDAM), such as Virus annotation (taxonomy)? | Is Virus annotation (taxonomy) categorized under Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Databank\nDescription: Databank is defined as a subclass of the obsolete concept (EDAM), indicating that it represents a concept no longer in active use. It is described as a flat-file (textual) data archive, typically meaning a structured collection of data stored in plain text format, rather than in a relational database or other advanced data management system. This class formalizes the notion of simple, text-based data repositories that have since been superseded by more modern data management paradigms.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What more general concepts encompass Databank within the ontology? | Which concepts are categorized under Obsolete concept (EDAM), including Databank? | Is Databank classified as a type of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Mass spectrometry experiment\nDescription: Mass spectrometry experiment is a subclass of Obsolete concept (EDAM), indicating that it represents a topic or category that is now considered outdated within the EDAM framework. It is defined as a topic concerning mass spectrometry experiments, relating to experimental procedures or studies utilizing mass spectrometry techniques.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What higher-level concepts encompass Mass spectrometry experiment in this ontology? | Which specific experimental types fall within the category of Obsolete concept (EDAM)? | Is Mass spectrometry experiment classified under the broader group of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence composition calculation (nucleic acid)\nDescription: Sequence composition calculation (nucleic acid) is defined as a subclass of Obsolete concept (EDAM). It refers to methods or processes used to calculate the base frequency or word (oligonucleotide) composition within a nucleotide sequence. This concept is considered obsolete in the EDAM ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What broader category does Sequence composition calculation (nucleic acid) belong to within the ontology? | Which specific concepts fall under the Obsolete concept (EDAM) category, including Sequence composition calculation (nucleic acid)? | Is Sequence composition calculation (nucleic acid) categorized under Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RefSeq accession\nDescription: RefSeq accession is defined as a subclass of Sequence accession (hybrid) and represents an accession number uniquely identifying a database entry in the RefSeq database. This class ensures traceability and standard reference across biological sequence data as captured within RefSeq records.\nAxiom: {'subClassOf': ['Sequence accession (hybrid)']}\nGenerated CQs:", "output": "To what higher-level class does RefSeq accession belong within the sequence accession hierarchy? | Which accessions are recognized as more specific types within Sequence accession, including RefSeq accession? | Does the RefSeq accession category fall under the broader group of Sequence accession? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Secondary structure alignment\nDescription: Secondary structure alignment is defined as a subclass of Alignment. It refers specifically to the alignment of the one-dimensional representations of the secondary structure elements of two or more molecules. This class restricts members to those alignments that are based on comparing features such as alpha helices and beta strands, rather than primary sequence or three-dimensional structure.\nAxiom: {'subClassOf': ['Alignment']}\nGenerated CQs:", "output": "Which types of Alignment include Secondary structure alignment as a more specialized form? | Is Secondary structure alignment categorized under the broader concept of Alignment? | What general classifications encompass Secondary structure alignment as a subcategory? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Genotype and phenotype data\nDescription: Genotype and phenotype data is classified as a subclass of the Obsolete concept (EDAM), indicating that it is deprecated in the ontology. The class refers to data pertaining to a particular genotype, phenotype, or the relationship between a genotype and phenotype. This classification clarifies that any instance must represent information about genetic makeup, observable traits, or their associations, but the use of this class is discouraged in favor of more current concepts.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Does Genotype and phenotype data fall under the broader classification of Obsolete concept (EDAM)? | What are the broader conceptual categories to which Genotype and phenotype data is assigned in this context? | Which specific data types are included as subclasses beneath Obsolete concept (EDAM), such as Genotype and phenotype data? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence type\nDescription: Sequence type is a subclass of Obsolete concept (EDAM). It refers to a label (text token) describing a type of molecular sequence, which may reflect either the molecule (such as protein, nucleic acid, etc.) or characteristics of the sequence itself (such as being gapped or ambiguous). This concept is retained for reference but is categorized as obsolete within the EDAM ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Sequence type categorized under the broader class of Obsolete concept (EDAM)? | What higher-level classes encompass Sequence type within the ontology? | Which subclasses fall under Obsolete concept (EDAM), including Sequence type? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: usage non commercial only\nDescription: The class usage non commercial only is defined as a subclass of Usage restricted, indicating that its members are subject to usage limitations. Specifically, individuals in this class are permitted to use the associated resource only for non-commercial purposes, excluding any commercial exploitation or profit-making activities. This formalization ensures that any resource labeled with usage non commercial only inherits all general usage restrictions while explicitly prohibiting commercial use.\nAxiom: {'subClassOf': ['Usage restricted']}\nGenerated CQs:", "output": "Which overarching restrictions encompass usage non commercial only? | Is usage non commercial only classified under the broader category of Usage restricted? | What types fall under Usage restricted, including usage non commercial only? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NCBI gene report format\nDescription: NCBI gene report format is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer actively used or maintained. It refers to the entry (gene) format used by the NCBI database. Members of this class pertain to the data structure or template formerly applied for representing gene records in NCBI, but its classification as obsolete implies supersession by alternative formats or standards.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is NCBI gene report format classified under the broader category of Obsolete concept (EDAM)? | Which report formats are subclasses of Obsolete concept (EDAM), including NCBI gene report format? | To which obsolete conceptual categories does NCBI gene report format belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cardiology\nDescription: Cardiology is defined as a subclass of Medicine concerned with the study, diagnosis, and treatment of diseases and abnormalities of the heart and circulatory system. This class represents a medical specialty focused on cardiovascular health within the broader domain of medicine.\nAxiom: {'subClassOf': ['Medicine']}\nGenerated CQs:", "output": "Does Cardiology fall under the broader discipline of Medicine? | Under which major domains is Cardiology classified? | Which academic fields are more specialized than Medicine, such as Cardiology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TIGRFam entry format\nDescription: TIGRFam entry format is defined as a subclass of Obsolete concept (EDAM). It refers to the entry format used in the TIGRFam protein secondary database. This class is considered obsolete, indicating that it is no longer in active use or has been replaced in the relevant ontology or database context.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is TIGRFam entry format classified under the broader concept of Obsolete concept (EDAM)? | Which higher-level categories encompass TIGRFam entry format within the ontology? | What formats are recognized as more specific instances of Obsolete concept (EDAM), such as TIGRFam entry format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Systems medicine\nDescription: Systems medicine is formally defined as a subclass of Medicine. It is an interdisciplinary field focused on understanding the dynamic systems of the human body as an integrated whole, incorporating biochemical, physiological, and environmental interactions essential to sustaining life. This classification emphasizes its foundational connection to Medicine while highlighting its systems-based, integrative approach.\nAxiom: {'subClassOf': ['Medicine']}\nGenerated CQs:", "output": "What higher-level categories include Systems medicine within their scope? | Does Systems medicine fall under the broader classification of Medicine? | Which subfields are encompassed by Medicine, including Systems medicine? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene name (ASPGD)\nDescription: Gene name (ASPGD) is defined as a subclass of Obsolete concept (EDAM), indicating it represents an outdated or retired concept within the ontology. It specifically refers to the name of a gene recorded in the Aspergillus Genome Database.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Can Gene name (ASPGD) be classified under the broader category of Obsolete concept (EDAM)? | What are the direct superclasses of Gene name (ASPGD)? | Which subclasses fall under Obsolete concept (EDAM), and does Gene name (ASPGD) appear among them? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: averaging\nDescription: averaging is defined as a subclass of information processing. This means that averaging is considered a specific type of information processing activity. Any instance of averaging inherits all characteristics of information processing, but is more specifically concerned with the methods or processes by which multiple values are combined to produce a representative value.\nAxiom: {'subClassOf': ['information processing']}\nGenerated CQs:", "output": "Which subcategories fall within information processing, particularly including averaging? | Is averaging classified under the broader category of information processing? | What higher-level concepts encompass averaging within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein folding, stability and design\nDescription: Protein folding, stability and design is a subclass of Protein structure analysis. It concerns the study of protein stability, the folding of proteins in three-dimensional space, and the relationships between protein sequence, structure, and function. This class includes topics such as the analysis of inter-atomic or inter-residue interactions within protein structures, investigation of the effects of mutations on protein stability or function, and the rational design of proteins with specific properties, often accomplished by introducing targeted changes to existing proteins (e.g., via site-directed mutagenesis).\nAxiom: {'subClassOf': ['Protein structure analysis']}\nGenerated CQs:", "output": "Which specialized topics fall under Protein structure analysis, such as Protein folding, stability and design? | Is Protein structure analysis a broader category that encompasses Protein folding, stability and design? | What higher-level classes does Protein folding, stability and design belong to within the protein research domain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Microbiology\nDescription: Microbiology is defined as a subclass of biomedical science, focusing on the biology of microorganisms. This class encompasses scientific study and research related to microorganisms, such as bacteria, viruses, fungi, and protozoa, within the broader context of biomedical sciences.\nAxiom: {'subClassOf': ['Biomedical science']}\nGenerated CQs:", "output": "Is Microbiology categorized under the broader field of Biomedical science? | Which specialized disciplines fall under Biomedical science, including Microbiology? | Under which parent scientific domains is Microbiology classified? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Amino acid index (hydropathy)\nDescription: Amino acid index (hydropathy) is a subclass of Amino acid index that refers to hydrophobic, hydrophilic, or charge properties of amino acids. Members of this class specifically characterize amino acids based on their tendency to interact with water or carry a charge, reflecting fundamental chemical and physical attributes important for protein structure and function.\nAxiom: {'subClassOf': ['Amino acid index']}\nGenerated CQs:", "output": "Which specific indices are covered under the broader category of Amino acid index, including hydropathy? | To what broader index classes does Amino acid index (hydropathy) pertain? | Is Amino acid index (hydropathy) classified as a type of Amino acid index? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylogenetic tree generation (maximum likelihood and Bayesian methods)\nDescription: Phylogenetic tree generation (maximum likelihood and Bayesian methods) is a subclass of Phylogenetic tree generation (method centric). This class encompasses computational approaches for constructing phylogenetic trees by relating sequence data to hypothetical tree topologies through models of sequence evolution. Specifically, maximum likelihood methods identify the tree topology that maximizes the likelihood function based on the given data and model, while Bayesian analysis estimates the probability distribution of possible trees (including branch lengths and topology), often employing Monte Carlo algorithms for inference.\nAxiom: {'subClassOf': ['Phylogenetic tree generation (method centric)']}\nGenerated CQs:", "output": "Which specialized approaches belong to the category of method-centric phylogenetic tree generation, such as maximum likelihood and Bayesian methods? | Is phylogenetic tree generation using maximum likelihood and Bayesian methods classified under method-centric phylogenetic tree generation? | What are the broader categories that encompass phylogenetic tree generation with maximum likelihood and Bayesian methods? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Secondary structure alignment generation\nDescription: Secondary structure alignment generation is classified as a subclass of Obsolete concept (EDAM), indicating it is no longer in active use within the ontology. This class refers to the process of aligning molecular secondary structures represented as 1D strings, but its deprecated status suggests newer or alternative methods are now preferred.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which overarching categories encompass Secondary structure alignment generation? | Is Obsolete concept (EDAM) a direct superclass of Secondary structure alignment generation? | What specialized processes are classified under Obsolete concept (EDAM), such as Secondary structure alignment generation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ILLUMINA data\nDescription: ILLUMINA data is defined as a subclass of data, meaning it represents a specific type or category of data within the broader class of data. There are no additional property restrictions or disjointness axioms specified, so ILLUMINA data inherits all characteristics of the general data class, while being distinguished as data generated by ILLUMINA technologies or platforms.\nAxiom: {'subClassOf': ['data']}\nGenerated CQs:", "output": "Is ILLUMINA data classified as a specific type of data? | Which overarching types does ILLUMINA data inherit from? | What are the specialized categories that fall under data, such as ILLUMINA data? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gap opening penalty\nDescription: Gap opening penalty is defined as a subclass of Gap penalty. It specifically refers to a penalty applied for opening a gap in an alignment, as part of sequence alignment scoring schemes. This class represents a particular type of gap penalty, distinguishing the cost incurred at the initiation of a gap from other potential gap-related penalties.\nAxiom: {'subClassOf': ['Gap penalty']}\nGenerated CQs:", "output": "Is Gap penalty a broader classification that includes Gap opening penalty? | What are the higher-level categories that encompass Gap opening penalty? | Which specific penalty types fall under the Gap penalty category, such as Gap opening penalty? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Amino acid identifier format\nDescription: Amino acid identifier format is a subclass of Obsolete concept (EDAM), indicating it is no longer in active use. It is defined as a text format used to represent amino acid residues, specifying how amino acids are notated or encoded in text-based data representations.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which formats are specified as subclasses of Obsolete concept (EDAM), including Amino acid identifier format? | Does Amino acid identifier format fall under the category of Obsolete concept (EDAM)? | What are the parent classes of Amino acid identifier format in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MHC Class II epitopes report\nDescription: MHC Class II epitopes report is defined as a subclass of Obsolete concept (EDAM). It represents a report on predicted epitopes that bind to MHC class II molecules, but is currently considered obsolete within the ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "For which more general concept in EDAM is MHC Class II epitopes report a specific subtype? | Is MHC Class II epitopes report categorized under the obsolete concepts defined in EDAM? | Which obsolete concepts in EDAM have MHC Class II epitopes report as a specific instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Amino acid index (van der Waals radii)\nDescription: Amino acid index (van der Waals radii) is a subclass of Amino acid index that represents data on the van der Waals radii of atoms in different amino acid residues. This class is used to characterize the steric properties of amino acids by capturing the effective size of their constituent atoms, as reflected by van der Waals radii.\nAxiom: {'subClassOf': ['Amino acid index']}\nGenerated CQs:", "output": "Which specialized indices are categorized under Amino acid index, such as Amino acid index (van der Waals radii)? | What general classes is Amino acid index (van der Waals radii) a member of? | Does Amino acid index (van der Waals radii) fall under the broader class of Amino acid index? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence assembly report\nDescription: Sequence assembly report is defined as a subclass of Sequence alignment report, representing an informative report about a DNA sequence assembly. This report includes an overall quality assessment of the assembly and provides summary statistics such as counts, average length, and number of bases related to reads, matches, non-matches, contigs, and reads in pairs.\nAxiom: {'subClassOf': ['Sequence alignment report']}\nGenerated CQs:", "output": "What higher-level categories does Sequence assembly report belong to? | Does the Sequence assembly report fall under the broader category of Sequence alignment report? | Which specific reports are classified as subclasses of Sequence alignment report? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Nucleic acid features report (microsatellite)\nDescription: Nucleic acid features report (microsatellite) is a subclass of Obsolete concept (EDAM), indicating that it represents a topic or conceptual category that is no longer in active use within the EDAM ontology. It focuses specifically on the subject of microsatellite polymorphism in a DNA sequence, describing topics related to the identification and analysis of repeated DNA sequences (microsatellites) and their variability.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which specific concepts are classified as subclasses of Obsolete concept (EDAM), such as Nucleic acid features report (microsatellite)? | What general categories encompass Nucleic acid features report (microsatellite) within the ontology? | Does Nucleic acid features report (microsatellite) fall under the broader category of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: EPS\nDescription: EPS is defined as a subclass of Textual format and refers specifically to Encapsulated PostScript format. This indicates that EPS files are considered a type of textual file format, characterized by their structure as encapsulated PostScript documents typically used for graphics and document exchange.\nAxiom: {'subClassOf': ['Textual format']}\nGenerated CQs:", "output": "Is EPS categorized under the general class of Textual format? | Which formats are specialized forms of Textual format, with EPS as an example? | In what broader format classifications does EPS reside? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Date\nDescription: Date is defined as a subclass of \"Obsolete concept (EDAM)\", indicating it is considered outdated in the current ontology context. It is described as a temporal date, referring to a specific point or period in time. This classification signals that although the concept refers to dates or points in time, its use is deprecated within the EDAM ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Date classified as a kind of Obsolete concept in the EDAM ontology? | What broader conceptual categories does Date fall under within the EDAM ontology? | Which concepts are more specific than Obsolete concept (EDAM), specifically including Date? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ensembl ID ('Gasterosteus aculeatus')\nDescription: Ensembl ID ('Gasterosteus aculeatus') is defined as a subclass of Obsolete concept (EDAM). It represents an identifier assigned to entries such as exons, genes, transcripts, or proteins in the Ensembl 'core' database for the Gasterosteus aculeatus division. This class is considered obsolete in the ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Ensembl ID ('Gasterosteus aculeatus') classified under the category of Obsolete concept (EDAM)? | Which identifiers are categorized as specializations of Obsolete concept (EDAM), including Ensembl ID ('Gasterosteus aculeatus')? | What higher-level concepts encompass Ensembl ID ('Gasterosteus aculeatus') in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein interaction networks\nDescription: Protein interaction networks is a class categorized as an obsolete concept in EDAM, indicating that it is no longer in active use or has been retired in favor of more precise terminology. The class concerns topics related to networks representing interactions between proteins. Although previously used to describe the study or organization of protein-protein interactions, this concept now falls under obsolete classifications and is not recommended for new use.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)', 'Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "To which higher-level categories does Protein interaction networks belong according to EDAM? | Which more specific concepts are encompassed under Obsolete concept (EDAM), including Protein interaction networks? | Is Protein interaction networks classified within the broader category of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Viruses\nDescription: Viruses are defined as a subclass of organisms, encompassing any entity that is or pertains to a virus or group of viruses. This class includes topics such as viral sequence and structural data, interactions among viral proteins, and viral genomes with their associated molecular sequences, genes, and annotations. The scope covers resources specific to individual viruses, groups of viruses, or viruses in general.\nAxiom: {'subClassOf': ['Organisms']}\nGenerated CQs:", "output": "Which subclasses are encompassed by Organisms, such as Viruses? | What higher-level classes include Viruses as members? | Are all Viruses categorized under the broader class of Organisms? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene ID (HGNC)\nDescription: Gene ID (HGNC) is defined as a subclass of Gene ID. It represents an identifier specifically assigned to a gene that has been approved by the HUGO Gene Nomenclature Committee (HGNC). This ensures that each gene is uniquely and consistently identified according to HGNC standards.\nAxiom: {'subClassOf': ['Gene ID']}\nGenerated CQs:", "output": "Which identifiers are subclasses under Gene ID, such as Gene ID (HGNC)? | Is Gene ID (HGNC) classified as a more specific form of Gene ID? | What broader identifier classes does Gene ID (HGNC) fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Tool identifier\nDescription: Tool identifier is defined as a subclass of Identifier (typed), specifically representing an identifier assigned to a bioinformatics tool such as an application or web service. This class ensures that every Tool identifier is a type of typed identifier, explicitly intended for uniquely distinguishing bioinformatics tools.\nAxiom: {'subClassOf': ['Identifier (typed)']}\nGenerated CQs:", "output": "Is Tool identifier regarded as a specific kind of Identifier? | Which identifiers include Tool identifier as a more specialized type? | What broader categories encompass Tool identifier within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HMMER3\nDescription: HMMER3 is defined as a subclass of HMMER format, representing profile HMM files specifically used with HMMER software versions 3.x. This class characterizes files formatted for compatibility with the HMMER3 suite, distinguishing them from other HMMER file versions or formats.\nAxiom: {'subClassOf': ['HMMER format']}\nGenerated CQs:", "output": "Does HMMER3 fall under the general category of HMMER format? | What types are covered as subclasses of HMMER format, specifically including HMMER3? | To which higher-level classes is HMMER3 directly related? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Misspelling\nDescription: Misspelling is defined as a subclass of the obsolete concept (EDAM), indicating that it is no longer an actively maintained or recommended concept within the ontology. It refers to a common misspelling of a word, formally capturing instances where a word is not spelled correctly according to standard conventions.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Does Misspelling fall under the overarching category of Obsolete concept (EDAM)? | To which higher-level concepts is Misspelling hierarchically related within EDAM? | What specific subclasses are encompassed by the Obsolete concept (EDAM) category, including Misspelling? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NCBI locus tag\nDescription: NCBI locus tag is defined as a subclass of Locus ID, representing identifiers specifically assigned to loci in the NCBI database. This class is used to designate and reference unique loci within the NCBI data framework, ensuring standardized identification and organization of genetic loci in NCBI resources.\nAxiom: {'subClassOf': ['Locus ID']}\nGenerated CQs:", "output": "Which higher-level identifiers does NCBI locus tag fall under? | Is NCBI locus tag classified under the broader category of Locus ID? | What subclasses are encompassed by Locus ID, and does this include NCBI locus tag? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RMA++\nDescription: RMA++ is defined as a subclass of algorithm, indicating that it represents a specific type or instance of algorithm. No additional restrictions or distinctions are specified, so any entity classified as RMA++ is inherently an algorithm by definition.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "Which broader conceptual categories include RMA++ based on its classification? | Is RMA++ classified under the broader grouping of algorithm? | What specific types are encompassed within the category of algorithm, and does RMA++ appear among them? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene regulatory network report\nDescription: Gene regulatory network report is defined as a subclass of Obsolete concept (EDAM). It is described as a report that typically includes a map or diagram of a gene regulatory network, providing an overview of the regulatory interactions among genes. This class is considered obsolete within the EDAM ontology context.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which types are more specific than Obsolete concept (EDAM), such as gene regulatory network report? | Does the category Obsolete concept (EDAM) encompass gene regulatory network reports? | Under which higher-level groupings would a gene regulatory network report be classified? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ensembl\nDescription: Ensembl is defined as a subclass of software, indicating that it represents a type of software application or platform. This classification establishes Ensembl within the broader software category, without further restrictions or specified properties.\nAxiom: {'subClassOf': ['software']}\nGenerated CQs:", "output": "Which specific instances or subclasses fall under the category of software, such as Ensembl? | What broader classes does Ensembl belong to in the ontology? | Is Ensembl classified as a type of software? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HMM emission and transition counts\nDescription: HMM emission and transition counts are defined as a subclass of Obsolete concept (EDAM). This class represents the emission and transition counts within a hidden Markov model, which are generated after the model has been determined—such as following the assignment of residues or gaps to match, delete, and insert states. This classification denotes that the concept is considered obsolete in the EDAM ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Are HMM emission and transition counts classified under the broader concept of Obsolete concept (EDAM)? | Which concepts are subsumed by Obsolete concept (EDAM), including HMM emission and transition counts? | What higher-level categories encompass HMM emission and transition counts in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence features\nDescription: Sequence features is defined as a subclass of data, representing the annotation of positional features on molecular sequences that can be specifically mapped to positions within the sequence. This class includes standardized feature tables and general reports documenting sequence features, potentially requiring internal conversion for integration. Sequence features facilitate the structured description and reporting of specific regions or attributes along molecular sequences.\nAxiom: {'subClassOf': ['data']}\nGenerated CQs:", "output": "Which classes are more specific than data, such as Sequence features? | Under which broader classes does Sequence features fall? | Is Sequence features categorized as a subset of data? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RNA-Seq alignment\nDescription: RNA-Seq alignment is defined as a subclass of the Obsolete concept (EDAM), indicating that it is considered outdated within the ontology. It concerns the alignment of large numbers of short RNA sequence reads to a reference genome—a process that has unique challenges due to the complexities introduced by RNA splicing. As a specialized topic within the broader category of sequence alignment, RNA-Seq alignment addresses issues specific to transcriptomic data, such as handling spliced reads.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "To which upper-level categories does RNA-Seq alignment fall, considering its status as Obsolete concept (EDAM)? | Is RNA-Seq alignment classified as an instance within the wider class of Obsolete concept (EDAM)? | Which concepts are narrower in scope than Obsolete concept (EDAM), particularly including RNA-Seq alignment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DNA nucleotide sequence\nDescription: DNA nucleotide sequence is defined as a subclass of biological sequence data. It represents linear data sequences composed specifically of DNA nucleotides (adenine, thymine, cytosine, and guanine). This class formalizes the concept that any DNA nucleotide sequence is a type of biological sequence data, typically used to describe genetic information at the molecular level.\nAxiom: {'subClassOf': ['biological sequence data']}\nGenerated CQs:", "output": "Is DNA nucleotide sequence considered a specific type of biological sequence data? | Which biological sequence data subclasses include DNA nucleotide sequence? | What are the broader categories encompassing DNA nucleotide sequence? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylogenetic tree report (tree stratigraphic)\nDescription: Phylogenetic tree report (tree stratigraphic) is defined as a subclass of Obsolete concept (EDAM). It refers to molecular clock and stratigraphic (age) data derived from phylogenetic tree analysis. This class is considered obsolete in the EDAM ontology, indicating it is no longer recommended for current usage or annotation.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Can Phylogenetic tree report (tree stratigraphic) be classified as an instance of Obsolete concept (EDAM)? | What are the subclasses identified under Obsolete concept (EDAM), including Phylogenetic tree report (tree stratigraphic)? | Which higher-level concept encompasses Phylogenetic tree report (tree stratigraphic)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Peptide identifier\nDescription: Peptide identifier is defined as a subclass of Molecule identifier. It represents an identifier assigned specifically to a peptide chain, distinguishing it from other types of molecular identifiers by its exclusive association with peptides. This class formalizes the concept of uniquely referencing peptide chains within molecular datasets or systems.\nAxiom: {'subClassOf': ['Molecule identifier']}\nGenerated CQs:", "output": "Is every Peptide identifier classified under the broader category of Molecule identifier? | Which identifier categories encompass Peptide identifier as a specific instance? | What specific types of identifiers are included within the class of Molecule identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IntAct accession number\nDescription: IntAct accession number is defined as a subclass of Protein interaction ID, representing an accession number assigned to entries in the IntAct database. This class identifies unique entries documenting protein interactions within the IntAct database, ensuring standardized referencing and integration with protein interaction data resources.\nAxiom: {'subClassOf': ['Protein interaction ID']}\nGenerated CQs:", "output": "Which identifier categories encompass IntAct accession number as a specialized type? | What distinct subclasses are included within Protein interaction ID? | Is every IntAct accession number classified under Protein interaction ID? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Microsatellites\nDescription: Microsatellites are a subclass of DNA polymorphism characterized by very short sequences of nucleotides, specifically repeats of cytosine and adenosine, that occur in tandem and vary in repeat number among individuals. These polymorphisms are notable for their variability in the number of sequence repeats, making them useful markers in genetic studies. The class definition centers on the presence of repeated short DNA sequences within a DNA molecule, with emphasis on their role in genetic diversity.\nAxiom: {'subClassOf': ['DNA polymorphism']}\nGenerated CQs:", "output": "What broader classifications does microsatellite fall under within the context of DNA polymorphism? | Which types of DNA polymorphism include microsatellites as a specific example? | Are microsatellites recognized as a form of DNA polymorphism? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Medicine\nDescription: Medicine is defined as a subclass of Topic and is formally described as a subject concerned with research supporting healing through the diagnosis, treatment, and prevention of disease. This classification positions Medicine within the broader category of Topics, emphasizing its focus on health-related research and practices aimed at promoting healing and disease management.\nAxiom: {'subClassOf': ['Topic']}\nGenerated CQs:", "output": "What specific types fall under the category of Topic, including Medicine? | Which categories are broader than Medicine in the hierarchy? | Is Medicine classified as a subset of Topic? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GeneSNP ID\nDescription: GeneSNP ID is defined as a subclass of Sequence variation ID, representing an identifier specifically assigned to entries within the GeneSNP database. This class is intended to capture unique identifiers associated with sequence variations cataloged in the GeneSNP resource.\nAxiom: {'subClassOf': ['Sequence variation ID']}\nGenerated CQs:", "output": "What more general identifier types does GeneSNP ID inherit from? | Is Sequence variation ID a broader class that encompasses GeneSNP ID? | Which identifiers fall under the category of Sequence variation ID, such as GeneSNP ID? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence composition calculation (protein)\nDescription: Sequence composition calculation (protein) is a subclass of Obsolete concept (EDAM). This class represents calculations that determine the amino acid frequency or the word composition within a protein sequence, typically used to analyze sequence characteristics. As an obsolete concept, it indicates that this analytical function is outdated or has been superseded in the relevant ontology or domain context.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Sequence composition calculation (protein) categorized under Obsolete concept (EDAM)? | What broader class does Sequence composition calculation (protein) belong to in the ontology? | Which concepts fall under the Obsolete concept (EDAM) category, such as Sequence composition calculation (protein)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PolyA signal detection\nDescription: PolyA signal detection is defined as a subclass of nucleic acid sequence feature detection. It refers specifically to the process of identifying polyadenylation signals within nucleotide sequences. This class inherits all characteristics of nucleic acid sequence feature detection and is distinguished by its focus on the detection of polyA signals, which are critical regulatory elements in gene expression and mRNA processing.\nAxiom: {'subClassOf': ['Nucleic acid sequence feature detection']}\nGenerated CQs:", "output": "What higher-level detection categories does PolyA signal detection belong to? | Is PolyA signal detection categorized as a type of Nucleic acid sequence feature detection? | Which detection methods are more specific than Nucleic acid sequence feature detection, including PolyA signal detection? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene name (Genolist)\nDescription: Gene name (Genolist) is defined as a subclass of the Obsolete concept (EDAM), indicating that it is no longer actively used or maintained. This class represents the name assigned to a gene entry from the Genolist genes database.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Gene name (Genolist) classified as a kind of Obsolete concept (EDAM)? | Which general types encompass Gene name (Genolist) within the ontology? | What specific concepts fall under Obsolete concept (EDAM), including Gene name (Genolist)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene ID (SGN)\nDescription: Gene ID (SGN) is defined as a subclass of Gene ID and specifically refers to a gene identifier originating from the Sol Genomics Network. This class represents identifiers uniquely assigned to genes within the SGN resource, distinguishing them as a subset within the broader category of gene identifiers.\nAxiom: {'subClassOf': ['Gene ID']}\nGenerated CQs:", "output": "What identifiers are categorized under Gene ID, specifically including Gene ID (SGN)? | Is every instance classified as Gene ID (SGN) also recognized under Gene ID? | Which higher-level identifier types encompass Gene ID (SGN)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Plugin\nDescription: Plugin is defined as a subclass of role, indicating that it represents a specific type of role within the ontology. No additional property restrictions or disjointness axioms are present, so its characterization is currently limited to inheriting all features and constraints of the role class.\nAxiom: {'subClassOf': ['role']}\nGenerated CQs:", "output": "Which entities are classified under the broader category of role, including Plugin? | To which higher-level categories does Plugin belong within the ontology? | Is Plugin categorized as a type of role? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Restriction enzyme name\nDescription: Restriction enzyme name is a subclass of Enzyme name. It refers specifically to the name assigned to a restriction enzyme, a type of enzyme that recognizes and cuts DNA at specific sequences. This class is formally situated within the broader category of enzyme names, distinguishing names of restriction enzymes from other enzyme types.\nAxiom: {'subClassOf': ['Enzyme name']}\nGenerated CQs:", "output": "Which general categories encompass Restriction enzyme name within the enzyme classification? | What specific enzyme names are classified as subclasses of Enzyme name, including Restriction enzyme name? | Is Restriction enzyme name classified under the broader category of Enzyme name? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Nucleic acid features (siRNA)\nDescription: Nucleic acid features (siRNA) is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer an active or recommended term within the ontology. According to its definition, this class refers to a report on siRNA duplexes in mRNA. This formalization designates the class as representing obsolete concepts specifically related to the documentation of siRNA duplex features in messenger RNA.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Obsolete concept (EDAM) a broader category that includes Nucleic acid features (siRNA)? | Which concepts are more specific than Obsolete concept (EDAM), such as Nucleic acid features (siRNA)? | To which higher-level classifications does Nucleic acid features (siRNA) belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Pairwise protein tertiary structure alignment (all atoms)\nDescription: Pairwise protein tertiary structure alignment (all atoms) is an obsolete concept, classified as a subclass of Obsolete concept (EDAM). It refers to the alignment (superimposition) of exactly two protein tertiary (3D) structures, where all atoms are considered in the comparison. This class is no longer in active use, as indicated by its placement under the obsolete category.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Pairwise protein tertiary structure alignment (all atoms) classified as an instance of the broader Obsolete concept (EDAM)? | Which specific concepts are classified under Obsolete concept (EDAM), including Pairwise protein tertiary structure alignment (all atoms)? | To which upper-level categories does Pairwise protein tertiary structure alignment (all atoms) belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SVG\nDescription: SVG is defined as a subclass of vector image format, indicating that every SVG is a type of vector image format. This classification situates SVG within the broader category of digital graphics that encode images using geometric and vector-based representations rather than rasterized pixels.\nAxiom: {'subClassOf': ['vector image format']}\nGenerated CQs:", "output": "Does SVG fall under the broader classification of vector image format? | Which image formats are included as subclasses within vector image format, such as SVG? | Of which more general categories is SVG a member according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Dotplot\nDescription: Dotplot is defined as a subclass of Sequence alignment report. It represents a report or graphical representation that depicts sequence similarities, typically identified through word-matching or character comparison methods. Members of this class provide visual summaries to highlight regions of similarity between biological sequences, facilitating the analysis of alignment patterns.\nAxiom: {'subClassOf': ['Sequence alignment report']}\nGenerated CQs:", "output": "Which report types are more specific than Sequence alignment report, such as Dotplot? | To which general categories does Dotplot belong within the context of sequence alignment documentation? | Is Dotplot categorized under the broader class of Sequence alignment report? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Systems biology\nDescription: Systems biology is defined as a subclass of Biology, focused on the holistic modeling and analysis of complex biological systems and their interactions. This class includes resources such as databases of models and methods used to construct or analyze these models, emphasizing an integrative approach to understanding biological complexity.\nAxiom: {'subClassOf': ['Biology']}\nGenerated CQs:", "output": "Is Systems biology classified as a specialized field within Biology? | What specific branches are encompassed by Biology, including Systems biology? | To which higher-level categories does Systems biology pertain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Dihedral angle validation\nDescription: Dihedral angle validation is a subclass of protein model validation. It is defined as the process of identifying, for each residue in a protein structure, any improper dihedral (phi/psi) angles. This class characterizes validation approaches focused specifically on assessing the correctness of backbone torsion angles in protein models.\nAxiom: {'subClassOf': ['Protein model validation']}\nGenerated CQs:", "output": "What are the overarching validation categories that encompass Dihedral angle validation? | Does Dihedral angle validation fall under the broader classification of Protein model validation? | Which validation methods are categorized as more specific types of Protein model validation, such as Dihedral angle validation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InterPro architecture image\nDescription: InterPro architecture image is defined as a subclass of Obsolete concept (EDAM). It represents an image that visually depicts the arrangement of InterPro domains within a protein sequence, illustrating domain architecture as a series of non-overlapping domains. Such images may be generated from sequences screened against InterPro or derived directly from InterPro entry sequences. This class is considered obsolete.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which specific concepts are subclasses of Obsolete concept (EDAM), including InterPro architecture image? | Under which broader concept does InterPro architecture image fall? | Is InterPro architecture image categorized under Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: organization\nDescription: organization is defined as a subclass of material entity, indicating that every organization is regarded as a physical or material entity within the ontology. There are currently no further property restrictions or disjointness axioms specified for this class, so its definition is limited to its position as a specialized type of material entity.\nAxiom: {'subClassOf': ['material entity']}\nGenerated CQs:", "output": "Is an organization categorized as a type of material entity? | Which entities are classified as more specific forms of material entity, such as organization? | To what higher-level categories does organization belong according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: URN\nDescription: URN is defined as a subclass of URI, indicating that every URN is also a URI. It represents a Uniform Resource Name, which is a specific type of URI intended to serve as a unique, persistent identifier for a resource, independent of its location.\nAxiom: {'subClassOf': ['URI']}\nGenerated CQs:", "output": "Is URN categorized as a type of URI? | Which entities are classified under the URI category, including URN? | To what higher-level class does the concept of URN belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Bayesian Model\nDescription: Bayesian Model is defined as a subclass of algorithm, indicating that it is a specialized form of algorithm. Members of this class use principles of Bayesian inference to update probabilities or model parameters based on observed data, aligning with the general approach of algorithms in processing and decision-making.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "What are the direct subclasses of algorithm, such as Bayesian Model? | Is Bayesian Model classified as a specific type of algorithm? | For which parent categories does Bayesian Model qualify as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Standardization and normalization\nDescription: Standardization and normalization is a subclass of Analysis, focusing specifically on processes designed to standardize or normalize data. Members of this class represent analytical procedures or techniques whose primary purpose is to bring data into a common format or scale, ensuring comparability and consistency across datasets.\nAxiom: {'subClassOf': ['Analysis']}\nGenerated CQs:", "output": "What types of Analysis include Standardization and normalization as a subclass? | Is Standardization and normalization categorized under the broader class of Analysis? | Which general classes encompass Standardization and normalization? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Job metadata\nDescription: Job metadata is a subclass of Obsolete concept (EDAM) and represents textual metadata associated with a submitted or completed job. This class encapsulates descriptive information pertaining to job instances, but is considered obsolete within the EDAM ontology context.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Which broader categories encompass Job metadata? | What concepts are categorized as subclasses of Obsolete concept (EDAM)? | Is Job metadata an instance of the broader category Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Platform unrestricted\nDescription: Platform unrestricted is defined as a subclass of Platform clause. This means every instance of Platform unrestricted is also a Platform clause, inheriting all its properties and relationships, but may have no additional restrictions or specific platform-related constraints imposed by its definition.\nAxiom: {'subClassOf': ['Platform clause']}\nGenerated CQs:", "output": "Which specific types are encompassed by the Platform clause class, such as Platform unrestricted? | Does Platform unrestricted fall under the classification of Platform clause? | What are the broader classes to which Platform unrestricted is assigned? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cellular process pathways report\nDescription: Cellular process pathways report is defined as a subclass of the obsolete concept (EDAM), indicating that it represents a topic that is no longer in active use or is deprecated. According to its definition, it concerns topics related to cellular process pathways—mechanisms and interactions that occur within cells. This class should not be used for new classifications due to its obsolete status.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What are the specific concepts that fall within Obsolete concept (EDAM), such as Cellular process pathways report? | Is Cellular process pathways report classified under the broader category of Obsolete concept (EDAM)? | Which higher-level categories does Cellular process pathways report belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TIGRFam ID\nDescription: TIGRFam ID is defined as a subclass of Protein family accession. It represents the accession number assigned to an entry (family) within the TIGRFam database, serving as a unique identifier for protein families curated in this resource.\nAxiom: {'subClassOf': ['Protein family accession']}\nGenerated CQs:", "output": "To which broader accession categories does TIGRFam ID pertain? | What kinds of identifiers are encompassed under the category of Protein family accession? | Is TIGRFam ID classified as a specific type of Protein family accession? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Affymetrix probe sets information library file\nDescription: Affymetrix probe sets information library file is defined as a subclass of the obsolete concept (EDAM), indicating it is no longer considered current or maintained. This class represents Affymetrix library files that contain information about probe sets, including details such as the gene name associated with each probe set.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Does Affymetrix probe sets information library file fall under the category of Obsolete concept (EDAM)? | Which concepts are subclasses of Obsolete concept (EDAM), including Affymetrix probe sets information library file? | What higher-level classifications include Affymetrix probe sets information library file? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Data security\nDescription: Data security is defined as a subclass of Data management, focusing specifically on the protection of data assets. According to its current description, it addresses the safeguarding of data—including sensitive information such as patient health data—against unauthorized access, use, disclosure, disruption, modification, or destruction. This class thus captures all concepts and measures related to maintaining the confidentiality, integrity, and availability of data within broader data management practices.\nAxiom: {'subClassOf': ['Data management']}\nGenerated CQs:", "output": "Is Data security categorized as a type of Data management? | What broader classifications does Data security fall under? | Which concepts are defined as narrower than Data management, including Data security? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ARACNE algorithm\nDescription: ARACNE algorithm is defined as a subclass of algorithm. As an algorithm, it inherits the general properties and characteristics associated with computational procedures or problem-solving methods. No further axioms or distinguishing features are specified, so the class represents the set of algorithms known as ARACNE, without additional constraints or relations.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "Which algorithms includes ARACNE algorithm as a specialized subclass? | What broader categories in the ontology does ARACNE algorithm fall under? | Is the ARACNE algorithm encompassed under the general class of algorithms? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence composition table\nDescription: Sequence composition table is defined as a subclass of Obsolete concept (EDAM). It represents a table that summarizes the composition or frequency of characters or words in a molecular sequence. This class is considered obsolete within the EDAM ontology.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What broader categories encompass Sequence composition table in the ontology? | Is Sequence composition table categorized under Obsolete concept (EDAM)? | Which concepts are defined as subclasses of Obsolete concept (EDAM), including Sequence composition table? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Data retrieval (database cross-reference)\nDescription: Data retrieval (database cross-reference) is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer in active use within the ontology. It refers to the action of searching a database to retrieve all relevant references to a particular entity or entry. This class has been deprecated and should be replaced with more current practices or concepts in data retrieval and database referencing.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What more general types does Data retrieval (database cross-reference) belong to within the ontology? | Which concepts are classified as subclasses of Obsolete concept (EDAM), including Data retrieval (database cross-reference)? | Is Data retrieval (database cross-reference) categorized as a kind of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein structural motif\nDescription: Protein structural motif is a subclass of Protein structure, representing a 3D coordinate and associated data for a protein (3D) structural motif. It refers to any group of contiguous or non-contiguous amino acid residues, typically forming a feature with a structural or functional role within the protein. This class captures structural motifs that are defined by their spatial configuration and functional or structural significance within protein architecture.\nAxiom: {'subClassOf': ['Protein structure']}\nGenerated CQs:", "output": "What broader classifications does Protein structural motif belong to? | Which types fall under the category of Protein structure, such as Protein structural motif? | Is every Protein structural motif included within the collection of Protein structures? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ChEBI concept ID\nDescription: ChEBI concept ID is defined as a subclass of Ontology concept ID. It represents an identifier assigned to a concept within the ChEBI ontology, used for uniquely referencing entities in the ChEBI (Chemical Entities of Biological Interest) ontology.\nAxiom: {'subClassOf': ['Ontology concept ID']}\nGenerated CQs:", "output": "Which ontology concepts are superclasses of ChEBI concept IDs? | Is every ChEBI concept ID necessarily included in an ontology concept ID category? | What specific ChEBI concept IDs are categorized under a given ontology concept ID? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Structural data\nDescription: Structural data is a subclass of Obsolete concept (EDAM), serving as a broad data type intended as a placeholder for more specific data types. It encompasses data related to molecular structural information, although its classification as an obsolete concept indicates it has been superseded by more precise categories within the domain.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Structural data classified under the Obsolete concept (EDAM) category? | What broader ontological groups include Structural data within the EDAM schema? | Which more specific concepts are encompassed by Obsolete concept (EDAM), such as Structural data? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: gct\nDescription: gct is defined as a subclass of tab delimited file format. This means that every gct instance is a specific type of tab delimited file format, inheriting all characteristics of tab-delimited file formats while possibly adding further constraints or conventions unique to gct.\nAxiom: {'subClassOf': ['tab delimited file format']}\nGenerated CQs:", "output": "Which file formats are classified as specializations of tab delimited file format, such as gct? | What broader file format categories encompass gct? | Is gct categorized under tab delimited file format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: 't-test'\nDescription: t-test is defined as a subclass of algorithm, indicating that it is a type of statistical procedure within the broader category of algorithms. This class represents methods used to determine if there is a significant difference between the means of two groups, commonly used in statistical hypothesis testing.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "What overarching classes include 't-test' as a member? | Is 't-test' categorized as a specific type of algorithm? | Which types fall under the broader class of algorithm, such as 't-test'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence cluster ID (UniRef)\nDescription: Sequence cluster ID (UniRef) is a subclass of Sequence cluster ID and is defined as the unique identifier of an entry from the UniRef database. This identifier is used to reference specific sequence clusters within the UniRef resource, ensuring precise and standardized access to cluster information.\nAxiom: {'subClassOf': ['Sequence cluster ID']}\nGenerated CQs:", "output": "Which identifiers are more specific types of Sequence cluster ID, such as Sequence cluster ID (UniRef)? | What broader identifier categories does Sequence cluster ID (UniRef) fall under? | Is Sequence cluster ID (UniRef) classified under the general category of Sequence cluster ID? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CGD gene report format\nDescription: CGD gene report format is an entry format associated with the Candida Genome Database, specifically designed for representing gene-related information. It is defined as a subclass of \"Obsolete concept (EDAM)\", indicating that this format is no longer in active use or has been replaced.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is CGD gene report format classified under the broader category of Obsolete concept (EDAM)? | What specific formats are categorized as subclasses of Obsolete concept (EDAM), including CGD gene report format? | Which general types encompass CGD gene report format according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein sequence properties plot\nDescription: Protein sequence properties plot is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer recommended for use within the ontology. It represents a plot illustrating the general physicochemical properties of a protein sequence, such as hydrophobicity, charge, or molecular weight distribution. This class is retained for historical reference and should not be used for new annotations.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "Is Protein sequence properties plot classified under the category of Obsolete concept (EDAM)? | Which broader conceptual group contains Protein sequence properties plot within the EDAM ontology? | What concepts are specified as subclasses of Obsolete concept (EDAM), such as Protein sequence properties plot? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Drug structure\nDescription: Drug structure is defined as a subclass of Small molecule structure, representing the 3D coordinates and associated data describing the three-dimensional structure of a drug. This class specifically captures structural information essential for understanding the spatial and chemical configuration of drug molecules.\nAxiom: {'subClassOf': ['Small molecule structure']}\nGenerated CQs:", "output": "What higher-level structural categories encompass Drug structure? | Which structures are recognized as subtypes of Small molecule structure, including Drug structure? | Is Drug structure classified under the broader category of Small molecule structure? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NMTRAN\nDescription: NMTRAN is defined as a subclass of programming language, representing a specific type of language used for instructing computers. This classification indicates that NMTRAN shares all fundamental properties of programming languages, but possesses additional characteristics that distinguish it within this broader category.\nAxiom: {'subClassOf': ['programming language']}\nGenerated CQs:", "output": "Which programming languages encompass specializations such as NMTRAN? | Is NMTRAN recognized as a kind of programming language? | What higher-level classifications does NMTRAN fall under within programming languages? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein residue 3D cluster\nDescription: Protein residue 3D cluster is defined as a subclass of Protein residue interactions, representing groups of contacting residues within protein structures. These clusters highlight key structural residue networks, capturing the spatial and interactive organization of amino acids that contribute to the protein’s architecture and function.\nAxiom: {'subClassOf': ['Protein residue interactions']}\nGenerated CQs:", "output": "Is Protein residue 3D cluster classified as a kind of Protein residue interactions? | What broader classes does Protein residue 3D cluster fall under? | Which subclasses are encompassed within Protein residue interactions, including Protein residue 3D cluster? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Position weight matrix (PWM )\nDescription: Position weight matrix (PWM) is defined as a subclass of algorithm. PWMs are computational tools used in bioinformatics to represent motifs, such as transcription factor binding sites, by quantifying the preference for each nucleotide at every position in a sequence. As an algorithm, PWM systematically assigns weights based on observed frequencies, enabling efficient motif detection in genomic sequences.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "Is Position weight matrix (PWM) categorized as a type of algorithm? | What are the parent categories for Position weight matrix (PWM) in the classification hierarchy? | Which algorithm subclasses include Position weight matrix (PWM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: 'MI'\nDescription: MI is defined as a subclass of algorithm, indicating that every instance of MI is also recognized as an algorithm. No additional constraints or distinguishing characteristics are specified beyond its classification as an algorithm.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "Which algorithms have subclasses that include MI? | Is MI categorized as a specific type of algorithm? | What are the more general categories that MI is a part of? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Chi-square\nDescription: Chi-square is defined as a subclass of algorithm, indicating that it is a specific type of algorithm. No further disjointness or property restrictions are specified, so any individual of this class is understood solely as an algorithm, with no additional constraints or differentiating features provided in the current axiom.\nAxiom: {'subClassOf': ['algorithm']}\nGenerated CQs:", "output": "What are the direct superclasses of Chi-square within the ontology? | Is Chi-square an instance of the broader category algorithm? | Which classes are classified under algorithm and include Chi-square? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DNA-Seq\nDescription: DNA-Seq is defined as a subclass of the Obsolete concept (EDAM) class. It refers to high-throughput sequencing techniques applied to randomly fragmented genomic DNA. This approach is commonly used in whole-genome sequencing and resequencing, as well as in studies involving SNP discovery and the identification of copy number variations and chromosomal rearrangements. The class is marked obsolete in the EDAM ontology, indicating it is deprecated for current use.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)']}\nGenerated CQs:", "output": "What broader classifications encompass DNA-Seq within the ontology? | Which concepts are categorized as more specific types of Obsolete concept (EDAM), including DNA-Seq? | Does DNA-Seq fall under the category of Obsolete concept (EDAM)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene features (coding region) format\nDescription: Gene features (coding region) format is a subclass of Gene annotation format, specifically designated for representing reports on coding regions within nucleotide sequences. This class formalizes formats that are used to annotate and convey information about regions of genetic sequences that code for proteins, emphasizing their role in gene annotation workflows.\nAxiom: {'subClassOf': ['Gene annotation format']}\nGenerated CQs:", "output": "To what higher-level annotation formats does Gene features (coding region) format belong? | Is Gene annotation format a more general category than Gene features (coding region) format? | Which annotation formats classify as specializations of Gene annotation format, such as Gene features (coding region) format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Locus ID (Tropgene)\nDescription: Locus ID (Tropgene) is a subclass of Locus ID and serves as an identifier specifically assigned to a locus within the Tropgene database. This class represents locus identifiers that are uniquely sourced from Tropgene, thereby distinguishing them from locus IDs in other repositories.\nAxiom: {'subClassOf': ['Locus ID']}\nGenerated CQs:", "output": "Is Locus ID (Tropgene) classified as a type of Locus ID? | Which higher-level identifier categories include Locus ID (Tropgene) as a member? | What specific identifiers are recognized under the broader class of Locus ID, such as Locus ID (Tropgene)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Molecular medicine\nDescription: Molecular medicine is defined as a subclass of translational medicine, focusing on the identification of molecular and genetic causes of diseases. It encompasses research and interventions aimed at correcting molecular-level abnormalities that lead to disease, thereby bridging fundamental molecular discoveries with clinical applications and patient care.\nAxiom: {'subClassOf': ['Translational medicine']}\nGenerated CQs:", "output": "What higher-level categories does Molecular medicine fall under? | Is Translational medicine a broader category that includes Molecular medicine as a type? | Which specific subtypes within Translational medicine encompass Molecular medicine? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Preclinical and clinical studies\nDescription: Preclinical and clinical studies is a subclass of Medicine research and development. This class includes activities focused on testing new medicines, vaccines, or medical procedures first on animals (preclinical studies) and then on humans (clinical studies), all conducted prior to regulatory approval. The formalization aligns with the definition, emphasizing the sequential and comprehensive process integral to medical research and development.\nAxiom: {'subClassOf': ['Medicine research or development']}\nGenerated CQs:", "output": "Are preclinical and clinical studies classified under the broader category of medicine research and development? | Which research and development activities are more specific subdivisions of medicine research and development, such as preclinical and clinical studies? | What general domains of research and development encompass preclinical and clinical studies? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MLInterfaces\nDescription: MLInterfaces is a subclass of software characterized by several specific features. It implements at least one k-nearest neighbour classification algorithm and is encoded in the R programming language. Members of this class must have specified data input from gene expression datasets and specified data output from ALL/AML datasets, with both types of data conforming to at least one specified data format specification. This ensures that MLInterfaces are R-based software tools specialized in handling gene expression and ALL/AML datasets for k-nearest neighbour classification, with clear input/output format requirements.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[implements some k-nearest neighbour classification]', '[has specified data output some (ALL/AML data set and [has format specification some data format specification])]', '[has specified data input some (Gene expression dataset and [has format specification some data format specification])]', '[is encoded in only R language]']}\nGenerated CQs:", "output": "Is it required that every MLInterface is encoded in at least one R language? | Can an MLInterface exist without being associated with encoding in the R language? | Does the ontology specify that if an entity is an MLInterface, then it must be represented using some form of the R language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Microsoft Excel 2007\nDescription: Microsoft Excel 2007 is defined as a subclass of Microsoft Excel with several specified properties. It accepts data input in both XLS spreadsheet and tab-delimited file formats, and can output data in XLS, XML spreadsheet, and tab-delimited file formats. Its release date is specified as ns1:00, and its homepage is http://office.microsoft.com/. Microsoft Excel 2007 has the version identifier \"Microsoft 2007 version\" and is directly succeeded by Microsoft Excel for Windows 2010. These formal properties distinguish Microsoft Excel 2007 in terms of version, supported data formats, and its place within the timeline of Excel releases.\nAxiom: {'subClassOf': ['Microsoft Excel'], 'propertyRestrictions': ['[has specified data input some (data and [has format specification some tab delimited file format])]', '[has specified data output some (data and [has format specification some XLS spreadsheet])]', '[has release date hasValue ns1:00]', '[has website homepage hasValue http://office.microsoft.com/]', '[directly followed by some Microsoft Excel for Windows 2010]', '[has specified data output some (data and [has format specification some tab delimited file format])]', '[has version hasValue Microsoft 2007 version]', '[has specified data input some (data and [has format specification some XLS spreadsheet])]', '[has specified data output some (data or [has format specification some XML spreadsheet])]']}\nGenerated CQs:", "output": "Does Microsoft Excel 2007 require at least one data output that follows the XML spreadsheet format specification? | Is there a necessity for any data output specified by Microsoft Excel 2007 to conform to the XML spreadsheet format? | Can Microsoft Excel 2007 provide a specified data output that is not both data and formatted as an XML spreadsheet? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GeneSelector\nDescription: GeneSelector is defined as a subclass of software that is encoded in the R language. Members of this class are characterized by implementing at least one of the following statistical or machine learning methods: SAM, BaldiLongT, FoxDimmicT, WilcEbam, Bayesian Model, Wilcoxon, Linear modelling, or t-test. This formalization indicates that any instance of GeneSelector must provide implementations for some of these methods in an R-based environment, supporting flexible selection and analysis of genes using diverse computational techniques.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[implements some SAM]', '[implements some BaldiLongT]', '[implements some WilcEbam]', '[implements some Bayesian Model]', '[implements some Wilcoxon]', '[implements some Linear modelling]', \"[implements some 't-test']\", '[is encoded in some R language]', '[implements only FoxDimmicT]']}\nGenerated CQs:", "output": "Is it required for a GeneSelector to implement at least one instance of FoxDimmicT? | Can a GeneSelector exist without implementing FoxDimmicT at all? | Does every GeneSelector necessarily possess the ability to implement FoxDimmicT? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Pathway ID (ConsensusPathDB)\nDescription: Pathway ID (ConsensusPathDB) is a subclass of both \"Pathway or network accession\" and \"ConsensusPathDB identifier.\" It refers to an identifier specifically assigned to a pathway within the ConsensusPathDB pathway database. This class is intended to capture and represent accession numbers or codes uniquely identifying pathways stored in ConsensusPathDB.\nAxiom: {'subClassOf': ['ConsensusPathDB identifier', 'Pathway and network accession']}\nGenerated CQs:", "output": "Is Pathway ID (ConsensusPathDB) a subtype of Pathway or network accession? | Which types are encompassed under Pathway or network accession, including Pathway ID (ConsensusPathDB)? | Under what broader classes can Pathway ID (ConsensusPathDB) be classified? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: BioPAX\nDescription: BioPAX is defined as a subclass of biological pathway or network format, meaning it is a specific type of data format for representing biological pathways or networks. According to its current definition, BioPAX is intended for the exchange of pathway data, and its data model is defined using OWL (Web Ontology Language), ensuring structured and semantically rich data representation. This places BioPAX within the context of standardized formats facilitating pathway data sharing and interoperability in the life sciences.\nAxiom: {'subClassOf': ['Biological pathway and network format']}\nGenerated CQs:", "output": "Is BioPAX classified under the general category of Biological pathway or network format? | Which specific formats fall under the category of Biological pathway or network format, such as BioPAX? | What broader categories is BioPAX directly associated with in terms of data formats for biological pathways or networks? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: 'beadarraySNP'\nDescription: beadarraySNP is a subclass of software designed for processing text-based data sets, producing graphical plots as output. It operates as part of data normalization workflows, indicating its use in preparing or standardizing data. Additionally, beadarraySNP is implemented in the R programming language. These axioms collectively characterize beadarraySNP as a software tool focused on data normalization tasks, with specified input (text data set), output (graph plots), and implementation (R language).\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data output some Graph plot]', '[has specified data input some Text data set]', '[is executed in some data normalization]', '[is encoded in only R language]']}\nGenerated CQs:", "output": "Is it necessary for a beadarraySNP to be encoded in at least one R language? | Can a beadarraySNP exist without being encoded in any R language? | Does every beadarraySNP instance require association with some R language through the 'is encoded in' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MEDME\nDescription: MEDME is defined as a subclass of software. It is characterized by its ability to accept specified data input, where the input data must have a format specification of an R data frame. The software produces specified data output, which must have a format specification of GFF (General Feature Format). Additionally, MEDME is encoded in the R programming language. This formalization ensures that any instance of MEDME must process data inputs as R data frames and produce outputs in GFF format, utilizing R for its implementation.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data output some (data and [has format specification some GFF])]', '[is encoded in some R language]', '[has specified data input some (data or [has format specification some R data frame])]']}\nGenerated CQs:", "output": "Does MEDME require at least one specified data input with a format specification of an R data frame? | Must every specified data input associated with MEDME include a format specification that is an R data frame? | Is it possible for MEDME to have a specified data input that lacks both the 'data' type and an 'R data frame' format specification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Splice site prediction\nDescription: Splice site prediction is defined as a subclass of nucleic acid sequence feature detection, specifically involving detection methods that are related to gene structure. Members of this class identify, predict, or analyze splice sites in nucleotide sequences—including methods that may require input of pre-mRNA or genomic DNA sequences. This ensures a focus on the prediction or analysis of gene structure elements relevant to splicing within nucleotide data.\nAxiom: {'subClassOf': ['Nucleic acid sequence feature detection'], 'propertyRestrictions': ['[has topic only Gene structure]']}\nGenerated CQs:", "output": "Is it required that splice site prediction concerns gene structure as a topic? | Can every instance of splice site prediction be associated with at least one gene structure through the 'has topic' relationship? | Is there a requirement for splice site prediction to reference gene structure in its property restrictions? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Functional enrichment\nDescription: Functional enrichment is a subclass of both Gene expression data analysis and Enrichment, and is characterized by the requirement that it has as its topic some form of function analysis. This class encompasses methods that analyze a set of genes—often derived from gene expression profiles or other gene sets—using an ontology of gene functions, such as the Gene Ontology (GO). The analysis typically takes a set of Gene IDs as input and produces a ranked list of functional terms (e.g., GO terms) each associated with a p-value, reflecting the statistical significance of enrichment.\nAxiom: {'subClassOf': ['Gene expression data analysis', 'Enrichment'], 'propertyRestrictions': ['[has topic only Function analysis]']}\nGenerated CQs:", "output": "Must every instance of Functional enrichment be associated with at least one topic of Function analysis? | Can a Functional enrichment process exist without having the topic of Function analysis? | Is it possible for Functional enrichment to have topics other than Function analysis? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Acuity\nDescription: Acuity is defined as a subclass of software, and is characterized by being the output of at least one software publishing process in which Molecular Devices is a participant. This means that any instance of Acuity must be a software product that results from a publishing process involving Molecular Devices.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[output of some (software publishing process or [has participant hasValue Molecular Devices])]']}\nGenerated CQs:", "output": "Does every instance of Acuity necessarily produce an output related to a software publishing process involving Molecular Devices as a participant? | Can Acuity have any output that is not a result of a software publishing process with Molecular Devices participating? | Is it required that all outputs of Acuity are strictly derived from software publishing processes that include Molecular Devices as a participant? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylogenetic tree generation (from gene frequencies)\nDescription: Phylogenetic tree generation (from gene frequencies) is a subclass of Phylogenetic tree generation (data centric), specifically focusing on constructing phylogenetic trees using gene frequency data as input. This class is characterized by its association with the topic of gene expression and requires phylogenetic gene frequencies data as input. The formal definition emphasizes that the process involves phylogenetic tree construction derived from gene frequency data.\nAxiom: {'subClassOf': ['Phylogenetic tree generation (data centric)'], 'propertyRestrictions': ['[has input some Phylogenetic gene frequencies data]', '[has topic only Gene expression]']}\nGenerated CQs:", "output": "Must phylogenetic tree generation (from gene frequencies) always involve at least one topic related to gene expression? | Is it necessary for the process of phylogenetic tree generation (from gene frequencies) to be associated with gene expression as a topic? | Can phylogenetic tree generation (from gene frequencies) occur without referencing gene expression in its topic property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein structure prediction\nDescription: Protein structure prediction is a subclass of Protein analysis, Protein sequence analysis, Structure prediction, and Protein structure analysis, and is grouped under the broader category of Prediction and recognition (protein). This class concerns methods and topics related to the prediction, modelling, recognition, or design of protein secondary, tertiary, or other structural features. Individuals of this class are associated with outputs that include some form of protein structure, and the class specifically includes topics relevant to protein structure prediction.\nAxiom: {'subClassOf': ['Protein analysis', 'Protein sequence analysis', 'Structure prediction', 'Protein structure analysis', 'Structure prediction', 'Prediction or recognition (protein)'], 'propertyRestrictions': ['[has output some Protein structure]', '[has topic some Protein structure prediction]']}\nGenerated CQs:", "output": "Is Protein structure prediction categorized under Prediction and recognition (protein)? | Which specific prediction types, such as Protein structure prediction, fall under the class Prediction and recognition (protein)? | What broader categories encompass Protein structure prediction in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence signature recognition\nDescription: Sequence signature recognition is a subclass of Sequence feature detection concerned with identifying (scanning for) known motifs, patterns, and regular expressions in molecular sequence(s). It is characterized by generating outputs that include Sequence signature matches and is associated with topics such as Sequence sites, features, and motifs. This class formally captures analyses that detect established sequence elements within biological sequences.\nAxiom: {'subClassOf': ['Sequence feature detection'], 'propertyRestrictions': ['[has topic some Sequence sites, features and motifs]', '[has output only Sequence signature matches]']}\nGenerated CQs:", "output": "Does sequence signature recognition always produce at least one output that is a sequence signature match? | Is it required that the output of sequence signature recognition includes some sequence signature matches? | Can sequence signature recognition result in an output that does not involve any sequence signature matches? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: timecourse\nDescription: timecourse is defined as a subclass of software, distinguished by several specific characteristics. Instances of timecourse implement some RMA (Robust Multi-array Average) algorithm and are published exclusively by Bioconductor. They are encoded in the R programming language. For data handling, timecourse software requires as input some gene expression dataset and produces as output data that is strictly in the CEL binary format, conforming to the respective format specification. These axioms ensure that timecourse represents specialized software tools for processing gene expression datasets using the Bioconductor framework and RMA methodology within the R language environment.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[implements some RMA]', '[is published by hasValue Bioconductor]', '[is encoded in some R language]', '[has specified data input some Gene expression dataset]', '[has specified data output some [has format specification some CEL binary format]]']}\nGenerated CQs:", "output": "Is it required that any specified data output in a timecourse must have format specification restricted solely to the CEL binary format? | Does the ontology allow a timecourse to have a specified data output with a format specification other than CEL binary format? | Must every output designated by has specified data output for a timecourse include at least one instance where its format specification is only CEL binary format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: sizepower\nDescription: sizepower is a subclass of software, specifically characterized by several key properties. It is implemented in the R programming language and is published by Bioconductor. The software is designed to be executed in the context of background correction, data normalization, and differential expression analysis tasks. It accepts input data exclusively in the R data frame format and produces output data also solely as R data frames. This ensures consistency in data formatting throughout its use and integration within bioinformatics workflows.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is executed in some (background correction and data normalization and differential expression analysis)]', '[has specified data output some [has format specification only R data frame]]', '[has specified data input some [has format specification only R data frame]]', '[is published by hasValue Bioconductor]', '[is encoded in only R language]']}\nGenerated CQs:", "output": "Is it necessary for a sizepower propertyRestriction to be encoded in at least one R language? | Can a sizepower propertyRestriction exist without being associated with any R language? | Does every sizepower propertyRestriction require an encoding in an R language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein sequence alignment analysis\nDescription: Protein sequence alignment analysis is a subclass of Protein analysis, Prediction and recognition (protein), and Sequence alignment analysis. It is characterized by requiring at least one input of type Sequence alignment (protein). This class encompasses analyses performed on protein sequence alignments, typically to detect features or make predictions about the aligned sequences. The formal definition ensures that instances of this class specifically involve input data consisting of protein sequence alignments within the broader context of protein and sequence analysis.\nAxiom: {'subClassOf': ['Protein analysis', 'Prediction and recognition (protein)', 'Sequence alignment analysis'], 'propertyRestrictions': ['[has input only Sequence alignment (protein)]']}\nGenerated CQs:", "output": "Is it required that protein sequence alignment analysis always has at least one input that is a protein sequence alignment? | Can a protein sequence alignment analysis exist without taking any protein sequence alignment as input? | Must every input to a protein sequence alignment analysis be a protein sequence alignment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: logitT\nDescription: logitT is defined as a subclass of software specialized in differential expression analysis. It must implement both the Logit-t algorithm and the t-test, be executed in the context of differential expression analysis, and is encoded in the R programming language. logitT requires input data specifically in CEL binary or CEL ASCII formats, as specified, and produces output strictly in the form of an R data frame. Additionally, it is formally associated with the Bioconductor project as its publisher.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': [\"[implements some (Logit-t algorithm and 't-test')]\", '[has specified data input some [has format specification only (CEL binary format or CEL ASCII format)]]', '[is encoded in some R language]', '[is published by hasValue Bioconductor]', '[has specified data output some [has format specification only R data frame]]', '[is executed in only differential expression analysis]']}\nGenerated CQs:", "output": "Is it required that every LogitT property restriction is associated with at least one execution in a differential expression analysis? | Does a LogitT property restriction necessarily participate in some form of differential expression analysis? | Can a LogitT property restriction exist without being executed in any differential expression analysis? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MPL v2.0\nDescription: MPL v2.0 is defined as a subclass of MPL, meaning it inherits all characteristics of the general Mozilla Public License class. Additionally, MPL v2.0 is characterized by being a compatible license with both GNU GPL v2 and GNU GPL v3. This means that any license classified as MPL v2.0 must be compatible for use in projects licensed under either version 2 or version 3 of the GNU General Public License.\nAxiom: {'subClassOf': ['MPL'], 'propertyRestrictions': ['[is compatible license of some GNU GPL v2]', '[is compatible license of only GNU GPL v3]']}\nGenerated CQs:", "output": "Is every instance of an MPL v2.0 license required to be compatible with at least one GNU GPL v3 license? | Are there cases where an MPL v2.0 license does not have any compatibility relation with a GNU GPL v3 license? | Can an MPL v2.0 license be associated with compatibility only when at least one GNU GPL v3 license is involved? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein-protein interaction prediction\nDescription: Protein-protein interaction prediction is defined as a subclass of protein interaction prediction, focused specifically on the identification or prediction of interactions between proteins, including interfaces and binding sites. Members of this class are characterized by having outputs that are protein interaction reports and are concerned with topics relating to protein interactions. This ensures that any instance of this class is involved in generating reports about protein interactions and is centered on protein interaction phenomena.\nAxiom: {'subClassOf': ['Protein interaction prediction'], 'propertyRestrictions': ['[has topic some Protein interactions]', '[has output only Protein interaction report]']}\nGenerated CQs:", "output": "Must every protein-protein interaction prediction produce at least one protein interaction report as output? | Is the existence of a protein interaction report output required for an activity to be classified as a protein-protein interaction prediction? | Can a protein-protein interaction prediction be identified by the presence of a protein interaction report as its output? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: affyPara\nDescription: affyPara is a subclass of software, formally characterized by several property restrictions: it is published by Bioconductor; it is executed in processes involving averaging and correction and data normalization; its specified data input must include data with a format specification of either CEL binary format or CEL ASCII format; its specified data output includes both graph plots and outputs with a format specification of R data frame; and it is encoded in the R language. This class represents software tools that process CEL format data for statistical normalization and visualization in bioinformatics workflows.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is published by hasValue Bioconductor]', '[has specified data input some [has format specification only (CEL binary format or CEL ASCII format)]]', '[has specified data output some (Graph plot and [has format specification some R data frame])]', '[is encoded in some R language]', '[is executed in some (averaging or correction or data normalization)]']}\nGenerated CQs:", "output": "Is it necessary for affyPara to be executed in a context that includes averaging, correction, and data normalization? | Does the execution of affyPara always require all three processes: averaging, correction, and data normalization to be present? | Can affyPara be executed in any scenario where averaging, correction, and data normalization are not all applied together? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: vsn\nDescription: vsn is defined as a subclass of software, characterized by being implemented in the R language. It requires specific data input in the form of a gene expression dataset and is executed for tasks including correction, data normalization, and differential expression analysis. This formalization ensures that any instance of vsn is an R-based software tool designed to perform these essential bioinformatics processes on gene expression data.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data input some Gene expression dataset]', '[is executed in some (correction and data normalization and differential expression analysis)]', '[is encoded in only R language]']}\nGenerated CQs:", "output": "Is it required that every property restriction in vsn is encoded in at least one R language? | Does a property restriction in vsn necessarily have to be represented in some form of R language? | Can a vsn property restriction exist without being encoded in an R language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cysteine bridge detection\nDescription: Cysteine bridge detection is defined as a subclass of protein cysteine and disulfide bond assignment. This class focuses on the identification of cysteine bridges, specifically by detecting disulfide bonds formed between cysteine residues within a protein structure using coordinate data. Individuals of this class perform or represent methods for recognizing these covalent linkages, which are important for protein stability and function.\nAxiom: {'subClassOf': ['Protein cysteine or disulfide bond assignment']}\nGenerated CQs:", "output": "Does cysteine bridge detection fall under the broader category of protein cysteine and disulfide bond assignment? | Which processes are recognized as specialized forms of protein cysteine and disulfide bond assignment, such as cysteine bridge detection? | To which overarching categories is cysteine bridge detection formally related in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence trace format\nDescription: Sequence trace format is a subclass of Sequence record format that serves specifically as a format for sequence trace data, including information such as base calls. According to its axioms, every Sequence trace format is associated with at least one Sequence trace, meaning it is designed to represent or encode the data generated during DNA sequencing processes. This class formalizes the relationship between sequence trace data and the file formats used to store such data.\nAxiom: {'subClassOf': ['Sequence record format'], 'propertyRestrictions': ['[is format of only Sequence trace]']}\nGenerated CQs:", "output": "Is every instance described by the sequence trace format propertyRestrictions required to be the format of at least one Sequence trace? | Can a sequence trace format propertyRestriction exist without being associated as the format of a Sequence trace? | Does the ontology permit a sequence trace format propertyRestriction that is not related to any Sequence trace through the 'is format of' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: matlab software\nDescription: matlab software is defined as a subclass of software, characterized by being encoded in some MATLAB language. Any individual of this class must be implemented using MATLAB programming language, making it equivalent to software whose code is written in MATLAB. This specification ensures that only software realized through MATLAB language belongs to this class.\nAxiom: {'subClassOf': ['software'], 'equivalentClass': ['[is encoded in only MATLAB language]']}\nGenerated CQs:", "output": "Is every matlab software instance necessarily encoded in some MATLAB language? | Is matlab software defined exactly as those entities that are encoded in MATLAB language? | Does the class matlab software precisely include all entities that are encoded using MATLAB language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein residue surface calculation\nDescription: Protein residue surface calculation is a subclass of Protein surface and interior calculation. This class refers to the process of calculating the solvent accessibility for each residue within a protein structure, determining how much of each residue's surface is exposed to the surrounding solvent.\nAxiom: {'subClassOf': ['Protein surface or interior calculation']}\nGenerated CQs:", "output": "Is Protein surface and interior calculation a broader classification encompassing Protein residue surface calculation? | Which calculation methods are classified under Protein surface and interior calculation, specifically including Protein residue surface calculation? | To which higher-level calculation categories does Protein residue surface calculation pertain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Algorithms for Calculating Microarray Enrichment\nDescription: Algorithms for Calculating Microarray Enrichment is a subclass of software that specifically implements algorithms for analyzing microarray data enrichment, incorporating both its core methodology and Chi-square analysis. Instances of this class must be encoded in the R programming language, take as input data that conforms to the R data frame format, and output at least some form of graphical plot. This class formalization ensures that any software classified here is designed for statistical analysis of microarray enrichment with explicit data format and output requirements.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data output some Graph plot]', '[has specified data input some (data and [has format specification some R data frame])]', '[implements some (Algorithms for Calculating Microarray Enrichment and Chi-square)]', '[is encoded in only R language]']}\nGenerated CQs:", "output": "Must every instance of 'Algorithms for Calculating Microarray Enrichment' be encoded in at least one R language implementation? | Is it possible for an 'Algorithm for Calculating Microarray Enrichment' to exist without being encoded in the R language? | Are there any algorithms for microarray enrichment that are encoded exclusively in the R language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Free cysteine detection\nDescription: Free cysteine detection is a subclass of Protein cysteine and disulfide bond assignment, concerned with identifying cysteine residues in a protein structure that are not engaged in disulfide bonds (cysteine bridges) and do not serve as ligands to metals. This class ensures the detection and annotation of cysteine residues that are chemically free within protein structures.\nAxiom: {'subClassOf': ['Protein cysteine or disulfide bond assignment']}\nGenerated CQs:", "output": "Is Free cysteine detection classified under Protein cysteine and disulfide bond assignment? | What are the more specific processes that fall under Protein cysteine and disulfide bond assignment, such as Free cysteine detection? | Which broader categories encompass Free cysteine detection? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: affyTiling\nDescription: affyTiling is defined as a subclass of software that is published by Bioconductor. It is implemented in the R language, and its execution involves tasks related to correction and data normalization. The software implements RMA (Robust Multi-array Average) methods, with specified data input formats restricted to BPMAP and CEL binary formats. The data output produced by affyTiling is in the form of CSV data sets. This ontology representation ensures that any member of the affyTiling class is exclusively characterized by these properties and restrictions.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is published by hasValue Bioconductor]', '[is executed in some (correction and data normalization)]', '[has specified data output some CSV data set]', '[is encoded in some R language]', '[has specified data input some [has format specification only (BPMAP and CEL binary format)]]', '[implements only RMA]']}\nGenerated CQs:", "output": "Is it required that every affyTiling implements at least one RMA? | Can an affyTiling exist without implementing any RMA? | Does the implementation of some RMA distinguish affyTiling from other concepts? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RLMM\nDescription: RLMM is a subclass of software, characterized by its implementation of the Mahalanobis distance algorithm. It specifically requires data inputs that conform to the formats Xba.CQV, Xba.regions, and .raw files. The software outputs graph plots as part of its processing. RLMM is encoded in the R language and is designed to be executed within data normalization workflows. Additionally, it is published by Bioconductor. These axioms precisely define RLMM’s purpose and technical attributes within the domain of bioinformatics software.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[implements some Mahalanobis distance]', '[has specified data output some Graph plot]', '[is encoded in some R language]', '[is executed in some data normalization]', '[is published by hasValue Bioconductor]', '[has specified data input some [has format specification some (Xba.CQV and Xba.regions and .raw files)]]']}\nGenerated CQs:", "output": "Is the specified data input for an RLMM propertyRestriction required to have a format specification that includes Xba.CQV, Xba.regions, and .raw files? | Can an RLMM propertyRestriction have a specified data input where the format specification is limited exclusively to Xba.CQV, Xba.regions, and .raw files? | Does an RLMM propertyRestriction necessarily entail that its specified data input must define format specifications corresponding to all three: Xba.CQV, Xba.regions, and .raw files? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MUSCLE 3.8.31\nDescription: MUSCLE 3.8.31 is a subclass of Drive5 MUSCLE and represents a specific release of the MUSCLE software (version 3.8.31). Instances of this class are characterized by having a defined download location (ns5:downloads.htm), access to at least one command-line interface, and are associated with documentation resources (ns5:muscle_userguide3.8.html and ns6:gkh340). This formalization ensures that any individual classified as MUSCLE 3.8.31 is identifiable by these version-specific properties and documentation links.\nAxiom: {'subClassOf': ['Drive5 MUSCLE'], 'propertyRestrictions': ['[has download location hasValue ns5:downloads.htm]', '[has documentation hasValue ns5:muscle_userguide3.8.html]', '[has version hasValue MUSCLE version 3.8.31]', '[has documentation hasValue ns6:gkh340]', '[has interface only command-line interface]']}\nGenerated CQs:", "output": "Is it required that MUSCLE 3.8.31 has an interface with at least one command-line interface? | Can MUSCLE 3.8.31 possess any interface that is not a command-line interface? | Does MUSCLE 3.8.31 necessarily support a command-line interface among its interfaces? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GenomeGraphs\nDescription: GenomeGraphs is defined as a subclass of software, specifically designed to handle gene expression datasets with explicit format specifications. It requires specified data inputs that must include a gene expression dataset accompanied by a data format specification. The software is encoded in the R programming language. Its data output consists of graph plots with format specifications that conform to an image format. These axioms formalize GenomeGraphs as an R-based software tool aimed at generating graphical representations of gene expression data, ensuring both input and output data comply with defined formats.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is encoded in some R language]', '[has specified data output some (Graph plot and [has format specification some image format])]', '[has specified data input some (Gene expression dataset or [has format specification some data format specification])]']}\nGenerated CQs:", "output": "Does a GenomeGraph necessarily require at least one specified data input that is a Gene expression dataset conforming to a data format specification? | Is it possible for a GenomeGraph to exist without having an input that is both a Gene expression dataset and meets a data format specification? | Are all specified data inputs for GenomeGraphs limited to those that are Gene expression datasets with some data format specification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylogenetic tree reconstruction\nDescription: Phylogenetic tree reconstruction is a subclass of phylogenetic tree generation and is specifically concerned with topics pertaining to phylogeny. It involves reconstructing the inner node labels of a phylogenetic tree based on information from its leaves, distinguishing this process from merely analyzing an existing tree or constructing an entirely new tree. This class encapsulates methods and concepts relative to inferring ancestral relationships and internal features from observed leaf data in evolutionary trees.\nAxiom: {'subClassOf': ['Phylogenetic tree generation'], 'propertyRestrictions': ['[has topic only Phylogeny]']}\nGenerated CQs:", "output": "Is it required that phylogenetic tree reconstruction addresses at least one topic related to phylogeny? | Can a phylogenetic tree reconstruction process have the 'has topic' property only if the topic is phylogeny? | Must every instance of phylogenetic tree reconstruction involve a topic that is classified as phylogeny? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Codon usage table ID\nDescription: Codon usage table ID is a subclass of Identifier (typed), representing an identifier specifically used for codon usage tables and genetic codes. Each instance of this class is characterized by being an identifier of at least one genetic code or codon usage table. This class formalizes identifiers used to denote codon usage tables, such as those referring to specific genetic codes.\nAxiom: {'subClassOf': ['Identifier (typed)'], 'propertyRestrictions': ['[is identifier of some Genetic code]', '[is identifier of only Codon usage table]']}\nGenerated CQs:", "output": "Does every Codon usage table ID necessarily refer to at least one Codon usage table as its identifier? | Is it required that each instance of Codon usage table ID serves as an identifier for a Codon usage table? | Can a Codon usage table exist without being identified by a Codon usage table ID? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: vbmp\nDescription: vbmp is a subclass of software designed specifically for execution within cross validation processes. It is characterized by accepting data input strictly in the format of R data frames and producing outputs that include both graph plots and R data frames. The software is published by Bioconductor, is implemented in the R programming language, and employs Multinomial probit regression with Gaussian Process priors as a core method. These axioms ensure that vbmp is tightly integrated with R-centric workflows and statistical modeling techniques, particularly within the Bioconductor ecosystem.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data input some [has format specification only R data frame]]', '[has specified data output some (Graph plot and [has format specification only R data frame])]', '[is published by hasValue Bioconductor]', '[is encoded in some R language]', '[implements some Multinomial probit regression with Gaussian Process priors]', '[is executed in only cross validation]']}\nGenerated CQs:", "output": "Is it required that every vbmp instance must be executed in at least one cross validation? | Can a vbmp exist without being executed in any cross validation? | For any given vbmp, does there necessarily exist a cross validation where it is executed? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Structure prediction\nDescription: Structure prediction is defined as a subclass of both Prediction and recognition and Structure analysis, emphasizing its role within analytical and predictive frameworks. It is characterized by outputs that must include some form of Structure, and its topical focus centers specifically on structure prediction. The class addresses topics related to the prediction of molecular secondary or tertiary structure, uniting aspects of analysis and prediction to determine structural features of molecules.\nAxiom: {'subClassOf': ['Structure analysis', 'Structure analysis', 'Prediction or recognition'], 'propertyRestrictions': ['[has output some Structure]', '[has topic some Structure prediction]']}\nGenerated CQs:", "output": "Is Structure prediction classified under the broader type of Prediction and recognition? | Which specific kinds of Prediction and recognition encompass Structure prediction? | What are the more general categories that Structure prediction is a member of? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Pathway or network processing\nDescription: Pathway or network processing is defined as a subclass of Operation (typed), encompassing activities that generate, analyze, or handle biological pathways or networks. Members of this class are characterized by the property restriction that they must have a topic involving molecular interactions, pathways, and networks. This ensures that all pathway or network processing operations are specifically concerned with the management or investigation of biological molecular interaction systems.\nAxiom: {'subClassOf': ['Operation (typed)'], 'propertyRestrictions': ['[has topic only Molecular interactions, pathways or networks]']}\nGenerated CQs:", "output": "Is it required that Pathway or network processing has topic that involves Molecular interactions, pathways, and networks? | Can any instance of Pathway or network processing be described without referencing Molecular interactions, pathways, and networks as a topic? | Must all Pathway or network processing activities relate to at least one topic of Molecular interactions, pathways, and networks? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein disordered structure\nDescription: Protein disordered structure is defined as a subclass of Protein sites, features and motifs. It refers to regions within a protein that lack a fixed or ordered three-dimensional structure. This class captures concepts related to structural disorder in proteins, distinguishing such regions as important features within the broader context of protein sites, features, and motifs.\nAxiom: {'subClassOf': ['Protein sites, features or motifs']}\nGenerated CQs:", "output": "Is Protein disordered structure classified under the category of Protein sites, features and motifs? | Which specific types are encompassed by Protein sites, features and motifs, including Protein disordered structure? | What are the broader ontological categories to which Protein disordered structure belongs? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GeneData Expressionist Analyst v4.0.5\nDescription: GeneData Expressionist Analyst v4.0.5 is a subclass of software. It is specifically characterized as the output of a software publishing process in which Genedata participates. This definition ensures that any instance of this class is a software artifact resulting from such a process involving Genedata.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[output of some (software publishing process or [has participant hasValue Genedata])]']}\nGenerated CQs:", "output": "Is it required that the output of GeneData Expressionist Analyst v4.0.5 results from a software publishing process involving Genedata as a participant? | Does every output generated by GeneData Expressionist Analyst v4.0.5 have to originate from a software publishing process with Genedata as a participant? | Can an output of GeneData Expressionist Analyst v4.0.5 be produced without Genedata being a participant in the relevant software publishing process? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein property calculation\nDescription: Protein property calculation is defined as a subclass of Calculation, Protein analysis, and Prediction and recognition (protein), and is characterized by producing outputs related to Protein properties and being focused on topics concerning Protein properties. This class includes methods for rendering and visualizing properties of protein sequences, and is concerned with calculating or predicting physical or chemical properties of a protein, including any non-positional properties derived from processing the molecular sequence.\nAxiom: {'subClassOf': ['Calculation', 'Protein analysis', 'Prediction and recognition (protein)'], 'propertyRestrictions': ['[has output some Protein property]', '[has topic only Protein properties]']}\nGenerated CQs:", "output": "Is it required that protein property calculations always involve at least one topic related to protein properties? | Can a protein property calculation be associated with topics other than protein properties? | Does every protein property calculation explicitly reference at least one specific protein property through its topic? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MVCClass\nDescription: MVCClass is defined as a subclass of software, characterized by several property restrictions. Any member of MVCClass must have specified data input and output, both of which are data entities that conform to the R data frame format specification. Additionally, each MVCClass is executed within a data visualization context and is encoded in the R programming language. This ensures MVCClass instances are dedicated software components facilitating R data frame inputs and outputs, utilized specifically in R-based data visualization processes.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is executed in some data visualization]', '[is encoded in some R language]', '[has specified data input some (data and [has format specification some R data frame])]', '[has specified data output some (data or [has format specification some R data frame])]']}\nGenerated CQs:", "output": "Is every MVCClass required to provide at least one data output that is a data instance formatted as an R data frame? | Can an MVCClass be considered valid if it produces a data output that does not adhere to the R data frame format specification? | Does the requirement for MVCClass data output necessitate both the presence of data and its conformity to the R data frame format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Disease ID\nDescription: Disease ID is defined as a subclass of both Identifier (typed) and Accession. It serves specifically as an identifier for entries in disease databases and is constrained by the property that it must be an identifier of some Disease report. This formalization ensures that any Disease ID is associated uniquely with disease records.\nAxiom: {'subClassOf': ['Identifier (typed)', 'Accession'], 'propertyRestrictions': ['[is identifier of only Disease report]']}\nGenerated CQs:", "output": "Is every Disease ID required to serve as the identifier for at least one Disease report? | Can a Disease report exist without being associated with a Disease ID as its identifier? | Does a Disease ID function exclusively as an identifier for Disease reports? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LMGene\nDescription: LMGene is defined as a subclass of software, specifically characterized by its association with gene expression analysis. Every LMGene instance must be encoded in the R programming language and requires a specified data input that is both a gene expression dataset and accompanied by a data format specification. LMGene must execute data normalization and linear modeling procedures, and it implements linear modeling methods. The resulting data output is required to be a data object, specifically structured as an R data frame, and specified with an appropriate data format specification. This formalization captures the core purpose and constraints of LMGene as software dedicated to linear modeling of gene expression data in R.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is encoded in some R language]', '[has specified data input some (Gene expression dataset and [has format specification some data format specification])]', '[implements some Linear modelling]', '[is executed in some Linear modelling]', '[has specified data output some (data and [has format specification some R data frame])]', '[is executed in only data normalization]']}\nGenerated CQs:", "output": "Is it necessary for every LMGene to be executed in some form of data normalization? | Does the definition of LMGene require that it is associated with at least one execution within data normalization? | Can an LMGene exist without participating in any data normalization process? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence motif format\nDescription: Sequence motif format is a subclass of Format (typed), representing formats specifically used to describe sequence motifs. Every instance of Sequence motif format is constrained by the property that it must be a format of at least one Sequence motif. This ensures that Sequence motif formats are exclusively intended for representing or storing sequence motif data, distinguishing them from other format types with different content foci.\nAxiom: {'subClassOf': ['Format (typed)'], 'propertyRestrictions': ['[is format of only Sequence motif]']}\nGenerated CQs:", "output": "Is every Sequence motif required to be the format for at least one format property? | Does there exist a format property that is the format of a Sequence motif? | Must each Sequence motif be associated with a specific format through the 'is format of' relationship? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RNA secondary structure visualisation\nDescription: RNA secondary structure visualisation is defined as a subclass of both RNA secondary structure analysis and Visualisation. It represents processes or tools that specifically visualize RNA secondary structures, including features such as knots and pseudoknots. Members of this class operate with at least one RNA secondary structure as input, ensuring the visualization pertains directly to RNA configurations. This class formalizes the role of visualization within the broader context of RNA structure analysis.\nAxiom: {'subClassOf': ['RNA secondary structure analysis', 'Visualisation'], 'propertyRestrictions': ['[has input only RNA secondary structure]']}\nGenerated CQs:", "output": "Is it required that an RNA secondary structure visualisation has at least one input that is an RNA secondary structure? | Can an RNA secondary structure visualisation exist if it does not have any RNA secondary structure as input? | Does every RNA secondary structure visualisation necessarily operate on some RNA secondary structure as its input? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence alignment ID\nDescription: Sequence alignment ID is defined as a subclass of both Identifier (typed) and Accession, and is restricted such that it serves as an identifier for some Sequence alignment instance. It is used as the identifier of a molecular sequence alignment, for example a record from an alignment database. This formalization ensures that any instance of Sequence alignment ID uniquely identifies a sequence alignment, and maintains compatibility with identifier and accession structures in related ontologies.\nAxiom: {'subClassOf': ['Identifier (typed)', 'Accession'], 'propertyRestrictions': ['[is identifier of only Sequence alignment]']}\nGenerated CQs:", "output": "Is it required for an identifier to always refer to at least one sequence alignment? | Does every value of the sequence alignment ID property correspond to a sequence alignment instance? | Can a sequence alignment ID exist without being the identifier of any sequence alignment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: genomeIntervals\nDescription: genomeIntervals is defined as a subclass of software, specifically designed for execution in descriptive statistical calculations within genomics contexts. Instances of this class are published exclusively by Bioconductor, and are encoded in the R programming language. They accept input data strictly in GFF or R data frame formats, and produce output data solely as R data frames. This formalization ensures that any genomeIntervals resource adheres to Bioconductor's publication standards, operates within the R ecosystem, and supports defined data interoperability via precise input/output format restrictions.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is executed in some descriptive statistical calculation]', '[is published by hasValue Bioconductor]', '[has specified data output some [has format specification only R data frame]]', '[is encoded in some R language]', '[has specified data input only [has format specification only (GFF and R data frame)]]']}\nGenerated CQs:", "output": "Is it required that genomeIntervals has at least one specified data input whose format specification includes both GFF and R data frame? | Can a genomeIntervals entity have a specified data input with a format specification that is not restricted to both GFF and R data frame? | Does the property restriction mean that all specified data inputs for genomeIntervals must satisfy the condition of having both GFF and R data frame as their format specification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Quadruplex formation site detection\nDescription: Quadruplex formation site detection is a subclass of nucleic acid sequence feature detection, specifically focused on identifying regions within nucleotide sequences capable of forming quadruplex (4-stranded) structures. These quadruplexes, typically arising from guanine-rich regions, play important roles in biological processes and are potential therapeutic targets. The class is characterized by its association with nucleic acid structure prediction as a topic and the output of nucleic acid structure reports, ensuring that any instance of this class involves the detection and reporting of quadruplex-forming motifs.\nAxiom: {'subClassOf': ['Nucleic acid sequence feature detection'], 'propertyRestrictions': ['[has topic some Nucleic acid structure prediction]', '[has output only Nucleic acid structure report]']}\nGenerated CQs:", "output": "Does the detection of a quadruplex formation site require producing at least one nucleic acid structure report as output? | Is it necessary that any output generated by quadruplex formation site detection includes a nucleic acid structure report? | Can the output of quadruplex formation site detection be something other than a nucleic acid structure report? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ChipReader 3.1\nDescription: ChipReader 3.1 is defined as a subclass of software. Any instance of ChipReader 3.1 is the output of at least one software publishing process in which Bio-Rad Laboratories, Inc. is a participant. This formalization captures the provenance of ChipReader 3.1, ensuring that each instance is uniquely associated with publishing activities involving Bio-Rad Laboratories, Inc.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[output of some (software publishing process or [has participant hasValue Bio-Rad Laboratories, Inc.])]']}\nGenerated CQs:", "output": "Does a ChipReader always produce output from at least one software publishing process that involves Bio-Rad Laboratories, Inc. as a participant? | Can a ChipReader generate any output without being linked to a software publishing process in which Bio-Rad Laboratories, Inc. participates? | Is it necessary for every ChipReader output to originate from a software publishing process that includes Bio-Rad Laboratories, Inc. as a participant? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylogenetic tree distances calculation\nDescription: Phylogenetic tree distances calculation is a subclass of Phylogenetic tree comparison, representing the process of comparing two or more phylogenetic trees specifically to calculate distances between them. Any instance of this class must have at least one output that is a type of Phylogenetic tree distances. This formalizes the concept of measuring differences or similarities between phylogenetic trees by producing quantitative distance values as results.\nAxiom: {'subClassOf': ['Phylogenetic tree comparison'], 'propertyRestrictions': ['[has output only Phylogenetic tree distances]']}\nGenerated CQs:", "output": "Does every instance of 'Phylogenetic tree distances calculation propertyRestrictions' necessarily produce at least one output of type 'Phylogenetic tree distances'? | Is it required that a 'Phylogenetic tree distances calculation propertyRestrictions' process has an output that is a 'Phylogenetic tree distances' entity? | Can a 'Phylogenetic tree distances calculation propertyRestrictions' exist without generating any 'Phylogenetic tree distances' as output? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DNA translation\nDescription: DNA translation is defined as a subclass of Sequence conversion, where the process involves converting one type of biological sequence into another. It is further characterized by having the topic of Protein expression, indicating its role in the generation of proteins. The class is described as the process that translates a DNA sequence into a protein, formalizing its biological role in interpreting genetic information to produce functional proteins.\nAxiom: {'subClassOf': ['Sequence conversion'], 'propertyRestrictions': ['[has topic only Protein expression]']}\nGenerated CQs:", "output": "Does DNA translation always have the topic of protein expression? | Is it necessary for DNA translation to be associated with some aspect of protein expression? | Can an instance of DNA translation exist without being linked to protein expression through the 'has topic' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Genetic code identifier\nDescription: Genetic code identifier is defined as a subclass of Identifier (typed) and is characterized by the property that it acts as an identifier of some Genetic code. Members of this class are used to uniquely identify genetic codes, ensuring precise association between the identifier and the represented genetic code. This formalization supports the role of such identifiers within ontological and bioinformatics contexts.\nAxiom: {'subClassOf': ['Identifier (typed)'], 'propertyRestrictions': ['[is identifier of only Genetic code]']}\nGenerated CQs:", "output": "Is every genetic code identifier necessarily associated with at least one genetic code? | Can a genetic code identifier exist without identifying a genetic code? | Are there genetic entities other than genetic codes that may be identified by a genetic code identifier? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Prediction and recognition (protein)\nDescription: Prediction and recognition (protein) is a subclass of Prediction and recognition, defined by its role in predicting, recognising, detecting, or identifying properties specific to proteins. This class encompasses processes, methods, or functions aimed at analyzing and determining various attributes or characteristics of proteins, such as structure, function, or presence.\nAxiom: {'subClassOf': ['Prediction or recognition']}\nGenerated CQs:", "output": "Is Prediction and recognition (protein) classified under Prediction and recognition? | Which specific classes are included within Prediction and recognition, such as Prediction and recognition (protein)? | What broader categories does Prediction and recognition (protein) fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ramachandran plot validation\nDescription: Ramachandran plot validation is a subclass of Dihedral angle validation, defined as the process of validating a Ramachandran plot for a protein structure. Instances of this class take a Ramachandran plot as input and produce a Protein structural quality report as output. This validation assesses the conformational quality of protein structures based on their dihedral angles, supporting rigorous structural bioinformatics analyses.\nAxiom: {'subClassOf': ['Dihedral angle validation'], 'propertyRestrictions': ['[has input some Ramachandran plot]', '[has output only Protein structural quality report]']}\nGenerated CQs:", "output": "Is it required that a Ramachandran plot validation always produces at least one Protein structural quality report as output? | Can every output generated by a Ramachandran plot validation be classified as a Protein structural quality report? | Does a Ramachandran plot validation ever produce an output that is not a Protein structural quality report? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: BasReader 3.01\nDescription: BasReader 3.01 is defined as a subclass of software. Members of this class are exclusively characterized as outputs produced by a software publishing process in which the participant Raytest is involved. This formalization ensures that BasReader 3.01 instances are software entities resulting from processes that specifically include Raytest as a participant.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[output of some (software publishing process or [has participant hasValue Raytest])]']}\nGenerated CQs:", "output": "Must any output of the BasReader 3.01 propertyRestrictions include results from a software publishing process that involves Raytest as a participant? | Is it necessary that BasReader 3.01 propertyRestrictions only produce outputs related to a software publishing process where Raytest is involved? | Can an output of BasReader 3.01 propertyRestrictions exist without stemming from a software publishing process in which Raytest is a participant? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: globaltest\nDescription: globaltest is defined as a subclass of software with several specific characteristics. It is encoded in the R programming language and is published by Bioconductor. Instances of this class are designed to be executed within the context of descriptive statistical calculations. A globaltest implementation must have specified data input in the form of a gene expression dataset and produces specified data output, which can be either a graph plot or an R data frame (and only in the R data frame format). The class also includes a restriction that it implements the globaltest method. This formalization captures the essential features and functional requirements of the globaltest software component within a bioinformatics or statistical analysis context.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is encoded in some R language]', '[is published by hasValue Bioconductor]', '[is executed in some descriptive statistical calculation]', '[has specified data output some (Graph plot and [has format specification only R data frame])]', '[implements some globaltest]', '[has specified data input only Gene expression dataset]']}\nGenerated CQs:", "output": "Is it required for a globaltest propertyRestrictions instance to have at least one specified data input that is a Gene expression dataset? | Can a globaltest propertyRestrictions entity exist without a specified data input of the Gene expression dataset type? | Does globaltest propertyRestrictions necessarily involve having a specified data input related to Gene expression datasets? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene expression QTL analysis\nDescription: Gene expression QTL analysis is defined as a subclass of Gene expression data analysis, characterized by combining classical quantitative trait loci (QTL) analysis with gene expression profiling to identify cis- and trans-regulatory elements influencing the expression of phenotype-associated genes. Members of this class are further defined by the requirement that their analysis outputs include either a Pathway or network report, reflecting the integrative nature of the results produced.\nAxiom: {'subClassOf': ['Gene expression data analysis'], 'propertyRestrictions': ['[has output only Pathway or network report]']}\nGenerated CQs:", "output": "Does every Gene expression QTL analysis necessarily produce at least one output that is either a Pathway report or a Network report? | Is it possible for the output of a Gene expression QTL analysis to be something other than a Pathway report or Network report? | Are Pathway and Network reports the only required types of outputs generated by Gene expression QTL analysis? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Taxonomy\nDescription: Taxonomy is defined as a subclass of data and evolutionary biology, focusing specifically on topics related to phylogeny. Members of this class involve the classification, identification, and naming of organisms, ensuring a systematic approach to understanding biological diversity and evolutionary relationships. The class is formally restricted to instances that are concerned with at least some aspect of phylogeny, aligning with its central role in evolutionary studies.\nAxiom: {'subClassOf': ['data', 'Evolutionary biology'], 'propertyRestrictions': ['[has topic only Phylogeny]']}\nGenerated CQs:", "output": "Is it required that any Taxonomy has at least one topic related to Phylogeny? | Does every instance of Taxonomy necessarily include a topic concerning Phylogeny? | Can a Taxonomy exist without having any topic involving Phylogeny? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: pcaMethods\nDescription: pcaMethods is a subclass of software designed for data analysis. It is encoded in the R language and published by Bioconductor. This class implements several algorithms, including Bayesian Model, Expectation-Maximization (EM) algorithm, Nonlinear Estimation by Iterative Partial Least Squares, and the SVDimpute algorithm. It operates within contexts of data visualization and cross-validation. The software requires data inputs strictly in R data frame format, and its outputs specifically include graphical plots.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[implements some (Bayesian Model and Expectation-Maximization(EM) algorithm and Nonlinear Estimation by Iterative Partial Least Squares and SVDimpute algorithm)]', '[is published by hasValue Bioconductor]', '[has specified data output some Graph plot]', '[is executed in some (data visualization and cross validation)]', '[has specified data input some [has format specification only R data frame]]', '[is encoded in only R language]']}\nGenerated CQs:", "output": "Is it required that every PCA method implementation is encoded using the R language? | Can a PCA method exist without being encoded in the R language? | Does the ontology restrict PCA methods to only those that are encoded in the R language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence checksum generation\nDescription: Sequence checksum generation is defined as a subclass of Generation. It requires, via property restrictions, that it has input some Sequence and is related to the topic of Data acquisition. Individuals of this class involve processes where a checksum is generated for a molecular sequence, serving as a method for verifying data integrity in the context of molecular data acquisition.\nAxiom: {'subClassOf': ['Generation'], 'propertyRestrictions': ['[has input some Sequence]', '[has topic only Data acquisition]']}\nGenerated CQs:", "output": "Must every sequence checksum generation be associated with at least one data acquisition topic? | Is it possible for sequence checksum generation to have a topic other than data acquisition? | Does sequence checksum generation necessarily involve the property 'has topic' connecting it to data acquisition? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein chemical modifications\nDescription: Protein chemical modifications is defined as a subclass of Protein sites, features and motifs. It refers to the topic concerning the chemical modification of a protein, encompassing alterations that affect specific protein sites or motifs. This class formalizes the grouping of all concepts related to protein chemical modifications within the broader context of protein features.\nAxiom: {'subClassOf': ['Protein sites, features or motifs']}\nGenerated CQs:", "output": "Are protein chemical modifications classified under the broader category of protein sites, features and motifs? | What specific subclasses exist within protein sites, features and motifs, including protein chemical modifications? | Which higher-level classes encompass protein chemical modifications? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Codon usage bias calculation\nDescription: Codon usage bias calculation is defined as a subclass of codon usage analysis. It is characterized by the production of at least one codon usage bias result as output. Members of this class specifically perform the calculation of codon usage bias, formally ensuring that any process or method classified here must output some form of codon usage bias metric as part of its analysis.\nAxiom: {'subClassOf': ['Codon usage analysis'], 'propertyRestrictions': ['[has output only Codon usage bias]']}\nGenerated CQs:", "output": "Does every calculation of codon usage bias necessarily produce at least one output of the type Codon usage bias? | Is it required that a codon usage bias calculation yields an output within the Codon usage bias category? | Can a codon usage bias calculation exist without generating any Codon usage bias as output? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: OrderedList\nDescription: OrderedList is a subclass of software designed for differential expression analysis. It requires as input a gene expression dataset with an associated data format specification, and outputs a gene list, also accompanied by a format specification. OrderedList is implemented in the R programming language, executes within a differential expression analysis context, and provides similarity scoring functionality. These axioms define OrderedList as specialized analysis software with well-defined input/output standards and analytical capabilities, constrained to the context of gene expression data.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data input some (Gene expression dataset and [has format specification some data format specification])]', '[implements some Similarity score]', '[is encoded in some R language]', '[has specified data output some (Gene list and [has format specification some data format specification])]', '[is executed in only differential expression analysis]']}\nGenerated CQs:", "output": "Is every OrderedList instance required to participate in at least one differential expression analysis through the is executed in property? | Can an OrderedList be present without being associated with any differential expression analysis via is executed in? | Which analyses must an OrderedList be involved in through the is executed in relationship? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Codon usage table\nDescription: Codon usage table is a subclass of data that specifically pertains to gene expression. It represents a structured table containing codon usage data calculated from one or more nucleic acid sequences. Such a table typically includes its name, optional comments, and columns listing codons alongside their corresponding usage data. Additionally, a codon usage table can be used to extract or represent a genetic code, providing valuable insights into the patterns of codon utilization associated with gene expression.\nAxiom: {'subClassOf': ['data'], 'propertyRestrictions': ['[has topic only Gene expression]']}\nGenerated CQs:", "output": "Is it required that every Codon usage table is associated with some aspect of Gene expression through the has topic property? | Can a Codon usage table exist without referencing Gene expression as a topic? | Does the presence of a 'has topic' relationship to Gene expression define Codon usage tables? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CRAM\nDescription: CRAM is a subclass of both Binary format and Alignment format (pair only), representing a file format used for storing pairwise alignments in a compressed binary representation. It is defined by its use of reference-based compression to efficiently encode alignment data, distinguishing it from other binary or alignment formats.\nAxiom: {'subClassOf': ['Binary format', 'Alignment format (pair some)']}\nGenerated CQs:", "output": "Is CRAM classified as a type of Alignment format (pair only)? | Which specific formats are categorized under Alignment format (pair only), and does this include CRAM? | What are the broader categories encompassing CRAM within alignment format classification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein cleavage sites\nDescription: Protein cleavage sites is a subclass of Protein sites, features and motifs, representing locations within a protein sequence where cleavage by a proteolytic enzyme or agent occurs. This class specifically captures the sites of proteolytic processing, which are essential for understanding post-translational modifications and protein maturation.\nAxiom: {'subClassOf': ['Protein sites, features or motifs']}\nGenerated CQs:", "output": "Are protein cleavage sites included as a specific type within protein sites, features and motifs? | What specialized categories exist under protein sites, features and motifs, such as protein cleavage sites? | Which broader classes encompass the concept of protein cleavage sites? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Pathway ID (PharmGKB)\nDescription: Pathway ID (PharmGKB) is defined as an identifier for pathways specifically within the PharmGKB database, which focuses on pharmacogenetics and pharmacogenomics. This class is a subclass of both ‘Pathway or network accession’ and ‘PharmGKB ID’, situating it as a specialized identifier that uniquely refers to biochemical pathways catalogued by PharmGKB.\nAxiom: {'subClassOf': ['PharmGKB ID', 'Pathway and network accession']}\nGenerated CQs:", "output": "Is Pathway ID (PharmGKB) classified as a kind of Pathway or network accession? | Which identifiers are encompassed under Pathway or network accession, including Pathway ID (PharmGKB)? | To which higher-level accession categories does Pathway ID (PharmGKB) belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: search engine\nDescription: search engine is defined as a subclass of software, and is formally equivalent to software that is executed in the context of web content search. This means that any instance of search engine must be a kind of software that operates specifically to facilitate the searching of web-based content.\nAxiom: {'subClassOf': ['software'], 'equivalentClass': ['(software or [is executed in some web content search])']}\nGenerated CQs:", "output": "Is every search engine necessarily a type of software that is executed in at least one web content search? | Can a search engine be precisely defined as the intersection of software and those entities executed within a web content search? | Is the class of search engines equivalent to software with the additional condition of being executed in some web content search? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: spikeLI\nDescription: spikeLI is defined as a subclass of software characterized by its implementation of some version of the Langmuir Isotherm. It is executed as part of both descriptive statistical calculation and differential expression analysis workflows. spikeLI is specifically encoded in the R language, accepts as input a gene expression dataset, and produces a graph plot as its specified output. This formalization captures spikeLI’s role as a specialized software tool for processing gene expression data and visualizing results through graphical plots.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[implements some Langmuir Isotherm]', '[is executed in some (descriptive statistical calculation and differential expression analysis)]', '[is encoded in some R language]', '[has specified data input some Gene expression dataset]', '[has specified data output only Graph plot]']}\nGenerated CQs:", "output": "Is it required that a spikeLI instance produces at least one data output that is a Graph plot? | Can a spikeLI ever have a specified data output that is not a Graph plot? | Are all specified data outputs of spikeLI necessarily instances of Graph plot? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Representative sequence identification\nDescription: Representative sequence identification is defined as a subclass of Sequence comparison. Individuals in this class are related to at least one topic involving sequence comparison (as specified by the property restriction: has topic some Sequence comparison). This class is concerned with the process of identifying a representative sequence from a set of sequences, generally utilizing pair-wise alignment scores or other sequence comparison methods.\nAxiom: {'subClassOf': ['Sequence comparison'], 'propertyRestrictions': ['[has topic only Sequence comparison]']}\nGenerated CQs:", "output": "Is it necessary for a Representative sequence identification to have the property 'has topic' associated with Sequence comparison? | Does every Representative sequence identification instance relate to at least one Sequence comparison through the 'has topic' property? | Can a Representative sequence identification exist without having 'has topic' connected to a Sequence comparison? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylogenetics\nDescription: Phylogenetics is defined as a subclass of Phylogeny. This means that all instances of Phylogenetics are also considered instances of Phylogeny, inheriting its general properties and characteristics, while potentially adding more specific features relevant to the study of evolutionary relationships among biological entities.\nAxiom: {'subClassOf': ['Phylogeny', 'Sequence analysis']}\nGenerated CQs:", "output": "Is Phylogenetics categorized as a specific type of Sequence analysis? | Which disciplines are classified under Sequence analysis, and does this include Phylogenetics? | What are the broader conceptual categories that encompass Phylogenetics within sequence studies? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TAIR accession (protein)\nDescription: TAIR accession (protein) is defined as a subclass of Sequence accession (protein), indicating that it represents a specific type of protein sequence accession. Every member of this class serves as an identifier for at least one Sequence record, establishing a direct relationship between the TAIR accession and the protein sequence data it references.\nAxiom: {'subClassOf': ['Sequence accession (protein)', 'TAIR accession'], 'propertyRestrictions': ['[is identifier of some Sequence record]']}\nGenerated CQs:", "output": "Is TAIR accession (protein) categorized under the general class of TAIR accession? | What are the subclasses defined within TAIR accession, including TAIR accession (protein)? | Which broader classes encompass TAIR accession (protein)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein dipole moment calculation\nDescription: Protein dipole moment calculation is a class representing processes or activities that produce, as output, some instance of Protein dipole moment. There are no asserted superclass or disjoint class relationships, but any individual of this class must have at least one output that is a Protein dipole moment, according to the property restriction specified.\nAxiom: {'subClassOf': ['Protein property calculation (from sequence)'], 'propertyRestrictions': ['[has output some Protein dipole moment]']}\nGenerated CQs:", "output": "Does Protein dipole moment calculation represent a specific instance of Protein property calculation (from sequence)? | Which calculation types are classified under Protein property calculation (from sequence), such as Protein dipole moment calculation? | What broader categories include Protein dipole moment calculation as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HilbertVis\nDescription: HilbertVis is defined as a subclass of software, with specific data input and output requirements. It processes data inputs that must be formatted either in GFF or BED, each with corresponding format specifications. Its data output consists of graph plots formatted as image files. HilbertVis is implemented in the R programming language and is executed as part of data normalization processes.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data input some (data and [has format specification some GFF])]', '[has specified data output some (Graph plot and [has format specification some image format])]', '[has specified data input some (data and [has format specification some BED])]', '[is encoded in some R language]', '[is executed in some data normalization]', '[is executed in some data visualization]']}\nGenerated CQs:", "output": "Is every HilbertVis instance required to be executed in at least one data visualization? | Can a HilbertVis exist without being associated with any data visualization? | Does the definition of HilbertVis ensure execution within the context of a data visualization? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Single particle analysis\nDescription: Single particle analysis is defined as a subclass of both Structure analysis and Image analysis. This indicates that it inherits characteristics from both parent classes and involves analytical methods associated with structural and image data. There are no additional property restrictions specified for this class.\nAxiom: {'subClassOf': ['Structure analysis', 'Image analysis'], 'propertyRestrictions': ['[has topic some Structural biology]']}\nGenerated CQs:", "output": "Is it required that single particle analysis has at least one topic related to structural biology? | Can single particle analysis be associated with a topic that is not structural biology? | Must every instance of single particle analysis involve structural biology as a topic? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene annotation format\nDescription: Gene annotation format is defined as a subclass of Format (typed), indicating that it is a specific type of data format designed for representing gene annotation information. There are no additional property restrictions specified for this class.\nAxiom: {'subClassOf': ['Format (typed)'], 'propertyRestrictions': ['[is format of some Gene report]']}\nGenerated CQs:", "output": "Is every gene annotation format necessarily associated with at least one gene report through the 'is format of' property? | Does a gene annotation format serve as the format specifically for some gene report? | For a given gene annotation format, can we identify at least one gene report that it formats by means of the 'is format of' relationship? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: 50-50 MANOVA\nDescription: 50-50 MANOVA is a subclass of software characterized by several key features. It is produced as the output of at least one software publishing process in which Matforsk participates. This software implements at least one 50-50 MANOVA algorithm and is encoded in some version of the MATLAB language. These axioms together specify its association with Matforsk, its computational method, and its programming environment.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[output of some (software publishing process and [has participant hasValue Matforsk])]', '[implements some 50-50 MANOVA algorithm]', '[is encoded in some MATLAB language]', '[is encoded in some R language]']}\nGenerated CQs:", "output": "Is it required that 50-50 MANOVA is always encoded in some R language? | Can 50-50 MANOVA exist without being encoded in an R language? | Does every instance of 50-50 MANOVA entail encoding in at least one R language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Immunoproteins, genes and antigens\nDescription: Immunoproteins, genes and antigens is defined as a subclass of Protein families, indicating that all members of this class are specialized groups within the broader set of protein families. This classification formally associates immunoproteins, relevant genes, and antigens with the functional and structural characteristics typical of protein families.\nAxiom: {'subClassOf': ['Protein families', 'Immunology']}\nGenerated CQs:", "output": "Are Immunoproteins, genes and antigens classified as a subgroup under Immunology? | Which classes fall under the broader category of Immunology, including Immunoproteins, genes and antigens? | What are the higher-level categories to which Immunoproteins, genes and antigens are assigned? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene expression profile clustering\nDescription: Gene expression profile clustering is defined as a subclass of both Clustering and Gene expression profile comparison. This class encompasses methodologies that group gene expression profiles based on their similarities, thus facilitating comparative analyses. Members of this class inherit characteristics from both parent classes and represent processes or algorithms specifically focused on organizing gene expression data into distinct clusters for further interpretation.\nAxiom: {'subClassOf': ['Clustering', 'Gene expression profile comparison'], 'propertyRestrictions': ['[has output some Processed microarray data]']}\nGenerated CQs:", "output": "Does every gene expression profile clustering necessarily produce at least one output of processed microarray data? | Is it required that gene expression profile clustering leads to the availability of processed microarray data as an output? | Can there be a gene expression profile clustering without resulting in any processed microarray data as output? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dat\nDescription: dat is defined as a subclass of both Textual format and Gene expression report format. This means all individuals classified as dat are considered textual formats specifically used for gene expression reporting. No additional property restrictions are specified for this class.\nAxiom: {'subClassOf': ['Textual format', 'Gene expression report format'], 'propertyRestrictions': ['[is format of some Microarray spots image]']}\nGenerated CQs:", "output": "Is it required that propertyRestrictions has the format property with some Microarray spots image? | Does every instance of propertyRestrictions involve a format that includes at least one Microarray spots image? | Can propertyRestrictions exist without being the format of any Microarray spots image? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: dasdna\nDescription: dasdna is defined as a subclass of XML, meaning every dasdna instance is also an instance of XML. No additional axioms specify further restrictions or characteristics, so dasdna inherits all properties of XML without further constraint.\nAxiom: {'subClassOf': ['XML', 'Sequence record format (XML)']}\nGenerated CQs:", "output": "Is dasdna categorized as a specific type within Sequence record format (XML)? | What formats are considered narrower concepts under Sequence record format (XML), such as dasdna? | Which broader format classifications does dasdna fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: pure dna\nDescription: pure dna is defined as a subclass of dna, meaning every instance of pure dna is also an instance of dna. This formalization indicates that pure dna inherits all properties and characteristics of dna, but no further constraints or distinctions are specified in the given axiom.\nAxiom: {'subClassOf': ['dna', 'pure nucleotide']}\nGenerated CQs:", "output": "Does pure dna qualify as an instance within the pure nucleotide category? | Which specific entities are classified under pure nucleotide, including pure dna? | To which broader classes is pure dna hierarchically associated? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CAF\nDescription: CAF is defined as a subclass of Sequence assembly format (text), indicating that it is a specialized text-based format used for representing assembled biological sequence data. Every CAF is a type of Sequence assembly format (text), inheriting all its general properties and characteristics.\nAxiom: {'subClassOf': ['Sequence assembly format (text)', 'Textual format']}\nGenerated CQs:", "output": "Does CAF fall under the category of Textual format? | What kinds of Textual format include CAF as a more specific type? | What broader categories encompass CAF in the ontology hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein interaction network comparison\nDescription: Protein interaction network comparison is defined as a subclass of Protein function comparison. This means that every instance of Protein interaction network comparison is also an instance of Protein function comparison, inheriting all of its general properties, but focusing specifically on the comparative analysis of protein interaction networks rather than other types of protein function comparisons.\nAxiom: {'subClassOf': ['Protein function comparison', 'Protein interaction network analysis']}\nGenerated CQs:", "output": "Is Protein interaction network comparison categorized as a specific kind of Protein interaction network analysis? | Which analysis methods are subclassed under Protein interaction network analysis, such as Protein interaction network comparison? | What broader analytical categories does Protein interaction network comparison inherit from? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: quantsmooth\nDescription: quantsmooth is defined as a subclass of software that is encoded in the R programming language. It is specifically designed to be executed as part of data visualization processes. Additionally, any instance of quantsmooth requires specified data input that must be either ILLUMINA data or a Gene expression dataset. These axioms ensure that quantsmooth is formally categorized as R-based software intended for data visualization applications within the domains of genomic or gene expression data analysis.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is encoded in some R language]', '[is executed in some data visualization]', '[has specified data input some (ILLUMINA data or Gene expression dataset)]', '[has specified data output some Graph plot]']}\nGenerated CQs:", "output": "Is it required that Quantsmooth must produce at least one specified data output that is a Graph plot? | Can Quantsmooth generate a specified data output other than a Graph plot? | Does Quantsmooth always provide a specified data output in the form of a Graph plot? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Smultron\nDescription: Smultron is defined as a subclass of software. Any individual of this class must be executed in the context of some text editing, and is characterized by having a version with the value 3.5.1. Smultron requires as specified data input at least one ontology, where the ontology must have a format specification involving some textual format. Furthermore, any instance of Smultron must have a declared status categorized as a latest release. This formalization ensures that Smultron is represented as a specific software release used for text editing, handling ontologies in textual formats.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is executed in some text editing]', '[has version hasValue 3.5.1]', '[has specified data input some (Ontology and [has format specification some Textual format])]', '[has declared status some Latest release]', '[has website homepage hasValue http://www.peterborgapps.com/smultron/]']}\nGenerated CQs:", "output": "Is Smultron required to have the website homepage value set to http://www.peterborgapps.com/smultron/? | Does every instance of Smultron have the website homepage http://www.peterborgapps.com/smultron/? | Can a Smultron entity have a website homepage other than http://www.peterborgapps.com/smultron/? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: BAI\nDescription: BAI is defined as a subclass of Data index format. This indicates that every BAI instance is a specific type of Data index format, inheriting all characteristics of data indexing formats, without additional property restrictions.\nAxiom: {'subClassOf': ['Data index format'], 'propertyRestrictions': ['[is format of some Data index]']}\nGenerated CQs:", "output": "Is it required that every BAI is the format of at least one Data index? | Can a BAI exist without being the format of any Data index? | Does the definition of BAI permit it to be the format for multiple Data indices? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ontology format\nDescription: Ontology format is defined as a subclass of Format (typed), indicating that every ontology format is a specialized form of typed format. There are no additional property restrictions specified for this class.\nAxiom: {'subClassOf': ['Format (typed)'], 'propertyRestrictions': ['[is format of some Ontology]']}\nGenerated CQs:", "output": "Does every property restriction necessarily serve as the format of at least one ontology? | Is it required that a property restriction be associated with some ontology through the 'is format of' relationship? | For each property restriction, does there exist an ontology of which it is the format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Endnote\nDescription: Endnote is a software class characterized by several specific features: it has at least one graphical user interface, operates under a proprietary commercial software license, and is currently in live status. Each Endnote instance must have the homepage http://www.endnote.com/ as its website. It is executed within the context of citation management. Additionally, Endnote is the output of a software publishing process that involves Thompson Reuters as a participant.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has interface some graphical user interface]', '[has license some Proprietary commercial software license]', '[has declared status some Live]', '[has website homepage hasValue http://www.endnote.com/]', '[is executed in some citation management]', '[output of some (software publishing process and [has participant hasValue Thompson Reuters])]']}\nGenerated CQs:", "output": "Does Endnote fall under the broader classification of software? | What specific types are listed as subclasses of software, including Endnote? | Which higher-level categories include Endnote within their hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: BAR\nDescription: BAR is defined as a subclass of Binary format, meaning every BAR instance is also considered a Binary format. There are no additional property restrictions specified, so BAR inherits all characteristics and constraints of Binary format without further specialization.\nAxiom: {'subClassOf': ['Binary format'], 'propertyRestrictions': ['[is published by hasValue Affymetrix]']}\nGenerated CQs:", "output": "Is every instance of BAR necessarily published by Affymetrix? | Can a BAR exist if it is not published by Affymetrix? | Does BAR exclusively have the 'is published by' property value set to Affymetrix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MPL\nDescription: MPL is defined as a subclass of software license. Any instance of MPL must include at least one clause related to distribution with notices, indicating that redistribution under this license requires providing specific notifications or documentation.\nAxiom: {'subClassOf': ['software license'], 'propertyRestrictions': ['[has clause some Distribution with notices]', '[has clause some Source code available]']}\nGenerated CQs:", "output": "Is it required that every MPL instance includes at least one clause where source code is available? | Can an MPL be considered valid if it lacks any clause with available source code? | Does the existence of a clause with source code availability suffice for an MPL to meet its property restrictions? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Text mining\nDescription: Text mining is defined as a subclass of Analysis, focusing specifically on mining information from text data. By axiom, any instance of Text mining must be related to Data mining as a topic (i.e., it analyzes or investigates themes related to data mining) and must produce at least one Text mining report as output. This ensures that all activities or processes classified as Text mining are a type of analysis centered on data mining topics and result in formal text mining reports.\nAxiom: {'subClassOf': ['Analysis'], 'propertyRestrictions': ['[has topic some Data mining]', '[has output some Text mining report]', '[has input some Report]']}\nGenerated CQs:", "output": "Can every instance of Text mining be associated with at least one Report as input? | Is it required that a Text mining process uses a Report as an input? | Does the definition of Text mining ensure that it operates only when a Report is provided as input? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SAGx\nDescription: SAGx is defined as a class of entities that implement at least linear modelling and t-test statistical methods. Every member of this class is published specifically by Bioconductor and must accept as input a graph plot with data strictly formatted as an R data frame. Additionally, all instances of SAGx are encoded in the R programming language. These axioms formally specify the functional, provenance, data input, and implementation characteristics of this class.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': [\"[implements some (Linear modelling and 't-test')]\", '[is published by hasValue Bioconductor]', '[has specified data input some (Graph plot and [has format specification only R data frame])]', '[is encoded in some R language]']}\nGenerated CQs:", "output": "Is SAGx classified under the broader category of software? | Which types fall under the classification of software, including SAGx? | What overarching categories encompass SAGx within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Splice transcript prediction\nDescription: Splice transcript prediction is defined as a subclass of Splicing model analysis. This class represents analyses specifically focused on predicting transcript isoforms that result from RNA splicing events. No additional property restrictions are specified for this class.\nAxiom: {'subClassOf': ['Splicing model analysis'], 'propertyRestrictions': ['[has topic some Gene structure]']}\nGenerated CQs:", "output": "Is it required that every splice transcript prediction is associated with at least one gene structure through the 'has topic' property? | Can a splice transcript prediction exist without having the 'has topic' relation to a gene structure? | Does the 'has topic' property for splice transcript prediction necessarily include a gene structure as its value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: mspcrunch\nDescription: mspcrunch is defined as a subclass of Database hits (sequence) format, indicating that it represents a specific type of sequence data format used for recording database hits. Any individual classified as mspcrunch inherently possesses all the characteristics of Database hits (sequence) format. No additional restrictions or distinguishing features are specified in the current axioms.\nAxiom: {'subClassOf': ['Database hits (sequence) format', 'Textual format']}\nGenerated CQs:", "output": "Is mspcrunch categorized as a subtype of Textual format? | Which specific types fall under the broader class of Textual format, including mspcrunch? | What higher-level format classes does mspcrunch inherit from? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Epitope mapping\nDescription: Epitope mapping is a subclass of protein sequence feature detection, characterized by the requirement that it is related to at least one topic in immunology. Individuals of this class are processes or analyses focused on identifying specific regions (epitopes) within protein sequences that are relevant to immune responses.\nAxiom: {'subClassOf': ['Protein sequence feature detection', 'Mapping'], 'propertyRestrictions': ['[has topic some Immunology]']}\nGenerated CQs:", "output": "Does Epitope mapping fall under the general category of Mapping? | What specialized types are encompassed by Mapping, with reference to Epitope mapping? | Which broader concepts does Epitope mapping inherit from within the hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RBioinf\nDescription: RBioinf is a subclass of software, characterized by handling both data input and output with specific format requirements. It accepts as input data that must be in the form of an R data frame (enforcing a restriction on the input format) and produces output data that is an image, with a further constraint that the image must conform to a recognized image format. Additionally, RBioinf implements some form of linear modelling, indicating that it provides or supports linear modeling functionalities as part of its software capabilities.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data output some (Image and [has format specification some image format])]', '[has specified data input some (data and [has format specification some R data frame])]', '[implements some Linear modelling]', '[is encoded in some R language]']}\nGenerated CQs:", "output": "Is every instance of RBioinf required to be encoded in at least one R language? | Can RBioinf exist without being associated through the 'is encoded in' property with any R language? | Does the 'is encoded in' property for RBioinf necessarily involve an R language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NMR spectrum\nDescription: NMR spectrum is defined as a class of entities with the property that they are associated with at least one topic in structural biology. This means any individual classified as an NMR spectrum must have a connection to structural biology through the has topic property.\nAxiom: {'subClassOf': ['Spectrum'], 'propertyRestrictions': ['[has topic some Structural biology]']}\nGenerated CQs:", "output": "Does NMR spectrum fall under the category of Spectrum? | What types of Spectrum include NMR spectrum as a specialized form? | Which more general classes encompass the NMR spectrum? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cell type name\nDescription: Cell type name is defined as a subclass of Name, meaning it inherits all characteristics of Name but specifically refers to names used for identifying cell types. No additional constraints or disjointness axioms are asserted for this class.\nAxiom: {'subClassOf': ['Name', 'Cell type identifier']}\nGenerated CQs:", "output": "Is Cell type name categorized under Cell type identifier? | Which specific cell type names are encompassed by Cell type identifier? | What broader classes does Cell type name fall within according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TreeBASE format\nDescription: TreeBASE format is defined as a subclass of Phylogenetic tree format (text), indicating that it represents a specific kind of text-based format for encoding phylogenetic trees. All individuals in this class must conform to the general characteristics and constraints of text-based phylogenetic tree formats as defined by its superclass.\nAxiom: {'subClassOf': ['Phylogenetic tree format (text)', 'Textual format']}\nGenerated CQs:", "output": "Does TreeBASE format fall under the category of Textual format? | Which specialized formats are encompassed by Textual format, including TreeBASE format? | What broader classifications include TreeBASE format as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: OmniOutliner\nDescription: OmniOutliner is a subclass of software characterized by several specific property restrictions. It is the output of software development and software publishing processes in which the participant is Omni. The software is intended to be executed in the context of document outlining. Its official website is http://www.omnigroup.com/products/omnioutliner/, and it is distributed under some form of proprietary commercial software license.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[output of some (software development process and [has participant hasValue Omni])]', '[is executed in some document outlining]', '[output of some (software publishing process and [has participant hasValue Omni])]', '[has website homepage hasValue http://www.omnigroup.com/products/omnioutliner/]', '[has license some Proprietary commercial software license]', '[has specified data output some (data and [has format specification some OmniOutline format])]']}\nGenerated CQs:", "output": "Is it required for every OmniOutliner property restriction to specify data output in at least one data entity that has a format specification of OmniOutline format? | Does the existence of an OmniOutliner property restriction imply that there must be some data output conforming to the OmniOutline format? | Can an OmniOutliner property restriction exist without referencing any data output specified with the OmniOutline format? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gene ID (SGD)\nDescription: Gene ID (SGD) is defined as a subclass of SGD ID, indicating that every Gene ID (SGD) instance is also an instance of SGD ID. This class represents identifiers specifically assigned to genes within the SGD (Saccharomyces Genome Database), and inherits all characteristics specified for SGD IDs.\nAxiom: {'subClassOf': ['SGD ID', 'Gene ID']}\nGenerated CQs:", "output": "Is Gene ID (SGD) classified under the broader category of Gene ID? | What specific types are encompassed by the Gene ID class, including Gene ID (SGD)? | Which general identifier categories does Gene ID (SGD) fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Taverna workflow format\nDescription: Taverna workflow format is defined as a subclass of XML, meaning all instances of Taverna workflow format are also instances of XML. This formalizes that Taverna workflow format inherits all characteristics of XML, distinguishing it as a specific type of XML-based format used to represent scientific workflows.\nAxiom: {'subClassOf': ['XML', 'Workflow format']}\nGenerated CQs:", "output": "Is Taverna workflow format classified under the broader category of Workflow format? | What specific workflow formats, such as Taverna workflow format, are included within Workflow format? | Which higher-level categories does Taverna workflow format fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: limmaGUI\nDescription: limmaGUI is a subclass of software specifically designed to work with text data sets. It accepts text data sets as input and produces text data sets as output, with the output being restricted to those formatted strictly according to the TIFF specification. limmaGUI implements some form of linear modelling functionality and is published by Bioconductor. This formalization ensures that any instance of limmaGUI is a software application with clearly defined input/output requirements, supports linear modelling, and is associated with the Bioconductor publisher.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[has specified data output some (Text data set and [has format specification only TIFF])]', '[implements some Linear modelling]', '[is published by hasValue Bioconductor]', '[has specified data input some Text data set]', '[is encoded in some R language]']}\nGenerated CQs:", "output": "Is every instance of limmaGUI necessarily encoded in at least one R language implementation? | Can limmaGUI be encoded in any programming language other than R language? | Must limmaGUI have an encoding relationship specifically with the R language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein domain classification format\nDescription: Protein domain classification format is defined as a class of formats that are used specifically as formats of some Protein family report. Any instance of this class must serve as the format for at least one Protein family report, reflecting its role in organizing or structuring protein domain classification data.\nAxiom: {'subClassOf': ['Format (typed)'], 'propertyRestrictions': ['[is format of some Protein family report]']}\nGenerated CQs:", "output": "Is Protein domain classification format categorized as a more specific type of Format? | Which types fall under the broader classification of Format, including Protein domain classification format? | What higher-level categories does Protein domain classification format belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Virulence prediction\nDescription: Virulence prediction is a subclass of prediction and recognition, characterized by the requirement that its subject matter concerns microbiology. Any instance of virulence prediction must be related to at least one topic within the field of microbiology, ensuring a formal connection to biological processes or factors that influence pathogenicity.\nAxiom: {'subClassOf': ['Prediction and recognition', 'Sequence analysis'], 'propertyRestrictions': ['[has topic some Microbiology]']}\nGenerated CQs:", "output": "Is Virulence prediction recognized as a specific form of Sequence analysis? | Which analyses fall under the broader category of Sequence analysis, including Virulence prediction? | What parent categories encompass Virulence prediction within the ontology structure? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: bigWig\nDescription: bigWig is defined as a subclass of Sequence annotation track format, indicating that it represents a specific type of file format used for annotating sequences. Any individual classified as bigWig inherits all characteristics of sequence annotation track formats.\nAxiom: {'subClassOf': ['Sequence annotation track format', 'Binary format']}\nGenerated CQs:", "output": "Is bigWig classified under the broader Binary format category? | What Binary format subclasses exist, and does this include bigWig? | Which higher-level types encompass bigWig as a more specific instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CDF ASCII format\nDescription: CDF ASCII format is a subclass of ASCII format, indicating that every instance of CDF ASCII format is also an instance of ASCII format. There are no additional property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['ASCII format'], 'propertyRestrictions': ['[is published by hasValue Affymetrix]']}\nGenerated CQs:", "output": "Is every instance of the CDF ASCII format published exclusively by Affymetrix? | Must the publisher of any CDF ASCII format always be Affymetrix? | Can a valid CDF ASCII format have a publisher different from Affymetrix? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RDF format\nDescription: RDF format is defined as a subclass of XML, meaning every RDF format is considered a type of XML. This formalization indicates that RDF format inherits all characteristics of XML, situating it within the XML family of document representations.\nAxiom: {'subClassOf': ['XML', 'Ontology format']}\nGenerated CQs:", "output": "Is RDF format considered a more specific type within the broader category of Ontology format? | Which formats are classified as subclasses of Ontology format, including RDF format? | To what higher-level format categories does RDF format belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Transcription factor accession\nDescription: Transcription factor accession is defined as a subclass of both Accession and Transcription factor identifier. This means that every individual classified as a Transcription factor accession is recognized as both an Accession and a Transcription factor identifier, inheriting all their respective characteristics and constraints. This class is used to uniquely identify transcription factors through standardized accession identifiers.\nAxiom: {'subClassOf': ['Accession', 'Transcription factor identifier', 'Protein accession']}\nGenerated CQs:", "output": "Is a Protein accession a more general category that encompasses Transcription factor accession? | Which specific accessions fall under the category of Protein accession, including Transcription factor accession? | To which broader accession types does a Transcription factor accession belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Repeat sequence organisation analysis\nDescription: Repeat sequence organisation analysis is defined as a subclass of Sequence composition calculation. This means that any instance of Repeat sequence organisation analysis is also an instance of Sequence composition calculation, inheriting its characteristics and properties. The class focuses specifically on analyzing the organization of repeat sequences within the broader context of sequence composition calculations.\nAxiom: {'subClassOf': ['Sequence composition calculation', 'Repeat sequence analysis']}\nGenerated CQs:", "output": "Does Repeat sequence organisation analysis fall under the broader category of Repeat sequence analysis? | Which analyses are specific types included within Repeat sequence analysis, such as Repeat sequence organisation analysis? | What higher-level analysis categories encompass Repeat sequence organisation analysis? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Enzyme kinetics data\nDescription: Enzyme kinetics data is defined as a subclass of Protein property, representing properties specifically related to the kinetic behaviors and characteristics of enzymes. Any instance of enzyme kinetics data is recognized as a specific type of property associated with proteins, focusing on measurements such as reaction rates, substrate affinities, and catalytic constants.\nAxiom: {'subClassOf': ['Protein property', 'Reaction data']}\nGenerated CQs:", "output": "Does Enzyme kinetics data qualify as a more specific form of Reaction data? | Which data types are categorized under Reaction data, including Enzyme kinetics data? | To which higher-level data categories does Enzyme kinetics data pertain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RFAM accession\nDescription: RFAM accession is defined as a subclass of Accession, indicating that it inherits all properties and constraints of Accession while representing a specific type of accession identifier used within the RFAM database. No additional distinguishing axioms or restrictions are specified beyond its specialization as an Accession.\nAxiom: {'subClassOf': ['Accession', 'RNA family identifier']}\nGenerated CQs:", "output": "Does RFAM accession fall under the category of RNA family identifier? | Which identifiers are classified as more specific types of RNA family identifier, including RFAM accession? | What are the broader identifier categories that include RFAM accession? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GPCR coupling selectivity prediction\nDescription: GPCR coupling selectivity prediction is a subclass of both Protein interaction prediction and GPCR analysis, indicating that it concerns computational inference methods related to the interaction and functional analysis of G protein-coupled receptors (GPCRs). Every instance of this class is required to produce at least one output of type Protein report. This formalism ensures that any process or tool classified under GPCR coupling selectivity prediction must involve the analysis of GPCR coupling selectivity and result in a relevant protein report as output.\nAxiom: {'subClassOf': ['Protein interaction prediction', 'GPCR analysis', 'Protein property calculation (from sequence)'], 'propertyRestrictions': ['[has output some Protein report]']}\nGenerated CQs:", "output": "Does GPCR coupling selectivity prediction fall under the category of Protein property calculation (from sequence)? | Which concepts are classified as subclasses of Protein property calculation (from sequence), including GPCR coupling selectivity prediction? | What are the broader categories that encompass GPCR coupling selectivity prediction? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Scanning software G2565AA version A6.3.1\nDescription: Scanning software G2565AA version A6.3.1 is defined as a subclass of scanning software, inheriting all the general characteristics of scanning software without any additional distinguishing property-based restrictions.\nAxiom: {'subClassOf': ['scanning software'], 'propertyRestrictions': ['[is developed by hasValue Agilent Technologies]']}\nGenerated CQs:", "output": "Is Scanning software G2565AA version A6.3.1 necessarily developed by Agilent Technologies? | Can Scanning software G2565AA version A6.3.1 have a developer other than Agilent Technologies? | Does the property restriction require that Agilent Technologies is assigned as the developer for Scanning software G2565AA version A6.3.1? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InChI\nDescription: InChI is defined as a subclass of textual format, indicating that it represents a type of information expressed in text form. Every instance of InChI is therefore also a textual format, inheriting all characteristics of textual data representations.\nAxiom: {'subClassOf': ['Textual format', 'Chemical formula format']}\nGenerated CQs:", "output": "Is InChI classified as a more specific type of Chemical formula format? | What chemical formula formats encompass InChI as a subset? | Which broader categories does InChI, as a format, fall under? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Reference map name (SWISS-2DPAGE)\nDescription: Reference map name (SWISS-2DPAGE) is defined as a subclass of Name, indicating that every instance of Reference map name (SWISS-2DPAGE) is a specific kind of Name. There are no further restrictions or distinguishing axioms specified for this class.\nAxiom: {'subClassOf': ['Name', 'Gel ID']}\nGenerated CQs:", "output": "Does Reference map name (SWISS-2DPAGE) fall under the category of Gel ID? | Which types are classified as more specific than Gel ID, such as Reference map name (SWISS-2DPAGE)? | To which broader class or classes does Reference map name (SWISS-2DPAGE) belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Python 2.6\nDescription: Python 2.6 is defined as a class of entities for which the property 'has version' is restricted to have the value 'Python version 2.6'. Membership in this class requires that the entity is specifically associated with version 2.6 of Python.\nAxiom: {'subClassOf': ['Python'], 'propertyRestrictions': ['[has version hasValue Python version 2.6]']}\nGenerated CQs:", "output": "Does Python 2.6 fall under the broader classification of Python? | Which versions or variants are subclasses of Python, including Python 2.6? | Of which higher-level software languages is Python 2.6 a specific instance? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: cghMCR\nDescription: The class cghMCR represents a computational resource that is published by Bioconductor and implements some MCR algorithm. Instances of this class must be encoded in the R language and are executed in the context of data normalization. They require input data that is an R data frame (as specified by the input format) and produce output that includes graph plots and R data frames with explicit format specifications. This formalization ensures the resource strictly adheres to R-based input/output conventions and adheres to data normalization workflows within the Bioconductor ecosystem.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is published by hasValue Bioconductor]', '[is executed in some data normalization]', '[has specified data output some (Graph plot and [has format specification only R data frame])]', '[is encoded in some R language]', '[implements some MCR algorithm]', '[has specified data input some [has format specification only R data frame]]']}\nGenerated CQs:", "output": "Is cghMCR categorized under the broader class of software? | Which entities are specified as subclasses of software, such as cghMCR? | To what parent classes is cghMCR directly associated in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Feature Extraction Software\nDescription: Feature Extraction Software is defined as a subclass of Affymetrix GeneChip Operating Software. This classification indicates that every Feature Extraction Software is considered a specialized form of Affymetrix GeneChip Operating Software, inheriting all its characteristics. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['Affymetrix GeneChip Operating Software'], 'propertyRestrictions': ['[is executed in some feature extraction]']}\nGenerated CQs:", "output": "Must every Feature Extraction Software be associated with at least one instance of execution within a feature extraction process? | Is it a requirement that Feature Extraction Software instances operate within some kind of feature extraction context? | Can Feature Extraction Software exist without being executed in any feature extraction activity? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Agilent Technologies Software\nDescription: Agilent Technologies Software is defined as software that is an output of some software publishing process, where Agilent Technologies participates in the process. Formally, any instance of this class must result from a software publishing activity involving Agilent Technologies as a participant. This ensures that only software authored or published with Agilent Technologies' involvement is classified under this class.\nAxiom: {'subClassOf': ['software'], 'equivalentClass': ['[output of some (software publishing process and [has participant hasValue Agilent Technologies])]']}\nGenerated CQs:", "output": "Does Agilent Technologies Software fall under the broader classification of software? | Which specific categories are encompassed within the software class, such as Agilent Technologies Software? | What higher-level groups include Agilent Technologies Software as a member? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Phylogenetic tree generation (from molecular sequences)\nDescription: Phylogenetic tree generation (from molecular sequences) is defined as a subclass of Phylogenetic tree generation (data centric), indicating that it represents a specialized form of phylogenetic tree generation focusing specifically on the analysis and processing of molecular sequence data to construct phylogenetic trees. All characteristics and constraints of the parent class apply to this subclass.\nAxiom: {'subClassOf': ['Phylogenetic tree generation (data centric)', 'Sequence analysis']}\nGenerated CQs:", "output": "Is phylogenetic tree generation (from molecular sequences) included within the scope of sequence analysis? | What are the distinct types of sequence analysis activities, including phylogenetic tree generation (from molecular sequences)? | Which higher-level analytical processes encompass phylogenetic tree generation (from molecular sequences) as a more specific method? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: File format name\nDescription: File format name is defined as a subclass of Name. This indicates that every File format name is also a Name, inheriting all properties of Name, but it specifically refers to names associated with file formats. No additional constraints or differentiations are specified.\nAxiom: {'subClassOf': ['Name', 'Format identifier']}\nGenerated CQs:", "output": "Does File format name fall under the broader class of Format identifier? | Which entities are classified as more specific instances of Format identifier, such as File format name? | What higher-level categories does File format name belong to within this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ChipSkipper\nDescription: ChipSkipper is defined as a subclass of software. This means every instance of ChipSkipper is an instance of software, inheriting all properties and characteristics of the software class. There are no additional property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[output of some (software publishing process and [has participant hasValue EMBL])]']}\nGenerated CQs:", "output": "Is every output of a ChipSkipper software publishing process required to have EMBL as a participant? | Does the software publishing process output by ChipSkipper always involve EMBL as one of its participants? | Can a ChipSkipper software publishing process produce any output without the involvement of EMBL as a participant? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein binding site prediction (from structure)\nDescription: Protein binding site prediction (from structure) is defined as a subclass of Protein binding site prediction, indicating that it specializes in predicting protein binding sites specifically based on structural information. No additional axioms restrict or further define this class.\nAxiom: {'subClassOf': ['Protein binding site prediction', 'Protein structural motif recognition']}\nGenerated CQs:", "output": "Is Protein structural motif recognition the direct superclass of Protein binding site prediction (from structure)? | Which specific recognition methods are classified under Protein structural motif recognition? | To which broader recognition categories does Protein binding site prediction (from structure) belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence alignment validation\nDescription: Sequence alignment validation is defined as a subclass of Sequence alignment analysis. This indicates that every instance of Sequence alignment validation is also considered an instance of Sequence alignment analysis, inheriting all its properties and constraints. This class specifically represents analyses dedicated to verifying or assessing the quality, correctness, or validity of sequence alignments.\nAxiom: {'subClassOf': ['Sequence alignment analysis', 'Validation']}\nGenerated CQs:", "output": "Is Sequence alignment validation categorized as a type of Validation? | Which Validation subclasses include Sequence alignment validation? | What broader groups does Sequence alignment validation fall under within the Validation hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TAIR accession\nDescription: TAIR accession is defined as a subclass of Identifier (hybrid), indicating that it is a specific type of identifier within the ontology. This formalization ensures that every TAIR accession inherits all characteristics of Identifier (hybrid), establishing its role in uniquely identifying entities, likely related to the TAIR (The Arabidopsis Information Resource) database.\nAxiom: {'subClassOf': ['Identifier (hybrid)', 'Accession']}\nGenerated CQs:", "output": "Is TAIR accession categorized as a kind of Accession? | Which specific types of Accession include TAIR accession? | To what higher-level classes does TAIR accession belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HMMER profile alignment (sequences versus HMMs)\nDescription: HMMER profile alignment (sequences versus HMMs) is defined as a subclass of Textual format, indicating that it is a type of data or result represented in a textual form. This class specifically pertains to output or formats generated from performing sequence alignments against Hidden Markov Models (HMMs), and is characterized by its textual data structure.\nAxiom: {'subClassOf': ['Textual format', 'Sequence-profile alignment format']}\nGenerated CQs:", "output": "Does HMMER profile alignment (sequences versus HMMs) fall under the category of Sequence-profile alignment format? | What specific alignment formats are classified as types of Sequence-profile alignment format, including HMMER profile alignment (sequences versus HMMs)? | Which broader alignment format categories does HMMER profile alignment (sequences versus HMMs) inherit from? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Enzyme ID (BioCyc)\nDescription: Enzyme ID (BioCyc) is defined as a subclass of Enzyme ID, indicating that it represents a specialized category of enzyme identifiers used specifically within the BioCyc database. Individuals of this class inherit all characteristics of Enzyme ID but are uniquely associated with the BioCyc resource.\nAxiom: {'subClassOf': ['Enzyme ID', 'BioCyc ID']}\nGenerated CQs:", "output": "Is an Enzyme ID (BioCyc) classified under the broader identifier category of BioCyc ID? | Which identifier types are included as specializations of BioCyc ID, such as Enzyme ID (BioCyc)? | What hierarchical categories does Enzyme ID (BioCyc) fall under within the scope of BioCyc identifiers? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein-protein interaction prediction (from protein structure)\nDescription: Protein-protein interaction prediction (from protein structure) is a subclass of both Protein feature detection and Protein-protein interaction prediction. This class represents predictive analyses that infer potential interactions between proteins specifically by analyzing their structural features, thus inheriting properties related to both detecting features in proteins and predicting their mutual interactions.\nAxiom: {'subClassOf': ['Protein feature detection', 'Protein-protein interaction prediction', 'Protein structure analysis']}\nGenerated CQs:", "output": "Is protein-protein interaction prediction (from protein structure) categorized under protein structure analysis? | Which analysis methods are recognized as more specific forms of protein structure analysis, such as protein-protein interaction prediction (from protein structure)? | What broader analytical categories encompass protein-protein interaction prediction (from protein structure)? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TCoffee\nDescription: TCoffee is defined as a subclass of software, indicating that any instance of TCoffee is necessarily a software application. There are no additional property restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is executed in some multiple sequence alignment]']}\nGenerated CQs:", "output": "Is it necessary for TCoffee to be executed in a multiple sequence alignment? | Does TCoffee always participate in at least one multiple sequence alignment process? | Can TCoffee exist without being executed in a multiple sequence alignment? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: 'domainsignatures'\nDescription: domainsignatures is defined as a subclass of software that implements some Gene-Set Enrichment Analysis. Instances of this class are required to take a Gene list as a specified data input and produce a Graph plot as a specified data output. Furthermore, domainsignatures are executed within the context of descriptive statistical calculation, indicating their analytical purpose in biological or computational workflows.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[implements some Gene-Set Enrichment Analysis]', '[has specified data input some Gene list]', '[has specified data output some Graph plot]', '[is executed in some descriptive statistical calculation]', '[is encoded in some R language]']}\nGenerated CQs:", "output": "Is every domainsignature required to be encoded in at least one R language? | Are there any domainsignatures that must only be encoded in an R language and not in any other language? | Can a domainsignature exist without being encoded in an R language? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: nexusnon\nDescription: nexusnon is a subclass of both Textual format and Sequence record format (text), indicating that it represents a type of sequence record format that is specifically in textual form. All instances of nexusnon inherit the characteristics of textual formats and sequence record formats represented as text.\nAxiom: {'subClassOf': ['Textual format', 'Sequence record format (text)', 'Alignment format (text)']}\nGenerated CQs:", "output": "Is nexusnon categorized under the broader class of Alignment format? | Which Alignment format subclasses are defined, including nexusnon? | To which superordinate classes does nexusnon belong within the Alignment format hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence image\nDescription: Sequence image is defined as a subclass of Image, signifying that every Sequence image is an Image with all the properties and constraints of the Image class. No additional axioms or restrictions are imposed beyond this classification.\nAxiom: {'subClassOf': ['Image', 'Sequence report']}\nGenerated CQs:", "output": "Is Sequence report a generalization of Sequence image? | Which specific types fall under the category of Sequence report, including Sequence image? | What broader concepts encompass Sequence image in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Reaction ID (KEGG)\nDescription: Reaction ID (KEGG) is defined as a subclass of KEGG object identifier. This means that each Reaction ID (KEGG) is a specific type of identifier used in the KEGG database to uniquely represent biochemical reactions, inheriting all characteristics of KEGG object identifiers.\nAxiom: {'subClassOf': ['KEGG object identifier', 'Reaction ID']}\nGenerated CQs:", "output": "Are all Reaction ID (KEGG) instances classified under Reaction ID? | Which identifiers constitute subclasses of Reaction ID, specifically including Reaction ID (KEGG)? | Which upper-level categories include Reaction ID (KEGG) as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Staden format\nDescription: Staden format is defined as a subclass of Textual format, meaning it represents a specific type of format characterized by text-based structure. Any instance of Staden format is necessarily an instance of Textual format, inheriting all properties and constraints applicable to textual representations.\nAxiom: {'subClassOf': ['Textual format', 'Sequence record format (text)']}\nGenerated CQs:", "output": "Is every Staden format classified under Sequence record format? | Which sequence record formats encompass Staden format as a more specific type? | Under which broader record format categories is Staden format organized? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Protein structural motifs and surfaces\nDescription: Protein structural motifs and surfaces is defined as a subclass of both Obsolete concept (EDAM) and Protein structure analysis. This means it represents concepts within protein structure analysis that have been designated obsolete in the EDAM ontology. Individuals of this class are associated with outdated or superseded notions related to motifs and surfaces observed in protein structures.\nAxiom: {'subClassOf': ['Obsolete concept (EDAM)', 'Protein structure analysis', 'Protein sites, features and motifs']}\nGenerated CQs:", "output": "Is \"Protein structural motifs and surfaces\" classified under the broader group \"Protein sites, features and motifs\"? | Which entities are defined as more specific components within \"Protein sites, features and motifs\"? | What broader categories encompass \"Protein structural motifs and surfaces\"? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IRanges\nDescription: IRanges is a class that represents processes or operations encoded in the R language, specifically executed in the contexts of data normalization and decision tree induction. Any instance of IRanges must be associated with at least one specified data input and one specified data output, both of which are data entities formatted according to the R data frame specification. This formalization ensures that IRanges relates to R-encoded analytical procedures with clearly defined input and output data structures compatible with R data frames.\nAxiom: {'subClassOf': ['software'], 'propertyRestrictions': ['[is executed in some data normalization]', '[has specified data input some (data and [has format specification some R data frame])]', '[is executed in some decision tree induction]', '[is encoded in some R language]', '[has specified data output some (data and [has format specification some R data frame])]']}\nGenerated CQs:", "output": "Can IRanges be classified as a type of software? | What instances are included within the subclasses of software, such as IRanges? | Which broader classes encompass IRanges? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Peptide ID\nDescription: Peptide ID is a subclass of Molecule accession, meaning every Peptide ID is also a type of Molecule accession. This classification specifies that Peptide ID is used to uniquely reference peptides within a molecular database or ontology context.\nAxiom: {'subClassOf': ['Molecule accession', 'Peptide identifier']}\nGenerated CQs:", "output": "Is Peptide identifier a broader classification that includes Peptide ID as a more specific type? | Which identifiers are considered subclasses of Peptide identifier, such as Peptide ID? | What are the parent classes of the Peptide ID concept in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sequence generation (protein)\nDescription: Sequence generation (protein) is defined as a subclass of Protein analysis. This indicates that sequence generation (protein) is a specialized form of protein analysis, encompassing processes or methods specifically related to generating the amino acid sequence of proteins. All characteristics and constraints applicable to Protein analysis also apply to Sequence generation (protein).\nAxiom: {'subClassOf': ['Protein analysis', 'Sequence generation']}\nGenerated CQs:", "output": "Is Sequence generation (protein) classified under the broader category of Sequence generation? | What more specific types fall under Sequence generation, including Sequence generation (protein)? | To which higher-level categories does Sequence generation (protein) belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is executed in\nDescription: The property \"is executed in\" relates instances of the class \"software\" to instances of \"information processing.\" It has no explicitly defined characteristics, super-properties, or inverse property. The domain restriction specifies that the subject must be software, and the range restriction specifies that the object must be information processing. This property is used to indicate the information processing context or environment in which a software entity operates.\nAxiom: {'characteristics': [], 'domain': ['software'], 'range': [], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is information processing the only type of entity that can be in the range of 'is executed in'? | Can 'is executed in' relate to anything outside the scope of information processing as its range? | What entities may serve as the range for the property 'is executed in'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is version of\nDescription: The property \"is version of\" has no explicitly defined characteristics or super-properties. It has a domain restricted to \"version name\" and no specified range. This property is intended to relate version names to the entities they are versions of, as referenced by the external resource: http://softwareontology.wordpress.com/2012/06/20/versioning-in-swo/. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': [], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'is version of' have a subject that is not a version? | Is every object used with the property 'is version of' required to be a version name? | What entities are permitted as the domain for the property 'is version of'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: followed by\nDescription: The property \"followed by\" is defined as a transitive object property and a sub-property of owl:topObjectProperty. Its domain and range are unrestricted. The inverse property is \"preceded by.\" According to the current description, this property is based on relations used in RO and BFO ontologies and is assumed to represent the transitive form, though not yet incorporated into BFO2.\nAxiom: {'characteristics': ['Transitive'], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "What is the inverse property of 'followed by' in the ontology? | If entity A is followed by entity B, does it necessarily mean that B is preceded by A? | How do the properties 'followed by' and 'preceded by' correspond to each other within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is input of\nDescription: The property \"is input of\" relates an entity classified as \"data\" (domain) to an \"information processing\" activity (range). It has no explicitly defined characteristics or super-properties, and its inverse is \"has input.\" According to its current definition, \"'A is_input_of B' specifies that subject A is a necessary or actual input or input argument to object B,\" where A may be any data entity and B is an information processing operation. In the EDAM ontology, \"is_input_of\" is typically not asserted between concepts, but its inverse—\"has_input\"—is defined.\nAxiom: {'characteristics': [], 'domain': ['data'], 'range': ['information processing'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "How are the properties ‘is input of’ and ‘has input’ connected in the ontology? | If entity X is input of process Y, does it follow that process Y has input X? | Which property acts as the inverse of ‘is input of’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is topic of\nDescription: The property \"is topic of\" relates an instance of 'Topic' (the subject) to an instance of 'data or information processing' (the object), indicating that the topic is the subject or scope of the referenced data or process. The domain is restricted to 'Topic', while the range includes data or information processing entities. There are no declared property characteristics, super-properties, or sub-properties. The inverse property is 'has topic'. In EDAM, this property is not used directly between EDAM concepts; instead, the inverse 'has topic' is applied. The property asserts that a topic A is the topic of object B, establishing a scope relationship.\nAxiom: {'characteristics': [], 'domain': ['Topic'], 'range': ['(data and information processing)'], 'subPropertyOf': [], 'inverseOf': ['has topic']}\nGenerated CQs:", "output": "Can the property 'is topic of' have a range other than 'data or information processing'? | Is every entity in the range of 'is topic of' required to be a 'data or information processing' item? | What types of entities can serve as the range for the property 'is topic of'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: is published by\nDescription: The property \"is published by\" relates data format specifications or software to organizations, indicating the publishing organization responsible for these entities. It has no explicitly defined characteristics or inverse properties. The property is a sub-property of owl:topObjectProperty, making it a general object property. Its domain includes data format specifications or software, and its range is restricted to organizations.\nAxiom: {'characteristics': [], 'domain': ['(data format specification and software)'], 'range': ['organization'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'is published by' have a subject other than a data format specification or software? | What types of entities can be the domain for the 'is published by' property? | Are all instances used with the 'is published by' property required to be either data format specifications or software as subjects? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has specified data input\nDescription: The property \"has specified data input\" does not have defined characteristics, domain, super-properties, or an inverse property. Its range is specified as \"data\", indicating that this property is used to relate an entity to a data input.\nAxiom: {'characteristics': [], 'domain': ['software'], 'range': ['data'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can entities other than software be subjects of the property 'has specified data input'? | Is it mandatory that every subject using 'has specified data input' belongs to the class software? | Which types of entities are permitted as the domain of the property 'has specified data input'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has format specification\nDescription: The property \"has format specification\" relates an information content entity to a data format specification. It has no explicitly defined characteristics or super-properties. Its domain is restricted to information content entities, and its range is restricted to data format specifications. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['information content entity'], 'range': ['data format specification'], 'subPropertyOf': ['is encoded in'], 'inverseOf': []}\nGenerated CQs:", "output": "Is every use of the has format specification property also an instance of the is encoded in property? | Which subproperties are defined under the is encoded in property, including has format specification? | What are the superproperties of the has format specification property within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: has license\nDescription: The property \"has license\" has no explicitly defined characteristics, domain, or range restrictions. It is declared as a sub-property of \"is about,\" indicating that any assertion using \"has license\" also implies a broader \"is about\" relationship. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['software license'], 'subPropertyOf': ['is about'], 'inverseOf': []}\nGenerated CQs:", "output": "Does the property 'has license' ever have a range different from 'software license'? | Is every entity linked by the 'has license' property required to be a 'software license'? | What types of resources can appear as the range for the 'has license' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: output of\nDescription: The property \"output of\" does not have explicitly defined characteristics, domain, range, super-properties, or inverse properties. This suggests that its usage is not constrained by the ontology and can be broadly applied without formal limitations.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['participates in'], 'inverseOf': []}\nGenerated CQs:", "output": "Is every output of a property that is a subproperty of output also considered to participate in some activity or process? | Which properties are included as subproperties under output and thereby inherit the participates in relationship? | What are the superproperties of output based on its subPropertyOf relationship with participates in? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AmericanHot\nDescription: AmericanHot is defined as a subclass of NamedPizza, distinguished by the requirement that it has toppings including hot green pepper, jalapeno pepper, tomato, peperoni sausage, and mozzarella. Its origin is specified as America. AmericanHot pizzas are explicitly disjoint from numerous other pizza classes, ensuring no individual pizza can simultaneously belong to these groups. The pizza is further characterized by a topping restriction: it may only have mozzarella, peperoni sausage, jalapeno pepper, tomato, or hot green pepper as toppings. This formalization enforces a precise set of permissible toppings and uniquely identifies AmericanHot within the ontology of named pizzas.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some HotGreenPepperTopping]', '[hasTopping some JalapenoPepperTopping]', '[hasTopping some TomatoTopping]', '[hasCountryOfOrigin hasValue America]', '[hasTopping some PeperoniSausageTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping only (MozzarellaTopping or PeperoniSausageTopping or JalapenoPepperTopping or TomatoTopping or HotGreenPepperTopping)]']}\nGenerated CQs:", "output": "What logical constraint separates AmericanHot from UnclosedPizza according to the ontology? | Is it allowable for an instance of pizza to belong to both AmericanHot and UnclosedPizza classes? | Which classes are defined as disjoint with AmericanHot? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Capricciosa\nDescription: Capricciosa is defined as a subclass of NamedPizza, and is explicitly disjoint from a range of other specified pizza types, ensuring no individual can simultaneously belong to Capricciosa and any of those classes. Members of Capricciosa must have at least one topping each of tomato, ham, olive, mozzarella, anchovies, peperonata, and caper. Additionally, their toppings are strictly limited to only anchovies, mozzarella, tomato, peperonata, ham, caper, or olive—no other toppings are permitted. This formalization ensures a precise and consistent definition for Capricciosa pizza within the ontology.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some HamTopping]', '[hasTopping only (AnchoviesTopping or MozzarellaTopping or TomatoTopping or PeperonataTopping or HamTopping or CaperTopping or OliveTopping)]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some AnchoviesTopping]', '[hasTopping some PeperonataTopping]', '[hasTopping some CaperTopping]']}\nGenerated CQs:", "output": "What formal separation is specified between Capricciosa and Caprina in the ontology? | Is any pizza instance classified as both Capricciosa and Caprina permitted by the ontology? | Which other pizza types are declared as mutually exclusive with Caprina? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Fiorentina\nDescription: Fiorentina is defined as a subclass of NamedPizza and is explicitly disjoint with a variety of other specific pizza types, ensuring that no individual pizza can simultaneously be classified as both Fiorentina and any of those listed (e.g., Mushroom, Margherita, FourSeasons). Members of the Fiorentina class are characterized by the following topping constraints: they must include at least one of each of the following toppings—TomatoTopping, GarlicTopping, OliveTopping, MozzarellaTopping, ParmesanTopping, and SpinachTopping. Additionally, Fiorentina pizzas are restricted to having only the following toppings: MozzarellaTopping, GarlicTopping, TomatoTopping, SpinachTopping, OliveTopping, or ParmesanTopping. This axiomatisation precisely defines Fiorentina pizzas in terms of both required ingredients and clear differentiation from other pizzas.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Rosa', 'QuattroFormaggi', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping only (MozzarellaTopping or GarlicTopping or TomatoTopping or SpinachTopping or OliveTopping or ParmesanTopping)]', '[hasTopping some GarlicTopping]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some ParmesanTopping]', '[hasTopping some SpinachTopping]']}\nGenerated CQs:", "output": "What is the formal connection specified between Fiorentina and Giardiniera in the ontology? | Can a pizza instance be classified as both Fiorentina and Giardiniera simultaneously? | Which classes are defined as mutually exclusive with Fiorentina? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FruttiDiMare\nDescription: FruttiDiMare is defined as a subclass of NamedPizza and is explicitly disjoint with a variety of other specific pizza types, ensuring that no individual can simultaneously belong to FruttiDiMare and any of the listed pizza classes. Members of this class are strictly characterized by their toppings: they can have only garlic, tomato, or mixed seafood toppings—with each FruttiDiMare pizza required to feature at least one of each (tomato, garlic, and mixed seafood toppings). This formalization specifies that FruttiDiMare pizzas are exclusively seafood-themed, with a distinct combination of these three toppings.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping only (GarlicTopping or TomatoTopping or MixedSeafoodTopping)]', '[hasTopping some TomatoTopping]', '[hasTopping some GarlicTopping]', '[hasTopping some MixedSeafoodTopping]']}\nGenerated CQs:", "output": "What logical difference is asserted between FruttiDiMare and Caprina in the ontology? | Can any pizza instance belong simultaneously to the classes FruttiDiMare and Caprina? | Which classes are explicitly defined as disjoint with Caprina? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LaReine\nDescription: LaReine is defined as a subclass of NamedPizza and is declared disjoint with a number of other specific pizza classes, including Mushroom, Napoletana, Veneziana, and others—ensuring no individual pizza can be classified as both a LaReine and any of these listed classes. \n\nLaReine pizzas are characterized by several property restrictions: every LaReine pizza must have at least one topping of each of the following types—MushroomTopping, TomatoTopping, HamTopping, OliveTopping, and MozzarellaTopping. Additionally, the only permitted toppings for LaReine pizzas are MozzarellaTopping, TomatoTopping, HamTopping, OliveTopping, or MushroomTopping; no other toppings are allowed. This ensures that the LaReine pizza is strictly defined by this specific set of ingredients.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'Napoletana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some MushroomTopping]', '[hasTopping some TomatoTopping]', '[hasTopping some HamTopping]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping only (MozzarellaTopping or TomatoTopping or HamTopping or OliveTopping or MushroomTopping)]']}\nGenerated CQs:", "output": "How are LaReine and Veneziana defined in terms of class disjointness within the ontology? | Is it allowed for a pizza to be classified simultaneously as LaReine and Veneziana? | Which classes are asserted to be mutually exclusive with LaReine in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Mushroom\nDescription: Mushroom is defined as a subclass of NamedPizza, and it is disjoint from a wide range of other specific pizza types, ensuring that an individual cannot simultaneously belong to the Mushroom class and any of those listed classes. Members of the Mushroom class are required to have MushroomTopping, TomatoTopping, and MozzarellaTopping among their toppings. Additionally, they may only have MozzarellaTopping, TomatoTopping, or MushroomTopping as toppings, and no others. This formalization ensures that Mushroom pizzas are uniquely characterized by the exclusive combination of these three toppings.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some MushroomTopping]', '[hasTopping only (MozzarellaTopping or TomatoTopping or MushroomTopping)]', '[hasTopping some TomatoTopping]', '[hasTopping some MozzarellaTopping]']}\nGenerated CQs:", "output": "What formal separation is asserted between Mushroom and Cajun in the ontology? | Is it allowed for an entity to belong to both the Mushroom and Cajun categories simultaneously? | Which classes are explicitly specified as being disjoint with Cajun? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Parmense\nDescription: Parmense is defined as a subclass of NamedPizza and is explicitly disjoint with a wide range of other pizza types, ensuring that no individual pizza can simultaneously be classified as Parmense and any of the listed disjoint pizzas. Parmense pizzas are characterized by a specific set of required toppings: each must include at least some tomato, ham, parmesan, mozzarella, and asparagus toppings. Furthermore, they may only have these toppings—no additional ingredients are permitted. This formalization strictly specifies the distinctive composition of Parmense pizzas within the NamedPizza hierarchy.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'Caprina', 'Soho', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some HamTopping]', '[hasTopping some ParmesanTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some AsparagusTopping]', '[hasTopping only (MozzarellaTopping or TomatoTopping or HamTopping or ParmesanTopping or AsparagusTopping)]']}\nGenerated CQs:", "output": "What is the ontological relationship between Parmense and SloppyGiuseppe? | Is there any entity that can simultaneously belong to both Parmense and SloppyGiuseppe classes? | Which classes are specified as mutually exclusive with Parmense? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PrinceCarlo\nDescription: PrinceCarlo is defined as a subclass of NamedPizza, making it a specific kind of pizza with a distinct identity. It is explicitly disjoint with a comprehensive set of other named pizzas, such that no individual pizza can be simultaneously classified as PrinceCarlo and any of those other pizzas (e.g., Mushroom, LaReine, Napoletana, etc.).\n\nFrom the property restrictions, any PrinceCarlo pizza must have at least the following toppings: TomatoTopping, MozzarellaTopping, ParmesanTopping, LeekTopping, and RosemaryTopping. Furthermore, the only toppings permitted on a PrinceCarlo pizza are LeekTopping, RosemaryTopping, MozzarellaTopping, TomatoTopping, and ParmesanTopping. This formalization ensures that PrinceCarlo pizzas are uniquely characterized by this specific and exclusive combination of toppings, and cannot include any others.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping only (LeekTopping or RosemaryTopping or MozzarellaTopping or TomatoTopping or ParmesanTopping)]', '[hasTopping some MozzarellaTopping]', '[hasTopping some ParmesanTopping]', '[hasTopping some LeekTopping]', '[hasTopping some RosemaryTopping]']}\nGenerated CQs:", "output": "Are PrinceCarlo and Giardiniera considered mutually exclusive pizza types within the ontology? | Is there any possibility for a pizza to be classified simultaneously as PrinceCarlo and Giardiniera? | Which pizza classes are specified as disjoint with Giardiniera? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Rosa\nDescription: Rosa is defined as a subclass of NamedPizza, explicitly disjoint with a range of other specific pizza types (such as Mushroom, Margherita, AmericanHot, and others), ensuring an individual pizza cannot simultaneously belong to Rosa and any of those disjoint classes. Members of the Rosa class are characterized by their toppings: every Rosa pizza must have at least one TomatoTopping, one GorgonzolaTopping, and one MozzarellaTopping, and it may only contain these three toppings (no other toppings are permitted). This formalization strictly captures the unique identity and allowed ingredients of the Rosa pizza type.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some GorgonzolaTopping]', '[hasTopping only (MozzarellaTopping or TomatoTopping or GorgonzolaTopping)]', '[hasTopping some MozzarellaTopping]']}\nGenerated CQs:", "output": "What logical separation is asserted between Rosa and PrinceCarlo in the ontology? | Is there any individual that can belong to both Rosa and PrinceCarlo? | Which classes are declared as disjoint with PrinceCarlo? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SloppyGiuseppe\nDescription: SloppyGiuseppe is defined as a subclass of NamedPizza, and is explicitly disjoint with a set of other specific pizza types, ensuring that any instance cannot simultaneously belong to these other pizza classes. It is characterized by the presence of HotSpicedBeefTopping, TomatoTopping, GreenPepperTopping, MozzarellaTopping, and OnionTopping as mandatory ingredients. Furthermore, it is restricted to only these toppings: no other topping types are permitted on a SloppyGiuseppe. This formalization ensures the class captures a distinct and exclusive pizza variety, consistently reflecting its specific ingredient profile.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'Caprina', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some HotSpicedBeefTopping]', '[hasTopping some TomatoTopping]', '[hasTopping some GreenPepperTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some OnionTopping]', '[hasTopping only (HotSpicedBeefTopping or MozzarellaTopping or TomatoTopping or OnionTopping or GreenPepperTopping)]']}\nGenerated CQs:", "output": "What is the ontological distinction specified between SloppyGiuseppe and Soho? | Is there any instance that can belong to both the SloppyGiuseppe and Soho categories? | Which classes are formally declared as disjoint with Soho? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: UnclosedPizza\nDescription: UnclosedPizza is defined as a subclass of NamedPizza, disjoint with a specific set of pizzas including Mushroom, AmericanHot, Margherita, and others, ensuring mutual exclusivity with these named varieties. Every UnclosedPizza is characterized by having at least one MozzarellaTopping, but there is no restriction on additional toppings. As described, membership in UnclosedPizza does not imply classification as either a VegetarianPizza or a NonVegetarianPizza, as its topping composition may be incomplete or unspecified. This formalization supports the open nature of its topping definitions within the ontology.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'PrinceCarlo', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some MozzarellaTopping]']}\nGenerated CQs:", "output": "What logical separation exists between UnclosedPizza and Capricciosa according to the ontology? | Is it permitted for a pizza to belong to both UnclosedPizza and Capricciosa categories? | Which classes are formally specified as disjoint with Capricciosa? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AnchoviesTopping\nDescription: AnchoviesTopping is modeled as a subclass of FishTopping, signifying that it is a specific type of fish-based topping. It is explicitly disjoint with both MixedSeafoodTopping and PrawnsTopping, meaning an individual instance cannot simultaneously be categorized as AnchoviesTopping and either of those other toppings. This ensures a clear and mutually exclusive classification among these seafood-themed pizza toppings.\nAxiom: {'subClassOf': ['FishTopping'], 'disjointWith': ['MixedSeafoodTopping']}\nGenerated CQs:", "output": "How does the ontology specify the incompatibility between AnchoviesTopping and PrawnsTopping? | Is any pizza topping allowed to be classified as both AnchoviesTopping and PrawnsTopping simultaneously? | Which toppings are asserted to be disjoint with AnchoviesTopping in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MixedSeafoodTopping\nDescription: MixedSeafoodTopping is defined as a subclass of FishTopping, meaning every MixedSeafoodTopping is a type of fish-based topping. It is explicitly disjoint with AnchoviesTopping and PrawnsTopping, so no individual topping can simultaneously be considered a MixedSeafoodTopping and either an AnchoviesTopping or PrawnsTopping. This class represents seafood toppings that are distinct from pure anchovy or prawn toppings, ensuring clear differentiation among various fish-based toppings.\nAxiom: {'subClassOf': ['FishTopping'], 'disjointWith': ['PrawnsTopping']}\nGenerated CQs:", "output": "What formal separation is defined between MixedSeafoodTopping and AnchoviesTopping within the ontology? | Is there any possibility for a topping to be classified as both MixedSeafoodTopping and AnchoviesTopping? | Which other topping classes, if any, are explicitly stated as disjoint with AnchoviesTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PrawnsTopping\nDescription: PrawnsTopping is defined as a subclass of FishTopping, indicating it is a specific kind of fish-based topping. It is explicitly disjoint with both MixedSeafoodTopping and AnchoviesTopping, which means no individual topping can simultaneously be classified as PrawnsTopping and either of the other two classes. This formalization ensures that members of PrawnsTopping are uniquely identifiable as prawn-based toppings, distinct from other seafood or anchovy-based toppings.\nAxiom: {'subClassOf': ['FishTopping'], 'disjointWith': ['AnchoviesTopping']}\nGenerated CQs:", "output": "How does the ontology differentiate between PrawnsTopping and MixedSeafoodTopping? | Is there any instance that can qualify as both PrawnsTopping and MixedSeafoodTopping? | Which topping categories are specified as disjoint with PrawnsTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GarlicTopping\nDescription: GarlicTopping is defined as a subclass of VegetableTopping, meaning it is a type of vegetable-based topping. It is explicitly disjoint with several other specific vegetable toppings, such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, ensuring that an individual cannot belong to both GarlicTopping and any of these other topping classes. Additionally, GarlicTopping is characterized by the property that its members must have at least some medium level of spiciness (hasSpiciness some Medium).\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness some Medium]']}\nGenerated CQs:", "output": "What logical separation is defined between GarlicTopping and SpinachTopping? | Is there any topping that could simultaneously be classified as GarlicTopping and SpinachTopping? | Which other topping classes are declared as mutually exclusive with SpinachTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MushroomTopping\nDescription: MushroomTopping is a subclass of VegetableTopping and is explicitly disjoint from other specific vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, and others—ensuring that no individual can simultaneously belong to more than one of these topping types. Furthermore, MushroomTopping is characterized by the property that it must have some level of mild spiciness (hasSpiciness some Mild). This formalization defines MushroomTopping as a mild-flavored vegetable topping that is distinct from other named vegetable toppings in the ontology.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness some Mild]']}\nGenerated CQs:", "output": "What type of distinction is asserted between MushroomTopping and PetitPoisTopping in the ontology? | Could an individual topping be classified as both MushroomTopping and PetitPoisTopping? | Which topping classes are defined as incompatible with PetitPoisTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: OnionTopping\nDescription: OnionTopping is defined as a subclass of VegetableTopping, representing a type of topping derived from vegetables. It is explicitly disjoint with several other vegetable topping classes, such as RocketTopping, LeekTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, ensuring that no individual can simultaneously belong to OnionTopping and any of these classes. Additionally, OnionTopping is characterized by the property restriction that all its instances must have at least some medium level of spiciness (hasSpiciness some Medium).\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness some Medium]']}\nGenerated CQs:", "output": "How does the ontology distinguish between OnionTopping and OliveTopping? | Is there an instance that can simultaneously be classified as both OnionTopping and OliveTopping? | Which other topping classes are specified as disjoint with OliveTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PepperTopping\nDescription: PepperTopping is defined as a subclass of VegetableTopping, indicating it is a specific type of vegetable-based topping. It is explicitly disjoint with RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping—meaning no individual can simultaneously be a PepperTopping and any of these other vegetable topping classes. This establishes PepperTopping as a distinct and non-overlapping category within vegetable toppings.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'TomatoTopping']}\nGenerated CQs:", "output": "What logical constraint separates PepperTopping from PetitPoisTopping in the ontology? | Is any topping instance allowed to belong to both PepperTopping and PetitPoisTopping simultaneously? | Which topping classes are defined as disjoint with PepperTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SpinachTopping\nDescription: SpinachTopping is defined as a subclass of VegetableTopping and is explicitly disjoint from a variety of other vegetable-based toppings, including RocketTopping, LeekTopping, OnionTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping. Individuals of this class must have at least one hasSpiciness property value that is Mild. This ensures that SpinachTopping exclusively refers to mild, spinach-based toppings that do not overlap with other vegetable toppings in the ontology.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['LeekTopping', 'OnionTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness some Mild]']}\nGenerated CQs:", "output": "What is the formal distinction between SpinachTopping and RocketTopping within the ontology? | Is it allowed for a pizza to have both SpinachTopping and RocketTopping simultaneously? | Which classes are asserted to be disjoint with SpinachTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CajunSpiceTopping\nDescription: CajunSpiceTopping is a subclass of HerbSpiceTopping, formally distinguished by the restriction that it must have some degree of hot spiciness (hasSpiciness some Hot). It is explicitly disjoint with RosemaryTopping, meaning an individual cannot be both a CajunSpiceTopping and a RosemaryTopping. Members of this class are herb and spice toppings that contribute a hot or spicy flavor profile, aligning with the characteristics of Cajun seasoning.\nAxiom: {'subClassOf': ['HerbSpiceTopping'], 'disjointWith': [], 'propertyRestrictions': ['[hasSpiciness some Hot]']}\nGenerated CQs:", "output": "How does the ontology specify the connection or distinction between CajunSpiceTopping and RosemaryTopping? | Is there any instance that can be classified as both CajunSpiceTopping and RosemaryTopping? | Which other topping classes are defined as mutually exclusive with RosemaryTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CheeseTopping\nDescription: CheeseTopping is defined as a subclass of PizzaTopping, representing toppings made from cheese products that are used on pizzas. It is explicitly disjoint from other topping types such as MeatTopping, SauceTopping, VegetableTopping, FishTopping, HerbSpiceTopping, NutTopping, and FruitTopping, ensuring that no individual topping instance can simultaneously belong to both CheeseTopping and any of these other topping categories. This classification enforces a clear distinction between cheese-based toppings and all other types of pizza toppings.\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['MeatTopping', 'SauceTopping', 'VegetableTopping', 'FishTopping', 'HerbSpiceTopping', 'NutTopping']}\nGenerated CQs:", "output": "How does the ontology express the incompatibility between CheeseTopping and FruitTopping? | Is there any topping instance that can simultaneously belong to both CheeseTopping and FruitTopping categories? | Which topping categories are stated as mutually exclusive with CheeseTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FruitTopping\nDescription: FruitTopping is defined as a subclass of PizzaTopping, meaning it represents a specific type of topping used on pizzas. It is explicitly disjoint with MeatTopping, SauceTopping, VegetableTopping, CheeseTopping, FishTopping, HerbSpiceTopping, and NutTopping, ensuring that no topping can simultaneously belong to FruitTopping and any of these other topping categories. This formalization guarantees that FruitTopping exclusively includes toppings derived from fruit and distinguishes them from all other major topping types.\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['MeatTopping', 'SauceTopping', 'CheeseTopping', 'FishTopping', 'HerbSpiceTopping', 'NutTopping']}\nGenerated CQs:", "output": "How are FruitTopping and VegetableTopping represented in terms of mutual exclusivity within the ontology? | Is there any scenario in which a topping can be classified simultaneously as both a FruitTopping and a VegetableTopping? | Which classes are defined as disjoint with VegetableTopping in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HerbSpiceTopping\nDescription: HerbSpiceTopping is defined as a subclass of PizzaTopping, representing toppings made exclusively from herbs or spices that are suitable for use on pizzas. It is explicitly disjoint with MeatTopping, SauceTopping, VegetableTopping, CheeseTopping, FishTopping, NutTopping, and FruitTopping, ensuring that no individual topping can simultaneously belong to both HerbSpiceTopping and any of these other specified topping categories. This class formalizes the separation of herb and spice-based toppings from all other topping types within the ontology.\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['MeatTopping', 'SauceTopping', 'VegetableTopping', 'CheeseTopping', 'FishTopping', 'FruitTopping']}\nGenerated CQs:", "output": "What is the formal separation established between HerbSpiceTopping and NutTopping in the ontology? | Is it allowed for a pizza topping to be classified as both a HerbSpiceTopping and a NutTopping? | Which classes, besides NutTopping, are specified as disjoint with HerbSpiceTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MeatTopping\nDescription: MeatTopping is defined as a subclass of PizzaTopping, representing toppings derived specifically from meat products. It is disjoint with SauceTopping, VegetableTopping, CheeseTopping, FishTopping, HerbSpiceTopping, NutTopping, and FruitTopping, ensuring that no single topping instance can simultaneously belong to both MeatTopping and any of these other topping categories. This formalization enforces a clear categorical separation between meat-based and other types of pizza toppings.\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['SauceTopping', 'VegetableTopping', 'CheeseTopping', 'FishTopping', 'NutTopping', 'FruitTopping']}\nGenerated CQs:", "output": "What ontological separation is established between MeatTopping and HerbSpiceTopping? | Is any topping allowed to be classified simultaneously as a MeatTopping and an HerbSpiceTopping? | Which topping categories are defined as mutually exclusive with HerbSpiceTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SauceTopping\nDescription: SauceTopping is defined as a subclass of PizzaTopping and is explicitly disjoint with MeatTopping, VegetableTopping, CheeseTopping, FishTopping, HerbSpiceTopping, NutTopping, and FruitTopping. This means SauceTopping represents a distinct category of pizza topping, specifically for sauces, and no individual can simultaneously belong to SauceTopping and any of the aforementioned topping classes.\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['MeatTopping', 'VegetableTopping', 'CheeseTopping', 'FishTopping', 'HerbSpiceTopping', 'NutTopping']}\nGenerated CQs:", "output": "What logical separation does the ontology assert between SauceTopping and FruitTopping? | Is there any topping entity that can simultaneously be classified as both SauceTopping and FruitTopping? | Which classes of toppings are formally identified as disjoint with SauceTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: VegetableTopping\nDescription: VegetableTopping is defined as a subclass of PizzaTopping, representing pizza toppings that are derived from vegetables. It is explicitly disjoint with MeatTopping, SauceTopping, CheeseTopping, FishTopping, HerbSpiceTopping, NutTopping, and FruitTopping, ensuring that no topping can simultaneously belong to VegetableTopping and any of these other topping categories. This formalization guarantees that VegetableTopping exclusively encompasses toppings of vegetable origin, and clearly separates it from other distinct topping types used on pizzas.\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['MeatTopping', 'CheeseTopping', 'FishTopping', 'HerbSpiceTopping', 'NutTopping', 'FruitTopping']}\nGenerated CQs:", "output": "How are VegetableTopping and SauceTopping differentiated within the ontology? | Is there any entity that can simultaneously be classified as both a VegetableTopping and a SauceTopping? | Which classes are defined as disjoint with SauceTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ParmesanTopping\nDescription: ParmesanTopping is defined as a subclass of CheeseTopping, representing cheese-based toppings specifically comprised of parmesan. It is explicitly disjoint from GoatsCheeseTopping, MozzarellaTopping, GorgonzolaTopping, and FourCheesesTopping, ensuring no individual can simultaneously belong to these classes. Members of this class are characterized by having some level of mild spiciness, as specified by the property restriction [hasSpiciness some Mild].\nAxiom: {'subClassOf': ['CheeseTopping'], 'disjointWith': ['GoatsCheeseTopping', 'MozzarellaTopping', 'GorgonzolaTopping'], 'propertyRestrictions': ['[hasSpiciness some Mild]']}\nGenerated CQs:", "output": "What distinction is modeled between ParmesanTopping and FourCheesesTopping within the ontology? | Could an instance belong simultaneously to both ParmesanTopping and FourCheesesTopping classes? | Which other topping classes are asserted as incompatible with FourCheesesTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HamTopping\nDescription: HamTopping is defined as a subclass of MeatTopping, indicating that it is a type of meat-based pizza topping. It is explicitly disjoint with PeperoniSausageTopping, HotSpicedBeefTopping, and ChickenTopping, meaning an individual topping cannot simultaneously be classified as ham and any of these other meat toppings. This formalization ensures that HamTopping remains distinct from other specific meat toppings within the ontology.\nAxiom: {'subClassOf': ['MeatTopping'], 'disjointWith': ['PeperoniSausageTopping', 'ChickenTopping']}\nGenerated CQs:", "output": "What formal separation is specified between HamTopping and HotSpicedBeefTopping in the ontology? | Is there any instance that can be classified simultaneously as HamTopping and HotSpicedBeefTopping? | Which other topping categories are asserted as disjoint with HamTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PeperoniSausageTopping\nDescription: PeperoniSausageTopping is defined as a subclass of MeatTopping, representing a specific type of meat-based pizza topping. It is explicitly disjoint with HotSpicedBeefTopping, HamTopping, and ChickenTopping, ensuring that no individual topping can be classified as more than one of these types simultaneously. Members of this class are characterized by possessing at least some medium level of spiciness, as specified by the property restriction [hasSpiciness some Medium]. This formalization ensures clear differentiation within meat toppings and enforces the requirement for moderate spiciness in PeperoniSausageTopping.\nAxiom: {'subClassOf': ['MeatTopping'], 'disjointWith': ['HamTopping', 'ChickenTopping'], 'propertyRestrictions': ['[hasSpiciness some Medium]']}\nGenerated CQs:", "output": "What separation is defined between PeperoniSausageTopping and HotSpicedBeefTopping in the ontology? | Is it allowable for a single topping instance to belong to both PeperoniSausageTopping and HotSpicedBeefTopping? | Which topping types are asserted as disjoint with PeperoniSausageTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DeepPanBase\nDescription: DeepPanBase is defined as a subclass of PizzaBase, establishing it as a specific type of pizza base. It is explicitly disjoint with ThinAndCrispyBase, which means that no pizza base can simultaneously be classified as both a DeepPanBase and a ThinAndCrispyBase. This formalization ensures clear differentiation between thick, deep pan styles and thin, crispy bases within the ontology.\nAxiom: {'subClassOf': ['PizzaBase'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology distinguish between DeepPanBase and ThinAndCrispyBase? | Is it permissible for a pizza base to be classified as both DeepPanBase and ThinAndCrispyBase? | Which base types are specified as mutually exclusive with DeepPanBase in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ThinAndCrispyBase\nDescription: ThinAndCrispyBase is a subclass of PizzaBase, representing a specific type of pizza base. It is explicitly declared as disjoint with DeepPanBase, ensuring that no individual pizza base can simultaneously be classified as both ThinAndCrispyBase and DeepPanBase. This formalization distinguishes thin and crispy bases from deep pan bases within the ontology.\nAxiom: {'subClassOf': ['PizzaBase'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology specify the difference between ThinAndCrispyBase and DeepPanBase? | Is any pizza base classified under both ThinAndCrispyBase and DeepPanBase? | What other base types are explicitly declared as disjoint with DeepPanBase? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GreenPepperTopping\nDescription: GreenPepperTopping is defined as a subclass of PepperTopping, indicating it inherits all characteristics of pepper-based pizza toppings. It is explicitly disjoint with SweetPepperTopping, JalapenoPepperTopping, and PeperonataTopping—ensuring that no instance can simultaneously belong to more than one of these classes. This formalization distinguishes green pepper toppings from other specific pepper varieties within the ontology.\nAxiom: {'subClassOf': ['PepperTopping'], 'disjointWith': ['JalapenoPepperTopping', 'PeperonataTopping']}\nGenerated CQs:", "output": "What is the ontological separation specified between GreenPepperTopping and SweetPepperTopping? | Is there any instance that can be simultaneously classified as both GreenPepperTopping and SweetPepperTopping? | Which classes are defined as mutually exclusive with GreenPepperTopping in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Hot\nDescription: Hot is defined as a subclass of Spiciness, indicating it represents an elevated or intense level of spicy sensation. It is explicitly disjoint with the classes Mild and Medium, ensuring that no instance can be both Hot and either Mild or Medium at the same time. This formalization clarifies that Hot describes a distinct, non-overlapping intensity within the spectrum of spiciness.\nAxiom: {'subClassOf': ['Spiciness'], 'disjointWith': ['Medium']}\nGenerated CQs:", "output": "What type of logical separation is defined between Hot and Mild? | Is it allowed for an entity to be classified as both Hot and Mild simultaneously? | Which classes, apart from Mild, are explicitly stated as disjoint with Hot? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Medium\nDescription: Medium is a subclass of Spiciness, representing a specific level or category of spiciness. It is formally defined as disjoint with both Mild and Hot, meaning that no individual instance can belong to more than one of these classes simultaneously. This ensures that any item classified as Medium cannot be considered Mild or Hot in terms of spiciness.\nAxiom: {'subClassOf': ['Spiciness'], 'disjointWith': ['Mild']}\nGenerated CQs:", "output": "How are Medium and Hot classes differentiated within the ontology? | Is there any instance that can belong to both the Medium and Hot categories? | Which classes are defined as mutually exclusive with Medium? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Mild\nDescription: Mild is a subclass of Spiciness, representing a specific level of spiciness distinct from other grades. It is explicitly disjoint with both Hot and Medium, ensuring that an instance classified as Mild cannot simultaneously be classified as Hot or Medium. This enforces a clear and exclusive categorization among the spiciness levels.\nAxiom: {'subClassOf': ['Spiciness'], 'disjointWith': ['Medium']}\nGenerated CQs:", "output": "What is the formal separation defined between Mild and Hot in the ontology? | Can an entity be classified as both Mild and Hot? | Which classes are specified as disjoint with Hot? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PizzaBase\nDescription: PizzaBase is defined as a subclass of Food, indicating that every PizzaBase is a type of food. It is explicitly disjoint with IceCream, Pizza, and PizzaTopping, ensuring that an individual cannot simultaneously be a PizzaBase and any of these other classes. This formalization distinguishes PizzaBase as a unique foundational component in food ontology, separate from finished pizzas, their toppings, or dessert items like ice cream.\nAxiom: {'subClassOf': ['Food'], 'disjointWith': ['IceCream', 'Pizza']}\nGenerated CQs:", "output": "What distinguishes PizzaBase from PizzaTopping in the ontology? | Is any entity permitted to be an instance of both PizzaBase and PizzaTopping? | Which classes are specified as disjoint with PizzaBase? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PizzaTopping\nDescription: PizzaTopping is defined as a subclass of Food, representing edible items that can be used to top a pizza. It is formally disjoint from the classes IceCream, Pizza, and PizzaBase, ensuring that no individual can simultaneously be a PizzaTopping and an instance of any of these other classes. This separation enforces a clear distinction between pizza toppings, the pizza base, the assembled pizza, and unrelated foods like ice cream.\nAxiom: {'subClassOf': ['Food'], 'disjointWith': ['Pizza', 'PizzaBase']}\nGenerated CQs:", "output": "How does the ontology define the separation between PizzaTopping and IceCream? | Is there any instance that can belong to both PizzaTopping and IceCream categories? | Which classes are explicitly marked as mutually exclusive with IceCream? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DomainConcept\nDescription: DomainConcept is a class that is explicitly disjoint with ValuePartition, meaning no individual can simultaneously be a member of both DomainConcept and ValuePartition. This ensures a clear separation between entities considered DomainConcepts and those defined as ValuePartitions within the ontology.\nAxiom: {'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology differentiate between DomainConcept and ValuePartition? | Is there any instance that can belong to both DomainConcept and ValuePartition? | Which classes are specified as disjoint with ValuePartition? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ValuePartition\nDescription: ValuePartition is a pattern used to represent a set of mutually exclusive and exhaustive subclasses that serve as the only permissible values for a particular property. It is disjoint with DomainConcept, ensuring that no individual can belong to both classes. The parent ValuePartition class is employed in property restrictions, and its subclasses collectively cover all possible values for the property—membership cannot extend beyond these predefined subclasses without modifying the ValuePartition. This structure enforces a fixed set of alternatives, supporting controlled vocabularies and value enumerations within the ontology.\nAxiom: {'disjointWith': []}\nGenerated CQs:", "output": "How are ValuePartition and DomainConcept differentiated within the ontology? | Is there any entity that can simultaneously be a ValuePartition and a DomainConcept? | Which classes are specified as disjoint with DomainConcept? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Food\nDescription: Food is defined as a subclass of DomainConcept. This means that every instance of Food is considered a type of DomainConcept, representing consumable items or substances within the modeled domain. No further restrictions or disjoint relationships are specified in the current axiom.\nAxiom: {'subClassOf': ['DomainConcept']}\nGenerated CQs:", "output": "Is Food classified under the broader category of DomainConcept? | What general categories is Food a member of within the ontology? | Which more specific classes, such as Food, are encompassed by DomainConcept? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NamedPizza\nDescription: NamedPizza is defined as a subclass of Pizza, representing pizzas that are explicitly listed or recognized on a pizza menu. Members of this class inherit all properties of Pizza and are distinguished by being menu-identified variants, rather than custom or unnamed creations.\nAxiom: {'subClassOf': ['Pizza']}\nGenerated CQs:", "output": "Which categories encompass NamedPizza as a member? | Is NamedPizza classified as a type of Pizza? | What specific varieties are encompassed within the supercategory Pizza, including NamedPizza? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PineKernels\nDescription: PineKernels is defined as a subclass of NutTopping, indicating that all PineKernels are considered a type of nut-based topping. No further property restrictions or disjointness axioms are specified, so individuals classified as PineKernels inherit all characteristics of NutTopping.\nAxiom: {'subClassOf': ['NutTopping']}\nGenerated CQs:", "output": "Which toppings are defined as more specific forms of NutTopping, such as PineKernels? | Is PineKernels classified under the broader group of NutTopping? | What more general topping categories include PineKernels as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RedOnionTopping\nDescription: RedOnionTopping is defined as a subclass of OnionTopping, representing toppings specifically comprised of red onion. All individuals classified as RedOnionTopping inherit the characteristics and constraints applicable to OnionTopping.\nAxiom: {'subClassOf': ['OnionTopping']}\nGenerated CQs:", "output": "Which toppings are specified as subclasses of OnionTopping, such as RedOnionTopping? | What parent classes does RedOnionTopping belong to within the topping hierarchy? | Is RedOnionTopping categorized under the broader class of OnionTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: American\nDescription: American is defined as a subclass of NamedPizza and is explicitly disjoint from several other specific pizza types, such as Mushroom, LaReine, Napoletana, and others, ensuring that an individual cannot simultaneously belong to more than one of these classes. Members of the American class must have the following toppings: tomato topping, pepperoni sausage topping, and mozzarella topping. Furthermore, they can have only mozzarella, pepperoni sausage, or tomato as toppings—no other toppings are permitted. Additionally, the country of origin for this pizza is specified as America. This formalization distinguishes the American pizza by its unique combination of toppings and origin, while preventing any overlap with the other named pizzas.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasCountryOfOrigin hasValue America]', '[hasTopping some MozzarellaTopping]', '[hasTopping only (MozzarellaTopping or PeperoniSausageTopping or TomatoTopping)]', '[hasTopping only PeperoniSausageTopping]']}\nGenerated CQs:", "output": "Does an American pizza necessarily include at least one Peperoni Sausage topping? | Is the presence of Peperoni Sausage topping required for something to be classified as American pizza? | Can an American pizza exist without having any Peperoni Sausage toppings? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Cajun\nDescription: Cajun is defined as a subclass of NamedPizza and is explicitly disjoint with a variety of other pizza types, ensuring that no pizza can belong to Cajun and any of the disjoint classes simultaneously. Each Cajun pizza must have, as toppings, tomato, Tobasco pepper sauce, mozzarella, onion, peperonata, and prawns. Furthermore, the only allowed toppings on a Cajun pizza are prawn, Tobasco pepper sauce, mozzarella, tomato, onion, and peperonata. This formalization strictly characterizes Cajun pizzas by both required and exclusive toppings, distinguishing them from other named pizzas.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some TobascoPepperSauce]', '[hasTopping only (PrawnsTopping or TobascoPepperSauce or MozzarellaTopping or TomatoTopping or OnionTopping or PeperonataTopping)]', '[hasTopping some MozzarellaTopping]', '[hasTopping some OnionTopping]', '[hasTopping some PeperonataTopping]', '[hasTopping only PrawnsTopping]']}\nGenerated CQs:", "output": "Is it required that a Cajun pizza has at least one topping of Prawns? | Can a pizza be classified as Cajun without having any PrawnsTopping? | Does every Cajun pizza necessarily include the hasTopping property linked to PrawnsTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Caprina\nDescription: Caprina is defined as a subclass of NamedPizza and is explicitly disjoint from a diverse set of other named pizzas, ensuring that no individual pizza can simultaneously be a Caprina and any of the pizzas listed (such as Mushroom, LaReine, etc.). Members of the Caprina class are characterized by their toppings: each Caprina must have at least one instance each of tomato topping, sundried tomato topping, mozzarella topping, and goat’s cheese topping. Additionally, Caprina pizzas can only have mozzarella, tomato, sundried tomato, or goat’s cheese as toppings—no other toppings are permitted. This formalization guarantees a specific and exclusive combination of ingredients for any pizza classified as Caprina.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping only (MozzarellaTopping or TomatoTopping or SundriedTomatoTopping or GoatsCheeseTopping)]', '[hasTopping some GoatsCheeseTopping]', '[hasTopping only SundriedTomatoTopping]']}\nGenerated CQs:", "output": "Is it necessary for a Caprina pizza to include at least one Sundried Tomato topping? | Can a Caprina be identified without having the hasTopping property with SundriedTomatoTopping? | Does every instance of Caprina always have some topping that is SundriedTomatoTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FourSeasons\nDescription: FourSeasons is a subclass of NamedPizza and is explicitly disjoint from several other specific pizza classes, ensuring that no pizza can be simultaneously classified as FourSeasons and any of the listed disjoint pizzas (such as Mushroom, Margherita, QuattroFormaggi, etc.). Members of the FourSeasons class are characterized by having at least one of each of the following toppings: mushroom, tomato, peperoni sausage, olive, mozzarella, anchovies, and capers. Additionally, the set of possible toppings for FourSeasons pizzas is restricted to only anchovies, mozzarella, peperoni sausage, tomato, capers, olives, and mushrooms—no other toppings are permitted. This formalization captures the standard combinatory topping profile of the FourSeasons pizza variant.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera'], 'propertyRestrictions': ['[hasTopping some MushroomTopping]', '[hasTopping some TomatoTopping]', '[hasTopping some PeperoniSausageTopping]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping only (AnchoviesTopping or MozzarellaTopping or PeperoniSausageTopping or TomatoTopping or CaperTopping or OliveTopping or MushroomTopping)]', '[hasTopping some CaperTopping]', '[hasTopping only AnchoviesTopping]']}\nGenerated CQs:", "output": "Is it required for a FourSeasons pizza to include AnchoviesTopping as one of its toppings? | Can a pizza be classified as FourSeasons if it does not have any AnchoviesTopping? | Does every instance of FourSeasons necessarily have at least one topping that is AnchoviesTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Giardiniera\nDescription: Giardiniera is defined as a subclass of NamedPizza, and is explicitly disjoint from several other pizza classes such as Mushroom, LaReine, Napoletana, and others—ensuring that no pizza can simultaneously be classified as Giardiniera and any of these classes. Members of Giardiniera are characterized by a combination of specific toppings: they must contain at least some MushroomTopping, TomatoTopping, OliveTopping, MozzarellaTopping, SlicedTomatoTopping, PeperonataTopping, PetitPoisTopping, and LeekTopping. Furthermore, Giardiniera pizzas are strictly limited to having toppings only from the set: LeekTopping, MozzarellaTopping, TomatoTopping, PetitPoisTopping, PeperonataTopping, OliveTopping, MushroomTopping, and SlicedTomatoTopping. This formalization ensures that any pizza classified as Giardiniera has an exclusive and characteristic combination of the specified toppings and no others.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some MushroomTopping]', '[hasTopping some TomatoTopping]', '[hasTopping only (LeekTopping or MozzarellaTopping or TomatoTopping or PetitPoisTopping or PeperonataTopping or OliveTopping or MushroomTopping or SlicedTomatoTopping)]', '[hasTopping some MozzarellaTopping]', '[hasTopping some SlicedTomatoTopping]', '[hasTopping some PeperonataTopping]', '[hasTopping some PetitPoisTopping]', '[hasTopping some LeekTopping]', '[hasTopping only OliveTopping]']}\nGenerated CQs:", "output": "Must a Giardiniera have at least one topping that is an OliveTopping? | Is it possible for a Giardiniera to be classified as such without having any OliveTopping? | Does the presence of OliveTopping qualify a pizza as Giardiniera, regardless of its other toppings? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Margherita\nDescription: Margherita is defined as a subclass of NamedPizza and is explicitly disjoint from a range of other specific pizza varieties, ensuring that no individual pizza can simultaneously be classified as both Margherita and any of those listed (such as Mushroom, LaReine, or Napoletana). Margherita pizzas are characterized by a strict topping composition: they must have at least one TomatoTopping and one MozzarellaTopping, and they can only have MozzarellaTopping or TomatoTopping as toppings—no other topping types are permitted. This formalization captures the essential simplicity and distinctiveness of the Margherita pizza.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some MozzarellaTopping]', '[hasTopping only (MozzarellaTopping or TomatoTopping)]', '[hasTopping only TomatoTopping]']}\nGenerated CQs:", "output": "Is it required that every Margherita pizza includes at least one TomatoTopping as a topping? | Can a pizza be classified as Margherita if it lacks TomatoTopping among its toppings? | Does the presence of TomatoTopping serve as a necessary condition for identifying a pizza as Margherita? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Napoletana\nDescription: Napoletana is defined as a subclass of NamedPizza and is explicitly disjoint with a wide range of other specific pizza types, ensuring that no individual pizza can simultaneously belong to Napoletana and any of those classes. Members of the Napoletana class must have toppings including tomato, olive, mozzarella, anchovies, and capers, with the restriction that only these toppings (and no others) are permitted. Additionally, the country of origin for Napoletana is restricted to Italy. This class therefore represents a distinct and well-defined type of pizza with a uniquely specified combination of Italian origin and allowable toppings.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some AnchoviesTopping]', '[hasCountryOfOrigin hasValue Italy]', '[hasTopping only (AnchoviesTopping or MozzarellaTopping or TomatoTopping or CaperTopping or OliveTopping)]', '[hasTopping only CaperTopping]']}\nGenerated CQs:", "output": "Is it necessary for a Napoletana pizza to have at least one topping that is a CaperTopping? | Does every instance of Napoletana include the property hasTopping with some value from CaperTopping? | Can a pizza be classified as Napoletana if it lacks any CaperTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PolloAdAstra\nDescription: PolloAdAstra is defined as a subclass of NamedPizza and is explicitly disjoint with other specified pizzas, ensuring that no individual pizza can simultaneously be an instance of PolloAdAstra and any of the listed alternative named pizzas. Members of this class must have at least one of each of the following toppings: Red Onion, Cajun Spice, Tomato, Garlic, Sweet Pepper, Mozzarella, and Chicken. Furthermore, the only permissible toppings are Chicken, Mozzarella, Garlic, Tomato, Red Onion, Cajun Spice, and Sweet Pepper; no other toppings are allowed. This formalization provides a precise specification of PolloAdAstra as a distinct pizza type characterized by its unique and restricted combination of toppings.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some RedOnionTopping]', '[hasTopping some CajunSpiceTopping]', '[hasTopping some GarlicTopping]', '[hasTopping some SweetPepperTopping]', '[hasTopping only (ChickenTopping or MozzarellaTopping or GarlicTopping or TomatoTopping or RedOnionTopping or CajunSpiceTopping or SweetPepperTopping)]', '[hasTopping some MozzarellaTopping]', '[hasTopping some ChickenTopping]', '[hasTopping only TomatoTopping]']}\nGenerated CQs:", "output": "Is it required for a PolloAdAstra pizza to have at least one TomatoTopping? | Can a PolloAdAstra pizza exist without having any TomatoTopping as one of its toppings? | Does every instance of PolloAdAstra use TomatoTopping among its toppings? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: QuattroFormaggi\nDescription: QuattroFormaggi is defined as a subclass of NamedPizza and is explicitly disjoint with a range of other specific pizza classes, meaning an individual pizza cannot simultaneously belong to QuattroFormaggi and any of the listed disjoint classes. Members of this class must have at least one tomato topping and at least one four-cheeses topping. Additionally, QuattroFormaggi pizzas are restricted to having only tomato and four-cheeses toppings—no other topping types are permitted. This formalization guarantees that any pizza classified as QuattroFormaggi has a distinctive combination of tomato and four-cheeses toppings, consistent with its traditional recipe.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some FourCheesesTopping]', '[hasTopping only (FourCheesesTopping or TomatoTopping)]', '[hasTopping only TomatoTopping]']}\nGenerated CQs:", "output": "Is it necessary for a QuattroFormaggi pizza to have at least one TomatoTopping as a topping? | Can a pizza be classified as QuattroFormaggi if it does not include any TomatoTopping among its toppings? | Does the presence of TomatoTopping serve as a required condition for an item to be recognized as QuattroFormaggi? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Siciliana\nDescription: Siciliana is a subclass of NamedPizza, explicitly disjoint from numerous other specific pizza types, ensuring that no individual pizza can be simultaneously classified as Siciliana and any of the listed varieties (e.g., Mushroom, Margherita, FourSeasons, etc.). Siciliana pizzas are characterized by their toppings: they must include some tomato topping, garlic topping, ham topping, artichoke topping, olive topping, mozzarella topping, and anchovies topping. Furthermore, these pizzas are restricted to only have toppings from the following: anchovies, mozzarella, garlic, artichoke, tomato, ham, and olive—no additional toppings are permitted. This formalization precisely defines the Siciliana pizza in terms of both its composition and differentiation from other pizzas.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping some GarlicTopping]', '[hasTopping some HamTopping]', '[hasTopping some ArtichokeTopping]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some AnchoviesTopping]', '[hasTopping only (AnchoviesTopping and MozzarellaTopping and GarlicTopping and ArtichokeTopping and TomatoTopping and HamTopping and OliveTopping)]']}\nGenerated CQs:", "output": "Are Siciliana pizzas restricted to having only Anchovies, Mozzarella, Garlic, Artichoke, Tomato, Ham, or Olive as toppings? | Could a pizza still be classified as Siciliana if it includes a topping not listed among Anchovies, Mozzarella, Garlic, Artichoke, Tomato, Ham, or Olive? | Does the definition of Siciliana exclude all toppings other than Anchovies, Mozzarella, Garlic, Artichoke, Tomato, Ham, and Olive from being present on the pizza? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Soho\nDescription: Soho is defined as a subclass of NamedPizza and is explicitly disjoint with a range of other specific pizza types, ensuring that no instance can simultaneously belong to both Soho and these other classes. Members of the Soho class are characterized by their required toppings: each Soho pizza must include tomato, garlic, olive, mozzarella, parmesan, and rocket toppings. Additionally, the only permitted toppings for Soho pizzas are mozzarella, garlic, tomato, rocket, olive, or parmesan, meaning no other toppings are allowed on this type of pizza. This formalization strictly specifies both the mandatory inclusion and the exclusivity of particular toppings for Soho pizzas.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'Veneziana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping some TomatoTopping]', '[hasTopping only (MozzarellaTopping or GarlicTopping or TomatoTopping or RocketTopping or OliveTopping or ParmesanTopping)]', '[hasTopping some GarlicTopping]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some ParmesanTopping]', '[hasTopping only RocketTopping]']}\nGenerated CQs:", "output": "Is it required for a Soho pizza to have at least one topping of RocketTopping? | Does every Soho pizza include RocketTopping as one of its toppings? | Can a Soho pizza exist without having any RocketTopping among its toppings? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Veneziana\nDescription: Veneziana is defined as a subclass of NamedPizza and is disjoint with a range of other specific pizzas, ensuring no individual instance can simultaneously belong to Veneziana and any of those disjoint classes. Members of the Veneziana class must have only the following toppings: MozzarellaTopping, TomatoTopping, SultanaTopping, OnionTopping, CaperTopping, OliveTopping, or PineKernels; each member is also required to have at least one of each of these toppings present. Additionally, Veneziana pizzas have Italy as their country of origin. This ontological definition captures the uniquely defined set of ingredients and exclusive identity of the Veneziana pizza within the broader NamedPizza category.\nAxiom: {'subClassOf': ['NamedPizza'], 'disjointWith': ['Mushroom', 'LaReine', 'Napoletana', 'AmericanHot', 'UnclosedPizza', 'PrinceCarlo', 'Capricciosa', 'FruttiDiMare', 'Siciliana', 'Cajun', 'Margherita', 'American', 'SloppyGiuseppe', 'Caprina', 'Soho', 'Parmense', 'PolloAdAstra', 'Fiorentina', 'Rosa', 'QuattroFormaggi', 'Giardiniera', 'FourSeasons'], 'propertyRestrictions': ['[hasTopping only (MozzarellaTopping or TomatoTopping or SultanaTopping or OnionTopping or CaperTopping or OliveTopping or PineKernels)]', '[hasTopping some PineKernels]', '[hasTopping some TomatoTopping]', '[hasTopping some OliveTopping]', '[hasTopping some MozzarellaTopping]', '[hasTopping some OnionTopping]', '[hasCountryOfOrigin hasValue Italy]', '[hasTopping some CaperTopping]', '[hasTopping only SultanaTopping]']}\nGenerated CQs:", "output": "Must a Veneziana pizza have at least one SultanaTopping as one of its toppings? | Is the presence of SultanaTopping a required condition for classifying a pizza as Veneziana? | Can a pizza lacking SultanaTopping ever be correctly categorized as Veneziana? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ArtichokeTopping\nDescription: ArtichokeTopping is defined as a subclass of VegetableTopping and is explicitly disjoint with a range of other vegetable toppings, including RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, ensuring that no individual can be classified as an ArtichokeTopping and any of these other types simultaneously. Furthermore, every member of the ArtichokeTopping class is constrained to have at least some level of mild spiciness (hasSpiciness some Mild), distinguishing it by its gentle flavor profile within the broader category of vegetable toppings.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is every ArtichokeTopping required to have at least one spiciness level classified as Mild? | Can an ArtichokeTopping exist without possessing any degree of spiciness identified as Mild? | Does the definition of ArtichokeTopping permit toppings with only Mild spiciness, or could additional spiciness levels also be present? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AsparagusTopping\nDescription: AsparagusTopping is defined as a subclass of VegetableTopping, meaning it represents a specific type of vegetable-based topping. It is disjoint with several other vegetable toppings, including RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, ensuring that an individual cannot simultaneously belong to any of these classes. Additionally, every instance of AsparagusTopping must have some level of mild spiciness, as specified by the hasSpiciness property restriction.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is every AsparagusTopping required to have at least one 'hasSpiciness' property with a Mild value? | Must AsparagusTopping always be associated with some level of Mild spiciness through the hasSpiciness property? | Can there exist an instance of AsparagusTopping without having any Mild spiciness via the hasSpiciness relationship? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CaperTopping\nDescription: CaperTopping is defined as a subclass of VegetableTopping, indicating that it is a specific type of vegetable-based topping. It is explicitly disjoint with other vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, meaning that an individual topping cannot belong to both CaperTopping and any of these classes simultaneously. Additionally, CaperTopping is characterized by having a property restriction requiring that it has some level of spiciness classified as Mild.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Must every CaperTopping have at least one hasSpiciness value that is Mild? | Is it possible for a CaperTopping to lack any hasSpiciness relation with Mild as a value? | Does the definition of CaperTopping require the existence of a Mild spiciness property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LeekTopping\nDescription: LeekTopping is defined as a subclass of VegetableTopping, representing toppings made from leeks. It is explicitly disjoint from a range of other vegetable toppings—including RocketTopping, OnionTopping, SpinachTopping, and others—ensuring that no individual can be both a LeekTopping and any of these other toppings simultaneously. Furthermore, members of this class are characterized by the property that they have at least some level of mild spiciness (hasSpiciness some Mild), distinguishing their flavor profile among vegetable toppings.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is it necessary for a LeekTopping to have the property 'hasSpiciness' with at least one Mild value? | Does every instance of LeekTopping possess a spiciness that includes Mild as one of its characteristics? | Can a LeekTopping exist without being associated with some degree of Mild spiciness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: OliveTopping\nDescription: OliveTopping is defined as a subclass of VegetableTopping and is disjoint with other vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping—meaning an individual cannot belong to both OliveTopping and any of these classes. Members of the OliveTopping class are further characterized by the property that they have at least some level of spiciness classified as mild.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is every OliveTopping required to have a spiciness property with at least one value of Mild? | Can an OliveTopping exist without any mild spiciness associated with it? | Are all OliveTopping instances guaranteed to possess some degree of mild spiciness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PetitPoisTopping\nDescription: PetitPoisTopping is defined as a subclass of VegetableTopping and is explicitly disjoint with other vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, and TomatoTopping—meaning no individual can simultaneously belong to PetitPoisTopping and any of these other topping classes. Additionally, PetitPoisTopping is characterized by the property restriction that it has some level of spiciness classified as Mild. This formalization ensures that PetitPoisTopping represents a unique, mildly spicy vegetable topping distinct from all other specified vegetable toppings.\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is it required that a PetitPoisTopping ingredient has at least one spiciness level classified as Mild? | Does every PetitPoisTopping possess the property 'hasSpiciness' relating it to Mild spiciness? | Can a PetitPoisTopping exist without any association to Mild spiciness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RocketTopping\nDescription: RocketTopping is defined as a subclass of VegetableTopping, representing a specific type of vegetable-based topping. It is disjoint with multiple other vegetable toppings, including LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping—ensuring no individual can simultaneously belong to RocketTopping and any of these classes. Additionally, RocketTopping is characterized by the property that it must have at least some medium level of spiciness (hasSpiciness some Medium).\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping', 'TomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Medium]']}\nGenerated CQs:", "output": "Is it necessary for a RocketTopping to have the hasSpiciness property with Medium as its value? | Must every instance of RocketTopping exhibit at least some degree of Medium spiciness? | Does the presence of Medium spiciness through the hasSpiciness property define a RocketTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TomatoTopping\nDescription: TomatoTopping is a subclass of VegetableTopping, representing toppings derived from tomatoes. It is explicitly disjoint with other vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, and PetitPoisTopping, ensuring that no individual can simultaneously be both a TomatoTopping and any of these other toppings. Additionally, TomatoTopping is defined to always have some level of mild spiciness, as specified by the restriction [hasSpiciness some Mild].\nAxiom: {'subClassOf': ['VegetableTopping'], 'disjointWith': ['RocketTopping', 'LeekTopping', 'OnionTopping', 'SpinachTopping', 'GarlicTopping', 'ArtichokeTopping', 'PepperTopping', 'AsparagusTopping', 'OliveTopping', 'CaperTopping', 'MushroomTopping', 'PetitPoisTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is it required that every TomatoTopping possesses at least one spiciness classified as Mild? | Can a TomatoTopping exist without having any mild spiciness attribute? | Does the definition of TomatoTopping permit it to have only non-mild spiciness levels? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RosemaryTopping\nDescription: RosemaryTopping is defined as a subclass of HerbSpiceTopping, representing toppings that are both herbal and spicy in nature. This class is explicitly disjoint with CajunSpiceTopping, ensuring that no topping can be classified simultaneously as RosemaryTopping and CajunSpiceTopping. RosemaryTopping is further characterized by the property restriction that it must have at least some mild spiciness, distinguishing it from toppings with no or higher levels of spiciness.\nAxiom: {'subClassOf': ['HerbSpiceTopping'], 'disjointWith': ['CajunSpiceTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is every RosemaryTopping required to have a spiciness level that is Mild? | Can a RosemaryTopping exist without any mild spiciness property? | Must all instances of RosemaryTopping possess at least one spiciness classified as Mild? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FishTopping\nDescription: FishTopping is defined as a subclass of PizzaTopping and is explicitly disjoint with MeatTopping, SauceTopping, VegetableTopping, CheeseTopping, HerbSpiceTopping, NutTopping, and FruitTopping, ensuring that no topping instance can simultaneously belong to more than one of these classes. Members of the FishTopping class are characterized by the property that they possess at least some mild level of spiciness, as specified by the 'hasSpiciness some Mild' restriction. This formalization guarantees the uniqueness and specific mild spiciness characteristic of any pizza topping categorized as FishTopping.\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['MeatTopping', 'SauceTopping', 'VegetableTopping', 'CheeseTopping', 'HerbSpiceTopping', 'NutTopping', 'FruitTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Must every FishTopping include at least one instance with hasSpiciness set to Mild? | Is it required that FishTopping hasSpiciness relates to Mild in at least one case? | Can a topping classified as FishTopping exist without being associated with any Mild spiciness level? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NutTopping\nDescription: NutTopping is defined as a subclass of PizzaTopping, representing pizza toppings that consist specifically of nuts. It is explicitly disjoint with MeatTopping, SauceTopping, VegetableTopping, CheeseTopping, FishTopping, HerbSpiceTopping, and FruitTopping, ensuring that no topping instance can simultaneously belong to these other topping categories. Additionally, every NutTopping must have at least some level of mild spiciness, as constrained by the property restriction (hasSpiciness some Mild).\nAxiom: {'subClassOf': ['PizzaTopping'], 'disjointWith': ['MeatTopping', 'SauceTopping', 'VegetableTopping', 'CheeseTopping', 'FishTopping', 'HerbSpiceTopping', 'FruitTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is it necessary for a NutTopping to have at least one hasSpiciness property value that is Mild? | Must every instance of NutTopping be associated with some mild level of spiciness through the hasSpiciness property? | Does the presence of a NutTopping imply the existence of a hasSpiciness relationship to Mild? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: FourCheesesTopping\nDescription: FourCheesesTopping is defined as a subclass of CheeseTopping, representing a specific type of cheese topping distinguished by its composition of four cheeses. It is declared disjoint with GoatsCheeseTopping, MozzarellaTopping, GorgonzolaTopping, and ParmesanTopping, meaning an individual topping cannot simultaneously be classified as FourCheesesTopping and any of these other specific cheese toppings. Additionally, FourCheesesTopping must have a spiciness level that is at least mildly spicy, as specified by the restriction that it has some Mild spiciness.\nAxiom: {'subClassOf': ['CheeseTopping'], 'disjointWith': ['GoatsCheeseTopping', 'MozzarellaTopping', 'GorgonzolaTopping', 'ParmesanTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Must every FourCheesesTopping have at least one hasSpiciness relationship to Mild? | Is it required for a FourCheesesTopping to exhibit some level of spiciness classified as Mild? | Does the existence of a Mild spiciness property suffice for an instance to be considered a FourCheesesTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GoatsCheeseTopping\nDescription: GoatsCheeseTopping is defined as a subclass of CheeseTopping and is explicitly disjoint with MozzarellaTopping, GorgonzolaTopping, ParmesanTopping, and FourCheesesTopping, meaning an individual topping cannot simultaneously belong to any of these classes. GoatsCheeseTopping is characterized by the property that it has some degree of mild spiciness (hasSpiciness some Mild), indicating that any topping of this class is mildly spicy.\nAxiom: {'subClassOf': ['CheeseTopping'], 'disjointWith': ['MozzarellaTopping', 'GorgonzolaTopping', 'ParmesanTopping', 'FourCheesesTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is it required that any GoatsCheeseTopping must exhibit at least one instance of the hasSpiciness property with value Mild? | Does every GoatsCheeseTopping have an associated spiciness level that includes Mild? | Can a GoatsCheeseTopping exist without being characterized by the hasSpiciness property set to Mild? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: GorgonzolaTopping\nDescription: GorgonzolaTopping is defined as a subclass of CheeseTopping, representing a specific type of cheese-based topping. It is explicitly disjoint with GoatsCheeseTopping, MozzarellaTopping, ParmesanTopping, and FourCheesesTopping, ensuring that an individual cannot simultaneously belong to any of these classes. GorgonzolaTopping is characterized by having some level of mild spiciness, as specified by the property restriction (hasSpiciness some Mild).\nAxiom: {'subClassOf': ['CheeseTopping'], 'disjointWith': ['GoatsCheeseTopping', 'MozzarellaTopping', 'ParmesanTopping', 'FourCheesesTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is it required that every GorgonzolaTopping has at least one spiciness characteristic classified as Mild? | Can a GorgonzolaTopping exist without being associated with the Mild level of spiciness? | Does the definition of GorgonzolaTopping necessitate that it possesses the property 'hasSpiciness' with respect to Mild flavor? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MozzarellaTopping\nDescription: MozzarellaTopping is a subclass of CheeseTopping, representing a cheese-based topping specifically characterized by its mild spiciness and Italian origin. It is explicitly disjoint from GoatsCheeseTopping, GorgonzolaTopping, ParmesanTopping, and FourCheesesTopping, ensuring that no individual can simultaneously be an instance of MozzarellaTopping and any of these other cheese topping classes. All individuals of MozzarellaTopping are associated with a mild level of spiciness and must originate from Italy.\nAxiom: {'subClassOf': ['CheeseTopping'], 'disjointWith': ['GoatsCheeseTopping', 'GorgonzolaTopping', 'ParmesanTopping', 'FourCheesesTopping'], 'propertyRestrictions': ['[hasCountryOfOrigin hasValue Italy]', '[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is it required that every MozzarellaTopping has at least some level of spiciness categorized as Mild? | Can a MozzarellaTopping exist without having the hasSpiciness property set to Mild? | Does the presence of MozzarellaTopping entail that it must be associated with a Mild spiciness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ChickenTopping\nDescription: ChickenTopping is defined as a subclass of MeatTopping and is explicitly disjoint with PeperoniSausageTopping, HotSpicedBeefTopping, and HamTopping, ensuring that no individual can simultaneously belong to both ChickenTopping and any of these other meat topping classes. Members of the ChickenTopping class are required to have at least some level of spiciness characterized as Mild. This formalization specifies that ChickenTopping represents mild, non-overlapping meat-based pizza toppings distinct from other specified meat varieties.\nAxiom: {'subClassOf': ['MeatTopping'], 'disjointWith': ['PeperoniSausageTopping', 'HotSpicedBeefTopping', 'HamTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Does every ChickenTopping require at least one hasSpiciness property value of Mild? | Is it necessary for a ChickenTopping to be associated with some level of spiciness classified as Mild? | Can a ChickenTopping exist without having any hasSpiciness relationship to Mild? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HotSpicedBeefTopping\nDescription: HotSpicedBeefTopping is defined as a subclass of MeatTopping, representing a specific type of meat-based pizza topping. It is disjoint with PeperoniSausageTopping, HamTopping, and ChickenTopping, meaning no individual topping can simultaneously belong to any of these classes and HotSpicedBeefTopping. Members of this class are characterized by having at least some degree of spiciness classified as Hot, distinguishing them from other meat toppings in the ontology.\nAxiom: {'subClassOf': ['MeatTopping'], 'disjointWith': ['PeperoniSausageTopping', 'HamTopping', 'ChickenTopping'], 'propertyRestrictions': ['[hasSpiciness only Hot]']}\nGenerated CQs:", "output": "Must every HotSpicedBeefTopping have at least one hasSpiciness property value that is Hot? | Is it necessary for HotSpicedBeefTopping to be associated with some level of hot spiciness via the hasSpiciness property? | Can a HotSpicedBeefTopping exist without having the hasSpiciness property filled with a Hot value? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: JalapenoPepperTopping\nDescription: JalapenoPepperTopping is formally defined as a subclass of PepperTopping, indicating that it inherits all general characteristics of pepper-based toppings. It is explicitly disjoint with SweetPepperTopping, GreenPepperTopping, and PeperonataTopping, meaning that no individual can simultaneously be an instance of JalapenoPepperTopping and any of these other topping types. Additionally, this class is characterized by the property restriction that every JalapenoPepperTopping must exhibit some level of hot spiciness, ensuring that all members are differentiated by their distinctly hot flavor profile.\nAxiom: {'subClassOf': ['PepperTopping'], 'disjointWith': ['SweetPepperTopping', 'GreenPepperTopping', 'PeperonataTopping'], 'propertyRestrictions': ['[hasSpiciness only Hot]']}\nGenerated CQs:", "output": "Must every JalapenoPepperTopping have at least one instance of spiciness classified as Hot? | Is it required for JalapenoPepperTopping to possess the hasSpiciness property associated with Hot? | Can JalapenoPepperTopping exist without being connected to Hot via the hasSpiciness property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PeperonataTopping\nDescription: PeperonataTopping is defined as a subclass of PepperTopping, meaning it inherits all characteristics typical of pepper-based pizza toppings. It is explicitly disjoint with SweetPepperTopping, GreenPepperTopping, and JalapenoPepperTopping, so no individual can simultaneously belong to any of those classes and PeperonataTopping. Every instance of PeperonataTopping is required to have at least some medium level of spiciness, as specified by its property restriction on hasSpiciness. This ensures that PeperonataTopping is uniquely distinguished by both its type within pepper toppings and its characteristic spiciness.\nAxiom: {'subClassOf': ['PepperTopping'], 'disjointWith': ['SweetPepperTopping', 'GreenPepperTopping', 'JalapenoPepperTopping'], 'propertyRestrictions': ['[hasSpiciness only Medium]']}\nGenerated CQs:", "output": "Must every PeperonataTopping have at least one hasSpiciness property with Medium as its value? | Can a PeperonataTopping exist without being associated with Medium spiciness through the hasSpiciness property? | Is it a requirement that PeperonataTopping be linked to Medium spiciness by means of the hasSpiciness property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SweetPepperTopping\nDescription: SweetPepperTopping is defined as a subclass of PepperTopping, specifying that it represents a type of pepper-based topping. It is explicitly disjoint with GreenPepperTopping, JalapenoPepperTopping, and PeperonataTopping, so no individual can be both a SweetPepperTopping and any of these other pepper toppings. Additionally, SweetPepperTopping has a property restriction requiring that it exhibits at least some mild level of spiciness (hasSpiciness some Mild), distinguishing it from potentially hotter pepper toppings.\nAxiom: {'subClassOf': ['PepperTopping'], 'disjointWith': ['GreenPepperTopping', 'JalapenoPepperTopping', 'PeperonataTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is every SweetPepperTopping required to have a spiciness level that is at least Mild? | Must there exist at least one instance where SweetPepperTopping has spiciness classified as Mild? | Can a SweetPepperTopping exist without being associated with Mild spiciness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: IceCream\nDescription: IceCream is defined as a subclass of Food, and is explicitly disjoint with Pizza, PizzaTopping, and PizzaBase, ensuring that no individual can simultaneously belong to any of these classes. All members of the IceCream class must have at least one topping from FruitTopping, as specified by the property restriction (hasTopping some FruitTopping). The current modeling highlights a domain constraint issue: since the hasTopping property has Pizza as its domain, any use of hasTopping causes the reasoner to infer membership in Pizza. Combined with the disjointness between Pizza and IceCream, this results in a logical inconsistency, illustrating the importance of carefully aligning property domains with intended class usage.\nAxiom: {'subClassOf': ['Food'], 'disjointWith': ['Pizza', 'PizzaTopping', 'PizzaBase'], 'propertyRestrictions': ['[hasTopping only FruitTopping]']}\nGenerated CQs:", "output": "Is it required for every IceCream to include at least one topping that is a FruitTopping? | Can an IceCream exist without having any FruitTopping as a topping? | Does the presence of a FruitTopping as a topping suffice for something to be classified as IceCream? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Pizza\nDescription: Pizza is defined as a subclass of Food and is explicitly disjoint with IceCream, PizzaTopping, and PizzaBase, ensuring that no individual can simultaneously be an instance of Pizza and any of these disjoint classes. Every Pizza must have at least one base, specified by the restriction that it must have some relationship via hasBase to an instance of PizzaBase. This formalization captures the essential structure of a pizza: a food item composed of a particular base and distinguished from toppings or other food types such as ice cream.\nAxiom: {'subClassOf': ['Food'], 'disjointWith': ['IceCream', 'PizzaTopping', 'PizzaBase'], 'propertyRestrictions': ['[hasBase only PizzaBase]']}\nGenerated CQs:", "output": "Must every Pizza have at least one 'hasBase' relationship with some PizzaBase? | Is it required that a Pizza is associated with a PizzaBase via the 'hasBase' property? | Can a Pizza exist without having a 'hasBase' connection to any instance of PizzaBase? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SlicedTomatoTopping\nDescription: SlicedTomatoTopping is defined as a subclass of TomatoTopping and is explicitly disjoint with SundriedTomatoTopping, ensuring that no individual can be both a SlicedTomatoTopping and a SundriedTomatoTopping. Members of this class are characterized by the property that they must have at least some level of mild spiciness, as specified by the hasSpiciness restriction.\nAxiom: {'subClassOf': ['TomatoTopping'], 'disjointWith': ['SundriedTomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Must a SlicedTomatoTopping possess the property hasSpiciness with at least some value classified as Mild? | Does every instance of SlicedTomatoTopping necessarily have some form of spiciness level that is Mild? | Can a SlicedTomatoTopping exist without being associated to Mild via the hasSpiciness property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SundriedTomatoTopping\nDescription: SundriedTomatoTopping is a subclass of TomatoTopping, meaning it inherits all characteristics typical of tomato-based toppings. It is defined as disjoint with SlicedTomatoTopping, ensuring that an individual cannot be both a SundriedTomatoTopping and a SlicedTomatoTopping. Additionally, every instance of SundriedTomatoTopping must have at least some mild level of spiciness, as specified by the property restriction (hasSpiciness some Mild).\nAxiom: {'subClassOf': ['TomatoTopping'], 'disjointWith': ['SlicedTomatoTopping'], 'propertyRestrictions': ['[hasSpiciness only Mild]']}\nGenerated CQs:", "output": "Is it required that every SundriedTomatoTopping possesses the hasSpiciness property with at least one Mild instance? | Can SundriedTomatoTopping have spiciness levels other than Mild, or must it always include Mild spiciness? | Does the ontology entail that SundriedTomatoTopping must be associated with some form of Mild spiciness via the hasSpiciness relation? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: VegetarianPizza\nDescription: VegetarianPizza is defined as a subclass of Pizza that is disjoint with NonVegetarianPizza, meaning no pizza can be both vegetarian and non-vegetarian. It is equivalent to pizzas that have neither meat toppings nor fish toppings—specifically, these pizzas do not have any topping that is an instance of MeatTopping or FishTopping. VegetarianPizza may have any combination of non-meat, non-fish toppings or no toppings at all, as specified in the current description. This ensures that only pizzas entirely free of meat and fish toppings are classified as VegetarianPizza.\nAxiom: {'disjointWith': ['NonVegetarianPizza'], 'equivalentClass': ['(Pizza and not [hasTopping some MeatTopping] and not [hasTopping only FishTopping])']}\nGenerated CQs:", "output": "Is every VegetarianPizza necessarily a Pizza that does not have any toppings which qualify as MeatTopping or FishTopping? | Is VegetarianPizza equivalent to the intersection of Pizza and those lacking both meat and fish as toppings? | Can VegetarianPizza be fully characterized as Pizzas for which there does not exist a MeatTopping or FishTopping among their toppings? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NonVegetarianPizza\nDescription: NonVegetarianPizza is formally defined as any Pizza that is not a VegetarianPizza. It is explicitly disjoint with VegetarianPizza, ensuring that no individual pizza can be both a NonVegetarianPizza and a VegetarianPizza. The equivalence axiom specifies that NonVegetarianPizza includes all and only those pizzas that are instances of Pizza but not classified as VegetarianPizza.\nAxiom: {'disjointWith': ['VegetarianPizza'], 'equivalentClass': ['(Pizza or not VegetarianPizza)']}\nGenerated CQs:", "output": "Is every NonVegetarianPizza necessarily a Pizza that is not a VegetarianPizza? | Is NonVegetarianPizza logically defined as the intersection of Pizza and the complement of VegetarianPizza? | Does the class NonVegetarianPizza exclude any Pizza that is a VegetarianPizza? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CheeseyPizza\nDescription: CheeseyPizza is formally defined as any Pizza that has at least one cheese topping, expressed by the equivalence axiom: CheeseyPizza ≡ Pizza and (hasTopping some CheeseTopping). This means that every instance of CheeseyPizza must be a pizza with one or more cheese toppings, aligning with the description: any pizza that has at least one cheese topping.\nAxiom: {'equivalentClass': ['(Pizza or [hasTopping only CheeseTopping])']}\nGenerated CQs:", "output": "Is a CheeseyPizza necessarily a Pizza that has at least one CheeseTopping as a topping? | Is the set of CheeseyPizza identical to the intersection of all Pizzas and those having some CheeseTopping? | Can an individual be classified as CheeseyPizza only if it is both a Pizza and possesses at least one hasTopping relationship to CheeseTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Country\nDescription: Country is an enumerated class, defined as exactly the set containing America, England, France, Germany, and Italy. It is equivalent to the intersection of this set and DomainConcept, meaning each Country instance must be one of these individuals and also a DomainConcept. By axiom, no other individuals can be classified as Country; all specified countries are explicitly different from each other.\nAxiom: {'equivalentClass': ['({America, Italy, Germany, France, England} or DomainConcept)']}\nGenerated CQs:", "output": "Is Country defined as the intersection of the individuals America, Italy, Germany, France, England and the class DomainConcept? | Does every instance of Country correspond to one of America, Italy, Germany, France, or England and also to DomainConcept? | Are there any individuals that are America, Italy, Germany, France, or England and DomainConcept but not classified as Country? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: InterestingPizza\nDescription: InterestingPizza is defined as a subclass of Pizza that has at least three toppings, as specified by a minimum cardinality restriction (hasTopping min 3). This class is equivalent to pizzas possessing at least three values for the hasTopping property, regardless of the type of topping. It is important to note that this restriction is not a qualified cardinality constraint (QCR); it does not require that the toppings belong to a specific class such as PizzaTopping. This formalization captures any pizza with three or more toppings without specifying their types.\nAxiom: {'equivalentClass': ['([hasTopping min 3] or Pizza)']}\nGenerated CQs:", "output": "Does every InterestingPizza necessarily have at least three toppings and be a Pizza? | Can InterestingPizza be considered identical to the intersection of Pizzas with a minimum of three toppings? | Is having at least three toppings a necessary and sufficient condition for a Pizza to be an InterestingPizza? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MeatyPizza\nDescription: MeatyPizza is defined as any pizza (Pizza) that has at least one meat topping, formalized through an existential restriction stating that members of this class must bear at least one hasTopping relationship to an individual of class MeatTopping. This class is equivalent to the intersection of Pizza and those entities with some MeatTopping as a topping, ensuring all MeatyPizza instances feature at least one meat-based topping.\nAxiom: {'equivalentClass': ['([hasTopping only MeatTopping] or Pizza)']}\nGenerated CQs:", "output": "Is MeatyPizza defined as the intersection of Pizza and entities having at least one meat topping? | Does every MeatyPizza necessarily include some topping categorized as MeatTopping? | Can MeatyPizza be fully characterized as a Pizza that has at least one MeatTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SpicyPizza\nDescription: SpicyPizza is defined as any pizza (i.e., an instance of the class Pizza) that has at least one topping which is a SpicyTopping. This equivalence axiom ensures that all and only those pizzas with some spicy topping are classified under SpicyPizza. Thus, membership in the SpicyPizza class is determined precisely by the presence of at least one spicy topping.\nAxiom: {'equivalentClass': ['(Pizza or [hasTopping some SpicyTopping])']}\nGenerated CQs:", "output": "Is every SpicyPizza necessarily a Pizza that has at least one topping classified as a SpicyTopping? | Can SpicyPizza be precisely defined as the intersection of the class Pizza and those with some SpicyTopping? | Is SpicyPizza equivalent to pizzas that are distinguished by having at least one spicy topping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SpicyPizzaEquivalent\nDescription: SpicyPizzaEquivalent is defined as any Pizza that has at least one topping which is both a PizzaTopping and has a spiciness level of Hot. This equivalence axiom provides an alternative to approaches relying on a predefined SpicyTopping class, specifying instead that membership in SpicyPizzaEquivalent requires the existence of a topping meeting both conditions. This ensures precise classification of spicy pizzas based on their actual toppings' spiciness attributes.\nAxiom: {'equivalentClass': ['(Pizza or [hasTopping only ([hasSpiciness some Hot] or PizzaTopping)])']}\nGenerated CQs:", "output": "Is every SpicyPizzaEquivalent necessarily a Pizza with at least one topping that is both a PizzaTopping and possesses some degree of Hot spiciness? | Is SpicyPizzaEquivalent logically defined as the intersection of Pizza and those with a topping that is both a PizzaTopping and includes some Hot spiciness? | Can SpicyPizzaEquivalent be fully characterized as a Pizza that has a topping which is a PizzaTopping and has some Hot as its spiciness? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SpicyTopping\nDescription: SpicyTopping is defined as an equivalent class to pizza toppings that possess a spiciness level of Hot. This means every SpicyTopping is a PizzaTopping and must have at least one instance of hot spiciness. Formally, individuals in this class are restricted to those pizza toppings that are characterized by having a hot spiciness attribute.\nAxiom: {'equivalentClass': ['([hasSpiciness some Hot] or PizzaTopping)']}\nGenerated CQs:", "output": "Is every SpicyTopping necessarily both a PizzaTopping and something that has spiciness characterized as Hot? | Can SpicyTopping be defined as the intersection of PizzaTopping and entities with the property hasSpiciness some Hot? | Is SpicyTopping equivalent to all PizzaTopping instances that have at least one Hot spiciness attribute? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ThinAndCrispyPizza\nDescription: ThinAndCrispyPizza is formally defined as a subclass of Pizza whose base is exclusively of type ThinAndCrispyBase. This means any individual classified as a ThinAndCrispyPizza must be a Pizza and can only have ThinAndCrispyBase as its base, with no other base types permitted. This equivalence axiom precisely characterizes ThinAndCrispyPizza by its unique crust style.\nAxiom: {'equivalentClass': ['(Pizza and [hasBase some ThinAndCrispyBase])']}\nGenerated CQs:", "output": "Is every ThinAndCrispyPizza required to have only ThinAndCrispyBase as its base? | Is ThinAndCrispyPizza equivalent to pizzas that exclusively use ThinAndCrispyBase? | Can ThinAndCrispyPizza be fully defined as the intersection of Pizza and things with base restricted solely to ThinAndCrispyBase? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: VegetarianPizzaEquivalent1\nDescription: VegetarianPizzaEquivalent1 is defined as any pizza (member of the Pizza class) whose toppings, if present, are exclusively vegetarian; that is, it only has toppings that are instances of VegetarianTopping, or it has no toppings at all. Formally, it is equivalent to the intersection of Pizza and those that satisfy the restriction 'hasTopping only VegetarianTopping'. According to the description, this class should be inferred to be equivalent to VegetarianPizzaEquiv2 but is not equivalent to the broader VegetarianPizza class, as the latter does not assume that PizzaTopping encompasses all possible toppings.\nAxiom: {'equivalentClass': ['(Pizza or [hasTopping only VegetarianTopping])']}\nGenerated CQs:", "output": "Does VegetarianPizzaEquivalent1 include only those Pizzas where all toppings are VegetarianTopping? | Is VegetarianPizzaEquivalent1 equivalent to the intersection of Pizza and items whose toppings are restricted to VegetarianTopping? | Can VegetarianPizzaEquivalent1 be defined as a Pizza that necessarily has only VegetarianTopping as its topping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: VegetarianPizzaEquivalent2\nDescription: VegetarianPizzaEquivalent2 is defined as a class equivalent to pizzas that have only sauce, cheese, vegetable, fruit, nut, or herb & spice toppings—no other topping types are permitted. This definition provides an alternative to VegetarianPizzaEquiv1 by specifying allowed toppings directly, avoiding dependency on a pre-defined VegetarianTopping class. However, it is noted that this approach may be less maintainable and is not equivalent to the original VegetarianPizza class.\nAxiom: {'equivalentClass': ['(Pizza or [hasTopping only (SauceTopping and CheeseTopping and VegetableTopping and FruitTopping and NutTopping and HerbSpiceTopping)])']}\nGenerated CQs:", "output": "Is VegetarianPizzaEquivalent2 defined as a Pizza that can only have toppings that are either SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping? | Can a VegetarianPizzaEquivalent2 ever have a topping outside the categories of SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping? | Is being a Pizza with toppings restricted exclusively to SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping sufficient for classification as a VegetarianPizzaEquivalent2? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: VegetarianTopping\nDescription: VegetarianTopping is formally defined as a pizza topping that must be one of the following: SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping. This equivalence axiom ensures that every VegetarianTopping is a subclass of PizzaTopping and cannot be any topping outside this specified set. In practice, this means only toppings within these categories are considered vegetarian according to the ontology.\nAxiom: {'equivalentClass': ['(PizzaTopping or (SauceTopping and CheeseTopping and VegetableTopping and FruitTopping and NutTopping and HerbSpiceTopping))']}\nGenerated CQs:", "output": "Is every VegetarianTopping necessarily classified as a PizzaTopping and also as one of: SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping? | Is VegetarianTopping equivalent to the intersection of PizzaTopping with the union of SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, and HerbSpiceTopping? | Does VegetarianTopping include any toppings apart from SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping within the category of PizzaTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: CheeseyVegetableTopping\nDescription: CheeseyVegetableTopping is defined as a subclass of VegetableTopping, meaning every instance of CheeseyVegetableTopping is also an instance of VegetableTopping. There are no additional restrictions or disjointness axioms specified for this class.\nAxiom: {'subClassOf': ['VegetableTopping', 'CheeseTopping']}\nGenerated CQs:", "output": "Is CheeseyVegetableTopping categorized as a type of CheeseTopping? | What specific types fall under the class CheeseTopping, with regard to CheeseyVegetableTopping? | Which broader classes encompass CheeseyVegetableTopping within their classification? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HotGreenPepperTopping\nDescription: HotGreenPepperTopping is defined as a subclass of GreenPepperTopping, meaning every HotGreenPepperTopping is a type of GreenPepperTopping. There are no additional property restrictions or axioms specified for this class.\nAxiom: {'subClassOf': ['GreenPepperTopping'], 'propertyRestrictions': ['[hasSpiciness some Hot]']}\nGenerated CQs:", "output": "Is every HotGreenPepperTopping required to have a spiciness level that includes some instance of Hot? | Can a HotGreenPepperTopping exist that does not possess the hasSpiciness property with a value classified as Hot? | Does the presence of the hasSpiciness property with Hot necessarily characterize all instances of HotGreenPepperTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ParmaHamTopping\nDescription: ParmaHamTopping is defined as a subclass of HamTopping. This means every instance of ParmaHamTopping is necessarily an instance of HamTopping, inheriting all properties and characteristics of HamTopping. No additional distinguishing property restrictions are specified for this class.\nAxiom: {'subClassOf': ['HamTopping'], 'propertyRestrictions': ['[hasSpiciness some Mild]']}\nGenerated CQs:", "output": "Is every ParmaHamTopping required to have at least one level of spiciness classified as Mild? | Can a ParmaHamTopping exist without any Mild spiciness level? | Does the definition of ParmaHamTopping allow for spiciness levels other than Mild, provided that at least one is Mild? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Spiciness\nDescription: Spiciness is defined as a subclass of ValuePartition, indicating that it represents a partitioning value within a larger classification scheme. As a ValuePartition, it is intended to categorize entities based on specific qualitative values or levels of spiciness. No additional equivalent class axioms are specified.\nAxiom: {'subClassOf': ['ValuePartition'], 'equivalentClass': ['(Hot or Medium or Mild)']}\nGenerated CQs:", "output": "Is Spiciness defined as exactly the union of Hot, Medium, and Mild? | Are all instances of Hot, Medium, or Mild considered Spiciness? | Does Spiciness include any categories apart from Hot, Medium, and Mild? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SultanaTopping\nDescription: SultanaTopping is a class defined by the property restriction that its members must exhibit some medium level of spiciness, as specified by the hasSpiciness property. No further superclass or disjointness constraints are asserted for this class.\nAxiom: {'subClassOf': ['FruitTopping'], 'propertyRestrictions': ['[hasSpiciness some Medium]']}\nGenerated CQs:", "output": "Is SultanaTopping classified as a kind of FruitTopping? | What toppings are considered subtypes of FruitTopping, including SultanaTopping? | Which higher-level topping categories encompass SultanaTopping? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: TobascoPepperSauce\nDescription: TobascoPepperSauce is a class defined by its property restriction: all instances must have at least some degree of spiciness classified as Hot. There are no asserted superclass relationships, but the essential characteristic of this class is the requirement that every TobascoPepperSauce possesses hot spiciness.\nAxiom: {'subClassOf': ['SauceTopping'], 'propertyRestrictions': ['[hasSpiciness some Hot]']}\nGenerated CQs:", "output": "Is TobascoPepperSauce classified as a subcategory of SauceTopping? | Which toppings are more specific instances under SauceTopping, such as TobascoPepperSauce? | To which broader topping classes does TobascoPepperSauce belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: RealItalianPizza\nDescription: RealItalianPizza is defined as an equivalent class to pizzas that have Italy as their country of origin. This means any individual that is classified as a pizza and is specifically identified as originating from Italy is considered a RealItalianPizza. The class captures the concept of authentic Italian pizza through this origin-based restriction.\nAxiom: {'equivalentClass': ['(Pizza and [hasCountryOfOrigin hasValue Italy])'], 'propertyRestrictions': ['[hasBase only ThinAndCrispyBase]']}\nGenerated CQs:", "output": "Is RealItalianPizza required to have only ThinAndCrispyBase as its base? | Can a RealItalianPizza have any base type other than ThinAndCrispyBase? | Does the definition of RealItalianPizza exclude all bases except for ThinAndCrispyBase? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasSpiciness\nDescription: The property \"hasSpiciness\" is a functional property, meaning each subject can have at most one value for this property. Its range is restricted to the class \"Spiciness,\" but no explicit domain is specified. It is designed to denote the spiciness level of an entity, particularly in the context of a ValuePartition. There are no super-properties or inverse properties defined.\nAxiom: {'characteristics': ['Functional'], 'domain': ['None'], 'range': [], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Does the property 'hasSpiciness' accept any value that is not classified as Spiciness as its range? | Are all possible values of 'hasSpiciness' instances of the class Spiciness? | Which types of entities can serve as the range for the 'hasSpiciness' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: isToppingOf\nDescription: The property \"isToppingOf\" is a functional object property, meaning each instance of \"PizzaTopping\" can be a topping of at most one \"Pizza\". Its domain is restricted to \"PizzaTopping\" and its range to \"Pizza\". \"isToppingOf\" is a sub-property of \"isIngredientOf\" and has \"hasTopping\" as its inverse. According to the description, each topping instance should only be associated with a single pizza.\nAxiom: {'characteristics': ['Functional'], 'domain': ['PizzaTopping'], 'range': ['Pizza'], 'subPropertyOf': ['isIngredientOf'], 'inverseOf': []}\nGenerated CQs:", "output": "How are the properties ‘isToppingOf’ and ‘hasTopping’ related in terms of inverses within the ontology? | If an individual A isToppingOf B, does this entail that B hasTopping A in the ontology? | What property is defined as the inverse of ‘isToppingOf’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasIngredient\nDescription: The property \"hasIngredient\" is a transitive object property relating entities of type Food to other Food entities. Because of its transitivity, if Food A hasIngredient Food B and Food B hasIngredient Food C, then Food A also hasIngredient Food C. It has \"Food\" as both its domain and range, ensuring it only connects food items. The property is the inverse of \"isIngredientOf\" and carries no additional super-properties. Current comments note that due to transitivity, the ingredients of ingredients are considered ingredients of the whole.\nAxiom: {'characteristics': ['Transitive'], 'domain': ['Food'], 'range': ['Food'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What is the inverse property of ‘hasIngredient’ in the ontology? | If entity X has ingredient Y, does this entail that Y is an ingredient of X? | How does the ontology define the connection between ‘hasIngredient’ and ‘isIngredientOf’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasBase\nDescription: The property \"hasBase\" is both functional and inverse functional, ensuring that each Pizza has exactly one PizzaBase and each PizzaBase is associated with exactly one Pizza. Its domain is Pizza, and its range is PizzaBase, indicating it links pizzas to their bases. \"hasBase\" is a sub-property of \"hasIngredient,\" specifying it as a specialized form of ingredient relationship. It has an inverse property \"isBaseOf,\" which links PizzaBase to Pizza.\nAxiom: {'characteristics': ['Functional', 'InverseFunctional'], 'domain': ['Pizza'], 'range': ['PizzaBase'], 'subPropertyOf': ['hasIngredient'], 'inverseOf': []}\nGenerated CQs:", "output": "How are the object properties ‘hasBase’ and ‘isBaseOf’ connected in terms of inverse relations within the ontology? | If entity A hasBase entity B, does the ontology entail that entity B isBaseOf entity A? | Which object property is defined as the inverse of ‘isBaseOf’ in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasTopping\nDescription: The property \"hasTopping\" is an inverse functional object property, meaning each pizza topping can be associated with at most one pizza via this property. Its domain is restricted to Pizza, and its range is PizzaTopping. \"hasTopping\" is a sub-property of \"hasIngredient\" and has \"isToppingOf\" as its inverse property. Note that \"hasTopping\" is inverse functional because \"isToppingOf\" is functional.\nAxiom: {'characteristics': ['InverseFunctional'], 'domain': ['Pizza'], 'range': ['PizzaTopping'], 'subPropertyOf': ['hasIngredient'], 'inverseOf': []}\nGenerated CQs:", "output": "How are the properties ‘hasTopping’ and ‘isToppingOf’ related in terms of logical inverses in the ontology? | If item A hasTopping item B, does the ontology entail that item B isToppingOf item A? | Which property functions as the inverse of ‘hasTopping’ in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: isBaseOf\nDescription: The property \"isBaseOf\" is both functional and inverse functional, meaning each PizzaBase is the base of at most one Pizza, and each Pizza has at most one PizzaBase. Its domain is restricted to PizzaBase, and its range is Pizza. \"isBaseOf\" is a sub-property of \"isIngredientOf\" and has \"hasBase\" as its inverse property. This property is used to relate a PizzaBase to the Pizza for which it serves as the base.\nAxiom: {'characteristics': ['Functional', 'InverseFunctional'], 'domain': ['PizzaBase'], 'range': ['Pizza'], 'subPropertyOf': ['isIngredientOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Which property is formally specified as the inverse of ‘isBaseOf’ in the ontology? | If entity A isBaseOf entity B, does the ontology entail that B hasBase A? | How does the ontology define the logical connection between ‘isBaseOf’ and ‘hasBase’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: isIngredientOf\nDescription: The property \"isIngredientOf\" is a transitive property relating instances of Food to other instances of Food, designating that one food is an ingredient of another. Its domain and range are both restricted to the class Food. \"isIngredientOf\" is the inverse of \"hasIngredient\" and should mirror all subproperties and attributes associated with \"hasIngredient,\" as noted in its current description. No super-properties are specified.\nAxiom: {'characteristics': ['Transitive'], 'domain': ['Food'], 'range': ['Food'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "What is the inverse relationship defined between 'isIngredientOf' and 'hasIngredient' in the ontology? | If entity X is an ingredient of entity Y, does the ontology assert that Y has ingredient X? | Which property functions as the inverse for 'isIngredientOf' within this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasCountryOfOrigin\nDescription: The property \"hasCountryOfOrigin\" has no explicitly defined characteristics, domain, or range constraints. It is not specified as a sub-property of any other property, nor does it have an inverse property. Typically, \"hasCountryOfOrigin\" is intended to relate entities to their country of origin, but no further restrictions or definitions are enforced by the current axioms.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that 'hasCountryOfOrigin' does not have a specified domain? | What types of subjects are allowed for the property 'hasCountryOfOrigin'? | Is it correct that 'hasCountryOfOrigin' does not have a defined range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PhysicalObject\nDescription: PhysicalObject is defined as a subclass of PhysicalEndurant, indicating that it inherits all characteristics of entities that persist through time while maintaining their identity. It is explicitly disjoint with Stuff, which means no individual can simultaneously be both a PhysicalObject and Stuff. This class represents discrete, countable entities as opposed to unstructured or undifferentiated substances.\nAxiom: {'subClassOf': ['PhysicalEndurant'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology characterize the distinction between PhysicalObject and Stuff? | Is there any entity that can simultaneously be classified as both PhysicalObject and Stuff? | Which classes are specified as mutually exclusive with Stuff within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MixedStuff\nDescription: MixedStuff is defined as a subclass of Stuff, with the additional restriction that any instance must have at least two component parts, each of which is itself an instance of Stuff (expressed as having at least two 'hasPartStuff' relations to Stuff). MixedStuff is explicitly disjoint with PureStuff, ensuring no overlap between mixtures and pure substances.\n\nConceptually, MixedStuff captures the essence of mixtures as materials composed of variable proportions of distinct, observable components that can be physically separated. The classification is based on the nature and roles of the components, explicitly excluding cases such as different phases of the same substance (e.g., ice in water), which remain PureStuff. Colloids are considered MixedStuff only when composed of different kinds of Stuff, maintaining the requirement for distinct observable constituents.\nAxiom: {'subClassOf': ['Stuff', '(Stuff and [hasPartStuff min 2 Stuff])'], 'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology define the distinction between MixedStuff and PureStuff? | Is there any instance that can belong to both MixedStuff and PureStuff? | Which classes are logically incompatible with PureStuff according to the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: ContinuousMedium\nDescription: ContinuousMedium is defined as a subclass of StuffRole and is also known as dispersion medium. It is explicitly disjoint with DispersedPhase, ensuring that no individual can simultaneously belong to both classes. Members of ContinuousMedium are characterized by having a colloidFormingRelation to at least one DispersedPhase, reflecting their essential role in colloidal systems as the medium in which dispersed phases are distributed.\nAxiom: {'subClassOf': ['StuffRole'], 'disjointWith': [], 'propertyRestrictions': ['[colloidFormingRelation some DispersedPhase]']}\nGenerated CQs:", "output": "What logical separation is defined between ContinuousMedium and DispersedPhase within the ontology? | Can an entity simultaneously be classified as both ContinuousMedium and DispersedPhase? | Which classes are explicitly stated as mutually exclusive with DispersedPhase? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Solute\nDescription: Solute is defined as a subclass of StuffRole and is explicitly disjoint from Solvent, ensuring that no entity can simultaneously be both a Solute and a Solvent. Formally, every Solute is related through the inverse of solutionFormingRelation to some Solvent, indicating its essential role in solution formation. Conceptually, a Solute is a substance that is dissolved in another substance (the Solvent).\nAxiom: {'subClassOf': ['StuffRole'], 'disjointWith': [], 'propertyRestrictions': ['[inverseOf solutionFormingRelation some Solvent]']}\nGenerated CQs:", "output": "What is the formal distinction between Solute and Solvent in the ontology? | Is there any entity that can belong to both the Solute and Solvent classes? | Which entities or classes are explicitly specified as disjoint with Solute? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HeterogeneousMixture\nDescription: HeterogeneousMixture is a subclass of MixedStuff, formally disjoint from HomogeneousMixture, meaning no mixture can be both heterogeneous and homogeneous simultaneously. Members of this class are defined by having at least two different granule types (each being a Molecule or MultiMoleculeParticle) and consisting of a minimum of two distinct parts, each being either MixedStuff or PureStuff. Additionally, every HeterogeneousMixture exhibits exactly one instance of UnevenDistribution, ensuring that its components are not distributed uniformly. As described, a HeterogeneousMixture is a combination of different substances, often with visibly different particle sizes, which do not react chemically and can be separated by physical means (such as filtration). Unlike a homogeneous mixture, any portion of a heterogeneous mixture may differ in composition from the whole, unless special care is taken in selecting the portion.\nAxiom: {'subClassOf': ['MixedStuff'], 'disjointWith': [], 'propertyRestrictions': ['[hasGranuleType min 2 (Molecule or MultiMoleculeParticle)]', '[hasPartStuff min 2 (MixedStuff or PureStuff)]', '[hasStuffDistribution exactly 1 UnevenDistribution]']}\nGenerated CQs:", "output": "How are HeterogeneousMixture and HomogeneousMixture differentiated within the ontology? | Is any mixture classified as both HeterogeneousMixture and HomogeneousMixture simultaneously? | Which mixture types are specified as disjoint with HomogeneousMixture? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PhysicalEndurant\nDescription: PhysicalEndurant is a subclass of Endurant, representing entities that persist through time while maintaining their identity. It is explicitly disjoint with Role, meaning no instance can simultaneously be a PhysicalEndurant and a Role. Additionally, PhysicalEndurant is equivalent to om-1:Phenomenon, indicating that these two classes share the exact same set of individuals. This class is used to capture enduring phenomena in ontological modeling, distinct from roles that entities might play.\nAxiom: {'subClassOf': ['Endurant'], 'disjointWith': [], 'equivalentClass': ['om-1:Phenomenon']}\nGenerated CQs:", "output": "What ontological separation is established between PhysicalEndurant and Role? | Is any entity allowed to be classified as both PhysicalEndurant and Role simultaneously? | Which classes are defined as mutually exclusive with Role in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: StructuredPureStuff\nDescription: StructuredPureStuff is defined as a subclass of PureStuff and is disjoint with UnstructuredPureStuff, ensuring that no individual can be both StructuredPureStuff and UnstructuredPureStuff. Formally, StructuredPureStuff is equivalent to PureStuff that has granules exclusively of exactly one type of molecule. This class covers matter composed of a single molecular type (allowing for minor conformational variations or rare impurities), such as water (H₂O), table sugar, silica (SiO₂), or vitamin A. The synonym \"Compound\" applies here, reflecting the requirement that instances consist of precisely one molecular species, rather than just a single molecule.\nAxiom: {'subClassOf': ['PureStuff'], 'disjointWith': [], 'equivalentClass': ['(PureStuff and [hasGranuleType only Molecule] and [hasGranuleType exactly 1 Molecule])']}\nGenerated CQs:", "output": "How does the ontology define the connection between StructuredPureStuff and UnstructuredPureStuff? | Is there any instance classified under both StructuredPureStuff and UnstructuredPureStuff? | Which classes are stated as mutually exclusive with UnstructuredPureStuff? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Endurant\nDescription: Endurant is formally specified as a class disjoint with Perdurant, which ensures that no individual entity can be simultaneously classified as both an Endurant and a Perdurant. This distinction typically reflects the ontological separation between entities that persist wholly through time (Endurants, such as physical objects) and those that occur in or unfold over time (Perdurants, such as events or processes).\nAxiom: {'disjointWith': []}\nGenerated CQs:", "output": "How does the ontology formally separate Endurant and Perdurant classes? | Is there any instance that can simultaneously be classified as both Endurant and Perdurant? | What other ontology classes are specified as disjoint with Perdurant? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AbstractRegion\nDescription: AbstractRegion is defined as a subclass of Region. This indicates that every instance of AbstractRegion is also an instance of Region, inheriting all its characteristics. The class formalizes a conceptual or non-physical specialization of Region, but no additional constraints or distinctions are provided beyond its subsumption in the hierarchy.\nAxiom: {'subClassOf': ['Region']}\nGenerated CQs:", "output": "To what parent class does AbstractRegion pertain? | Is AbstractRegion encompassed within the wider class of Region? | Which subclasses fall under the class Region, including AbstractRegion? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PhysicalRegion\nDescription: PhysicalRegion is defined as a subclass of Region, indicating that every PhysicalRegion is, by definition, a type of Region. This formalization distinguishes PhysicalRegion as a specific conceptual or spatial area within the broader class of Region, with characteristics or properties that pertain to physical or tangible attributes.\nAxiom: {'subClassOf': ['Region']}\nGenerated CQs:", "output": "Which kinds of regions include PhysicalRegion as a specialized form? | What are the immediate superclasses of PhysicalRegion within the ontology? | Is PhysicalRegion classified as a specific type of Region? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: om-1:Quantity\nDescription: om-1:Quantity is defined as a subclass of Region. This means every om-1:Quantity is categorized within the broader class of Region, inheriting its general characteristics. No additional restrictions or differentiations are provided, so om-1:Quantity serves to represent a more specific concept or type of Region within the ontology.\nAxiom: {'subClassOf': ['Region']}\nGenerated CQs:", "output": "Which subclasses are defined under Region, such as om-1:Quantity? | Does om-1:Quantity fall under the general category of Region? | What higher-level concepts is om-1:Quantity classified as a member of? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AmountOfStuff\nDescription: AmountOfStuff is defined as a subclass of PhysicalEndurant, representing entities that persist through time while maintaining their identity as physical particulars. According to the current description, it aligns with DOLCE's notion of \"amount of matter\" and applies exclusively to specific, individual entities (particulars) rather than universals or collections. This class captures the concept of a definite quantity of physical substance.\nAxiom: {'subClassOf': ['PhysicalEndurant']}\nGenerated CQs:", "output": "Which specific concepts are included as subclasses of PhysicalEndurant, such as AmountOfStuff? | Is AmountOfStuff classified under the broader category of PhysicalEndurant? | What are the higher-level categories to which AmountOfStuff is assigned? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: AssociationalColloid\nDescription: AssociationalColloid is defined as a subclass of Colloid. This class includes colloidal systems characterized by the association of amphiphilic molecules, such as hydrophobic/hydrophilic interactions. Typical examples are micellar colloids (e.g., soap solutions), where molecules form aggregates known as micelles. Properties specific to this class can include aggregation numbers—typically a range—reflecting the number of molecules per micelle, often determined by the critical micelle concentration.\nAxiom: {'subClassOf': ['Colloid']}\nGenerated CQs:", "output": "What are the parent categories for AssociationalColloid in the ontology? | Which types of Colloid include AssociationalColloid as a more specific instance? | Does AssociationalColloid fall under the broader category of Colloid? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DispersionColloid\nDescription: DispersionColloid is defined as a subclass of Colloid and represents the most common type among colloids, distinguishing it from other types within the Colloid category.\nAxiom: {'subClassOf': ['Colloid']}\nGenerated CQs:", "output": "What broader classes does DispersionColloid belong to? | Is DispersionColloid classified as a specific form of Colloid? | Which subclasses are encompassed by the concept of Colloid? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MolecularColloid\nDescription: MolecularColloid is defined as a subclass of Colloid, representing colloidal systems in which the constituent molecules are sufficiently large to exhibit the characteristic behaviors of particles with intermediate sizes, typical of other types of colloids. Examples include latex and other materials with large polymers, such as starchy substances. This classification emphasizes the particle size and molecular structure as distinguishing factors within the broader colloid category.\nAxiom: {'subClassOf': ['Colloid']}\nGenerated CQs:", "output": "Which specific subtypes of Colloid encompass MolecularColloid? | To what overarching categories does MolecularColloid pertain within the ontology? | Is MolecularColloid categorized under the broader class of Colloid? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Atom\nDescription: Atom is defined as a subclass of PhysicalObject, indicating that every atom is considered a physical entity within the ontology. This classification places atoms within the broader category of tangible objects, establishing their role as fundamental physical units that compose matter.\nAxiom: {'subClassOf': ['PhysicalObject']}\nGenerated CQs:", "output": "Does Atom fall under the category of PhysicalObject? | Which entities are more specific than PhysicalObject, such as Atom? | What broader classes does Atom belong to within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Ion\nDescription: Ion is defined as a subclass of PhysicalObject, meaning it represents a kind of physical entity. No further property restrictions, disjointness, or specific characteristics are asserted in the axioms, so the class encompasses any physical object identified as an ion—typically, an atom or molecule with a net electric charge due to the loss or gain of electrons.\nAxiom: {'subClassOf': ['PhysicalObject']}\nGenerated CQs:", "output": "Is an Ion classified as a type of PhysicalObject? | What overarching categories encompass Ion as a subordinate type? | Which entities are specified as subclasses under PhysicalObject, such as Ion? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MultiMoleculeParticle\nDescription: MultiMoleculeParticle is defined as a subclass of PhysicalObject, referring to a particle composed of multiple molecules, such as those found in suspensions or colloidal droplets (distinct from sub-atomic particles). This class is intended for cases where individual entities are aggregates of molecules, and, as noted in its annotation, is considered a pragmatic solution within the ontology structure rather than a rigorous chemical classification.\nAxiom: {'subClassOf': ['PhysicalObject']}\nGenerated CQs:", "output": "Does MultiMoleculeParticle fall under the broader class of PhysicalObject? | What are the more abstract categories to which MultiMoleculeParticle is assigned? | Which entities are categorized as types of PhysicalObject, specifically including MultiMoleculeParticle? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: DispersedPhase\nDescription: DispersedPhase is defined as a subclass of StuffRole. It refers to the role played by a substance within the context of a colloidal system, specifically as the phase that is distributed throughout another phase (the ContinuousMedium). The relationship (colloidFormingRelation) exists between the DispersedPhase and the ContinuousMedium themselves, rather than their respective bearers (stuffs), emphasizing that simply combining the substance bearers does not suffice to form a colloid. Proper mixing is required to achieve a homogeneous colloidal mixture; the ability of a substance to serve as either dispersed phase or continuous medium depends on the specific system being formed.\nAxiom: {'subClassOf': ['StuffRole']}\nGenerated CQs:", "output": "Is DispersedPhase classified under the broader category of StuffRole? | Which roles are encompassed within StuffRole, including DispersedPhase? | What higher-level categories does DispersedPhase belong to? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Solvent\nDescription: Solvent is defined as a subclass of StuffRole. It represents a substance in which another substance, known as the solute, is dissolved. Solvents are essential participants in solution-forming relations, acting as the medium that enables solutes to dissolve and sometimes facilitating various chemical reactions during the dissolution process. This formalization emphasizes the role-based nature of solvents within chemical systems.\nAxiom: {'subClassOf': ['StuffRole']}\nGenerated CQs:", "output": "What are the more general roles associated with Solvent? | Is Solvent classified under the broader category of StuffRole? | Which roles are encompassed by StuffRole, including Solvent? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Drop\nDescription: Drop is defined as a subclass of Piece, representing a specific type of piece, such as a drop of blood. This class serves as an example to illustrate a distinct, often small and discrete, portion or quantity of a substance.\nAxiom: {'subClassOf': ['Piece']}\nGenerated CQs:", "output": "Is Drop categorized under the broader class of Piece? | Which subclasses fall under the category of Piece, with Drop included? | What broader classes include Drop within their hierarchy? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Lump\nDescription: Lump is defined as a subclass of Piece, representing a specific type of piece. The class is exemplified by instances such as a \"lump of clay,\" illustrating that a lump is considered a particular form or configuration of a piece. This class serves as an example of how the concept of \"piece\" can be specialized.\nAxiom: {'subClassOf': ['Piece']}\nGenerated CQs:", "output": "Which entities are specified as subtypes under Piece, such as Lump? | Is Lump classified as a type of Piece? | What broader classes encompass Lump within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Slice\nDescription: Slice is defined as a subclass of Piece, representing a specific type of piece. As indicated in the example, a Slice could refer to a slice of bread, illustrating that this class captures instances where something is cut or divided into thin, flat portions.\nAxiom: {'subClassOf': ['Piece']}\nGenerated CQs:", "output": "What overarching types does Slice inherit from within the hierarchy? | Which subtypes fall under the category of Piece, including Slice? | Is Slice categorized under the broader class of Piece? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: EvenDistribution\nDescription: EvenDistribution is defined as a subclass of AbstractRegion. This indicates that every instance of EvenDistribution is a type of abstract region, but with additional implied properties that distinguish it from other abstract regions. No further property restrictions, equivalence, or disjointness axioms are specified. The class likely represents distributions characterized by some notion of \"evenness\" or uniformity, although the specifics are not constrained by the given axiom.\nAxiom: {'subClassOf': ['AbstractRegion']}\nGenerated CQs:", "output": "Is EvenDistribution classified as a type within AbstractRegion? | What broader classes does EvenDistribution hierarchically fall under? | Which entities are direct specializations of AbstractRegion, such as EvenDistribution? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: UnevenDistribution\nDescription: UnevenDistribution is defined as a subclass of AbstractRegion. This indicates that every instance of UnevenDistribution is a specific kind of AbstractRegion, likely representing regions or segments where distribution is not uniform. No additional constraints or properties are specified, so this class primarily serves to differentiate non-uniform or irregular distributions within the broader category of abstract regions.\nAxiom: {'subClassOf': ['AbstractRegion']}\nGenerated CQs:", "output": "What kinds of specialized regions are encompassed by AbstractRegion, specifically including UnevenDistribution? | Is UnevenDistribution classified under the broader group of AbstractRegion? | To which higher-level categories does UnevenDistribution pertain within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gas\nDescription: Gas is defined as a subclass of StuffState. This classification indicates that Gas represents a particular state or condition in which a substance (stuff) can exist. Any individual classified as Gas inherits the general properties of StuffState, marking it as a type of physical state distinct from other possible states (such as solid or liquid).\nAxiom: {'subClassOf': ['StuffState']}\nGenerated CQs:", "output": "Which higher-level classes encompass Gas? | What entities are categorized more specifically than StuffState, including Gas? | Is Gas classified as a specific type within the broader StuffState category? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Liquid\nDescription: liquid is defined as a subclass of StuffState, representing a specific physical state of matter. All instances of liquid must also be instances of StuffState, situating liquids within the broader classification of material states such as solid or gas. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['StuffState']}\nGenerated CQs:", "output": "Which general categories in the ontology include Liquid as a member? | What other specific states are encompassed by StuffState besides Liquid? | Is Liquid classified under the broader category of StuffState? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Solid\nDescription: Solid is defined as a subclass of StuffState, representing a particular state of matter. This class encompasses all entities that exist in the solid state, distinguishing them from other possible states such as liquid or gas. All instances of Solid inherit the characteristics of StuffState.\nAxiom: {'subClassOf': ['StuffState']}\nGenerated CQs:", "output": "Which specific states of stuff are categorized as subtypes of StuffState, such as Solid? | What are the general states that Solid is classified within? | Does Solid fall under the broader grouping of StuffState? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: MicellarColloid\nDescription: MicellarColloid is defined as a subclass of AssociationalColloid. Although the formal axioms do not distinguish it further from AssociationalColloid, the usage of the term \"MicellarColloid\" reflects domain-specific terminology differences between food physics and colloid chemistry. Therefore, individuals of this class share all characteristics of AssociationalColloid, with differentiation rooted primarily in contextual nomenclature rather than ontological structure.\nAxiom: {'subClassOf': ['AssociationalColloid']}\nGenerated CQs:", "output": "What higher-level classes does MicellarColloid fall under within the ontology? | Which classes are specialized instances of AssociationalColloid, including MicellarColloid? | Is MicellarColloid classified under the broader group of AssociationalColloid? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Paste\nDescription: Paste is defined as a subclass of Suspension. It is characterized as a type of suspension with a reduced proportion of dispersion medium, in which the dispersed phase exhibits connectivity (i.e., the particles are linked or form a continuous structure). This differentiates pastes from other suspensions, where the dispersed phase may be unconnected and more freely suspended in the medium.\nAxiom: {'subClassOf': ['Suspension']}\nGenerated CQs:", "output": "What broader classifications is Paste associated with in the ontology? | Does Paste fall under the more general category of Suspension? | Which subclasses are encompassed by Suspension, specifically including Paste? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Role\nDescription: Role is defined as a subclass of Endurant, indicating that any individual classified as a Role is also necessarily an Endurant. This positions Role as an entity that persists through time while possibly undergoing changes. No further restrictions or disjointness conditions are specified for this class.\nAxiom: {'subClassOf': ['Endurant']}\nGenerated CQs:", "output": "Which entities are classified under Endurant, including Role? | Is Role a specialized type of Endurant? | What broader classes encompass Role within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Region\nDescription: Region is defined as a subclass of Abstract, indicating that it represents an abstract concept rather than a physical entity. This classification implies that instances of Region are used to denote conceptual or non-physical areas, rather than tangible, material locations.\nAxiom: {'subClassOf': ['Abstract']}\nGenerated CQs:", "output": "Which entities are defined as subclasses within Abstract, including Region? | Is Region a specific type classified under Abstract? | What broader categories encompass Region as a subclass? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: om-1:Unit_of_measure\nDescription: om-1:Unit_of_measure is defined as a subclass of Abstract, indicating that it represents a conceptual or non-physical entity within the ontology. This class is intended to capture the abstract nature of measurement units used to quantify physical or abstract quantities, rather than representing tangible objects themselves.\nAxiom: {'subClassOf': ['Abstract']}\nGenerated CQs:", "output": "What higher-level classes does Unit_of_measure inherit from? | Which subclasses fall under the Abstract category, such as Unit_of_measure? | Is Unit_of_measure categorized under the broader class of Abstract? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: State\nDescription: State is defined as a subclass of Perdurant, indicating that it represents a temporally extended entity or occurrence. As a Perdurant, a State exists over a period of time, rather than as an instantaneous or static entity. No further restrictions or distinctions are specified in the current axioms.\nAxiom: {'subClassOf': ['Perdurant']}\nGenerated CQs:", "output": "Which concepts are classified as subtypes of Perdurant, including State? | Is State a specialized form of Perdurant? | To which general categories is State hierarchically related within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: StuffState\nDescription: StuffState is defined as a subclass of State. It represents the general state in which a substance (or \"stuff\") exists, such as solid, liquid, or gas. While it is relevant for describing the phase of a specific material (e.g., water as ice, liquid, or vapor), the class also accommodates cases like colloids, where the states of mixed components are important. The focus of StuffState is on the state as a property of a substance in general, rather than on the particular state of an individual stuff. This provides a foundation for distinguishing and reasoning about the states of matter across different contexts, including mixtures and colloidal systems.\nAxiom: {'subClassOf': ['State']}\nGenerated CQs:", "output": "Is StuffState categorized under the broader class of State? | Which subclasses fall under State, including StuffState? | What higher-level classes encompass StuffState? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Container\nDescription: Container is defined as a subclass of PhysicalEndurant, signifying that every container is a type of physical entity that persists through time while maintaining its identity. No additional property restrictions or distinguishing features are specified in the current axiom.\nAxiom: {'subClassOf': ['PhysicalEndurant'], 'propertyRestrictions': ['[inverseOf containedIn only (AmountOfStuff or PhysicalObject)]']}\nGenerated CQs:", "output": "Is every entity that contains a Container required to be either an AmountOfStuff or a PhysicalObject? | Can a Container be contained in something other than an AmountOfStuff or a PhysicalObject? | Does the property 'containedIn' for a Container necessarily exclude all classes except AmountOfStuff and PhysicalObject? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Stuff\nDescription: Stuff is a class whose individuals are characterized by having only states of type StuffState via the hasState property, and each individual can have at most three such states. This ensures that every Stuff instance is related exclusively to StuffState instances, with an upper limit of three hasState relationships.\nAxiom: {'subClassOf': ['PhysicalEndurant'], 'propertyRestrictions': ['[hasState only StuffState]', '[hasState max 3 StuffState]']}\nGenerated CQs:", "output": "Is Stuff classified under the category of PhysicalEndurant? | What are the subclasses encompassed by PhysicalEndurant, including Stuff? | To which higher-level classes does Stuff belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Molecule\nDescription: Molecule is defined as a subclass of PhysicalObject. This indicates that every instance of Molecule is necessarily a physical object, inheriting all properties and constraints applicable to physical objects. No additional property restrictions or disjointness axioms are specified for this class.\nAxiom: {'subClassOf': ['PhysicalObject'], 'propertyRestrictions': ['[hasPart some Atom]']}\nGenerated CQs:", "output": "Is every molecule composed of at least one atom as a part? | Must a molecule necessarily possess the 'hasPart' relationship with an atom? | Can a molecule exist without having any atom as one of its parts? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Bulk\nDescription: Bulk is defined as a subclass of Stuff, characterized by one of the following: it either possesses a granule type that is a Molecule or MultiMoleculeParticle, or it contains parts that are instances of Stuff. Additionally, all of its granule types (if any) are restricted to being Molecule or MultiMoleculeParticle, and all of its parts (if any) must also be instances of Stuff. This formalization ensures that Bulk consists exclusively of molecular or multi-molecular entities, or is composed from other Stuff, maintaining a strict part-whole and compositional structure.\nAxiom: {'subClassOf': ['Stuff', '(([hasGranuleType some (Molecule or MultiMoleculeParticle)] or [hasPartStuff some Stuff]) and ([hasGranuleType only (Molecule or MultiMoleculeParticle)] or [hasPartStuff only Stuff]))', '(MixedStuff or StructuredPureStuff)']}\nGenerated CQs:", "output": "Is Bulk classified under either MixedStuff or StructuredPureStuff categories? | Which concepts are more specific than the union of MixedStuff and StructuredPureStuff, such as Bulk? | Into which overarching groups does Bulk fit within the ontology: MixedStuff, StructuredPureStuff, or both? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PureStuff\nDescription: PureStuff is defined as equivalent to the intersection of Stuff with several precise property restrictions: it must have exactly one granule type, which is either an Atom, Molecule, or MultiMoleculeParticle; it must consist of exactly one part stuff, which must be either PureBulk, StructuredPureStuff, or UnstructuredPureStuff; and it must have exactly one stuff distribution, which must be an EvenDistribution. This formalization ensures that any instance of PureStuff is a homogeneous material entity, composed in a uniform way at the granule and part level, and evenly distributed throughout.\nAxiom: {'subClassOf': ['Stuff'], 'equivalentClass': ['(Stuff and [hasGranuleType exactly 1 (Atom or Molecule or MultiMoleculeParticle)] and [hasPartStuff exactly 1 (PureBulk or StructuredPureStuff or UnstructuredPureStuff)] and [hasStuffDistribution exactly 1 EvenDistribution])']}\nGenerated CQs:", "output": "Is Stuff a more general category that includes PureStuff? | Which entities are categorized as more specific instances under Stuff, such as PureStuff? | To what broader groupings does PureStuff logically belong? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Colloid\nDescription: Colloid is defined as a subclass of HomogeneousMixture. This means every colloid is a type of homogeneous mixture, sharing its properties, but may also have additional characteristics distinguishing it from other homogeneous mixtures. There are no specified equivalence relationships to other classes.\nAxiom: {'subClassOf': ['HomogeneousMixture'], 'equivalentClass': ['(HomogeneousMixture and [hasPartStuff exactly 1 (Stuff and [hasState some StuffState] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some StuffState] and [inverseOf srInheresIn some DispersedPhase])] and [hasNrOfPhase some DatatypeRestriction(xsd:int minInclusive 2)])']}\nGenerated CQs:", "output": "Is a Colloid equivalent to a homogeneous mixture that contains exactly one part of stuff in a continuous medium state and exactly one part of stuff in a dispersed phase state? | Does every Colloid necessarily have at least two phases according to the number of phases property? | Is a Colloid fully defined as the intersection of HomogeneousMixture and mixtures with specific parts characterized by their state and location in continuous medium and dispersed phase? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Solution\nDescription: Solution is defined as a type of homogeneous mixture that contains at least two different phases. Each solution must have at least two component parts: one part functioning as a solute and the other as a solvent. Both the solute and solvent are classified as \"stuff\" that consists exclusively of granules of type atom, ion, or molecule. This formalization ensures that a solution, by definition, is made up of distinct solute and solvent entities, each inhering in \"stuff\" with specific granule types, and the overall mixture must exhibit at least two phases.\nAxiom: {'subClassOf': ['HomogeneousMixture'], 'equivalentClass': ['(HomogeneousMixture and [hasPartStuff some (Stuff and [inverseOf srInheresIn some Solute] and [hasGranuleType only (Atom or Ion or Molecule)])] and [hasPartStuff some (Stuff and [inverseOf srInheresIn some Solvent] and [hasGranuleType only (Atom or Ion or Molecule)])] and [hasNrOfPhase some DatatypeRestriction(xsd:int minInclusive 2)])']}\nGenerated CQs:", "output": "Does Solution fall under the general group of HomogeneousMixture? | Which specific classes are categorized as HomogeneousMixture, such as Solution? | To what broader mixture types does Solution belong within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Distribution\nDescription: Distribution is a class defined by the property restriction that every instance must have at least one quale (quality or manner) that is either an EvenDistribution or an UnevenDistribution. This asserts that all individuals of Distribution are characterized by possessing a specific type of distributional quality, distinguishing them based on whether they exhibit evenness or unevenness in their distribution.\nAxiom: {'subClassOf': ['Quality'], 'propertyRestrictions': ['[hasQuale some (EvenDistribution or UnevenDistribution)]']}\nGenerated CQs:", "output": "Is Distribution classified under the broader group of Quality? | What specific kinds of Quality include Distribution as a subclass? | Which overarching categories encompass Distribution? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Emulsion\nDescription: Emulsion is defined as a subclass of DispersionColloid. This means every emulsion is formally classified as a specific type of dispersion colloid, inheriting all characteristics of dispersion colloids, but with additional distinguishing properties specific to emulsions. No additional equivalent class is specified.\nAxiom: {'subClassOf': ['DispersionColloid'], 'equivalentClass': ['(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some DispersedPhase])])']}\nGenerated CQs:", "output": "Does an Emulsion necessarily consist of exactly one part that is a liquid state Stuff inhering in the ContinuousMedium and exactly one part that is a liquid state Stuff inhering in the DispersedPhase? | Is Emulsion logically equivalent to the intersection of DispersionColloid and those having exactly one liquid Stuff in the ContinuousMedium and exactly one liquid Stuff in the DispersedPhase? | Can Emulsion be fully defined as a DispersionColloid with two and only two parts: each a liquid Stuff, where one part inheres in the ContinuousMedium and the other in the DispersedPhase? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Foam\nDescription: Foam is defined as a subclass of DispersionColloid, indicating that every foam is a type of dispersion colloid. There are no additional equivalence constraints specified, so the class is characterized solely by its position in the subclass hierarchy.\nAxiom: {'subClassOf': ['DispersionColloid'], 'equivalentClass': ['(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some DispersedPhase])] and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some ContinuousMedium])])']}\nGenerated CQs:", "output": "Does a Foam necessarily consist of exactly one part that is a Stuff with a gaseous state inhering in a DispersedPhase and exactly one part that is a Stuff with a liquid state inhering in a ContinuousMedium? | Is Foam defined as the intersection of DispersionColloid and systems comprising precisely one gaseous phase as the dispersed part and one liquid phase as the continuous medium? | Are all instances of Foam required to have both a single gas-phase dispersed component and a single liquid-phase continuous component as part stuffs? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Gel\nDescription: Gel is defined as a subclass of DispersionColloid, indicating that every gel is a type of dispersion colloid. There are no additional equivalence axioms specified, so gel is characterized solely by its classification within the hierarchy of colloidal systems.\nAxiom: {'subClassOf': ['DispersionColloid'], 'equivalentClass': ['(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some DispersedPhase])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some ContinuousMedium])])']}\nGenerated CQs:", "output": "Must every Gel contain exactly one part that is a Stuff in the liquid state inhering in a DispersedPhase, and exactly one part that is a Stuff in the solid state inhering in a ContinuousMedium? | Is Gel equivalent to the intersection of DispersionColloid and those entities composed of precisely one liquid Stuff in a DispersedPhase and one solid Stuff in a ContinuousMedium? | Does the definition of Gel permit any hasPartStuff relationships other than one liquid Stuff in a DispersedPhase and one solid Stuff in a ContinuousMedium? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LiquidAerosol\nDescription: LiquidAerosol is defined as a subclass of DispersionColloid. This means every instance of LiquidAerosol is necessarily an instance of DispersionColloid, inheriting all its characteristics. Currently, no additional equivalence or further property restrictions are specified for LiquidAerosol.\nAxiom: {'subClassOf': ['DispersionColloid'], 'equivalentClass': ['(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some DispersedPhase])])']}\nGenerated CQs:", "output": "Is every LiquidAerosol necessarily composed of one part that is Stuff in a gaseous state inhering in a ContinuousMedium, and one part that is Stuff in a liquid state inhering in a DispersedPhase? | Is LiquidAerosol logically defined as an intersection of DispersionColloid with those entities having exactly one gaseous part in a ContinuousMedium and exactly one liquid part in a DispersedPhase? | Can a LiquidAerosol exist without meeting the precise conditions of having these two distinct parts each with the required state and inherence? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Sol\nDescription: Sol is defined as a type of dispersion colloid that is equivalent to a system containing exactly one portion of solid-phase matter (stuff) existing in a dispersed phase, and exactly one portion of liquid-phase matter (stuff) existing in a continuous medium. This specification enforces that a sol consists of solid particles dispersed uniformly within a liquid, consistent with colloidal solution definitions in which solids are dispersed in a liquid continuous medium.\nAxiom: {'subClassOf': ['DispersionColloid'], 'equivalentClass': ['(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])']}\nGenerated CQs:", "output": "Does Sol fall under the category of DispersionColloid? | Which specific types are encompassed by DispersionColloid, such as Sol? | What parent classes are associated with Sol in this context? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SolidAerosol\nDescription: SolidAerosol is defined as a subclass of DispersionColloid. This indicates that every SolidAerosol is a type of DispersionColloid, inheriting all properties of the parent class. No additional equivalence conditions or property restrictions are specified.\nAxiom: {'subClassOf': ['DispersionColloid'], 'equivalentClass': ['(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])']}\nGenerated CQs:", "output": "Is SolidAerosol equivalent to entities that are DispersionColloid and contain exactly one part that is solid in a dispersed phase, and exactly one part that is gas in a continuous medium? | Does every SolidAerosol necessarily have precisely one Gas component distributed in a continuous medium and one Solid component distributed in a dispersed phase? | Is the class SolidAerosol fully captured by the intersection of DispersionColloid and those entities with exactly one solid part in a dispersed phase and exactly one gas part in a continuous medium? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SolidFoam\nDescription: SolidFoam is defined as a type of DispersionColloid that consists of exactly two distinct components: one component is a portion of matter (Stuff) in a gaseous state, which specifically exists as the dispersed phase; the other component is a portion of matter (Stuff) in a solid state, which specifically serves as the continuous medium. This equivalence ensures that every instance of SolidFoam is composed of a gas dispersed within a continuous solid matrix, precisely modeling the structure of solid foams (such as pumice or foam rubber).\nAxiom: {'subClassOf': ['DispersionColloid'], 'equivalentClass': ['(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some DispersedPhase])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some ContinuousMedium])])']}\nGenerated CQs:", "output": "Is SolidFoam categorized as a more specific instance under DispersionColloid? | Which subclasses are encompassed by DispersionColloid, specifically including SolidFoam? | To which upper-level categories does SolidFoam conceptually correspond within colloidal classifications? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SolidSol\nDescription: SolidSol is defined as a class equivalent to a type of dispersion colloid in which exactly two distinct solid substances are present: one solid substance inheres in the continuous medium, and the other solid substance inheres in the dispersed phase. This means that every instance of SolidSol consists of a colloidal system where both the dispersed phase and the continuous medium are solids, each represented as exactly one part with a solid state.\nAxiom: {'subClassOf': ['DispersionColloid'], 'equivalentClass': ['(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])']}\nGenerated CQs:", "output": "Does SolidSol fall within the classification of DispersionColloid? | Which types are classified as subcategories under DispersionColloid, such as SolidSol? | To what broader classes does SolidSol pertain within the ontology's structure? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: NumberOfPhases\nDescription: NumberOfPhases is a class whose individuals are required to have at least one value for the property hasDataValue, where this value must be a non-negative integer (as specified by the xsd:nonNegativeInteger datatype). This formalization ensures that every instance of NumberOfPhases is associated with a non-negative integer data value.\nAxiom: {'subClassOf': ['AbstractRegion'], 'propertyRestrictions': ['[hasDataValue some xsd:nonNegativeInteger]']}\nGenerated CQs:", "output": "Is NumberOfPhases categorized under the broader class of AbstractRegion? | Which entities are subclasses of AbstractRegion, such as NumberOfPhases? | What general classes does NumberOfPhases fall under within the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: HomogeneousMixture\nDescription: HomogeneousMixture is defined as a subclass of MixedStuff. The class is characterized by the restriction that its members may only have granule types of atom, ion, or molecule—meaning a homogeneous mixture is composed exclusively of these fundamental chemical units. This restriction ensures that any instance of HomogeneousMixture cannot contain granules of any other type, supporting the concept that such mixtures are uniform in composition at the granule level.\nAxiom: {'subClassOf': ['MixedStuff'], 'propertyRestrictions': ['[hasGranuleType only (Atom or Ion or Molecule)]', '[hasStuffDistribution exactly 1 EvenDistribution]']}\nGenerated CQs:", "output": "Must every HomogeneousMixture have exactly one hasStuffDistribution property value that is an EvenDistribution? | Is it required that a HomogeneousMixture cannot have more than one or fewer than one hasStuffDistribution, and that the distribution must be EvenDistribution? | Does any instance of HomogeneousMixture necessarily possess a single hasStuffDistribution of type EvenDistribution? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: LeastPortion\nDescription: LeastPortion is defined as a subclass of Portion, meaning every instance of LeastPortion is also an instance of Portion. No further distinguishing characteristics or constraints are specified by the current axioms.\nAxiom: {'subClassOf': ['Portion', 'not [hasPortion some Portion]']}\nGenerated CQs:", "output": "Which entities are classified as LeastPortion under the restriction of not having any associated Portion via hasPortion? | Does being a member of LeastPortion imply the absence of any hasPortion relationship to Portion? | What classes are included in the category of entities that do not possess any Portion through the hasPortion property, such as LeastPortion? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Piece\nDescription: Piece is defined as a subclass of Portion, meaning every instance of Piece is also an instance of Portion. There are no additional property restrictions or disjointness axioms specified, so Piece inherits all characteristics applicable to Portion without further specification.\nAxiom: {'subClassOf': ['Portion'], 'propertyRestrictions': ['[isSelfContainedScatteredPortionOf some AmountOfStuff]']}\nGenerated CQs:", "output": "Is every Piece necessarily a self-contained scattered portion of some AmountOfStuff? | Can a Piece exist without being a self-contained scattered portion of an AmountOfStuff? | Are there any instances where a Piece is not associated through isSelfContainedScatteredPortionOf with an AmountOfStuff? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Portion\nDescription: Portion is defined as a subclass of AmountOfStuff, indicating that every instance of Portion is also an instance of AmountOfStuff. There are no additional property restrictions or distinguishing axioms specified for this class.\nAxiom: {'subClassOf': ['AmountOfStuff'], 'propertyRestrictions': ['[portionOf some AmountOfStuff]']}\nGenerated CQs:", "output": "Is every Portion necessarily a portion of some AmountOfStuff? | Is it required for a Portion to be linked via 'portionOf' to at least one AmountOfStuff instance? | Can a Portion exist without being associated with an AmountOfStuff through the 'portionOf' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: PureBulk\nDescription: PureBulk is defined as a subclass of PureStuff. This means every instance of PureBulk is also an instance of PureStuff, inheriting all its characteristics. No additional equivalence or unique property restrictions are specified for PureBulk.\nAxiom: {'subClassOf': ['PureStuff'], 'equivalentClass': ['(PureStuff and [hasGranuleType only MultiMoleculeParticle] and [hasGranuleType exactly 1 MultiMoleculeParticle])']}\nGenerated CQs:", "output": "Is PureBulk equivalent to the class of PureStuff that has exactly one granule type, and that granule type is only MultiMoleculeParticle? | Does every instance of PureBulk necessarily have only one granule type, which must be a MultiMoleculeParticle, and must also be PureStuff? | Are all PureBulk entities strictly those PureStuff individuals with hasGranuleType limited to exactly one occurrence of MultiMoleculeParticle? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: UnstructuredPureStuff\nDescription: UnstructuredPureStuff is defined as a class equivalent to the intersection of PureStuff, entities that have only atoms as their granule type, and entities that possess exactly one atom as their granule type. This means that every instance of UnstructuredPureStuff must be a PureStuff composed exclusively of a single atom, and cannot have any other type or number of granules.\nAxiom: {'subClassOf': ['PureStuff'], 'equivalentClass': ['(PureStuff and [hasGranuleType only Atom] and [hasGranuleType exactly 1 Atom])']}\nGenerated CQs:", "output": "Is UnstructuredPureStuff included as a specific type within PureStuff? | Which subclasses fall under the category of PureStuff, such as UnstructuredPureStuff? | To what higher-level groups does UnstructuredPureStuff pertain? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: SolidHeterogeneousMixture\nDescription: SolidHeterogeneousMixture is defined as a subclass of HeterogeneousMixture. This means every SolidHeterogeneousMixture is a type of HeterogeneousMixture, specifically characterized by its solid state, though no additional equivalence or further property restrictions are specified in the axioms.\nAxiom: {'subClassOf': ['HeterogeneousMixture'], 'equivalentClass': ['(HeterogeneousMixture and [hasPartStuff min 2 (Stuff and [hasState some Solid])])']}\nGenerated CQs:", "output": "Is every SolidHeterogeneousMixture necessarily a HeterogeneousMixture that contains at least two parts composed of Stuff in the solid state? | Is the class SolidHeterogeneousMixture logically equivalent to the intersection of HeterogeneousMixture and mixtures having a minimum of two solid-state Stuff components? | Can SolidHeterogeneousMixture be defined as a HeterogeneousMixture with at least two constituent parts which are solid kinds of Stuff? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: Suspension\nDescription: Suspension is formally defined as a subclass of entities possessing at least one granule type that is a Molecule and at least one granule type that is a MultiMoleculeParticle. It is equivalent to a heterogeneous mixture comprised of parts that meet two criteria: it contains some portion of liquid matter (continuous medium) and some portion of solid matter (dispersed phase). Each part of liquid or solid must inhere in their respective phases—liquid in the continuous medium and solid in the dispersed phase. This formalization captures the essential ontological features of a suspension as a heterogeneous mixture where solid particles are dispersed within a liquid medium.\nAxiom: {'subClassOf': ['([hasGranuleType some Molecule] and [hasGranuleType some MultiMoleculeParticle])', 'HeterogeneousMixture'], 'equivalentClass': ['(HeterogeneousMixture and [hasPartStuff some (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff some (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])']}\nGenerated CQs:", "output": "Does Suspension fall within the broader group of HeterogeneousMixture? | Which mixtures are classified as subtypes of HeterogeneousMixture, such as Suspension? | What are the higher-level mixture categories that encompass Suspension? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nClass name: StuffRole\nDescription: StuffRole is a class whose members are characterized by the property restriction that they must inhere in some entity classified as Stuff; that is, every instance of StuffRole is related via the srInheresIn property to at least one instance of Stuff. This ensures that StuffRole is specifically tied to entities that inhere in the category of Stuff.\nAxiom: {'subClassOf': ['Role'], 'propertyRestrictions': ['[srInheresIn some Stuff]']}\nGenerated CQs:", "output": "Is StuffRole categorized as a more specific type within the broader concept of Role? | Which subtypes fall under the umbrella of Role, specifically including StuffRole? | What are the overarching classes to which StuffRole belongs? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: scatterPortion\nDescription: The property \"scatterPortion\" represents a relationship between an original whole and a portion that was once a contiguous part of that whole but has become spatially or contextually separated over time. This property is a subproperty of \"hasProperPart\" and has \"scatteredPortionOf\" as its inverse. It has no explicitly defined domain or range restrictions. Typical examples include a slice of bread cut from a loaf or wine poured into a glass from a bottle. The property is useful for modeling portions that have been separated, with potential for further specialization according to whether the portion is associated with a container or not.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasProperPart'], 'inverseOf': []}\nGenerated CQs:", "output": "What is the ontological connection between the properties ‘scatterPortion’ and ‘scatteredPortionOf’? | If entity A scatterPortion B, does ontology entail that B scatteredPortionOf A? | Which property is defined as the inverse of ‘scatterPortion’ in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: inheresIn\nDescription: The property \"inheresIn\" has no specified characteristics or super-properties. Its domain is restricted to the class \"Role,\" and its range is restricted to \"PhysicalEndurant.\" This indicates that \"inheresIn\" relates a Role to a PhysicalEndurant entity. No inverse property is defined.\nAxiom: {'characteristics': [], 'domain': ['Role'], 'range': [], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'inheresIn' relate to anything other than a PhysicalEndurant as its object? | What types of entities are valid as the range for the property 'inheresIn'? | Is it possible for a value of 'inheresIn' to not be a PhysicalEndurant? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasSelfContainedScatteredPortion\nDescription: The property \"hasSelfContainedScatteredPortion\" relates to entities such as lumps, puddles, slices, or other discrete pieces. It has no explicitly defined domain or range restrictions and no defined characteristics. It is a sub-property of \"scatterPortion\" and has \"isSelfContainedScatteredPortionOf\" as its inverse property.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['scatterPortion'], 'inverseOf': []}\nGenerated CQs:", "output": "What is the connection between 'hasSelfContainedScatteredPortion' and 'isSelfContainedScatteredPortionOf' as defined in the ontology? | If entity A has a self-contained scattered portion B, does it follow that B is a self-contained scattered portion of A, according to the ontology? | Which property acts as the inverse of 'hasSelfContainedScatteredPortion'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasPartStuff\nDescription: The property \"hasPartStuff\" lacks explicit domain and range constraints, and does not possess any special property characteristics. It is specified as a subproperty of \"hasProperPart\" and is the inverse of \"stuffPartOf\". Notably, its use implies that the related entities are distinct kinds of \"stuffs\", as the current description highlights a requirement for distinction between the entities involved.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasProperPart'], 'inverseOf': []}\nGenerated CQs:", "output": "What is the inverse relationship established between ‘hasPartStuff’ and ‘stuffPartOf’ in the ontology? | If entity A has a part-stuff B via ‘hasPartStuff’, does that indicate that B is related to A through ‘stuffPartOf’? | Which object property is declared as the inverse of ‘hasPartStuff’ in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasContainedScatteredPortion\nDescription: The property \"hasContainedScatteredPortion\" is used to relate a container to scattered portions necessarily contained within it (e.g., water in a glass). It has no explicit domain or range restrictions and does not declare any specific property characteristics. It is a sub-property of \"scatterPortion\" and has \"isContainedScatteredPortionOf\" as its inverse property.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['scatterPortion'], 'inverseOf': []}\nGenerated CQs:", "output": "In what way are the properties 'hasContainedScatteredPortion' and 'isContainedScatteredPortionOf' related in the ontology? | If an entity A hasContainedScatteredPortion B, does it follow that B isContainedScatteredPortionOf A? | Which property is modeled as the inverse of 'hasContainedScatteredPortion' in this ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: solutionFormingRelation\nDescription: The property \"solutionFormingRelation\" relates a Solvent (domain) to a Solute (range) and is a sub-property of \"stuffFormingRelation.\" It has no additional property characteristics or specified inverse. This property is used to represent the chemical dissolution process, where one substance (the solute) is dissolved by another (the solvent).\nAxiom: {'characteristics': [], 'domain': ['Solvent'], 'range': [], 'subPropertyOf': ['stuffFormingRelation'], 'inverseOf': []}\nGenerated CQs:", "output": "Does the property 'solutionFormingRelation' relate to anything other than a Solute as its object? | Is every entity used as the object in 'solutionFormingRelation' required to be a Solute? | What kinds of entities can appear as the range of the 'solutionFormingRelation' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: contiguousPortion\nDescription: The property \"contiguousPortion\" is defined as a sub-property of \"hasProperPart\" with no explicitly specified domain or range restrictions. It has no declared characteristics. The property has an inverse, \"isContiguousPortionOf,\" indicating a bidirectional relationship. This property is intended to relate an entity to one of its proper parts that is contiguous.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasProperPart'], 'inverseOf': []}\nGenerated CQs:", "output": "How are the object properties ‘contiguousPortion’ and ‘isContiguousPortionOf’ interconnected in the ontology? | If entity A is linked to entity B via ‘contiguousPortion’, does that entail that B is related to A through ‘isContiguousPortionOf’? | What object property is defined as the inverse of ‘contiguousPortion’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: instantiation\nDescription: The property \"instantiation\" is an object property with domain \"AmountOfStuff\" and range \"Stuff\", indicating that it relates particular amounts of matter to their corresponding type of stuff. This property is intentionally typed for exclusive use in scenarios where first- and second-order entities coexist in the ontology's TBox. For example, it connects a specific amount, such as \"1kg of gold\", to the general stuff \"Gold.\" It has no explicitly defined characteristics, super-properties, or inverse properties.\nAxiom: {'characteristics': [], 'domain': [], 'range': ['Stuff'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is the domain of the property 'instantiation' restricted solely to 'AmountOfStuff'? | Are there any entities of type 'AmountOfStuff' that cannot be associated with the 'instantiation' property? | What are the possible domains for the property 'instantiation'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasDataValue\nDescription: The property \"hasDataValue\" relates instances of the class \"Abstract\" to data values. Although its intended conceptual range is any data type, no range is currently specified due to technical limitations in expressing unrestricted datatypes. The property has no explicitly defined characteristics, super-properties, or inverse properties.\nAxiom: {'characteristics': [], 'domain': [], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is there any class other than Abstract that can be the subject of the 'hasDataValue' property? | Can 'hasDataValue' be used with any entity that is not an instance of Abstract? | What classes are permitted as the domain of the 'hasDataValue' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasPortion\nDescription: The property \"hasPortion\" is a sub-property of \"hasProperPart\" and has \"portionOf\" as its inverse. While there are no explicit domain or range restrictions or defined characteristics, \"hasPortion\" is intended to relate an entity to a part that consists of the same substance or kind as the whole. Practically, it represents portions or divisions of a material entity at a given instant; for example, different amounts of wine divided from a whole. The property is useful in representing naive chemistry, although continuous changes at the molecular level may challenge the strict philosophical notion of 'portion.'\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasProperPart'], 'inverseOf': []}\nGenerated CQs:", "output": "What is the logical connection between ‘hasPortion’ and ‘portionOf’ in the ontology? | If entity X hasPortion Y, does this infer that Y portionOf X? | Which property is defined as the inverse of ‘hasPortion’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasPart\nDescription: The property \"hasPart\" does not have explicitly defined characteristics, domain, or range restrictions in its current axiom. It is specified as the inverse of the property \"partOf\" and has no super-properties. According to the existing description, \"hasPart\" may overlap with related notions like \"hasComponent\" and \"composedOf,\" with subtleties in the essentiality or accidental nature of parts in different contexts. Domain and range constraints, where relevant, are managed in the inverse property \"partOf.\" This property is intended for modeling part-whole relationships.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "How are the object properties ‘hasPart’ and ‘partOf’ connected as inverse properties within the ontology? | If entity A ‘hasPart’ entity B, does the ontology state that B is ‘partOf’ A? | Which property in the ontology is defined as the inverse of ‘hasPart’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasScatterStuffPart\nDescription: The property \"hasScatterStuffPart\" is defined as a sub-property of \"hasProperPart\" and has \"scatteredStuffPartOf\" as its inverse property. There are no explicitly specified characteristics, domain, or range restrictions for this property. It is intended to associate an entity with a scattered or distributed part of itself, aligning it with the mereological concept of proper parts but specifically for parts that are scattered.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasProperPart'], 'inverseOf': []}\nGenerated CQs:", "output": "How are the properties ‘hasScatterStuffPart’ and ‘scatteredStuffPartOf’ connected in the ontology? | If an entity X hasScatterStuffPart Y, does it follow that Y scatteredStuffPartOf X? | Which property is considered the inverse of ‘hasScatterStuffPart’? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasProperPart\nDescription: The property \"hasProperPart\" has no explicitly defined characteristics, domain, or range restrictions. It is a sub-property of \"hasPart,\" indicating a hierarchical relationship. The inverse property is \"properPartOf,\" which relates an entity to its proper whole. This property is used to specify that one entity is a proper (non-identical) part of another.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['hasPart'], 'inverseOf': []}\nGenerated CQs:", "output": "What is the formal connection between the properties 'hasProperPart' and 'properPartOf' as defined in the ontology? | If an entity A has a proper part B, does the ontology entail that B is a proper part of A? | Which property is explicitly stated as the inverse of 'hasProperPart' in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasStuffDistribution\nDescription: The property \"hasStuffDistribution\" has no specified domain, range, characteristics, super-properties, or inverse properties. Based on its axioms, it is a generic property that can relate any type of entities without restriction. No additional description is currently provided.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it correct that 'hasStuffDistribution' has no specified domain? | What kinds of entities can act as the subject when using the property 'hasStuffDistribution'? | Is it possible for the property 'hasStuffDistribution' to exist without a defined range? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: stuffFormingRelation\nDescription: The property \"stuffFormingRelation\" relates individuals that are either ContinuousMedium, DispersedPhase, Solute, or Solvent. It has no explicit property characteristics, super-properties, or inverses. This property is used to represent relationships that characterize the formation or interactions among substances within a mixture, such as surface tension effects, molecular interactions (e.g., hydrogen bonding), or compositional ratios (e.g., the proportional amounts required to form a mixture like lemonade). Both the domain and range are restricted to the aforementioned substance types.\nAxiom: {'characteristics': [], 'domain': ['(ContinuousMedium or DispersedPhase or Solute or Solvent)'], 'range': ['(ContinuousMedium and DispersedPhase and Solute and Solvent)'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is it possible for 'stuffFormingRelation' to relate to an entity that is not a ContinuousMedium, DispersedPhase, Solute, or Solvent? | Are all possible ranges for 'stuffFormingRelation' restricted to ContinuousMedium, DispersedPhase, Solute, or Solvent? | Which types of entities can serve as the range for the property 'stuffFormingRelation'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: portionOf\nDescription: The property \"portionOf\" relates an entity of type AmountOfStuff or Stuff to another entity of the same type, representing a portion or part of the same kind of matter (e.g., a slice of cake to the cake, a glass of wine to the bottle of wine). The domain and range are both restricted to AmountOfStuff or Stuff. It is a sub-property of \"properPartOf\" and has no specified characteristics or inverse property. This property is intended for use with mass nouns or non-countable substances.\nAxiom: {'characteristics': [], 'domain': ['(AmountOfStuff or Stuff)'], 'range': ['(AmountOfStuff and Stuff)'], 'subPropertyOf': ['properPartOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Is every value used with the property 'portionOf' required to be either an AmountOfStuff or Stuff? | Can 'portionOf' have a range that is not AmountOfStuff or Stuff? | What entities are permitted as the range of the property 'portionOf'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: isContainedScatteredPortionOf\nDescription: The property \"isContainedScatteredPortionOf\" relates instances of AmountOfStuff or Stuff to other instances of the same types, indicating that the subject is a portion that originated from a larger whole and currently requires a container. As a subproperty of \"scatteredPortionOf,\" it specifically captures the context where a portion, such as 'wine in a wine glass,' was part of a bulk amount, now separated and needing containment. No explicit property characteristics, inverse, or additional hierarchical relations are defined.\nAxiom: {'characteristics': [], 'domain': ['(AmountOfStuff or Stuff)'], 'range': ['(AmountOfStuff and Stuff)'], 'subPropertyOf': ['scatteredPortionOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Does 'isContainedScatteredPortionOf' have a range other than AmountOfStuff or Stuff? | Can the property 'isContainedScatteredPortionOf' be used with values that are not instances of AmountOfStuff or Stuff? | What types of entities are permitted as the range for 'isContainedScatteredPortionOf'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: scatteredStuffPartOf\nDescription: The property \"scatteredStuffPartOf\" is a subproperty of \"properPartOf\" and relates instances of \"AmountOfStuff\" or \"Stuff\" to other instances within the same classes. It is intended to connect quantities or types of matter—typically those denoted by mass nouns in natural language (e.g., gold, milk, mayonnaise)—with their constituent ingredients that are of a different type (e.g., alcohol in wine, oil in mayonnaise, sugar in cake). The property does not specify domain or range characteristics beyond these classes and has no defined inverse. It also suggests a temporal dimension, where the part was once a contiguous proper part of the whole, but is now scattered or integrated.\nAxiom: {'characteristics': [], 'domain': ['(AmountOfStuff and Stuff)'], 'range': ['(AmountOfStuff or Stuff)'], 'subPropertyOf': ['properPartOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Does the property 'scatteredStuffPartOf' apply to subjects other than AmountOfStuff or Stuff? | What classes are permitted as the domain for the property 'scatteredStuffPartOf'? | Is it possible for an instance that is not an AmountOfStuff or Stuff to use the 'scatteredStuffPartOf' property as its subject? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: scatteredPortionOf\nDescription: The property \"scatteredPortionOf\" has a domain and range restricted to either AmountOfStuff or Stuff. It is defined as a subproperty of \"properPartOf\" and has no explicitly specified characteristics or inverse. This property is intended to represent a specific kind of portion relationship but is not made a subproperty of \"portionOf\" to avoid reasoning cycles and undecidability in Description Logics. The distinction between this property and related properties is primarily temporal, which is not expressible in OWL; therefore, \"scatteredPortionOf\" and \"portionOf\" are modeled as sibling properties to enable practical property chaining in reasoning.\nAxiom: {'characteristics': [], 'domain': ['(AmountOfStuff or Stuff)'], 'range': ['(AmountOfStuff and Stuff)'], 'subPropertyOf': ['properPartOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Is every value assigned via 'scatteredPortionOf' restricted to being an AmountOfStuff or Stuff? | What types of entities can be the object of the 'scatteredPortionOf' property? | Are there any entities other than AmountOfStuff or Stuff that can be in the range of 'scatteredPortionOf'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasQuality\nDescription: The property \"hasQuality\" has no explicitly defined characteristics or super-properties. Its domain includes entities classified as Endurant or Perdurant, and its range is restricted to instances of Quality. This property is used to relate an Endurant or Perdurant to a Quality. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['(Endurant and Perdurant)'], 'range': ['Quality'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can 'hasQuality' be used with subjects other than Endurant or Perdurant? | Are all instances associated with 'hasQuality' required to be either Endurant or Perdurant as the subject? | What entities are permitted to serve as the domain for the property 'hasQuality'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: isSelfContainedScatteredPortionOf\nDescription: The property \"isSelfContainedScatteredPortionOf\" relates an entity classified as \"AmountOfStuff\" or \"Stuff\" to another entity of the same types, indicating that the former is a self-standing, scattered portion of the latter (such as a lump, drop, or slice). It is a sub-property of \"scatteredPortionOf\" and does not specify any particular characteristics or inverse properties. This property is typically used to denote portions that were once part of a larger whole but now exist as distinct, stand-alone pieces.\nAxiom: {'characteristics': [], 'domain': ['(AmountOfStuff and Stuff)'], 'range': ['(AmountOfStuff or Stuff)'], 'subPropertyOf': ['scatteredPortionOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Is it possible for 'isSelfContainedScatteredPortionOf' to have a domain other than AmountOfStuff or Stuff? | Can entities outside of AmountOfStuff or Stuff be involved as the subject of the property 'isSelfContainedScatteredPortionOf'? | What kinds of entities are permitted as the domain for 'isSelfContainedScatteredPortionOf'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: stuffPartOf\nDescription: The property \"stuffPartOf\" relates entities classified as AmountOfStuff or Stuff to other entities of the same categories, indicating a part-whole relationship specifically among mass nouns or substances that are not typically countable. It is a subproperty of \"properPartOf,\" emphasizing that the 'part' is a distinct type of stuff or ingredient within another. No additional property characteristics or inverse are specified. Examples include alcohol as a stuff-part of wine, oil in mayonnaise, or sugar in cake.\nAxiom: {'characteristics': [], 'domain': ['(AmountOfStuff or Stuff)'], 'range': ['(AmountOfStuff and Stuff)'], 'subPropertyOf': ['properPartOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'stuffPartOf' refer to objects other than AmountOfStuff or Stuff as its value? | Is every value associated with the property 'stuffPartOf' required to be of type AmountOfStuff or Stuff? | What types of resources are permitted as the range of the 'stuffPartOf' property? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: isContiguousPortionOf\nDescription: The property \"isContiguousPortionOf\" relates an instance of AmountOfStuff or Stuff to another of the same types, indicating that the subject is a contiguous portion of the object. It is defined as a sub-property of \"properPartOf\" and has no specified inverse or additional property characteristics. Although originally intended as a super-property of \"portionOf\", it is classified as a sibling to avoid logical cycles and maintain decidability within OWL reasoning. This distinction primarily addresses semantic differences involving temporality not representable in OWL.\nAxiom: {'characteristics': [], 'domain': ['(AmountOfStuff and Stuff)'], 'range': ['(AmountOfStuff or Stuff)'], 'subPropertyOf': ['properPartOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Is the domain of the property 'isContiguousPortionOf' limited to AmountOfStuff or Stuff, or can it include other classes? | Are there any instances of AmountOfStuff or Stuff that cannot be subjects of 'isContiguousPortionOf'? | What entity types are eligible to serve as the domain for the property 'isContiguousPortionOf'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasState\nDescription: The property \"hasState\" links individuals of the class \"PhysicalEndurant\" to instances of the class \"State\". It has no specified characteristics, super-properties, or inverse properties. The domain restriction ensures it is only used with \"PhysicalEndurant\" entities, and its range is limited to \"State\".\nAxiom: {'characteristics': [], 'domain': ['PhysicalEndurant'], 'range': ['State'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "Is hasState considered a subtype of owl:topObjectProperty? | What superproperties are associated with hasState in the property hierarchy? | Does hasState directly fall under the domain of owl:topObjectProperty? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: properContainedIn\nDescription: The property \"properContainedIn\" has no specified domain, range, characteristics, super-properties, or inverse properties. This suggests it is a general-purpose property intended to express that one entity is properly contained within another, but no formal constraints are imposed on the types of entities it can relate.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['properPartOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Is properPartOf a superproperty of properContainedIn? | What are the subproperties encompassed by properPartOf? | Which properties serve as superproperties for properContainedIn? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasNrOfPhase\nDescription: The property \"hasNrOfPhase\" has no explicitly defined characteristics, domain, super-properties, or inverse properties. Its range is specified as xsd:integer, indicating that it relates an entity to an integer value representing the number of phases.\nAxiom: {'characteristics': [], 'domain': ['Stuff'], 'range': ['xsd:integer'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can the property 'hasNrOfPhase' be used with any subject other than 'Stuff'? | Is it possible for an entity that is not classified as 'Stuff' to have a value for 'hasNrOfPhase'? | What types of entities are permitted as the domain of the property 'hasNrOfPhase'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: srInheresIn\nDescription: The property \"srInheresIn\" has no defined characteristics or range restrictions. Its domain is restricted to instances of \"StuffRole\". It is a sub-property of \"inheresIn\", indicating it specializes this more general relationship. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['StuffRole'], 'range': ['Stuff'], 'subPropertyOf': ['inheresIn'], 'inverseOf': []}\nGenerated CQs:", "output": "Is anything other than Stuff allowed as the range of the property 'srInheresIn'? | Can 'srInheresIn' relate to values that are not instances of Stuff? | What types of entities can serve as the range for the property 'srInheresIn'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: partOf\nDescription: The property \"partOf\" has no specified characteristics, domain, range, super-properties, or inverse properties. It is a general property intended to express a part-whole relationship, with no further formal restrictions defined by axioms.\nAxiom: {'characteristics': ['Transitive'], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Is partOf a transitive property, such that if an entity is part of a second entity, and the second is part of a third, the first entity is part of the third? | Can the partOf property infer that if object A is part of object B, and object B is part of object C, then object A is part of object C? | Does the ontology require partOf to satisfy the transitive characteristic over related entities? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: colloidFormingRelation\nDescription: The property \"colloidFormingRelation\" has no explicitly defined characteristics or domain constraints. Its range is restricted to individuals of the class \"DispersedPhase.\" It is a subproperty of \"stuffFormingRelation,\" indicating that it inherits general properties from this broader relation. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['ContinuousMedium'], 'range': ['DispersedPhase'], 'subPropertyOf': ['stuffFormingRelation'], 'inverseOf': []}\nGenerated CQs:", "output": "Is it possible for the property 'colloidFormingRelation' to have a subject that is not a ContinuousMedium? | What types of entities can appear as the domain for the property 'colloidFormingRelation'? | Are all subjects of 'colloidFormingRelation' instances of ContinuousMedium? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: properPartOf\nDescription: The property \"properPartOf\" has no specified characteristics, domain, range, super-properties, or inverse properties. This suggests that it is a general-purpose relation intended to express a proper part-whole relationship between entities without any additional constraints or formal links to other properties.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['partOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Is properPartOf classified as a subproperty of partOf within the ontology? | Which properties are identified as subproperties under partOf? | Does the use of properPartOf property entail the use of partOf property for the same subject and object? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasGranuleType\nDescription: The property \"hasGranuleType\" has no specified characteristics or domain restrictions. Its range is limited to individuals classified under \"PhysicalObject\". It is a subproperty of \"owl:topObjectProperty\" and does not have an explicitly defined inverse property. This property is intended to relate an entity to a type of physical object.\nAxiom: {'characteristics': [], 'domain': ['Stuff'], 'range': ['PhysicalObject'], 'subPropertyOf': ['owl:topObjectProperty'], 'inverseOf': []}\nGenerated CQs:", "output": "Is the subject of 'hasGranuleType' always required to be a Stuff? | Are there any entities besides Stuff that can be associated with the 'hasGranuleType' property as its domain? | What classes can serve as the domain for the property 'hasGranuleType'? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: containedIn\nDescription: The property \"containedIn\" does not have specified characteristics, domain, range, super-properties, or an inverse property. It is a general property intended to relate entities without explicit constraints on its usage.\nAxiom: {'characteristics': [], 'domain': ['None'], 'range': ['None'], 'subPropertyOf': ['partOf'], 'inverseOf': []}\nGenerated CQs:", "output": "Is containedIn defined as a more specific property under partOf? | Which properties are recognized as subproperties of partOf? | What are the superproperties assigned to containedIn in the ontology? "}
{"input": "As an ontology engineer, generate a list of competency questions based on the following description and axiom.\nDefinition of competency questions: the questions that outline the scope of ontology and provide an idea about the knowledge that needs to be entailed in the ontology.\nAvoid using narrative questions + axioms.\nDon't generate unnecessary text. Output only the three questions, separated by ` | ` (pipe with spaces). Stop generation after the third question.\nProperty name: hasQuale\nDescription: The property \"hasQuale\" has no explicitly defined characteristics, domain, or super-properties. Its range is restricted to the class \"Abstract,\" indicating that it relates an entity to an abstract entity. No inverse property is specified.\nAxiom: {'characteristics': [], 'domain': ['Quality'], 'range': ['Abstract'], 'subPropertyOf': [], 'inverseOf': []}\nGenerated CQs:", "output": "Can entities other than Quality appear as the subject of the property 'hasQuale'? | What types of individuals can serve as the domain for the property 'hasQuale'? | Is 'hasQuale' ever used where the subject is not a member of Quality? "}
