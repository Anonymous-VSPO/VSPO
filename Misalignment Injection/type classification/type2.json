{
  "AfricanWildlifeOntology1": {
    "classes": {
      "Palmtree": {
        "axiom": {
          "subClassOf": [
            "plant"
          ],
          "disjointWith": [
            "tree"
          ],
          "propertyRestrictions": [
            "[has-part some not branch]"
          ]
        },
        "description": "Palmtree is defined as a subclass of plant and is explicitly disjoint with tree, ensuring that no individual can be both a palmtree and a tree. Members of this class are characterized by the property restriction that they do not possess branches (i.e., each palmtree has no part that is a branch). This formalization distinguishes palmtrees from other trees and plants in the ontology, emphasizing their unique morphological trait of being branchless.",
        "CQ": [
          {
            "axiom": "Palmtree subClassOf plant",
            "CQ": [
              "Is Palmtree classified under plant?",
              "Which entities are defined as more specific subclasses of plant?",
              "What overarching categories include Palmtree?"
            ]
          },
          {
            "axiom": "Palmtree disjointWith tree",
            "CQ": [
              "Are Palmtree and tree considered mutually exclusive categories in the ontology?",
              "Is it possible for an instance to be classified as both a Palmtree and a tree?",
              "Which classes are specified as disjoint with Palmtree in the ontology?"
            ]
          },
          {
            "axiom": "Palmtree propertyRestrictions [has-part some not branch]",
            "CQ": [
              "Is it necessary that a Palmtree contains some parts that are not branches?",
              "Can a Palmtree exist without having any part that is a branch?",
              "Are there parts of a Palmtree that must be from categories other than branches?"
            ]
          }
        ]
      },
      "Xylem": {
        "axiom": {
          "subClassOf": [
            "PlantParts"
          ],
          "propertyRestrictions": [
            "[is-proper-part-of some Stem]"
          ]
        },
        "description": "Xylem is defined as a subclass of PlantParts, representing a plant component that must be a proper part of at least one Stem. This formalization ensures that any instance of Xylem is always structurally associated with stems, reflecting its biologically integral role in plant vascular systems.",
        "CQ": [
          {
            "axiom": "Xylem subClassOf PlantParts",
            "CQ": [
              "Is Xylem categorized under the broader concept of PlantParts?",
              "Which elements are classified as more specific types within PlantParts, such as Xylem?",
              "What higher-level group does Xylem fall under within the ontology?"
            ]
          },
          {
            "axiom": "Xylem propertyRestrictions [is-proper-part-of some Stem]",
            "CQ": [
              "Is it necessary for Xylem to be a proper part of some Stem?",
              "Can Xylem exist without being a proper part of any Stem?",
              "Does every instance of Xylem participate as a proper part in at least one Stem?"
            ]
          }
        ]
      },
      "Omnivore": {
        "axiom": {
          "subClassOf": [
            "animal"
          ],
          "disjointWith": [
            "carnivore",
            "herbivore"
          ],
          "equivalentClass": [
            "([eats some animal] and [eats some plant] and [eats some ([is-part-of some animal] or [is-part-of some plant])])"
          ]
        },
        "description": "Omnivore is defined as a subclass of animal, disjoint with both carnivore and herbivore, meaning no individual can be both an omnivore and either a carnivore or herbivore. An individual is classified as an omnivore if it eats some animal matter, some plant matter, and also consumes something that is part of an animal or a plant. This formalization captures the core characteristic of omnivores: they are animals that include both animal- and plant-based items in their diet, and their consumption encompasses components from both kingdoms.",
        "CQ": [
          {
            "axiom": "Omnivore subClassOf animal",
            "CQ": [
              "Does Omnivore fall under the classification of animal?",
              "Which specific classes are categorized under animal, such as Omnivore?",
              "What broader classes encompass Omnivore within the ontology?"
            ]
          },
          {
            "axiom": "Omnivore disjointWith carnivore",
            "CQ": [
              "What is the ontological separation between Omnivore and Carnivore classes in the AfricanWildlifeOntology1?",
              "Is an instance allowed to be classified as both an Omnivore and a Carnivore within AfricanWildlifeOntology1?",
              "Which classes are asserted as mutually exclusive with Omnivore in AfricanWildlifeOntology1?"
            ]
          },
          {
            "axiom": "Omnivore disjointWith herbivore",
            "CQ": [
              "What logical separation is defined between Omnivore and herbivore in the ontology?",
              "Is it allowed for an individual to be classified as both Omnivore and herbivore?",
              "Which other animal dietary classes are explicitly stated to be disjoint with herbivore?"
            ]
          },
          {
            "axiom": "Omnivore equivalentClass ([eats some animal] and [eats some plant] and [eats some ([is-part-of some animal] or [is-part-of some plant])])",
            "CQ": [
              "Is every Omnivore required to eat at least one animal, one plant, and something that is part of an animal or part of a plant?",
              "Is Omnivore equivalent to the intersection of entities that eat animals, eat plants, and eat parts of either animals or plants?",
              "Must an entity eat both animals and plants, as well as something that is a part of an animal or a part of a plant, to be classified as an Omnivore?"
            ]
          }
        ]
      },
      "giraffe": {
        "axiom": {
          "subClassOf": [
            "animal"
          ],
          "disjointWith": [
            "lion"
          ],
          "propertyRestrictions": [
            "[eats only (Twig or leaf)]"
          ]
        },
        "description": "giraffe is defined as a subclass of animal, disjoint with lion—meaning an individual cannot be both a giraffe and a lion. Members of this class are herbivores that eat exclusively leaves or twigs, as reflected by the restriction that giraffes only consume these plant parts. This ensures that any individual identified as a giraffe must have a diet limited to leaves and twigs.",
        "CQ": [
          {
            "axiom": "giraffe subClassOf animal",
            "CQ": [
              "Does giraffe fall under the broader classification of animal?",
              "What specific subclasses are encompassed within animal, including giraffe?",
              "Which higher-level groups does giraffe belong to within the ontology?"
            ]
          },
          {
            "axiom": "giraffe disjointWith lion",
            "CQ": [
              "Are there any ontology restrictions preventing an individual from being classified as both a giraffe and a lion?",
              "Which classes within the ontology are incompatible with the class giraffe?",
              "Is there an exclusionary relationship defined between the concepts of giraffe and lion?"
            ]
          },
          {
            "axiom": "giraffe propertyRestrictions [eats only (Twig or leaf)]",
            "CQ": [
              "Is a giraffe limited to eating only twigs or leaves, excluding all other food types?",
              "Does the ontology constrain giraffes so that any food they consume must be either a twig or a leaf?",
              "Can a giraffe, according to the ontology, have an 'eats' relation to anything other than twigs or leaves?"
            ]
          }
        ]
      },
      "PlantParts": {
        "axiom": {
          "subClassOf": [
            "owl:Thing"
          ],
          "propertyRestrictions": [
            "[is-proper-part-of some plant]"
          ]
        },
        "description": "PlantParts is defined as a subclass of owl:Thing, characterized by the property that every instance is a proper part of some plant. This means that members of this class cannot be entire plants themselves, but are constituents or sections that form part of a complete plant.",
        "CQ": [
          {
            "axiom": "PlantParts subClassOf owl:Thing",
            "CQ": [
              "Is PlantParts classified under the general concept of owl:Thing?",
              "What broader classes does PlantParts fall within according to the ontology?",
              "Which entities are categorized as subclasses of owl:Thing, including PlantParts?"
            ]
          },
          {
            "axiom": "PlantParts propertyRestrictions [is-proper-part-of some plant]",
            "CQ": [
              "Is every instance of PlantParts required to be a proper part of some plant?",
              "Can a PlantPart exist without being a proper part of any plant?",
              "Does the ontology allow for PlantParts that are not associated by the 'is-proper-part-of' property to a plant?"
            ]
          }
        ]
      }
    },
    "properties": {
      "eaten-by": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [],
          "inverseOf": [
            "eats"
          ]
        },
        "description": "The property \"eaten-by\" has no explicit domain, range, characteristics, or super-properties defined. It is specified as the inverse of the property \"eats,\" indicating that if entity A is eaten by entity B, then entity B eats entity A. No further semantic constraints are applied.",
        "CQ": [
          {
            "axiom": "eaten-by domain None",
            "CQ": [
              "What types of entities can serve as the domain for the 'eaten-by' property?",
              "Is it correct that the 'eaten-by' property does not have a defined domain?",
              "Can 'eaten-by' be used with any subject without restriction?"
            ]
          },
          {
            "axiom": "eaten-by range None",
            "CQ": [
              "Is there any class or entity that can be the range of the property 'eaten-by'?",
              "What can be the range of the property 'eaten-by'?",
              "Is it correct that the property 'eaten-by' has no specified range?"
            ]
          },
          {
            "axiom": "eaten-by inverseOf eats",
            "CQ": [
              "What is the logical connection between ‘eaten-by’ and ‘eats’ in the ontology?",
              "If animal A is eaten by animal B, does the ontology entail that B eats A?",
              "Which property is recognized as the inverse of ‘eaten-by’ in this ontology?"
            ]
          }
        ]
      }
    }
  },
  "event": {
    "classes": {
      "ObjectEvent": {
        "axiom": {
          "subClassOf": [
            "Event"
          ],
          "propertyRestrictions": [
            "[hasAgent exactly 1 Object]",
            "[hasAgent some Object]"
          ]
        },
        "description": "ObjectEvent is defined as a subclass of Event. It is characterized by property restrictions specifying that it must have exactly one agent, and this agent must be an instance of Object. In other words, every ObjectEvent is an Event that is uniquely and explicitly associated with a single Object as its agent. This ensures that no ObjectEvent can exist without, or with more than one, Object agent.",
        "CQ": [
          {
            "axiom": "ObjectEvent subClassOf Event",
            "CQ": [
              "Is ObjectEvent recognized as a specific kind of Event?",
              "What types of Events include ObjectEvent as a more specialized instance?",
              "To which more general categories does ObjectEvent pertain?"
            ]
          },
          {
            "axiom": "ObjectEvent propertyRestrictions [hasAgent exactly 1 Object]",
            "CQ": [
              "Does each ObjectEvent involve exactly one agent through the hasAgent property?",
              "Is it required for every ObjectEvent to be associated with one and only one Object as its agent?",
              "Can an ObjectEvent ever have either no agent or multiple agents linked via the hasAgent property?"
            ]
          },
          {
            "axiom": "ObjectEvent propertyRestrictions [hasAgent some Object]",
            "CQ": [
              "Is every ObjectEvent necessarily associated with at least one agent via the 'hasAgent' property?",
              "Can an ObjectEvent exist without having some object linked as its agent through 'hasAgent'?",
              "Does the occurrence of an ObjectEvent guarantee the involvement of an object as its agent?"
            ]
          }
        ]
      },
      "AmbientMeasurement": {
        "axiom": {
          "subClassOf": [
            "Measurement"
          ],
          "propertyRestrictions": [
            "[refersTo only Room]"
          ]
        },
        "description": "AmbientMeasurement is defined as a subclass of Measurement, representing measurements that specifically pertain only to Room. The property restriction ensures that any AmbientMeasurement instance exclusively refers to a Room, formalizing that ambient measurements are contextually bound to indoor environments such as rooms.",
        "CQ": [
          {
            "axiom": "AmbientMeasurement subClassOf Measurement",
            "CQ": [
              "Does AmbientMeasurement fall under the broader category of Measurement?",
              "What types of measurements encompass AmbientMeasurement as a more specific variant?",
              "Which general measurement groups include AmbientMeasurement as a member?"
            ]
          },
          {
            "axiom": "AmbientMeasurement propertyRestrictions [refersTo only Room]",
            "CQ": [
              "Is it required that AmbientMeasurement refers exclusively to a Room?",
              "Can AmbientMeasurement ever refer to an entity other than Room?",
              "Are all entities referred to by AmbientMeasurement instances necessarily Rooms?"
            ]
          }
        ]
      },
      "DoorClosed": {
        "axiom": {
          "subClassOf": [
            "Closed"
          ],
          "propertyRestrictions": [
            "[hasAgent some Door]"
          ]
        },
        "description": "DoorClosed is defined as a subclass of Closed and is characterized by the restriction that it must have at least one agent that is a Door (hasAgent some Door). This means that DoorClosed instances represent situations or states in which something closed specifically involves a Door as the acting agent.",
        "CQ": [
          {
            "axiom": "DoorClosed subClassOf Closed",
            "CQ": [
              "Does DoorClosed represent a more specific category under Closed?",
              "Which conditions are classified as specializations of Closed, such as DoorClosed?",
              "Under which general states can DoorClosed be grouped?"
            ]
          },
          {
            "axiom": "DoorClosed propertyRestrictions [hasAgent some Door]",
            "CQ": [
              "Is it required that DoorClosed must have the hasAgent property associated with at least one Door?",
              "Can DoorClosed occur without any Door being specified as an agent?",
              "Does every instance of DoorClosed necessarily have a Door as its agent through the hasAgent property?"
            ]
          }
        ]
      },
      "SkinConductivity": {
        "axiom": {
          "subClassOf": [
            "PhysiologicalMeasurement"
          ],
          "propertyRestrictions": [
            "[hasConductivity only rdfs:Literal]",
            "[hasConductivity exactly 1]"
          ]
        },
        "description": "SkinConductivity is defined as a subclass of PhysiologicalMeasurement. Members of this class are characterized by the requirement that they possess exactly one value for the property hasConductivity, and this value must be a literal (such as a numerical measurement). This ensures that each instance of SkinConductivity represents a specific, literal-based conductivity measurement associated with physiological data.",
        "CQ": [
          {
            "axiom": "SkinConductivity subClassOf PhysiologicalMeasurement",
            "CQ": [
              "Does SkinConductivity fall under the classification of PhysiologicalMeasurement?",
              "What types of measurements are categorized more specifically than PhysiologicalMeasurement, including SkinConductivity?",
              "Which broader measurement categories encompass SkinConductivity?"
            ]
          },
          {
            "axiom": "SkinConductivity propertyRestrictions [hasConductivity only rdfs:Literal]",
            "CQ": [
              "Is SkinConductivity restricted to having only hasConductivity values that are literals?",
              "Can SkinConductivity possess a hasConductivity value that is not an rdfs:Literal?",
              "Must every hasConductivity relation for SkinConductivity point exclusively to an rdfs:Literal?"
            ]
          },
          {
            "axiom": "SkinConductivity propertyRestrictions [hasConductivity exactly 1]",
            "CQ": [
              "Is an entity with SkinConductivity required to have exactly one value for the property hasConductivity?",
              "Can SkinConductivity ever possess more than one or fewer than one hasConductivity assignment?",
              "Does the definition of SkinConductivity restrict it to a single hasConductivity value exclusively?"
            ]
          }
        ]
      },
      "NearObject": {
        "axiom": {
          "subClassOf": [
            "InLocation"
          ],
          "propertyRestrictions": [
            "[objectLocalisation some Object]"
          ]
        },
        "description": "NearObject is defined as a subclass of InLocation and is characterized by the property restriction that it must have at least one objectLocalisation relationship to an instance of Object. This means every NearObject instance is localized in space relative to some object, capturing the notion of proximity in an ontological context.",
        "CQ": [
          {
            "axiom": "NearObject subClassOf InLocation",
            "CQ": [
              "Is NearObject classified as a specific type of InLocation?",
              "Which classes fall under the broader category of InLocation, including NearObject?",
              "What are the parent classes that NearObject directly inherits from?"
            ]
          },
          {
            "axiom": "NearObject propertyRestrictions [objectLocalisation some Object]",
            "CQ": [
              "Is it required that a NearObject must have at least one object localisation relating to an Object?",
              "Can every NearObject be associated with some instance of Object via the objectLocalisation property?",
              "Does the NearObject class necessitate the existence of the objectLocalisation property connecting it to an Object?"
            ]
          }
        ]
      },
      "LightLevel": {
        "axiom": {
          "subClassOf": [
            "AmbientMeasurement"
          ],
          "propertyRestrictions": [
            "[hasLightLevel some rdfs:Literal]",
            "[hasLightLevel exactly 1]"
          ]
        },
        "description": "LightLevel is defined as a subclass of AmbientMeasurement. Every instance of LightLevel is required to have exactly one value for the property hasLightLevel, and this value must be of type rdfs:Literal. This ensures that each LightLevel measurement precisely captures a single ambient light value.",
        "CQ": [
          {
            "axiom": "LightLevel subClassOf AmbientMeasurement",
            "CQ": [
              "Does LightLevel fall under the wider class of AmbientMeasurement?",
              "Which subclasses are encompassed by AmbientMeasurement, such as LightLevel?",
              "What are the general categories under which LightLevel is classified?"
            ]
          },
          {
            "axiom": "LightLevel propertyRestrictions [hasLightLevel some rdfs:Literal]",
            "CQ": [
              "Is it necessary for a LightLevel to have at least one value for the property 'hasLightLevel'?",
              "Does every instance of LightLevel require association with some literal value through 'hasLightLevel'?",
              "Can a LightLevel exist without being linked to any literal value by the 'hasLightLevel' property?"
            ]
          },
          {
            "axiom": "LightLevel propertyRestrictions [hasLightLevel exactly 1]",
            "CQ": [
              "Is every instance of LightLevel required to have exactly one value for the hasLightLevel property?",
              "Can an individual classified as LightLevel possess more than one hasLightLevel assignment?",
              "Does the LightLevel class permit the absence of the hasLightLevel property or must it always be present exactly once?"
            ]
          }
        ]
      },
      "Sitting": {
        "axiom": {
          "subClassOf": [
            "Posture"
          ],
          "propertyRestrictions": [
            "[objectLocalisation some Furniture]"
          ]
        },
        "description": "Sitting is defined as a subclass of Posture, representing a specific body position. It is further characterized by a property restriction requiring that the object of sitting must be localized on some instance of Furniture. This means that every instance of Sitting involves an association with a piece of furniture, reflecting the typical context in which the sitting posture occurs.",
        "CQ": [
          {
            "axiom": "Sitting subClassOf Posture",
            "CQ": [
              "Does Sitting fall under the broader classification of Posture?",
              "Which specific postures include Sitting as a subclass?",
              "What categories of Posture encompass the concept of Sitting?"
            ]
          },
          {
            "axiom": "Sitting propertyRestrictions [objectLocalisation some Furniture]",
            "CQ": [
              "Is it necessary for a Sitting instance to have the objectLocalisation property linked to some Furniture?",
              "Does every Sitting require at least one associated Furniture through the objectLocalisation property?",
              "Can a Sitting exist without any objectLocalisation relation to Furniture?"
            ]
          }
        ]
      }
    },
    "properties": {
      "hasRate": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [
            "hasValue"
          ],
          "inverseOf": []
        },
        "description": "The property \"hasRate\" does not specify domain or range restrictions and possesses no special characteristics. It is defined as a sub-property of \"hasValue,\" inheriting its general semantics. No inverse property is specified. This property is intended to relate entities to values representing rates, with precise constraints or types left unspecified.",
        "CQ": [
          {
            "axiom": "hasRate domain None",
            "CQ": [
              "What types of entities can have the property 'hasRate' as their subject?",
              "Is it correct that the property 'hasRate' does not have a specified domain?",
              "Can 'hasRate' be used with any class as its subject?"
            ]
          },
          {
            "axiom": "hasRate range None",
            "CQ": [
              "Is it permissible for the property 'hasRate' to lack a defined range?",
              "What types of entities can serve as the range for the property 'hasRate'?",
              "Can the property 'hasRate' accept values of any type due to the absence of a specified range?"
            ]
          },
          {
            "axiom": "hasRate subPropertyOf hasValue",
            "CQ": [
              "Is hasValue a superproperty of hasRate?",
              "Which subproperties are contained within hasValue?",
              "Are all uses of hasRate implicitly instances of hasValue according to the ontology?"
            ]
          }
        ]
      },
      "hasAgent": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [
            "owl:topObjectProperty"
          ],
          "inverseOf": [
            "isAgentIn"
          ]
        },
        "description": "The property \"hasAgent\" has no explicitly defined domain, range, or special characteristics. It is a sub-property of \"owl:topObjectProperty,\" making it a generalized object property. The inverse property is specified as \"isAgentIn,\" indicating that \"hasAgent\" links entities to their associated agents, while \"isAgentIn\" expresses the reverse relationship.",
        "CQ": [
          {
            "axiom": "hasAgent domain None",
            "CQ": [
              "What kinds of entities can be the subject (domain) of the property 'hasAgent'?",
              "Is it appropriate for the property 'hasAgent' to have no specified domain?",
              "Can entities outside any defined class use the property 'hasAgent' as their subject?"
            ]
          },
          {
            "axiom": "hasAgent range None",
            "CQ": [
              "Is it correct that the property 'hasAgent' does not specify a range?",
              "What potential classes or types could serve as the range for the property 'hasAgent'?",
              "Can 'hasAgent' connect a subject to any type of object, given the absence of a defined range?"
            ]
          },
          {
            "axiom": "hasAgent subPropertyOf owl:topObjectProperty",
            "CQ": [
              "Is hasAgent considered a subproperty of owl:topObjectProperty?",
              "What properties are superproperties of hasAgent in the ontology?",
              "Does the use of hasAgent imply applicability wherever owl:topObjectProperty is accepted?"
            ]
          },
          {
            "axiom": "hasAgent inverseOf isAgentIn",
            "CQ": [
              "What is the ontological connection between the ‘hasAgent’ and ‘isAgentIn’ properties?",
              "If entity A has an agent B, does this entail in the ontology that B is an agent in A?",
              "Which property acts as the inverse of ‘hasAgent’ in the ontology?"
            ]
          }
        ]
      },
      "hasNoiseLevel": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [
            "hasValue"
          ],
          "inverseOf": []
        },
        "description": "The property \"hasNoiseLevel\" inherits from the more general property \"hasValue\" and does not have explicitly defined characteristics, domain, or range restrictions. It is intended to associate an entity with its noise level, but the precise classes or datatypes involved are not restricted by axioms. No inverse property is specified.",
        "CQ": [
          {
            "axiom": "hasNoiseLevel domain None",
            "CQ": [
              "What entities can serve as the domain for the property 'hasNoiseLevel'?",
              "Is it correct that 'hasNoiseLevel' is not restricted to a particular domain?",
              "Could there be a defined class that should act as the domain for the property 'hasNoiseLevel'?"
            ]
          },
          {
            "axiom": "hasNoiseLevel range None",
            "CQ": [
              "Is it correct that the property 'hasNoiseLevel' does not specify a range?",
              "What types of entities, if any, can be the value of the property 'hasNoiseLevel'?",
              "Could the property 'hasNoiseLevel' have an explicit range assigned to it?"
            ]
          },
          {
            "axiom": "hasNoiseLevel subPropertyOf hasValue",
            "CQ": [
              "Is hasNoiseLevel considered a subproperty of hasValue in the ontology?",
              "Which properties are defined as subproperties under hasValue?",
              "Does using hasNoiseLevel always entail the use of hasValue?"
            ]
          }
        ]
      },
      "isAgentIn": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [
            "owl:topObjectProperty"
          ],
          "inverseOf": []
        },
        "description": "The property \"isAgentIn\" has no explicitly specified domain, range, or characteristics. It is defined as a subproperty of owl:topObjectProperty, indicating it is a general object property without further restrictions. No inverse property is declared.",
        "CQ": [
          {
            "axiom": "isAgentIn domain None",
            "CQ": [
              "What entities can be the domain of the property 'isAgentIn'?",
              "Is it correct that 'isAgentIn' does not specify a domain?",
              "Can 'isAgentIn' be used with any subject regardless of its type?"
            ]
          },
          {
            "axiom": "isAgentIn range None",
            "CQ": [
              "Is it correct that the property 'isAgentIn' does not have a specified range?",
              "What kinds of entities can appear as the object of the property 'isAgentIn'?",
              "Can 'isAgentIn' be used with objects other than a particular class, given its unspecified range?"
            ]
          },
          {
            "axiom": "isAgentIn subPropertyOf owl:topObjectProperty",
            "CQ": [
              "Is isAgentIn categorized as a subproperty within the hierarchy of owl:topObjectProperty?",
              "Which properties are considered superproperties of isAgentIn?",
              "Does every use of isAgentIn also satisfy the owl:topObjectProperty relationship in the ontology?"
            ]
          }
        ]
      }
    }
  },
  "OntoDT": {
    "classes": {
      "procedure-paremeter declaration": {
        "axiom": {
          "subClassOf": [
            "specification"
          ],
          "propertyRestrictions": [
            "[has_member some parameter]",
            "[has_member some direction]"
          ]
        },
        "description": "procedure-parameter declaration is defined as a subclass of specification. All instances of this class must include at least one member with the type parameter and at least one member with the type direction, as specified by the property restrictions. This class formally represents declarations in a procedure that specify the required parameters and their directions, ensuring that every procedure-parameter declaration comprehensively describes its involved parameters and their input/output directions.",
        "CQ": [
          {
            "axiom": "procedure-paremeter declaration subClassOf specification",
            "CQ": [
              "Is procedure-parameter declaration classified as a kind of specification?",
              "Which specifications include procedure-parameter declaration as a more specific type?",
              "Under what broader concepts can procedure-parameter declaration be grouped in the ontology?"
            ]
          },
          {
            "axiom": "procedure-paremeter declaration propertyRestrictions [has_member some parameter]",
            "CQ": [
              "Does every procedure-parameter declaration necessarily include at least one parameter as a member?",
              "Is it required for a procedure-parameter declaration to be associated with the 'has_member' property pointing to a parameter?",
              "Can a procedure-parameter declaration exist without having any 'parameter' as its member through the 'has_member' relation?"
            ]
          },
          {
            "axiom": "procedure-paremeter declaration propertyRestrictions [has_member some direction]",
            "CQ": [
              "Is every procedure-parameter required to have at least one member that is a direction?",
              "Must a procedure-parameter always be associated with a direction through the has_member relationship?",
              "Can a procedure-parameter exist without referencing any direction via the has_member property?"
            ]
          }
        ]
      },
      "datatype role": {
        "axiom": {
          "subClassOf": [
            "role"
          ],
          "propertyRestrictions": [
            "[role_of some datatype]"
          ]
        },
        "description": "datatype role is defined as a subclass of role, with the property restriction that it must be the role_of at least one datatype. This means every instance of datatype role is associated with, and specifically plays a role in the context of, some datatype.",
        "CQ": [
          {
            "axiom": "datatype role subClassOf role",
            "CQ": [
              "Is every datatype role by definition a kind of role?",
              "What specific roles are classified under the broader role of 'role', including datatype role?",
              "Which higher-level categories encompass datatype role within the ontology?"
            ]
          },
          {
            "axiom": "datatype role propertyRestrictions [role_of some datatype]",
            "CQ": [
              "Is it required that every instance with the role 'role_of' is associated with a value of datatype?",
              "Does the property 'role_of' necessarily relate an individual only to values belonging to datatype?",
              "Can an entity be considered within the scope if its 'role_of' relation points to something other than the specified datatype?"
            ]
          }
        ]
      },
      "range subtype generator": {
        "axiom": {
          "subClassOf": [
            "subtype generator"
          ],
          "propertyRestrictions": [
            "[has_member some range]"
          ]
        },
        "description": "range subtype generator is defined as a subclass of subtype generator. Members of this class are characterized by the existence of at least one member related via the has_member property that is an instance of range. This formalization ensures that any range subtype generator must be associated with at least one range through the has_member relationship.",
        "CQ": [
          {
            "axiom": "range subtype generator subClassOf subtype generator",
            "CQ": [
              "Is every range subtype generator necessarily classified as a kind of subtype generator?",
              "Which entities fall under the more specific grouping of subtype generator, such as the range subtype generator?",
              "Into what broader categories within the ontology is range subtype generator subsumed?"
            ]
          },
          {
            "axiom": "range subtype generator propertyRestrictions [has_member some range]",
            "CQ": [
              "Does a Range Subtype Generator necessarily have at least one member that is a Range?",
              "Is it required for every Range Subtype Generator to have a 'has_member' relationship with some instance of Range?",
              "Can a Range Subtype Generator be defined without possessing the property 'has_member' that connects it to any Range?"
            ]
          }
        ]
      },
      "non-directed labeled graph datatype": {
        "axiom": {
          "subClassOf": [
            "defined datatype"
          ],
          "propertyRestrictions": [
            "[has_member some non-directed labeled graph generator]",
            "[has_member some graph aggregate component]"
          ]
        },
        "description": "non-directed labeled graph datatype is defined as a subclass of defined datatype. Any member of this class must include at least one non-directed labeled graph generator and at least one graph aggregate component as elements (as specified by the has_member property). This formalization captures datatypes representing non-directed labeled graphs constructed or characterized by these required components.",
        "CQ": [
          {
            "axiom": "non-directed labeled graph datatype subClassOf defined datatype",
            "CQ": [
              "Is non-directed labeled graph datatype a specialized form of defined datatype?",
              "Which datatypes fall under the defined datatype category, including non-directed labeled graph datatype?",
              "What broader datatype classifications does non-directed labeled graph datatype belong to?"
            ]
          },
          {
            "axiom": "non-directed labeled graph datatype propertyRestrictions [has_member some non-directed labeled graph generator]",
            "CQ": [
              "Is every non-directed labeled graph required to have at least one member that is a non-directed labeled graph generator?",
              "Can a non-directed labeled graph exist without having a has_member relationship to a non-directed labeled graph generator?",
              "Does the presence of the has_member relationship to a non-directed labeled graph generator define membership within a non-directed labeled graph?"
            ]
          },
          {
            "axiom": "non-directed labeled graph datatype propertyRestrictions [has_member some graph aggregate component]",
            "CQ": [
              "Must every non-directed labeled graph have at least one has_member relationship to a graph aggregate component?",
              "Is it required for a non-directed labeled graph to possess some member that qualifies as a graph aggregate component?",
              "Can a non-directed labeled graph exist without having any has_member relation to a graph aggregate component?"
            ]
          }
        ]
      },
      "homogenous aggregate generator with variable size": {
        "axiom": {
          "subClassOf": [
            "homogenous aggregate generator"
          ],
          "propertyRestrictions": [
            "[has_quality some variable size]"
          ]
        },
        "description": "homogenous aggregate generator with variable size is a subclass of homogenous aggregate generator. Members of this class are characterized by possessing at least one quality of having variable size, as specified by the 'has_quality some variable size' restriction. This formalization ensures that any individual classified under this class must be a homogenous aggregate generator that exhibits variability in size as one of its defining qualities.",
        "CQ": [
          {
            "axiom": "homogenous aggregate generator with variable size subClassOf homogenous aggregate generator",
            "CQ": [
              "Is homogenous aggregate generator with variable size categorized under homogenous aggregate generator?",
              "Which specific types fall under homogenous aggregate generator, such as those with variable size?",
              "What broader classes encompass homogenous aggregate generator with variable size?"
            ]
          },
          {
            "axiom": "homogenous aggregate generator with variable size propertyRestrictions [has_quality some variable size]",
            "CQ": [
              "Is every homogenous aggregate generator required to have at least one quality corresponding to variable size?",
              "Can a homogenous aggregate generator exist without exhibiting the variable size quality?",
              "Does the property 'has_quality' for homogenous aggregate generators necessarily include variable size among its attributes?"
            ]
          }
        ]
      },
      "class generator": {
        "axiom": {
          "subClassOf": [
            "heterogenous aggregate generator"
          ],
          "disjointWith": [
            "record generator",
            "table generator"
          ],
          "propertyRestrictions": [
            "[has_quality some key access]",
            "[has_quality some unordered aggregate]",
            "[has_quality some non-unique values]",
            "[has_quality some one dimensional]",
            "[has_quality some fixed size]"
          ]
        },
        "description": "class generator is defined as a subclass of heterogenous aggregate generator and is explicitly disjoint with both record generator and table generator, meaning an individual cannot belong to more than one of these classes simultaneously. Members of the class generator are characterized by having the following qualities: key access, unordered aggregate structure, non-unique values, one-dimensional organization, and fixed size. These properties collectively define class generator as a type of aggregate generator that supports key-based, unordered collections with potentially repeated values, all arranged in a single dimension with a fixed number of elements.",
        "CQ": [
          {
            "axiom": "class generator subClassOf heterogenous aggregate generator",
            "CQ": [
              "Is class generator categorized as a type of heterogenous aggregate generator?",
              "Which specific generators fall under the broader class of heterogenous aggregate generator, such as class generator?",
              "What higher-level generator classifications include class generator within their hierarchy?"
            ]
          },
          {
            "axiom": "class generator disjointWith record generator",
            "CQ": [
              "What logical incompatibility exists between class generator and record generator in the ontology?",
              "Is it permitted for an entity to be both a class generator and a record generator?",
              "Which classes are formally specified as disjoint with record generator?"
            ]
          },
          {
            "axiom": "class generator disjointWith table generator",
            "CQ": [
              "What formal separation is defined between class generator and table generator in the ontology?",
              "Is there any instance that can be classified as both a class generator and a table generator?",
              "Which other entities are specified as being incompatible with table generator?"
            ]
          },
          {
            "axiom": "class generator propertyRestrictions [has_quality some key access]",
            "CQ": [
              "Is it required for every generator to possess at least one key access quality?",
              "Does the class generator necessarily have the property 'has_quality' related in some way to key access?",
              "Can a member of the generator class lack any association to key access through the has_quality property?"
            ]
          },
          {
            "axiom": "class generator propertyRestrictions [has_quality some unordered aggregate]",
            "CQ": [
              "Is every instance of the class 'generator' required to have at least one 'has_quality' relationship with an 'unordered aggregate'?",
              "Can a generator possess a quality that is not an unordered aggregate?",
              "Are all qualities attributed to generators necessarily instances of unordered aggregates?"
            ]
          },
          {
            "axiom": "class generator propertyRestrictions [has_quality some non-unique values]",
            "CQ": [
              "Must every instance of generator possess at least one non-unique quality via the has_quality property?",
              "Is it required that a generator is related by has_quality to something described as a non-unique value?",
              "Can a generator exist in the ontology without being associated with any non-unique value through has_quality?"
            ]
          },
          {
            "axiom": "class generator propertyRestrictions [has_quality some one dimensional]",
            "CQ": [
              "Must every instance of generator have at least one quality that is one dimensional?",
              "Are all generators required to possess some quality classified as one dimensional?",
              "Is it necessary that generator is related via has_quality to a one dimensional entity?"
            ]
          },
          {
            "axiom": "class generator propertyRestrictions [has_quality some fixed size]",
            "CQ": [
              "Is it required that every generator has at least one quality that is a fixed size?",
              "Can a generator possess a quality other than fixed size, or is fixed size the only necessary quality?",
              "Does the ontology require the existence of a fixed size quality for all instances of generators?"
            ]
          }
        ]
      },
      "sequence generator": {
        "axiom": {
          "subClassOf": [
            "homogenous aggregate generator with variable size"
          ],
          "disjointWith": [
            "homogenous unordered aggregate generator with variable size"
          ],
          "propertyRestrictions": [
            "[has_quality some non-unique values]",
            "[has_quality some ordered aggregate]",
            "[has_quality some position access]"
          ]
        },
        "description": "sequence generator is defined as a subclass of homogenous aggregate generator with variable size, and is explicitly disjoint from homogenous unordered aggregate generator with variable size—meaning an individual cannot belong to both classes at once. Members of the sequence generator class are characterized by possessing certain qualities: they generate aggregates with non-unique values, maintain an ordered structure, and support position-based access to elements. These constraints formally specify that sequence generators create ordered collections (or aggregates) where repeated values are permissible and positional referencing is available, distinguishing them from unordered aggregate generators.",
        "CQ": [
          {
            "axiom": "sequence generator subClassOf homogenous aggregate generator with variable size",
            "CQ": [
              "Is sequence generator included as a type of homogenous aggregate generator with variable size?",
              "What specific subclasses fall under homogenous aggregate generator with variable size, including sequence generator?",
              "Which broader categories does sequence generator belong to within the ontology?"
            ]
          },
          {
            "axiom": "sequence generator disjointWith homogenous unordered aggregate generator with variable size",
            "CQ": [
              "What logical separation is defined between sequence generators and homogenous unordered aggregate generators with variable size in the ontology?",
              "Is any system classified as both a sequence generator and a homogenous unordered aggregate generator with variable size?",
              "Which generator classes are declared as incompatible with homogenous unordered aggregate generators with variable size?"
            ]
          },
          {
            "axiom": "sequence generator propertyRestrictions [has_quality some non-unique values]",
            "CQ": [
              "Is it required that a sequence generator has at least one quality corresponding to non-unique values?",
              "Can a sequence generator exist without possessing the non-unique values quality?",
              "Must all sequence generators be associated with the non-unique values quality through the has_quality property?"
            ]
          },
          {
            "axiom": "sequence generator propertyRestrictions [has_quality some ordered aggregate]",
            "CQ": [
              "Must every sequence generator possess at least one quality characterized as an ordered aggregate?",
              "Is it required that a sequence generator be associated, via the has_quality property, with something that is an ordered aggregate?",
              "Can a sequence generator exist without having the has_quality relationship to an ordered aggregate?"
            ]
          },
          {
            "axiom": "sequence generator propertyRestrictions [has_quality some position access]",
            "CQ": [
              "Does every sequence generator necessarily have at least one quality associated with position access?",
              "Is possessing the quality of position access required for an entity to be classified as a sequence generator?",
              "Can a sequence generator exist without having the property 'has_quality' linked to position access?"
            ]
          }
        ]
      },
      "pointer generator": {
        "axiom": {
          "subClassOf": [
            "non-aggregate generator"
          ],
          "propertyRestrictions": [
            "[is_member_of some pointer datatype]"
          ]
        },
        "description": "pointer generator is defined as a subclass of non-aggregate generator. Every instance of pointer generator must be a member of some pointer datatype, indicating that this class is characterized by its association with pointer datatypes. This structure ensures that all pointer generators participate specifically within the context of pointer datatypes and inherit the properties of non-aggregate generators.",
        "CQ": [
          {
            "axiom": "pointer generator subClassOf non-aggregate generator",
            "CQ": [
              "Does pointer generator fall under the classification of non-aggregate generator?",
              "Which types of generators are subclasses of non-aggregate generator, such as pointer generator?",
              "What broader generator categories include pointer generator as a member?"
            ]
          },
          {
            "axiom": "pointer generator propertyRestrictions [is_member_of some pointer datatype]",
            "CQ": [
              "Is every pointer generator necessarily associated with at least one pointer datatype through the 'is_member_of' property?",
              "Does a pointer generator require the existence of some related pointer datatype via the 'is_member_of' relationship?",
              "Must each instance of pointer generator be linked to a pointer datatype by the 'is_member_of' property?"
            ]
          }
        ]
      },
      "record (tuple) datatype": {
        "axiom": {
          "subClassOf": [
            "heterogenous aggregate datatype"
          ],
          "propertyRestrictions": [
            "[has_quality some non-numeric]",
            "[has_operation some FieldSelect:record]",
            "[has_operation some Equal:record]",
            "[has_quality some exact]",
            "[has_quality some non-ordered]",
            "[has_member some record generator]",
            "[has_operation some FieldReplace:record]",
            "[has_member some field-list]"
          ]
        },
        "description": "record (tuple) datatype is defined as a subclass of heterogenous aggregate datatype, representing a collection of fields that may be of differing types. It is synonymous with \"tuple datatype.\" Members of this class possess non-numeric, non-ordered, and exact qualities, supporting operations such as field selection (FieldSelect:record), field replacement (FieldReplace:record), and equality checking (Equal:record). Additionally, each record (tuple) must include a member that is a record generator and a member that is a field-list. This class formalizes the concept of records or tuples typically used to model structured, fixed-length data with heterogeneous types.",
        "CQ": [
          {
            "axiom": "record (tuple) datatype subClassOf heterogenous aggregate datatype",
            "CQ": [
              "Is every record (tuple) datatype classified under heterogenous aggregate datatype?",
              "What specific datatypes are recognized as subclasses of heterogenous aggregate datatype, including record (tuple) datatype?",
              "Which broader categories encompass the record (tuple) datatype?"
            ]
          },
          {
            "axiom": "record (tuple) datatype propertyRestrictions [has_quality some non-numeric]",
            "CQ": [
              "Is it required that every record has at least one quality that is non-numeric?",
              "Does the definition of record permit it to possess only non-numeric qualities via the has_quality property?",
              "Can a record exist without having a non-numeric value assigned through has_quality?"
            ]
          },
          {
            "axiom": "record (tuple) datatype propertyRestrictions [has_operation some FieldSelect:record]",
            "CQ": [
              "Is every instance of record (tuple) required to have at least one has_operation property relating to a FieldSelect:record?",
              "Can a record (tuple) exist without any has_operation connection to a FieldSelect:record?",
              "Does the ontology specify that a record (tuple) must always participate in at least one has_operation relationship with a FieldSelect:record?"
            ]
          },
          {
            "axiom": "record (tuple) datatype propertyRestrictions [has_operation some Equal:record]",
            "CQ": [
              "Must a record always have at least one operation that is classified as Equal?",
              "Is it required for every record to possess an operation property linking to an instance of Equal?",
              "Can a record exist without having its has_operation property related to Equal?"
            ]
          },
          {
            "axiom": "record (tuple) datatype propertyRestrictions [has_quality some exact]",
            "CQ": [
              "Must every record (tuple) have at least one has_quality property with the value exact?",
              "Is it required for any instance of record (tuple) to possess the has_quality property related specifically to exact?",
              "Can a record (tuple) exist without being associated with the has_quality property to exact?"
            ]
          },
          {
            "axiom": "record (tuple) datatype propertyRestrictions [has_quality some non-ordered]",
            "CQ": [
              "Does every record tuple necessarily possess the quality of being non-ordered?",
              "Can a record tuple exist without having at least one non-ordered quality?",
              "Is it required that some aspect of a record tuple must be described by the has_quality property related to non-ordered?"
            ]
          },
          {
            "axiom": "record (tuple) datatype propertyRestrictions [has_member some record generator]",
            "CQ": [
              "Is it required that a record must have at least one member with the role of generator?",
              "Can a record exist without including any generator as a member?",
              "Are all records defined to contain some member identified specifically as a generator?"
            ]
          },
          {
            "axiom": "record (tuple) datatype propertyRestrictions [has_operation some FieldReplace:record]",
            "CQ": [
              "Does every record require at least one has_operation relation to a FieldReplace record?",
              "Is it necessary for a record to participate in the has_operation property with a FieldReplace instance?",
              "Can a record exist without being associated via has_operation to any FieldReplace record?"
            ]
          },
          {
            "axiom": "record (tuple) datatype propertyRestrictions [has_member some field-list]",
            "CQ": [
              "Is it required that every record has at least one member from the field-list?",
              "Can a record exist if it does not have the has_member property with any element in the field-list?",
              "Does the definition of record ensure the presence of at least one value from the field-list via the has_member property?"
            ]
          }
        ]
      },
      "aggregate imposed ordering": {
        "axiom": {
          "subClassOf": [
            "aggregate generator property"
          ],
          "disjointWith": [
            "aggregate-imposed identifier uniqueness",
            "homogenity",
            "agregate size",
            "uniqueness",
            "component mandatoriness",
            "structurness",
            "recursiveness",
            "access type"
          ],
          "equivalentClass": [
            "(ordered aggregate or unordered aggregate)"
          ]
        },
        "description": "aggregate imposed ordering is defined as a subclass of aggregate generator property and is disjoint with aggregate-imposed identifier uniqueness, homogenity, aggregate size, uniqueness, component mandatoriness, structurness, recursiveness, and access type—ensuring that no individual can simultaneously belong to these disjoint classes. It is equivalent to the union of ordered aggregate and unordered aggregate, indicating that every aggregate imposed ordering instance must be either an ordered aggregate or an unordered aggregate. This class captures the property by which an aggregate specifies an ordering—imposed or absent—over its components, distinguishing it from other aggregate generator properties.",
        "CQ": [
          {
            "axiom": "aggregate imposed ordering subClassOf aggregate generator property",
            "CQ": [
              "Is aggregate imposed ordering categorized as a type of aggregate generator property?",
              "Which properties fall under the broader class of aggregate generator property, such as aggregate imposed ordering?",
              "What are the more general classes that aggregate imposed ordering is a member of?"
            ]
          },
          {
            "axiom": "aggregate imposed ordering disjointWith aggregate-imposed identifier uniqueness",
            "CQ": [
              "What is the ontological separation between aggregate imposed ordering and aggregate-imposed identifier uniqueness within the model?",
              "Can an entity simultaneously exhibit aggregate imposed ordering and aggregate-imposed identifier uniqueness?",
              "Which ontology concepts are defined as mutually exclusive with aggregate-imposed identifier uniqueness?"
            ]
          },
          {
            "axiom": "aggregate imposed ordering disjointWith homogenity",
            "CQ": [
              "What distinguishes aggregate imposed ordering from homogenity within the ontology?",
              "Is any entity permitted to belong to both aggregate imposed ordering and homogenity simultaneously?",
              "Which other classes are explicitly defined as disjoint with homogenity?"
            ]
          },
          {
            "axiom": "aggregate imposed ordering disjointWith agregate size",
            "CQ": [
              "What logical separation is defined between aggregate imposed ordering and aggregate size within the ontology?",
              "Can an aggregate characteristic belong to both imposed ordering and size categories simultaneously?",
              "Which other aggregate-related concepts are specified as disjoint with aggregate imposed ordering?"
            ]
          },
          {
            "axiom": "aggregate imposed ordering disjointWith uniqueness",
            "CQ": [
              "What classification differentiates aggregate imposed ordering from uniqueness within the ontology?",
              "Is it feasible for a concept to exemplify both aggregate imposed ordering and uniqueness simultaneously?",
              "Which concepts are explicitly incompatible with uniqueness by disjointness declarations?"
            ]
          },
          {
            "axiom": "aggregate imposed ordering disjointWith component mandatoriness",
            "CQ": [
              "What is the formal separateness specified between aggregate imposed ordering and component mandatoriness?",
              "Could an entity in the ontology be simultaneously classified as exhibiting both aggregate imposed ordering and component mandatoriness?",
              "Which classes are asserted as disjoint with aggregate imposed ordering?"
            ]
          },
          {
            "axiom": "aggregate imposed ordering disjointWith structurness",
            "CQ": [
              "What ontological constraint exists between aggregate imposed ordering and structurness?",
              "Is there an entity that can be classified under both aggregate imposed ordering and structurness?",
              "Which classes are specified as disjoint with structurness in the ontology?"
            ]
          },
          {
            "axiom": "aggregate imposed ordering disjointWith recursiveness",
            "CQ": [
              "How does the ontology differentiate between aggregate imposed ordering and recursiveness?",
              "Is there any entity that can be classified as both aggregate imposed ordering and recursiveness?",
              "Which classes are defined as mutually exclusive with recursiveness?"
            ]
          },
          {
            "axiom": "aggregate imposed ordering disjointWith access type",
            "CQ": [
              "What logical separation exists between aggregate imposed ordering and access type in the ontology?",
              "Is there any entity that can simultaneously be classified as aggregate imposed ordering and access type?",
              "Which other classes, apart from access type, are explicitly declared as disjoint with aggregate imposed ordering?"
            ]
          },
          {
            "axiom": "aggregate imposed ordering equivalentClass (ordered aggregate or unordered aggregate)",
            "CQ": [
              "Is aggregate imposed ordering equivalent to the union of ordered aggregate and unordered aggregate?",
              "Can every instance of aggregate imposed ordering be classified as either an ordered aggregate or an unordered aggregate?",
              "Are there any instances of aggregate imposed ordering that are not part of ordered aggregate or unordered aggregate?"
            ]
          }
        ]
      },
      "agregate size": {
        "axiom": {
          "subClassOf": [
            "aggregate generator property"
          ],
          "disjointWith": [
            "uniqueness",
            "component mandatoriness",
            "structurness",
            "recursiveness",
            "access type"
          ],
          "equivalentClass": [
            "(fixed size or variable size)"
          ]
        },
        "description": "aggregate size is a subclass of aggregate generator property and is formally equivalent to either fixed size or variable size, indicating that it refers to the characteristic of an aggregate having a specified or changeable quantity of components. It is explicitly disjoint with uniqueness, component mandatoriness, structurness, recursiveness, and access type, ensuring that no instance can simultaneously belong to these classes. This class is used to describe whether an aggregate maintains a constant number of elements or allows its size to vary.",
        "CQ": [
          {
            "axiom": "agregate size subClassOf aggregate generator property",
            "CQ": [
              "Is aggregate size classified as a type of aggregate generator property?",
              "Which properties are directly subsumed by aggregate generator property, including aggregate size?",
              "What are the broader categories that aggregate size is categorized under?"
            ]
          },
          {
            "axiom": "agregate size disjointWith uniqueness",
            "CQ": [
              "What logical separation exists between aggregate size and uniqueness within the ontology?",
              "Is it permissible for an entity to possess both aggregate size and uniqueness attributes simultaneously?",
              "Which classes or properties are explicitly stated as being disjoint with aggregate size?"
            ]
          },
          {
            "axiom": "agregate size disjointWith component mandatoriness",
            "CQ": [
              "What is the ontological separation between aggregate size and component mandatoriness?",
              "Is there any entity in the ontology that can be classified as both aggregate size and component mandatoriness?",
              "Which classes are defined as being mutually exclusive with aggregate size?"
            ]
          },
          {
            "axiom": "agregate size disjointWith structurness",
            "CQ": [
              "What logical separation is defined between agregate size and structurness in the ontology?",
              "Is there any entity that can simultaneously possess agregate size and structurness?",
              "Which classes within the ontology are explicitly incompatible with agregate size?"
            ]
          },
          {
            "axiom": "agregate size disjointWith recursiveness",
            "CQ": [
              "What is the formal relationship defined between aggregate size and recursiveness in the ontology?",
              "Is there any entity that can possess both aggregate size and recursiveness characteristics simultaneously?",
              "Which classes are modelled as being disjoint with recursiveness within the ontology?"
            ]
          },
          {
            "axiom": "agregate size disjointWith access type",
            "CQ": [
              "What conceptual separation is defined between aggregate size and access type in the ontology?",
              "Is there an instance that can simultaneously belong to both aggregate size and access type categories?",
              "Which ontology categories are specified as disjoint with aggregate size?"
            ]
          },
          {
            "axiom": "agregate size equivalentClass (fixed size or variable size)",
            "CQ": [
              "Is agregate size precisely the union of fixed size and variable size?",
              "Can every agregate size be classified as either fixed size or variable size?",
              "Are there any agregate sizes that are not characterized as fixed size or variable size?"
            ]
          }
        ]
      },
      "structurness": {
        "axiom": {
          "subClassOf": [
            "aggregate generator property"
          ],
          "disjointWith": [
            "recursiveness",
            "access type"
          ],
          "equivalentClass": [
            "(structured or unstructured or semi-structured)"
          ]
        },
        "description": "structurness is defined as a subclass of aggregate generator property and is disjoint with both recursiveness and access type, indicating that no entity can simultaneously belong to structurness and either of these disjoint classes. Additionally, structurness is formally equivalent to the union of structured, unstructured, or semi-structured, meaning any entity that is classified as one of these three types is also considered an instance of structurness. This definition situates structurness as a categorical property that distinguishes types of structural organization within aggregate generator properties.",
        "CQ": [
          {
            "axiom": "structurness subClassOf aggregate generator property",
            "CQ": [
              "Is structurness included among the subclasses of aggregate generator property?",
              "Which general property categories encompass structurness?",
              "Is aggregate generator property a direct superclass of structurness?"
            ]
          },
          {
            "axiom": "structurness disjointWith recursiveness",
            "CQ": [
              "How does the ontology formally separate structurness from recursiveness?",
              "Is it allowable for an entity to possess both structurness and recursiveness attributes simultaneously?",
              "Which classes or concepts are specified as incompatible with recursiveness?"
            ]
          },
          {
            "axiom": "structurness disjointWith access type",
            "CQ": [
              "How does the ontology distinguish between structurness and access type?",
              "Is it permissible for an entity to be classified simultaneously as structurness and access type?",
              "Which classes are specified as mutually exclusive with access type?"
            ]
          },
          {
            "axiom": "structurness equivalentClass (structured or unstructured or semi-structured)",
            "CQ": [
              "Is structurness equivalent to the union of structured, unstructured, and semi-structured?",
              "Can structurness include any entities other than structured, unstructured, or semi-structured?",
              "Are all entities classified as structurness either structured, unstructured, or semi-structured?"
            ]
          }
        ]
      },
      "dimensionality": {
        "axiom": {
          "subClassOf": [
            "aggregate generator property"
          ],
          "equivalentClass": [
            "(one dimensional or two dimensional or multi dimensional)"
          ]
        },
        "description": "dimensionality is defined as a subclass of aggregate generator property, characterizing properties related to the generation or structure of aggregates. It is equivalent to the union of one dimensional, two dimensional, or multi dimensional classes, meaning that an instance of dimensionality must fall into one of these specific categories. This ensures that any property classified as dimensionality pertains to aggregates with exactly one, two, or multiple dimensions.",
        "CQ": [
          {
            "axiom": "dimensionality subClassOf aggregate generator property",
            "CQ": [
              "Does dimensionality fall under the classification of aggregate generator property?",
              "Which properties are more specific than aggregate generator property, such as dimensionality?",
              "What broader property categories is dimensionality a member of?"
            ]
          },
          {
            "axiom": "dimensionality equivalentClass (one dimensional or two dimensional or multi dimensional)",
            "CQ": [
              "Is dimensionality equivalent to the union of one dimensional, two dimensional, and multi dimensional classes?",
              "Are all instances of dimensionality necessarily instances of either one dimensional, two dimensional, or multi dimensional?",
              "Does dimensionality include any concepts apart from one dimensional, two dimensional, and multi dimensional?"
            ]
          }
        ]
      },
      "defined datatype": {
        "axiom": {
          "subClassOf": [
            "datatype"
          ],
          "propertyRestrictions": [
            "[has_member some defined generator]",
            "[has_member some defined datatype parameter-list]"
          ]
        },
        "description": "defined datatype is a subclass of datatype. It is characterized by having some members that are defined generators and some members that are defined datatype parameter-lists. This means that any defined datatype instance must be associated with at least one defined generator and at least one defined datatype parameter-list via the has_member property.",
        "CQ": [
          {
            "axiom": "defined datatype subClassOf datatype",
            "CQ": [
              "Is defined datatype categorized under the broader class of datatype?",
              "What are the specific subclasses found within datatype, such as defined datatype?",
              "Which higher-level categories does defined datatype belong to in this ontology?"
            ]
          },
          {
            "axiom": "defined datatype propertyRestrictions [has_member some defined generator]",
            "CQ": [
              "Is it required that any entity with 'propertyRestrictions' must have at least one 'has_member' relationship with a defined generator?",
              "Does the existence of 'propertyRestrictions' in an entity imply the presence of some member classified as a defined generator?",
              "Can an instance with 'propertyRestrictions' exist without having any defined generator as a member?"
            ]
          },
          {
            "axiom": "defined datatype propertyRestrictions [has_member some defined datatype parameter-list]",
            "CQ": [
              "Is it required that an instance with defined datatype propertyRestrictions must have at least one has_member relationship to a defined datatype parameter-list?",
              "Can something be described by defined datatype propertyRestrictions if it does not have any has_member relation to parameter-list?",
              "Does the existence of defined datatype propertyRestrictions imply the presence of at least one member drawn from parameter-list via has_member?"
            ]
          }
        ]
      },
      "tag-type": {
        "axiom": {
          "subClassOf": [
            "datatype role"
          ],
          "propertyRestrictions": [
            "[role_of some datatype]"
          ]
        },
        "description": "tag-type is defined as a subclass of datatype role. Every instance of tag-type must serve as the role_of at least one datatype, meaning that each tag-type is associated with one or more datatype instances through the role_of property. This establishes tag-type as a specific role related to datatypes within the ontology.",
        "CQ": [
          {
            "axiom": "tag-type subClassOf datatype role",
            "CQ": [
              "Is tag-type categorized under the broader concept of datatype role?",
              "What kinds of datatype role include tag-type as a specific instance?",
              "Which general roles encompass tag-type?"
            ]
          },
          {
            "axiom": "tag-type propertyRestrictions [role_of some datatype]",
            "CQ": [
              "Must every tag of type 'propertyRestrictions' necessarily have at least one 'role_of' relationship with some datatype?",
              "Is it required for instances of propertyRestrictions to be associated, via the 'role_of' property, with one or more datatypes?",
              "Can a propertyRestrictions tag exist without participating in a 'role_of' connection to any datatype?"
            ]
          }
        ]
      },
      "pointer-element-type": {
        "axiom": {
          "subClassOf": [
            "datatype role"
          ],
          "propertyRestrictions": [
            "[role_of some datatype]"
          ]
        },
        "description": "pointer-element-type is a subclass of datatype role, characterized by the restriction that it must be a role of some datatype. This means that any instance of pointer-element-type is specifically associated with at least one datatype through the \"role_of\" property, formalizing its function as a role connecting to datatypes within the ontology.",
        "CQ": [
          {
            "axiom": "pointer-element-type subClassOf datatype role",
            "CQ": [
              "Is pointer-element-type categorized under the broader class of datatype role?",
              "Which entity types are more specific instances of datatype role, such as pointer-element-type?",
              "What are the parent classes that pointer-element-type is associated with?"
            ]
          },
          {
            "axiom": "pointer-element-type propertyRestrictions [role_of some datatype]",
            "CQ": [
              "Is every pointer element type required to be related through the 'role_of' property to some datatype?",
              "Can a pointer element type exist without participating in a 'role_of' relationship with at least one datatype?",
              "Does the presence of 'role_of' with a datatype define membership in the pointer element type category?"
            ]
          }
        ]
      },
      "base type": {
        "axiom": {
          "subClassOf": [
            "datatype role"
          ],
          "propertyRestrictions": [
            "[role_of some datatype]",
            "[is_member_of some (array datatype or sequence datatype or bag datatype or set datatype or extended datatype)]"
          ]
        },
        "description": "base type is defined as a subclass of datatype role. Any instance of base type must fulfill two key conditions: it must have a relationship 'role_of' to at least one datatype, and it must be a member of at least one complex datatype—specifically, an array datatype, sequence datatype, bag datatype, set datatype, or extended datatype. This formalization ensures that base type instances are foundational datatypes actively participating in, and forming members of, various structured or composite datatypes.",
        "CQ": [
          {
            "axiom": "base type subClassOf datatype role",
            "CQ": [
              "Is base type categorized as a subclass under datatype role?",
              "Which types are encompassed within the datatype role class, including base type?",
              "What broader datatype role classes does base type fall under?"
            ]
          },
          {
            "axiom": "base type propertyRestrictions [role_of some datatype]",
            "CQ": [
              "Is it required that base type always has the property propertyRestrictions with at least one value of role_of?",
              "Can every instance of base type be associated with propertyRestrictions only if it involves some role_of datatype?",
              "Does the existence of propertyRestrictions on base type guarantee the involvement of role_of datatype?"
            ]
          },
          {
            "axiom": "base type propertyRestrictions [is_member_of some (array datatype or sequence datatype or bag datatype or set datatype or extended datatype)]",
            "CQ": [
              "Is it required that every base type with property restrictions is a member of at least one of array, sequence, bag, set, or extended datatypes?",
              "Can a base type propertyRestrictions instance exist that is not associated with any of the array, sequence, bag, set, or extended datatypes?",
              "Does the membership of base type propertyRestrictions always include at least one datatype from array, sequence, bag, set, or extended?"
            ]
          }
        ]
      },
      "boolean field-list": {
        "axiom": {
          "subClassOf": [
            "field-list"
          ],
          "disjointWith": [
            "discrete field-list"
          ],
          "propertyRestrictions": [
            "[has_member some boolean field component]"
          ]
        },
        "description": "boolean field-list is a subclass of field-list and is explicitly disjoint with discrete field-list, ensuring no instance can be both a boolean field-list and a discrete field-list. Every boolean field-list must include at least one member that is a boolean field component, establishing that the primary distinguishing feature of this class is the presence of boolean field components among its members.",
        "CQ": [
          {
            "axiom": "boolean field-list subClassOf field-list",
            "CQ": [
              "Is boolean field-list included as a subtype under field-list?",
              "What specific variants are classified as field-list, including boolean field-list?",
              "Which general categories does boolean field-list fall under within the ontology?"
            ]
          },
          {
            "axiom": "boolean field-list disjointWith discrete field-list",
            "CQ": [
              "How does the ontology differentiate boolean field-list from discrete field-list?",
              "Is there a scenario where a field-list instance can be both boolean and discrete?",
              "Which field-list types are declared as mutually exclusive with boolean field-list?"
            ]
          },
          {
            "axiom": "boolean field-list propertyRestrictions [has_member some boolean field component]",
            "CQ": [
              "Is every instance of 'field-list' required to have at least one 'has_member' relationship to a 'field component'?",
              "Could a 'field-list' exist without being associated with any 'field component' through the 'has_member' property?",
              "Must a 'field-list' always include some entity classified as a 'field component' via the 'has_member' property?"
            ]
          }
        ]
      },
      "labeled dataset field-list": {
        "axiom": {
          "subClassOf": [
            "field-list"
          ],
          "propertyRestrictions": [
            "[has_member some labeled dataset target field component]",
            "[has_member some labeled dataset descriptive field component]"
          ]
        },
        "description": "labeled dataset field-list is defined as a subclass of field-list that must contain at least one member that is a labeled dataset target field component and at least one member that is a labeled dataset descriptive field component. This structure ensures that any labeled dataset field-list necessarily includes both target and descriptive components, reflecting the typical schema of labeled datasets where descriptive fields provide input features and target fields represent outputs or labels.",
        "CQ": [
          {
            "axiom": "labeled dataset field-list subClassOf field-list",
            "CQ": [
              "Is labeled dataset field-list classified under the broader field-list category?",
              "What specific types are encompassed by field-list, including labeled dataset field-list?",
              "Which higher-level categories include labeled dataset field-list as a member?"
            ]
          },
          {
            "axiom": "labeled dataset field-list propertyRestrictions [has_member some labeled dataset target field component]",
            "CQ": [
              "Is it required for a labeled dataset field-list to have at least one has_member relation to a labeled dataset target field component?",
              "Can every labeled dataset field-list include members other than labeled dataset target field components?",
              "Does the property restriction on labeled dataset field-list ensure that its has_member property always relates to at least one labeled dataset target field component?"
            ]
          },
          {
            "axiom": "labeled dataset field-list propertyRestrictions [has_member some labeled dataset descriptive field component]",
            "CQ": [
              "Must every labeled dataset include at least one member that is a labeled dataset descriptive field component?",
              "Does a labeled dataset necessarily have a 'has_member' relationship with at least one labeled dataset descriptive field component?",
              "Is it required for every labeled dataset to possess a field that is classified as a labeled dataset descriptive field component?"
            ]
          }
        ]
      },
      "niladic operation": {
        "axiom": {
          "subClassOf": [
            "characterizing operation"
          ],
          "disjointWith": [
            "monadic operation",
            "n-adic operation"
          ]
        },
        "description": "niladic operation is defined as a subclass of characterizing operation and is explicitly disjoint with both monadic operation and n-adic operation, ensuring that an operation cannot simultaneously belong to these classes. Niladic operations are characterized by yielding values of a given datatype, typically without requiring any input arguments.",
        "CQ": [
          {
            "axiom": "niladic operation subClassOf characterizing operation",
            "CQ": [
              "Is every niladic operation included in the set of characterizing operations?",
              "Which operations fall under the category of characterizing operation, specifically including niladic operation?",
              "What broader operation categories does niladic operation belong to within the ontology?"
            ]
          },
          {
            "axiom": "niladic operation disjointWith monadic operation",
            "CQ": [
              "How are niladic operations and monadic operations conceptually differentiated within the ontology?",
              "Is there any operation that can be classified as both niladic and monadic?",
              "Which operation types are explicitly specified as incompatible with monadic operations?"
            ]
          },
          {
            "axiom": "niladic operation disjointWith n-adic operation",
            "CQ": [
              "How are niladic operation and n-adic operation distinguished in the ontology?",
              "Is any operation classified as both a niladic operation and an n-adic operation?",
              "Which operation classes are asserted as disjoint with n-adic operation?"
            ]
          }
        ]
      },
      "discrete-value-list": {
        "axiom": {
          "subClassOf": [
            "list specification"
          ],
          "propertyRestrictions": [
            "[has_member some discrete-value identifier]"
          ]
        },
        "description": "discrete-value-list is defined as a subclass of list specification. Every instance of discrete-value-list must have at least one member that is a discrete-value identifier. This formalization ensures that all discrete-value-lists are specifically collections containing discrete-value identifiers as elements, distinguishing them from other types of lists.",
        "CQ": [
          {
            "axiom": "discrete-value-list subClassOf list specification",
            "CQ": [
              "Is discrete-value-list categorized under list specification in the ontology?",
              "Which types fall under the class of list specification, such as discrete-value-list?",
              "What broader classifications encompass discrete-value-list within the ontology?"
            ]
          },
          {
            "axiom": "discrete-value-list propertyRestrictions [has_member some discrete-value identifier]",
            "CQ": [
              "Is it required that a discrete-value-list always contains at least one member of type discrete-value identifier?",
              "Can a discrete-value-list exist without having any has_member relationship to a discrete-value identifier?",
              "Does the presence of a has_member relationship to a discrete-value identifier define the membership criteria for discrete-value-list?"
            ]
          }
        ]
      },
      "defined datatype parameter-list": {
        "axiom": {
          "subClassOf": [
            "list specification"
          ],
          "propertyRestrictions": [
            "[has_member some defined datatype parameter]"
          ]
        },
        "description": "defined datatype parameter-list is a subclass of list specification. Each instance of this class is required to have at least one member that is a defined datatype parameter. This formally specifies that any defined datatype parameter-list consists of, or includes, defined datatype parameters as its elements.",
        "CQ": [
          {
            "axiom": "defined datatype parameter-list subClassOf list specification",
            "CQ": [
              "Does defined datatype parameter-list fall under the broader classification of list specification?",
              "Which types are categorized as list specification, specifically including defined datatype parameter-list?",
              "What higher-level classes encompass defined datatype parameter-list in the ontology?"
            ]
          },
          {
            "axiom": "defined datatype parameter-list propertyRestrictions [has_member some defined datatype parameter]",
            "CQ": [
              "Is it required for a parameter-list to have at least one has_member relationship with a defined datatype parameter?",
              "Can a parameter-list exist without including any defined datatype parameter as a member?",
              "Does every instance of parameter-list necessarily possess a has_member link with some defined datatype parameter?"
            ]
          }
        ]
      },
      "index-type list": {
        "axiom": {
          "subClassOf": [
            "list specification"
          ],
          "propertyRestrictions": [
            "[has_member some index-type]"
          ]
        },
        "description": "index-type list is a subclass of list specification, defined as a collection that has at least one member of type index-type. This means any instance of index-type list must contain one or more elements that are classified as index-type.",
        "CQ": [
          {
            "axiom": "index-type list subClassOf list specification",
            "CQ": [
              "Does an index-type list fall under the general classification of list specification?",
              "Which list types are explicitly defined as subclasses of list specification, including index-type list?",
              "To what broader specifications does index-type list belong within the list ontology?"
            ]
          },
          {
            "axiom": "index-type list propertyRestrictions [has_member some index-type]",
            "CQ": [
              "Must an index-type list always include at least one member that is an index-type?",
              "Can an index-type list be valid if it does not have any member of type index-type?",
              "Is every index-type list required to have the has_member property relating it to an index-type individual?"
            ]
          }
        ]
      },
      "tree datatype generator": {
        "axiom": {
          "subClassOf": [
            "directed labeled graph datatype generator"
          ],
          "disjointWith": [
            "DAG datatype generator"
          ]
        },
        "description": "tree datatype generator is defined as a subclass of directed labeled graph datatype generator, meaning it inherits all structural properties of directed labeled graphs. Additionally, it is explicitly disjoint with DAG datatype generator, indicating that no datatype generator can be both a tree and a directed acyclic graph (DAG) generator at the same time. This class represents datatype generators that output trees, which are specialized directed labeled graphs, ensuring a clear distinction from generators that produce more general acyclic structures.",
        "CQ": [
          {
            "axiom": "tree datatype generator subClassOf directed labeled graph datatype generator",
            "CQ": [
              "Is tree datatype generator categorized under directed labeled graph datatype generator?",
              "Which specific datatype generators are classified as subtypes of directed labeled graph datatype generator?",
              "Within which broader datatype generator types does tree datatype generator fit?"
            ]
          },
          {
            "axiom": "tree datatype generator disjointWith DAG datatype generator",
            "CQ": [
              "What is the ontological distinction between tree datatype generators and DAG datatype generators?",
              "Is there any entity categorized under both tree datatype generator and DAG datatype generator?",
              "Which classes are declared as disjoint with DAG datatype generator in the ontology?"
            ]
          }
        ]
      },
      "scaled datatype": {
        "axiom": {
          "subClassOf": [
            "numeric ordered primitive datatype"
          ],
          "disjointWith": [
            "integer datatype",
            "rational datatype"
          ],
          "propertyRestrictions": [
            "[has_quality some unbounded]",
            "[has_operation some Divide:scaled]",
            "[has_operation some InOrder:scaled]",
            "[has_operation some Multiply:scaled]",
            "[has_member some scaled radix]",
            "[has_quality some exact]",
            "[has_operation some Negate:scaled]",
            "[has_operation some Round:scaled]",
            "[has_operation some Add:scaled]",
            "[has_member some scaled factor]",
            "[has_operation some Equal:scaled]"
          ]
        },
        "description": "scaled datatype is defined as a subclass of numeric ordered primitive datatype and is disjoint with both integer datatype and rational datatype, meaning it cannot overlap with these types. Members of the scaled datatype class must possess qualities such as being unbounded and exact, and must have members including scaled radix and scaled factor. They also support a defined set of operations, including divide, multiply, add, round, negate, equal, and in-order comparisons, all specific to the scaled datatype. This formalization distinguishes scaled datatype as a numeric primitive that facilitates arithmetic and ordering operations based on scaling factors, but is neither a traditional integer nor a rational type.",
        "CQ": [
          {
            "axiom": "scaled datatype subClassOf numeric ordered primitive datatype",
            "CQ": [
              "Does scaled datatype belong to the broader class of numeric ordered primitive datatypes?",
              "Which datatypes are specializations of numeric ordered primitive datatype, such as scaled datatype?",
              "What superordinate datatype categories does scaled datatype fit under?"
            ]
          },
          {
            "axiom": "scaled datatype disjointWith integer datatype",
            "CQ": [
              "What is the ontological separation between scaled datatypes and integer datatypes?",
              "Can a datatype be classified simultaneously as both a scaled datatype and an integer datatype?",
              "Which datatype classes are defined as mutually exclusive with integer datatypes?"
            ]
          },
          {
            "axiom": "scaled datatype disjointWith rational datatype",
            "CQ": [
              "What ontological distinction is specified between scaled datatypes and rational datatypes?",
              "Is any datatype instance allowed to be classified as both scaled and rational?",
              "Which datatypes are specified as mutually exclusive with rational datatypes in the ontology?"
            ]
          },
          {
            "axiom": "scaled datatype propertyRestrictions [has_quality some unbounded]",
            "CQ": [
              "Is it required that every scaled datatype possesses at least one 'has_quality' relationship to an unbounded value?",
              "Can a scaled datatype exist without having the 'has_quality' property linking to something that is unbounded?",
              "Does the axiom entail that the property 'has_quality' on scaled datatypes must reference at least one entity that is unbounded?"
            ]
          },
          {
            "axiom": "scaled datatype propertyRestrictions [has_operation some Divide:scaled]",
            "CQ": [
              "Is every instance in the relevant class required to participate in at least one 'has_operation' relationship with an entity of type Divide:scaled?",
              "Does the ontology specify that having a 'has_operation' relation with Divide:scaled is mandatory for the defined concept?",
              "Can an individual lacking any 'has_operation' linkage to Divide:scaled still be considered a valid member of the target class?"
            ]
          },
          {
            "axiom": "scaled datatype propertyRestrictions [has_operation some InOrder:scaled]",
            "CQ": [
              "Is it required that every instance within 'scaled' has at least one 'has_operation' relationship to an instance of 'InOrder:scaled'?",
              "Does the 'scaled' class necessarily involve performing an operation classified as 'InOrder:scaled'?",
              "For an entity to be categorized under 'scaled', must it exhibit the 'has_operation' property with a value from the 'InOrder:scaled' class?"
            ]
          },
          {
            "axiom": "scaled datatype propertyRestrictions [has_operation some Multiply:scaled]",
            "CQ": [
              "Is every instance associated with 'scaled' required to have at least one 'has_operation' relation to a 'Multiply:scaled' entity?",
              "Can an instance that lacks any 'has_operation' link to 'Multiply:scaled' still be classified as 'scaled'?",
              "Does the scope of 'scaled' entail that it must participate in some 'has_operation' relationship with 'Multiply:scaled'?"
            ]
          },
          {
            "axiom": "scaled datatype propertyRestrictions [has_member some scaled radix]",
            "CQ": [
              "Is it necessary for an entity with scaled datatype property restrictions to have at least one member related by 'has_member' to a scaled radix?",
              "Does the restriction imply that all instances must possess the property 'has_member' linked to some scaled radix value?",
              "Can an individual lacking a 'has_member' relationship to any scaled radix be considered compliant with the scaled datatype property restrictions?"
            ]
          },
          {
            "axiom": "scaled datatype propertyRestrictions [has_quality some exact]",
            "CQ": [
              "Is it required that entities with a scaled datatype have at least one 'has_quality' relationship to 'exact'?",
              "Can a scaled datatype exist without possessing the 'has_quality' property with value 'exact'?",
              "Do all instances of scaled datatype necessarily exhibit the quality specified as 'exact'?"
            ]
          },
          {
            "axiom": "scaled datatype propertyRestrictions [has_operation some Negate:scaled]",
            "CQ": [
              "Must every instance of propertyRestrictions have at least one has_operation relationship to a Negate operation of type scaled?",
              "Is it required that propertyRestrictions are associated with some has_operation involving Negate applied to scaled entities?",
              "Can an instance of propertyRestrictions exist without participating in a has_operation with a Negate:scaled element?"
            ]
          },
          {
            "axiom": "scaled datatype propertyRestrictions [has_operation some Round:scaled]",
            "CQ": [
              "Is it required that every scaled entity must participate in at least one 'has_operation' relationship with an individual from the class Round:scaled?",
              "Does a scaled entity always have some operation that is associated with an instance of Round:scaled?",
              "Must there exist a 'has_operation' link from every instance of scaled to something in Round:scaled?"
            ]
          },
          {
            "axiom": "scaled datatype propertyRestrictions [has_operation some Add:scaled]",
            "CQ": [
              "Is it required that every instance with propertyRestrictions must have the 'has_operation' property relating to at least one Add:scaled entity?",
              "Are all entities described by propertyRestrictions ensured to participate in a 'has_operation' relationship with a member of Add:scaled?",
              "Does the ontology necessitate that propertyRestrictions only apply if there is a connection via 'has_operation' to an Add:scaled element?"
            ]
          },
          {
            "axiom": "scaled datatype propertyRestrictions [has_member some scaled factor]",
            "CQ": [
              "Must every instance with a scaled datatype property involve at least one member related by the scaled factor?",
              "Is it required that entities possessing the scaled property have some association to a member through the scaled factor?",
              "Is the existence of a member connected by the scaled factor a necessary condition for the scaled property to apply?"
            ]
          },
          {
            "axiom": "scaled datatype propertyRestrictions [has_operation some Equal:scaled]",
            "CQ": [
              "Is it necessary for an entity with property restriction to have at least one 'has_operation' relationship to an instance of 'Equal:scaled'?",
              "Does every instance in the propertyRestrictions class require a 'has_operation' link to something classified as 'Equal:scaled'?",
              "Can a member of propertyRestrictions exist without any 'has_operation' relation to 'Equal:scaled'?"
            ]
          }
        ]
      },
      "rational datatype": {
        "axiom": {
          "subClassOf": [
            "numeric ordered primitive datatype"
          ],
          "propertyRestrictions": [
            "[has_operation some Multiply:rational]",
            "[has_operation some Reciprocal:rational]",
            "[has_quality some numeric]",
            "[has_operation some NonNegative:rational]",
            "[has_quality some ordered]",
            "[has_operation some Promote:rational]",
            "[has_operation some Equal:rational]",
            "[has_operation some Add:rational]",
            "[has_operation some Negate:rational]",
            "[has_quality some exact]",
            "[has_operation some InOrder:rational]",
            "[has_quality some unbounded]"
          ]
        },
        "description": "rational datatype is defined as a subclass of numeric ordered primitive datatype. It possesses several qualities: it is numeric, ordered, exact, and unbounded. Individuals in this class support a set of operations, including multiplication, addition, negation, equality testing, reciprocal, in-order comparison, non-negativity, and promotion. These characteristics collectively formalize the rational datatype as representing rational numbers that are precise, can be manipulated with various arithmetic operations, and do not have inherent bounds on size or value.",
        "CQ": [
          {
            "axiom": "rational datatype subClassOf numeric ordered primitive datatype",
            "CQ": [
              "Is rational datatype conceptually classified as a kind of numeric ordered primitive datatype?",
              "Which datatype categories include rational datatype as a more specific instance?",
              "What broader datatype categories encompass rational datatype?"
            ]
          },
          {
            "axiom": "rational datatype propertyRestrictions [has_operation some Multiply:rational]",
            "CQ": [
              "Must an instance of rational datatype necessarily possess at least one 'has_operation' relationship to Multiply:rational?",
              "Are all instances of rational datatype required to have a 'has_operation' link with an entity classified as Multiply:rational?",
              "Does the rational datatype always involve a connection through the 'has_operation' property to something of type Multiply:rational?"
            ]
          },
          {
            "axiom": "rational datatype propertyRestrictions [has_operation some Reciprocal:rational]",
            "CQ": [
              "Must every instance of \"datatype propertyRestrictions\" have at least one \"has_operation\" relationship with a \"Reciprocal:rational\"?",
              "Is it required that \"datatype propertyRestrictions\" entities possess the \"has_operation\" property linking them to a \"Reciprocal:rational\" instance?",
              "Can an individual classified as \"datatype propertyRestrictions\" exist without being associated via \"has_operation\" to \"Reciprocal:rational\"?"
            ]
          },
          {
            "axiom": "rational datatype propertyRestrictions [has_quality some numeric]",
            "CQ": [
              "Is every instance of rational required to have at least one 'has_quality' relation to a numeric value?",
              "Can a rational exist without being related by 'has_quality' to any numeric value?",
              "Does the ontology ensure that rational individuals possess some quality quantified by a numeric type?"
            ]
          },
          {
            "axiom": "rational datatype propertyRestrictions [has_operation some NonNegative:rational]",
            "CQ": [
              "Is it required that every instance with a rational datatype propertyRestriction must have at least one 'has_operation' relation to a NonNegative rational value?",
              "Can a rational datatype propertyRestriction exist without a 'has_operation' link to a NonNegative rational value?",
              "Does the definition of rational datatype propertyRestrictions permit values of 'has_operation' that are not NonNegative rationals?"
            ]
          },
          {
            "axiom": "rational datatype propertyRestrictions [has_quality some ordered]",
            "CQ": [
              "Does every rational entity necessarily have at least one quality that is ordered?",
              "Can a rational entity exist without the property 'has_quality' relating it to at least one ordered item?",
              "Is it required that rational entities be associated exclusively with qualities that are ordered?"
            ]
          },
          {
            "axiom": "rational datatype propertyRestrictions [has_operation some Promote:rational]",
            "CQ": [
              "Is it required that a rational datatype entity must participate in at least one 'has_operation' relationship with a Promote:rational instance?",
              "Does every rational datatype object have some association through 'has_operation' to an individual classified as Promote:rational?",
              "Can a rational datatype entity exist without having 'has_operation' linked to at least one Promote:rational?"
            ]
          },
          {
            "axiom": "rational datatype propertyRestrictions [has_operation some Equal:rational]",
            "CQ": [
              "Must every instance of rational have at least one has_operation relationship to an entity of type Equal:rational?",
              "Is it required that rational entities participate in some operation classified as Equal:rational?",
              "Does the existence of rational depend on the presence of a has_operation link to Equal:rational?"
            ]
          },
          {
            "axiom": "rational datatype propertyRestrictions [has_operation some Add:rational]",
            "CQ": [
              "Is it necessary for a rational datatype property restriction to involve at least one 'has_operation' relationship with 'Add:rational'?",
              "Does a rational datatype property restriction always include the 'has_operation' property linked to 'Add:rational'?",
              "Can a rational datatype property restriction exist without participating in 'has_operation' with 'Add:rational'?"
            ]
          },
          {
            "axiom": "rational datatype propertyRestrictions [has_operation some Negate:rational]",
            "CQ": [
              "Is every instance with a 'rational' datatype required to have at least one 'has_operation' relation to a 'Negate:rational' operation?",
              "Can a rational value exist without participating in any 'has_operation' with 'Negate:rational'?",
              "Does the ontology guarantee that the 'has_operation' property for 'rational' types always relates to a 'Negate:rational' operation?"
            ]
          },
          {
            "axiom": "rational datatype propertyRestrictions [has_quality some exact]",
            "CQ": [
              "Is it necessary for a rational datatype entity to possess the 'has_quality' property with some value classified as 'exact'?",
              "Can a rational datatype exist without having at least one 'has_quality' relationship to 'exact'?",
              "Does the definition of rational datatype require that every instance has at least one associated 'exact' quality via the 'has_quality' property?"
            ]
          },
          {
            "axiom": "rational datatype propertyRestrictions [has_operation some InOrder:rational]",
            "CQ": [
              "Is it required that rational datatype propertyRestrictions always involves at least one has_operation relation to an InOrder:rational?",
              "Can rational datatype propertyRestrictions exist without having any has_operation relationship to InOrder:rational?",
              "Does the presence of rational datatype propertyRestrictions guarantee the involvement of has_operation with some instance of InOrder:rational?"
            ]
          },
          {
            "axiom": "rational datatype propertyRestrictions [has_quality some unbounded]",
            "CQ": [
              "Is every instance with the rational datatype required to possess at least one quality via the 'has_quality' property?",
              "Can an entity of rational datatype have the 'has_quality' attribute associated with any type of quality without restriction?",
              "Does the rational datatype necessarily exhibit the existence of some related quality as described by the 'has_quality' property?"
            ]
          }
        ]
      },
      "exactness": {
        "axiom": {
          "subClassOf": [
            "datatype property"
          ],
          "disjointWith": [
            "numericalness",
            "cardinality",
            "order",
            "boundedness",
            "equality"
          ],
          "equivalentClass": [
            "(approximate or exact)"
          ]
        },
        "description": "exactness is defined as a subclass of datatype property and is explicitly disjoint from the classes numericalness, cardinality, order, boundedness, and equality—meaning no instance can belong to any of these classes simultaneously. Additionally, exactness is equivalent to the union of approximate or exact, capturing the notion that it characterizes properties specifying whether something is described with complete precision or approximation. This class formally distinguishes the aspect of being exact from other quantitative or structural datatype attributes.",
        "CQ": [
          {
            "axiom": "exactness subClassOf datatype property",
            "CQ": [
              "What properties are more specific than datatype property, such as exactness?",
              "Does exactness belong to the category of datatype property?",
              "Which general property types include exactness as a member?"
            ]
          },
          {
            "axiom": "exactness disjointWith numericalness",
            "CQ": [
              "How does the ontology distinguish between exactness and numericalness?",
              "Is any entity permitted to possess both exactness and numericalness characteristics simultaneously?",
              "Which classes, besides numericalness, are specified as disjoint with exactness?"
            ]
          },
          {
            "axiom": "exactness disjointWith cardinality",
            "CQ": [
              "What logical separation is asserted between exactness and cardinality within the ontology?",
              "Is there any entity that can simultaneously be classified as both exactness and cardinality?",
              "Which concepts are specified as mutually exclusive with cardinality?"
            ]
          },
          {
            "axiom": "exactness disjointWith order",
            "CQ": [
              "How are the concepts of exactness and order separated within the ontology?",
              "Is there any entity that can be simultaneously classified as exactness and order?",
              "Which classes are specified as incompatible with order in the ontology?"
            ]
          },
          {
            "axiom": "exactness disjointWith boundedness",
            "CQ": [
              "How does the ontology differentiate between exactness and boundedness?",
              "Can an entity possess both exactness and boundedness simultaneously?",
              "Which classes in the ontology are declared disjoint with boundedness?"
            ]
          },
          {
            "axiom": "exactness disjointWith equality",
            "CQ": [
              "How does the ontology characterize the separation between exactness and equality?",
              "Is any entity permitted to possess both exactness and equality properties simultaneously?",
              "What other classes or properties are specified as disjoint with exactness?"
            ]
          },
          {
            "axiom": "exactness equivalentClass (approximate or exact)",
            "CQ": [
              "Is exactness defined by the union of approximate and exact categories?",
              "Is every instance of exactness necessarily classified as either approximate or exact?",
              "Are there any examples of exactness that do not fall under approximate or exact?"
            ]
          }
        ]
      },
      "order": {
        "axiom": {
          "subClassOf": [
            "datatype property"
          ],
          "disjointWith": [
            "boundedness",
            "equality"
          ],
          "equivalentClass": [
            "(ordered or non-ordered)"
          ]
        },
        "description": "order is defined as a subclass of datatype property, meaning it is a specific kind of property whose value is a data value (as opposed to an object property). It is explicitly disjoint from the classes boundedness and equality, ensuring that no property instance can simultaneously be classified under these categories. Furthermore, order is equivalent to the union of ordered and non-ordered, indicating that any property that falls under the order class must be characterized as either ordered or non-ordered, and these two subclasses exhaust all possibilities for order. This structure formally differentiates order-related properties from those related to boundedness or equality.",
        "CQ": [
          {
            "axiom": "order subClassOf datatype property",
            "CQ": [
              "Is order classified as a datatype property in the ontology?",
              "Which datatype properties have order as a more specific subtype?",
              "What are the immediate superclasses of the property order?"
            ]
          },
          {
            "axiom": "order disjointWith boundedness",
            "CQ": [
              "What logical constraint separates order from boundedness within the ontology?",
              "Is any entity allowed to belong to both order and boundedness categories simultaneously?",
              "Which other concepts are formally specified as disjoint with boundedness?"
            ]
          },
          {
            "axiom": "order disjointWith equality",
            "CQ": [
              "How does the ontology formally differentiate order from equality?",
              "Is it allowable for a concept to be simultaneously classified under both order and equality categories?",
              "Which other mathematical properties are specified as disjoint with equality?"
            ]
          },
          {
            "axiom": "order equivalentClass (ordered or non-ordered)",
            "CQ": [
              "Is order defined as the union of ordered and non-ordered?",
              "Is every instance of order necessarily an ordered instance or a non-ordered instance?",
              "Are there any orders that do not belong to either the ordered or non-ordered categories?"
            ]
          }
        ]
      },
      "discrete field component": {
        "axiom": {
          "subClassOf": [
            "primitive field component"
          ],
          "disjointWith": [
            "real field component",
            "boolean field component"
          ],
          "propertyRestrictions": [
            "[role_of some discrete datatype]"
          ]
        },
        "description": "discrete field component is a subclass of primitive field component and is explicitly disjoint with both real field component and boolean field component, ensuring that no individual can be classified as more than one of these types. Members of this class are characterized by their relationship to discrete datatypes, as every discrete field component must play the role of some discrete datatype. This formalization distinguishes discrete field components from other primitive field components based on their association with discrete data.",
        "CQ": [
          {
            "axiom": "discrete field component subClassOf primitive field component",
            "CQ": [
              "Is discrete field component classified as a type of primitive field component?",
              "Which components fall under the category of primitive field component, specifically those more specific like discrete field component?",
              "What broader categories encompass discrete field component within their taxonomy?"
            ]
          },
          {
            "axiom": "discrete field component disjointWith real field component",
            "CQ": [
              "Are any entities defined as both discrete field components and real field components?",
              "Which ontology classes are explicitly incompatible with real field components?",
              "What type of exclusivity exists between discrete field components and real field components?"
            ]
          },
          {
            "axiom": "discrete field component disjointWith boolean field component",
            "CQ": [
              "How does the ontology express the separation between discrete field components and boolean field components?",
              "Is any field component allowed to be both a discrete field component and a boolean field component?",
              "Which classes are identified as mutually exclusive to discrete field components?"
            ]
          },
          {
            "axiom": "discrete field component propertyRestrictions [role_of some discrete datatype]",
            "CQ": [
              "Must every discrete field component necessarily play the role of some discrete datatype?",
              "Is it required for a discrete field component to be related via 'role_of' to at least one discrete datatype?",
              "Does the definition ensure that discrete field component is linked by 'role_of' to at least one entity classified as a discrete datatype?"
            ]
          }
        ]
      },
      "pointer datatype": {
        "axiom": {
          "subClassOf": [
            "non-aggregate datatype"
          ],
          "propertyRestrictions": [
            "[has_quality some non-ordered]",
            "[has_quality some non-numeric]",
            "[has_member some pointer generator]",
            "[has_member some pointer-element-type]",
            "[has_operation some Equal:pointer]",
            "[has_operation some Dereference:pointer]",
            "[has_quality some exact]"
          ]
        },
        "description": "pointer datatype is a subclass of non-aggregate datatype, whose values act as references to values of another datatype (the element datatype), and each value is atomic. Members of this class are characterized by possessing non-ordered and non-numeric qualities, and have “exact” as a quality. Additionally, every pointer datatype must have members corresponding to a pointer generator and a pointer-element-type, along with operations for equality (Equal:pointer) and dereferencing (Dereference:pointer). This formalization ensures that pointers are distinct, reference-capable datatypes with well-defined generative and operational properties but are not ordered or numeric collections.",
        "CQ": [
          {
            "axiom": "pointer datatype subClassOf non-aggregate datatype",
            "CQ": [
              "Is pointer datatype encompassed by the category of non-aggregate datatype?",
              "Which datatypes are classified as more specific types under non-aggregate datatype, including pointer datatype?",
              "To what broader datatype categories does pointer datatype belong?"
            ]
          },
          {
            "axiom": "pointer datatype propertyRestrictions [has_quality some non-ordered]",
            "CQ": [
              "Is it necessary for a pointer to possess the 'has_quality' property with some value from the class 'non-ordered'?",
              "Does every pointer necessarily have at least one 'has_quality' relationship to a 'non-ordered' entity?",
              "Are there any pointers that do not have 'has_quality' related to 'non-ordered'?"
            ]
          },
          {
            "axiom": "pointer datatype propertyRestrictions [has_quality some non-numeric]",
            "CQ": [
              "Is every pointer required to have at least one quality that is non-numeric?",
              "Can a pointer exist without possessing a non-numeric quality via the has_quality property?",
              "Does the ontology specify that pointers must be associated with some non-numeric quality through has_quality?"
            ]
          },
          {
            "axiom": "pointer datatype propertyRestrictions [has_member some pointer generator]",
            "CQ": [
              "Is every pointer required to have at least one member that is a pointer generator?",
              "Does the existence of a pointer imply the existence of a has_member relationship with a pointer generator?",
              "Can any pointer exist without having a member of type pointer generator?"
            ]
          },
          {
            "axiom": "pointer datatype propertyRestrictions [has_member some pointer-element-type]",
            "CQ": [
              "Is it necessary for pointer to have at least one has_member relationship with a pointer-element-type?",
              "Can a pointer exist without referencing any element of pointer-element-type through has_member?",
              "Does every pointer require some association, via has_member, to a value classified as pointer-element-type?"
            ]
          },
          {
            "axiom": "pointer datatype propertyRestrictions [has_operation some Equal:pointer]",
            "CQ": [
              "Is every instance of pointer required to have at least one has_operation relationship with an individual of type Equal:pointer?",
              "Must a pointer necessarily be associated with an Equal:pointer entity through the has_operation property?",
              "Can a pointer exist without having has_operation linked to any Equal:pointer?"
            ]
          },
          {
            "axiom": "pointer datatype propertyRestrictions [has_operation some Dereference:pointer]",
            "CQ": [
              "Is it required that every pointer is associated via 'has_operation' with at least one Dereference:pointer operation?",
              "Can a pointer exist without having any 'has_operation' relationship to a Dereference:pointer?",
              "Does the presence of a Dereference:pointer operation fulfill the property restriction imposed on the 'has_operation' relationship for pointers?"
            ]
          },
          {
            "axiom": "pointer datatype propertyRestrictions [has_quality some exact]",
            "CQ": [
              "Is it required that a pointer possess the 'has_quality' property with at least one instance of 'exact'?",
              "Can any pointer be without a 'has_quality' relation to 'exact'?",
              "Is every pointer necessarily associated with an 'exact' value via the 'has_quality' property?"
            ]
          }
        ]
      },
      "tree datatype": {
        "axiom": {
          "subClassOf": [
            "labeled graph datatype"
          ],
          "disjointWith": [
            "DAG datatype"
          ],
          "propertyRestrictions": [
            "[has_member some tree datatype generator]"
          ]
        },
        "description": "tree datatype is defined as a subclass of labeled graph datatype, ensuring that every tree datatype inherits all structural features of labeled graph datatypes. It is explicitly disjoint with DAG datatype, meaning no instance can simultaneously belong to both classes. Additionally, every member of the tree datatype class must have at least one associated tree datatype generator, as specified by the property restriction. This formalization captures tree datatypes as hierarchical, non-cyclic structures generated by specific mechanisms and distinct from more general directed acyclic graphs.",
        "CQ": [
          {
            "axiom": "tree datatype subClassOf labeled graph datatype",
            "CQ": [
              "Is tree datatype classified under the group of labeled graph datatypes?",
              "Which datatypes are considered more specific instances of labeled graph datatype, including tree datatype?",
              "To which broader datatype categories does tree datatype belong?"
            ]
          },
          {
            "axiom": "tree datatype disjointWith DAG datatype",
            "CQ": [
              "What logical separation is specified between tree datatype and DAG datatype in the ontology?",
              "Is any structure permitted to be classified as both tree datatype and DAG datatype?",
              "Which datatypes are set as disjoint with DAG datatype?"
            ]
          },
          {
            "axiom": "tree datatype propertyRestrictions [has_member some tree datatype generator]",
            "CQ": [
              "Is it required that a tree datatype property restriction always involves at least one has_member relation to a tree datatype generator?",
              "Can a tree datatype property restriction exist without relating via has_member to any tree datatype generator?",
              "Does every tree datatype property restriction necessarily specify the presence of a has_member property with a tree datatype generator?"
            ]
          }
        ]
      },
      "lower bound": {
        "axiom": {
          "subClassOf": [
            "bound"
          ],
          "propertyRestrictions": [
            "[has-value exactly 1 xsd:integer]"
          ]
        },
        "description": "lower bound is defined as a subclass of bound, representing a specific type of bound that is associated with exactly one integer value via the has-value property. This restriction ensures that each lower bound instance is uniquely identified by a single integer.",
        "CQ": [
          {
            "axiom": "lower bound subClassOf bound",
            "CQ": [
              "Is lower bound categorized as a type of bound?",
              "Which specific subclasses fall under the general class bound?",
              "What broader classes encompass lower bound?"
            ]
          },
          {
            "axiom": "lower bound propertyRestrictions [has-value exactly 1 xsd:integer]",
            "CQ": [
              "Is there a requirement that lower bound has exactly one propertyRestriction with a value of type xsd:integer?",
              "Can an instance of lower bound have more than one propertyRestriction with a value of type xsd:integer?",
              "Is it possible for lower bound to have no propertyRestriction with a value of type xsd:integer?"
            ]
          }
        ]
      },
      "index lowerbound": {
        "axiom": {
          "subClassOf": [
            "bound"
          ],
          "propertyRestrictions": [
            "[has-value exactly 1 xsd:integer]"
          ]
        },
        "description": "index lowerbound is a subclass of bound, representing a specific type of boundary. It is characterized by the property restriction that it must have exactly one value of type xsd:integer, indicating the precise lower limit or starting point within an index or range. This formalization ensures that each instance of index lowerbound uniquely defines a single integer value as its boundary.",
        "CQ": [
          {
            "axiom": "index lowerbound subClassOf bound",
            "CQ": [
              "Does index lowerbound fall under the category of bound?",
              "What concepts are classified as subclasses of bound, such as index lowerbound?",
              "Which broader categories include index lowerbound as a member?"
            ]
          },
          {
            "axiom": "index lowerbound propertyRestrictions [has-value exactly 1 xsd:integer]",
            "CQ": [
              "Is each instance of index required to have the property lowerbound with exactly one integer value?",
              "Can an index possess more than one lowerbound value assigned as an integer?",
              "Is it necessary that the lowerbound property of index refers to one and only one xsd:integer?"
            ]
          }
        ]
      },
      "defined generator": {
        "axiom": {
          "subClassOf": [
            "datatype generator"
          ],
          "propertyRestrictions": [
            "[is_member_of some defined datatype]"
          ]
        },
        "description": "defined generator is a subclass of datatype generator. Every instance of defined generator is required to be associated with at least one defined datatype through the property is_member_of. This formalization ensures that defined generators are specifically linked to defined datatypes within the ontology.",
        "CQ": [
          {
            "axiom": "defined generator subClassOf datatype generator",
            "CQ": [
              "Is every defined generator classified under the datatype generator category?",
              "What specific types belong to the broader class of datatype generator, such as defined generator?",
              "Which overarching groups does defined generator fall within according to the classification?"
            ]
          },
          {
            "axiom": "defined generator propertyRestrictions [is_member_of some defined datatype]",
            "CQ": [
              "Is it necessary for a generator to have the property 'is_member_of' with at least one defined datatype?",
              "Can a generator exist without being a member of any defined datatype?",
              "Does a generator always possess an association to some defined datatype through the 'is_member_of' property?"
            ]
          }
        ]
      },
      "real base type": {
        "axiom": {
          "subClassOf": [
            "base type"
          ],
          "propertyRestrictions": [
            "[role_of some real datatype]"
          ]
        },
        "description": "real base type is defined as a subclass of base type, with the additional restriction that every real base type must serve as the role_of some real datatype. This means that any individual belonging to real base type participates in the role_of property relation to at least one real datatype, thereby explicitly connecting real base type to the real datatype concept within the ontology structure.",
        "CQ": [
          {
            "axiom": "real base type subClassOf base type",
            "CQ": [
              "Does real base type fall under the classification of base type?",
              "Which types are directly specified as specializations of base type, such as real base type?",
              "What is the immediate superclass of real base type within the type hierarchy?"
            ]
          },
          {
            "axiom": "real base type propertyRestrictions [role_of some real datatype]",
            "CQ": [
              "Is it necessary for a real base type to have the property 'role_of' with at least one real datatype?",
              "Which kinds of real datatypes must be associated with real base types through the 'role_of' property?",
              "Can a real base type exist without having a 'role_of' relationship to any real datatype?"
            ]
          }
        ]
      },
      "record of real datatype": {
        "axiom": {
          "subClassOf": [
            "record (tuple) datatype"
          ],
          "disjointWith": [
            "record of discrete datatype"
          ],
          "propertyRestrictions": [
            "[has_member some real field-list]"
          ]
        },
        "description": "record of real datatype is defined as a subclass of record (tuple) datatype, and is explicitly disjoint with record of discrete datatype, ensuring that no individual can belong to both categories. Members of this class are characterized by the presence of at least one member field (has_member) that is of real type within its field-list. This constrains records in this class to contain real-valued data fields, distinguishing them from records composed entirely of discrete datatypes.",
        "CQ": [
          {
            "axiom": "record of real datatype subClassOf record (tuple) datatype",
            "CQ": [
              "Is the record of real datatype classified under the general record (tuple) datatype category?",
              "Which datatypes are narrower concepts encompassed by record (tuple) datatype, such as record of real datatype?",
              "To which parent datatype categories does record of real datatype belong?"
            ]
          },
          {
            "axiom": "record of real datatype disjointWith record of discrete datatype",
            "CQ": [
              "How does the ontology differentiate between records of real datatype and records of discrete datatype?",
              "Is there any instance that can be considered both a record of real datatype and a record of discrete datatype?",
              "Which other record types are formally specified as disjoint with records of discrete datatype?"
            ]
          },
          {
            "axiom": "record of real datatype propertyRestrictions [has_member some real field-list]",
            "CQ": [
              "Is it required that a record in this context must have at least one member associated with the real field-list through the has_member property?",
              "Can a record exist without being related to any real field-list via the has_member property?",
              "Does every record necessarily participate in some has_member relationship with an instance of the real field-list?"
            ]
          }
        ]
      },
      "labeled dataset record datatype": {
        "axiom": {
          "subClassOf": [
            "record (tuple) datatype"
          ],
          "propertyRestrictions": [
            "[has_member exactly 1 labeled dataset field-list]"
          ]
        },
        "description": "labeled dataset record datatype is defined as a subclass of record (tuple) datatype. Each instance must have exactly one member, specified by the has_member property, which must be a labeled dataset field-list. This ensures that every labeled dataset record datatype represents a tuple structure with a precisely defined schema for its contents.",
        "CQ": [
          {
            "axiom": "labeled dataset record datatype subClassOf record (tuple) datatype",
            "CQ": [
              "Is labeled dataset record datatype a more specific form of record (tuple) datatype?",
              "What types of datatypes are classified as subclasses under record (tuple) datatype?",
              "Which general datatype categories include labeled dataset record datatype?"
            ]
          },
          {
            "axiom": "labeled dataset record datatype propertyRestrictions [has_member exactly 1 labeled dataset field-list]",
            "CQ": [
              "Is it required that a labeled dataset record contains exactly one has_member property referring to a labeled dataset field-list?",
              "Can a labeled dataset record be associated with more than one labeled dataset field-list via has_member?",
              "Does a labeled dataset record exist if it lacks the has_member relationship with a labeled dataset field-list?"
            ]
          }
        ]
      },
      "set of real datatype": {
        "axiom": {
          "subClassOf": [
            "set datatype"
          ],
          "propertyRestrictions": [
            "[has_member some real base type]"
          ]
        },
        "description": "set of real datatype is defined as a subclass of set datatype, where every instance must contain at least one member of the real base type. This means that any set classified under this class necessarily includes real numbers among its elements, distinguishing it from other datatype sets whose members may be of different types.",
        "CQ": [
          {
            "axiom": "set of real datatype subClassOf set datatype",
            "CQ": [
              "Is the set of real datatype encompassed within the set datatype category?",
              "Which datatype classes are direct specializations of set datatype, such as set of real datatype?",
              "To which datatype hierarchies does set of real datatype belong?"
            ]
          },
          {
            "axiom": "set of real datatype propertyRestrictions [has_member some real base type]",
            "CQ": [
              "Is it required that the set includes at least one member of the real base type via the has_member property?",
              "Can any instance of the set exist without having a has_member relationship to a real base type individual?",
              "Does the definition of the set guarantee that there is at least one has_member property pointing to an individual of the real base type?"
            ]
          }
        ]
      },
      "non-aggregate datatype": {
        "axiom": {
          "subClassOf": [
            "generated datatype"
          ],
          "propertyRestrictions": [
            "[has_member some non-aggregate generator]"
          ]
        },
        "description": "non-aggregate datatype is defined as a subclass of generated datatype. All members of this class are characterized by the property restriction that they must have at least one member (has_member) that is a non-aggregate generator. This formalization ensures that any non-aggregate datatype is generated through or associated with at least one non-aggregate generator, distinguishing it from other types of generated datatypes.",
        "CQ": [
          {
            "axiom": "non-aggregate datatype subClassOf generated datatype",
            "CQ": [
              "Does every non-aggregate datatype belong under the category of generated datatype?",
              "Which datatypes are explicitly classified as specializations of generated datatype?",
              "To what higher-level datatype categories does non-aggregate datatype correspond?"
            ]
          },
          {
            "axiom": "non-aggregate datatype propertyRestrictions [has_member some non-aggregate generator]",
            "CQ": [
              "Is it required that a non-aggregate must have at least one member that is a non-aggregate generator?",
              "Can a non-aggregate exist without being associated with any non-aggregate generator through the has_member property?",
              "Does every instance of non-aggregate have a has_member relationship with some entity classified as a non-aggregate generator?"
            ]
          }
        ]
      },
      "ordinal datatype": {
        "axiom": {
          "subClassOf": [
            "non-numeric ordered primitive datatype"
          ],
          "propertyRestrictions": [
            "[has_operation some InOrder:ordinal]",
            "[has_quality some bounded below]",
            "[has_quality some unbounded above]",
            "[has_quality some ordered]",
            "[has_operation some Successor:ordinal]",
            "[has_operation some Equal:ordinal]",
            "[has_quality some non-numeric]",
            "[has_quality some exact]"
          ]
        },
        "description": "ordinal datatype is a subclass of non-numeric ordered primitive datatype. It is defined by possessing a set of operations and qualities: members must support operations such as \"InOrder\", \"Successor\", and \"Equal\" specific to ordinals. Ordinal datatypes are characterized by being ordered, exact, non-numeric in nature, and always bounded below but may be unbounded above. This constrains ordinal datatypes to those that allow clear ordering of their instances, with well-defined succession and equality, but without numeric interpretation.",
        "CQ": [
          {
            "axiom": "ordinal datatype subClassOf non-numeric ordered primitive datatype",
            "CQ": [
              "Is ordinal datatype encompassed within the general classification of non-numeric ordered primitive datatype?",
              "Which datatypes are more specialized forms of non-numeric ordered primitive datatype, including ordinal datatype?",
              "What higher-level categories can ordinal datatype be assigned to within the datatype hierarchy?"
            ]
          },
          {
            "axiom": "ordinal datatype propertyRestrictions [has_operation some InOrder:ordinal]",
            "CQ": [
              "Is it required that every instance with ordinal datatype property restrictions must have the 'has_operation' property associated with at least one value from the InOrder:ordinal set?",
              "Does the existence of 'has_operation' linking to InOrder:ordinal suffice for an instance to comply with the ordinal datatype property restrictions?",
              "Are instances with ordinal datatype property restrictions guaranteed to possess 'has_operation' relating specifically to some InOrder:ordinal value?"
            ]
          },
          {
            "axiom": "ordinal datatype propertyRestrictions [has_quality some bounded below]",
            "CQ": [
              "Is it required that every ordinal value possesses at least one quality that is bounded below?",
              "Must all instances related by has_quality to an ordinal datatype be bounded below in nature?",
              "Can an ordinal datatype have a quality that is not bounded below?"
            ]
          },
          {
            "axiom": "ordinal datatype propertyRestrictions [has_quality some unbounded above]",
            "CQ": [
              "Must every instance with an ordinal datatype property have at least one quality that is unbounded above?",
              "Is it required for entities with the 'has_quality' property to possess some quality that exhibits no upper bound in the ordinal scale?",
              "Are there cases where the 'has_quality' property can only be filled by qualities that are not restricted above in the ordinal ordering?"
            ]
          },
          {
            "axiom": "ordinal datatype propertyRestrictions [has_quality some ordered]",
            "CQ": [
              "Is it required that any entity with an ordinal datatype property possesses at least one quality classified as ordered?",
              "Can an object with an ordinal datatype property lack association with an ordered quality?",
              "Must the property 'has_quality' for entities using ordinal datatype always refer to some ordered quality?"
            ]
          },
          {
            "axiom": "ordinal datatype propertyRestrictions [has_operation some Successor:ordinal]",
            "CQ": [
              "Is it required that every ordinal has at least one operation relating it to a Successor ordinal?",
              "Does the property 'has_operation' for ordinals necessarily involve a relation to a Successor ordinal?",
              "Can there exist an ordinal that lacks a 'has_operation' link to any Successor ordinal?"
            ]
          },
          {
            "axiom": "ordinal datatype propertyRestrictions [has_operation some Equal:ordinal]",
            "CQ": [
              "Is it necessary for an entity with ordinal datatype property restrictions to have at least one operation involving equality on an ordinal value?",
              "Does every instance with ordinal datatype property restrictions participate in some operation that uses the 'Equal:ordinal' relation?",
              "Must entities constrained by ordinal datatype property restrictions be associated with a 'has_operation' involving an equal comparison on ordinals?"
            ]
          },
          {
            "axiom": "ordinal datatype propertyRestrictions [has_quality some non-numeric]",
            "CQ": [
              "Is every entity with an ordinal datatype required to have the property 'has_quality' with a non-numeric value?",
              "Must an ordinal datatype always be associated with some quality that is non-numeric via the 'has_quality' property?",
              "Can an ordinal datatype exist without possessing the 'has_quality' property relating to a non-numeric value?"
            ]
          },
          {
            "axiom": "ordinal datatype propertyRestrictions [has_quality some exact]",
            "CQ": [
              "Is every entity associated with a value for the property ‘has_quality’ that must be classified as ‘exact’?",
              "Must instances that possess the property ‘has_quality’ necessarily have it with the value ‘exact’?",
              "Are entities permitted to have any value other than ‘exact’ for their ‘has_quality’ property?"
            ]
          }
        ]
      },
      "datatype": {
        "axiom": {
          "subClassOf": [
            "data representational model"
          ],
          "propertyRestrictions": [
            "[has_quality some datatype property]",
            "[has_operation some characterizing operation]",
            "[has_attribute some value space]"
          ]
        },
        "description": "datatype is defined as a subclass of data representational model. Members of this class are characterized by three property restrictions: they possess at least one datatype property (has_quality some datatype property), are associated with at least one characterizing operation (has_operation some characterizing operation), and have at least one value space (has_attribute some value space). This formalization ensures that any individual classified as a datatype is a type of data representation distinguished by its qualities, the operations applicable to it, and its defined set of possible values.",
        "CQ": [
          {
            "axiom": "datatype subClassOf data representational model",
            "CQ": [
              "Is datatype categorized under the broader class of data representational model?",
              "Which subclasses constitute the data representational model class, such as datatype?",
              "Of which higher-level concepts is datatype an instance within the domain?"
            ]
          },
          {
            "axiom": "datatype propertyRestrictions [has_quality some datatype property]",
            "CQ": [
              "Is it a requirement that instances must have at least one 'has_quality' property with a value of the specified datatype?",
              "Are there any instances that lack the 'has_quality' property altogether under this restriction?",
              "Does the ontology allow an individual to have multiple 'has_quality' relationships with values of the defined datatype?"
            ]
          },
          {
            "axiom": "datatype propertyRestrictions [has_operation some characterizing operation]",
            "CQ": [
              "Is it required that every instance with datatype propertyRestrictions has at least one has_operation relationship to a characterizing operation?",
              "Can an entity described by datatype propertyRestrictions lack any has_operation link to a characterizing operation?",
              "Must characterizing operation be present under has_operation for any object satisfying datatype propertyRestrictions?"
            ]
          },
          {
            "axiom": "datatype propertyRestrictions [has_attribute some value space]",
            "CQ": [
              "Does every instance with 'has_attribute' necessarily have a value from the 'value space'?",
              "Is it required that the 'has_attribute' property for an entity be filled with at least one value that belongs to the specified value space?",
              "Can an individual be considered part of the class only if there exists a 'has_attribute' value within the defined value space?"
            ]
          }
        ]
      },
      "numeric ordered primitive datatype": {
        "axiom": {
          "subClassOf": [
            "numeric primitive datatype"
          ],
          "propertyRestrictions": [
            "[has_quality some ordered]"
          ]
        },
        "description": "numeric ordered primitive datatype is defined as a subclass of numeric primitive datatype, with the additional restriction that it must possess the quality of being ordered. This means that any datatype in this class is numeric by nature and supports an intrinsic ordering, enabling comparison between its members (e.g., less than, greater than relationships).",
        "CQ": [
          {
            "axiom": "numeric ordered primitive datatype subClassOf numeric primitive datatype",
            "CQ": [
              "Is numeric ordered primitive datatype one of the specific types classified under numeric primitive datatype?",
              "What datatypes fall under the broader category of numeric primitive datatype, such as numeric ordered primitive datatype?",
              "Which higher-level datatype categories include numeric ordered primitive datatype as a subclass?"
            ]
          },
          {
            "axiom": "numeric ordered primitive datatype propertyRestrictions [has_quality some ordered]",
            "CQ": [
              "Does every 'numeric ordered primitive datatype' instance have at least one 'has_quality' relation to an 'ordered' entity?",
              "Is it mandatory for a 'numeric ordered primitive datatype' to possess a 'has_quality' association with something that is 'ordered'?",
              "Can a 'numeric ordered primitive datatype' exist without being linked via 'has_quality' to any 'ordered' entity?"
            ]
          }
        ]
      },
      "sequence datatype": {
        "axiom": {
          "subClassOf": [
            "homogenous aggregate datatype with variable size"
          ],
          "disjointWith": [
            "homogenous  unordered aggregate datatype with variable size"
          ],
          "propertyRestrictions": [
            "[has_operation some Equal:sequence]",
            "[has_quality some exact]",
            "[has_operation some IsEmpty:sequence]",
            "[has_quality some non-ordered]",
            "[has_operation some Head:sequence]",
            "[has_quality some non-numeric]",
            "[has_member some base type]",
            "[has_operation some Append:sequence]",
            "[has_operation some Tail:sequence]",
            "[has_member some sequence generator]"
          ]
        },
        "description": "sequence datatype is defined as a subclass of homogenous aggregate datatype with variable size, and is explicitly disjoint with homogenous unordered aggregate datatype with variable size, ensuring no individual can belong to both classes. Members of this class are characterized by being non-ordered and non-numeric, containing only elements (members) of a base type and potentially a sequence generator. Sequence datatype supports several operations: checking for equality with another sequence, checking if the sequence is empty, retrieving the head (first element), appending elements, and retrieving the tail (all elements except the head). The inclusion of only these features signifies that sequence datatype represents an ordered, variable-sized, homogenous collection of elements with well-defined sequence-based operations.",
        "CQ": [
          {
            "axiom": "sequence datatype subClassOf homogenous aggregate datatype with variable size",
            "CQ": [
              "Is sequence datatype classified as a kind of homogenous aggregate datatype with variable size?",
              "Which datatypes are more specific variants under homogenous aggregate datatype with variable size, such as sequence datatype?",
              "To which higher-level datatype categories does sequence datatype belong?"
            ]
          },
          {
            "axiom": "sequence datatype disjointWith homogenous  unordered aggregate datatype with variable size",
            "CQ": [
              "What is the logical separation between sequence datatypes and homogenous unordered aggregate datatypes with variable size?",
              "Is there any datatype that can be classified as both a sequence datatype and a homogenous unordered aggregate datatype with variable size?",
              "Which other datatype categories are formally specified as disjoint with sequence datatypes?"
            ]
          },
          {
            "axiom": "sequence datatype propertyRestrictions [has_operation some Equal:sequence]",
            "CQ": [
              "Is it required that a sequence be associated with at least one operation of type Equal:sequence?",
              "Does every instance of sequence necessarily participate in the has_operation property with something classified as Equal:sequence?",
              "Can a sequence exist without having the has_operation property relating it to an Equal:sequence?"
            ]
          },
          {
            "axiom": "sequence datatype propertyRestrictions [has_quality some exact]",
            "CQ": [
              "Is it required that every Sequence possesses at least one quality which is classified as Exact?",
              "Can a Sequence exist that does not have the property 'has_quality' related to Exact?",
              "Is the association between Sequence and Exact enforced through the property 'has_quality' for all members of the Sequence class?"
            ]
          },
          {
            "axiom": "sequence datatype propertyRestrictions [has_operation some IsEmpty:sequence]",
            "CQ": [
              "Is every instance of sequence required to have at least one has_operation property relating to IsEmpty?",
              "Can a sequence exist without the has_operation property pointing to IsEmpty?",
              "Does the definition of sequence ensure an operation of type IsEmpty is necessarily associated with it?"
            ]
          },
          {
            "axiom": "sequence datatype propertyRestrictions [has_quality some non-ordered]",
            "CQ": [
              "Is every sequence required to possess at least one quality that is classified as non-ordered?",
              "Must a sequence have the 'has_quality' property relating it to a non-ordered characteristic?",
              "Can a sequence exist without having any 'has_quality' relationship to a non-ordered attribute?"
            ]
          },
          {
            "axiom": "sequence datatype propertyRestrictions [has_operation some Head:sequence]",
            "CQ": [
              "Must every instance of sequence participate in at least one has_operation relationship with an instance of Head:sequence?",
              "Is it required that a sequence has at least one 'has_operation' property linking it to something of type Head:sequence?",
              "Can a sequence exist without any has_operation connection to a Head:sequence individual?"
            ]
          },
          {
            "axiom": "sequence datatype propertyRestrictions [has_quality some non-numeric]",
            "CQ": [
              "Does every sequence have at least one 'has_quality' property relating it to a non-numeric value?",
              "Is the existence of a non-numeric quality mandatory for any instance classified as a sequence?",
              "Must sequences always possess some non-numeric quality via the 'has_quality' property?"
            ]
          },
          {
            "axiom": "sequence datatype propertyRestrictions [has_member some base type]",
            "CQ": [
              "Is every sequence required to include at least one member of the specified base type?",
              "Does a sequence always have the property 'has_member' relating it to an instance of its base type?",
              "Can a sequence exist if it does not have any member from the base type?"
            ]
          },
          {
            "axiom": "sequence datatype propertyRestrictions [has_operation some Append:sequence]",
            "CQ": [
              "Is it required for a sequence to participate in at least one 'has_operation' relationship with an instance of Append:sequence?",
              "Must every sequence be associated with the Append:sequence entity through the 'has_operation' property?",
              "Can a sequence exist in the ontology without the 'has_operation' property linking it to an Append:sequence?"
            ]
          },
          {
            "axiom": "sequence datatype propertyRestrictions [has_operation some Tail:sequence]",
            "CQ": [
              "Is it necessary for a sequence to have at least one operation that is a Tail sequence?",
              "Can a sequence exist without having any operation associated with a Tail sequence?",
              "Does every instance of sequence have the property 'has_operation' relating it to at least one Tail sequence?"
            ]
          },
          {
            "axiom": "sequence datatype propertyRestrictions [has_member some sequence generator]",
            "CQ": [
              "Must a sequence always have at least one member associated with a sequence generator?",
              "Is the existence of a sequence generator mandatory for any member of a sequence?",
              "Does every sequence necessarily require that at least one of its members is linked to a sequence generator?"
            ]
          }
        ]
      },
      "set datatype": {
        "axiom": {
          "subClassOf": [
            "homogenous  unordered aggregate datatype with variable size"
          ],
          "propertyRestrictions": [
            "[has_quality some non-ordered]",
            "[has_operation some Lsln:set]",
            "[has_operation some Intersection:set]",
            "[has_member some base type]",
            "[has_operation some SetOf:set]",
            "[has_member some set generator]",
            "[has_operation some Select:set]",
            "[has_operation some Equal:class]",
            "[has_quality some non-numeric]",
            "[has_quality some exact]",
            "[has_operation some Empty:set]",
            "[has_operation some Difference:set]",
            "[has_operation some Union:set]",
            "[has_operation some Subset:set]"
          ]
        },
        "description": "set datatype is a subclass of homogenous unordered aggregate datatype with variable size. It is characterized by being non-ordered, non-numeric, and exact. Individuals of this class have members that are of some base type or set generator and support operations such as set creation (Lsln:set), intersection, selection, equality checking, set construction (SetOf:set), checking emptiness (Empty:set), difference, union, and subset. This formalization reflects the mathematical concept of sets: collections consisting of distinct, unordered elements of the same type, with a well-defined suite of set-theoretic operations.",
        "CQ": [
          {
            "axiom": "set datatype subClassOf homogenous  unordered aggregate datatype with variable size",
            "CQ": [
              "Is set datatype classified as a specific kind of homogenous unordered aggregate datatype with variable size?",
              "Which datatype categories encompass set datatype as a more specialized form?",
              "What are the more specialized datatypes that fall under homogenous unordered aggregate datatype with variable size?"
            ]
          },
          {
            "axiom": "set datatype propertyRestrictions [has_quality some non-ordered]",
            "CQ": [
              "Must every instance that has 'has_quality' property possess at least one 'non-ordered' quality?",
              "Is it obligatory for an entity with the 'has_quality' relation to always be associated with some non-ordered attribute?",
              "Are there any entities for which the 'has_quality' property exists but does not connect to a non-ordered value?"
            ]
          },
          {
            "axiom": "set datatype propertyRestrictions [has_operation some Lsln:set]",
            "CQ": [
              "Is every instance of 'set' required to participate in at least one 'has_operation' relationship with an instance of 'Lsln:set'?",
              "Must a 'set' always have some 'has_operation' link to 'Lsln:set' entities within the scope of this ontology?",
              "Does the ontology specify that every 'set' is associated, via the 'has_operation' property, with at least one 'Lsln:set'?"
            ]
          },
          {
            "axiom": "set datatype propertyRestrictions [has_operation some Intersection:set]",
            "CQ": [
              "Must every instance with a 'set' have at least one 'has_operation' relationship to an entity of type 'Intersection:set'?",
              "Is it required for entities classified as 'set' to participate in the 'has_operation' property with some 'Intersection:set'?",
              "Does the ontology define that any 'set' must be associated via 'has_operation' with at least one instance belonging to 'Intersection:set'?"
            ]
          },
          {
            "axiom": "set datatype propertyRestrictions [has_member some base type]",
            "CQ": [
              "Is each set required to have at least one member from the base type through the has_member property?",
              "Does any instance of set necessarily possess the has_member property with some value of base type?",
              "For a given set, must there exist an association via has_member to an individual of base type?"
            ]
          },
          {
            "axiom": "set datatype propertyRestrictions [has_operation some SetOf:set]",
            "CQ": [
              "Is it required for every instance in 'set' to have at least one 'has_operation' relationship to an entity in 'SetOf:set'?",
              "Can a 'set' entity exist without any associated 'has_operation' to a member of 'SetOf:set'?",
              "Does the presence of a 'has_operation' link to an individual in 'SetOf:set' suffice for an entity to be recognized as part of the 'set' class?"
            ]
          },
          {
            "axiom": "set datatype propertyRestrictions [has_member some set generator]",
            "CQ": [
              "Is every instance of 'set' required to have at least one 'has_member' relationship to an instance of 'generator'?",
              "Must a 'set' necessarily include at least one 'generator' as a member via 'has_member'?",
              "Can an instance of 'set' exist without being linked to any 'generator' through the 'has_member' property?"
            ]
          },
          {
            "axiom": "set datatype propertyRestrictions [has_operation some Select:set]",
            "CQ": [
              "Is it necessary for an entity to have at least one 'has_operation' relationship with an instance of Select:set?",
              "Does every instance within the scope of this ontology perform at least one operation classified under Select:set?",
              "Can an individual possess the 'has_operation' property only if it is associated with the Select:set operation?"
            ]
          },
          {
            "axiom": "set datatype propertyRestrictions [has_operation some Equal:class]",
            "CQ": [
              "Must every instance of set have at least one has_operation relation to something classified as Equal?",
              "Can a set exist without being associated, via has_operation, to the class Equal?",
              "Is it obligatory for set to participate in the has_operation property with an individual of the Equal class?"
            ]
          },
          {
            "axiom": "set datatype propertyRestrictions [has_quality some non-numeric]",
            "CQ": [
              "Are all entities with the property 'has_quality' necessarily associated with at least one non-numeric value?",
              "Does the existence of a 'has_quality' property for a given entity imply the presence of some non-numeric quality?",
              "Can any entity be described using 'has_quality' only if it possesses at least one non-numeric attribute?"
            ]
          },
          {
            "axiom": "set datatype propertyRestrictions [has_quality some exact]",
            "CQ": [
              "Is every member of 'set' required to have at least one 'has_quality' relation to 'exact'?",
              "Must instances of 'set' possess the property 'has_quality' with a value of 'exact'?",
              "Does the class 'set' include only those entities that exhibit the 'has_quality' property with 'exact'?"
            ]
          },
          {
            "axiom": "set datatype propertyRestrictions [has_operation some Empty:set]",
            "CQ": [
              "Is it required that there exists at least one has_operation relationship to an instance of Empty for the concept set?",
              "Does every set necessarily perform at least one operation that yields an Empty set?",
              "Can a set exist without having any has_operation connection to Empty?"
            ]
          },
          {
            "axiom": "set datatype propertyRestrictions [has_operation some Difference:set]",
            "CQ": [
              "Must every instance in the defined set have at least one 'has_operation' relationship to a member of the Difference set?",
              "Is it required for elements of the set to be associated via 'has_operation' with some Difference set element?",
              "Are all set members necessarily connected by the 'has_operation' property to at least one Difference set entity?"
            ]
          },
          {
            "axiom": "set datatype propertyRestrictions [has_operation some Union:set]",
            "CQ": [
              "Is it required that instances of set have at least one has_operation relationship to a member of Union:set?",
              "Can every set be related to at least one element in Union:set via the has_operation property?",
              "Does the class set necessarily possess the has_operation property with some value from Union:set?"
            ]
          },
          {
            "axiom": "set datatype propertyRestrictions [has_operation some Subset:set]",
            "CQ": [
              "Is it required that every instance with property 'has_operation' must be associated with at least one member of the class 'Subset:set'?",
              "Can an individual satisfy the axiom only if it participates in some 'has_operation' relation with an entity of type 'Subset:set'?",
              "Does the ontology permit an entity with no 'has_operation' link to any 'Subset:set' instance to fulfill the property restriction?"
            ]
          }
        ]
      },
      "primitive field component": {
        "axiom": {
          "subClassOf": [
            "field component"
          ],
          "propertyRestrictions": [
            "[role_of some primitive datatype]"
          ]
        },
        "description": "primitive field component is defined as a subclass of field component, where each member must play the role of some primitive datatype. This means that any primitive field component is intrinsically linked to a primitive datatype, distinguishing it from other types of field components that may be associated with more complex data structures.",
        "CQ": [
          {
            "axiom": "primitive field component subClassOf field component",
            "CQ": [
              "Is primitive field component a specialized form within the broader class of field component?",
              "Which entities are direct subclasses of field component, including primitive field component?",
              "What higher-level classes encompass primitive field component in the ontology hierarchy?"
            ]
          },
          {
            "axiom": "primitive field component propertyRestrictions [role_of some primitive datatype]",
            "CQ": [
              "Is every primitive field component necessarily associated with a role that plays some primitive datatype?",
              "Must a primitive field component have at least one role linked to a primitive datatype?",
              "Can a primitive field component exist without being connected via 'role_of' to a primitive datatype?"
            ]
          }
        ]
      },
      "numeric primitive datatype": {
        "axiom": {
          "subClassOf": [
            "primitive datatype"
          ],
          "propertyRestrictions": [
            "[has_quality some numeric]"
          ]
        },
        "description": "numeric primitive datatype is defined as a subclass of primitive datatype and is characterized by the restriction that its instances must possess at least one quality that is numeric in nature. This class captures all primitive datatypes that inherently have numeric qualities, distinguishing them from other primitive datatypes that may not involve numeric properties.",
        "CQ": [
          {
            "axiom": "numeric primitive datatype subClassOf primitive datatype",
            "CQ": [
              "Is numeric primitive datatype categorized under the broader class of primitive datatype?",
              "Which datatypes are considered specializations of primitive datatype, specifically including numeric primitive datatype?",
              "To which more general datatype groups does numeric primitive datatype belong?"
            ]
          },
          {
            "axiom": "numeric primitive datatype propertyRestrictions [has_quality some numeric]",
            "CQ": [
              "Is it mandatory for every instance with a numeric primitive datatype property restriction to have at least one associated numeric quality?",
              "Can an entity constrained by a numeric primitive datatype restriction exist without possessing any numeric quality?",
              "Does the property 'has_quality' necessarily link instances with numeric primitive datatype restrictions to some numeric value?"
            ]
          }
        ]
      },
      "non-numeric unordered primitive datatype": {
        "axiom": {
          "subClassOf": [
            "non-numeric primitive datatype"
          ],
          "disjointWith": [
            "non-numeric ordered primitive datatype"
          ],
          "propertyRestrictions": [
            "[has_quality some non-ordered]"
          ]
        },
        "description": "non-numeric unordered primitive datatype is defined as a subclass of non-numeric primitive datatype, and is explicitly disjoint with non-numeric ordered primitive datatype, ensuring that no datatype can simultaneously be both unordered and ordered. Members of this class are characterized by the property restriction that they possess the quality of being non-ordered (has_quality some non-ordered), indicating that instances do not have an inherent order among their possible values.",
        "CQ": [
          {
            "axiom": "non-numeric unordered primitive datatype subClassOf non-numeric primitive datatype",
            "CQ": [
              "Does non-numeric unordered primitive datatype fall under the broader group of non-numeric primitive datatype?",
              "Which primitive datatypes are specializations of non-numeric primitive datatype, specifically including non-numeric unordered primitive datatype?",
              "What higher level categories encompass non-numeric unordered primitive datatype?"
            ]
          },
          {
            "axiom": "non-numeric unordered primitive datatype disjointWith non-numeric ordered primitive datatype",
            "CQ": [
              "What distinguishes non-numeric unordered primitive datatypes from non-numeric ordered primitive datatypes in the ontology?",
              "Can a primitive datatype be classified as both non-numeric unordered and non-numeric ordered simultaneously?",
              "Which primitive datatypes are defined as disjoint with non-numeric ordered primitive datatypes?"
            ]
          },
          {
            "axiom": "non-numeric unordered primitive datatype propertyRestrictions [has_quality some non-ordered]",
            "CQ": [
              "Is every instance with property 'has_quality' required to have at least one value from the class 'non-ordered'?",
              "Must the property 'has_quality' always relate to some individual classified as 'non-ordered'?",
              "Does possessing the 'has_quality' property necessarily entail an association with a 'non-ordered' value?"
            ]
          }
        ]
      },
      "heterogenous aggregate datatype": {
        "axiom": {
          "subClassOf": [
            "aggregate datatype"
          ],
          "propertyRestrictions": [
            "[has_member some heterogenous aggregate generator]"
          ]
        },
        "description": "heterogenous aggregate datatype is defined as a subclass of aggregate datatype. Members of this class are characterized by the existence of at least one member (via the has_member property) that is a heterogenous aggregate generator. This axiom formalizes that any instance of heterogenous aggregate datatype must include, as part of its structure, a heterogenous aggregate generator, distinguishing it from other kinds of aggregate datatypes.",
        "CQ": [
          {
            "axiom": "heterogenous aggregate datatype subClassOf aggregate datatype",
            "CQ": [
              "Is aggregate datatype a more general classification that includes heterogenous aggregate datatype?",
              "Which specific aggregate datatypes are categorized as heterogenous aggregate datatype?",
              "To what broader datatype groups does heterogenous aggregate datatype belong?"
            ]
          },
          {
            "axiom": "heterogenous aggregate datatype propertyRestrictions [has_member some heterogenous aggregate generator]",
            "CQ": [
              "Is every heterogenous aggregate required to have at least one member that is a heterogenous aggregate generator?",
              "Must the property 'has_member' for a heterogenous aggregate always include a heterogenous aggregate generator as a possible member?",
              "Can a heterogenous aggregate exist without being associated, via 'has_member', to any heterogenous aggregate generator?"
            ]
          }
        ]
      },
      "bounded above": {
        "axiom": {
          "subClassOf": [
            "bounded"
          ],
          "disjointWith": [
            "bounded below"
          ]
        },
        "description": "bounded above is defined as a subclass of bounded, representing objects or sets that possess an upper bound. It is explicitly disjoint with bounded below, ensuring no individual can simultaneously be both bounded above and bounded below. This means any member of this class is characterized by having an upper bound but not a lower bound within the context of the ontology.",
        "CQ": [
          {
            "axiom": "bounded above subClassOf bounded",
            "CQ": [
              "Is bounded above categorized as a specific type within the general class of bounded?",
              "Which classes fall under the category of bounded, specifically including bounded above?",
              "To which broader classes does bounded above belong in the class hierarchy?"
            ]
          },
          {
            "axiom": "bounded above disjointWith bounded below",
            "CQ": [
              "How does the ontology differentiate between entities that are bounded above and those that are bounded below?",
              "Is an entity permitted to belong simultaneously to both the bounded above and bounded below categories?",
              "Which classes, apart from bounded above, are specified as disjoint with bounded below within the ontology?"
            ]
          }
        ]
      },
      "bounded": {
        "axiom": {
          "subClassOf": [
            "boundedness"
          ],
          "disjointWith": [
            "unbounded"
          ]
        },
        "description": "bounded is defined as a subclass of boundedness, representing entities that possess the property of being bounded. It is explicitly disjoint with unbounded, ensuring that no individual can be simultaneously classified as both bounded and unbounded. This classification enforces a strict separation between bounded and unbounded entities within the ontology.",
        "CQ": [
          {
            "axiom": "bounded subClassOf boundedness",
            "CQ": [
              "Is boundedness an encompassing category for all instances of bounded?",
              "Which subcategories are defined under boundedness, and does this include bounded?",
              "To what higher-level classifications does bounded directly pertain?"
            ]
          },
          {
            "axiom": "bounded disjointWith unbounded",
            "CQ": [
              "What is the nature of the distinction between bounded and unbounded entities within the ontology?",
              "Is it permissible for a concept to be classified as both bounded and unbounded simultaneously?",
              "Which classes are formally specified as incompatible with the concept of bounded?"
            ]
          }
        ]
      },
      "numeric": {
        "axiom": {
          "subClassOf": [
            "numericalness"
          ],
          "disjointWith": [
            "non-numeric"
          ]
        },
        "description": "numeric is defined as a subclass of numericalness, representing entities characterized by having numerical properties. It is explicitly disjoint with non-numeric, ensuring that no individual can simultaneously belong to both numeric and non-numeric classes. This formalization distinguishes numeric entities, which possess quantifiable or number-based characteristics, from those lacking such numerical nature.",
        "CQ": [
          {
            "axiom": "numeric subClassOf numericalness",
            "CQ": [
              "Is numericalness a superordinate category that covers numeric?",
              "Which specific subclasses fall under the category of numericalness, such as numeric?",
              "To which upper classes does numeric belong in the ontology hierarchy?"
            ]
          },
          {
            "axiom": "numeric disjointWith non-numeric",
            "CQ": [
              "What differentiates numeric entities from non-numeric entities in the ontology?",
              "Is there any instance that can simultaneously be classified as numeric and non-numeric?",
              "Which classes have an explicit incompatibility declared with non-numeric?"
            ]
          }
        ]
      },
      "Delete:bag": {
        "axiom": {
          "subClassOf": [
            "delete operation"
          ],
          "disjointWith": [
            "Delete:table"
          ]
        },
        "description": "Delete:bag is defined as a subclass of delete operation, indicating that it represents a specific type of deletion action. It is also explicitly disjoint with Delete:table, ensuring that no individual can be both a Delete:bag and a Delete:table operation. This formalization distinguishes Delete:bag as a unique deletion process within the ontology, separate from deletion operations targeting tables.",
        "CQ": [
          {
            "axiom": "Delete:bag subClassOf delete operation",
            "CQ": [
              "Does Delete:bag fall under the category of delete operation?",
              "Which subclasses are specified within delete operation, including Delete:bag?",
              "What broader operations encompass Delete:bag as a specific type?"
            ]
          },
          {
            "axiom": "Delete:bag disjointWith Delete:table",
            "CQ": [
              "What distinguishes instances of Delete:bag from those of Delete:table in terms of their classification?",
              "Is there any entity in the ontology that can belong to both Delete:bag and Delete:table simultaneously?",
              "Which classes are asserted to be disjoint with Delete:table?"
            ]
          }
        ]
      },
      "Select:array": {
        "axiom": {
          "subClassOf": [
            "dyadic select operation"
          ],
          "disjointWith": [
            "Select:table"
          ]
        },
        "description": "Select:array is defined as a subclass of dyadic select operation, indicating it is a specific kind of select operation involving two operands. It is explicitly disjoint with Select:table, ensuring no individual can be both a Select:array and a Select:table. This class is used to represent select operations that specifically operate on array data structures, and not on tables.",
        "CQ": [
          {
            "axiom": "Select:array subClassOf dyadic select operation",
            "CQ": [
              "Is Select:array classified as a specific type of dyadic select operation?",
              "Which operations fall under the classification of dyadic select operation, including Select:array?",
              "To which broader operational categories does Select:array belong?"
            ]
          },
          {
            "axiom": "Select:array disjointWith Select:table",
            "CQ": [
              "What formal difference is established between Select:array and Select:table in the ontology?",
              "Is there any entity that can simultaneously be an instance of both Select:array and Select:table?",
              "Which classes in the ontology are asserted as mutually exclusive with Select:table?"
            ]
          }
        ]
      },
      "Select:bag": {
        "axiom": {
          "subClassOf": [
            "monadic select operation"
          ],
          "disjointWith": [
            "Select:set"
          ]
        },
        "description": "Select:bag is defined as a subclass of monadic select operation, indicating that it represents a form of selection operation that applies to a single argument within a computational or logical context. It is explicitly disjoint with Select:set, ensuring that no instance can simultaneously be both a Select:bag and a Select:set. This conceptual separation enforces that Select:bag and Select:set represent fundamentally distinct kinds of select operations.",
        "CQ": [
          {
            "axiom": "Select:bag subClassOf monadic select operation",
            "CQ": [
              "Does Select:bag fall under the broader classification of monadic select operation?",
              "Which monadic select operation subclasses encompass Select:bag?",
              "What are the higher-level categories for Select:bag within select operations?"
            ]
          },
          {
            "axiom": "Select:bag disjointWith Select:set",
            "CQ": [
              "How does the ontology distinguish between Select:bag and Select:set?",
              "Is there any instance that can be classified as both Select:bag and Select:set?",
              "Which classes are explicitly specified as disjoint with Select:set?"
            ]
          }
        ]
      },
      "Round:scaled": {
        "axiom": {
          "subClassOf": [
            "round operation"
          ],
          "disjointWith": [
            "Round:time&date"
          ]
        },
        "description": "Round:scaled is defined as a subclass of round operation, and it is explicitly disjoint with Round:time&date, meaning no entity can be an instance of both classes simultaneously. Members of the Round:scaled class represent rounding operations that are specifically not applicable to time or date values, but instead pertain to other types of values handled in scaled or quantitative contexts.",
        "CQ": [
          {
            "axiom": "Round:scaled subClassOf round operation",
            "CQ": [
              "Is round operation a broader classification that includes Round:scaled as a specific type?",
              "Which operations are specialized forms of round operation, such as Round:scaled?",
              "What higher-level operation categories encompass Round:scaled?"
            ]
          },
          {
            "axiom": "Round:scaled disjointWith Round:time&date",
            "CQ": [
              "How are Round:scaled and Round:time&date conceptually separated within the ontology?",
              "Is any entity allowed to belong simultaneously to both Round:scaled and Round:time&date categories?",
              "Which classes in the ontology are specified as disjoint with Round:time&date?"
            ]
          }
        ]
      },
      "Successor:enumerated": {
        "axiom": {
          "subClassOf": [
            "successor operation"
          ],
          "disjointWith": [
            "Successor:ordinal"
          ]
        },
        "description": "Successor:enumerated is defined as a subclass of the successor operation, indicating it represents a specific type or aspect of the successor process. It is explicitly disjoint with Successor:ordinal, which formally ensures that no individual can be both a member of Successor:enumerated and Successor:ordinal simultaneously. This separation captures distinct interpretations or instances of successor within the relevant domain.",
        "CQ": [
          {
            "axiom": "Successor:enumerated subClassOf successor operation",
            "CQ": [
              "Is Successor:enumerated classified as a kind of successor operation?",
              "Which concepts fall under the category of successor operation, including enumerated successors?",
              "What higher-level categories encompass Successor:enumerated within the ontology?"
            ]
          },
          {
            "axiom": "Successor:enumerated disjointWith Successor:ordinal",
            "CQ": [
              "How is the conceptual separation represented between enumerated and ordinal successors in the ontology?",
              "Is it allowable for an entity to be classified as both an enumerated and an ordinal successor?",
              "What are the defined disjoint classes for ordinal successors within the ontology?"
            ]
          }
        ]
      },
      "ordered aggregate": {
        "axiom": {
          "subClassOf": [
            "aggregate imposed ordering"
          ],
          "disjointWith": [
            "unordered aggregate"
          ]
        },
        "description": "ordered aggregate is defined as a subclass of aggregate imposed ordering, meaning it inherits all properties of aggregates that have a specific ordering structure. It is explicitly disjoint with unordered aggregate, indicating that no individual can simultaneously be both an ordered and an unordered aggregate. This formalization captures the distinction between collections with an inherent order and those without, ensuring that ordered aggregates maintain a structured sequence among their elements.",
        "CQ": [
          {
            "axiom": "ordered aggregate subClassOf aggregate imposed ordering",
            "CQ": [
              "Does ordered aggregate belong to the broader class of aggregate imposed ordering?",
              "What kinds of aggregates have an imposed ordering, specifically including ordered aggregates?",
              "Which higher-level categories encompass ordered aggregate?"
            ]
          },
          {
            "axiom": "ordered aggregate disjointWith unordered aggregate",
            "CQ": [
              "How does the ontology distinguish between ordered aggregates and unordered aggregates?",
              "Is there any entity that can simultaneously be classified as both an ordered aggregate and an unordered aggregate?",
              "Which classes are specified as incompatible with unordered aggregate in the ontology structure?"
            ]
          }
        ]
      },
      "fixed size": {
        "axiom": {
          "subClassOf": [
            "agregate size"
          ],
          "disjointWith": [
            "variable size"
          ]
        },
        "description": "fixed size is defined as a subclass of aggregate size, representing a type of size where the measurement remains constant. It is explicitly disjoint with variable size, indicating that no entity can simultaneously be considered both fixed size and variable size. This ensures that fixed size aggregates maintain a consistent value and cannot change over time or context.",
        "CQ": [
          {
            "axiom": "fixed size subClassOf agregate size",
            "CQ": [
              "Is fixed size an instance under the more general category of aggregate size?",
              "Which size classifications fall within the aggregate size category, including fixed size?",
              "What are the hierarchical parent classes of fixed size within the ontology?"
            ]
          },
          {
            "axiom": "fixed size disjointWith variable size",
            "CQ": [
              "How does the ontology distinguish between fixed size and variable size entities?",
              "Is it permitted for an entity to be classified as both fixed size and variable size?",
              "Which classes within the ontology are defined as mutually exclusive with variable size?"
            ]
          }
        ]
      },
      "homogenous": {
        "axiom": {
          "subClassOf": [
            "homogenity"
          ],
          "disjointWith": [
            "heterogenous"
          ]
        },
        "description": "homogenous is defined as a subclass of homogenity, indicating that all instances of this class exhibit uniformity in composition or character. It is explicitly disjoint with heterogenous—no individual can be both homogenous and heterogenous—ensuring a clear distinction between classes characterized by uniformity and those characterized by diversity.",
        "CQ": [
          {
            "axiom": "homogenous subClassOf homogenity",
            "CQ": [
              "Is homogeneity a broader classification that encompasses homogenous?",
              "Which specific categories fall under the general concept of homogeneity, such as homogenous?",
              "What overarching classes include homogenous as a more specific type?"
            ]
          },
          {
            "axiom": "homogenous disjointWith heterogenous",
            "CQ": [
              "How does the ontology differentiate between homogenous and heterogenous entities?",
              "Is there any entity that can simultaneously belong to both homogenous and heterogenous categories?",
              "Which classes are explicitly specified as mutually exclusive with homogenous?"
            ]
          }
        ]
      },
      "non-unique values": {
        "axiom": {
          "subClassOf": [
            "uniqueness"
          ],
          "disjointWith": [
            "unique values"
          ]
        },
        "description": "non-unique values is defined as a subclass of uniqueness, but is explicitly disjoint with unique values, meaning no instance can be both a non-unique value and a unique value. This class captures those values that do not fulfill the criteria for uniqueness within a given context, thereby representing data elements that may have duplicates or repeated entries within a dataset or collection.",
        "CQ": [
          {
            "axiom": "non-unique values subClassOf uniqueness",
            "CQ": [
              "Are non-unique values encompassed within the broader concept of uniqueness?",
              "What concepts are considered subclasses under uniqueness, such as non-unique values?",
              "To what higher-level categories does non-unique values belong according to the ontology?"
            ]
          },
          {
            "axiom": "non-unique values disjointWith unique values",
            "CQ": [
              "How does the ontology distinguish between non-unique values and unique values?",
              "Is it allowed for a value to be classified as both non-unique and unique simultaneously?",
              "What other types of values, if any, are defined as disjoint with unique values?"
            ]
          }
        ]
      },
      "target record of reals field component": {
        "axiom": {
          "subClassOf": [
            "labeled dataset target field component"
          ],
          "propertyRestrictions": [
            "[role_of some record of real datatype]"
          ]
        },
        "description": "target record of reals field component is defined as a subclass of labeled dataset target field component. Each member of this class must fulfill the property restriction of being the role_of some record of real datatype, ensuring that instances of this class represent components associated with labeled dataset targets, specifically those that play a role in or are linked to data records typed as real values (real numbers).",
        "CQ": [
          {
            "axiom": "target record of reals field component subClassOf labeled dataset target field component",
            "CQ": [
              "Is target record of reals field component classified under labeled dataset target field component?",
              "Which field components are considered more specific than labeled dataset target field component, such as target record of reals field component?",
              "To which broader categories does target record of reals field component belong?"
            ]
          },
          {
            "axiom": "target record of reals field component propertyRestrictions [role_of some record of real datatype]",
            "CQ": [
              "Must every target record of reals field component have the role_of property relating it to at least one record of real datatype?",
              "Is it mandatory for each target record of reals field component to participate in a role_of relationship with some instance classified as a record of real datatype?",
              "Can a target record of reals field component exist without having the role_of property to any record of real datatype?"
            ]
          }
        ]
      },
      "descriptive record of reals field component": {
        "axiom": {
          "subClassOf": [
            "labeled dataset descriptive field component"
          ],
          "propertyRestrictions": [
            "[role_of some record of real datatype]"
          ]
        },
        "description": "descriptive record of reals field component is defined as a subclass of labeled dataset descriptive field component. Members of this class are characterized by having the property role_of, which must relate them to some record of real datatype. This formalization ensures that any individual of this class functions specifically to describe or annotate dataset fields that are based on real-number values.",
        "CQ": [
          {
            "axiom": "descriptive record of reals field component subClassOf labeled dataset descriptive field component",
            "CQ": [
              "Is descriptive record of reals field component classified under labeled dataset descriptive field component?",
              "Which field components are specialized forms of labeled dataset descriptive field component, such as descriptive record of reals field component?",
              "What broader field component categories encompass descriptive record of reals field component?"
            ]
          },
          {
            "axiom": "descriptive record of reals field component propertyRestrictions [role_of some record of real datatype]",
            "CQ": [
              "Is every descriptive record of a reals field component required to have at least one 'role_of' relationship with a record of real datatype?",
              "Can a descriptive record of a reals field component exist without being related via 'role_of' to any record of real datatype?",
              "Does the ontology ensure that the presence of the 'role_of' property in a descriptive record of a reals field component necessarily points to an individual of type record of real datatype?"
            ]
          }
        ]
      },
      "descriptive set of integer field component": {
        "axiom": {
          "subClassOf": [
            "labeled dataset descriptive field component"
          ],
          "propertyRestrictions": [
            "[role_of some set of integer datatype]"
          ]
        },
        "description": "descriptive set of integer field component is a subclass of labeled dataset descriptive field component. Members of this class are characterized by having a role that involves some association with a set of integer datatype. This formalization ensures that any individual belonging to this class serves as a descriptive field within a labeled dataset, specifically representing or relating to a set of integer values.",
        "CQ": [
          {
            "axiom": "descriptive set of integer field component subClassOf labeled dataset descriptive field component",
            "CQ": [
              "Does descriptive set of integer field component fall under the category of labeled dataset descriptive field component?",
              "Which components qualify as more specific instances of labeled dataset descriptive field component, such as descriptive set of integer field component?",
              "What general types encompass descriptive set of integer field component within labeled dataset descriptive field component?"
            ]
          },
          {
            "axiom": "descriptive set of integer field component propertyRestrictions [role_of some set of integer datatype]",
            "CQ": [
              "Is every descriptive set of integer field component required to have at least one role_of relationship to a set of integer datatype?",
              "Must all descriptive sets of integer field components be assigned some role_of that connects them with a set of integer datatype?",
              "Does the presence of a role_of link to a set of integer datatype necessarily characterize every descriptive set of integer field component?"
            ]
          }
        ]
      }
    },
    "properties": {
      "is-about": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [
            "owl:topObjectProperty"
          ],
          "inverseOf": []
        },
        "description": "The property \"is-about\" does not have explicitly defined characteristics, domain, or range constraints. It is specified as a sub-property of the top-level object property (owl:topObjectProperty), indicating broad applicability for relating entities without restriction. No inverse property is defined. This property can be used to associate any two individuals to indicate that one is about the other.",
        "CQ": [
          {
            "axiom": "is-about domain None",
            "CQ": [
              "What types of entities can serve as the domain for the property 'is-about'?",
              "Should the property 'is-about' be restricted to a specific domain, or is it intended to have no domain?",
              "Is it correct that 'is-about' does not specify any domain?"
            ]
          },
          {
            "axiom": "is-about range None",
            "CQ": [
              "What entities can be the range of the property 'is-about'?",
              "Is it valid for the property 'is-about' to have no specified range?",
              "Can 'is-about' have a range other than the currently undefined range?"
            ]
          },
          {
            "axiom": "is-about subPropertyOf owl:topObjectProperty",
            "CQ": [
              "Is is-about classified as a subproperty of owl:topObjectProperty?",
              "Which superproperties are associated with is-about in the ontology?",
              "What subproperties, if any, are defined under owl:topObjectProperty?"
            ]
          }
        ]
      },
      "is_quality_of": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [],
          "inverseOf": [
            "has_quality"
          ]
        },
        "description": "The property \"is_quality_of\" has no explicitly defined characteristics, domain, or range restrictions, and is not specified as a sub-property of any other property. It is defined as the inverse of the property \"has_quality,\" indicating that it relates a quality to the entity it qualifies.",
        "CQ": [
          {
            "axiom": "is_quality_of domain None",
            "CQ": [
              "What entities can serve as the domain of the property 'is_quality_of'?",
              "Is it accurate that the property 'is_quality_of' has no specified domain?",
              "Are there any classes that are explicitly defined as subjects of 'is_quality_of'?"
            ]
          },
          {
            "axiom": "is_quality_of range None",
            "CQ": [
              "What kinds of entities can be the range of the property 'is_quality_of'?",
              "Is it correct that the property 'is_quality_of' does not have a defined range?",
              "Can 'is_quality_of' relate to entities of any type as its object?"
            ]
          },
          {
            "axiom": "is_quality_of inverseOf has_quality",
            "CQ": [
              "What is the logical connection between ‘is_quality_of’ and ‘has_quality’ as defined in the ontology?",
              "If entity A is related to entity B via ‘is_quality_of’, does this entail that B is related to A via ‘has_quality’?",
              "Which object property is specified as the inverse of ‘is_quality_of’ in the ontology?"
            ]
          }
        ]
      },
      "identifier_for": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [
            "attribute_of"
          ],
          "inverseOf": [
            "has_identifier"
          ]
        },
        "description": "The property \"identifier_for\" does not specify explicit domain or range restrictions and has no defined characteristics. It is a sub-property of \"attribute_of\" and serves as the inverse of the property \"has_identifier.\" This property is used to relate an identifier to the entity it identifies, reflecting an attribute relationship between the identifier and the entity.",
        "CQ": [
          {
            "axiom": "identifier_for domain None",
            "CQ": [
              "What entities can serve as the domain for the property 'identifier_for'?",
              "Is it correct that the property 'identifier_for' lacks a specified domain?",
              "Are there any recommended domain classes for the 'identifier_for' property?"
            ]
          },
          {
            "axiom": "identifier_for range None",
            "CQ": [
              "What types of entities can serve as the range for the property 'identifier_for'?",
              "Is it correct that the property 'identifier_for' has no specified range?",
              "Could any value be used as the range of 'identifier_for' or are there constraints?"
            ]
          },
          {
            "axiom": "identifier_for subPropertyOf attribute_of",
            "CQ": [
              "Does the property identifier_for qualify as a more specific type of attribute_of within the ontology?",
              "Which properties are considered subproperties of attribute_of in the current ontology scope?",
              "Is attribute_of defined as a direct superproperty of identifier_for?"
            ]
          },
          {
            "axiom": "identifier_for inverseOf has_identifier",
            "CQ": [
              "What is the logical correspondence between the properties ‘identifier_for’ and ‘has_identifier’ in the ontology?",
              "If entity A is identified by B using ‘identifier_for’, does it follow that B has A as an identifier via ‘has_identifier’?",
              "Which property operates as the inverse of ‘identifier_for’ in this ontology?"
            ]
          }
        ]
      },
      "has_quality": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [
            "owl:topObjectProperty"
          ],
          "inverseOf": []
        },
        "description": "The property \"has_quality\" has no explicitly defined domain, range, characteristics, or inverse properties. It is declared as a subproperty of \"owl:topObjectProperty,\" indicating it is a general object property that can relate any two individuals. This property is typically used to associate an entity with a quality or characteristic, but no additional restrictions are imposed by its current axioms.",
        "CQ": [
          {
            "axiom": "has_quality domain None",
            "CQ": [
              "What kinds of entities can act as the subject for the property 'has_quality'?",
              "Is it correct that 'has_quality' does not have a specified domain in the ontology?",
              "Are there potential classes that should be recognized as the domain for 'has_quality'?"
            ]
          },
          {
            "axiom": "has_quality range None",
            "CQ": [
              "Is it correct that the property 'has_quality' does not have a specified range?",
              "What classifications are allowed to be the range for the property 'has_quality'?",
              "Can any type of entity serve as the range for the 'has_quality' property?"
            ]
          },
          {
            "axiom": "has_quality subPropertyOf owl:topObjectProperty",
            "CQ": [
              "Is has_quality a subproperty of owl:topObjectProperty?",
              "Which properties are subproperties of owl:topObjectProperty?",
              "What superproperties does has_quality have within the property hierarchy?"
            ]
          }
        ]
      },
      "has_attribute": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [
            "owl:topObjectProperty"
          ],
          "inverseOf": [
            "has_attribute"
          ]
        },
        "description": "The property \"has_attribute\" has no explicitly defined characteristics, domain, or range restrictions. It is a sub-property of owl:topObjectProperty and is defined as being its own inverse property, indicating a symmetric relationship. No additional description is currently provided.",
        "CQ": [
          {
            "axiom": "has_attribute domain None",
            "CQ": [
              "Is it correct that the property 'has_attribute' has no specified domain?",
              "What possible domains could be associated with the property 'has_attribute'?",
              "Can 'has_attribute' be used with any type of subject without domain restrictions?"
            ]
          },
          {
            "axiom": "has_attribute range None",
            "CQ": [
              "What can be the range of the property 'has_attribute'?",
              "Is it correct that 'has_attribute' has no defined range?",
              "Can values associated with 'has_attribute' be of any type?"
            ]
          },
          {
            "axiom": "has_attribute subPropertyOf owl:topObjectProperty",
            "CQ": [
              "Is has_attribute considered a specialized form of owl:topObjectProperty?",
              "What superproperties are associated with has_attribute in the ontology?",
              "Which subproperties does owl:topObjectProperty encompass, including has_attribute?"
            ]
          },
          {
            "axiom": "has_attribute inverseOf has_attribute",
            "CQ": [
              "What is the inverse property associated with ‘has_attribute’ defined in the ontology?",
              "If entity A has an attribute B, can we infer that B has an attribute A within the ontology’s structure?",
              "How does the ontology specify the logical connection between ‘has_attribute’ and its inverse?"
            ]
          }
        ]
      },
      "denotes": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [
            "is-about"
          ],
          "inverseOf": []
        },
        "description": "The property \"denotes\" has no explicitly defined domain, range, or characteristics. It is a sub-property of \"is-about\", indicating a more specific form of reference or relationship to a subject. No inverse property is specified. This property is typically used to express that one entity represents or refers to another in a symbolic or informational context.",
        "CQ": [
          {
            "axiom": "denotes domain None",
            "CQ": [
              "What can be the domain of the property 'denotes'?",
              "Is it correct that the property 'denotes' does not specify a domain?",
              "Are there any entities that should not be used as the subject of the property 'denotes'?"
            ]
          },
          {
            "axiom": "denotes range None",
            "CQ": [
              "Is it correct that the property 'denotes' does not specify a range?",
              "What kinds of entities can 'denotes' refer to, given its unspecified range?",
              "Can 'denotes' relate to an object of any type as its target?"
            ]
          },
          {
            "axiom": "denotes subPropertyOf is-about",
            "CQ": [
              "Which properties are defined as subproperties under is-about, such as denotes?",
              "Does an assertion using denotes also satisfy constraints requiring is-about?",
              "What superproperties are associated with denotes in the ontology hierarchy?"
            ]
          }
        ]
      }
    }
  },
  "lab": {
    "classes": {
      "ExperimentalDiagnosisAssessment": {
        "axiom": {
          "subClassOf": [
            "ExperimentalAssessment"
          ],
          "propertyRestrictions": [
            "[hasExperimentalDiagnosis only DiagnosisType]"
          ]
        },
        "description": "ExperimentalDiagnosisAssessment is a subclass of ExperimentalAssessment, specialized to capture assessments in experimental settings that specifically involve a diagnosis process. Individuals belonging to this class are constrained to have only hasExperimentalDiagnosis relationships pointing to instances of DiagnosisType, ensuring that each ExperimentalDiagnosisAssessment is exclusively associated with recognized types of diagnoses. This formalization establishes the role of ExperimentalDiagnosisAssessment in linking experimental assessments with diagnostic outcomes in a controlled, ontology-driven manner.",
        "CQ": [
          {
            "axiom": "ExperimentalDiagnosisAssessment subClassOf ExperimentalAssessment",
            "CQ": [
              "Is ExperimentalDiagnosisAssessment recognized as a specialization of ExperimentalAssessment?",
              "Which assessments fall under the broader classification of ExperimentalAssessment, such as ExperimentalDiagnosisAssessment?",
              "What higher-level categories encompass ExperimentalDiagnosisAssessment?"
            ]
          },
          {
            "axiom": "ExperimentalDiagnosisAssessment propertyRestrictions [hasExperimentalDiagnosis only DiagnosisType]",
            "CQ": [
              "Does ExperimentalDiagnosisAssessment assign hasExperimentalDiagnosis exclusively to instances of DiagnosisType?",
              "Is it true that all values of hasExperimentalDiagnosis for ExperimentalDiagnosisAssessment must belong to DiagnosisType?",
              "Can ExperimentalDiagnosisAssessment have hasExperimentalDiagnosis related to anything other than DiagnosisType?"
            ]
          }
        ]
      },
      "CountingType": {
        "axiom": {
          "subClassOf": [
            "Type"
          ],
          "equivalentClass": [
            "{_20_0, _305_285}"
          ]
        },
        "description": "CountingType is a subclass of Type and is defined as being equivalent to the set containing exactly the individuals _20_0 and _305_285. This means that any instance of CountingType must be one of these two specified individuals, and no others.",
        "CQ": [
          {
            "axiom": "CountingType subClassOf Type",
            "CQ": [
              "Can CountingType be classified as a kind of Type?",
              "What categories does CountingType inherit from within the ontology?",
              "Which types encompass CountingType as a more specific instance?"
            ]
          },
          {
            "axiom": "CountingType equivalentClass {_20_0, _305_285}",
            "CQ": [
              "Is CountingType equivalent to the intersection of _20_0 and _305_285?",
              "Are all instances of CountingType necessarily members of both _20_0 and _305_285?",
              "Does CountingType exclude any concepts outside the overlap of _20_0 and _305_285?"
            ]
          }
        ]
      },
      "GenderType": {
        "axiom": {
          "subClassOf": [
            "Type"
          ],
          "equivalentClass": [
            "{male, female}"
          ]
        },
        "description": "GenderType is a subclass of Type and is formally defined as exactly the set containing only ‘male’ and ‘female’. This means every instance of GenderType must be either male or female, and nothing outside this set can be an instance of GenderType. This definition ensures a closed list of exactly two possible gender types within the ontology.",
        "CQ": [
          {
            "axiom": "GenderType subClassOf Type",
            "CQ": [
              "Is GenderType included as part of the broader group Type?",
              "What specific subcategories exist under Type, such as GenderType?",
              "Which overarching classification categories encompass GenderType?"
            ]
          },
          {
            "axiom": "GenderType equivalentClass {male, female}",
            "CQ": [
              "Is GenderType equivalent to the set containing only the individuals male and female?",
              "Does GenderType include any individuals other than male or female?",
              "Is every instance of GenderType necessarily identified as either male or female?"
            ]
          }
        ]
      },
      "DiagnosisAssessment": {
        "axiom": {
          "subClassOf": [
            "ClinicalAssessment"
          ],
          "propertyRestrictions": [
            "[hasClinicalDiagnosis only DiagnosisType]",
            "[hasClinicalDiagnosis exactly 1 DiagnosisType]"
          ]
        },
        "description": "DiagnosisAssessment is defined as a subclass of ClinicalAssessment, indicating that it inherits properties common to all clinical assessments. It is characterized by having exactly one value for the property hasClinicalDiagnosis, and this value must be of type DiagnosisType. This ensures that every instance of DiagnosisAssessment is linked to precisely one clinical diagnosis, providing a specific and unambiguous diagnosis outcome for each assessment.",
        "CQ": [
          {
            "axiom": "DiagnosisAssessment subClassOf ClinicalAssessment",
            "CQ": [
              "Is DiagnosisAssessment categorized under ClinicalAssessment in the ontology?",
              "Which assessment types are more specific than ClinicalAssessment, including DiagnosisAssessment?",
              "To what higher-level categories is DiagnosisAssessment assigned within the assessment hierarchy?"
            ]
          },
          {
            "axiom": "DiagnosisAssessment propertyRestrictions [hasClinicalDiagnosis only DiagnosisType]",
            "CQ": [
              "Can a DiagnosisAssessment have a hasClinicalDiagnosis relationship with anything other than DiagnosisType?",
              "Is it required that all clinical diagnoses assigned by a DiagnosisAssessment are instances of DiagnosisType?",
              "Are diagnoses outside of the DiagnosisType class excluded from the possible values for hasClinicalDiagnosis in a DiagnosisAssessment?"
            ]
          },
          {
            "axiom": "DiagnosisAssessment propertyRestrictions [hasClinicalDiagnosis exactly 1 DiagnosisType]",
            "CQ": [
              "Is each DiagnosisAssessment instance required to have exactly one value for the hasClinicalDiagnosis property assigned from DiagnosisType?",
              "Can a DiagnosisAssessment be valid if it has either none or more than one hasClinicalDiagnosis relationship?",
              "Does the ontology prevent DiagnosisAssessment from being linked to more than one instance of DiagnosisType through hasClinicalDiagnosis?"
            ]
          }
        ]
      },
      "CognitiveAbilitiesData": {
        "axiom": {
          "subClassOf": [
            "MeasuredData"
          ],
          "propertyRestrictions": [
            "[status exactly 1 ActivityStatusType]",
            "[repetitions exactly 1]",
            "[repetitions only rdfs:Literal]",
            "[compliantInstructionsOrder only xsd:boolean]",
            "[compliantInstructionsOrder exactly 1 xsd:boolean]",
            "[taskDuration only time:DurationDescription]",
            "[taskDuration exactly 1 time:DurationDescription]",
            "[status only ActivityStatusType]"
          ]
        },
        "description": "CognitiveAbilitiesData is defined as a subclass of MeasuredData, representing data specifically related to the measurement of cognitive abilities. Each instance of this class is constrained to have exactly one status, which must be of type ActivityStatusType. Additionally, it must have exactly one value for repetitions, which is restricted to rdfs:Literal, and exactly one value for compliantInstructionsOrder, restricted to xsd:boolean. The taskDuration property is also required, with exactly one value of type time:DurationDescription. These property restrictions ensure that any CognitiveAbilitiesData instance is fully specified with respect to status, number of repetitions, compliance with instruction order, and duration of the cognitive task.",
        "CQ": [
          {
            "axiom": "CognitiveAbilitiesData subClassOf MeasuredData",
            "CQ": [
              "Does CognitiveAbilitiesData fall under the broader group of MeasuredData?",
              "What types of data are classified as subcategories of MeasuredData, including CognitiveAbilitiesData?",
              "Which overarching classes encompass CognitiveAbilitiesData within their hierarchy?"
            ]
          },
          {
            "axiom": "CognitiveAbilitiesData propertyRestrictions [status exactly 1 ActivityStatusType]",
            "CQ": [
              "Is each CognitiveAbilitiesData instance required to have exactly one value for the status property that is of type ActivityStatusType?",
              "Can CognitiveAbilitiesData have more than one status value associated with ActivityStatusType?",
              "Is it possible for CognitiveAbilitiesData to lack a status of type ActivityStatusType or have more than one of such status?"
            ]
          },
          {
            "axiom": "CognitiveAbilitiesData propertyRestrictions [repetitions exactly 1]",
            "CQ": [
              "Is each CognitiveAbilitiesData instance required to have exactly one value for the repetitions property?",
              "Can a CognitiveAbilitiesData record ever be associated with more than one repetitions value?",
              "Does the ontology prevent CognitiveAbilitiesData from having zero values for the repetitions property?"
            ]
          },
          {
            "axiom": "CognitiveAbilitiesData propertyRestrictions [repetitions only rdfs:Literal]",
            "CQ": [
              "Is it required that repetitions in CognitiveAbilitiesData are always represented as rdfs:Literal values?",
              "Can CognitiveAbilitiesData have repetitions with any type other than rdfs:Literal?",
              "Are values associated with the repetitions property in CognitiveAbilitiesData restricted exclusively to rdfs:Literal instances?"
            ]
          },
          {
            "axiom": "CognitiveAbilitiesData propertyRestrictions [compliantInstructionsOrder only xsd:boolean]",
            "CQ": [
              "Are all values of the compliantInstructionsOrder property for CognitiveAbilitiesData instances required to be of type xsd:boolean?",
              "Can CognitiveAbilitiesData have compliantInstructionsOrder values that are not booleans?",
              "Is it true that only boolean values are permitted for the compliantInstructionsOrder property in CognitiveAbilitiesData?"
            ]
          },
          {
            "axiom": "CognitiveAbilitiesData propertyRestrictions [compliantInstructionsOrder exactly 1 xsd:boolean]",
            "CQ": [
              "Is it required that each instance of CognitiveAbilitiesData is associated with exactly one value for the compliantInstructionsOrder property?",
              "Can a CognitiveAbilitiesData entity have multiple or no compliantInstructionsOrder boolean values assigned?",
              "Does the ontology constrain CognitiveAbilitiesData such that compliantInstructionsOrder must be present once and only once?"
            ]
          },
          {
            "axiom": "CognitiveAbilitiesData propertyRestrictions [taskDuration only time:DurationDescription]",
            "CQ": [
              "Is every 'taskDuration' property of CognitiveAbilitiesData restricted exclusively to instances of time:DurationDescription?",
              "Must all values of the 'taskDuration' attribute for CognitiveAbilitiesData be descriptions of duration as defined by time:DurationDescription?",
              "Can CognitiveAbilitiesData have any 'taskDuration' that is not categorized under time:DurationDescription?"
            ]
          },
          {
            "axiom": "CognitiveAbilitiesData propertyRestrictions [taskDuration exactly 1 time:DurationDescription]",
            "CQ": [
              "Is every instance in CognitiveAbilitiesData required to have exactly one taskDuration associated with a time:DurationDescription?",
              "Can CognitiveAbilitiesData include multiple or zero values for taskDuration, or is it restricted to a single time:DurationDescription per instance?",
              "Are there constraints in CognitiveAbilitiesData preventing more than one or missing taskDuration linked to time:DurationDescription?"
            ]
          },
          {
            "axiom": "CognitiveAbilitiesData propertyRestrictions [status only ActivityStatusType]",
            "CQ": [
              "Are statuses associated with CognitiveAbilitiesData instances limited exclusively to ActivityStatusType?",
              "Is it possible for CognitiveAbilitiesData to have a status outside of ActivityStatusType?",
              "Does every status value for CognitiveAbilitiesData necessarily belong to ActivityStatusType?"
            ]
          }
        ]
      },
      "GaitData": {
        "axiom": {
          "subClassOf": [
            "MeasuredData"
          ],
          "propertyRestrictions": [
            "[walkingSpeedInstantaneous only rdfs:Literal]",
            "[walkingSpeed only rdfs:Literal]",
            "[stepLength only rdfs:Literal]",
            "[dynamicBalance exactly 1]",
            "[walkingSpeedInstantaneous exactly 1]",
            "[walkingSpeed exactly 1]",
            "[stoppingDisplacement exactly 1 xsd:boolean]",
            "[stepLength exactly 1]",
            "[dynamicBalance only rdfs:Literal]",
            "[stoppingDisplacement only xsd:boolean]"
          ]
        },
        "description": "GaitData is defined as a subclass of MeasuredData, representing data specifically related to gait characteristics. Each instance of GaitData is required to have exactly one value for each of the following properties: walkingSpeedInstantaneous, walkingSpeed, stepLength, dynamicBalance, and stoppingDisplacement. The properties walkingSpeedInstantaneous, walkingSpeed, stepLength, and dynamicBalance are restricted to values of type rdfs:Literal, while stoppingDisplacement is restricted to a value of type xsd:boolean. This formalization ensures that any GaitData instance will precisely contain a complete set of objectively measured gait parameters.",
        "CQ": [
          {
            "axiom": "GaitData subClassOf MeasuredData",
            "CQ": [
              "Is GaitData categorized under the broader class of MeasuredData?",
              "What subclasses fall under MeasuredData, and does GaitData appear among them?",
              "Which parent classes encompass GaitData within the ontology?"
            ]
          },
          {
            "axiom": "GaitData propertyRestrictions [walkingSpeedInstantaneous only rdfs:Literal]",
            "CQ": [
              "Is the property 'walkingSpeedInstantaneous' for GaitData restricted solely to values of type rdfs:Literal?",
              "Must every instance of GaitData have the 'walkingSpeedInstantaneous' property assigned only rdfs:Literal values?",
              "Can any non-literal value ever be assigned to the 'walkingSpeedInstantaneous' property of GaitData?"
            ]
          },
          {
            "axiom": "GaitData propertyRestrictions [walkingSpeed only rdfs:Literal]",
            "CQ": [
              "Are all values of 'walkingSpeed' for GaitData instances restricted to literals?",
              "Is it possible for a GaitData instance to have a 'walkingSpeed' property assigned any value type other than rdfs:Literal?",
              "Does GaitData require that every 'walkingSpeed' property must be an rdfs:Literal?"
            ]
          },
          {
            "axiom": "GaitData propertyRestrictions [stepLength only rdfs:Literal]",
            "CQ": [
              "Is it required that GaitData's stepLength property values are exclusively of type rdfs:Literal?",
              "Can GaitData have stepLength properties with values other than those classified as rdfs:Literal?",
              "Does GaitData ensure stepLength is restricted solely to rdfs:Literal values for all instances?"
            ]
          },
          {
            "axiom": "GaitData propertyRestrictions [dynamicBalance exactly 1]",
            "CQ": [
              "Must every instance of GaitData be associated with exactly one value for dynamicBalance?",
              "Is it necessary for GaitData to have one and only one dynamicBalance attribute?",
              "Does the definition of GaitData preclude it from having more or fewer than a single dynamicBalance property?"
            ]
          },
          {
            "axiom": "GaitData propertyRestrictions [walkingSpeedInstantaneous exactly 1]",
            "CQ": [
              "Is it required that every instance of GaitData has exactly one value for the walkingSpeedInstantaneous property?",
              "Can a GaitData record possess multiple or no walkingSpeedInstantaneous values, or must it always have precisely one?",
              "Is the cardinality of the walkingSpeedInstantaneous property for GaitData instances limited to one and only one occurrence?"
            ]
          },
          {
            "axiom": "GaitData propertyRestrictions [walkingSpeed exactly 1]",
            "CQ": [
              "Is it required that GaitData instances record exactly one value for walking speed?",
              "Can a GaitData instance have multiple or no values assigned to the walkingSpeed property?",
              "Does every GaitData instance associate with one and only one measure for walkingSpeed?"
            ]
          },
          {
            "axiom": "GaitData propertyRestrictions [stoppingDisplacement exactly 1 xsd:boolean]",
            "CQ": [
              "Does every instance of GaitData have exactly one value for the property 'stoppingDisplacement', and must it be a boolean?",
              "Is it required that GaitData contains one and only one stoppingDisplacement value that is a boolean?",
              "Can GaitData ever have more than one or no values for stoppingDisplacement, or a value that is not a boolean?"
            ]
          },
          {
            "axiom": "GaitData propertyRestrictions [stepLength exactly 1]",
            "CQ": [
              "Is it required that each instance of GaitData is associated with exactly one stepLength value?",
              "Can GaitData possess more than one or fewer than one stepLength attribute?",
              "Does the definition of GaitData ensure a unique stepLength per occurrence?"
            ]
          },
          {
            "axiom": "GaitData propertyRestrictions [dynamicBalance only rdfs:Literal]",
            "CQ": [
              "Are all dynamicBalance properties associated with GaitData exclusively required to have values of type rdfs:Literal?",
              "Is it necessary that in GaitData, the property dynamicBalance cannot reference anything other than instances of rdfs:Literal?",
              "Does the ontology restrict GaitData so that dynamicBalance never refers to a value outside the rdfs:Literal datatype?"
            ]
          },
          {
            "axiom": "GaitData propertyRestrictions [stoppingDisplacement only xsd:boolean]",
            "CQ": [
              "Is GaitData required to have the stoppingDisplacement property only with values of type boolean?",
              "Does GaitData prohibit the stoppingDisplacement property from being associated with values of any datatype other than boolean?",
              "Can the stoppingDisplacement property of GaitData ever have a value that is not of type boolean?"
            ]
          }
        ]
      },
      "StressData": {
        "axiom": {
          "subClassOf": [
            "MeasuredData"
          ],
          "propertyRestrictions": [
            "[stressLevel exactly 1]",
            "[stressLevel only rdfs:Literal]"
          ]
        },
        "description": "StressData is defined as a subclass of MeasuredData. Each instance of StressData is required to have exactly one stressLevel property, and the value assigned to stressLevel must be of type rdfs:Literal. This characterizes StressData as a specific type of measured information where exactly one literal value represents the stress level for each data instance.",
        "CQ": [
          {
            "axiom": "StressData subClassOf MeasuredData",
            "CQ": [
              "Is StressData classified as a specific kind of MeasuredData?",
              "What are the more specialized forms of MeasuredData, such as StressData?",
              "Under which broader data categories can StressData be grouped?"
            ]
          },
          {
            "axiom": "StressData propertyRestrictions [stressLevel exactly 1]",
            "CQ": [
              "Does every instance of StressData necessarily have exactly one value specified for the stressLevel property?",
              "Can StressData ever have more or fewer than one stressLevel assigned?",
              "Is it possible for StressData to be valid if the stressLevel property is not set to a single unique value?"
            ]
          },
          {
            "axiom": "StressData propertyRestrictions [stressLevel only rdfs:Literal]",
            "CQ": [
              "Is the stressLevel property for StressData instances limited exclusively to values of type rdfs:Literal?",
              "Does every value assigned to the stressLevel property in StressData have to be an rdfs:Literal?",
              "Can StressData have stressLevel values of any type other than rdfs:Literal?"
            ]
          }
        ]
      },
      "HealthyControlParticipant": {
        "axiom": {
          "subClassOf": [
            "Person"
          ],
          "equivalentClass": [
            "[hasRecord some (ClinicalRecord and [containsAssessment some (DiagnosisAssessment and [hasClinicalDiagnosis some {healthy}])])]"
          ]
        },
        "description": "HealthyControlParticipant is defined as a subclass of Person, and is equivalent to individuals who have at least one clinical record containing an assessment where the clinical diagnosis is \"healthy.\" This class formalizes the concept of a participant who, according to their clinical assessments, has no diagnosed health issues, ensuring that all HealthyControlParticipant instances are characterized by clinically verified healthy status.",
        "CQ": [
          {
            "axiom": "HealthyControlParticipant subClassOf Person",
            "CQ": [
              "Is HealthyControlParticipant classified as a subset of Person?",
              "Which categories encompass HealthyControlParticipant as a type of Person?",
              "What are the direct types under Person that include HealthyControlParticipant?"
            ]
          },
          {
            "axiom": "HealthyControlParticipant equivalentClass [hasRecord some (ClinicalRecord and [containsAssessment some (DiagnosisAssessment and [hasClinicalDiagnosis some {healthy}])])]",
            "CQ": [
              "Is every HealthyControlParticipant necessarily associated with a record that includes a clinical assessment confirming a 'healthy' diagnosis?",
              "Does the class HealthyControlParticipant represent exactly those individuals who have at least one clinical record containing a diagnosis assessment marked as 'healthy'?",
              "Is HealthyControlParticipant logically equivalent to entities with some clinical record where the assessment includes a clinical diagnosis of 'healthy'?"
            ]
          }
        ]
      },
      "Person": {
        "axiom": {
          "subClassOf": [
            "ns1:Person"
          ],
          "propertyRestrictions": [
            "[participates some Protocol]",
            "[hasRecord some ClinicalRecord]",
            "[hasRecord only (ClinicalRecord or DemographicCharacteristicsRecord or ExperimentalRecord)]",
            "[hasRecord some ExperimentalRecord]",
            "[hasRecord some DemographicCharacteristicsRecord]",
            "[participates only Protocol]"
          ]
        },
        "description": "Person is defined as a subclass of ns1:Person, representing human individuals who are participants in one or more Protocols. Each Person is required to participate in at least one Protocol and is not permitted to participate in anything other than a Protocol. Additionally, every Person must have at least one ClinicalRecord, at least one ExperimentalRecord, and at least one DemographicCharacteristicsRecord associated with them. The hasRecord property is strictly limited to linking only to ClinicalRecord, DemographicCharacteristicsRecord, or ExperimentalRecord, ensuring no other types of records are associated with a Person.",
        "CQ": [
          {
            "axiom": "Person subClassOf ns1:Person",
            "CQ": [
              "Is every instance of Person included within ns1:Person?",
              "What hierarchy exists between Person and ns1:Person categories?",
              "Which broader classes encompass the Person category?"
            ]
          },
          {
            "axiom": "Person propertyRestrictions [participates some Protocol]",
            "CQ": [
              "Is every Person required to participate in at least one Protocol?",
              "Can a Person exist in the ontology without having the participates relationship to a Protocol?",
              "Does the definition of Person ensure that participation in a Protocol is a necessary property?"
            ]
          },
          {
            "axiom": "Person propertyRestrictions [hasRecord some ClinicalRecord]",
            "CQ": [
              "Is it required for every Person to have at least one 'hasRecord' relationship with a ClinicalRecord?",
              "Does a Person necessarily possess some ClinicalRecord via the 'hasRecord' property?",
              "Can an individual be categorized as a Person if they lack any 'hasRecord' link to a ClinicalRecord?"
            ]
          },
          {
            "axiom": "Person propertyRestrictions [hasRecord only (ClinicalRecord or DemographicCharacteristicsRecord or ExperimentalRecord)]",
            "CQ": [
              "Is every record associated with a Person required to be either a ClinicalRecord, DemographicCharacteristicsRecord, or ExperimentalRecord?",
              "Can a Person have a record that is not classified as a ClinicalRecord, DemographicCharacteristicsRecord, or ExperimentalRecord?",
              "Are the records linked to a Person exclusively limited to ClinicalRecord, DemographicCharacteristicsRecord, and ExperimentalRecord categories?"
            ]
          },
          {
            "axiom": "Person propertyRestrictions [hasRecord some ExperimentalRecord]",
            "CQ": [
              "Is it required for every Person to have at least one ExperimentalRecord associated via the hasRecord property?",
              "Does the ontology permit a Person instance to exist without any linked ExperimentalRecord through hasRecord?",
              "Are there any Persons defined where hasRecord does not point to an ExperimentalRecord?"
            ]
          },
          {
            "axiom": "Person propertyRestrictions [hasRecord some DemographicCharacteristicsRecord]",
            "CQ": [
              "Is it required for every Person to have at least one hasRecord relationship to a DemographicCharacteristicsRecord?",
              "Can a Person exist in the ontology without any association via hasRecord to a DemographicCharacteristicsRecord?",
              "Does the ontology entail that all instances of Person must be linked to one or more DemographicCharacteristicsRecord through the hasRecord property?"
            ]
          },
          {
            "axiom": "Person propertyRestrictions [participates only Protocol]",
            "CQ": [
              "Is a Person permitted to participate exclusively in activities that are instances of Protocol?",
              "Can a Person participate in any activity that is not classified as a Protocol?",
              "Are all participations of a Person necessarily limited to the class Protocol?"
            ]
          }
        ]
      },
      "S3_DiscussionWithClinicianStep": {
        "axiom": {
          "subClassOf": [
            "ProtocolStep"
          ],
          "propertyRestrictions": [
            "[involvesTask only (S3_P1_DirectedExpressionTask or S3_P21_PictureDescriptionTask or Task)]",
            "[involvesTask exactly 1 S3_P1_DirectedExpressionTask]",
            "[involvesTask exactly 1 S3_P21_PictureDescriptionTask]"
          ]
        },
        "description": "S3_DiscussionWithClinicianStep is a subclass of ProtocolStep, representing a specific stage within a protocol that involves engagement with a clinician. This class is formally defined to involve exactly one S3_P1_DirectedExpressionTask and exactly one S3_P21_PictureDescriptionTask, with all associated tasks being limited exclusively to S3_P1_DirectedExpressionTask, S3_P21_PictureDescriptionTask, or their subclasses. This ensures the step comprises a focused discussion component, structured by these particular task types.",
        "CQ": [
          {
            "axiom": "S3_DiscussionWithClinicianStep subClassOf ProtocolStep",
            "CQ": [
              "Is S3_DiscussionWithClinicianStep categorized under the broader group of ProtocolStep?",
              "Which protocol steps encompass S3_DiscussionWithClinicianStep as a more specific step?",
              "What higher-level process groupings include S3_DiscussionWithClinicianStep within their hierarchy?"
            ]
          },
          {
            "axiom": "S3_DiscussionWithClinicianStep propertyRestrictions [involvesTask only (S3_P1_DirectedExpressionTask or S3_P21_PictureDescriptionTask or Task)]",
            "CQ": [
              "Must every S3_DiscussionWithClinicianStep involve only tasks classified as S3_P1_DirectedExpressionTask, S3_P21_PictureDescriptionTask, or Task?",
              "Is it permissible for S3_DiscussionWithClinicianStep to involve any task outside of S3_P1_DirectedExpressionTask, S3_P21_PictureDescriptionTask, or Task?",
              "Are the tasks associated with S3_DiscussionWithClinicianStep strictly limited to S3_P1_DirectedExpressionTask, S3_P21_PictureDescriptionTask, or Task categories?"
            ]
          },
          {
            "axiom": "S3_DiscussionWithClinicianStep propertyRestrictions [involvesTask exactly 1 S3_P1_DirectedExpressionTask]",
            "CQ": [
              "Must every instance of S3_DiscussionWithClinicianStep involve exactly one S3_P1_DirectedExpressionTask?",
              "Is it possible for S3_DiscussionWithClinicianStep to include more than one or fewer than one S3_P1_DirectedExpressionTask?",
              "Does the occurrence of S3_DiscussionWithClinicianStep require that it is associated with no more and no less than one S3_P1_DirectedExpressionTask through the involvesTask property?"
            ]
          },
          {
            "axiom": "S3_DiscussionWithClinicianStep propertyRestrictions [involvesTask exactly 1 S3_P21_PictureDescriptionTask]",
            "CQ": [
              "Must every S3_DiscussionWithClinicianStep involve exactly one S3_P21_PictureDescriptionTask task?",
              "Can an S3_DiscussionWithClinicianStep include more than one or no S3_P21_PictureDescriptionTask via involvesTask?",
              "Is the involvement of precisely one S3_P21_PictureDescriptionTask by each S3_DiscussionWithClinicianStep mandatory according to the ontology?"
            ]
          }
        ]
      },
      "S1_P13_WalkingCountingBackwardsTask": {
        "axiom": {
          "subClassOf": [
            "DirectedTask"
          ],
          "propertyRestrictions": [
            "[measuredData some MoodVoiceData]",
            "[countingType only CountingType]",
            "[measuredData some LatencyData]",
            "[measuredData some GaitData]",
            "[countingType some CountingType]",
            "[measuredData only (GaitData or LatencyData or MoodVoiceData or StressData)]"
          ]
        },
        "description": "S1_P13_WalkingCountingBackwardsTask is a subclass of DirectedTask, representing a directed activity involving walking and counting backwards. Members of this class are characterized by being associated with measured data pertaining to gait, latency, and mood/voice, with the option to also include stress-related data. The task requires the presence of countingType information, restricted solely to instances of CountingType. Only data of types GaitData, LatencyData, MoodVoiceData, or StressData are permitted as measured data for this task.",
        "CQ": [
          {
            "axiom": "S1_P13_WalkingCountingBackwardsTask subClassOf DirectedTask",
            "CQ": [
              "Is S1_P13_WalkingCountingBackwardsTask classified as a kind of DirectedTask?",
              "Which tasks are recognized as specializations of DirectedTask, including S1_P13_WalkingCountingBackwardsTask?",
              "To which overarching categories is S1_P13_WalkingCountingBackwardsTask assigned?"
            ]
          },
          {
            "axiom": "S1_P13_WalkingCountingBackwardsTask propertyRestrictions [measuredData some MoodVoiceData]",
            "CQ": [
              "Must every instance of S1_P13_WalkingCountingBackwardsTask include at least one measuredData property relating to MoodVoiceData?",
              "Is it possible for S1_P13_WalkingCountingBackwardsTask to have measuredData exclusively associated with MoodVoiceData?",
              "Does the presence of measuredData of type MoodVoiceData necessarily imply the existence of an S1_P13_WalkingCountingBackwardsTask?"
            ]
          },
          {
            "axiom": "S1_P13_WalkingCountingBackwardsTask propertyRestrictions [countingType only CountingType]",
            "CQ": [
              "Is it required that S1_P13_WalkingCountingBackwardsTask involves only activities of type CountingType?",
              "Can S1_P13_WalkingCountingBackwardsTask be associated with any countingType that is not a CountingType?",
              "Does S1_P13_WalkingCountingBackwardsTask exclusively restrict its countingType property to CountingType instances?"
            ]
          },
          {
            "axiom": "S1_P13_WalkingCountingBackwardsTask propertyRestrictions [measuredData some LatencyData]",
            "CQ": [
              "Does every instance of S1_P13_WalkingCountingBackwardsTask necessarily have measuredData associated with some LatencyData?",
              "Is it required that S1_P13_WalkingCountingBackwardsTask includes at least one measuredData property pointing to LatencyData?",
              "Can S1_P13_WalkingCountingBackwardsTask exist without any measuredData related to LatencyData?"
            ]
          },
          {
            "axiom": "S1_P13_WalkingCountingBackwardsTask propertyRestrictions [measuredData some GaitData]",
            "CQ": [
              "Does the S1_P13_WalkingCountingBackwardsTask always require the recording of some GaitData as measured data?",
              "Is it necessary that every instance of S1_P13_WalkingCountingBackwardsTask is associated with at least one measuredData value of type GaitData?",
              "Can an instance of S1_P13_WalkingCountingBackwardsTask exist without having measuredData that is GaitData?"
            ]
          },
          {
            "axiom": "S1_P13_WalkingCountingBackwardsTask propertyRestrictions [countingType some CountingType]",
            "CQ": [
              "Is it necessary for S1_P13_WalkingCountingBackwardsTask to involve at least one countingType?",
              "Must every instance of S1_P13_WalkingCountingBackwardsTask be associated with some form of CountingType via countingType?",
              "Are there any S1_P13_WalkingCountingBackwardsTask tasks that do not have a countingType relation to a CountingType?"
            ]
          },
          {
            "axiom": "S1_P13_WalkingCountingBackwardsTask propertyRestrictions [measuredData only (GaitData or LatencyData or MoodVoiceData or StressData)]",
            "CQ": [
              "Are measurements related to S1_P13_WalkingCountingBackwardsTask limited exclusively to GaitData, LatencyData, MoodVoiceData, or StressData?",
              "If the S1_P13_WalkingCountingBackwardsTask produces measured data outside of GaitData, LatencyData, MoodVoiceData, or StressData, is it a violation of the property restriction?",
              "Does S1_P13_WalkingCountingBackwardsTask ensure that all data obtained via measuredData is included in the set comprising only GaitData, LatencyData, MoodVoiceData, and StressData?"
            ]
          }
        ]
      },
      "S3_P1_DirectedExpressionTask": {
        "axiom": {
          "subClassOf": [
            "DirectedDiscussionTask"
          ],
          "propertyRestrictions": [
            "[measuredData some MoodVoiceData]",
            "[measuredData only (MoodVoiceData or StressData)]"
          ]
        },
        "description": "S3_P1_DirectedExpressionTask is defined as a subclass of DirectedDiscussionTask. Every instance of this class is required to be associated with at least some measuredData of type MoodVoiceData, while all measuredData linked to the class must exclusively be either MoodVoiceData or StressData. This specification ensures that the measurable outcomes for this task are strictly limited to mood or stress-related voice data, reflecting its design for directed expression activities with a focus on mood and stress recording.",
        "CQ": [
          {
            "axiom": "S3_P1_DirectedExpressionTask subClassOf DirectedDiscussionTask",
            "CQ": [
              "Does S3_P1_DirectedExpressionTask fall under the category of DirectedDiscussionTask?",
              "Which types of DirectedDiscussionTask include S3_P1_DirectedExpressionTask as a more specific instance?",
              "What broader task classifications encompass S3_P1_DirectedExpressionTask?"
            ]
          },
          {
            "axiom": "S3_P1_DirectedExpressionTask propertyRestrictions [measuredData some MoodVoiceData]",
            "CQ": [
              "Is it necessary for an S3_P1_DirectedExpressionTask to have at least one measuredData property with a value of type MoodVoiceData?",
              "Does every instance of S3_P1_DirectedExpressionTask include measured data that pertains specifically to MoodVoiceData?",
              "Can an S3_P1_DirectedExpressionTask exist without having any measuredData linked to MoodVoiceData?"
            ]
          },
          {
            "axiom": "S3_P1_DirectedExpressionTask propertyRestrictions [measuredData only (MoodVoiceData or StressData)]",
            "CQ": [
              "Are S3_P1_DirectedExpressionTasks required to have measuredData properties exclusively involving MoodVoiceData or StressData?",
              "Could an S3_P1_DirectedExpressionTask possess measuredData that is neither MoodVoiceData nor StressData?",
              "Do the measuredData property values for S3_P1_DirectedExpressionTask necessarily only include concepts from MoodVoiceData or StressData?"
            ]
          }
        ]
      },
      "ExperimentalAssessment": {
        "axiom": {
          "propertyRestrictions": [
            "[hasScore only rdfs:Literal]",
            "[hasScore exactly 1]"
          ]
        },
        "description": "ExperimentalAssessment is a class characterized by the restriction that each of its instances must have exactly one value for the property hasScore, and this value must be an rdfs:Literal. This formalization enforces that every ExperimentalAssessment is associated with a single, literal score value, supporting precise and unambiguous assessment results.",
        "CQ": [
          {
            "axiom": "ExperimentalAssessment propertyRestrictions [hasScore only rdfs:Literal]",
            "CQ": [
              "Is it true that an ExperimentalAssessment can only have 'hasScore' values that are rdfs:Literal?",
              "Does the 'hasScore' property of ExperimentalAssessment restrict its values exclusively to instances of rdfs:Literal?",
              "Can an ExperimentalAssessment ever have a 'hasScore' that is not an rdfs:Literal?"
            ]
          },
          {
            "axiom": "ExperimentalAssessment propertyRestrictions [hasScore exactly 1]",
            "CQ": [
              "Is every ExperimentalAssessment required to have exactly one hasScore property assigned?",
              "Can an ExperimentalAssessment possess more than one or fewer than one value for the hasScore property?",
              "Does the ontology restrict ExperimentalAssessment instances to a single value for the hasScore property and not allow zero or multiple values?"
            ]
          }
        ]
      },
      "ProtocolStep": {
        "axiom": {
          "propertyRestrictions": [
            "[involvesTask some Task]",
            "[endTime only time:Instant]",
            "[startTime exactly 1 time:Instant]",
            "[startTime only time:Instant]",
            "[endTime exactly 1 time:Instant]",
            "[involvesTask only Task]"
          ]
        },
        "description": "ProtocolStep represents a process component that is associated with exactly one start time and exactly one end time, both of which must be of type time:Instant. Each ProtocolStep must involve at least one Task, and may involve only entities that are instances of Task. The class’s axioms enforce precise temporal boundaries and ensure strict task involvement, supporting detailed modeling of procedural workflows.",
        "CQ": [
          {
            "axiom": "ProtocolStep propertyRestrictions [involvesTask some Task]",
            "CQ": [
              "Is it required that every ProtocolStep involves at least one Task?",
              "Can a ProtocolStep exist without being associated with any Task through the involvesTask property?",
              "Does the presence of a Task fulfill the condition for a ProtocolStep to satisfy its involvesTask property restriction?"
            ]
          },
          {
            "axiom": "ProtocolStep propertyRestrictions [endTime only time:Instant]",
            "CQ": [
              "Is every endTime value associated with a ProtocolStep required to be an instance of time:Instant?",
              "Can a ProtocolStep have an endTime property pointing to anything other than a time:Instant?",
              "Does ProtocolStep restrict all usages of endTime exclusively to the time:Instant class?"
            ]
          },
          {
            "axiom": "ProtocolStep propertyRestrictions [startTime exactly 1 time:Instant]",
            "CQ": [
              "Is each ProtocolStep required to have exactly one startTime specified as a time:Instant?",
              "Does the ontology restrict a ProtocolStep from having multiple or zero startTime values of type time:Instant?",
              "Can a ProtocolStep have more than one or less than one startTime associated with it?"
            ]
          },
          {
            "axiom": "ProtocolStep propertyRestrictions [startTime only time:Instant]",
            "CQ": [
              "Is every startTime associated with a ProtocolStep necessarily restricted to being an instance of time:Instant?",
              "Can a ProtocolStep have a startTime that is not of type time:Instant?",
              "Does the property startTime, when used with ProtocolStep, exclude any value other than time:Instant?"
            ]
          },
          {
            "axiom": "ProtocolStep propertyRestrictions [endTime exactly 1 time:Instant]",
            "CQ": [
              "Is each ProtocolStep required to have exactly one value for endTime?",
              "Can a ProtocolStep have more than one endTime assigned to it?",
              "Does the definition of ProtocolStep allow for having no endTime specified?"
            ]
          },
          {
            "axiom": "ProtocolStep propertyRestrictions [involvesTask only Task]",
            "CQ": [
              "Is ProtocolStep required to involve only instances of Task when fulfilling its involvesTask property?",
              "Does the involvesTask relationship for any ProtocolStep exclude entities other than those classified as Task?",
              "Can a ProtocolStep have an involvesTask property pointing to anything other than a Task?"
            ]
          }
        ]
      }
    },
    "properties": {
      "areasOfNoInterestExplored": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "rdfs:Literal"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"areasOfNoInterestExplored\" has no explicitly defined characteristics, domain restrictions, or super-properties. Its range is specified as rdfs:Literal, meaning it relates subjects to literal values such as strings or numbers. No inverse property is specified. This property is intended to capture information about areas that have been explored but are considered of no interest.",
        "CQ": [
          {
            "axiom": "areasOfNoInterestExplored domain None",
            "CQ": [
              "What types of entities can act as the subject of the property 'areasOfNoInterestExplored'?",
              "Is it appropriate that the property 'areasOfNoInterestExplored' has no explicitly defined domain?",
              "Can entities other than a defined class be subjects of the property 'areasOfNoInterestExplored'?"
            ]
          },
          {
            "axiom": "areasOfNoInterestExplored range rdfs:Literal",
            "CQ": [
              "Can the property 'areasOfNoInterestExplored' have a range other than rdfs:Literal?",
              "Is every value associated with 'areasOfNoInterestExplored' necessarily an rdfs:Literal?",
              "What types of entities can be used as the value for the property 'areasOfNoInterestExplored'?"
            ]
          }
        ]
      },
      "compliantInstructionsOrder": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "xsd:boolean"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"compliantInstructionsOrder\" has no explicitly defined characteristics, domain, or super-properties. Its range is restricted to boolean values (xsd:boolean), indicating it is used to assert whether a particular condition of instruction order compliance holds true or false. No inverse property is specified.",
        "CQ": [
          {
            "axiom": "compliantInstructionsOrder domain None",
            "CQ": [
              "What entities can serve as the domain for the property 'compliantInstructionsOrder'?",
              "Is it correct that 'compliantInstructionsOrder' has no specified domain?",
              "Can 'compliantInstructionsOrder' be associated with subjects other than those explicitly defined?"
            ]
          },
          {
            "axiom": "compliantInstructionsOrder range xsd:boolean",
            "CQ": [
              "Is every value used with the property 'compliantInstructionsOrder' required to be a boolean?",
              "Could 'compliantInstructionsOrder' ever have a value that is not of type xsd:boolean?",
              "What types of entities are permitted as the range for 'compliantInstructionsOrder'?"
            ]
          }
        ]
      },
      "hasDualTaskScore": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [
            "hasScore"
          ],
          "inverseOf": []
        },
        "description": "The property \"hasDualTaskScore\" does not specify explicit domain or range restrictions and has no defined characteristics. It is a sub-property of \"hasScore,\" indicating that it represents a specific kind of score, likely associated with dual-task performance. No inverse property is defined.",
        "CQ": [
          {
            "axiom": "hasDualTaskScore domain None",
            "CQ": [
              "What kinds of entities can act as the subject of the 'hasDualTaskScore' property?",
              "Is it correct that the property 'hasDualTaskScore' does not have a specified domain?",
              "Could any type of entity be linked with the 'hasDualTaskScore' property as its subject?"
            ]
          },
          {
            "axiom": "hasDualTaskScore range None",
            "CQ": [
              "Is it correct that the property 'hasDualTaskScore' does not have a defined range?",
              "Can entities of any type serve as the value for the property 'hasDualTaskScore'?",
              "What possible types can be assigned as the range of the property 'hasDualTaskScore'?"
            ]
          },
          {
            "axiom": "hasDualTaskScore subPropertyOf hasScore",
            "CQ": [
              "Is every usage of the hasDualTaskScore property also classified under hasScore?",
              "Which properties are recognized as subproperties of hasScore?",
              "What are the superproperties of hasDualTaskScore within the ontology?"
            ]
          }
        ]
      },
      "hasExperimentalDiagnosis": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [
            "hasDiagnosis"
          ],
          "inverseOf": []
        },
        "description": "The property \"hasExperimentalDiagnosis\" has no explicitly defined domain, range, or characteristics. It is a sub-property of \"hasDiagnosis,\" indicating that it represents a more specific form of diagnosis relationship within the ontology. No inverse property is specified. The lack of domain and range restrictions allows for flexible usage, but its naming suggests use for associating an entity with an experimental diagnosis.",
        "CQ": [
          {
            "axiom": "hasExperimentalDiagnosis domain None",
            "CQ": [
              "What entities can serve as the domain for the property 'hasExperimentalDiagnosis'?",
              "Is it correct that 'hasExperimentalDiagnosis' does not have a domain restriction?",
              "Can 'hasExperimentalDiagnosis' relate to subjects of any type, or should its scope be limited to specific classes?"
            ]
          },
          {
            "axiom": "hasExperimentalDiagnosis range None",
            "CQ": [
              "What can be the range of the property 'hasExperimentalDiagnosis'?",
              "Is it correct that 'hasExperimentalDiagnosis' does not have a specified range?",
              "Can 'hasExperimentalDiagnosis' relate to any type of entity as its object?"
            ]
          },
          {
            "axiom": "hasExperimentalDiagnosis subPropertyOf hasDiagnosis",
            "CQ": [
              "Is hasExperimentalDiagnosis considered a specific type of hasDiagnosis within the property hierarchy?",
              "Which properties are defined as subproperties under hasDiagnosis?",
              "Does the use of hasExperimentalDiagnosis in an assertion automatically entail the use of hasDiagnosis?"
            ]
          }
        ]
      },
      "stepLength": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [
            "owl:topDataProperty"
          ],
          "inverseOf": []
        },
        "description": "The property \"stepLength\" is a data property with no explicitly defined domain or range, and no specified characteristics. It is a subproperty of owl:topDataProperty, indicating it is a general data property. There is no inverse property defined. This property is intended for representing the length of a step, but no further constraints are provided.",
        "CQ": [
          {
            "axiom": "stepLength domain None",
            "CQ": [
              "What entities can serve as the domain for the property 'stepLength'?",
              "Is it correct that the property 'stepLength' has no defined domain?",
              "Can the property 'stepLength' be used with any type of subject, or is there a restriction?"
            ]
          },
          {
            "axiom": "stepLength range None",
            "CQ": [
              "Can the property 'stepLength' have a range other than what is currently specified?",
              "What types of values are permissible as the range for 'stepLength'?",
              "Is it valid for 'stepLength' to have no defined range?"
            ]
          },
          {
            "axiom": "stepLength subPropertyOf owl:topDataProperty",
            "CQ": [
              "Is stepLength categorized under the general properties defined by owl:topDataProperty?",
              "Which data properties are considered subproperties of owl:topDataProperty within the ontology?",
              "Does assigning a value to stepLength also imply an assignment to owl:topDataProperty?"
            ]
          }
        ]
      }
    }
  },
  "swo": {
    "classes": {
      "Protein-ligand docking": {
        "axiom": {
          "subClassOf": [
            "Molecular docking"
          ],
          "propertyRestrictions": [
            "[has topic some Protein interactions]",
            "[has output some Protein-ligand complex]"
          ]
        },
        "description": "Protein-ligand docking is a subclass of molecular docking, focused on modeling the binding interactions between proteins and ligands. It is formally restricted to topics involving protein interactions and must produce as output a protein-ligand complex. Methods in this class aim to predict both the position and orientation of a ligand when bound to a protein receptor or enzyme, utilizing comparative modeling or other computational techniques to model protein-ligand (e.g., protein-peptide) binding events.",
        "CQ": [
          {
            "axiom": "Protein-ligand docking subClassOf Molecular docking",
            "CQ": [
              "Is Protein-ligand docking classified as a more specific form of Molecular docking?",
              "Which types of Molecular docking include Protein-ligand docking as a subclass?",
              "What broader categories encompass Protein-ligand docking?"
            ]
          },
          {
            "axiom": "Protein-ligand docking propertyRestrictions [has topic some Protein interactions]",
            "CQ": [
              "Does every protein-ligand docking necessarily involve some aspect related to protein interactions?",
              "Is it required that protein-ligand docking has a topic associated with protein interactions?",
              "Does protein-ligand docking always pertain to a subject within the domain of protein interactions?"
            ]
          },
          {
            "axiom": "Protein-ligand docking propertyRestrictions [has output some Protein-ligand complex]",
            "CQ": [
              "Is it required that protein-ligand docking always outputs at least one protein-ligand complex?",
              "Can the result of a protein-ligand docking process ever be something other than a protein-ligand complex?",
              "Does every instance of protein-ligand docking necessarily yield a protein-ligand complex as an output?"
            ]
          }
        ]
      },
      "MLInterfaces": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[implements some k-nearest neighbour classification]",
            "[has specified data output some (ALL/AML data set and [has format specification some data format specification])]",
            "[has specified data input some (Gene expression dataset and [has format specification some data format specification])]",
            "[is encoded in some R language]"
          ]
        },
        "description": "MLInterfaces is a subclass of software characterized by several specific features. It implements at least one k-nearest neighbour classification algorithm and is encoded in the R programming language. Members of this class must have specified data input from gene expression datasets and specified data output from ALL/AML datasets, with both types of data conforming to at least one specified data format specification. This ensures that MLInterfaces are R-based software tools specialized in handling gene expression and ALL/AML datasets for k-nearest neighbour classification, with clear input/output format requirements.",
        "CQ": [
          {
            "axiom": "MLInterfaces subClassOf software",
            "CQ": [
              "Are MLInterfaces a specialized kind of software?",
              "What software subclasses encompass MLInterfaces?",
              "Which broader categories include MLInterfaces as a specific instance?"
            ]
          },
          {
            "axiom": "MLInterfaces propertyRestrictions [implements some k-nearest neighbour classification]",
            "CQ": [
              "Is it required that every MLInterface implements at least one k-nearest neighbour classification?",
              "Can an MLInterface exist without implementing k-nearest neighbour classification?",
              "Does the ontology allow for MLInterfaces that implement only k-nearest neighbour classification among possible implementations?"
            ]
          },
          {
            "axiom": "MLInterfaces propertyRestrictions [has specified data output some (ALL/AML data set and [has format specification some data format specification])]",
            "CQ": [
              "Is it required for an MLInterface to have at least one specified data output that consists of both an ALL or AML data set and a format specification?",
              "Can an MLInterface’s specified data output be valid only if it includes both an ALL/AML data set and a corresponding data format specification?",
              "Are ALL and AML data sets, with their associated data format specifications, the only types eligible as specified data output for MLInterfaces?"
            ]
          },
          {
            "axiom": "MLInterfaces propertyRestrictions [has specified data input some (Gene expression dataset and [has format specification some data format specification])]",
            "CQ": [
              "Is it necessary for an MLInterface to have at least one specified data input that is both a gene expression dataset and has some data format specification?",
              "Can an MLInterface satisfy the property restriction without its specified data input being a gene expression dataset with a format specification?",
              "Does every MLInterface require a specified data input that meets both the gene expression dataset type and has an associated data format specification?"
            ]
          },
          {
            "axiom": "MLInterfaces propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is it required that every MLInterface is encoded in at least one R language?",
              "Can an MLInterface exist without being associated with encoding in the R language?",
              "Does the ontology specify that if an entity is an MLInterface, then it must be represented using some form of the R language?"
            ]
          }
        ]
      },
      "Microsoft Excel 2007": {
        "axiom": {
          "subClassOf": [
            "Microsoft Excel"
          ],
          "propertyRestrictions": [
            "[has specified data output some (data and [has format specification some XML spreadsheet])]",
            "[has specified data input some (data and [has format specification some tab delimited file format])]",
            "[has specified data output some (data and [has format specification some XLS spreadsheet])]",
            "[has release date hasValue ns1:00]",
            "[has website homepage hasValue http://office.microsoft.com/]",
            "[directly followed by some Microsoft Excel for Windows 2010]",
            "[has specified data output some (data and [has format specification some tab delimited file format])]",
            "[has version hasValue Microsoft 2007 version]",
            "[has specified data input some (data and [has format specification some XLS spreadsheet])]"
          ]
        },
        "description": "Microsoft Excel 2007 is defined as a subclass of Microsoft Excel with several specified properties. It accepts data input in both XLS spreadsheet and tab-delimited file formats, and can output data in XLS, XML spreadsheet, and tab-delimited file formats. Its release date is specified as ns1:00, and its homepage is http://office.microsoft.com/. Microsoft Excel 2007 has the version identifier \"Microsoft 2007 version\" and is directly succeeded by Microsoft Excel for Windows 2010. These formal properties distinguish Microsoft Excel 2007 in terms of version, supported data formats, and its place within the timeline of Excel releases.",
        "CQ": [
          {
            "axiom": "Microsoft Excel 2007 subClassOf Microsoft Excel",
            "CQ": [
              "Is Microsoft Excel 2007 classified as a type of Microsoft Excel?",
              "What specific versions fall under the broader category of Microsoft Excel, including Microsoft Excel 2007?",
              "Which general application families include Microsoft Excel 2007 as a member?"
            ]
          },
          {
            "axiom": "Microsoft Excel 2007 propertyRestrictions [has specified data output some (data and [has format specification some XML spreadsheet])]",
            "CQ": [
              "Does Microsoft Excel 2007 require at least one data output that follows the XML spreadsheet format specification?",
              "Is there a necessity for any data output specified by Microsoft Excel 2007 to conform to the XML spreadsheet format?",
              "Can Microsoft Excel 2007 provide a specified data output that is not both data and formatted as an XML spreadsheet?"
            ]
          },
          {
            "axiom": "Microsoft Excel 2007 propertyRestrictions [has specified data input some (data and [has format specification some tab delimited file format])]",
            "CQ": [
              "Must data input for Microsoft Excel 2007 always include data that adheres to a tab delimited file format specification?",
              "Can Microsoft Excel 2007 accept data input if the format specification is not tab delimited?",
              "Is it required that any data input specified for Microsoft Excel 2007 has a format described by the tab delimited file type?"
            ]
          },
          {
            "axiom": "Microsoft Excel 2007 propertyRestrictions [has specified data output some (data and [has format specification some XLS spreadsheet])]",
            "CQ": [
              "Does Microsoft Excel 2007 require that its specified data output includes data formatted as an XLS spreadsheet?",
              "Is it necessary for the specified data output of Microsoft Excel 2007 to have a format specification corresponding to XLS spreadsheets?",
              "Can data outputs lacking the XLS spreadsheet format specification be recognized as outputs specified by Microsoft Excel 2007?"
            ]
          },
          {
            "axiom": "Microsoft Excel 2007 propertyRestrictions [has release date hasValue ns1:00]",
            "CQ": [
              "Is the release date of Microsoft Excel 2007 necessarily set to ns1:00?",
              "Can Microsoft Excel 2007 possess any release date property value other than ns1:00?",
              "Does the ontology specify that Microsoft Excel 2007 must have the release date property with the exact value of ns1:00?"
            ]
          },
          {
            "axiom": "Microsoft Excel 2007 propertyRestrictions [has website homepage hasValue http://office.microsoft.com/]",
            "CQ": [
              "Is Microsoft Excel 2007 required to have its website homepage as http://office.microsoft.com/?",
              "Does the ontology specify that the homepage of Microsoft Excel 2007 is exclusively http://office.microsoft.com/?",
              "Can Microsoft Excel 2007 have a different homepage property value other than http://office.microsoft.com/?"
            ]
          },
          {
            "axiom": "Microsoft Excel 2007 propertyRestrictions [directly followed by some Microsoft Excel for Windows 2010]",
            "CQ": [
              "Is it necessary for Microsoft Excel 2007 to be directly followed by some instance of Microsoft Excel for Windows 2010?",
              "Does Microsoft Excel 2007 only appear in a sequence where it is directly succeeded by Microsoft Excel for Windows 2010?",
              "Can Microsoft Excel 2007 ever be found without being directly followed by Microsoft Excel for Windows 2010?"
            ]
          },
          {
            "axiom": "Microsoft Excel 2007 propertyRestrictions [has specified data output some (data and [has format specification some tab delimited file format])]",
            "CQ": [
              "Does Microsoft Excel 2007 always generate data output that is formatted as a tab delimited file?",
              "Is it necessary for data output from Microsoft Excel 2007 to be data with a format specification of tab delimited file format?",
              "Can Microsoft Excel 2007 output any data that is not both data and specified as tab delimited file format?"
            ]
          },
          {
            "axiom": "Microsoft Excel 2007 propertyRestrictions [has version hasValue Microsoft 2007 version]",
            "CQ": [
              "Is Microsoft Excel 2007 required to have the version property with the value 'Microsoft 2007 version'?",
              "Can Microsoft Excel 2007 exist without the version specified as 'Microsoft 2007 version'?",
              "Does every instance of Microsoft Excel 2007 necessarily have the version property set to 'Microsoft 2007 version'?"
            ]
          },
          {
            "axiom": "Microsoft Excel 2007 propertyRestrictions [has specified data input some (data and [has format specification some XLS spreadsheet])]",
            "CQ": [
              "Does Microsoft Excel 2007 require data input that is both recognized as data and formatted specifically as an XLS spreadsheet?",
              "Is it necessary for the data input feature of Microsoft Excel 2007 to be associated with at least one instance of data that adheres to the XLS spreadsheet format specification?",
              "Can Microsoft Excel 2007 accept any specified data input that does not have the XLS spreadsheet format specification?"
            ]
          }
        ]
      },
      "GeneSelector": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[implements some SAM]",
            "[implements some BaldiLongT]",
            "[implements some FoxDimmicT]",
            "[implements some WilcEbam]",
            "[implements some Bayesian Model]",
            "[implements some Wilcoxon]",
            "[implements some Linear modelling]",
            "[implements some 't-test']",
            "[is encoded in some R language]"
          ]
        },
        "description": "GeneSelector is defined as a subclass of software that is encoded in the R language. Members of this class are characterized by implementing at least one of the following statistical or machine learning methods: SAM, BaldiLongT, FoxDimmicT, WilcEbam, Bayesian Model, Wilcoxon, Linear modelling, or t-test. This formalization indicates that any instance of GeneSelector must provide implementations for some of these methods in an R-based environment, supporting flexible selection and analysis of genes using diverse computational techniques.",
        "CQ": [
          {
            "axiom": "GeneSelector subClassOf software",
            "CQ": [
              "Is GeneSelector categorized under the broader class of software?",
              "What types of software include GeneSelector as a specific instance?",
              "Which general software categories does GeneSelector fall under?"
            ]
          },
          {
            "axiom": "GeneSelector propertyRestrictions [implements some SAM]",
            "CQ": [
              "Is it required for a GeneSelector to implement at least one SAM?",
              "Which types of SAM can be implemented by a GeneSelector according to the ontology?",
              "Are all instances of GeneSelector linked to the 'implements' property with some SAM?"
            ]
          },
          {
            "axiom": "GeneSelector propertyRestrictions [implements some BaldiLongT]",
            "CQ": [
              "Is every instance of GeneSelector required to implement at least one BaldiLongT?",
              "Can GeneSelector have implementations that are not related to BaldiLongT?",
              "Does the presence of BaldiLongT implementation necessarily characterize a GeneSelector?"
            ]
          },
          {
            "axiom": "GeneSelector propertyRestrictions [implements some FoxDimmicT]",
            "CQ": [
              "Is it required for a GeneSelector to implement at least one instance of FoxDimmicT?",
              "Can a GeneSelector exist without implementing FoxDimmicT at all?",
              "Does every GeneSelector necessarily possess the ability to implement FoxDimmicT?"
            ]
          },
          {
            "axiom": "GeneSelector propertyRestrictions [implements some WilcEbam]",
            "CQ": [
              "Is every GeneSelector required to implement at least one WilcEbam?",
              "Can there be a GeneSelector that does not implement any WilcEbam?",
              "Does the set of GeneSelectors necessarily include entities implementing WilcEbam?"
            ]
          },
          {
            "axiom": "GeneSelector propertyRestrictions [implements some Bayesian Model]",
            "CQ": [
              "Must every GeneSelector implement at least one Bayesian Model?",
              "Can a GeneSelector be defined without implementing any Bayesian Model?",
              "Is it required for a GeneSelector to implement a Bayesian Model to satisfy its property restrictions?"
            ]
          },
          {
            "axiom": "GeneSelector propertyRestrictions [implements some Wilcoxon]",
            "CQ": [
              "Is every GeneSelector required to implement at least one Wilcoxon?",
              "Does a GeneSelector necessarily utilize the Wilcoxon implementation?",
              "Can GeneSelector entities exist without implementing any Wilcoxon?"
            ]
          },
          {
            "axiom": "GeneSelector propertyRestrictions [implements some Linear modelling]",
            "CQ": [
              "Is it required that a GeneSelector implements at least one Linear modelling approach?",
              "Can a GeneSelector exist without implementing any Linear modelling technique?",
              "Does every GeneSelector necessarily implement some form of Linear modelling?"
            ]
          },
          {
            "axiom": "GeneSelector propertyRestrictions [implements some 't-test']",
            "CQ": [
              "Is it required that a GeneSelector must implement at least one 't-test'?",
              "Can a GeneSelector exist without implementing any 't-test'?",
              "Does the presence of a GeneSelector imply it implements a 't-test' in some manner?"
            ]
          },
          {
            "axiom": "GeneSelector propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is it required that every GeneSelector must be encoded in at least one R language?",
              "Can a GeneSelector exist without being encoded in any R language?",
              "Does the ontology specify that GeneSelectors may only be encoded in R language, or are other encoding languages permitted?"
            ]
          }
        ]
      },
      "Pathway ID (ConsensusPathDB)": {
        "axiom": {
          "subClassOf": [
            "Pathway or network accession",
            "ConsensusPathDB identifier"
          ]
        },
        "description": "Pathway ID (ConsensusPathDB) is a subclass of both \"Pathway or network accession\" and \"ConsensusPathDB identifier.\" It refers to an identifier specifically assigned to a pathway within the ConsensusPathDB pathway database. This class is intended to capture and represent accession numbers or codes uniquely identifying pathways stored in ConsensusPathDB.",
        "CQ": [
          {
            "axiom": "Pathway ID (ConsensusPathDB) subClassOf Pathway or network accession",
            "CQ": [
              "Is Pathway ID (ConsensusPathDB) a subtype of Pathway or network accession?",
              "Which types are encompassed under Pathway or network accession, including Pathway ID (ConsensusPathDB)?",
              "Under what broader classes can Pathway ID (ConsensusPathDB) be classified?"
            ]
          },
          {
            "axiom": "Pathway ID (ConsensusPathDB) subClassOf ConsensusPathDB identifier",
            "CQ": [
              "Is Pathway ID (ConsensusPathDB) included as a specific instance within the broader category of ConsensusPathDB identifier?",
              "Which identifiers are classified under ConsensusPathDB identifier, including Pathway ID (ConsensusPathDB)?",
              "What higher-level identifier types does Pathway ID (ConsensusPathDB) fall under?"
            ]
          }
        ]
      },
      "Transcriptomics": {
        "axiom": {
          "subClassOf": [
            "Genomics",
            "Gene expression"
          ]
        },
        "description": "Transcriptomics is defined as a subclass of both Genomics and Gene expression, focusing on the comprehensive analysis of transcriptomes—the complete set of RNA molecules present in a given cell, tissue, or organism. This class encompasses topics and research related to measuring, analyzing, and interpreting gene expression at the RNA level, thereby linking the study of genetic material (genomics) with the actual molecular output (gene expression) observed in biological samples.",
        "CQ": [
          {
            "axiom": "Transcriptomics subClassOf Genomics",
            "CQ": [
              "Is Transcriptomics classified within the hierarchy of Genomics?",
              "What broader categories encompass Transcriptomics in the context of genomics research?",
              "Which specialized fields are narrower in scope than Genomics, such as Transcriptomics?"
            ]
          },
          {
            "axiom": "Transcriptomics subClassOf Gene expression",
            "CQ": [
              "Is Transcriptomics classified under the broader category of Gene expression?",
              "Which concepts are considered specialized types of Gene expression, such as Transcriptomics?",
              "To which higher-level classes does Transcriptomics belong within the ontology?"
            ]
          }
        ]
      },
      "'beadarraySNP'": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[has specified data output some Graph plot]",
            "[has specified data input some Text data set]",
            "[is executed in some data normalization]",
            "[is encoded in some R language]"
          ]
        },
        "description": "beadarraySNP is a subclass of software designed for processing text-based data sets, producing graphical plots as output. It operates as part of data normalization workflows, indicating its use in preparing or standardizing data. Additionally, beadarraySNP is implemented in the R programming language. These axioms collectively characterize beadarraySNP as a software tool focused on data normalization tasks, with specified input (text data set), output (graph plots), and implementation (R language).",
        "CQ": [
          {
            "axiom": "'beadarraySNP' subClassOf software",
            "CQ": [
              "Is beadarraySNP categorized as a type of software?",
              "Which software subclasses include beadarraySNP?",
              "What broader classes encompass beadarraySNP?"
            ]
          },
          {
            "axiom": "'beadarraySNP' propertyRestrictions [has specified data output some Graph plot]",
            "CQ": [
              "Is it required that every beadarraySNP instance must have at least one specified data output related to a Graph plot?",
              "Does beadarraySNP necessarily produce a specified data output of the type Graph plot?",
              "Can a beadarraySNP exist without generating a specified data output that is a Graph plot?"
            ]
          },
          {
            "axiom": "'beadarraySNP' propertyRestrictions [has specified data input some Text data set]",
            "CQ": [
              "Is it required for beadarraySNP to have at least one specified data input that is a Text data set?",
              "Can a beadarraySNP exist without having any specified data input of type Text data set?",
              "Does a beadarraySNP necessarily utilize a Text data set as a specified data input?"
            ]
          },
          {
            "axiom": "'beadarraySNP' propertyRestrictions [is executed in some data normalization]",
            "CQ": [
              "Is it required that beadarraySNP is associated with at least one execution in data normalization?",
              "Can beadarraySNP exist without being executed within a data normalization process?",
              "Does beadarraySNP necessarily involve execution in data normalization at least once?"
            ]
          },
          {
            "axiom": "'beadarraySNP' propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is it necessary for a beadarraySNP to be encoded in at least one R language?",
              "Can a beadarraySNP exist without being encoded in any R language?",
              "Does every beadarraySNP instance require association with some R language through the 'is encoded in' property?"
            ]
          }
        ]
      },
      "MEDME": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[has specified data input some (data and [has format specification some R data frame])]",
            "[has specified data output some (data and [has format specification some GFF])]",
            "[is encoded in some R language]"
          ]
        },
        "description": "MEDME is defined as a subclass of software. It is characterized by its ability to accept specified data input, where the input data must have a format specification of an R data frame. The software produces specified data output, which must have a format specification of GFF (General Feature Format). Additionally, MEDME is encoded in the R programming language. This formalization ensures that any instance of MEDME must process data inputs as R data frames and produce outputs in GFF format, utilizing R for its implementation.",
        "CQ": [
          {
            "axiom": "MEDME subClassOf software",
            "CQ": [
              "Is MEDME categorized under the broader class of software?",
              "Which software subclasses include MEDME?",
              "What are the direct superclasses of MEDME?"
            ]
          },
          {
            "axiom": "MEDME propertyRestrictions [has specified data input some (data and [has format specification some R data frame])]",
            "CQ": [
              "Does MEDME require at least one specified data input with a format specification of an R data frame?",
              "Must every specified data input associated with MEDME include a format specification that is an R data frame?",
              "Is it possible for MEDME to have a specified data input that lacks both the 'data' type and an 'R data frame' format specification?"
            ]
          },
          {
            "axiom": "MEDME propertyRestrictions [has specified data output some (data and [has format specification some GFF])]",
            "CQ": [
              "Does a MEDME resource necessarily have a specified data output that includes a data entity with at least one format specification of type GFF?",
              "Is it possible for a MEDME entity to have a specified data output that lacks a data component formatted according to the GFF specification?",
              "Are MEDME's specified data outputs required to provide some data that conforms to the GFF format specification?"
            ]
          },
          {
            "axiom": "MEDME propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is every instance of MEDME necessarily associated with being encoded in at least one R language?",
              "Can a MEDME be considered valid if it is not encoded in any R language?",
              "Does the property restriction on MEDME allow encoding only when an R language is present?"
            ]
          }
        ]
      },
      "Splice site prediction": {
        "axiom": {
          "subClassOf": [
            "Nucleic acid sequence feature detection"
          ],
          "propertyRestrictions": [
            "[has topic some Gene structure]"
          ]
        },
        "description": "Splice site prediction is defined as a subclass of nucleic acid sequence feature detection, specifically involving detection methods that are related to gene structure. Members of this class identify, predict, or analyze splice sites in nucleotide sequences—including methods that may require input of pre-mRNA or genomic DNA sequences. This ensures a focus on the prediction or analysis of gene structure elements relevant to splicing within nucleotide data.",
        "CQ": [
          {
            "axiom": "Splice site prediction subClassOf Nucleic acid sequence feature detection",
            "CQ": [
              "Is Splice site prediction categorized as a type of Nucleic acid sequence feature detection?",
              "Which specific activities are classified under Nucleic acid sequence feature detection, such as Splice site prediction?",
              "What higher-level categories encompass Splice site prediction within the ontology?"
            ]
          },
          {
            "axiom": "Splice site prediction propertyRestrictions [has topic some Gene structure]",
            "CQ": [
              "Is it required that splice site prediction concerns gene structure as a topic?",
              "Can every instance of splice site prediction be associated with at least one gene structure through the 'has topic' relationship?",
              "Is there a requirement for splice site prediction to reference gene structure in its property restrictions?"
            ]
          }
        ]
      },
      "Functional enrichment": {
        "axiom": {
          "subClassOf": [
            "Gene expression data analysis",
            "Enrichment"
          ],
          "propertyRestrictions": [
            "[has topic some Function analysis]"
          ]
        },
        "description": "Functional enrichment is a subclass of both Gene expression data analysis and Enrichment, and is characterized by the requirement that it has as its topic some form of function analysis. This class encompasses methods that analyze a set of genes—often derived from gene expression profiles or other gene sets—using an ontology of gene functions, such as the Gene Ontology (GO). The analysis typically takes a set of Gene IDs as input and produces a ranked list of functional terms (e.g., GO terms) each associated with a p-value, reflecting the statistical significance of enrichment.",
        "CQ": [
          {
            "axiom": "Functional enrichment subClassOf Gene expression data analysis",
            "CQ": [
              "Does Functional enrichment fall under the broader classification of Gene expression data analysis?",
              "Which analysis types are narrower in scope than Gene expression data analysis, such as Functional enrichment?",
              "What higher-level categories encompass Functional enrichment within gene-related analytical processes?"
            ]
          },
          {
            "axiom": "Functional enrichment subClassOf Enrichment",
            "CQ": [
              "Is Functional enrichment classified under the broader category of Enrichment?",
              "Which enrichment types are specialized forms of Enrichment, such as Functional enrichment?",
              "What higher-level categories include Functional enrichment as a member?"
            ]
          },
          {
            "axiom": "Functional enrichment propertyRestrictions [has topic some Function analysis]",
            "CQ": [
              "Must every instance of Functional enrichment be associated with at least one topic of Function analysis?",
              "Can a Functional enrichment process exist without having the topic of Function analysis?",
              "Is it possible for Functional enrichment to have topics other than Function analysis?"
            ]
          }
        ]
      },
      "Acuity": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[output of some (software publishing process and [has participant hasValue Molecular Devices])]"
          ]
        },
        "description": "Acuity is defined as a subclass of software, and is characterized by being the output of at least one software publishing process in which Molecular Devices is a participant. This means that any instance of Acuity must be a software product that results from a publishing process involving Molecular Devices.",
        "CQ": [
          {
            "axiom": "Acuity subClassOf software",
            "CQ": [
              "Is Acuity categorized as a type of software?",
              "Which software subclasses include Acuity?",
              "What broader categories does Acuity fall under within the software hierarchy?"
            ]
          },
          {
            "axiom": "Acuity propertyRestrictions [output of some (software publishing process and [has participant hasValue Molecular Devices])]",
            "CQ": [
              "Does every instance of Acuity necessarily produce an output related to a software publishing process involving Molecular Devices as a participant?",
              "Can Acuity have any output that is not a result of a software publishing process with Molecular Devices participating?",
              "Is it required that all outputs of Acuity are strictly derived from software publishing processes that include Molecular Devices as a participant?"
            ]
          }
        ]
      },
      "Raw microarray data": {
        "axiom": {
          "subClassOf": [
            "Experimental measurement",
            "Microarray hybridisation data"
          ]
        },
        "description": "Raw microarray data is a subclass of both Experimental measurement and Microarray hybridisation data. It refers to the unprocessed data generated from microarray experiments, as commonly found in formats like Affymetrix CEL or GPR files. This data typically adheres to MIAME compliance and captures the initial measurements resulting from hybridisation events in a microarray assay.",
        "CQ": [
          {
            "axiom": "Raw microarray data subClassOf Experimental measurement",
            "CQ": [
              "Does raw microarray data fall under the broader category of experimental measurement?",
              "Which specific types of experimental measurement include raw microarray data?",
              "What are the parent categories to which raw microarray data is assigned?"
            ]
          },
          {
            "axiom": "Raw microarray data subClassOf Microarray hybridisation data",
            "CQ": [
              "Is Raw microarray data classified under the broader category of Microarray hybridisation data?",
              "Which specific data types fall under Microarray hybridisation data, such as Raw microarray data?",
              "What are the parent categories for Raw microarray data within the ontology?"
            ]
          }
        ]
      },
      "Protein structure prediction": {
        "axiom": {
          "subClassOf": [
            "Protein analysis",
            "Prediction and recognition (protein)",
            "Protein sequence analysis",
            "Structure prediction",
            "Protein structure analysis",
            "Structure prediction"
          ],
          "propertyRestrictions": [
            "[has output some Protein structure]",
            "[has topic some Protein structure prediction]"
          ]
        },
        "description": "Protein structure prediction is a subclass of Protein analysis, Protein sequence analysis, Structure prediction, and Protein structure analysis, and is grouped under the broader category of Prediction and recognition (protein). This class concerns methods and topics related to the prediction, modelling, recognition, or design of protein secondary, tertiary, or other structural features. Individuals of this class are associated with outputs that include some form of protein structure, and the class specifically includes topics relevant to protein structure prediction.",
        "CQ": [
          {
            "axiom": "Protein structure prediction subClassOf Protein analysis",
            "CQ": [
              "Is protein structure prediction categorized as a type of protein analysis?",
              "What specialized analyses fall under the category of protein analysis, such as protein structure prediction?",
              "Which broader methodological groups encompass protein structure prediction?"
            ]
          },
          {
            "axiom": "Protein structure prediction subClassOf Prediction and recognition (protein)",
            "CQ": [
              "Is Protein structure prediction categorized under Prediction and recognition (protein)?",
              "Which specific prediction types, such as Protein structure prediction, fall under the class Prediction and recognition (protein)?",
              "What broader categories encompass Protein structure prediction in the ontology?"
            ]
          },
          {
            "axiom": "Protein structure prediction subClassOf Protein sequence analysis",
            "CQ": [
              "Is protein structure prediction categorized under the domain of protein sequence analysis?",
              "Which analysis methods are more specific than protein sequence analysis, such as protein structure prediction?",
              "What broader analytical categories does protein structure prediction fall under?"
            ]
          },
          {
            "axiom": "Protein structure prediction subClassOf Structure prediction",
            "CQ": [
              "Is Protein structure prediction a specialized form of Structure prediction?",
              "Which prediction types fall under the category of Structure prediction, specifically including Protein structure prediction?",
              "To what broader prediction categories does Protein structure prediction belong?"
            ]
          },
          {
            "axiom": "Protein structure prediction subClassOf Protein structure analysis",
            "CQ": [
              "Is Protein structure analysis a broader category that encompasses Protein structure prediction?",
              "Which specialized analyses fall under the category of Protein structure analysis, such as Protein structure prediction?",
              "What more general domains is Protein structure prediction associated with within protein studies?"
            ]
          },
          {
            "axiom": "Protein structure prediction propertyRestrictions [has output some Protein structure]",
            "CQ": [
              "Is it necessary for protein structure prediction to have an output that is a protein structure?",
              "Does protein structure prediction always produce at least one protein structure as output?",
              "Can the output of protein structure prediction include entities other than protein structures?"
            ]
          },
          {
            "axiom": "Protein structure prediction propertyRestrictions [has topic some Protein structure prediction]",
            "CQ": [
              "Is it necessary for a protein structure prediction property restriction to involve the topic of protein structure prediction?",
              "Can a protein structure prediction property restriction exist without having 'has topic' set to protein structure prediction?",
              "Does every protein structure prediction property restriction entail some association with the topic of protein structure prediction?"
            ]
          }
        ]
      },
      "Protein interaction network comparison": {
        "axiom": {
          "subClassOf": [
            "Protein interaction network analysis",
            "Protein function comparison"
          ]
        },
        "description": "Protein interaction network comparison is a subclass of both protein interaction network analysis and protein function comparison. This class encompasses the process of comparing two or more networks of protein interactions, facilitating the evaluation of similarities and differences between distinct protein interaction networks to gain insights into protein functions and relationships across biological systems.",
        "CQ": [
          {
            "axiom": "Protein interaction network comparison subClassOf Protein interaction network analysis",
            "CQ": [
              "Is Protein interaction network comparison categorized as a specific kind of Protein interaction network analysis?",
              "Which analysis methods are subclassed under Protein interaction network analysis, such as Protein interaction network comparison?",
              "What broader analytical categories does Protein interaction network comparison inherit from?"
            ]
          },
          {
            "axiom": "Protein interaction network comparison subClassOf Protein function comparison",
            "CQ": [
              "Is Protein interaction network comparison classified as a more specific type of Protein function comparison?",
              "Which kinds of comparisons fall under the category of Protein function comparison, and does this include Protein interaction network comparison?",
              "To what broader comparison classes does Protein interaction network comparison belong?"
            ]
          }
        ]
      },
      "timecourse": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[implements some RMA]",
            "[is published by hasValue Bioconductor]",
            "[is encoded in some R language]",
            "[has specified data input some Gene expression dataset]",
            "[has specified data output some [has format specification only CEL binary format]]"
          ]
        },
        "description": "timecourse is defined as a subclass of software, distinguished by several specific characteristics. Instances of timecourse implement some RMA (Robust Multi-array Average) algorithm and are published exclusively by Bioconductor. They are encoded in the R programming language. For data handling, timecourse software requires as input some gene expression dataset and produces as output data that is strictly in the CEL binary format, conforming to the respective format specification. These axioms ensure that timecourse represents specialized software tools for processing gene expression datasets using the Bioconductor framework and RMA methodology within the R language environment.",
        "CQ": [
          {
            "axiom": "timecourse subClassOf software",
            "CQ": [
              "Is timecourse categorized under software?",
              "Which software subclasses include timecourse?",
              "What are the direct superclasses of timecourse?"
            ]
          },
          {
            "axiom": "timecourse propertyRestrictions [implements some RMA]",
            "CQ": [
              "Is it required that every timecourse necessarily implements at least one RMA?",
              "Does a timecourse exhibit the implements property only with instances of RMA?",
              "Can a timecourse exist without implementing any RMA?"
            ]
          },
          {
            "axiom": "timecourse propertyRestrictions [is published by hasValue Bioconductor]",
            "CQ": [
              "Is it required that every timecourse propertyRestriction is published only by Bioconductor?",
              "Can timecourse propertyRestrictions be considered valid if they are published by any source other than Bioconductor?",
              "Does the definition of timecourse propertyRestrictions exclude publication by platforms other than Bioconductor?"
            ]
          },
          {
            "axiom": "timecourse propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is every timecourse necessarily encoded in at least one R language?",
              "Can a timecourse exist without being encoded in some R language?",
              "Does the ontology require that any encoding of a timecourse involves R language?"
            ]
          },
          {
            "axiom": "timecourse propertyRestrictions [has specified data input some Gene expression dataset]",
            "CQ": [
              "Is it required that a timecourse has at least one specified data input that is a gene expression dataset?",
              "Can a timecourse exist without any specified data input of type gene expression dataset?",
              "Does the definition of timecourse permit only those data inputs that are gene expression datasets as specified?"
            ]
          },
          {
            "axiom": "timecourse propertyRestrictions [has specified data output some [has format specification only CEL binary format]]",
            "CQ": [
              "Is it required that any specified data output in a timecourse must have format specification restricted solely to the CEL binary format?",
              "Does the ontology allow a timecourse to have a specified data output with a format specification other than CEL binary format?",
              "Must every output designated by has specified data output for a timecourse include at least one instance where its format specification is only CEL binary format?"
            ]
          }
        ]
      },
      "sizepower": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[is executed in some (background correction and data normalization and differential expression analysis)]",
            "[has specified data output some [has format specification only R data frame]]",
            "[has specified data input some [has format specification only R data frame]]",
            "[is encoded in some R language]",
            "[is published by hasValue Bioconductor]"
          ]
        },
        "description": "sizepower is a subclass of software, specifically characterized by several key properties. It is implemented in the R programming language and is published by Bioconductor. The software is designed to be executed in the context of background correction, data normalization, and differential expression analysis tasks. It accepts input data exclusively in the R data frame format and produces output data also solely as R data frames. This ensures consistency in data formatting throughout its use and integration within bioinformatics workflows.",
        "CQ": [
          {
            "axiom": "sizepower subClassOf software",
            "CQ": [
              "Is sizepower categorized under the broader class of software?",
              "Which subclasses are defined within software, such as sizepower?",
              "What are the general classes that encompass sizepower?"
            ]
          },
          {
            "axiom": "sizepower propertyRestrictions [is executed in some (background correction and data normalization and differential expression analysis)]",
            "CQ": [
              "Must every instance of sizepower involve execution in all three processes: background correction, data normalization, and differential expression analysis?",
              "Can sizepower be executed in a context where only some, but not all, of background correction, data normalization, and differential expression analysis are performed?",
              "Are there cases where sizepower execution occurs without being associated with background correction, data normalization, or differential expression analysis?"
            ]
          },
          {
            "axiom": "sizepower propertyRestrictions [has specified data output some [has format specification only R data frame]]",
            "CQ": [
              "Must every sizepower include at least one specified data output whose format specification is limited exclusively to R data frames?",
              "Is it mandatory for the format specification of any data output provided by sizepower to be restricted only to R data frames?",
              "Are there any data outputs associated with sizepower that can have format specifications other than R data frames?"
            ]
          },
          {
            "axiom": "sizepower propertyRestrictions [has specified data input some [has format specification only R data frame]]",
            "CQ": [
              "Is it required that sizepower accepts as specified data input only those with a format specification of R data frame?",
              "Can sizepower have specified data input in any format other than R data frame according to the property restriction?",
              "Does sizepower necessarily restrict its specified data input to entities whose format specification is limited to R data frame?"
            ]
          },
          {
            "axiom": "sizepower propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is it necessary for a sizepower propertyRestriction to be encoded in at least one R language?",
              "Can a sizepower propertyRestriction exist without being associated with any R language?",
              "Does every sizepower propertyRestriction require an encoding in an R language?"
            ]
          },
          {
            "axiom": "sizepower propertyRestrictions [is published by hasValue Bioconductor]",
            "CQ": [
              "Is every instance of sizepower necessarily published by Bioconductor?",
              "Can sizepower ever be published by an entity other than Bioconductor?",
              "Does sizepower have the publishing entity restricted solely to Bioconductor?"
            ]
          }
        ]
      },
      "derivative software not allowed": {
        "axiom": {
          "subClassOf": [
            "Derivatives clause"
          ],
          "disjointWith": [
            "derivative software allowed"
          ]
        },
        "description": "derivative software not allowed is defined as a subclass of Derivatives clause, and is explicitly disjoint with derivative software allowed. This means that any clause categorized under derivative software not allowed falls within the broader category of Derivatives clause, but cannot simultaneously be considered as allowing derivative software. This class formalizes the restriction that the creation or use of derivative software is not permitted under this clause.",
        "CQ": [
          {
            "axiom": "derivative software not allowed subClassOf Derivatives clause",
            "CQ": [
              "Is a Derivatives clause a general category that includes derivative software not allowed?",
              "What are the more specific instances under Derivatives clause, such as derivative software not allowed?",
              "To which broader clause does derivative software not allowed belong?"
            ]
          },
          {
            "axiom": "derivative software not allowed disjointWith derivative software allowed",
            "CQ": [
              "What logical separation exists between 'derivative software not allowed' and 'derivative software allowed' within the ontology?",
              "Is any software classified as both 'derivative software not allowed' and 'derivative software allowed'?",
              "Which software permission classes are specifically declared as disjoint with 'derivative software allowed'?"
            ]
          }
        ]
      },
      "logitT": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[implements some (Logit-t algorithm and 't-test')]",
            "[is executed in some differential expression analysis]",
            "[has specified data input some [has format specification only (CEL binary format or CEL ASCII format)]]",
            "[is encoded in some R language]",
            "[is published by hasValue Bioconductor]",
            "[has specified data output some [has format specification only R data frame]]"
          ]
        },
        "description": "logitT is defined as a subclass of software specialized in differential expression analysis. It must implement both the Logit-t algorithm and the t-test, be executed in the context of differential expression analysis, and is encoded in the R programming language. logitT requires input data specifically in CEL binary or CEL ASCII formats, as specified, and produces output strictly in the form of an R data frame. Additionally, it is formally associated with the Bioconductor project as its publisher.",
        "CQ": [
          {
            "axiom": "logitT subClassOf software",
            "CQ": [
              "Is logitT categorized under the broader class of software?",
              "What types are included as subclasses of software, specifically mentioning logitT?",
              "Which higher-level categories encompass logitT within the ontology?"
            ]
          },
          {
            "axiom": "logitT propertyRestrictions [implements some (Logit-t algorithm and 't-test')]",
            "CQ": [
              "Does every logitT necessarily implement at least one entity that is both a Logit-t algorithm and related to a t-test?",
              "Is it required that logitT is associated with an implementation involving both Logit-t algorithm and t-test elements?",
              "Can logitT exist without implementing something that combines the characteristics of Logit-t algorithm and the t-test?"
            ]
          },
          {
            "axiom": "logitT propertyRestrictions [is executed in some differential expression analysis]",
            "CQ": [
              "Is it required that every LogitT property restriction is associated with at least one execution in a differential expression analysis?",
              "Does a LogitT property restriction necessarily participate in some form of differential expression analysis?",
              "Can a LogitT property restriction exist without being executed in any differential expression analysis?"
            ]
          },
          {
            "axiom": "logitT propertyRestrictions [has specified data input some [has format specification only (CEL binary format or CEL ASCII format)]]",
            "CQ": [
              "Is it required that any specified data input for a logitT property restriction has a format specification exclusively restricted to CEL binary format or CEL ASCII format?",
              "Can a specified data input under logitT property restrictions have a format specification outside of CEL binary format or CEL ASCII format?",
              "Are inputs permitted in logitT property restrictions if their format specification includes both CEL binary and CEL ASCII formats but no other formats?"
            ]
          },
          {
            "axiom": "logitT propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Does every logitT property restriction require encoding in at least one R language?",
              "Is it necessary for logitT propertyRestrictions to be encoded using some R language?",
              "Can a logitT property restriction exist without being encoded in any R language?"
            ]
          },
          {
            "axiom": "logitT propertyRestrictions [is published by hasValue Bioconductor]",
            "CQ": [
              "Is every logitT instance necessarily published by Bioconductor?",
              "Can a logitT entity be associated with any publisher other than Bioconductor?",
              "Does the definition of logitT require its publisher to be exclusively Bioconductor?"
            ]
          },
          {
            "axiom": "logitT propertyRestrictions [has specified data output some [has format specification only R data frame]]",
            "CQ": [
              "Must every data output specified by logitT necessarily follow the R data frame format specification?",
              "Can logitT have any specified data output that is not restricted to the R data frame format?",
              "Is it possible for logitT to output data of formats other than R data frame among its specified outputs?"
            ]
          }
        ]
      },
      "MPL v2.0": {
        "axiom": {
          "subClassOf": [
            "MPL"
          ],
          "propertyRestrictions": [
            "[is compatible license of some GNU GPL v2]",
            "[is compatible license of some GNU GPL v3]"
          ]
        },
        "description": "MPL v2.0 is defined as a subclass of MPL, meaning it inherits all characteristics of the general Mozilla Public License class. Additionally, MPL v2.0 is characterized by being a compatible license with both GNU GPL v2 and GNU GPL v3. This means that any license classified as MPL v2.0 must be compatible for use in projects licensed under either version 2 or version 3 of the GNU General Public License.",
        "CQ": [
          {
            "axiom": "MPL v2.0 subClassOf MPL",
            "CQ": [
              "Is MPL v2.0 classified as a kind of MPL?",
              "Which categories include MPL v2.0 as a more specific instance under MPL?",
              "What parent classes does MPL v2.0 belong to within the ontology?"
            ]
          },
          {
            "axiom": "MPL v2.0 propertyRestrictions [is compatible license of some GNU GPL v2]",
            "CQ": [
              "Is every instance of MPL v2.0 associated with at least one GNU GPL v2 license through the 'is compatible license of' property?",
              "Must MPL v2.0 have a compatibility relationship with some software licensed under GNU GPL v2?",
              "Does the ontology entail that MPL v2.0 can demonstrate compatibility via the 'is compatible license of' relation with at least one entity classified as GNU GPL v2?"
            ]
          },
          {
            "axiom": "MPL v2.0 propertyRestrictions [is compatible license of some GNU GPL v3]",
            "CQ": [
              "Is every instance of an MPL v2.0 license required to be compatible with at least one GNU GPL v3 license?",
              "Are there cases where an MPL v2.0 license does not have any compatibility relation with a GNU GPL v3 license?",
              "Can an MPL v2.0 license be associated with compatibility only when at least one GNU GPL v3 license is involved?"
            ]
          }
        ]
      },
      "BAR": {
        "axiom": {
          "subClassOf": [
            "Binary format"
          ],
          "propertyRestrictions": [
            "[is published by hasValue Affymetrix]"
          ]
        },
        "description": "BAR is defined as a subclass of Binary format, representing a specific type of binary data format. Every instance of BAR must be published exclusively by Affymetrix, as specified by the restriction that the 'is published by' property has the fixed value Affymetrix. This formalization captures that BAR files are a specialized binary format uniquely associated with Affymetrix as the publishing entity.",
        "CQ": [
          {
            "axiom": "BAR subClassOf Binary format",
            "CQ": [
              "Is BAR categorized under the broader class of Binary format?",
              "Which formats are classified as specific subtypes of Binary format, such as BAR?",
              "What general format categories encompass BAR?"
            ]
          },
          {
            "axiom": "BAR propertyRestrictions [is published by hasValue Affymetrix]",
            "CQ": [
              "Is every instance of BAR necessarily published by Affymetrix?",
              "Can a BAR exist if it is not published by Affymetrix?",
              "Does BAR exclusively have the 'is published by' property value set to Affymetrix?"
            ]
          }
        ]
      },
      "affyPara": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[is published by hasValue Bioconductor]",
            "[is executed in some (averaging and correction and data normalization)]",
            "[has specified data input some [has format specification only (CEL binary format or CEL ASCII format)]]",
            "[has specified data output some (Graph plot and [has format specification some R data frame])]",
            "[is encoded in some R language]"
          ]
        },
        "description": "affyPara is a subclass of software, formally characterized by several property restrictions: it is published by Bioconductor; it is executed in processes involving averaging and correction and data normalization; its specified data input must include data with a format specification of either CEL binary format or CEL ASCII format; its specified data output includes both graph plots and outputs with a format specification of R data frame; and it is encoded in the R language. This class represents software tools that process CEL format data for statistical normalization and visualization in bioinformatics workflows.",
        "CQ": [
          {
            "axiom": "affyPara subClassOf software",
            "CQ": [
              "Is affyPara classified as a type of software?",
              "Which entities are more specific than software, such as affyPara?",
              "What broader categories encompass affyPara within the hierarchy?"
            ]
          },
          {
            "axiom": "affyPara propertyRestrictions [is published by hasValue Bioconductor]",
            "CQ": [
              "Is every instance of affyPara required to be published by Bioconductor?",
              "Can affyPara be published by any source other than Bioconductor?",
              "Does the property restriction ensure that affyPara has the publisher value set specifically to Bioconductor?"
            ]
          },
          {
            "axiom": "affyPara propertyRestrictions [is executed in some (averaging and correction and data normalization)]",
            "CQ": [
              "Is it necessary for affyPara to be executed in a context that includes averaging, correction, and data normalization?",
              "Does the execution of affyPara always require all three processes: averaging, correction, and data normalization to be present?",
              "Can affyPara be executed in any scenario where averaging, correction, and data normalization are not all applied together?"
            ]
          },
          {
            "axiom": "affyPara propertyRestrictions [has specified data input some [has format specification only (CEL binary format or CEL ASCII format)]]",
            "CQ": [
              "Does affyPara have at least one specified data input with a format restricted solely to CEL binary or CEL ASCII format?",
              "Is it required that the format of any specified data input for affyPara be exclusively CEL binary or CEL ASCII format?",
              "Can a specified data input for affyPara ever have a format specification other than CEL binary or CEL ASCII format?"
            ]
          },
          {
            "axiom": "affyPara propertyRestrictions [has specified data output some (Graph plot and [has format specification some R data frame])]",
            "CQ": [
              "Is it necessary for affyPara to have at least one specified data output that is both a Graph plot and has a format specification as an R data frame?",
              "Can affyPara provide a specified data output only if it is a Graph plot with an R data frame format specification?",
              "Must every specified data output of affyPara satisfy being a Graph plot and also possess an R data frame as its format specification?"
            ]
          },
          {
            "axiom": "affyPara propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is it required that affyPara is encoded in at least one R language?",
              "Can affyPara exist without being encoded in any R language?",
              "Which R languages are permissible for encoding affyPara?"
            ]
          }
        ]
      },
      "vsn": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[is encoded in some R language]",
            "[has specified data input some Gene expression dataset]",
            "[is executed in some (correction and data normalization and differential expression analysis)]"
          ]
        },
        "description": "vsn is defined as a subclass of software, characterized by being implemented in the R language. It requires specific data input in the form of a gene expression dataset and is executed for tasks including correction, data normalization, and differential expression analysis. This formalization ensures that any instance of vsn is an R-based software tool designed to perform these essential bioinformatics processes on gene expression data.",
        "CQ": [
          {
            "axiom": "vsn subClassOf software",
            "CQ": [
              "Is vsn categorized as a type of software?",
              "What other subclasses are defined under software, including vsn?",
              "Which higher-level categories encompass vsn?"
            ]
          },
          {
            "axiom": "vsn propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is it required that every property restriction in vsn is encoded in at least one R language?",
              "Does a property restriction in vsn necessarily have to be represented in some form of R language?",
              "Can a vsn property restriction exist without being encoded in an R language?"
            ]
          },
          {
            "axiom": "vsn propertyRestrictions [has specified data input some Gene expression dataset]",
            "CQ": [
              "Does a vsn instance require at least one specified data input linking to a gene expression dataset?",
              "Is it necessary for vsn to have the property 'has specified data input' with some gene expression dataset?",
              "Can vsn exist without having any 'has specified data input' property connecting to a gene expression dataset?"
            ]
          },
          {
            "axiom": "vsn propertyRestrictions [is executed in some (correction and data normalization and differential expression analysis)]",
            "CQ": [
              "Is it required that a vsn propertyRestriction is executed in a process that involves correction, data normalization, and differential expression analysis together?",
              "Can a vsn propertyRestriction be executed in any context other than one that simultaneously includes correction, data normalization, and differential expression analysis?",
              "Are all three: correction, data normalization, and differential expression analysis, essential conditions for a process in which vsn propertyRestriction is executed?"
            ]
          }
        ]
      },
      "SAGx": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[implements some (Linear modelling and 't-test')]",
            "[is published by hasValue Bioconductor]",
            "[has specified data input some (Graph plot and [has format specification only R data frame])]",
            "[is encoded in some R language]"
          ]
        },
        "description": "SAGx is defined as a subclass of software that is implemented to provide functionality for both linear modelling and t-test. It is encoded in the R programming language and is published by Bioconductor. SAGx requires data input in the form of graph plots, with the specification that these inputs must be provided only as R data frames. This formalization ensures that any individual classified as SAGx software must meet these criteria with respect to implementation, publishing authority, data input format, and programming language used.",
        "CQ": [
          {
            "axiom": "SAGx subClassOf software",
            "CQ": [
              "Is SAGx classified under the broader category of software?",
              "Which types fall under the classification of software, including SAGx?",
              "What overarching categories encompass SAGx within the ontology?"
            ]
          },
          {
            "axiom": "SAGx propertyRestrictions [implements some (Linear modelling and 't-test')]",
            "CQ": [
              "Is it required that SAGx implements at least one of Linear modelling or t-test?",
              "Can SAGx exist without implementing either Linear modelling or t-test?",
              "Does every instance of SAGx necessarily implement Linear modelling, t-test, or both?"
            ]
          },
          {
            "axiom": "SAGx propertyRestrictions [is published by hasValue Bioconductor]",
            "CQ": [
              "Is every instance of SAGx necessarily published by Bioconductor?",
              "Can an entity be considered SAGx if it is published by an organization other than Bioconductor?",
              "Does the definition of SAGx restrict its publisher exclusively to Bioconductor?"
            ]
          },
          {
            "axiom": "SAGx propertyRestrictions [has specified data input some (Graph plot and [has format specification only R data frame])]",
            "CQ": [
              "Does SAGx require each specified data input to include both a graph plot and have a format specification restricted only to R data frame?",
              "Is it possible for an instance of SAGx to have a specified data input with a format specification other than R data frame?",
              "Can SAGx have a specified data input that either lacks a graph plot or whose format specification is not limited to R data frame?"
            ]
          },
          {
            "axiom": "SAGx propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Must every SAGx be encoded in at least one R language?",
              "Is it possible for a SAGx to exist without being encoded in any R language?",
              "Does SAGx necessarily require the presence of an encoding relationship with an R language?"
            ]
          }
        ]
      },
      "phyloXML": {
        "axiom": {
          "subClassOf": [
            "XML",
            "Phylogenetic tree format (XML)"
          ]
        },
        "description": "phyloXML is a standardized XML-based file format specifically designed for representing phylogenetic trees, networks, and their associated data. It is defined as a subclass of both XML and \"Phylogenetic tree format (XML)\", situating it within the hierarchy of XML-based structured formats and explicitly identifying its domain focus on phylogenetics. This ensures that instances of phyloXML are recognized as conforming to general XML standards while also supporting specialized requirements for phylogenetic data representation.",
        "CQ": [
          {
            "axiom": "phyloXML subClassOf XML",
            "CQ": [
              "Does phyloXML fall under the category of XML languages?",
              "Which XML-based formats include phyloXML as a specialized subset?",
              "What broader classes encompass phyloXML within document markup languages?"
            ]
          },
          {
            "axiom": "phyloXML subClassOf Phylogenetic tree format (XML)",
            "CQ": [
              "Is phyloXML a specialized instance of Phylogenetic tree format (XML)?",
              "Which formats are encompassed by the category of Phylogenetic tree format (XML), including phyloXML?",
              "What broader data format categories does phyloXML fall under?"
            ]
          }
        ]
      },
      "matlab software": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "equivalentClass": [
            "[is encoded in some MATLAB language]"
          ]
        },
        "description": "matlab software is defined as a subclass of software, characterized by being encoded in some MATLAB language. Any individual of this class must be implemented using MATLAB programming language, making it equivalent to software whose code is written in MATLAB. This specification ensures that only software realized through MATLAB language belongs to this class.",
        "CQ": [
          {
            "axiom": "matlab software subClassOf software",
            "CQ": [
              "Is matlab software classified as a more specific member within the category of software?",
              "Which entities are directly categorized as subclasses of software, including matlab software?",
              "What higher-level classes does matlab software fall under according to the ontology?"
            ]
          },
          {
            "axiom": "matlab software equivalentClass [is encoded in some MATLAB language]",
            "CQ": [
              "Is every matlab software instance necessarily encoded in some MATLAB language?",
              "Is matlab software defined exactly as those entities that are encoded in MATLAB language?",
              "Does the class matlab software precisely include all entities that are encoded using MATLAB language?"
            ]
          }
        ]
      },
      "Epitope mapping": {
        "axiom": {
          "subClassOf": [
            "Mapping",
            "Protein sequence feature detection"
          ],
          "propertyRestrictions": [
            "[has topic some Immunology]"
          ]
        },
        "description": "Epitope mapping is defined as a subclass of both Mapping and Protein sequence feature detection, and is characterized by having an association with the topic of Immunology. This class encompasses processes or methods aimed at predicting antigenic determinant sites (epitopes) within protein sequences, a fundamental step frequently employed in vaccine design.",
        "CQ": [
          {
            "axiom": "Epitope mapping subClassOf Mapping",
            "CQ": [
              "Does Epitope mapping fall under the general category of Mapping?",
              "What specialized types are encompassed by Mapping, with reference to Epitope mapping?",
              "Which broader concepts does Epitope mapping inherit from within the hierarchy?"
            ]
          },
          {
            "axiom": "Epitope mapping subClassOf Protein sequence feature detection",
            "CQ": [
              "Does Epitope mapping fall under the broader classification of Protein sequence feature detection?",
              "Which types of feature detection methods in protein sequences encompass Epitope mapping?",
              "Under what higher-level categories is Epitope mapping classified in the context of protein analysis?"
            ]
          },
          {
            "axiom": "Epitope mapping propertyRestrictions [has topic some Immunology]",
            "CQ": [
              "Does every instance of Epitope mapping necessarily pertain to at least one topic within Immunology?",
              "Is it required that Epitope mapping is associated with the subject area of Immunology through its topic property?",
              "Can an Epitope mapping exist if it does not involve any aspect classified under Immunology as a topic?"
            ]
          }
        ]
      },
      "Algorithms for Calculating Microarray Enrichment": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[has specified data output some Graph plot]",
            "[has specified data input some (data and [has format specification some R data frame])]",
            "[is encoded in some R language]",
            "[implements some (Algorithms for Calculating Microarray Enrichment and Chi-square)]"
          ]
        },
        "description": "Algorithms for Calculating Microarray Enrichment is a subclass of software that specifically implements algorithms for analyzing microarray data enrichment, incorporating both its core methodology and Chi-square analysis. Instances of this class must be encoded in the R programming language, take as input data that conforms to the R data frame format, and output at least some form of graphical plot. This class formalization ensures that any software classified here is designed for statistical analysis of microarray enrichment with explicit data format and output requirements.",
        "CQ": [
          {
            "axiom": "Algorithms for Calculating Microarray Enrichment subClassOf software",
            "CQ": [
              "Are Algorithms for Calculating Microarray Enrichment classified as a specialized form of software?",
              "Which software categories include Algorithms for Calculating Microarray Enrichment as subtypes?",
              "What general software classes encompass Algorithms for Calculating Microarray Enrichment?"
            ]
          },
          {
            "axiom": "Algorithms for Calculating Microarray Enrichment propertyRestrictions [has specified data output some Graph plot]",
            "CQ": [
              "Is it required that Algorithms for Calculating Microarray Enrichment produce at least one data output that is a Graph plot?",
              "Can any Algorithm for Calculating Microarray Enrichment exist without generating a Graph plot as a specified data output?",
              "Are Graph plots an essential type of specified data output for Algorithms for Calculating Microarray Enrichment?"
            ]
          },
          {
            "axiom": "Algorithms for Calculating Microarray Enrichment propertyRestrictions [has specified data input some (data and [has format specification some R data frame])]",
            "CQ": [
              "Must every instance of Algorithms for Calculating Microarray Enrichment have at least one data input that is of type data and has a format specification of R data frame?",
              "Are Algorithms for Calculating Microarray Enrichment required to accept as input only data in the form of an R data frame?",
              "Can Algorithms for Calculating Microarray Enrichment operate if the specified data input lacks an R data frame format specification?"
            ]
          },
          {
            "axiom": "Algorithms for Calculating Microarray Enrichment propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Must every instance of 'Algorithms for Calculating Microarray Enrichment' be encoded in at least one R language implementation?",
              "Is it possible for an 'Algorithm for Calculating Microarray Enrichment' to exist without being encoded in the R language?",
              "Are there any algorithms for microarray enrichment that are encoded exclusively in the R language?"
            ]
          },
          {
            "axiom": "Algorithms for Calculating Microarray Enrichment propertyRestrictions [implements some (Algorithms for Calculating Microarray Enrichment and Chi-square)]",
            "CQ": [
              "Does every Algorithms for Calculating Microarray Enrichment implement at least one method that is both an Algorithms for Calculating Microarray Enrichment and a Chi-square algorithm?",
              "Can an Algorithms for Calculating Microarray Enrichment exist without implementing any version of the Chi-square algorithm?",
              "Is it required that Algorithms for Calculating Microarray Enrichment implement a process combining features of both enrichment calculation and Chi-square analysis?"
            ]
          }
        ]
      },
      "dhf": {
        "axiom": {
          "subClassOf": [
            "Textual format",
            "Database hits (sequence) format"
          ]
        },
        "description": "dhf is a subclass of both Textual format and Database hits (sequence) format. It represents a format for EMBASSY domain hits files (DHF), which store sequence hits that have domain classification information, specifically relating the hits to SCOP or CATH protein families as identified from sequence database searches. This format is used for capturing and conveying domain-related relationships identified through such searches.",
        "CQ": [
          {
            "axiom": "dhf subClassOf Textual format",
            "CQ": [
              "Is dhf classified as a type of Textual format?",
              "Which specific formats are categorized under Textual format, such as dhf?",
              "What broader categories encompass dhf within the hierarchy of formats?"
            ]
          },
          {
            "axiom": "dhf subClassOf Database hits (sequence) format",
            "CQ": [
              "Does dhf fall under the broader classification of Database hits (sequence) format?",
              "Which sequence formats have dhf as a more specific variation?",
              "What are the direct parent categories for dhf in terms of sequence formats?"
            ]
          }
        ]
      },
      "affyTiling": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[is published by hasValue Bioconductor]",
            "[is executed in some (correction and data normalization)]",
            "[has specified data output some CSV data set]",
            "[implements some RMA]",
            "[is encoded in some R language]",
            "[has specified data input some [has format specification only (BPMAP and CEL binary format)]]"
          ]
        },
        "description": "affyTiling is defined as a subclass of software that is published by Bioconductor. It is implemented in the R language, and its execution involves tasks related to correction and data normalization. The software implements RMA (Robust Multi-array Average) methods, with specified data input formats restricted to BPMAP and CEL binary formats. The data output produced by affyTiling is in the form of CSV data sets. This ontology representation ensures that any member of the affyTiling class is exclusively characterized by these properties and restrictions.",
        "CQ": [
          {
            "axiom": "affyTiling subClassOf software",
            "CQ": [
              "Is affyTiling classified under the general category of software?",
              "What software categories have more specific subtypes, such as affyTiling?",
              "Which broader categories encompass affyTiling within the context of software?"
            ]
          },
          {
            "axiom": "affyTiling propertyRestrictions [is published by hasValue Bioconductor]",
            "CQ": [
              "Is every instance of affyTiling necessarily published by Bioconductor?",
              "Can affyTiling be published by any source other than Bioconductor according to the property restriction?",
              "Does the ontology require that affyTiling must always have 'is published by' set to Bioconductor?"
            ]
          },
          {
            "axiom": "affyTiling propertyRestrictions [is executed in some (correction and data normalization)]",
            "CQ": [
              "Is it necessary for affyTiling propertyRestrictions to be executed in a process involving both correction and data normalization?",
              "Can affyTiling propertyRestrictions be executed in any scenario where both correction and data normalization occur simultaneously?",
              "Does affyTiling propertyRestrictions require execution exclusively within contexts entailing both correction and data normalization activities?"
            ]
          },
          {
            "axiom": "affyTiling propertyRestrictions [has specified data output some CSV data set]",
            "CQ": [
              "Is it required that affyTiling always produces at least one data output of type CSV data set?",
              "Must every affyTiling instance be associated with some CSV data set as a specified data output?",
              "Can affyTiling exist without generating a CSV data set as part of its specified data output?"
            ]
          },
          {
            "axiom": "affyTiling propertyRestrictions [implements some RMA]",
            "CQ": [
              "Is it required that every affyTiling implements at least one RMA?",
              "Can an affyTiling exist without implementing any RMA?",
              "Does the implementation of some RMA distinguish affyTiling from other concepts?"
            ]
          },
          {
            "axiom": "affyTiling propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is it required that affyTiling be encoded in at least one R language?",
              "Can affyTiling exist without being encoded in any R language?",
              "Must any instance of affyTiling always be associated with some R language encoding?"
            ]
          },
          {
            "axiom": "affyTiling propertyRestrictions [has specified data input some [has format specification only (BPMAP and CEL binary format)]]",
            "CQ": [
              "Must every specified data input for AffyTiling have a format specification that is limited to both BPMAP and CEL binary formats?",
              "Is it required that AffyTiling’s specified data inputs conform exclusively to format specifications that are BPMAP and CEL binary format together?",
              "Can AffyTiling have any specified data input whose format specification is not both BPMAP and CEL binary format simultaneously?"
            ]
          }
        ]
      },
      "RLMM": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[implements some Mahalanobis distance]",
            "[has specified data input some [has format specification only (Xba.CQV and Xba.regions and .raw files)]]",
            "[has specified data output some Graph plot]",
            "[is encoded in some R language]",
            "[is executed in some data normalization]",
            "[is published by hasValue Bioconductor]"
          ]
        },
        "description": "RLMM is a subclass of software, characterized by its implementation of the Mahalanobis distance algorithm. It specifically requires data inputs that conform to the formats Xba.CQV, Xba.regions, and .raw files. The software outputs graph plots as part of its processing. RLMM is encoded in the R language and is designed to be executed within data normalization workflows. Additionally, it is published by Bioconductor. These axioms precisely define RLMM’s purpose and technical attributes within the domain of bioinformatics software.",
        "CQ": [
          {
            "axiom": "RLMM subClassOf software",
            "CQ": [
              "Is RLMM classified as a type of software?",
              "Which entities are subclasses under software that include RLMM?",
              "What broader categories encompass RLMM within the ontology?"
            ]
          },
          {
            "axiom": "RLMM propertyRestrictions [implements some Mahalanobis distance]",
            "CQ": [
              "Is it required for an RLMM to implement at least one Mahalanobis distance property?",
              "Must every RLMM be associated with implementing the Mahalanobis distance?",
              "Can an RLMM exist without having any implementation of Mahalanobis distance?"
            ]
          },
          {
            "axiom": "RLMM propertyRestrictions [has specified data input some [has format specification only (Xba.CQV and Xba.regions and .raw files)]]",
            "CQ": [
              "Is the specified data input for an RLMM propertyRestriction required to have a format specification that includes Xba.CQV, Xba.regions, and .raw files?",
              "Can an RLMM propertyRestriction have a specified data input where the format specification is limited exclusively to Xba.CQV, Xba.regions, and .raw files?",
              "Does an RLMM propertyRestriction necessarily entail that its specified data input must define format specifications corresponding to all three: Xba.CQV, Xba.regions, and .raw files?"
            ]
          },
          {
            "axiom": "RLMM propertyRestrictions [has specified data output some Graph plot]",
            "CQ": [
              "Is it required that an RLMM always has at least one specified data output that is a Graph plot?",
              "Can an RLMM possess a specified data output property linked to a Graph plot?",
              "Does every RLMM instance necessarily produce some data output classified as a Graph plot?"
            ]
          },
          {
            "axiom": "RLMM propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is it required that an RLMM has at least one encoding specified in an R language?",
              "Can an RLMM exist without being encoded in any R language?",
              "Is it possible for an RLMM to be encoded in more than one R language?"
            ]
          },
          {
            "axiom": "RLMM propertyRestrictions [is executed in some data normalization]",
            "CQ": [
              "Is it necessary for RLMM to be executed in some data normalization process?",
              "Does every RLMM instance entail execution within a data normalization context?",
              "Can an RLMM exist without being associated with any data normalization activity?"
            ]
          },
          {
            "axiom": "RLMM propertyRestrictions [is published by hasValue Bioconductor]",
            "CQ": [
              "Is every RLMM required to be published exclusively by Bioconductor?",
              "Can an RLMM be considered valid if it is not published by Bioconductor?",
              "Does the ontology allow any publisher other than Bioconductor for RLMM instances?"
            ]
          }
        ]
      },
      "Restriction map": {
        "axiom": {
          "subClassOf": [
            "Sequence map",
            "Sequence image"
          ]
        },
        "description": "Restriction map is defined as a subclass of both Sequence map and Sequence image, meaning it inherits characteristics of representing ordered features on a nucleic acid sequence and being a visual representation. A restriction map specifically depicts the locations of restriction enzyme cleavage sites (restriction sites) along a nucleic acid sequence, providing a visual overview of where enzymes cut within the sequence.",
        "CQ": [
          {
            "axiom": "Restriction map subClassOf Sequence map",
            "CQ": [
              "Does Restriction map fall under the classification of Sequence map?",
              "Which map types are more specific than Sequence map, such as Restriction map?",
              "What broader mapping categories include Restriction map as a member?"
            ]
          },
          {
            "axiom": "Restriction map subClassOf Sequence image",
            "CQ": [
              "Is Restriction map categorized under Sequence image?",
              "Which specific subclasses are encompassed by Sequence image such as Restriction map?",
              "What broader categories does Restriction map fall under?"
            ]
          }
        ]
      },
      "Organism name": {
        "axiom": {
          "subClassOf": [
            "Name",
            "Organism identifier"
          ]
        },
        "description": "Organism name is defined as a subclass of both Name and Organism identifier. It represents the name assigned to an organism or a group of organisms, serving as an identifier within biological contexts. This class formalizes organism names as entities that are both names and identifiers specific to organisms.",
        "CQ": [
          {
            "axiom": "Organism name subClassOf Name",
            "CQ": [
              "Is Organism name categorized as a subtype of Name?",
              "What broader classes does Organism name belong to within the naming hierarchy?",
              "Which specific kinds of Name include Organism name as a subclass?"
            ]
          },
          {
            "axiom": "Organism name subClassOf Organism identifier",
            "CQ": [
              "Is Organism identifier a generalization of Organism name?",
              "What identifiers encompass Organism name as a more specific instance?",
              "Which classes are broader than Organism name, including Organism identifier?"
            ]
          }
        ]
      },
      "Medline Display Format": {
        "axiom": {
          "subClassOf": [
            "Textual format",
            "Bibliographic reference format"
          ]
        },
        "description": "Medline Display Format is a type of textual and bibliographic reference format specifically designed for presenting abstracts and citation information from the Medline database. This format ensures that bibliographic reference information, including essential citation details, is systematically included for scientific articles indexed in Medline.",
        "CQ": [
          {
            "axiom": "Medline Display Format subClassOf Textual format",
            "CQ": [
              "Is Medline Display Format categorized as a type of Textual format?",
              "Which specific formats fall under the category of Textual format, including Medline Display Format?",
              "What broader format classes does Medline Display Format belong to?"
            ]
          },
          {
            "axiom": "Medline Display Format subClassOf Bibliographic reference format",
            "CQ": [
              "Does Medline Display Format fall under the broader classification of Bibliographic reference format?",
              "Which specific formats are categorized as Bibliographic reference format, including Medline Display Format?",
              "What are the overarching categories that Medline Display Format is a specialized instance of?"
            ]
          }
        ]
      },
      "Codon usage table ID": {
        "axiom": {
          "subClassOf": [
            "Identifier (typed)"
          ],
          "propertyRestrictions": [
            "[is identifier of some Genetic code]",
            "[is identifier of some Codon usage table]"
          ]
        },
        "description": "Codon usage table ID is a subclass of Identifier (typed), representing an identifier specifically used for codon usage tables and genetic codes. Each instance of this class is characterized by being an identifier of at least one genetic code or codon usage table. This class formalizes identifiers used to denote codon usage tables, such as those referring to specific genetic codes.",
        "CQ": [
          {
            "axiom": "Codon usage table ID subClassOf Identifier (typed)",
            "CQ": [
              "Does Codon usage table ID qualify as a kind of Identifier (typed)?",
              "Which identifiers encompass Codon usage table ID as a specific form?",
              "Within the classification of Identifier (typed), what subclasses exist, including Codon usage table ID?"
            ]
          },
          {
            "axiom": "Codon usage table ID propertyRestrictions [is identifier of some Genetic code]",
            "CQ": [
              "Is every Codon usage table ID required to serve as an identifier for at least one Genetic code?",
              "Can a Codon usage table ID exist without being associated as an identifier for any Genetic code?",
              "Does the ontology entail that there must be a Genetic code for which a given Codon usage table ID is the identifier?"
            ]
          },
          {
            "axiom": "Codon usage table ID propertyRestrictions [is identifier of some Codon usage table]",
            "CQ": [
              "Does every Codon usage table ID necessarily refer to at least one Codon usage table as its identifier?",
              "Is it required that each instance of Codon usage table ID serves as an identifier for a Codon usage table?",
              "Can a Codon usage table exist without being identified by a Codon usage table ID?"
            ]
          }
        ]
      },
      "vbmp": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[is executed in some cross validation]",
            "[has specified data input some [has format specification only R data frame]]",
            "[has specified data output some (Graph plot and [has format specification only R data frame])]",
            "[is published by hasValue Bioconductor]",
            "[is encoded in some R language]",
            "[implements some Multinomial probit regression with Gaussian Process priors]"
          ]
        },
        "description": "vbmp is a subclass of software designed specifically for execution within cross validation processes. It is characterized by accepting data input strictly in the format of R data frames and producing outputs that include both graph plots and R data frames. The software is published by Bioconductor, is implemented in the R programming language, and employs Multinomial probit regression with Gaussian Process priors as a core method. These axioms ensure that vbmp is tightly integrated with R-centric workflows and statistical modeling techniques, particularly within the Bioconductor ecosystem.",
        "CQ": [
          {
            "axiom": "vbmp subClassOf software",
            "CQ": [
              "Is vbmp categorized as a type of software?",
              "Which software subclasses does vbmp belong to?",
              "What broader software categories encompass vbmp?"
            ]
          },
          {
            "axiom": "vbmp propertyRestrictions [is executed in some cross validation]",
            "CQ": [
              "Is it required that every vbmp instance must be executed in at least one cross validation?",
              "Can a vbmp exist without being executed in any cross validation?",
              "For any given vbmp, does there necessarily exist a cross validation where it is executed?"
            ]
          },
          {
            "axiom": "vbmp propertyRestrictions [has specified data input some [has format specification only R data frame]]",
            "CQ": [
              "Is every specified data input of a VBMP required to have a format specification that allows only R data frames?",
              "Can a specified data input associated with VBMP possess any format specification apart from R data frame?",
              "Does VBMP necessarily relate, through its specified data input property, to inputs restricted exclusively to the R data frame format?"
            ]
          },
          {
            "axiom": "vbmp propertyRestrictions [has specified data output some (Graph plot and [has format specification only R data frame])]",
            "CQ": [
              "Must every VBMP object produce some data output that includes both a graph plot and has the format specification restricted to R data frame?",
              "Is it required that VBMP's specified data output always comprise a graph plot whose format specification is solely limited to R data frame?",
              "Can a VBMP meet its output specification if it generates a graph plot in a format other than R data frame?"
            ]
          },
          {
            "axiom": "vbmp propertyRestrictions [is published by hasValue Bioconductor]",
            "CQ": [
              "Is every vbmp entity necessarily published by Bioconductor?",
              "Does the property restriction for vbmp ensure it can only be published by Bioconductor?",
              "Are vbmp instances excluded if they are published by any entity other than Bioconductor?"
            ]
          },
          {
            "axiom": "vbmp propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is every instance of a vbmp propertyRestriction necessarily encoded in at least one R language?",
              "Can a vbmp propertyRestriction exist without being encoded in some R language?",
              "Does a vbmp propertyRestriction require encoding in any R language to be valid?"
            ]
          },
          {
            "axiom": "vbmp propertyRestrictions [implements some Multinomial probit regression with Gaussian Process priors]",
            "CQ": [
              "Is every vbmp instance required to implement at least one Multinomial probit regression with Gaussian Process priors?",
              "Can a vbmp exist without implementing any Multinomial probit regression that uses Gaussian Process priors?",
              "Does the ontology assert that vbmp must implement some form of Multinomial probit regression with Gaussian Process priors?"
            ]
          }
        ]
      },
      "Structure prediction": {
        "axiom": {
          "subClassOf": [
            "Prediction and recognition",
            "Structure analysis",
            "Structure analysis"
          ],
          "propertyRestrictions": [
            "[has output some Structure]",
            "[has topic some Structure prediction]"
          ]
        },
        "description": "Structure prediction is defined as a subclass of both Prediction and recognition and Structure analysis, emphasizing its role within analytical and predictive frameworks. It is characterized by outputs that must include some form of Structure, and its topical focus centers specifically on structure prediction. The class addresses topics related to the prediction of molecular secondary or tertiary structure, uniting aspects of analysis and prediction to determine structural features of molecules.",
        "CQ": [
          {
            "axiom": "Structure prediction subClassOf Prediction and recognition",
            "CQ": [
              "Is Structure prediction classified under the broader type of Prediction and recognition?",
              "Which specific kinds of Prediction and recognition encompass Structure prediction?",
              "What are the more general categories that Structure prediction is a member of?"
            ]
          },
          {
            "axiom": "Structure prediction subClassOf Structure analysis",
            "CQ": [
              "Does Structure prediction represent a more specific form of Structure analysis?",
              "Which subclasses are encompassed by Structure analysis, for example, Structure prediction?",
              "What broader categories does Structure prediction fall under within the ontology?"
            ]
          },
          {
            "axiom": "Structure prediction propertyRestrictions [has output some Structure]",
            "CQ": [
              "Is it required that every structure prediction has at least one output which is a Structure?",
              "Does the property ‘has output’ for structure predictions necessarily involve some instance of Structure as an output?",
              "Can a structure prediction exist without producing any output of type Structure?"
            ]
          },
          {
            "axiom": "Structure prediction propertyRestrictions [has topic some Structure prediction]",
            "CQ": [
              "Must entities with a structure prediction property restriction always possess the property 'has topic' linking them to Structure prediction?",
              "Is it required that any entity characterized by the structure prediction property restriction has at least one connection via 'has topic' to Structure prediction?",
              "Can an individual under the structure prediction property restriction exist without being associated, through 'has topic', with Structure prediction?"
            ]
          }
        ]
      },
      "bigWig": {
        "axiom": {
          "subClassOf": [
            "Binary format",
            "Sequence annotation track format"
          ]
        },
        "description": "bigWig is a file format defined as a subclass of both Binary format and Sequence annotation track format. It is designed for storing large sequence annotation tracks, where a numerical value is associated with each position in the sequence. The format is similar in function to the textual WIG format but provides a binary alternative for efficient storage and retrieval of large-scale genomic data.",
        "CQ": [
          {
            "axiom": "bigWig subClassOf Binary format",
            "CQ": [
              "Is bigWig classified under the broader Binary format category?",
              "What Binary format subclasses exist, and does this include bigWig?",
              "Which higher-level types encompass bigWig as a more specific instance?"
            ]
          },
          {
            "axiom": "bigWig subClassOf Sequence annotation track format",
            "CQ": [
              "Is bigWig classified as a subtype under Sequence annotation track format?",
              "Which specific formats are categorized under Sequence annotation track format, such as bigWig?",
              "To what broader format group does bigWig belong within the ontology structure?"
            ]
          }
        ]
      },
      "Book ID": {
        "axiom": {
          "subClassOf": [
            "Identifier (typed)",
            "Accession"
          ]
        },
        "description": "Book ID is defined as a subclass of both Identifier (typed) and Accession, representing a unique identifier assigned specifically to a book. This class ensures that each book instance can be distinctly referenced and accessed via its Book ID, supporting precise identification and management within collections or systems.",
        "CQ": [
          {
            "axiom": "Book ID subClassOf Identifier (typed)",
            "CQ": [
              "Is every Book ID classified under the broader group of Identifier?",
              "What identifiers specifically fall under the category of Book ID?",
              "Which superordinate classes does Book ID belong to in the ontology?"
            ]
          },
          {
            "axiom": "Book ID subClassOf Accession",
            "CQ": [
              "Is Book ID classified under the category of Accession?",
              "What are all the subclasses that fall within Accession, such as Book ID?",
              "Which broader classes does Book ID derive from in the hierarchy?"
            ]
          }
        ]
      },
      "2bit": {
        "axiom": {
          "subClassOf": [
            "Raw sequence format",
            "Binary format"
          ]
        },
        "description": "2bit is a binary format specifically designed for storing nucleotide sequences, utilizing 2 bits per nucleotide to enable compact representation. It is formally defined as a subclass of both Raw sequence format and Binary format. In addition to encoding standard nucleotide bases, the 2bit format allows for the representation of unknown nucleotides and supports lower-case masking to indicate regions of reduced confidence or biological relevance.",
        "CQ": [
          {
            "axiom": "2bit subClassOf Raw sequence format",
            "CQ": [
              "Is 2bit categorized under the broader class of Raw sequence format?",
              "Which data formats are specific types of Raw sequence format, including 2bit?",
              "What general format classifications does 2bit inherit within the ontology?"
            ]
          },
          {
            "axiom": "2bit subClassOf Binary format",
            "CQ": [
              "Is 2bit classified as a specific type within the Binary format category?",
              "What are the direct and indirect subtypes encompassed by Binary format, such as 2bit?",
              "Which higher-level categories include 2bit as a member, with respect to Binary format?"
            ]
          }
        ]
      },
      "Structural variation": {
        "axiom": {
          "subClassOf": [
            "Genetic variation",
            "Chromosomes"
          ]
        },
        "description": "Structural variation is defined as a subclass of both Genetic variation and Chromosomes, representing changes in the structure of chromosomes. This class encompasses various types of chromosomal alterations, including deletions, duplications, copy-number variants, insertions, inversions, and translocations. These variations can be either microscopic or submicroscopic, reflecting a broad spectrum of structural differences within chromosomes that contribute to genetic diversity.",
        "CQ": [
          {
            "axiom": "Structural variation subClassOf Genetic variation",
            "CQ": [
              "Is Structural variation categorized as a type of Genetic variation?",
              "Which specific variations fall under the broader class of Genetic variation, including Structural variation?",
              "What higher-level categories encompass Structural variation?"
            ]
          },
          {
            "axiom": "Structural variation subClassOf Chromosomes",
            "CQ": [
              "Does Structural variation fall under the general category of Chromosomes?",
              "What are the specific types that are subclasses of Chromosomes, such as Structural variation?",
              "Which broader categories include Structural variation as a member?"
            ]
          }
        ]
      },
      "MVCClass": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[has specified data output some (data and [has format specification some R data frame])]",
            "[is executed in some data visualization]",
            "[is encoded in some R language]",
            "[has specified data input some (data and [has format specification some R data frame])]"
          ]
        },
        "description": "MVCClass is defined as a subclass of software, characterized by several property restrictions. Any member of MVCClass must have specified data input and output, both of which are data entities that conform to the R data frame format specification. Additionally, each MVCClass is executed within a data visualization context and is encoded in the R programming language. This ensures MVCClass instances are dedicated software components facilitating R data frame inputs and outputs, utilized specifically in R-based data visualization processes.",
        "CQ": [
          {
            "axiom": "MVCClass subClassOf software",
            "CQ": [
              "Is MVCClass classified as a kind of software?",
              "Which classes are subtypes under the software category, such as MVCClass?",
              "What higher-level categories does MVCClass fall under in the ontology?"
            ]
          },
          {
            "axiom": "MVCClass propertyRestrictions [has specified data output some (data and [has format specification some R data frame])]",
            "CQ": [
              "Is every MVCClass required to provide at least one data output that is a data instance formatted as an R data frame?",
              "Can an MVCClass be considered valid if it produces a data output that does not adhere to the R data frame format specification?",
              "Does the requirement for MVCClass data output necessitate both the presence of data and its conformity to the R data frame format?"
            ]
          },
          {
            "axiom": "MVCClass propertyRestrictions [is executed in some data visualization]",
            "CQ": [
              "Is every MVCClass required to be executed in at least one data visualization?",
              "Are there any MVCClasses that do not participate in the execution of data visualizations?",
              "Must an MVCClass always establish an execution relationship with an instance of data visualization?"
            ]
          },
          {
            "axiom": "MVCClass propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is it required for an MVCClass to be encoded in at least one R language?",
              "Can an MVCClass exist without being associated with any R language as its encoding?",
              "Does every MVCClass necessarily have an encoding relationship with some instance of R language?"
            ]
          },
          {
            "axiom": "MVCClass propertyRestrictions [has specified data input some (data and [has format specification some R data frame])]",
            "CQ": [
              "Is it required for an MVCClass with a specified data input to always include data that has a format specification of an R data frame?",
              "Does any specified data input to an MVCClass necessarily relate to data possessing a format specification of an R data frame?",
              "Can an MVCClass have a specified data input that is not data typed with a format specification of an R data frame?"
            ]
          }
        ]
      },
      "Enzyme kinetics data": {
        "axiom": {
          "subClassOf": [
            "Protein property",
            "Reaction data"
          ]
        },
        "description": "Enzyme kinetics data is a subclass of both Protein property and Reaction data, representing data concerning chemical reactions catalysed by enzymes. It serves as a broad, general data type and is typically used as a placeholder for more specific forms of enzyme-catalysed reaction data. The class formalizes that its members are intrinsically related to proteins (as enzymes) and chemical reaction processes.",
        "CQ": [
          {
            "axiom": "Enzyme kinetics data subClassOf Protein property",
            "CQ": [
              "Does enzyme kinetics data fall under the category of protein property?",
              "Which specific types of protein property include enzyme kinetics data as a subclass?",
              "What broader classes encompass enzyme kinetics data within the ontology?"
            ]
          },
          {
            "axiom": "Enzyme kinetics data subClassOf Reaction data",
            "CQ": [
              "Does Enzyme kinetics data qualify as a more specific form of Reaction data?",
              "Which data types are categorized under Reaction data, including Enzyme kinetics data?",
              "To which higher-level data categories does Enzyme kinetics data pertain?"
            ]
          }
        ]
      },
      "RFAM accession": {
        "axiom": {
          "subClassOf": [
            "Accession",
            "RNA family identifier"
          ]
        },
        "description": "RFAM accession is a subclass of Accession and serves as an RNA family identifier. It represents the stable accession number assigned to an RNA family entry in the RFAM database, ensuring persistent and unique identification for each RNA family entry within the database.",
        "CQ": [
          {
            "axiom": "RFAM accession subClassOf Accession",
            "CQ": [
              "Does RFAM accession fall under the category of Accession?",
              "What are the more specific forms of Accession, such as RFAM accession?",
              "Which higher-level categories include RFAM accession?"
            ]
          },
          {
            "axiom": "RFAM accession subClassOf RNA family identifier",
            "CQ": [
              "Does RFAM accession fall under the category of RNA family identifier?",
              "Which identifiers are classified as more specific types of RNA family identifier, including RFAM accession?",
              "What are the broader identifier categories that include RFAM accession?"
            ]
          }
        ]
      },
      "Sequence motif format": {
        "axiom": {
          "subClassOf": [
            "Format (typed)"
          ],
          "propertyRestrictions": [
            "[is format of some Sequence motif]"
          ]
        },
        "description": "Sequence motif format is a subclass of Format (typed), representing formats specifically used to describe sequence motifs. Every instance of Sequence motif format is constrained by the property that it must be a format of at least one Sequence motif. This ensures that Sequence motif formats are exclusively intended for representing or storing sequence motif data, distinguishing them from other format types with different content foci.",
        "CQ": [
          {
            "axiom": "Sequence motif format subClassOf Format (typed)",
            "CQ": [
              "Is Sequence motif format a specialized form of Format (typed)?",
              "Which Format (typed) subclasses encompass Sequence motif format?",
              "What more general classes does Sequence motif format belong to?"
            ]
          },
          {
            "axiom": "Sequence motif format propertyRestrictions [is format of some Sequence motif]",
            "CQ": [
              "Is every Sequence motif required to be the format for at least one format property?",
              "Does there exist a format property that is the format of a Sequence motif?",
              "Must each Sequence motif be associated with a specific format through the 'is format of' relationship?"
            ]
          }
        ]
      },
      "RNA secondary structure visualisation": {
        "axiom": {
          "subClassOf": [
            "RNA secondary structure analysis",
            "Visualisation"
          ],
          "propertyRestrictions": [
            "[has input some RNA secondary structure]"
          ]
        },
        "description": "RNA secondary structure visualisation is defined as a subclass of both RNA secondary structure analysis and Visualisation. It represents processes or tools that specifically visualize RNA secondary structures, including features such as knots and pseudoknots. Members of this class operate with at least one RNA secondary structure as input, ensuring the visualization pertains directly to RNA configurations. This class formalizes the role of visualization within the broader context of RNA structure analysis.",
        "CQ": [
          {
            "axiom": "RNA secondary structure visualisation subClassOf RNA secondary structure analysis",
            "CQ": [
              "Is RNA secondary structure visualisation classified as a type of RNA secondary structure analysis?",
              "What specialised activities fall under RNA secondary structure analysis, including RNA secondary structure visualisation?",
              "Which broader categories encompass RNA secondary structure visualisation?"
            ]
          },
          {
            "axiom": "RNA secondary structure visualisation subClassOf Visualisation",
            "CQ": [
              "Does RNA secondary structure visualisation fall under the category of Visualisation?",
              "What are the specific types of Visualisation that include RNA secondary structure visualisation?",
              "Which broader visualisation categories encompass RNA secondary structure visualisation?"
            ]
          },
          {
            "axiom": "RNA secondary structure visualisation propertyRestrictions [has input some RNA secondary structure]",
            "CQ": [
              "Is it required that an RNA secondary structure visualisation has at least one input that is an RNA secondary structure?",
              "Can an RNA secondary structure visualisation exist if it does not have any RNA secondary structure as input?",
              "Does every RNA secondary structure visualisation necessarily operate on some RNA secondary structure as its input?"
            ]
          }
        ]
      },
      "InChI": {
        "axiom": {
          "subClassOf": [
            "Chemical formula format",
            "Textual format"
          ]
        },
        "description": "InChI is defined as a subclass of both Chemical formula format and Textual format, representing a chemical structure described using the IUPAC International Chemical Identifier (InChI) line notation. This class characterizes textual representations of chemical structures in a standardized, machine-readable format as specified by IUPAC guidelines.",
        "CQ": [
          {
            "axiom": "InChI subClassOf Chemical formula format",
            "CQ": [
              "Is InChI classified as a more specific type of Chemical formula format?",
              "What chemical formula formats encompass InChI as a subset?",
              "Which broader categories does InChI, as a format, fall under?"
            ]
          },
          {
            "axiom": "InChI subClassOf Textual format",
            "CQ": [
              "Does InChI fall under the broader classification of Textual format?",
              "Which formats are considered specialized forms within the category of Textual format, including InChI?",
              "What are the more general categories that encompass InChI as a type?"
            ]
          }
        ]
      },
      "Reference map name (SWISS-2DPAGE)": {
        "axiom": {
          "subClassOf": [
            "Name",
            "Gel ID"
          ]
        },
        "description": "Reference map name (SWISS-2DPAGE) is defined as a subclass of both Name and Gel ID, indicating it inherits characteristics from these classes. It specifically refers to the name assigned to a reference map gel within the SWISS-2DPAGE database, uniquely identifying such gels for reference and data integration purposes.",
        "CQ": [
          {
            "axiom": "Reference map name (SWISS-2DPAGE) subClassOf Name",
            "CQ": [
              "Is Reference map name (SWISS-2DPAGE) classified as a type of Name?",
              "Which specific subclasses are encompassed by the Name category, such as Reference map name (SWISS-2DPAGE)?",
              "What broader categories include Reference map name (SWISS-2DPAGE) as a subclass?"
            ]
          },
          {
            "axiom": "Reference map name (SWISS-2DPAGE) subClassOf Gel ID",
            "CQ": [
              "Does Reference map name (SWISS-2DPAGE) fall under the category of Gel ID?",
              "Which types are classified as more specific than Gel ID, such as Reference map name (SWISS-2DPAGE)?",
              "To which broader class or classes does Reference map name (SWISS-2DPAGE) belong?"
            ]
          }
        ]
      },
      "Python 2.6": {
        "axiom": {
          "subClassOf": [
            "Python"
          ],
          "propertyRestrictions": [
            "[has version hasValue Python version 2.6]"
          ]
        },
        "description": "Python 2.6 is defined as a subclass of Python and is distinguished by having the property 'has version' with the specific value 'Python version 2.6'. Any individual belonging to this class must be a Python entity whose version is explicitly set to 2.6. This formalization unambiguously identifies entities representing the Python 2.6 release.",
        "CQ": [
          {
            "axiom": "Python 2.6 subClassOf Python",
            "CQ": [
              "Does Python 2.6 fall under the broader classification of Python?",
              "Which versions or variants are subclasses of Python, including Python 2.6?",
              "Of which higher-level software languages is Python 2.6 a specific instance?"
            ]
          },
          {
            "axiom": "Python 2.6 propertyRestrictions [has version hasValue Python version 2.6]",
            "CQ": [
              "Does Python 2.6 necessarily have the property 'has version' with the value Python version 2.6?",
              "Can a system described as Python 2.6 have a 'has version' property relating to any value besides Python version 2.6?",
              "Is it required that all instances of Python 2.6 are uniquely associated with the version value 'Python version 2.6' through the 'has version' property?"
            ]
          }
        ]
      },
      "ChipReader 3.1": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[output of some (software publishing process and [has participant hasValue Bio-Rad Laboratories, Inc.])]"
          ]
        },
        "description": "ChipReader 3.1 is defined as a subclass of software. Any instance of ChipReader 3.1 is the output of at least one software publishing process in which Bio-Rad Laboratories, Inc. is a participant. This formalization captures the provenance of ChipReader 3.1, ensuring that each instance is uniquely associated with publishing activities involving Bio-Rad Laboratories, Inc.",
        "CQ": [
          {
            "axiom": "ChipReader 3.1 subClassOf software",
            "CQ": [
              "Is ChipReader 3.1 classified under the category of software?",
              "What are the specific subclasses that fall within software, such as ChipReader 3.1?",
              "Which broader classes encompass ChipReader 3.1?"
            ]
          },
          {
            "axiom": "ChipReader 3.1 propertyRestrictions [output of some (software publishing process and [has participant hasValue Bio-Rad Laboratories, Inc.])]",
            "CQ": [
              "Does a ChipReader always produce output from at least one software publishing process that involves Bio-Rad Laboratories, Inc. as a participant?",
              "Can a ChipReader generate any output without being linked to a software publishing process in which Bio-Rad Laboratories, Inc. participates?",
              "Is it necessary for every ChipReader output to originate from a software publishing process that includes Bio-Rad Laboratories, Inc. as a participant?"
            ]
          }
        ]
      },
      "Phylogenetic tree distances calculation": {
        "axiom": {
          "subClassOf": [
            "Phylogenetic tree comparison"
          ],
          "propertyRestrictions": [
            "[has output some Phylogenetic tree distances]"
          ]
        },
        "description": "Phylogenetic tree distances calculation is a subclass of Phylogenetic tree comparison, representing the process of comparing two or more phylogenetic trees specifically to calculate distances between them. Any instance of this class must have at least one output that is a type of Phylogenetic tree distances. This formalizes the concept of measuring differences or similarities between phylogenetic trees by producing quantitative distance values as results.",
        "CQ": [
          {
            "axiom": "Phylogenetic tree distances calculation subClassOf Phylogenetic tree comparison",
            "CQ": [
              "Is phylogenetic tree distances calculation classified under the broader activity of phylogenetic tree comparison?",
              "What are the specific methods that fall within phylogenetic tree comparison, such as phylogenetic tree distances calculation?",
              "Which general categories encompass phylogenetic tree distances calculation?"
            ]
          },
          {
            "axiom": "Phylogenetic tree distances calculation propertyRestrictions [has output some Phylogenetic tree distances]",
            "CQ": [
              "Does every instance of 'Phylogenetic tree distances calculation propertyRestrictions' necessarily produce at least one output of type 'Phylogenetic tree distances'?",
              "Is it required that a 'Phylogenetic tree distances calculation propertyRestrictions' process has an output that is a 'Phylogenetic tree distances' entity?",
              "Can a 'Phylogenetic tree distances calculation propertyRestrictions' exist without generating any 'Phylogenetic tree distances' as output?"
            ]
          }
        ]
      },
      "GIF": {
        "axiom": {
          "subClassOf": [
            "Binary format",
            "raster image format"
          ]
        },
        "description": "GIF (Graphics Interchange Format) is a binary format and a type of raster image format. As a subclass of both 'Binary format' and 'raster image format', GIF files encode images in a way suitable for binary data storage and manipulation, and specifically for raster-based rendering. This class defines digital image files that use the GIF specification for encoding, widely recognized for supporting simple graphics and animations.",
        "CQ": [
          {
            "axiom": "GIF subClassOf Binary format",
            "CQ": [
              "Is GIF classified as a type of Binary format?",
              "Which file formats are categorized under Binary format, including GIF?",
              "What broader format categories does GIF fall under in the ontology?"
            ]
          },
          {
            "axiom": "GIF subClassOf raster image format",
            "CQ": [
              "Is GIF classified under the group of raster image formats?",
              "Which image formats are specified as subtypes of raster image format, and does GIF appear among them?",
              "What broader format categories does GIF belong to within the image format hierarchy?"
            ]
          }
        ]
      },
      "Genetic code identifier": {
        "axiom": {
          "subClassOf": [
            "Identifier (typed)"
          ],
          "propertyRestrictions": [
            "[is identifier of some Genetic code]"
          ]
        },
        "description": "Genetic code identifier is defined as a subclass of Identifier (typed) and is characterized by the property that it acts as an identifier of some Genetic code. Members of this class are used to uniquely identify genetic codes, ensuring precise association between the identifier and the represented genetic code. This formalization supports the role of such identifiers within ontological and bioinformatics contexts.",
        "CQ": [
          {
            "axiom": "Genetic code identifier subClassOf Identifier (typed)",
            "CQ": [
              "Does Genetic code identifier represent a more specific type within the overarching class of Identifier?",
              "Which identifiers include Genetic code identifier as a particular example?",
              "What general classification does Genetic code identifier fall under in the context of identifiers?"
            ]
          },
          {
            "axiom": "Genetic code identifier propertyRestrictions [is identifier of some Genetic code]",
            "CQ": [
              "Is every genetic code identifier necessarily associated with at least one genetic code?",
              "Can a genetic code identifier exist without identifying a genetic code?",
              "Are there genetic entities other than genetic codes that may be identified by a genetic code identifier?"
            ]
          }
        ]
      },
      "unambiguous sequence": {
        "axiom": {
          "subClassOf": [
            "Textual format",
            "Raw sequence format"
          ]
        },
        "description": "unambiguous sequence is a subclass of both Textual format and Raw sequence format. It represents a molecular sequence expressed using an alphabet that may include unknown positions but explicitly excludes any ambiguity characters. This ensures that while some sequence positions can be unspecified, there is no use of letters or codes that represent multiple possible residues or bases at a single position.",
        "CQ": [
          {
            "axiom": "unambiguous sequence subClassOf Textual format",
            "CQ": [
              "Is unambiguous sequence categorized under the broader class of Textual format?",
              "Which types are directly more general than unambiguous sequence, specifically including Textual format?",
              "What specific subcategories does Textual format encompass, such as unambiguous sequence?"
            ]
          },
          {
            "axiom": "unambiguous sequence subClassOf Raw sequence format",
            "CQ": [
              "Is unambiguous sequence classified as a specific type of Raw sequence format?",
              "Which Raw sequence format subclasses include unambiguous sequence?",
              "What broader categories does unambiguous sequence fall under within Raw sequence format?"
            ]
          }
        ]
      },
      "codata": {
        "axiom": {
          "subClassOf": [
            "Textual format",
            "Sequence record format (text)"
          ]
        },
        "description": "codata is defined as a subclass of both Textual format and Sequence record format (text), indicating that it is a text-based file format specifically designed for representing sequence records. It is referenced as the \"Codata entry format,\" meaning that its primary use is to encode and store sequence data in a structured text format, consistent with conventions of both its parent classes.",
        "CQ": [
          {
            "axiom": "codata subClassOf Textual format",
            "CQ": [
              "Does codata represent a specific kind of Textual format?",
              "Which Textual format subclasses include codata?",
              "What are the broader format categories that codata is associated with?"
            ]
          },
          {
            "axiom": "codata subClassOf Sequence record format (text)",
            "CQ": [
              "Is codata a specialization of Sequence record format?",
              "Which record formats are classified as types of Sequence record format, including codata?",
              "What broader record format categories encompass codata?"
            ]
          }
        ]
      },
      "iHOP symbol": {
        "axiom": {
          "subClassOf": [
            "Gene ID",
            "Identifier (hybrid)",
            "Protein accession"
          ]
        },
        "description": "iHOP symbol is defined as a unique identifier of a protein or gene used in the iHOP database. Formally, this class is a subclass of Gene ID, Identifier (hybrid), and Protein accession, indicating that any iHOP symbol instance can be considered a specialized identifier spanning gene and protein contexts. This class captures identifiers with hybrid characteristics, linking gene and protein entities within the iHOP database.",
        "CQ": [
          {
            "axiom": "iHOP symbol subClassOf Gene ID",
            "CQ": [
              "Is iHOP symbol classified under the broader category of Gene ID?",
              "Which identifiers are more specific classifications within Gene ID, such as iHOP symbol?",
              "What general types does iHOP symbol fall under in the context of biological identifiers?"
            ]
          },
          {
            "axiom": "iHOP symbol subClassOf Identifier (hybrid)",
            "CQ": [
              "Does iHOP symbol belong to the broader class of Identifier?",
              "Which subclasses fall under the Identifier category, such as iHOP symbol?",
              "What are the superclass categories for the concept iHOP symbol?"
            ]
          },
          {
            "axiom": "iHOP symbol subClassOf Protein accession",
            "CQ": [
              "Is Protein accession a broader category that encompasses iHOP symbol as a more specific type?",
              "Which subclasses fall under the category of Protein accession, such as iHOP symbol?",
              "What are the more general categories to which iHOP symbol belongs?"
            ]
          }
        ]
      },
      "unambiguous pure rna sequence": {
        "axiom": {
          "subClassOf": [
            "unambiguous pure",
            "rna"
          ]
        },
        "description": "unambiguous pure rna sequence is a subclass of both unambiguous pure and rna. Members of this class are defined as RNA sequences composed strictly of the characters A, C, G, and U, allowing for possible unknown positions but excluding any ambiguity or non-sequence characters. This ensures that all instances represent RNA sequences that are both unambiguous and free from characters outside the canonical RNA alphabet.",
        "CQ": [
          {
            "axiom": "unambiguous pure rna sequence subClassOf unambiguous pure",
            "CQ": [
              "Is unambiguous pure a direct superclass of unambiguous pure rna sequence?",
              "Which subclasses fall under the category of unambiguous pure, such as unambiguous pure rna sequence?",
              "What are the broader classes that include unambiguous pure rna sequence?"
            ]
          },
          {
            "axiom": "unambiguous pure rna sequence subClassOf rna",
            "CQ": [
              "Is unambiguous pure rna sequence classified as a type of rna?",
              "Which subclasses are found under rna, specifically including unambiguous pure rna sequence?",
              "What are the parent classes that unambiguous pure rna sequence is associated with?"
            ]
          }
        ]
      },
      "HMMER profile alignment (sequences versus HMMs)": {
        "axiom": {
          "subClassOf": [
            "Textual format",
            "Sequence-profile alignment format"
          ]
        },
        "description": "HMMER profile alignment (sequences versus HMMs) is a subclass of both Textual format and Sequence-profile alignment format. It is defined as a format used by the HMMER package for aligning biological sequences against hidden Markov model (HMM) databases. This class characterizes file formats that explicitly describe the alignment between input sequences and HMM profiles, supporting bioinformatics analyses where sequence-to-profile comparisons are necessary.",
        "CQ": [
          {
            "axiom": "HMMER profile alignment (sequences versus HMMs) subClassOf Textual format",
            "CQ": [
              "Does HMMER profile alignment (sequences versus HMMs) fall within the scope of Textual format?",
              "What specific formats are categorized under Textual format, including HMMER profile alignment (sequences versus HMMs)?",
              "Which higher-level categories encompass HMMER profile alignment (sequences versus HMMs)?"
            ]
          },
          {
            "axiom": "HMMER profile alignment (sequences versus HMMs) subClassOf Sequence-profile alignment format",
            "CQ": [
              "Does HMMER profile alignment (sequences versus HMMs) fall under the category of Sequence-profile alignment format?",
              "What specific alignment formats are classified as types of Sequence-profile alignment format, including HMMER profile alignment (sequences versus HMMs)?",
              "Which broader alignment format categories does HMMER profile alignment (sequences versus HMMs) inherit from?"
            ]
          }
        ]
      },
      "Enzyme ID (BioCyc)": {
        "axiom": {
          "subClassOf": [
            "Enzyme ID",
            "BioCyc ID"
          ]
        },
        "description": "Enzyme ID (BioCyc) is a subclass of both Enzyme ID and BioCyc ID, representing unique identifiers assigned to enzymes within the BioCyc database. It is used to reference specific enzymes in BioCyc’s enzyme database and facilitates the integration and retrieval of enzyme-related information.",
        "CQ": [
          {
            "axiom": "Enzyme ID (BioCyc) subClassOf Enzyme ID",
            "CQ": [
              "Is every Enzyme ID (BioCyc) instance categorized under Enzyme ID?",
              "Which identifiers are more specific forms of Enzyme ID, such as Enzyme ID (BioCyc)?",
              "To what broader identifier types does Enzyme ID (BioCyc) belong?"
            ]
          },
          {
            "axiom": "Enzyme ID (BioCyc) subClassOf BioCyc ID",
            "CQ": [
              "Is an Enzyme ID (BioCyc) classified under the broader identifier category of BioCyc ID?",
              "Which identifier types are included as specializations of BioCyc ID, such as Enzyme ID (BioCyc)?",
              "What hierarchical categories does Enzyme ID (BioCyc) fall under within the scope of BioCyc identifiers?"
            ]
          }
        ]
      },
      "Protein-protein interaction prediction (from protein structure)": {
        "axiom": {
          "subClassOf": [
            "Protein structure analysis",
            "Protein feature detection",
            "Protein-protein interaction prediction"
          ]
        },
        "description": "Protein-protein interaction prediction (from protein structure) is a subclass of Protein structure analysis, Protein feature detection, and Protein-protein interaction prediction. Members of this class are concerned with identifying or predicting protein-protein interactions, interfaces, binding sites, and related features directly from protein structural data. This class integrates analytic and predictive methodologies, focusing specifically on inferring protein interaction characteristics based on structural information.",
        "CQ": [
          {
            "axiom": "Protein-protein interaction prediction (from protein structure) subClassOf Protein structure analysis",
            "CQ": [
              "Is protein-protein interaction prediction (from protein structure) categorized under protein structure analysis?",
              "Which analysis methods are recognized as more specific forms of protein structure analysis, such as protein-protein interaction prediction (from protein structure)?",
              "What broader analytical categories encompass protein-protein interaction prediction (from protein structure)?"
            ]
          },
          {
            "axiom": "Protein-protein interaction prediction (from protein structure) subClassOf Protein feature detection",
            "CQ": [
              "Is protein-protein interaction prediction (from protein structure) classified under the broader category of protein feature detection?",
              "Which specialized types of protein feature detection include protein-protein interaction prediction (from protein structure)?",
              "What hierarchical categories encompass protein-protein interaction prediction (from protein structure)?"
            ]
          },
          {
            "axiom": "Protein-protein interaction prediction (from protein structure) subClassOf Protein-protein interaction prediction",
            "CQ": [
              "Is protein-protein interaction prediction (from protein structure) classified under the broader category of protein-protein interaction prediction?",
              "Which prediction methods are specific instances of protein-protein interaction prediction, including those based on protein structure?",
              "What broader classes encompass protein-protein interaction prediction (from protein structure)?"
            ]
          }
        ]
      },
      "Sequence checksum generation": {
        "axiom": {
          "subClassOf": [
            "Generation"
          ],
          "propertyRestrictions": [
            "[has input some Sequence]",
            "[has topic some Data acquisition]"
          ]
        },
        "description": "Sequence checksum generation is defined as a subclass of Generation. It requires, via property restrictions, that it has input some Sequence and is related to the topic of Data acquisition. Individuals of this class involve processes where a checksum is generated for a molecular sequence, serving as a method for verifying data integrity in the context of molecular data acquisition.",
        "CQ": [
          {
            "axiom": "Sequence checksum generation subClassOf Generation",
            "CQ": [
              "Is Sequence checksum generation classified under the broader category of Generation?",
              "What are the subclasses encompassed by Generation, specifically including Sequence checksum generation?",
              "Which more general classes does Sequence checksum generation belong to?"
            ]
          },
          {
            "axiom": "Sequence checksum generation propertyRestrictions [has input some Sequence]",
            "CQ": [
              "Does sequence checksum generation necessarily require at least one input of type Sequence?",
              "Can sequence checksum generation occur without having any Sequence as an input?",
              "Is every instance that has a Sequence as input associated with sequence checksum generation?"
            ]
          },
          {
            "axiom": "Sequence checksum generation propertyRestrictions [has topic some Data acquisition]",
            "CQ": [
              "Must every sequence checksum generation be associated with at least one data acquisition topic?",
              "Is it possible for sequence checksum generation to have a topic other than data acquisition?",
              "Does sequence checksum generation necessarily involve the property 'has topic' connecting it to data acquisition?"
            ]
          }
        ]
      },
      "'domainsignatures'": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[implements some Gene-Set Enrichment Analysis]",
            "[is encoded in some R language]",
            "[has specified data input some Gene list]",
            "[has specified data output some Graph plot]",
            "[is executed in some descriptive statistical calculation]"
          ]
        },
        "description": "domainsignatures is defined as a subclass of software, characterized by several functional and technical properties. Any instance of domainsignatures must implement some form of Gene-Set Enrichment Analysis, be encoded in the R language, and require a Gene list as its specified data input. Its output is defined as some kind of Graph plot, and its operation involves execution within the context of descriptive statistical calculation. This formalization positions domainsignatures within software applications focused on statistical interpretation and graphical presentation of gene enrichment data.",
        "CQ": [
          {
            "axiom": "'domainsignatures' subClassOf software",
            "CQ": [
              "Is every domainsignatures instance categorized under software?",
              "Which specialized forms fall under the software class, such as domainsignatures?",
              "What are the direct superclasses for domainsignatures?"
            ]
          },
          {
            "axiom": "'domainsignatures' propertyRestrictions [implements some Gene-Set Enrichment Analysis]",
            "CQ": [
              "Does every domainsignatures instance implement at least one Gene-Set Enrichment Analysis?",
              "Is it required that domainsignatures are linked to the implementation of a Gene-Set Enrichment Analysis?",
              "Must any domainsignatures entity have a relationship through 'implements' with some Gene-Set Enrichment Analysis?"
            ]
          },
          {
            "axiom": "'domainsignatures' propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is every domainsignature required to be encoded in at least one R language?",
              "Are there any domainsignatures that must only be encoded in an R language and not in any other language?",
              "Can a domainsignature exist without being encoded in an R language?"
            ]
          },
          {
            "axiom": "'domainsignatures' propertyRestrictions [has specified data input some Gene list]",
            "CQ": [
              "Is it required for 'domainsignatures' to have at least one specified data input that is a Gene list?",
              "Can 'domainsignatures' possess a specified data input that is not a Gene list?",
              "Does every 'domainsignatures' entity necessarily involve a specified data input related to Gene list?"
            ]
          },
          {
            "axiom": "'domainsignatures' propertyRestrictions [has specified data output some Graph plot]",
            "CQ": [
              "Is it required that domainsignatures have a specified data output of at least one Graph plot?",
              "Can domainsignatures exist without producing any Graph plot as a specified data output?",
              "Does every domainsignatures instance necessarily generate some data output classified as a Graph plot?"
            ]
          },
          {
            "axiom": "'domainsignatures' propertyRestrictions [is executed in some descriptive statistical calculation]",
            "CQ": [
              "Is every instance related by the 'domainsignatures' property required to be involved in at least one descriptive statistical calculation?",
              "Must all uses of the 'domainsignatures' property refer to activities classified as descriptive statistical calculation?",
              "Does the 'domainsignatures' property necessarily link entities to processes that are descriptive statistical calculations?"
            ]
          }
        ]
      },
      "Clustal": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[is executed in some multiple sequence alignment]"
          ]
        },
        "description": "Clustal is defined as a subclass of software, specifically characterized by the requirement that it is executed in at least one multiple sequence alignment process. This formalization indicates that any instance of Clustal must play a role in the execution of multiple sequence alignment tasks, reflecting its intended use as an alignment software tool within bioinformatics applications.",
        "CQ": [
          {
            "axiom": "Clustal subClassOf software",
            "CQ": [
              "Is Clustal classified as a form of software?",
              "Which software subclasses include Clustal?",
              "What higher-level categories does Clustal fall under in the ontology?"
            ]
          },
          {
            "axiom": "Clustal propertyRestrictions [is executed in some multiple sequence alignment]",
            "CQ": [
              "Is Clustal required to be executed in at least one multiple sequence alignment?",
              "Does the execution of Clustal always involve a multiple sequence alignment process?",
              "Can Clustal exist without being executed in any multiple sequence alignment?"
            ]
          }
        ]
      },
      "Sequence composition plot": {
        "axiom": {
          "subClassOf": [
            "Sequence composition report",
            "Plot"
          ]
        },
        "description": "Sequence composition plot is defined as a subclass of both Sequence composition report and Plot, indicating that it inherits characteristics of compositional analysis reports and graphical representations. It represents a plot visualizing the character or word composition or their frequency within a molecular sequence, serving as a graphical summary of sequence content.",
        "CQ": [
          {
            "axiom": "Sequence composition plot subClassOf Sequence composition report",
            "CQ": [
              "Is Sequence composition plot classified as a type under Sequence composition report?",
              "Which specific reports fall under Sequence composition report, such as Sequence composition plot?",
              "Under which broader report categories is Sequence composition plot organized?"
            ]
          },
          {
            "axiom": "Sequence composition plot subClassOf Plot",
            "CQ": [
              "Is every Sequence composition plot categorized as a type of Plot?",
              "Which Plot subclasses include Sequence composition plot?",
              "What broader categories encompass Sequence composition plot?"
            ]
          }
        ]
      },
      "newick": {
        "axiom": {
          "subClassOf": [
            "Textual format",
            "Phylogenetic tree format (text)"
          ]
        },
        "description": "newick is defined as a subclass of both Textual format and Phylogenetic tree format (text). It represents a specific text-based notation for encoding phylogenetic trees, commonly referred to as the Newick format. This formalization positions newick within the hierarchy of textual data formats, specifically those used to represent phylogenetic tree structures.",
        "CQ": [
          {
            "axiom": "newick subClassOf Textual format",
            "CQ": [
              "Does newick fall under the general category of Textual format?",
              "Which formats are subclassified beneath Textual format, such as newick?",
              "What broader classifications encompass newick as a specific type?"
            ]
          },
          {
            "axiom": "newick subClassOf Phylogenetic tree format (text)",
            "CQ": [
              "Is newick a specific type of format under Phylogenetic tree format (text)?",
              "What formats are classified as specializations of Phylogenetic tree format (text), such as newick?",
              "Which general format classes encompass newick?"
            ]
          }
        ]
      },
      "bigBed": {
        "axiom": {
          "subClassOf": [
            "Binary format",
            "Sequence annotation track format"
          ]
        },
        "description": "bigBed is a subclass of both Binary format and Sequence annotation track format, representing a file format used to store large-scale sequence annotation tracks. It is defined as a binary embodiment of the textual BED format, designed for efficient storage and access to extensive genomic annotation data.",
        "CQ": [
          {
            "axiom": "bigBed subClassOf Binary format",
            "CQ": [
              "Is bigBed categorized under Binary format?",
              "Which data formats are classified as more specific types of Binary format, such as bigBed?",
              "To which broader format categories does bigBed belong?"
            ]
          },
          {
            "axiom": "bigBed subClassOf Sequence annotation track format",
            "CQ": [
              "Is bigBed classified under the general category of Sequence annotation track format?",
              "What formats are considered specializations of Sequence annotation track format, such as bigBed?",
              "Which higher-level track format categories include bigBed as a member?"
            ]
          }
        ]
      },
      "ClustalW format": {
        "axiom": {
          "subClassOf": [
            "Textual format",
            "Alignment format (text)"
          ]
        },
        "description": "ClustalW format is a type of textual format that is also classified as an alignment format (text), meaning it is intended for representing sequence alignments in a human-readable text form. It is specifically defined for aligned biological sequences, as described in its definition, and inherits structural properties from both the general category of textual formats and the more specific alignment formats.",
        "CQ": [
          {
            "axiom": "ClustalW format subClassOf Textual format",
            "CQ": [
              "Is ClustalW format classified under the broader class of Textual format?",
              "What specific formats are categorized as subtypes of Textual format, including ClustalW format?",
              "To which higher-level categories is ClustalW format hierarchically related?"
            ]
          },
          {
            "axiom": "ClustalW format subClassOf Alignment format (text)",
            "CQ": [
              "Is ClustalW format categorized under Alignment format?",
              "Which formats fall into the subclass category of Alignment format?",
              "What broader format classifications encompass ClustalW format?"
            ]
          }
        ]
      },
      "Pathway ID (PharmGKB)": {
        "axiom": {
          "subClassOf": [
            "Pathway or network accession",
            "PharmGKB ID"
          ]
        },
        "description": "Pathway ID (PharmGKB) is defined as an identifier for pathways specifically within the PharmGKB database, which focuses on pharmacogenetics and pharmacogenomics. This class is a subclass of both ‘Pathway or network accession’ and ‘PharmGKB ID’, situating it as a specialized identifier that uniquely refers to biochemical pathways catalogued by PharmGKB.",
        "CQ": [
          {
            "axiom": "Pathway ID (PharmGKB) subClassOf Pathway or network accession",
            "CQ": [
              "Is Pathway ID (PharmGKB) classified as a kind of Pathway or network accession?",
              "Which identifiers are encompassed under Pathway or network accession, including Pathway ID (PharmGKB)?",
              "To which higher-level accession categories does Pathway ID (PharmGKB) belong?"
            ]
          },
          {
            "axiom": "Pathway ID (PharmGKB) subClassOf PharmGKB ID",
            "CQ": [
              "Is Pathway ID (PharmGKB) classified under PharmGKB ID?",
              "Which identifier types are encompassed by PharmGKB ID, including Pathway ID (PharmGKB)?",
              "What broader identifier categories include Pathway ID (PharmGKB)?"
            ]
          }
        ]
      },
      "'codelink'": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[has specified data input some (XML or Text data set)]",
            "[has specified data output some (Text data set and Graph plot)]",
            "[is encoded in some R language]",
            "[is executed in some (background correction and data normalization and descriptive statistical calculation and differential expression analysis)]"
          ]
        },
        "description": "codelink is defined as a subclass of software, specifically characterized by several property restrictions. It operates on specified data inputs that are XML or text data sets, and produces outputs in the form of text data sets and graph plots. codelink implementations are encoded in the R programming language and are used for executing background correction, data normalization, descriptive statistical calculation, and differential expression analysis. This formal definition ensures that codelink refers to R-based software tools designed for advanced data processing and statistical analysis workflows with defined input and output requirements.",
        "CQ": [
          {
            "axiom": "'codelink' subClassOf software",
            "CQ": [
              "Is codelink classified as a type of software?",
              "Which specific subclasses are encompassed under the category of software, including codelink?",
              "What broader classes does codelink fall under in the ontology hierarchy?"
            ]
          },
          {
            "axiom": "'codelink' propertyRestrictions [has specified data input some (XML or Text data set)]",
            "CQ": [
              "Is it necessary for a codelink to have at least one specified data input that is either an XML or a Text data set?",
              "Can a codelink reference specified data input types other than XML or Text data set?",
              "Does the property restriction for codelink require that all specified data inputs be XML or Text data sets, or is it sufficient for at least one to be of these types?"
            ]
          },
          {
            "axiom": "'codelink' propertyRestrictions [has specified data output some (Text data set and Graph plot)]",
            "CQ": [
              "Is every specified data output of a codelink required to include both a text data set and a graph plot?",
              "Does a codelink necessarily generate at least one output that is simultaneously a text data set and a graph plot?",
              "Is it possible for the specified data output of a codelink to lack either the text data set or the graph plot characteristic?"
            ]
          },
          {
            "axiom": "'codelink' propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is it required for every codelink to be associated with at least one encoding in the R language?",
              "Can a codelink exist without being encoded in the R language?",
              "Are all instances of codelink necessarily linked to some resource in the R programming language?"
            ]
          },
          {
            "axiom": "'codelink' propertyRestrictions [is executed in some (background correction and data normalization and descriptive statistical calculation and differential expression analysis)]",
            "CQ": [
              "Does every codelink involve execution in background correction, data normalization, descriptive statistical calculation, and differential expression analysis?",
              "Is it required for a codelink to be executed in all of the processes: background correction, data normalization, descriptive statistical calculation, and differential expression analysis?",
              "Can a codelink exist without being executed in one or more of background correction, data normalization, descriptive statistical calculation, or differential expression analysis?"
            ]
          }
        ]
      },
      "Sequence record format": {
        "axiom": {
          "subClassOf": [
            "Format (typed)"
          ],
          "propertyRestrictions": [
            "[is format of some Sequence record]"
          ]
        },
        "description": "Sequence record format is defined as a subclass of Format (typed) and is used specifically for representing a molecular sequence record. By axiom, every Sequence record format must be a format of at least one Sequence record. This class formalizes data formats that encode and store molecular sequence records, capturing the structural and representational standards utilized in molecular sequence data management.",
        "CQ": [
          {
            "axiom": "Sequence record format subClassOf Format (typed)",
            "CQ": [
              "Is Sequence record format categorized under the general class of Format (typed)?",
              "Which types are included in the Format (typed) class, specifically Sequence record format?",
              "What broader classification does Sequence record format fall under within the ontology?"
            ]
          },
          {
            "axiom": "Sequence record format propertyRestrictions [is format of some Sequence record]",
            "CQ": [
              "Is every sequence record format necessarily associated with at least one sequence record via the 'is format of' property?",
              "Does the existence of the 'is format of' relation from a sequence record format imply the presence of a linked sequence record?",
              "Can a sequence record format be valid without being the format of any sequence record?"
            ]
          }
        ]
      },
      "Protein sequence (raw)": {
        "axiom": {
          "subClassOf": [
            "Protein sequence",
            "Raw sequence"
          ]
        },
        "description": "Protein sequence (raw) is defined as a subclass of both Protein sequence and Raw sequence, representing protein sequences in their unprocessed, primary form. Members of this class are characterized by being a string of characters that encode the raw sequence of amino acids without any modifications or annotations. This definition reflects the unaltered, direct representation of protein data.",
        "CQ": [
          {
            "axiom": "Protein sequence (raw) subClassOf Protein sequence",
            "CQ": [
              "Does Protein sequence (raw) belong to the category of Protein sequence?",
              "Which conceptual categories include Protein sequence (raw) as a more specific type?",
              "What types fall under Protein sequence, including Protein sequence (raw)?"
            ]
          },
          {
            "axiom": "Protein sequence (raw) subClassOf Raw sequence",
            "CQ": [
              "Is Protein sequence (raw) classified under the broader group of Raw sequence?",
              "What are the more specific types of Raw sequence, including Protein sequence (raw)?",
              "To which higher-level categories does Protein sequence (raw) belong?"
            ]
          }
        ]
      }
    },
    "properties": {
      "is executed in": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "software"
          ],
          "range": [
            "information processing"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"is executed in\" relates instances of the class \"software\" to instances of \"information processing.\" It has no explicitly defined characteristics, super-properties, or inverse property. The domain restriction specifies that the subject must be software, and the range restriction specifies that the object must be information processing. This property is used to indicate the information processing context or environment in which a software entity operates.",
        "CQ": [
          {
            "axiom": "is executed in domain software",
            "CQ": [
              "Can the property 'is executed in' be applied to subjects other than software?",
              "Are all objects used with the property 'is executed in' necessarily domains?",
              "What types of entities are permitted to serve as the range when using 'is executed in'?"
            ]
          },
          {
            "axiom": "is executed in range information processing",
            "CQ": [
              "Is information processing the only type of entity that can be in the range of 'is executed in'?",
              "Can 'is executed in' relate to anything outside the scope of information processing as its range?",
              "What entities may serve as the range for the property 'is executed in'?"
            ]
          }
        ]
      },
      "is version of": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "version name"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"is version of\" has no explicitly defined characteristics or super-properties. It has a domain restricted to \"version name\" and no specified range. This property is intended to relate version names to the entities they are versions of, as referenced by the external resource: http://softwareontology.wordpress.com/2012/06/20/versioning-in-swo/. No inverse property is specified.",
        "CQ": [
          {
            "axiom": "is version of domain version name",
            "CQ": [
              "Can the property 'is version of' have a subject that is not a version?",
              "Is every object used with the property 'is version of' required to be a version name?",
              "What entities are permitted as the domain for the property 'is version of'?"
            ]
          },
          {
            "axiom": "is version of range None",
            "CQ": [
              "What entities can serve as the range for the property 'is version of'?",
              "Is it accurate that the property 'is version of' does not require a range?",
              "Can 'is version of' link to any type of entity, or should its range be restricted?"
            ]
          }
        ]
      },
      "has format specification": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "information content entity"
          ],
          "range": [
            "data format specification"
          ],
          "subPropertyOf": [
            "is encoded in"
          ],
          "inverseOf": []
        },
        "description": "The property \"has format specification\" relates an information content entity to a data format specification, indicating the format in which the entity is encoded or represented. It has no additional logical characteristics or specified inverse. The domain is restricted to information content entities, and the range to data format specifications. It is a sub-property of \"is encoded in.\"",
        "CQ": [
          {
            "axiom": "has format specification domain information content entity",
            "CQ": [
              "Can the property 'has format specification' be used with subjects other than 'information content entity'?",
              "Is it permissible for an entity that is not an 'information content entity' to have a 'format specification'?",
              "Which types of entities are allowed as the domain of the 'has format specification' property?"
            ]
          },
          {
            "axiom": "has format specification range data format specification",
            "CQ": [
              "Can entities other than 'format specification' be subjects for the property 'has format specification'?",
              "Is it necessary that all objects of the property 'has format specification' are instances of 'data format specification'?",
              "What classes are permitted as the range for the property 'has format specification'?"
            ]
          },
          {
            "axiom": "has format specification subPropertyOf is encoded in",
            "CQ": [
              "Is every use of the has format specification property also an instance of the is encoded in property?",
              "Which subproperties are defined under the is encoded in property, including has format specification?",
              "What are the superproperties of the has format specification property within the ontology?"
            ]
          }
        ]
      },
      "is input of": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "data"
          ],
          "range": [
            "information processing"
          ],
          "subPropertyOf": [],
          "inverseOf": [
            "has input"
          ]
        },
        "description": "The property \"is input of\" relates an entity classified as \"data\" (domain) to an \"information processing\" activity (range). It has no explicitly defined characteristics or super-properties, and its inverse is \"has input.\" According to its current definition, \"'A is_input_of B' specifies that subject A is a necessary or actual input or input argument to object B,\" where A may be any data entity and B is an information processing operation. In the EDAM ontology, \"is_input_of\" is typically not asserted between concepts, but its inverse—\"has_input\"—is defined.",
        "CQ": [
          {
            "axiom": "is input of domain data",
            "CQ": [
              "Is it possible for a property with 'is input of' to have a domain different from 'data'?",
              "Are all instances of 'data' eligible to be the subject of the 'is input of' property?",
              "What entities are permitted as the domain of the 'is input of' property?"
            ]
          },
          {
            "axiom": "is input of range information processing",
            "CQ": [
              "Can the property 'is input of' be used with objects other than 'information processing' as its range?",
              "Is it necessary that the value associated with 'is input of' always be an 'information processing' instance?",
              "What types of entities are permitted as the range for the property 'is input of'?"
            ]
          },
          {
            "axiom": "is input of inverseOf has input",
            "CQ": [
              "How are the properties ‘is input of’ and ‘has input’ connected in the ontology?",
              "If entity X is input of process Y, does it follow that process Y has input X?",
              "Which property acts as the inverse of ‘is input of’?"
            ]
          }
        ]
      }
    }
  },
  "exchangemodel": {
    "classes": {
      "Recognition": {
        "axiom": {
          "subClassOf": [
            "Observation"
          ],
          "propertyRestrictions": [
            "[describes only event:ComplexActivity]",
            "[providedBy only (event:Person or ProcessingComponent)]"
          ]
        },
        "description": "Recognition is defined as a subclass of Observation. It is characterized by two key property restrictions: it can only describe instances of ComplexActivity events, and recognitions must be provided exclusively by either a Person or a ProcessingComponent. This ensures that all individuals of the Recognition class represent observations describing complex activities, with clear provenance limited to human or automated sources.",
        "CQ": [
          {
            "axiom": "Recognition subClassOf Observation",
            "CQ": [
              "Does Recognition fall under the broader classification of Observation?",
              "Which categories are more specific than Observation and encompass Recognition?",
              "What higher-level classes does Recognition conceptually fit within?"
            ]
          },
          {
            "axiom": "Recognition propertyRestrictions [describes only event:ComplexActivity]",
            "CQ": [
              "Does the Recognition property only describe events classified as ComplexActivity?",
              "Is it required that Recognition property never describes any event other than those of type ComplexActivity?",
              "Can Recognition property refer to events not categorized as ComplexActivity under this restriction?"
            ]
          },
          {
            "axiom": "Recognition propertyRestrictions [providedBy only (event:Person or ProcessingComponent)]",
            "CQ": [
              "Can Recognition have its providedBy property associated exclusively with either an event:Person or a ProcessingComponent?",
              "Is it possible for Recognition to be providedBy any entity other than event:Person and ProcessingComponent?",
              "Does the ontology constrain providedBy for Recognition solely to event:Person and ProcessingComponent instances?"
            ]
          }
        ]
      },
      "Result": {
        "axiom": {
          "propertyRestrictions": [
            "[providedBy exactly 1 (event:Person or ProcessingComponent)]",
            "[hasReportingTime exactly 1 time:Instant]",
            "[hasReportingTime only time:Instant]",
            "[describes only (home:DaySummary or home:Problem)]",
            "[hasPlausibilityMetric exactly 1 xsd:double]",
            "[providedBy only (event:Person or ProcessingComponent)]",
            "[hasPlausibilityMetric only xsd:double]",
            "[describes exactly 1 (home:DaySummary or home:Problem)]"
          ]
        },
        "description": "Result is defined as a class whose instances must be described by exactly one home:DaySummary or home:Problem, and may only describe such entities. Each Result must be provided by exactly one agent, which must be either an event:Person or a ProcessingComponent, and cannot be provided by any other type. Every Result must have a reporting time, which must be exactly one instance of time:Instant, and no other type is allowed. Additionally, each Result must have exactly one plausibility metric, which must be of datatype xsd:double. This formalization ensures that every Result precisely links to its provenance, timing, evaluation, and what it represents within the domain.",
        "CQ": [
          {
            "axiom": "Result propertyRestrictions [providedBy exactly 1 (event:Person or ProcessingComponent)]",
            "CQ": [
              "Is it required for each Result to be provided by exactly one entity, which must be either an event:Person or a ProcessingComponent?",
              "Can a Result ever have more than one provider or a provider that is not an event:Person or ProcessingComponent?",
              "Does the constraint ensure that a Result cannot be associated with entities outside of event:Person or ProcessingComponent as its sole provider?"
            ]
          },
          {
            "axiom": "Result propertyRestrictions [hasReportingTime exactly 1 time:Instant]",
            "CQ": [
              "Is a Result required to have exactly one hasReportingTime value of type time:Instant?",
              "Can a Result ever have either no hasReportingTime or more than one such property value?",
              "Does the ontology restrict each Result instance to be associated with one and only one reporting time instant?"
            ]
          },
          {
            "axiom": "Result propertyRestrictions [hasReportingTime only time:Instant]",
            "CQ": [
              "Is every Result required to have its reporting time specified exclusively as an instance of time:Instant?",
              "Can a Result have the hasReportingTime property pointing to any value other than those classified as time:Instant?",
              "Does the ontology restrict the hasReportingTime property of Result solely to entities of type time:Instant?"
            ]
          },
          {
            "axiom": "Result propertyRestrictions [describes only (home:DaySummary or home:Problem)]",
            "CQ": [
              "Is every instance of Result restricted to only describing either a DaySummary or a Problem?",
              "Can Result describe entities other than DaySummary or Problem according to the model?",
              "Does the ontology prevent Result from describing anything outside the categories of DaySummary and Problem?"
            ]
          },
          {
            "axiom": "Result propertyRestrictions [hasPlausibilityMetric exactly 1 xsd:double]",
            "CQ": [
              "Is each Result entity associated with exactly one plausibility metric value of type xsd:double?",
              "Can a Result have more than one plausibility metric assigned to it?",
              "Is it possible for a Result to lack a plausibility metric of type xsd:double?"
            ]
          },
          {
            "axiom": "Result propertyRestrictions [providedBy only (event:Person or ProcessingComponent)]",
            "CQ": [
              "Is the provider of a Result always limited to either a Person or a ProcessingComponent?",
              "Can a Result ever be provided by something other than a Person or a ProcessingComponent?",
              "Must every entity listed as a provider for a Result belong exclusively to the categories Person or ProcessingComponent?"
            ]
          },
          {
            "axiom": "Result propertyRestrictions [hasPlausibilityMetric only xsd:double]",
            "CQ": [
              "Is every plausibility metric value for Result constrained exclusively to the xsd:double datatype?",
              "Can a Result have any plausibility metric that is not an xsd:double data value?",
              "Must all plausibility metrics associated with Result be of the xsd:double type, without exception?"
            ]
          },
          {
            "axiom": "Result propertyRestrictions [describes exactly 1 (home:DaySummary or home:Problem)]",
            "CQ": [
              "Is a Result required to describe either exactly one DaySummary or exactly one Problem, but not both or any other type?",
              "Can a Result provide a description that is limited strictly to one instance among DaySummary or Problem?",
              "Does the ontology enforce that each Result corresponds to one and only one entity of the DaySummary or Problem categories?"
            ]
          }
        ]
      }
    },
    "properties": {}
  },
  "pizza": {
    "classes": {
      "AmericanHot": {
        "axiom": {
          "subClassOf": [
            "NamedPizza"
          ],
          "disjointWith": [
            "Mushroom",
            "LaReine",
            "Napoletana",
            "Veneziana",
            "UnclosedPizza",
            "PrinceCarlo",
            "Capricciosa",
            "FruttiDiMare",
            "Siciliana",
            "Cajun",
            "Margherita",
            "American",
            "SloppyGiuseppe",
            "Caprina",
            "Soho",
            "Parmense",
            "PolloAdAstra",
            "Fiorentina",
            "Rosa",
            "QuattroFormaggi",
            "Giardiniera",
            "FourSeasons"
          ],
          "propertyRestrictions": [
            "[hasTopping some HotGreenPepperTopping]",
            "[hasTopping some JalapenoPepperTopping]",
            "[hasTopping some TomatoTopping]",
            "[hasCountryOfOrigin hasValue America]",
            "[hasTopping some PeperoniSausageTopping]",
            "[hasTopping some MozzarellaTopping]",
            "[hasTopping only (MozzarellaTopping or PeperoniSausageTopping or JalapenoPepperTopping or TomatoTopping or HotGreenPepperTopping)]"
          ]
        },
        "description": "AmericanHot is defined as a subclass of NamedPizza, distinguished by the requirement that it has toppings including hot green pepper, jalapeno pepper, tomato, peperoni sausage, and mozzarella. Its origin is specified as America. AmericanHot pizzas are explicitly disjoint from numerous other pizza classes, ensuring no individual pizza can simultaneously belong to these groups. The pizza is further characterized by a topping restriction: it may only have mozzarella, peperoni sausage, jalapeno pepper, tomato, or hot green pepper as toppings. This formalization enforces a precise set of permissible toppings and uniquely identifies AmericanHot within the ontology of named pizzas.",
        "CQ": [
          {
            "axiom": "AmericanHot subClassOf NamedPizza",
            "CQ": [
              "Is AmericanHot classified under the broader category of NamedPizza?",
              "Which pizzas are specific types within the NamedPizza category, including AmericanHot?",
              "What higher-level categories encompass AmericanHot?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith Mushroom",
            "CQ": [
              "What is the ontological separation between AmericanHot and Mushroom?",
              "Is there any instance that can be classified as both AmericanHot and Mushroom simultaneously?",
              "Which other classes are asserted to be disjoint with Mushroom?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith LaReine",
            "CQ": [
              "How does the ontology specify the incompatibility between AmericanHot and LaReine?",
              "Is it allowed for an entity to be classified as both AmericanHot and LaReine?",
              "Which classes are defined as disjoint from LaReine in the ontology?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith Napoletana",
            "CQ": [
              "How are AmericanHot and Napoletana related in the ontology?",
              "Is there any pizza instance that can belong to both AmericanHot and Napoletana classes?",
              "Which classes are specified as mutually exclusive with Napoletana?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith Veneziana",
            "CQ": [
              "What is the formal separation defined between AmericanHot and Veneziana?",
              "Is there any instance that can simultaneously belong to both AmericanHot and Veneziana classes?",
              "Which classes are explicitly specified as mutually exclusive with Veneziana?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith UnclosedPizza",
            "CQ": [
              "What logical constraint separates AmericanHot from UnclosedPizza according to the ontology?",
              "Is it allowable for an instance of pizza to belong to both AmericanHot and UnclosedPizza classes?",
              "Which classes are defined as disjoint with AmericanHot?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith PrinceCarlo",
            "CQ": [
              "How does the ontology define the connection between AmericanHot and PrinceCarlo pizza types?",
              "Is any pizza classified simultaneously as AmericanHot and PrinceCarlo according to the ontology?",
              "Which pizza classes are modeled as mutually exclusive with PrinceCarlo?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith Capricciosa",
            "CQ": [
              "What is the ontological distinction between AmericanHot and Capricciosa?",
              "Is it allowable for an individual pizza to be classified as both AmericanHot and Capricciosa?",
              "Which pizza classes are stated to be disjoint with AmericanHot?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith FruttiDiMare",
            "CQ": [
              "How does the ontology represent the mutual exclusivity between AmericanHot and FruttiDiMare?",
              "Is there any scenario in which an entity could belong to both AmericanHot and FruttiDiMare simultaneously?",
              "What other classes are asserted as being disjoint with FruttiDiMare?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith Siciliana",
            "CQ": [
              "How are AmericanHot and Siciliana pizzas logically separated in the ontology?",
              "Is it allowed for an entity to be classified as both AmericanHot and Siciliana pizza simultaneously?",
              "Which classes share a disjointness relationship with Siciliana pizza within the ontology?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith Cajun",
            "CQ": [
              "What logical separation is specified between AmericanHot and Cajun within the ontology?",
              "Is it feasible for an entity to belong to both the AmericanHot and Cajun classes?",
              "Which classes are explicitly defined as mutually exclusive with AmericanHot?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith Margherita",
            "CQ": [
              "How is AmericanHot class logically separated from Margherita class in the ontology?",
              "Is it permissible for an individual to be instance of both AmericanHot and Margherita simultaneously?",
              "Which classes are specified as disjoint with Margherita according to the ontology?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith American",
            "CQ": [
              "How does the ontology specify the separation between AmericanHot and American?",
              "Is there any entity that can simultaneously belong to both AmericanHot and American categories?",
              "Which classes are declared to have no overlap with AmericanHot?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith SloppyGiuseppe",
            "CQ": [
              "What logical separation is established between AmericanHot and SloppyGiuseppe in the ontology?",
              "Could a single pizza instance ever be both AmericanHot and SloppyGiuseppe?",
              "Which pizza types are defined as disjoint from SloppyGiuseppe?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith Caprina",
            "CQ": [
              "How does the ontology formally distinguish between AmericanHot and Caprina classes?",
              "Is it allowable for an individual pizza to be a member of both AmericanHot and Caprina?",
              "Which classes are specified as being disjoint with Caprina?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith Soho",
            "CQ": [
              "What formal constraint exists between AmericanHot and Soho within the ontology?",
              "Is there any overlap between the membership of AmericanHot and Soho?",
              "Which pizza types are specifically defined as mutually exclusive with Soho?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith Parmense",
            "CQ": [
              "How does the ontology represent the separation between AmericanHot and Parmense pizza types?",
              "Is there any instance that can belong to both AmericanHot and Parmense categories simultaneously?",
              "Which pizza types are defined as mutually exclusive with Parmense?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith PolloAdAstra",
            "CQ": [
              "How does the ontology formally separate AmericanHot from PolloAdAstra?",
              "Is there any pizza instance that could belong to both AmericanHot and PolloAdAstra simultaneously?",
              "Which other pizza types, if any, are specified as mutually exclusive with PolloAdAstra?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith Fiorentina",
            "CQ": [
              "What formal separation is specified between AmericanHot and Fiorentina in the ontology?",
              "Is there any instance that can be classified as both AmericanHot and Fiorentina?",
              "Which classes are defined as mutually exclusive with Fiorentina?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith Rosa",
            "CQ": [
              "What formal incompatibility is defined between AmericanHot and Rosa in the ontology?",
              "Is it allowed for a pizza to be classified as both AmericanHot and Rosa?",
              "Which classes are identified as disjoint with AmericanHot?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith QuattroFormaggi",
            "CQ": [
              "What is the formal distinction between AmericanHot and QuattroFormaggi in the ontology?",
              "Is it allowed for a pizza to belong to both the AmericanHot and QuattroFormaggi categories?",
              "Which pizza classes, besides QuattroFormaggi, are defined as mutually exclusive with AmericanHot?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith Giardiniera",
            "CQ": [
              "What is the formal distinction between AmericanHot and Giardiniera within the ontology?",
              "Is it logically permissible for a pizza to be classified as both AmericanHot and Giardiniera?",
              "Which pizza types are specified as disjoint from AmericanHot?"
            ]
          },
          {
            "axiom": "AmericanHot disjointWith FourSeasons",
            "CQ": [
              "How does the ontology express the incompatibility between AmericanHot and FourSeasons pizza types?",
              "Can a pizza instance belong to both AmericanHot and FourSeasons classes simultaneously?",
              "Which classes in the ontology are specified as being mutually exclusive with FourSeasons pizza?"
            ]
          },
          {
            "axiom": "AmericanHot propertyRestrictions [hasTopping some HotGreenPepperTopping]",
            "CQ": [
              "Is it necessary for an AmericanHot pizza to have at least one HotGreenPepperTopping as a topping?",
              "Can an AmericanHot pizza be classified as such without containing any HotGreenPepperTopping?",
              "Does every instance of AmericanHot require the inclusion of HotGreenPepperTopping among its toppings?"
            ]
          },
          {
            "axiom": "AmericanHot propertyRestrictions [hasTopping some JalapenoPepperTopping]",
            "CQ": [
              "Is it necessary for an AmericanHot pizza to include at least one jalapeno pepper topping?",
              "Does every instance of AmericanHot have a topping that is a jalapeno pepper?",
              "Are AmericanHot pizzas defined by the presence of some jalapeno pepper topping?"
            ]
          },
          {
            "axiom": "AmericanHot propertyRestrictions [hasTopping some TomatoTopping]",
            "CQ": [
              "Is it required for an AmericanHot pizza to have at least one TomatoTopping as a topping?",
              "Can an AmericanHot pizza exist without including any TomatoTopping among its toppings?",
              "Does every AmericanHot pizza necessarily possess a topping that is a type of TomatoTopping?"
            ]
          },
          {
            "axiom": "AmericanHot propertyRestrictions [hasCountryOfOrigin hasValue America]",
            "CQ": [
              "Must AmericanHot have its country of origin specified as America?",
              "Is it required that the country of origin for AmericanHot is exclusively America?",
              "Can AmericanHot have any country of origin other than America?"
            ]
          },
          {
            "axiom": "AmericanHot propertyRestrictions [hasTopping some PeperoniSausageTopping]",
            "CQ": [
              "Is it necessary for an AmericanHot pizza to have at least one PeperoniSausageTopping as a topping?",
              "Can an AmericanHot pizza be classified as such if it does not include PeperoniSausageTopping among its toppings?",
              "Does every AmericanHot pizza require the presence of PeperoniSausageTopping through the hasTopping property?"
            ]
          },
          {
            "axiom": "AmericanHot propertyRestrictions [hasTopping some MozzarellaTopping]",
            "CQ": [
              "Is it required that every AmericanHot pizza includes at least one MozzarellaTopping as a topping?",
              "Can there be an AmericanHot pizza without any MozzarellaTopping present?",
              "Does the existence of MozzarellaTopping on a pizza suffice for it to be classified as AmericanHot?"
            ]
          },
          {
            "axiom": "AmericanHot propertyRestrictions [hasTopping only (MozzarellaTopping or PeperoniSausageTopping or JalapenoPepperTopping or TomatoTopping or HotGreenPepperTopping)]",
            "CQ": [
              "Does an AmericanHot pizza only include Mozzarella, Peperoni Sausage, Jalapeno Pepper, Tomato, or Hot Green Pepper as toppings?",
              "Is the presence of any topping outside Mozzarella, Peperoni Sausage, Jalapeno Pepper, Tomato, or Hot Green Pepper incompatible with the definition of AmericanHot?",
              "Are all possible toppings on an AmericanHot pizza necessarily restricted to the five specified types without exception?"
            ]
          }
        ]
      },
      "Caprina": {
        "axiom": {
          "subClassOf": [
            "NamedPizza"
          ],
          "disjointWith": [
            "Mushroom",
            "LaReine",
            "Napoletana",
            "Veneziana",
            "AmericanHot",
            "UnclosedPizza",
            "PrinceCarlo",
            "Capricciosa",
            "FruttiDiMare",
            "Siciliana",
            "Cajun",
            "Margherita",
            "American",
            "SloppyGiuseppe",
            "Soho",
            "Parmense",
            "PolloAdAstra",
            "Fiorentina",
            "Rosa",
            "QuattroFormaggi",
            "Giardiniera",
            "FourSeasons"
          ],
          "propertyRestrictions": [
            "[hasTopping some TomatoTopping]",
            "[hasTopping some SundriedTomatoTopping]",
            "[hasTopping some MozzarellaTopping]",
            "[hasTopping only (MozzarellaTopping or TomatoTopping or SundriedTomatoTopping or GoatsCheeseTopping)]",
            "[hasTopping some GoatsCheeseTopping]"
          ]
        },
        "description": "Caprina is defined as a subclass of NamedPizza and is explicitly disjoint from a diverse set of other named pizzas, ensuring that no individual pizza can simultaneously be a Caprina and any of the pizzas listed (such as Mushroom, LaReine, etc.). Members of the Caprina class are characterized by their toppings: each Caprina must have at least one instance each of tomato topping, sundried tomato topping, mozzarella topping, and goat’s cheese topping. Additionally, Caprina pizzas can only have mozzarella, tomato, sundried tomato, or goat’s cheese as toppings—no other toppings are permitted. This formalization guarantees a specific and exclusive combination of ingredients for any pizza classified as Caprina.",
        "CQ": [
          {
            "axiom": "Caprina subClassOf NamedPizza",
            "CQ": [
              "Is Caprina classified as a type of NamedPizza?",
              "Which varieties fall under the category of NamedPizza, specifically including Caprina?",
              "What broader groups include Caprina as a member?"
            ]
          },
          {
            "axiom": "Caprina disjointWith Mushroom",
            "CQ": [
              "How does the ontology specify the interaction between Caprina and Mushroom classes?",
              "Is there any entity that can be an instance of both Caprina and Mushroom simultaneously?",
              "Which classes are defined as mutually exclusive with Mushroom?"
            ]
          },
          {
            "axiom": "Caprina disjointWith LaReine",
            "CQ": [
              "How does the ontology differentiate between Caprina and LaReine?",
              "Is any entity allowed to be classified as both Caprina and LaReine simultaneously?",
              "Which classes are identified as disjoint with Caprina?"
            ]
          },
          {
            "axiom": "Caprina disjointWith Napoletana",
            "CQ": [
              "How does the ontology formally separate Caprina from Napoletana?",
              "Is there any instance that can be classified as both Caprina and Napoletana?",
              "Which classes are identified as disjoint with Napoletana in the ontology?"
            ]
          },
          {
            "axiom": "Caprina disjointWith Veneziana",
            "CQ": [
              "What kind of incompatibility is asserted between Caprina and Veneziana?",
              "Is there any instance that can simultaneously belong to both Caprina and Veneziana classes?",
              "Which pizza types are formally specified as being mutually exclusive with Veneziana?"
            ]
          },
          {
            "axiom": "Caprina disjointWith AmericanHot",
            "CQ": [
              "What is the ontological separation between Caprina and AmericanHot?",
              "Is there any entity that can be classified simultaneously as Caprina and AmericanHot?",
              "Which classes are specified to be incompatible with Caprina?"
            ]
          },
          {
            "axiom": "Caprina disjointWith UnclosedPizza",
            "CQ": [
              "What logical separation is defined between Caprina and UnclosedPizza within the ontology?",
              "Is any pizza instance allowed to be both Caprina and UnclosedPizza simultaneously?",
              "Which classes are declared disjoint with Caprina in the current ontology model?"
            ]
          },
          {
            "axiom": "Caprina disjointWith PrinceCarlo",
            "CQ": [
              "How does the ontology distinguish between Caprina and PrinceCarlo?",
              "Is there any individual that can simultaneously belong to both the Caprina and PrinceCarlo classes?",
              "Which classes within the ontology are declared as disjoint with Caprina?"
            ]
          },
          {
            "axiom": "Caprina disjointWith Capricciosa",
            "CQ": [
              "How does the ontology differentiate between Caprina and Capricciosa pizzas?",
              "Is there any scenario where a pizza can belong to both Caprina and Capricciosa categories?",
              "Which pizza types are marked as incompatible with Caprina in the ontology?"
            ]
          },
          {
            "axiom": "Caprina disjointWith FruttiDiMare",
            "CQ": [
              "What formal separation is defined between Caprina and FruttiDiMare within the ontology?",
              "Is it allowed for an instance to be classified as both Caprina and FruttiDiMare?",
              "Which classes are specified as disjoint with FruttiDiMare?"
            ]
          },
          {
            "axiom": "Caprina disjointWith Siciliana",
            "CQ": [
              "What formal separation is asserted between Caprina and Siciliana in the ontology?",
              "Can an individual instance be classified as both Caprina and Siciliana?",
              "Which classes are defined as being disjoint with Caprina?"
            ]
          },
          {
            "axiom": "Caprina disjointWith Cajun",
            "CQ": [
              "What logical constraint separates Caprina and Cajun classes in the ontology?",
              "Is it allowed for an instance to be classified as both Caprina and Cajun?",
              "Which classes are formally specified as disjoint with Caprina?"
            ]
          },
          {
            "axiom": "Caprina disjointWith Margherita",
            "CQ": [
              "What ontological separation is specified between Caprina and Margherita?",
              "Can an individual pizza instance belong to both Caprina and Margherita categories?",
              "Which classes are identified as disjoint with Margherita in the ontology?"
            ]
          },
          {
            "axiom": "Caprina disjointWith American",
            "CQ": [
              "How does the ontology represent the exclusivity between Caprina and American?",
              "Is any instance permitted to belong to both Caprina and American categories simultaneously?",
              "What classes, excluding American, are specified as disjoint with Caprina?"
            ]
          },
          {
            "axiom": "Caprina disjointWith SloppyGiuseppe",
            "CQ": [
              "What logical separation is defined between Caprina and SloppyGiuseppe within the ontology?",
              "Is a single entity permitted to be both Caprina and SloppyGiuseppe simultaneously?",
              "Which classes are explicitly stated as disjoint with Caprina?"
            ]
          },
          {
            "axiom": "Caprina disjointWith Soho",
            "CQ": [
              "What kind of formal separation is defined between Caprina and Soho classes?",
              "Is it allowed for an entity to be an instance of both Caprina and Soho simultaneously?",
              "Which classes are specified as mutually exclusive with Soho?"
            ]
          },
          {
            "axiom": "Caprina disjointWith Parmense",
            "CQ": [
              "What logical separation is established between Caprina and Parmense in the ontology?",
              "Is any individual permitted to belong to both Caprina and Parmense categories simultaneously?",
              "Which classes, according to the ontology, are formally specified as disjoint with Caprina?"
            ]
          },
          {
            "axiom": "Caprina disjointWith PolloAdAstra",
            "CQ": [
              "How does the ontology differentiate between Caprina and PolloAdAstra pizzas?",
              "Is there any instance in the ontology that can simultaneously be both Caprina and PolloAdAstra?",
              "Which pizza types are specified as disjoint with Caprina?"
            ]
          },
          {
            "axiom": "Caprina disjointWith Fiorentina",
            "CQ": [
              "How does the ontology differentiate between Caprina and Fiorentina pizzas?",
              "Is any pizza instance allowed to belong to both Caprina and Fiorentina classes?",
              "Which pizza classes are asserted as mutually exclusive with Caprina?"
            ]
          },
          {
            "axiom": "Caprina disjointWith Rosa",
            "CQ": [
              "How are Caprina and Rosa conceptually separated within the ontology?",
              "Is there any instance that can simultaneously be classified as both Caprina and Rosa?",
              "What other classes are specified as disjoint with Caprina?"
            ]
          },
          {
            "axiom": "Caprina disjointWith QuattroFormaggi",
            "CQ": [
              "What logical separation is defined between Caprina and QuattroFormaggi in the ontology?",
              "Is there any instance that can be classified as both Caprina and QuattroFormaggi?",
              "Which classes are stated as mutually exclusive with Caprina?"
            ]
          },
          {
            "axiom": "Caprina disjointWith Giardiniera",
            "CQ": [
              "How are Caprina and Giardiniera differentiated within the ontology?",
              "Is there any pizza that can belong to both Caprina and Giardiniera categories?",
              "Which classes in the ontology are declared as disjoint with Giardiniera?"
            ]
          },
          {
            "axiom": "Caprina disjointWith FourSeasons",
            "CQ": [
              "How does the ontology differentiate between Caprina and FourSeasons pizzas?",
              "Is it permissible for a pizza to be classified as both Caprina and FourSeasons?",
              "Which pizza classifications are defined as disjoint from FourSeasons?"
            ]
          },
          {
            "axiom": "Caprina propertyRestrictions [hasTopping some TomatoTopping]",
            "CQ": [
              "Is it required for a Caprina pizza to have at least one TomatoTopping as a topping?",
              "Can a Caprina pizza be considered valid if it does not include any TomatoTopping?",
              "Does the presence of TomatoTopping distinguish Caprina pizza from other pizza types?"
            ]
          },
          {
            "axiom": "Caprina propertyRestrictions [hasTopping some SundriedTomatoTopping]",
            "CQ": [
              "Is it necessary for a Caprina pizza to include at least one Sundried Tomato topping?",
              "Can a Caprina be identified without having the hasTopping property with SundriedTomatoTopping?",
              "Does every instance of Caprina always have some topping that is SundriedTomatoTopping?"
            ]
          },
          {
            "axiom": "Caprina propertyRestrictions [hasTopping some MozzarellaTopping]",
            "CQ": [
              "Is it required that a Caprina pizza includes Mozzarella as one of its toppings?",
              "Does every Caprina pizza have at least one topping of Mozzarella?",
              "Can a Caprina pizza exist without the presence of Mozzarella among its toppings?"
            ]
          },
          {
            "axiom": "Caprina propertyRestrictions [hasTopping only (MozzarellaTopping or TomatoTopping or SundriedTomatoTopping or GoatsCheeseTopping)]",
            "CQ": [
              "Is it required that pizzas classified as Caprina have only Mozzarella, Tomato, Sundried Tomato, or Goat's Cheese as toppings?",
              "Does the Caprina pizza definition prevent it from having any topping other than Mozzarella, Tomato, Sundried Tomato, or Goat's Cheese?",
              "Would a pizza with toppings outside Mozzarella, Tomato, Sundried Tomato, or Goat's Cheese still be considered Caprina?"
            ]
          },
          {
            "axiom": "Caprina propertyRestrictions [hasTopping some GoatsCheeseTopping]",
            "CQ": [
              "Is it required for a Caprina pizza to have at least one topping that is Goat’s Cheese?",
              "Must every Caprina pizza include the 'hasTopping' relation with some instance of GoatsCheeseTopping?",
              "Can a pizza be classified as Caprina if it does not have GoatsCheeseTopping as any of its toppings?"
            ]
          }
        ]
      },
      "FruttiDiMare": {
        "axiom": {
          "subClassOf": [
            "NamedPizza"
          ],
          "disjointWith": [
            "Mushroom",
            "LaReine",
            "Napoletana",
            "Veneziana",
            "AmericanHot",
            "UnclosedPizza",
            "PrinceCarlo",
            "Capricciosa",
            "Siciliana",
            "Cajun",
            "Margherita",
            "American",
            "SloppyGiuseppe",
            "Caprina",
            "Soho",
            "Parmense",
            "PolloAdAstra",
            "Fiorentina",
            "Rosa",
            "QuattroFormaggi",
            "Giardiniera",
            "FourSeasons"
          ],
          "propertyRestrictions": [
            "[hasTopping only (GarlicTopping or TomatoTopping or MixedSeafoodTopping)]",
            "[hasTopping some TomatoTopping]",
            "[hasTopping some GarlicTopping]",
            "[hasTopping some MixedSeafoodTopping]"
          ]
        },
        "description": "FruttiDiMare is defined as a subclass of NamedPizza and is explicitly disjoint with a variety of other specific pizza types, ensuring that no individual can simultaneously belong to FruttiDiMare and any of the listed pizza classes. Members of this class are strictly characterized by their toppings: they can have only garlic, tomato, or mixed seafood toppings—with each FruttiDiMare pizza required to feature at least one of each (tomato, garlic, and mixed seafood toppings). This formalization specifies that FruttiDiMare pizzas are exclusively seafood-themed, with a distinct combination of these three toppings.",
        "CQ": [
          {
            "axiom": "FruttiDiMare subClassOf NamedPizza",
            "CQ": [
              "Is FruttiDiMare classified under the category of NamedPizza?",
              "Which pizza types are subclasses of NamedPizza, such as FruttiDiMare?",
              "What broader pizza classifications encompass FruttiDiMare?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith Mushroom",
            "CQ": [
              "How does the ontology formally differentiate between FruttiDiMare and Mushroom?",
              "Is any entity permitted to be classified as both FruttiDiMare and Mushroom concurrently?",
              "Which classes are identified as being mutually exclusive with FruttiDiMare?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith LaReine",
            "CQ": [
              "What logical separation is established between FruttiDiMare and LaReine in the ontology?",
              "Is there an instance that can be identified as both FruttiDiMare and LaReine?",
              "Which pizza classes are formally specified as being disjoint with FruttiDiMare?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith Napoletana",
            "CQ": [
              "What formal ontological distinction is specified between FruttiDiMare and Napoletana?",
              "Is it consistent for a pizza to be classified as both FruttiDiMare and Napoletana according to the model?",
              "Which classes are identified as mutually exclusive with Napoletana in the ontology?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith Veneziana",
            "CQ": [
              "How does the ontology formally differentiate FruttiDiMare from Veneziana?",
              "Is there any scenario where a pizza can be both categorized as FruttiDiMare and Veneziana?",
              "Which classes are specified as mutually exclusive with FruttiDiMare in the ontology?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith AmericanHot",
            "CQ": [
              "How are FruttiDiMare and AmericanHot represented in terms of class separation within the ontology?",
              "Is there any possibility for an instance to be classified under both FruttiDiMare and AmericanHot?",
              "Which other pizza types are defined as disjoint from AmericanHot?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith UnclosedPizza",
            "CQ": [
              "How does the ontology distinguish between FruttiDiMare and UnclosedPizza?",
              "Is it permitted for a pizza instance to be classified as both FruttiDiMare and UnclosedPizza?",
              "Which classes are specified as disjoint with FruttiDiMare within the ontology?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith PrinceCarlo",
            "CQ": [
              "What is the formal distinction between FruttiDiMare and PrinceCarlo within the ontology?",
              "Can any pizza be classified simultaneously as FruttiDiMare and PrinceCarlo?",
              "Which classes are specified as disjoint with PrinceCarlo?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith Capricciosa",
            "CQ": [
              "How are FruttiDiMare and Capricciosa represented in terms of mutual exclusivity within the ontology?",
              "Is an instance allowed to belong to both the FruttiDiMare and Capricciosa classes simultaneously?",
              "What other pizza types, besides Capricciosa, are formally defined as disjoint with FruttiDiMare?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith Siciliana",
            "CQ": [
              "What ontological separation exists between FruttiDiMare and Siciliana?",
              "Is there any instance that can be classified as both FruttiDiMare and Siciliana?",
              "Which pizza types are formally specified as mutually exclusive with Siciliana?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith Cajun",
            "CQ": [
              "What logical separation is defined between FruttiDiMare and Cajun?",
              "Is there any instance that can be classified simultaneously as FruttiDiMare and Cajun?",
              "Which classes are asserted to be disjoint from Cajun?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith Margherita",
            "CQ": [
              "What formal separation exists between FruttiDiMare and Margherita in the ontology?",
              "Is there any pizza that could be classified as both FruttiDiMare and Margherita?",
              "Which classes are specified as disjoint with Margherita?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith American",
            "CQ": [
              "How does the ontology define the separation between FruttiDiMare and American pizzas?",
              "Is any pizza instance allowed to belong to both FruttiDiMare and American categories?",
              "Which classes in the ontology are specified as disjoint with American?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith SloppyGiuseppe",
            "CQ": [
              "How are FruttiDiMare and SloppyGiuseppe represented in terms of exclusivity within the ontology?",
              "Is there any circumstance where a pizza could be classified as both FruttiDiMare and SloppyGiuseppe?",
              "Which classes are specified as mutually exclusive with FruttiDiMare in the ontology?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith Caprina",
            "CQ": [
              "What logical difference is asserted between FruttiDiMare and Caprina in the ontology?",
              "Can any pizza instance belong simultaneously to the classes FruttiDiMare and Caprina?",
              "Which classes are explicitly defined as disjoint with Caprina?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith Soho",
            "CQ": [
              "What is the logical separation between FruttiDiMare and Soho within the ontology?",
              "Is there any scenario where an individual can be classified as both FruttiDiMare and Soho?",
              "Which classes are defined as mutually exclusive with FruttiDiMare?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith Parmense",
            "CQ": [
              "How are FruttiDiMare and Parmense pizzas differentiated within the ontology?",
              "Is any pizza instance allowed to be simultaneously classified as FruttiDiMare and Parmense?",
              "What classes are specified as disjoint with Parmense in the ontology?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith PolloAdAstra",
            "CQ": [
              "What ontological separation exists between FruttiDiMare and PolloAdAstra?",
              "Is any individual allowed to be classified as both FruttiDiMare and PolloAdAstra?",
              "Which classes within the ontology are explicitly incompatible with PolloAdAstra?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith Fiorentina",
            "CQ": [
              "What type of ontological separation exists between FruttiDiMare and Fiorentina?",
              "Can an individual pizza be classified as both FruttiDiMare and Fiorentina under any circumstances?",
              "Which classes are formally specified as disjoint with Fiorentina in the ontology?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith Rosa",
            "CQ": [
              "How does the ontology formally separate FruttiDiMare and Rosa as pizza types?",
              "Is there an instance that can be classified under both FruttiDiMare and Rosa simultaneously?",
              "Which classes are identified as mutually exclusive with FruttiDiMare in the ontology?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith QuattroFormaggi",
            "CQ": [
              "How does the ontology define the connection or distinction between FruttiDiMare and QuattroFormaggi?",
              "Is there any pizza type that can simultaneously belong to both FruttiDiMare and QuattroFormaggi categories?",
              "Which classes are stated to be mutually exclusive with FruttiDiMare in the ontology?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith Giardiniera",
            "CQ": [
              "What is the formal ontological distinction between FruttiDiMare and Giardiniera?",
              "Is it permissible for a pizza to be classified as both FruttiDiMare and Giardiniera within the ontology?",
              "Which pizza types are stated as mutually exclusive with Giardiniera?"
            ]
          },
          {
            "axiom": "FruttiDiMare disjointWith FourSeasons",
            "CQ": [
              "How does the ontology differentiate between FruttiDiMare and FourSeasons pizzas?",
              "Is any pizza instance permitted to belong to both FruttiDiMare and FourSeasons categories simultaneously?",
              "Which classes are declared as mutually exclusive with FruttiDiMare in the ontology?"
            ]
          },
          {
            "axiom": "FruttiDiMare propertyRestrictions [hasTopping only (GarlicTopping or TomatoTopping or MixedSeafoodTopping)]",
            "CQ": [
              "Must all toppings on a FruttiDiMare pizza be limited to Garlic, Tomato, or Mixed Seafood?",
              "Is it permitted for a FruttiDiMare to have a topping other than Garlic, Tomato, or Mixed Seafood?",
              "Does the definition of FruttiDiMare prevent any toppings besides Garlic, Tomato, or Mixed Seafood from being included?"
            ]
          },
          {
            "axiom": "FruttiDiMare propertyRestrictions [hasTopping some TomatoTopping]",
            "CQ": [
              "Must every FruttiDiMare pizza have at least one topping that is TomatoTopping?",
              "Is it a requirement for FruttiDiMare to include the property hasTopping with a value of TomatoTopping?",
              "Can a pizza qualify as FruttiDiMare if none of its toppings are TomatoTopping?"
            ]
          },
          {
            "axiom": "FruttiDiMare propertyRestrictions [hasTopping some GarlicTopping]",
            "CQ": [
              "Must every FruttiDiMare have at least one topping that is GarlicTopping?",
              "Is it required for FruttiDiMare to include GarlicTopping among its toppings?",
              "Does a FruttiDiMare necessarily possess a hasTopping relation to some GarlicTopping?"
            ]
          },
          {
            "axiom": "FruttiDiMare propertyRestrictions [hasTopping some MixedSeafoodTopping]",
            "CQ": [
              "Is it mandatory for FruttiDiMare pizzas to have at least one topping that is a MixedSeafoodTopping?",
              "Does a pizza qualify as FruttiDiMare only if it includes some MixedSeafoodTopping as a topping?",
              "Can a FruttiDiMare pizza exist without having any MixedSeafoodTopping as a topping?"
            ]
          }
        ]
      },
      "Margherita": {
        "axiom": {
          "subClassOf": [
            "NamedPizza"
          ],
          "disjointWith": [
            "Mushroom",
            "LaReine",
            "Napoletana",
            "Veneziana",
            "AmericanHot",
            "UnclosedPizza",
            "PrinceCarlo",
            "Capricciosa",
            "FruttiDiMare",
            "Siciliana",
            "Cajun",
            "American",
            "SloppyGiuseppe",
            "Caprina",
            "Soho",
            "Parmense",
            "PolloAdAstra",
            "Fiorentina",
            "Rosa",
            "QuattroFormaggi",
            "Giardiniera",
            "FourSeasons"
          ],
          "propertyRestrictions": [
            "[hasTopping some TomatoTopping]",
            "[hasTopping some MozzarellaTopping]",
            "[hasTopping only (MozzarellaTopping or TomatoTopping)]"
          ]
        },
        "description": "Margherita is defined as a subclass of NamedPizza and is explicitly disjoint from a range of other specific pizza varieties, ensuring that no individual pizza can simultaneously be classified as both Margherita and any of those listed (such as Mushroom, LaReine, or Napoletana). Margherita pizzas are characterized by a strict topping composition: they must have at least one TomatoTopping and one MozzarellaTopping, and they can only have MozzarellaTopping or TomatoTopping as toppings—no other topping types are permitted. This formalization captures the essential simplicity and distinctiveness of the Margherita pizza.",
        "CQ": [
          {
            "axiom": "Margherita subClassOf NamedPizza",
            "CQ": [
              "Is Margherita categorized under the broader class of NamedPizza?",
              "Which pizzas are more specific instances within NamedPizza, including Margherita?",
              "To which higher-level pizza categories does Margherita belong?"
            ]
          },
          {
            "axiom": "Margherita disjointWith Mushroom",
            "CQ": [
              "How is the mutual exclusivity between Margherita and Mushroom represented in the ontology?",
              "Is there any entity that can simultaneously belong to both Margherita and Mushroom categories?",
              "Which classes are identified as disjoint with Mushroom?"
            ]
          },
          {
            "axiom": "Margherita disjointWith LaReine",
            "CQ": [
              "Does the ontology specify any overlap between Margherita and LaReine classes?",
              "Is it permitted for a pizza to be both Margherita and LaReine according to the ontology?",
              "Which pizza types are explicitly incompatible with Margherita in this ontology?"
            ]
          },
          {
            "axiom": "Margherita disjointWith Napoletana",
            "CQ": [
              "What logical separation is established between Margherita and Napoletana in the ontology?",
              "Is there any instance that can be classified as both Margherita and Napoletana?",
              "Which pizza categories are specified as disjoint with Margherita?"
            ]
          },
          {
            "axiom": "Margherita disjointWith Veneziana",
            "CQ": [
              "What kind of logical boundary is established between Margherita and Veneziana classes in the ontology?",
              "Is there any instance that can simultaneously belong to both Margherita and Veneziana categories?",
              "Which other pizza types are explicitly defined as incompatible with Margherita?"
            ]
          },
          {
            "axiom": "Margherita disjointWith AmericanHot",
            "CQ": [
              "What logical separation is defined between Margherita and AmericanHot within the ontology?",
              "Is it allowable for a pizza to be classified as both Margherita and AmericanHot?",
              "Which classes are specified as mutually exclusive with AmericanHot?"
            ]
          },
          {
            "axiom": "Margherita disjointWith UnclosedPizza",
            "CQ": [
              "How does the ontology formally distinguish between Margherita and UnclosedPizza?",
              "Is there any instance that can simultaneously be classified as both Margherita and UnclosedPizza?",
              "Which classes are specified as being disjoint with UnclosedPizza?"
            ]
          },
          {
            "axiom": "Margherita disjointWith PrinceCarlo",
            "CQ": [
              "What formal separation is established between Margherita and PrinceCarlo in the ontology?",
              "Is there any instance that can be both Margherita and PrinceCarlo?",
              "Which pizza types are specified as disjoint with Margherita?"
            ]
          },
          {
            "axiom": "Margherita disjointWith Capricciosa",
            "CQ": [
              "What formal differentiation exists between Margherita and Capricciosa in the ontology?",
              "Is it permissible for a pizza to be classified as both Margherita and Capricciosa?",
              "Which classes are formally declared to be incompatible with Margherita?"
            ]
          },
          {
            "axiom": "Margherita disjointWith FruttiDiMare",
            "CQ": [
              "How does the ontology represent the relationship between Margherita and FruttiDiMare pizzas?",
              "Is it possible for a pizza to be classified as both Margherita and FruttiDiMare simultaneously?",
              "Which pizza types are specified as disjoint with Margherita in the ontology?"
            ]
          },
          {
            "axiom": "Margherita disjointWith Siciliana",
            "CQ": [
              "What formal separation is defined between Margherita and Siciliana pizzas in the ontology?",
              "Is there any instance that can simultaneously be classified as both Margherita and Siciliana?",
              "Which classes are stated as mutually exclusive with Siciliana?"
            ]
          },
          {
            "axiom": "Margherita disjointWith Cajun",
            "CQ": [
              "How does the ontology represent the separation between Margherita and Cajun pizza types?",
              "Is there any instance that can be classified as both Margherita and Cajun?",
              "Which pizza varieties are defined as mutually exclusive with Margherita in the model?"
            ]
          },
          {
            "axiom": "Margherita disjointWith American",
            "CQ": [
              "How does the ontology specify the connection or separation between Margherita and American pizza types?",
              "Can a pizza instance be classified as both Margherita and American within the ontology?",
              "Which other pizza varieties are defined as mutually exclusive with Margherita?"
            ]
          },
          {
            "axiom": "Margherita disjointWith SloppyGiuseppe",
            "CQ": [
              "What formal separation exists between Margherita and SloppyGiuseppe within the ontology?",
              "Is there any individual that can be classified as both Margherita and SloppyGiuseppe?",
              "Which other pizza types, if any, are explicitly incompatible with Margherita?"
            ]
          },
          {
            "axiom": "Margherita disjointWith Caprina",
            "CQ": [
              "What is the ontological relationship specified between Margherita and Caprina?",
              "Can a single pizza instance simultaneously belong to both Margherita and Caprina categories?",
              "Which classes are formally specified as disjoint with Caprina?"
            ]
          },
          {
            "axiom": "Margherita disjointWith Soho",
            "CQ": [
              "How is the distinction between Margherita and Soho represented in the ontology?",
              "Is there any scenario where an entity can be both Margherita and Soho?",
              "Which classes are specified as mutually exclusive with Margherita?"
            ]
          },
          {
            "axiom": "Margherita disjointWith Parmense",
            "CQ": [
              "How does the ontology differentiate between Margherita and Parmense pizzas?",
              "Is there any pizza that can be classified as both Margherita and Parmense at once?",
              "Which classes of pizza are defined as incompatible with Parmense within the ontology?"
            ]
          },
          {
            "axiom": "Margherita disjointWith PolloAdAstra",
            "CQ": [
              "What is the formal distinction between Margherita and PolloAdAstra in the ontology?",
              "Is any individual permitted to be classified as both Margherita and PolloAdAstra?",
              "Which classes are specified as mutually exclusive with Margherita?"
            ]
          },
          {
            "axiom": "Margherita disjointWith Fiorentina",
            "CQ": [
              "What is the connection defined in the ontology between Margherita and Fiorentina?",
              "Is there any scenario where a pizza is classified as both Margherita and Fiorentina?",
              "Which classes are identified as disjoint with Fiorentina in the ontology?"
            ]
          },
          {
            "axiom": "Margherita disjointWith Rosa",
            "CQ": [
              "What formal separation exists between Margherita and Rosa in the ontology?",
              "Is there any instance that can simultaneously be classified as both Margherita and Rosa?",
              "Which classes are defined as mutually exclusive with Rosa?"
            ]
          },
          {
            "axiom": "Margherita disjointWith QuattroFormaggi",
            "CQ": [
              "What is the ontological relationship stipulated between Margherita and QuattroFormaggi?",
              "Is any entity permitted to belong simultaneously to both Margherita and QuattroFormaggi categories?",
              "Which classes are defined as mutually exclusive with QuattroFormaggi?"
            ]
          },
          {
            "axiom": "Margherita disjointWith Giardiniera",
            "CQ": [
              "What ontological separation is present between Margherita and Giardiniera?",
              "Is there any instance that can be classified simultaneously as Margherita and Giardiniera?",
              "Which classes are explicitly defined as incompatible with Giardiniera?"
            ]
          },
          {
            "axiom": "Margherita disjointWith FourSeasons",
            "CQ": [
              "What is the ontological separation between Margherita and FourSeasons pizza classes?",
              "Is any pizza instance allowed to belong to both Margherita and FourSeasons categories simultaneously?",
              "Which pizza types are defined as mutually exclusive with FourSeasons?"
            ]
          },
          {
            "axiom": "Margherita propertyRestrictions [hasTopping some TomatoTopping]",
            "CQ": [
              "Is it required that every Margherita pizza includes at least one TomatoTopping as a topping?",
              "Can a pizza be classified as Margherita if it lacks TomatoTopping among its toppings?",
              "Does the presence of TomatoTopping serve as a necessary condition for identifying a pizza as Margherita?"
            ]
          },
          {
            "axiom": "Margherita propertyRestrictions [hasTopping some MozzarellaTopping]",
            "CQ": [
              "Is it required that every Margherita has at least one MozzarellaTopping as a topping?",
              "Can a Margherita exist without having MozzarellaTopping among its toppings?",
              "Does the presence of MozzarellaTopping as a topping suffice for a pizza to be classified as Margherita?"
            ]
          },
          {
            "axiom": "Margherita propertyRestrictions [hasTopping only (MozzarellaTopping or TomatoTopping)]",
            "CQ": [
              "Is it required that every topping on a Margherita pizza must be either Mozzarella or Tomato?",
              "Can a Margherita pizza include any topping aside from Mozzarella and Tomato?",
              "Does the definition of Margherita explicitly restrict its toppings to only Mozzarella and Tomato types?"
            ]
          }
        ]
      },
      "Parmense": {
        "axiom": {
          "subClassOf": [
            "NamedPizza"
          ],
          "disjointWith": [
            "Mushroom",
            "LaReine",
            "Napoletana",
            "Veneziana",
            "AmericanHot",
            "UnclosedPizza",
            "PrinceCarlo",
            "Capricciosa",
            "FruttiDiMare",
            "Siciliana",
            "Cajun",
            "Margherita",
            "American",
            "SloppyGiuseppe",
            "Caprina",
            "Soho",
            "PolloAdAstra",
            "Fiorentina",
            "Rosa",
            "QuattroFormaggi",
            "Giardiniera",
            "FourSeasons"
          ],
          "propertyRestrictions": [
            "[hasTopping some TomatoTopping]",
            "[hasTopping some HamTopping]",
            "[hasTopping some ParmesanTopping]",
            "[hasTopping some MozzarellaTopping]",
            "[hasTopping some AsparagusTopping]",
            "[hasTopping only (MozzarellaTopping or TomatoTopping or HamTopping or ParmesanTopping or AsparagusTopping)]"
          ]
        },
        "description": "Parmense is defined as a subclass of NamedPizza and is explicitly disjoint with a wide range of other pizza types, ensuring that no individual pizza can simultaneously be classified as Parmense and any of the listed disjoint pizzas. Parmense pizzas are characterized by a specific set of required toppings: each must include at least some tomato, ham, parmesan, mozzarella, and asparagus toppings. Furthermore, they may only have these toppings—no additional ingredients are permitted. This formalization strictly specifies the distinctive composition of Parmense pizzas within the NamedPizza hierarchy.",
        "CQ": [
          {
            "axiom": "Parmense subClassOf NamedPizza",
            "CQ": [
              "Is Parmense included among the NamedPizza subclasses?",
              "Which pizza types fall under the broader category of NamedPizza, such as Parmense?",
              "What higher-level categories does Parmense belong to within the pizza classification?"
            ]
          },
          {
            "axiom": "Parmense disjointWith Mushroom",
            "CQ": [
              "How does the ontology formally distinguish between Parmense and Mushroom?",
              "Is there any instance that can simultaneously belong to both Parmense and Mushroom classes?",
              "Which classes are specified as mutually exclusive with Mushroom in the current ontology?"
            ]
          },
          {
            "axiom": "Parmense disjointWith LaReine",
            "CQ": [
              "How are Parmense and LaReine differentiated within the ontology?",
              "Is there an instance that can belong to both Parmense and LaReine categories?",
              "Which classes are explicitly incompatible with Parmense?"
            ]
          },
          {
            "axiom": "Parmense disjointWith Napoletana",
            "CQ": [
              "What type of ontological separation is defined between Parmense and Napoletana?",
              "Is it permissible for one instance to be classified as both Parmense and Napoletana?",
              "Which classes within the ontology are stated to be incompatible with Napoletana?"
            ]
          },
          {
            "axiom": "Parmense disjointWith Veneziana",
            "CQ": [
              "How does the ontology represent the mutual exclusivity between Parmense and Veneziana?",
              "Is there any scenario where a pizza could simultaneously belong to both Parmense and Veneziana categories?",
              "Which classes are specified as disjoint with Parmense in the ontology?"
            ]
          },
          {
            "axiom": "Parmense disjointWith AmericanHot",
            "CQ": [
              "How does the ontology represent the incompatibility between Parmense and AmericanHot?",
              "Is it allowed for a single pizza to belong to both Parmense and AmericanHot categories simultaneously?",
              "Which pizza classes are specified as being mutually exclusive with Parmense?"
            ]
          },
          {
            "axiom": "Parmense disjointWith UnclosedPizza",
            "CQ": [
              "What logical separation is defined between Parmense and UnclosedPizza within the ontology?",
              "Is any instance allowed to be both Parmense and UnclosedPizza?",
              "Which classes are formally stated as disjoint with UnclosedPizza?"
            ]
          },
          {
            "axiom": "Parmense disjointWith PrinceCarlo",
            "CQ": [
              "What formal separation is asserted between Parmense and PrinceCarlo within the ontology?",
              "Is there any instance that can be simultaneously classified as Parmense and PrinceCarlo?",
              "Which classes are explicitly defined as disjoint with PrinceCarlo?"
            ]
          },
          {
            "axiom": "Parmense disjointWith Capricciosa",
            "CQ": [
              "What distinguishes Parmense from Capricciosa according to the ontology?",
              "Is there any instance that can be simultaneously classified as both Parmense and Capricciosa?",
              "Which classes are declared as disjoint with Parmense?"
            ]
          },
          {
            "axiom": "Parmense disjointWith FruttiDiMare",
            "CQ": [
              "How are Parmense and FruttiDiMare represented in terms of mutual exclusivity within the ontology?",
              "Is there an instance that can belong to both Parmense and FruttiDiMare classes simultaneously?",
              "Which pizza classes are asserted as disjoint with Parmense?"
            ]
          },
          {
            "axiom": "Parmense disjointWith Siciliana",
            "CQ": [
              "What formal separation is stated between Parmense and Siciliana in the ontology?",
              "Can a pizza instance be classified as both Parmense and Siciliana?",
              "Which classes are defined as disjoint with Parmense?"
            ]
          },
          {
            "axiom": "Parmense disjointWith Cajun",
            "CQ": [
              "How does the ontology represent the incompatibility between Parmense and Cajun?",
              "Can an entity simultaneously belong to both Parmense and Cajun categories?",
              "Which classes are explicitly defined as disjoint with Parmense?"
            ]
          },
          {
            "axiom": "Parmense disjointWith Margherita",
            "CQ": [
              "How are Parmense and Margherita conceptually separated within the ontology?",
              "Is it feasible for an individual pizza to be classified as both Parmense and Margherita?",
              "Which classes are formally specified as disjoint with Margherita in the ontology?"
            ]
          },
          {
            "axiom": "Parmense disjointWith American",
            "CQ": [
              "What is the ontological distinction between Parmense and American?",
              "Is there any instance that can simultaneously belong to both Parmense and American classes?",
              "Which classes are specified as disjoint with American in the ontology?"
            ]
          },
          {
            "axiom": "Parmense disjointWith SloppyGiuseppe",
            "CQ": [
              "What is the ontological relationship between Parmense and SloppyGiuseppe?",
              "Is there any entity that can simultaneously belong to both Parmense and SloppyGiuseppe classes?",
              "Which classes are specified as mutually exclusive with Parmense?"
            ]
          },
          {
            "axiom": "Parmense disjointWith Caprina",
            "CQ": [
              "How does the ontology formally relate Parmense and Caprina classes?",
              "Is there any individual that can simultaneously belong to both Parmense and Caprina categories?",
              "Which classes, apart from Caprina, are asserted to be disjoint with Parmense?"
            ]
          },
          {
            "axiom": "Parmense disjointWith Soho",
            "CQ": [
              "How does the ontology distinguish between Parmense and Soho pizzas?",
              "Is it allowed for a single pizza to belong to both Parmense and Soho categories simultaneously?",
              "Which classes are specified as mutually exclusive with Parmense?"
            ]
          },
          {
            "axiom": "Parmense disjointWith PolloAdAstra",
            "CQ": [
              "How are Parmense and PolloAdAstra differentiated within the ontology?",
              "Is it permitted for a pizza to be classified as both Parmense and PolloAdAstra?",
              "Which classes are stated to be disjoint with PolloAdAstra?"
            ]
          },
          {
            "axiom": "Parmense disjointWith Fiorentina",
            "CQ": [
              "How does the ontology specify the association between Parmense and Fiorentina classes?",
              "Is there any scenario where an individual instance can belong to both Parmense and Fiorentina?",
              "Which classes in the ontology are explicitly incompatible with Fiorentina?"
            ]
          },
          {
            "axiom": "Parmense disjointWith Rosa",
            "CQ": [
              "How are Parmense and Rosa classified with regard to mutual exclusivity in the ontology?",
              "Is there any instance that can belong to both Parmense and Rosa simultaneously?",
              "What other classes are asserted to be disjoint with Rosa?"
            ]
          },
          {
            "axiom": "Parmense disjointWith QuattroFormaggi",
            "CQ": [
              "What logical separation is defined between Parmense and QuattroFormaggi in the ontology?",
              "Can an individual pizza belong to both Parmense and QuattroFormaggi categories?",
              "Which classes are explicitly stated as disjoint with Parmense?"
            ]
          },
          {
            "axiom": "Parmense disjointWith Giardiniera",
            "CQ": [
              "How does the ontology differentiate between Parmense and Giardiniera?",
              "Is there any instance that can be classified as both Parmense and Giardiniera?",
              "Which classes are explicitly specified as disjoint with Giardiniera?"
            ]
          },
          {
            "axiom": "Parmense disjointWith FourSeasons",
            "CQ": [
              "What is the ontological separation between Parmense and FourSeasons pizzas?",
              "Can an individual pizza instance belong to both Parmense and FourSeasons classes simultaneously?",
              "Which pizza types are formally specified as disjoint from FourSeasons?"
            ]
          },
          {
            "axiom": "Parmense propertyRestrictions [hasTopping some TomatoTopping]",
            "CQ": [
              "Is every Parmense pizza required to have at least one topping of TomatoTopping?",
              "Must a Parmense pizza always include TomatoTopping among its toppings?",
              "Can a Parmense pizza exist without having any TomatoTopping?"
            ]
          },
          {
            "axiom": "Parmense propertyRestrictions [hasTopping some HamTopping]",
            "CQ": [
              "Is it required for Parmense to have the hasTopping property with at least one HamTopping instance?",
              "Does every Parmense possess the hasTopping relation involving a HamTopping?",
              "Can a pizza be classified as Parmense if it lacks any HamTopping among its toppings?"
            ]
          },
          {
            "axiom": "Parmense propertyRestrictions [hasTopping some ParmesanTopping]",
            "CQ": [
              "Is it required that a Parmense pizza has at least one topping of type ParmesanTopping?",
              "Must every Parmense pizza include the property 'hasTopping' linking it to a ParmesanTopping?",
              "Does the presence of a ParmesanTopping suffice for a pizza to meet the topping criteria for Parmense?"
            ]
          },
          {
            "axiom": "Parmense propertyRestrictions [hasTopping some MozzarellaTopping]",
            "CQ": [
              "Must a Parmense always have at least one MozzarellaTopping as a topping?",
              "Is the presence of MozzarellaTopping required for something to be considered Parmense?",
              "Can a Parmense exist without having any MozzarellaTopping?"
            ]
          },
          {
            "axiom": "Parmense propertyRestrictions [hasTopping some AsparagusTopping]",
            "CQ": [
              "Must every Parmense have at least one AsparagusTopping as a topping?",
              "Is it required for Parmense to possess the property 'hasTopping' associated with AsparagusTopping?",
              "Does the existence of a Parmense imply the presence of some AsparagusTopping through the hasTopping relation?"
            ]
          },
          {
            "axiom": "Parmense propertyRestrictions [hasTopping only (MozzarellaTopping or TomatoTopping or HamTopping or ParmesanTopping or AsparagusTopping)]",
            "CQ": [
              "Must every topping on a Parmense pizza be either Mozzarella, Tomato, Ham, Parmesan, or Asparagus?",
              "Is it possible for a Parmense pizza to include any topping outside of Mozzarella, Tomato, Ham, Parmesan, or Asparagus?",
              "Are toppings on Parmense pizzas universally limited to the five specified types and no others?"
            ]
          }
        ]
      },
      "QuattroFormaggi": {
        "axiom": {
          "subClassOf": [
            "NamedPizza"
          ],
          "disjointWith": [
            "Mushroom",
            "LaReine",
            "Napoletana",
            "Veneziana",
            "AmericanHot",
            "UnclosedPizza",
            "PrinceCarlo",
            "Capricciosa",
            "FruttiDiMare",
            "Siciliana",
            "Cajun",
            "Margherita",
            "American",
            "SloppyGiuseppe",
            "Caprina",
            "Soho",
            "Parmense",
            "PolloAdAstra",
            "Fiorentina",
            "Rosa",
            "Giardiniera",
            "FourSeasons"
          ],
          "propertyRestrictions": [
            "[hasTopping some TomatoTopping]",
            "[hasTopping some FourCheesesTopping]",
            "[hasTopping only (FourCheesesTopping or TomatoTopping)]"
          ]
        },
        "description": "QuattroFormaggi is defined as a subclass of NamedPizza and is explicitly disjoint with a range of other specific pizza classes, meaning an individual pizza cannot simultaneously belong to QuattroFormaggi and any of the listed disjoint classes. Members of this class must have at least one tomato topping and at least one four-cheeses topping. Additionally, QuattroFormaggi pizzas are restricted to having only tomato and four-cheeses toppings—no other topping types are permitted. This formalization guarantees that any pizza classified as QuattroFormaggi has a distinctive combination of tomato and four-cheeses toppings, consistent with its traditional recipe.",
        "CQ": [
          {
            "axiom": "QuattroFormaggi subClassOf NamedPizza",
            "CQ": [
              "Is QuattroFormaggi categorized under NamedPizza?",
              "What types are classified as specializations of NamedPizza?",
              "Which broader classes encompass QuattroFormaggi?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith Mushroom",
            "CQ": [
              "How does the ontology represent the mutual exclusivity between QuattroFormaggi and Mushroom?",
              "Is it permitted for an entity to be classified as both QuattroFormaggi and Mushroom simultaneously?",
              "Which classes are asserted as disjoint with Mushroom in the ontology?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith LaReine",
            "CQ": [
              "What is the ontological difference between QuattroFormaggi and LaReine?",
              "Can an instance of pizza belong to both QuattroFormaggi and LaReine categories simultaneously?",
              "Which pizza varieties are defined as disjoint with LaReine?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith Napoletana",
            "CQ": [
              "Are QuattroFormaggi and Napoletana represented as mutually exclusive classes in the ontology?",
              "Is any pizza instance allowed to belong to both QuattroFormaggi and Napoletana categories?",
              "Which classes are explicitly defined as disjoint with QuattroFormaggi?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith Veneziana",
            "CQ": [
              "How does the ontology separate QuattroFormaggi and Veneziana as distinct pizza types?",
              "Is there any instance that can be classified as both QuattroFormaggi and Veneziana simultaneously?",
              "Which pizza categories are explicitly incompatible with QuattroFormaggi according to the ontology?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith AmericanHot",
            "CQ": [
              "What is the logical separation between QuattroFormaggi and AmericanHot in the ontology?",
              "Can a pizza belong to both QuattroFormaggi and AmericanHot categories simultaneously?",
              "Which classes are explicitly defined as incompatible with QuattroFormaggi?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith UnclosedPizza",
            "CQ": [
              "How does the ontology distinguish QuattroFormaggi from UnclosedPizza?",
              "Is there any pizza that can be classified as both QuattroFormaggi and UnclosedPizza?",
              "Which pizza types are stated as disjoint with UnclosedPizza?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith PrinceCarlo",
            "CQ": [
              "How does the ontology represent the exclusivity of QuattroFormaggi and PrinceCarlo?",
              "Is there any instance that can simultaneously be classified as both QuattroFormaggi and PrinceCarlo?",
              "Which classes are defined as disjoint with QuattroFormaggi in the current ontology?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith Capricciosa",
            "CQ": [
              "What logical exclusivity is asserted between QuattroFormaggi and Capricciosa in the ontology?",
              "Is it allowable for a pizza to be classified as both QuattroFormaggi and Capricciosa?",
              "Which pizza types are explicitly disjoint with Capricciosa according to the ontology?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith FruttiDiMare",
            "CQ": [
              "How does the ontology differentiate between QuattroFormaggi and FruttiDiMare pizzas?",
              "Is there any overlap allowed between the classes QuattroFormaggi and FruttiDiMare?",
              "What other pizza types are stated to be disjoint with FruttiDiMare in the ontology?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith Siciliana",
            "CQ": [
              "What type of ontological separation is established between QuattroFormaggi and Siciliana?",
              "Could an individual pizza instance belong to both QuattroFormaggi and Siciliana categories simultaneously?",
              "Which classes are formally defined as disjoint with Siciliana within the ontology?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith Cajun",
            "CQ": [
              "Is any pizza instance allowed to be classified as both QuattroFormaggi and Cajun?",
              "What classes are stated to be incompatible with Cajun in the ontology?",
              "Which explicit separation exists between QuattroFormaggi and Cajun according to the ontology?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith Margherita",
            "CQ": [
              "What is the formal ontological separation between QuattroFormaggi and Margherita?",
              "Can a single pizza instance belong to both the QuattroFormaggi and Margherita classes?",
              "Which pizza types are specified as mutually exclusive with QuattroFormaggi?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith American",
            "CQ": [
              "What formal separation is established between QuattroFormaggi and American in the ontology?",
              "Is any entity allowed to belong to both QuattroFormaggi and American classes?",
              "Which pizza types are defined as incompatible with American?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith SloppyGiuseppe",
            "CQ": [
              "How does the ontology specify the connection or separation between QuattroFormaggi and SloppyGiuseppe?",
              "Is there any entity that can be classified simultaneously as QuattroFormaggi and SloppyGiuseppe?",
              "Which classes, besides SloppyGiuseppe, are stated to be incompatible with QuattroFormaggi?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith Caprina",
            "CQ": [
              "How is the incompatibility between QuattroFormaggi and Caprina represented in the ontology?",
              "Is there any possibility for a pizza to be classified as both QuattroFormaggi and Caprina?",
              "Which pizza categories are formally defined as disjoint with Caprina?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith Soho",
            "CQ": [
              "Are QuattroFormaggi and Soho represented as mutually exclusive pizza types in the ontology?",
              "Is there any pizza that can belong to both QuattroFormaggi and Soho categories?",
              "Which pizza classes are identified as disjoint with QuattroFormaggi?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith Parmense",
            "CQ": [
              "What logical distinction is specified between QuattroFormaggi and Parmense within the ontology?",
              "Is any pizza instance allowed to be classified as both QuattroFormaggi and Parmense?",
              "Which classes are specified as disjoint with Parmense?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith PolloAdAstra",
            "CQ": [
              "What ontological separation is defined between QuattroFormaggi and PolloAdAstra in the ontology?",
              "Is it permissible for a pizza to belong to both QuattroFormaggi and PolloAdAstra categories?",
              "Which classes are asserted as disjoint with QuattroFormaggi?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith Fiorentina",
            "CQ": [
              "What is the logical difference between QuattroFormaggi and Fiorentina in the ontology?",
              "Is there any circumstance where a pizza could be both QuattroFormaggi and Fiorentina?",
              "Which classes are specified to be mutually exclusive with QuattroFormaggi?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith Rosa",
            "CQ": [
              "What kind of ontological separation is defined between QuattroFormaggi and Rosa?",
              "Is there any instance that can belong to both QuattroFormaggi and Rosa categories?",
              "Which classes are specified as being mutually exclusive with QuattroFormaggi?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith Giardiniera",
            "CQ": [
              "How does the ontology distinguish between QuattroFormaggi and Giardiniera?",
              "Is there any entity that can simultaneously belong to both QuattroFormaggi and Giardiniera?",
              "Which classes are specified as being disjoint with Giardiniera?"
            ]
          },
          {
            "axiom": "QuattroFormaggi disjointWith FourSeasons",
            "CQ": [
              "Can any pizza be classified as both QuattroFormaggi and FourSeasons?",
              "What is the ontological separation between QuattroFormaggi and FourSeasons?",
              "Which classes are specified as disjoint with QuattroFormaggi?"
            ]
          },
          {
            "axiom": "QuattroFormaggi propertyRestrictions [hasTopping some TomatoTopping]",
            "CQ": [
              "Is it necessary for a QuattroFormaggi pizza to have at least one TomatoTopping as a topping?",
              "Can a pizza be classified as QuattroFormaggi if it does not include any TomatoTopping among its toppings?",
              "Does the presence of TomatoTopping serve as a required condition for an item to be recognized as QuattroFormaggi?"
            ]
          },
          {
            "axiom": "QuattroFormaggi propertyRestrictions [hasTopping some FourCheesesTopping]",
            "CQ": [
              "Must every QuattroFormaggi have at least one topping of the FourCheesesTopping type?",
              "Is it required that a QuattroFormaggi includes a topping categorized as FourCheesesTopping?",
              "Can a QuattroFormaggi exist without any FourCheesesTopping among its toppings?"
            ]
          },
          {
            "axiom": "QuattroFormaggi propertyRestrictions [hasTopping only (FourCheesesTopping or TomatoTopping)]",
            "CQ": [
              "Is a QuattroFormaggi pizza permitted to have toppings other than FourCheesesTopping or TomatoTopping?",
              "Does the restriction for QuattroFormaggi ensure that all its toppings must be either FourCheesesTopping or TomatoTopping?",
              "Can a QuattroFormaggi pizza include any topping not specified as FourCheesesTopping or TomatoTopping under these restrictions?"
            ]
          }
        ]
      },
      "SloppyGiuseppe": {
        "axiom": {
          "subClassOf": [
            "NamedPizza"
          ],
          "disjointWith": [
            "Mushroom",
            "LaReine",
            "Napoletana",
            "Veneziana",
            "AmericanHot",
            "UnclosedPizza",
            "PrinceCarlo",
            "Capricciosa",
            "FruttiDiMare",
            "Siciliana",
            "Cajun",
            "Margherita",
            "American",
            "Caprina",
            "Soho",
            "Parmense",
            "PolloAdAstra",
            "Fiorentina",
            "Rosa",
            "QuattroFormaggi",
            "Giardiniera",
            "FourSeasons"
          ],
          "propertyRestrictions": [
            "[hasTopping some HotSpicedBeefTopping]",
            "[hasTopping some TomatoTopping]",
            "[hasTopping some GreenPepperTopping]",
            "[hasTopping some MozzarellaTopping]",
            "[hasTopping some OnionTopping]",
            "[hasTopping only (HotSpicedBeefTopping or MozzarellaTopping or TomatoTopping or OnionTopping or GreenPepperTopping)]"
          ]
        },
        "description": "SloppyGiuseppe is defined as a subclass of NamedPizza, and is explicitly disjoint with a set of other specific pizza types, ensuring that any instance cannot simultaneously belong to these other pizza classes. It is characterized by the presence of HotSpicedBeefTopping, TomatoTopping, GreenPepperTopping, MozzarellaTopping, and OnionTopping as mandatory ingredients. Furthermore, it is restricted to only these toppings: no other topping types are permitted on a SloppyGiuseppe. This formalization ensures the class captures a distinct and exclusive pizza variety, consistently reflecting its specific ingredient profile.",
        "CQ": [
          {
            "axiom": "SloppyGiuseppe subClassOf NamedPizza",
            "CQ": [
              "Is SloppyGiuseppe categorized under NamedPizza?",
              "Which pizza types are classified as subclasses of NamedPizza?",
              "What broader categories does SloppyGiuseppe belong to?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith Mushroom",
            "CQ": [
              "How are SloppyGiuseppe and Mushroom represented in terms of disjointness within the ontology?",
              "Can an entity be classified as both SloppyGiuseppe and Mushroom?",
              "Which classes are specified as disjoint from SloppyGiuseppe?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith LaReine",
            "CQ": [
              "What ontological separation is asserted between SloppyGiuseppe and LaReine?",
              "Is any instance permitted to belong to both SloppyGiuseppe and LaReine categories simultaneously?",
              "Which pizza types are formally marked as disjoint with SloppyGiuseppe in the ontology?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith Napoletana",
            "CQ": [
              "How does the ontology specify the connection between SloppyGiuseppe and Napoletana?",
              "Can any individual pizza be classified as both SloppyGiuseppe and Napoletana?",
              "Which classes are stated to be mutually exclusive with Napoletana?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith Veneziana",
            "CQ": [
              "Are SloppyGiuseppe and Veneziana mutually exclusive pizza types in the ontology?",
              "Is any pizza instance permitted to belong to both the SloppyGiuseppe and Veneziana classes?",
              "Which classes are specified as disjoint with SloppyGiuseppe?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith AmericanHot",
            "CQ": [
              "How does the ontology represent the exclusivity between SloppyGiuseppe and AmericanHot?",
              "Is there any scenario where a pizza can be classified as both SloppyGiuseppe and AmericanHot?",
              "Which pizza varieties are specified as mutually exclusive with AmericanHot?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith UnclosedPizza",
            "CQ": [
              "How does the ontology specify the incompatibility between SloppyGiuseppe and UnclosedPizza?",
              "Is there any instance that can be classified as both SloppyGiuseppe and UnclosedPizza within the ontology?",
              "Which pizza types are stated as mutually exclusive with UnclosedPizza?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith PrinceCarlo",
            "CQ": [
              "What is the ontological distinction between SloppyGiuseppe and PrinceCarlo?",
              "Is there any instance that can be classified as both SloppyGiuseppe and PrinceCarlo?",
              "Which classes are specified as mutually exclusive with PrinceCarlo?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith Capricciosa",
            "CQ": [
              "What formal separation is established between SloppyGiuseppe and Capricciosa in the ontology?",
              "Is there any instance that can simultaneously be both SloppyGiuseppe and Capricciosa?",
              "Which classes are defined as mutually exclusive with Capricciosa?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith FruttiDiMare",
            "CQ": [
              "What is the nature of the disjointness specified between SloppyGiuseppe and FruttiDiMare in the ontology?",
              "Is an individual pizza allowed to be classified as both SloppyGiuseppe and FruttiDiMare?",
              "Which classes are asserted to be disjoint with FruttiDiMare?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith Siciliana",
            "CQ": [
              "How does the ontology represent the separation between SloppyGiuseppe and Siciliana?",
              "Is there any instance that can be classified simultaneously as SloppyGiuseppe and Siciliana?",
              "Which pizza types are formally specified as incompatible with SloppyGiuseppe?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith Cajun",
            "CQ": [
              "How are SloppyGiuseppe and Cajun related within the ontology?",
              "Is any pizza instance allowed to be classified as both SloppyGiuseppe and Cajun?",
              "Which classes are specified as disjoint with SloppyGiuseppe?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith Margherita",
            "CQ": [
              "What formal separation is described between SloppyGiuseppe and Margherita in the ontology?",
              "Is there any instance that can simultaneously belong to both SloppyGiuseppe and Margherita classes?",
              "Which other pizza types, apart from Margherita, are specified as non-overlapping with SloppyGiuseppe?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith American",
            "CQ": [
              "What kind of logical separation is defined between SloppyGiuseppe and American in the ontology?",
              "Does any instance belong to both the SloppyGiuseppe and American pizza categories?",
              "Which pizza types are specified as mutually exclusive with American?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith Caprina",
            "CQ": [
              "Are SloppyGiuseppe and Caprina defined as mutually exclusive classes in the ontology?",
              "Can a single pizza instance be classified as both SloppyGiuseppe and Caprina?",
              "What classes are formally incompatible with Caprina according to the ontology?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith Soho",
            "CQ": [
              "What is the ontological distinction specified between SloppyGiuseppe and Soho?",
              "Is there any instance that can belong to both the SloppyGiuseppe and Soho categories?",
              "Which classes are formally declared as disjoint with Soho?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith Parmense",
            "CQ": [
              "What is the logical separation between SloppyGiuseppe and Parmense in the ontology?",
              "Can any pizza instance belong to both the SloppyGiuseppe and Parmense categories?",
              "Which classes are specified as mutually exclusive with Parmense?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith PolloAdAstra",
            "CQ": [
              "How are SloppyGiuseppe and PolloAdAstra conceptually separated in the ontology?",
              "Is any pizza instance allowed to be classified simultaneously as SloppyGiuseppe and PolloAdAstra?",
              "Which pizza types are formally specified as being incompatible with PolloAdAstra?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith Fiorentina",
            "CQ": [
              "What logical separation is established between SloppyGiuseppe and Fiorentina in the ontology?",
              "Is it allowed for a pizza to be classified as both SloppyGiuseppe and Fiorentina simultaneously?",
              "Which classes are specified as mutually exclusive with SloppyGiuseppe?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith Rosa",
            "CQ": [
              "What formal separation exists between SloppyGiuseppe and Rosa in the ontology?",
              "Can an individual pizza be classified as both SloppyGiuseppe and Rosa?",
              "Which classes are declared as incompatible with Rosa?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith QuattroFormaggi",
            "CQ": [
              "What is the ontological difference between SloppyGiuseppe and QuattroFormaggi?",
              "Could an individual pizza instance ever be classified as both SloppyGiuseppe and QuattroFormaggi?",
              "Which pizza types are formally specified as disjoint with SloppyGiuseppe in the ontology?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith Giardiniera",
            "CQ": [
              "What logical separation is defined between SloppyGiuseppe and Giardiniera within the ontology?",
              "Is it permissible for an individual pizza to belong to both SloppyGiuseppe and Giardiniera classes?",
              "Which classes are specified as mutually exclusive with Giardiniera?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe disjointWith FourSeasons",
            "CQ": [
              "What formal separation is defined between SloppyGiuseppe and FourSeasons in the ontology?",
              "Is it allowable for an instance to be classified both as SloppyGiuseppe and as FourSeasons?",
              "Which pizza types are explicitly specified as mutually exclusive with FourSeasons?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe propertyRestrictions [hasTopping some HotSpicedBeefTopping]",
            "CQ": [
              "Is it required for SloppyGiuseppe to have at least one topping that is a HotSpicedBeefTopping?",
              "Must every SloppyGiuseppe include the property hasTopping relating it to some HotSpicedBeefTopping?",
              "Can a SloppyGiuseppe exist without having hasTopping linked to a HotSpicedBeefTopping?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe propertyRestrictions [hasTopping some TomatoTopping]",
            "CQ": [
              "Is it required for a SloppyGiuseppe pizza to have at least one TomatoTopping as a topping?",
              "Can a SloppyGiuseppe exist without having the hasTopping property with TomatoTopping?",
              "Does every instance of SloppyGiuseppe include some topping that is a TomatoTopping?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe propertyRestrictions [hasTopping some GreenPepperTopping]",
            "CQ": [
              "Is it required for a SloppyGiuseppe to have at least one topping that is GreenPepperTopping?",
              "Can a pizza be classified as SloppyGiuseppe if it does not include any GreenPepperTopping as a topping?",
              "Does the presence of GreenPepperTopping as a topping suffice for a pizza to satisfy the SloppyGiuseppe restriction?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe propertyRestrictions [hasTopping some MozzarellaTopping]",
            "CQ": [
              "Is MozzarellaTopping a required topping for any pizza classified as SloppyGiuseppe?",
              "Does every SloppyGiuseppe pizza include at least one instance of MozzarellaTopping as a topping?",
              "Can a pizza be considered a SloppyGiuseppe without having MozzarellaTopping among its toppings?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe propertyRestrictions [hasTopping some OnionTopping]",
            "CQ": [
              "Is it required for a SloppyGiuseppe to include at least one OnionTopping as a topping?",
              "Can a SloppyGiuseppe exist without having any OnionTopping among its toppings?",
              "Does SloppyGiuseppe necessarily have the hasTopping relation to at least one instance of OnionTopping?"
            ]
          },
          {
            "axiom": "SloppyGiuseppe propertyRestrictions [hasTopping only (HotSpicedBeefTopping or MozzarellaTopping or TomatoTopping or OnionTopping or GreenPepperTopping)]",
            "CQ": [
              "Are SloppyGiuseppe pizzas only allowed to have HotSpicedBeef, Mozzarella, Tomato, Onion, or GreenPepper as toppings?",
              "Does being classified as a SloppyGiuseppe require that all toppings be limited to just the specified five types?",
              "Can a pizza with any topping outside the HotSpicedBeef, Mozzarella, Tomato, Onion, or GreenPepper categories still be considered a SloppyGiuseppe?"
            ]
          }
        ]
      },
      "Veneziana": {
        "axiom": {
          "subClassOf": [
            "NamedPizza"
          ],
          "disjointWith": [
            "Mushroom",
            "LaReine",
            "Napoletana",
            "AmericanHot",
            "UnclosedPizza",
            "PrinceCarlo",
            "Capricciosa",
            "FruttiDiMare",
            "Siciliana",
            "Cajun",
            "Margherita",
            "American",
            "SloppyGiuseppe",
            "Caprina",
            "Soho",
            "Parmense",
            "PolloAdAstra",
            "Fiorentina",
            "Rosa",
            "QuattroFormaggi",
            "Giardiniera",
            "FourSeasons"
          ],
          "propertyRestrictions": [
            "[hasTopping only (MozzarellaTopping or TomatoTopping or SultanaTopping or OnionTopping or CaperTopping or OliveTopping or PineKernels)]",
            "[hasTopping some PineKernels]",
            "[hasTopping some TomatoTopping]",
            "[hasTopping some OliveTopping]",
            "[hasTopping some SultanaTopping]",
            "[hasTopping some MozzarellaTopping]",
            "[hasTopping some OnionTopping]",
            "[hasCountryOfOrigin hasValue Italy]",
            "[hasTopping some CaperTopping]"
          ]
        },
        "description": "Veneziana is defined as a subclass of NamedPizza and is disjoint with a range of other specific pizzas, ensuring no individual instance can simultaneously belong to Veneziana and any of those disjoint classes. Members of the Veneziana class must have only the following toppings: MozzarellaTopping, TomatoTopping, SultanaTopping, OnionTopping, CaperTopping, OliveTopping, or PineKernels; each member is also required to have at least one of each of these toppings present. Additionally, Veneziana pizzas have Italy as their country of origin. This ontological definition captures the uniquely defined set of ingredients and exclusive identity of the Veneziana pizza within the broader NamedPizza category.",
        "CQ": [
          {
            "axiom": "Veneziana subClassOf NamedPizza",
            "CQ": [
              "Is Veneziana classified as a specific type under NamedPizza?",
              "Which pizzas fall under the NamedPizza classification, such as Veneziana?",
              "What broader categories does Veneziana belong to within the pizza hierarchy?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith Mushroom",
            "CQ": [
              "What formal separation is asserted between Veneziana and Mushroom within the ontology?",
              "Does the ontology allow any entity to be classified as both Veneziana and Mushroom?",
              "Which classes are explicitly incompatible with Mushroom based on disjointness assertions?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith LaReine",
            "CQ": [
              "How does the ontology specify the relation between Veneziana and LaReine?",
              "Is there any instance that can belong to both Veneziana and LaReine classes?",
              "Which pizza types are designated as disjoint with LaReine?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith Napoletana",
            "CQ": [
              "How does the ontology differentiate between Veneziana and Napoletana classes?",
              "Is there any instance that can simultaneously belong to both Veneziana and Napoletana categories?",
              "Which pizza classes in the ontology are explicitly specified as disjoint with Napoletana?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith AmericanHot",
            "CQ": [
              "What ontological separation is defined between Veneziana and AmericanHot?",
              "Is there any instance that can be simultaneously classified as Veneziana and AmericanHot?",
              "Which other pizza types are formally specified to be disjoint with AmericanHot?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith UnclosedPizza",
            "CQ": [
              "What distinguishes Veneziana pizzas from UnclosedPizza in the ontology?",
              "Is it allowed for a pizza to be classified as both Veneziana and UnclosedPizza?",
              "Which classes are asserted to be incompatible with Veneziana?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith PrinceCarlo",
            "CQ": [
              "What is the ontological separation between Veneziana and PrinceCarlo?",
              "Is there any instance that can be classified as both Veneziana and PrinceCarlo?",
              "Which classes are declared to be mutually exclusive with Veneziana?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith Capricciosa",
            "CQ": [
              "What logical separation is established between Veneziana and Capricciosa in the ontology?",
              "Could a single pizza instance be classified as both Veneziana and Capricciosa?",
              "Which entities within the ontology are defined as mutually exclusive with Capricciosa?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith FruttiDiMare",
            "CQ": [
              "What formal constraint prevents Veneziana and FruttiDiMare from overlapping?",
              "Does the ontology allow any pizza to belong to both Veneziana and FruttiDiMare classes?",
              "Which classes are declared as mutually exclusive with FruttiDiMare?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith Siciliana",
            "CQ": [
              "What is the ontological distinction between Veneziana and Siciliana?",
              "Is it possible for an individual pizza to be classified as both Veneziana and Siciliana?",
              "Which classes are formally specified as disjoint with Veneziana?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith Cajun",
            "CQ": [
              "How does the ontology differentiate between Veneziana and Cajun?",
              "Is there any instance that can belong to both Veneziana and Cajun categories?",
              "Which pizza varieties are specified as mutually exclusive with Cajun?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith Margherita",
            "CQ": [
              "How does the ontology define the separation between Veneziana and Margherita pizza types?",
              "Is there any instance that can simultaneously be classified as both Veneziana and Margherita?",
              "Which pizza classes are identified as mutually exclusive with Margherita?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith American",
            "CQ": [
              "How does the ontology reflect the mutual exclusivity between Veneziana and American?",
              "Is there any circumstance under which an individual could belong to both Veneziana and American classes?",
              "Which classes are specified as disjoint with American in the ontology?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith SloppyGiuseppe",
            "CQ": [
              "What ontological separation is specified between Veneziana and SloppyGiuseppe?",
              "Can an individual pizza instance belong to both Veneziana and SloppyGiuseppe categories simultaneously?",
              "Which other pizza subclasses are stated to be disjoint with SloppyGiuseppe in the ontology?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith Caprina",
            "CQ": [
              "How are Veneziana and Caprina categorized in relation to each other within the ontology?",
              "Is there any instance that can simultaneously be classified as both Veneziana and Caprina?",
              "Are there other pizza types specified as mutually exclusive with Caprina?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith Soho",
            "CQ": [
              "How does the ontology represent the exclusivity between Veneziana and Soho?",
              "Is any item allowed to be classified as both Veneziana and Soho simultaneously?",
              "What other pizza types are stated as mutually exclusive with Soho?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith Parmense",
            "CQ": [
              "How is the mutual exclusivity between Veneziana and Parmense represented in the ontology?",
              "Can an individual pizza be an instance of both Veneziana and Parmense?",
              "Which pizza classes are directly specified as disjoint with Parmense?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith PolloAdAstra",
            "CQ": [
              "Is there any relation of incompatibility defined between Veneziana and PolloAdAstra in the ontology?",
              "Can an individual pizza instance be classified as both Veneziana and PolloAdAstra?",
              "Which classes within the pizza domain are stated as mutually exclusive with Veneziana?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith Fiorentina",
            "CQ": [
              "Are Veneziana and Fiorentina defined as mutually exclusive pizza types in the ontology?",
              "Is there any pizza that can simultaneously belong to both Veneziana and Fiorentina categories?",
              "Which pizza classes are asserted as disjoint with Fiorentina?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith Rosa",
            "CQ": [
              "What formal separation is specified between Veneziana and Rosa in the ontology?",
              "Is there any instance that can simultaneously belong to both Veneziana and Rosa classes?",
              "Which other classes are defined as being mutually exclusive with Rosa?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith QuattroFormaggi",
            "CQ": [
              "How does the ontology represent the exclusivity between Veneziana and QuattroFormaggi pizzas?",
              "Is any individual pizza instance allowed to be classified as both Veneziana and QuattroFormaggi?",
              "Which classes are formally specified as disjoint with QuattroFormaggi?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith Giardiniera",
            "CQ": [
              "What ontological distinction separates Veneziana from Giardiniera?",
              "Is there any instance that can be classified as both Veneziana and Giardiniera?",
              "Which classes are asserted as disjoint with Giardiniera?"
            ]
          },
          {
            "axiom": "Veneziana disjointWith FourSeasons",
            "CQ": [
              "How is the class relationship defined between Veneziana and FourSeasons within the ontology?",
              "Is there any scenario where a pizza could be classified as both Veneziana and FourSeasons?",
              "Which pizza types are specified as being mutually exclusive with Veneziana?"
            ]
          },
          {
            "axiom": "Veneziana propertyRestrictions [hasTopping only (MozzarellaTopping or TomatoTopping or SultanaTopping or OnionTopping or CaperTopping or OliveTopping or PineKernels)]",
            "CQ": [
              "Are all toppings on a Veneziana required to be one of Mozzarella, Tomato, Sultana, Onion, Caper, Olive, or Pine Kernels?",
              "Can a Veneziana have any topping that is not Mozzarella, Tomato, Sultana, Onion, Caper, Olive, or Pine Kernels?",
              "Is it prohibited for a Veneziana to include toppings outside the seven specified types?"
            ]
          },
          {
            "axiom": "Veneziana propertyRestrictions [hasTopping some PineKernels]",
            "CQ": [
              "Is it required for a Veneziana pizza to have at least one topping of pine kernels?",
              "Can a Veneziana pizza exist without including pine kernels as a topping?",
              "Does every instance of Veneziana have the property ‘hasTopping’ associated with PineKernels?"
            ]
          },
          {
            "axiom": "Veneziana propertyRestrictions [hasTopping some TomatoTopping]",
            "CQ": [
              "Is it required for a Veneziana pizza to have at least one topping that is a TomatoTopping?",
              "Can a Veneziana exist without having any TomatoTopping as a topping?",
              "Does every instance of Veneziana include a relation via hasTopping to some TomatoTopping?"
            ]
          },
          {
            "axiom": "Veneziana propertyRestrictions [hasTopping some OliveTopping]",
            "CQ": [
              "Is it a requirement for a Veneziana pizza to include at least one olive topping?",
              "Must every Veneziana have the property 'hasTopping' associated with an OliveTopping?",
              "Can there be a Veneziana pizza without any olive toppings?"
            ]
          },
          {
            "axiom": "Veneziana propertyRestrictions [hasTopping some SultanaTopping]",
            "CQ": [
              "Must a Veneziana pizza have at least one SultanaTopping as one of its toppings?",
              "Is the presence of SultanaTopping a required condition for classifying a pizza as Veneziana?",
              "Can a pizza lacking SultanaTopping ever be correctly categorized as Veneziana?"
            ]
          },
          {
            "axiom": "Veneziana propertyRestrictions [hasTopping some MozzarellaTopping]",
            "CQ": [
              "Is it required that every Veneziana pizza includes at least one Mozzarella topping?",
              "Can a Veneziana exist without having any MozzarellaTopping as a topping?",
              "Does the definition of Veneziana ensure that MozzarellaTopping must be present among its toppings?"
            ]
          },
          {
            "axiom": "Veneziana propertyRestrictions [hasTopping some OnionTopping]",
            "CQ": [
              "Is it required that a Veneziana pizza has at least one OnionTopping as a topping?",
              "Must every Veneziana include OnionTopping among its chosen toppings?",
              "Can a pizza be classified as Veneziana if it lacks any OnionTopping?"
            ]
          },
          {
            "axiom": "Veneziana propertyRestrictions [hasCountryOfOrigin hasValue Italy]",
            "CQ": [
              "Is it a requirement that Veneziana has Italy as its country of origin according to the ontology?",
              "Can Veneziana have a country of origin other than Italy specified in its properties?",
              "Does the ontology definition of Veneziana enforce that its country of origin value must be Italy?"
            ]
          },
          {
            "axiom": "Veneziana propertyRestrictions [hasTopping some CaperTopping]",
            "CQ": [
              "Is it necessary for a Veneziana pizza to have at least one CaperTopping as a topping?",
              "Can a Veneziana exist without including CaperTopping as one of its toppings?",
              "Does the definition of Veneziana require the presence of CaperTopping among its toppings?"
            ]
          }
        ]
      },
      "MixedSeafoodTopping": {
        "axiom": {
          "subClassOf": [
            "FishTopping"
          ],
          "disjointWith": [
            "AnchoviesTopping",
            "PrawnsTopping"
          ]
        },
        "description": "MixedSeafoodTopping is defined as a subclass of FishTopping, meaning every MixedSeafoodTopping is a type of fish-based topping. It is explicitly disjoint with AnchoviesTopping and PrawnsTopping, so no individual topping can simultaneously be considered a MixedSeafoodTopping and either an AnchoviesTopping or PrawnsTopping. This class represents seafood toppings that are distinct from pure anchovy or prawn toppings, ensuring clear differentiation among various fish-based toppings.",
        "CQ": [
          {
            "axiom": "MixedSeafoodTopping subClassOf FishTopping",
            "CQ": [
              "Does MixedSeafoodTopping fall under the broader class of FishTopping?",
              "What specific kinds of FishTopping exist, including MixedSeafoodTopping?",
              "To which higher-level toppings does MixedSeafoodTopping belong?"
            ]
          },
          {
            "axiom": "MixedSeafoodTopping disjointWith AnchoviesTopping",
            "CQ": [
              "What formal separation is defined between MixedSeafoodTopping and AnchoviesTopping within the ontology?",
              "Is there any possibility for a topping to be classified as both MixedSeafoodTopping and AnchoviesTopping?",
              "Which other topping classes, if any, are explicitly stated as disjoint with AnchoviesTopping?"
            ]
          },
          {
            "axiom": "MixedSeafoodTopping disjointWith PrawnsTopping",
            "CQ": [
              "What distinguishes MixedSeafoodTopping from PrawnsTopping according to the ontology?",
              "Can a pizza topping instance be classified as both MixedSeafoodTopping and PrawnsTopping?",
              "Which topping types are specified as disjoint with PrawnsTopping?"
            ]
          }
        ]
      },
      "CaperTopping": {
        "axiom": {
          "subClassOf": [
            "VegetableTopping"
          ],
          "disjointWith": [
            "RocketTopping",
            "LeekTopping",
            "OnionTopping",
            "SpinachTopping",
            "GarlicTopping",
            "ArtichokeTopping",
            "PepperTopping",
            "AsparagusTopping",
            "OliveTopping",
            "MushroomTopping",
            "PetitPoisTopping",
            "TomatoTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Mild]"
          ]
        },
        "description": "CaperTopping is defined as a subclass of VegetableTopping, indicating that it is a specific type of vegetable-based topping. It is explicitly disjoint with other vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, meaning that an individual topping cannot belong to both CaperTopping and any of these classes simultaneously. Additionally, CaperTopping is characterized by having a property restriction requiring that it has some level of spiciness classified as Mild.",
        "CQ": [
          {
            "axiom": "CaperTopping subClassOf VegetableTopping",
            "CQ": [
              "Is CaperTopping included among the subclasses of VegetableTopping?",
              "What broader classes does CaperTopping belong to within the topping hierarchy?",
              "Does VegetableTopping encompass CaperTopping as a specific type?"
            ]
          },
          {
            "axiom": "CaperTopping disjointWith RocketTopping",
            "CQ": [
              "How does the ontology indicate the separation between CaperTopping and RocketTopping?",
              "Is there any instance that can be both CaperTopping and RocketTopping simultaneously?",
              "Which topping classes are defined as disjoint with RocketTopping?"
            ]
          },
          {
            "axiom": "CaperTopping disjointWith LeekTopping",
            "CQ": [
              "What type of ontological separation is defined between CaperTopping and LeekTopping?",
              "Is there any instance in the ontology that can simultaneously be classified as both CaperTopping and LeekTopping?",
              "Which topping classes are formally specified as disjoint with LeekTopping?"
            ]
          },
          {
            "axiom": "CaperTopping disjointWith OnionTopping",
            "CQ": [
              "What logical separation is specified between CaperTopping and OnionTopping in the ontology?",
              "Is there any individual that could be considered both a CaperTopping and an OnionTopping?",
              "Which topping classes are formally stated as being mutually exclusive with OnionTopping?"
            ]
          },
          {
            "axiom": "CaperTopping disjointWith SpinachTopping",
            "CQ": [
              "What is the ontological distinction between CaperTopping and SpinachTopping?",
              "Is it allowable for a single pizza topping to be classified as both CaperTopping and SpinachTopping?",
              "Which topping classes are specified as mutually exclusive with SpinachTopping?"
            ]
          },
          {
            "axiom": "CaperTopping disjointWith GarlicTopping",
            "CQ": [
              "Are there any toppings that are classified as both CaperTopping and GarlicTopping?",
              "Which topping categories are specified as mutually exclusive with GarlicTopping?",
              "What ontological separation is defined between CaperTopping and GarlicTopping?"
            ]
          },
          {
            "axiom": "CaperTopping disjointWith ArtichokeTopping",
            "CQ": [
              "What logical distinction separates CaperTopping from ArtichokeTopping in the ontology?",
              "Is any topping allowed to be both a CaperTopping and an ArtichokeTopping?",
              "Which other topping classes are directly stated as disjoint with ArtichokeTopping?"
            ]
          },
          {
            "axiom": "CaperTopping disjointWith PepperTopping",
            "CQ": [
              "How does the ontology represent the incompatibility between CaperTopping and PepperTopping?",
              "Is there any topping that can be classified as both CaperTopping and PepperTopping?",
              "Which topping classes are specified as disjoint with CaperTopping?"
            ]
          },
          {
            "axiom": "CaperTopping disjointWith AsparagusTopping",
            "CQ": [
              "How does the ontology distinguish between CaperTopping and AsparagusTopping?",
              "Is there any instance that can qualify as both CaperTopping and AsparagusTopping?",
              "Which topping classes are asserted as mutually exclusive with AsparagusTopping?"
            ]
          },
          {
            "axiom": "CaperTopping disjointWith OliveTopping",
            "CQ": [
              "What ontological separation is established between CaperTopping and OliveTopping?",
              "Can a pizza topping be classified as both a CaperTopping and an OliveTopping simultaneously?",
              "Which topping classes are defined as mutually exclusive with CaperTopping?"
            ]
          },
          {
            "axiom": "CaperTopping disjointWith MushroomTopping",
            "CQ": [
              "What logical separation is defined between CaperTopping and MushroomTopping within the ontology?",
              "Is an entity allowed to be classified as both a CaperTopping and a MushroomTopping?",
              "Which topping categories are explicitly marked as incompatible with MushroomTopping?"
            ]
          },
          {
            "axiom": "CaperTopping disjointWith PetitPoisTopping",
            "CQ": [
              "What is the ontological separation between CaperTopping and PetitPoisTopping?",
              "Can an ingredient be classified simultaneously as both CaperTopping and PetitPoisTopping?",
              "Which topping types are formally defined as disjoint with CaperTopping?"
            ]
          },
          {
            "axiom": "CaperTopping disjointWith TomatoTopping",
            "CQ": [
              "Are there any constraints in the ontology preventing an ingredient from being both a CaperTopping and a TomatoTopping?",
              "Which topping classes are defined as incompatible with CaperTopping?",
              "Does the ontology specify a mutual exclusivity between CaperTopping and TomatoTopping?"
            ]
          },
          {
            "axiom": "CaperTopping propertyRestrictions [hasSpiciness some Mild]",
            "CQ": [
              "Must every CaperTopping have at least one hasSpiciness value that is Mild?",
              "Is it possible for a CaperTopping to lack any hasSpiciness relation with Mild as a value?",
              "Does the definition of CaperTopping require the existence of a Mild spiciness property?"
            ]
          }
        ]
      },
      "LeekTopping": {
        "axiom": {
          "subClassOf": [
            "VegetableTopping"
          ],
          "disjointWith": [
            "RocketTopping",
            "OnionTopping",
            "SpinachTopping",
            "GarlicTopping",
            "ArtichokeTopping",
            "PepperTopping",
            "AsparagusTopping",
            "OliveTopping",
            "CaperTopping",
            "MushroomTopping",
            "PetitPoisTopping",
            "TomatoTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Mild]"
          ]
        },
        "description": "LeekTopping is defined as a subclass of VegetableTopping, representing toppings made from leeks. It is explicitly disjoint from a range of other vegetable toppings—including RocketTopping, OnionTopping, SpinachTopping, and others—ensuring that no individual can be both a LeekTopping and any of these other toppings simultaneously. Furthermore, members of this class are characterized by the property that they have at least some level of mild spiciness (hasSpiciness some Mild), distinguishing their flavor profile among vegetable toppings.",
        "CQ": [
          {
            "axiom": "LeekTopping subClassOf VegetableTopping",
            "CQ": [
              "Is LeekTopping classified under the broader category of VegetableTopping?",
              "Which toppings are categorized more specifically than VegetableTopping such as LeekTopping?",
              "What higher-level categories does LeekTopping fall under?"
            ]
          },
          {
            "axiom": "LeekTopping disjointWith RocketTopping",
            "CQ": [
              "What is the ontological separation between LeekTopping and RocketTopping?",
              "Can a pizza have both LeekTopping and RocketTopping as toppings simultaneously?",
              "Which toppings are formally stated as mutually exclusive with LeekTopping in the ontology?"
            ]
          },
          {
            "axiom": "LeekTopping disjointWith OnionTopping",
            "CQ": [
              "How does the ontology represent the separation between LeekTopping and OnionTopping?",
              "Is there any scenario where a topping is classified as both LeekTopping and OnionTopping?",
              "Which other topping classes are specified as disjoint with OnionTopping?"
            ]
          },
          {
            "axiom": "LeekTopping disjointWith SpinachTopping",
            "CQ": [
              "What logical separation is defined between LeekTopping and SpinachTopping within the ontology?",
              "Is there any instance that can be classified as both LeekTopping and SpinachTopping?",
              "Which toppings are specified as being mutually exclusive with SpinachTopping?"
            ]
          },
          {
            "axiom": "LeekTopping disjointWith GarlicTopping",
            "CQ": [
              "What logical separation is specified between LeekTopping and GarlicTopping within the ontology?",
              "Can an ingredient be considered both a LeekTopping and a GarlicTopping?",
              "Which other topping classes are defined as disjoint with GarlicTopping?"
            ]
          },
          {
            "axiom": "LeekTopping disjointWith ArtichokeTopping",
            "CQ": [
              "What formal separation exists between LeekTopping and ArtichokeTopping in the ontology?",
              "Is there any topping that can be classified simultaneously as both LeekTopping and ArtichokeTopping?",
              "Which topping classes are asserted to be mutually exclusive with LeekTopping?"
            ]
          },
          {
            "axiom": "LeekTopping disjointWith PepperTopping",
            "CQ": [
              "What is the ontological distinction between LeekTopping and PepperTopping?",
              "Can a single pizza topping instance be both a LeekTopping and a PepperTopping?",
              "Which topping categories are explicitly defined as incompatible with LeekTopping?"
            ]
          },
          {
            "axiom": "LeekTopping disjointWith AsparagusTopping",
            "CQ": [
              "How does the ontology assert distinction between LeekTopping and AsparagusTopping?",
              "Is any topping allowed to be both LeekTopping and AsparagusTopping simultaneously?",
              "Which topping classes are formally incompatible with LeekTopping?"
            ]
          },
          {
            "axiom": "LeekTopping disjointWith OliveTopping",
            "CQ": [
              "What kind of logical separation is asserted between LeekTopping and OliveTopping?",
              "Is it allowed for a topping to be classified simultaneously as LeekTopping and OliveTopping?",
              "Which topping classes are stated as incompatible with OliveTopping?"
            ]
          },
          {
            "axiom": "LeekTopping disjointWith CaperTopping",
            "CQ": [
              "What constraints exist regarding the overlap between LeekTopping and CaperTopping?",
              "Is any pizza topping classified as both a LeekTopping and a CaperTopping?",
              "Which toppings are asserted as mutually exclusive with LeekTopping?"
            ]
          },
          {
            "axiom": "LeekTopping disjointWith MushroomTopping",
            "CQ": [
              "What ontological separation is specified between LeekTopping and MushroomTopping?",
              "Is any topping instance allowed to be classified as both LeekTopping and MushroomTopping?",
              "Which topping classes are formally identified as mutually exclusive with MushroomTopping?"
            ]
          },
          {
            "axiom": "LeekTopping disjointWith PetitPoisTopping",
            "CQ": [
              "What logical separation is specified between LeekTopping and PetitPoisTopping in the ontology?",
              "Is it allowed for a pizza to have both LeekTopping and PetitPoisTopping at once?",
              "Which toppings are declared as mutually exclusive with PetitPoisTopping?"
            ]
          },
          {
            "axiom": "LeekTopping disjointWith TomatoTopping",
            "CQ": [
              "What formal separation exists between LeekTopping and TomatoTopping in the ontology?",
              "Is there any instance that could simultaneously be both a LeekTopping and a TomatoTopping?",
              "Which topping classes are formally declared as disjoint with LeekTopping?"
            ]
          },
          {
            "axiom": "LeekTopping propertyRestrictions [hasSpiciness some Mild]",
            "CQ": [
              "Is it necessary for a LeekTopping to have the property 'hasSpiciness' with at least one Mild value?",
              "Does every instance of LeekTopping possess a spiciness that includes Mild as one of its characteristics?",
              "Can a LeekTopping exist without being associated with some degree of Mild spiciness?"
            ]
          }
        ]
      },
      "OnionTopping": {
        "axiom": {
          "subClassOf": [
            "VegetableTopping"
          ],
          "disjointWith": [
            "RocketTopping",
            "LeekTopping",
            "SpinachTopping",
            "GarlicTopping",
            "ArtichokeTopping",
            "PepperTopping",
            "AsparagusTopping",
            "OliveTopping",
            "CaperTopping",
            "MushroomTopping",
            "PetitPoisTopping",
            "TomatoTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Medium]"
          ]
        },
        "description": "OnionTopping is defined as a subclass of VegetableTopping, representing a type of topping derived from vegetables. It is explicitly disjoint with several other vegetable topping classes, such as RocketTopping, LeekTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, ensuring that no individual can simultaneously belong to OnionTopping and any of these classes. Additionally, OnionTopping is characterized by the property restriction that all its instances must have at least some medium level of spiciness (hasSpiciness some Medium).",
        "CQ": [
          {
            "axiom": "OnionTopping subClassOf VegetableTopping",
            "CQ": [
              "Is OnionTopping categorized as an instance within VegetableTopping subclasses?",
              "Which toppings are classified under VegetableTopping, and does OnionTopping appear among them?",
              "To which broader topping categories does OnionTopping belong according to its classification?"
            ]
          },
          {
            "axiom": "OnionTopping disjointWith RocketTopping",
            "CQ": [
              "What is the formal ontological separation defined between OnionTopping and RocketTopping?",
              "Is there any individual that can simultaneously be classified as both OnionTopping and RocketTopping?",
              "Which topping classes are specified as mutually exclusive with OnionTopping?"
            ]
          },
          {
            "axiom": "OnionTopping disjointWith LeekTopping",
            "CQ": [
              "Are OnionTopping and LeekTopping defined as mutually exclusive in the ontology?",
              "Is there any topping that can be both an OnionTopping and a LeekTopping simultaneously?",
              "Which topping categories are explicitly stated as disjoint with OnionTopping?"
            ]
          },
          {
            "axiom": "OnionTopping disjointWith SpinachTopping",
            "CQ": [
              "How does the ontology distinguish between OnionTopping and SpinachTopping?",
              "Is there any topping that can be classified as both OnionTopping and SpinachTopping?",
              "Which toppings are asserted as mutually exclusive with SpinachTopping?"
            ]
          },
          {
            "axiom": "OnionTopping disjointWith GarlicTopping",
            "CQ": [
              "What logical separation is defined between OnionTopping and GarlicTopping within the ontology?",
              "Is there any instance that can simultaneously be classified as both OnionTopping and GarlicTopping?",
              "Which other topping classes, besides GarlicTopping, are declared as disjoint with OnionTopping?"
            ]
          },
          {
            "axiom": "OnionTopping disjointWith ArtichokeTopping",
            "CQ": [
              "Are OnionTopping and ArtichokeTopping mutually exclusive topping categories in the ontology?",
              "Is there any instance that can simultaneously be classified as both OnionTopping and ArtichokeTopping?",
              "Which topping classes are specified as disjoint with ArtichokeTopping?"
            ]
          },
          {
            "axiom": "OnionTopping disjointWith PepperTopping",
            "CQ": [
              "How are OnionTopping and PepperTopping differentiated in the ontology?",
              "Is there any instance that can belong to both OnionTopping and PepperTopping categories concurrently?",
              "What other topping classes are formally specified as mutually exclusive with OnionTopping?"
            ]
          },
          {
            "axiom": "OnionTopping disjointWith AsparagusTopping",
            "CQ": [
              "How are OnionTopping and AsparagusTopping differentiated within the ontology?",
              "Is any pizza topping allowed to be classified as both OnionTopping and AsparagusTopping simultaneously?",
              "Which topping classes are specified as disjoint with OnionTopping?"
            ]
          },
          {
            "axiom": "OnionTopping disjointWith OliveTopping",
            "CQ": [
              "How does the ontology distinguish between OnionTopping and OliveTopping?",
              "Is there an instance that can simultaneously be classified as both OnionTopping and OliveTopping?",
              "Which other topping classes are specified as disjoint with OliveTopping?"
            ]
          },
          {
            "axiom": "OnionTopping disjointWith CaperTopping",
            "CQ": [
              "How does the ontology differentiate between OnionTopping and CaperTopping?",
              "Is any topping instance allowed to be classified as both OnionTopping and CaperTopping simultaneously?",
              "Which topping types are explicitly marked as disjoint from CaperTopping within the ontology?"
            ]
          },
          {
            "axiom": "OnionTopping disjointWith MushroomTopping",
            "CQ": [
              "How does the ontology distinguish between OnionTopping and MushroomTopping?",
              "Is there any scenario where a topping can be both an OnionTopping and a MushroomTopping?",
              "Which topping classes are specified as mutually exclusive with OnionTopping?"
            ]
          },
          {
            "axiom": "OnionTopping disjointWith PetitPoisTopping",
            "CQ": [
              "What logical separation is defined between OnionTopping and PetitPoisTopping in the ontology?",
              "Is it allowable for one pizza topping to be both OnionTopping and PetitPoisTopping?",
              "Which topping classes are specified as mutually exclusive with OnionTopping?"
            ]
          },
          {
            "axiom": "OnionTopping disjointWith TomatoTopping",
            "CQ": [
              "How does the ontology specify the connection or separation between OnionTopping and TomatoTopping?",
              "Is there any instance that can be classified as both OnionTopping and TomatoTopping?",
              "Which topping classes are stated to be mutually exclusive with OnionTopping?"
            ]
          },
          {
            "axiom": "OnionTopping propertyRestrictions [hasSpiciness some Medium]",
            "CQ": [
              "Is every OnionTopping required to have the hasSpiciness property with at least some value classified as Medium?",
              "Can an OnionTopping exist without being associated to a Medium level of spiciness through the hasSpiciness property?",
              "Are there OnionToppings that must necessarily exhibit a hasSpiciness relation with something possessing Medium spiciness?"
            ]
          }
        ]
      },
      "RocketTopping": {
        "axiom": {
          "subClassOf": [
            "VegetableTopping"
          ],
          "disjointWith": [
            "LeekTopping",
            "OnionTopping",
            "SpinachTopping",
            "GarlicTopping",
            "ArtichokeTopping",
            "PepperTopping",
            "AsparagusTopping",
            "OliveTopping",
            "CaperTopping",
            "MushroomTopping",
            "PetitPoisTopping",
            "TomatoTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Medium]"
          ]
        },
        "description": "RocketTopping is defined as a subclass of VegetableTopping, representing a specific type of vegetable-based topping. It is disjoint with multiple other vegetable toppings, including LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping—ensuring no individual can simultaneously belong to RocketTopping and any of these classes. Additionally, RocketTopping is characterized by the property that it must have at least some medium level of spiciness (hasSpiciness some Medium).",
        "CQ": [
          {
            "axiom": "RocketTopping subClassOf VegetableTopping",
            "CQ": [
              "Does RocketTopping fall under the classification of VegetableTopping?",
              "What are the types of toppings that are categorized as VegetableTopping, including RocketTopping?",
              "Which higher-level topping groups include RocketTopping as a member?"
            ]
          },
          {
            "axiom": "RocketTopping disjointWith LeekTopping",
            "CQ": [
              "Is there any logical separation defined between RocketTopping and LeekTopping in the ontology?",
              "Could a topping instance belong to both RocketTopping and LeekTopping classes simultaneously?",
              "Which topping categories are specified as being disjoint from LeekTopping?"
            ]
          },
          {
            "axiom": "RocketTopping disjointWith OnionTopping",
            "CQ": [
              "How does the ontology distinguish RocketTopping and OnionTopping?",
              "Is there any scenario where a topping could be classified as both RocketTopping and OnionTopping?",
              "Which topping types are identified as incompatible with OnionTopping?"
            ]
          },
          {
            "axiom": "RocketTopping disjointWith SpinachTopping",
            "CQ": [
              "What logical constraint is specified between RocketTopping and SpinachTopping in the ontology?",
              "Is it permissible for a single pizza to have both RocketTopping and SpinachTopping as its toppings?",
              "Which other topping classes are formally incompatible with SpinachTopping according to the ontology?"
            ]
          },
          {
            "axiom": "RocketTopping disjointWith GarlicTopping",
            "CQ": [
              "How does the ontology differentiate between RocketTopping and GarlicTopping?",
              "Is any topping instance allowed to be both RocketTopping and GarlicTopping?",
              "Which topping classes are specified as incompatible with GarlicTopping?"
            ]
          },
          {
            "axiom": "RocketTopping disjointWith ArtichokeTopping",
            "CQ": [
              "Are RocketTopping and ArtichokeTopping defined as mutually exclusive toppings in the ontology?",
              "Can a single pizza topping instance be classified as both RocketTopping and ArtichokeTopping?",
              "Which topping classes are explicitly stated to be disjoint with RocketTopping?"
            ]
          },
          {
            "axiom": "RocketTopping disjointWith PepperTopping",
            "CQ": [
              "What is the explicit logical separation between RocketTopping and PepperTopping within the ontology?",
              "Is there any instance that can simultaneously belong to both RocketTopping and PepperTopping categories?",
              "Which topping categories are defined as disjoint with PepperTopping?"
            ]
          },
          {
            "axiom": "RocketTopping disjointWith AsparagusTopping",
            "CQ": [
              "What logical separation exists between RocketTopping and AsparagusTopping within the ontology?",
              "Is it permissible for a pizza topping to be classified simultaneously as RocketTopping and AsparagusTopping?",
              "Which toppings are identified as mutually exclusive with RocketTopping?"
            ]
          },
          {
            "axiom": "RocketTopping disjointWith OliveTopping",
            "CQ": [
              "What logical separation is asserted between RocketTopping and OliveTopping within the ontology?",
              "Is there any topping that qualifies as both a RocketTopping and an OliveTopping?",
              "Which topping classes are specified as mutually exclusive with OliveTopping?"
            ]
          },
          {
            "axiom": "RocketTopping disjointWith CaperTopping",
            "CQ": [
              "How does the ontology distinguish between RocketTopping and CaperTopping?",
              "Is any topping instance allowed to belong to both RocketTopping and CaperTopping categories?",
              "Which topping classes are asserted as disjoint with RocketTopping?"
            ]
          },
          {
            "axiom": "RocketTopping disjointWith MushroomTopping",
            "CQ": [
              "What logical separation is defined between RocketTopping and MushroomTopping in the ontology?",
              "Is it allowable for a pizza to have both RocketTopping and MushroomTopping assigned simultaneously?",
              "Which other topping classes are explicitly disjoint with MushroomTopping?"
            ]
          },
          {
            "axiom": "RocketTopping disjointWith PetitPoisTopping",
            "CQ": [
              "What is the formal relationship specified between RocketTopping and PetitPoisTopping in the ontology?",
              "Could an ingredient instance simultaneously be classified as RocketTopping and PetitPoisTopping?",
              "Which topping categories are defined as disjoint from PetitPoisTopping?"
            ]
          },
          {
            "axiom": "RocketTopping disjointWith TomatoTopping",
            "CQ": [
              "How does the ontology represent the mutual exclusivity of RocketTopping and TomatoTopping?",
              "Is there any topping that can be classified as both RocketTopping and TomatoTopping concurrently?",
              "Which topping classes, apart from RocketTopping, are explicitly specified as disjoint with TomatoTopping?"
            ]
          },
          {
            "axiom": "RocketTopping propertyRestrictions [hasSpiciness some Medium]",
            "CQ": [
              "Is it necessary for a RocketTopping to have the hasSpiciness property with Medium as its value?",
              "Must every instance of RocketTopping exhibit at least some degree of Medium spiciness?",
              "Does the presence of Medium spiciness through the hasSpiciness property define a RocketTopping?"
            ]
          }
        ]
      },
      "CajunSpiceTopping": {
        "axiom": {
          "subClassOf": [
            "HerbSpiceTopping"
          ],
          "disjointWith": [
            "RosemaryTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Hot]"
          ]
        },
        "description": "CajunSpiceTopping is a subclass of HerbSpiceTopping, formally distinguished by the restriction that it must have some degree of hot spiciness (hasSpiciness some Hot). It is explicitly disjoint with RosemaryTopping, meaning an individual cannot be both a CajunSpiceTopping and a RosemaryTopping. Members of this class are herb and spice toppings that contribute a hot or spicy flavor profile, aligning with the characteristics of Cajun seasoning.",
        "CQ": [
          {
            "axiom": "CajunSpiceTopping subClassOf HerbSpiceTopping",
            "CQ": [
              "Does CajunSpiceTopping fall under the category of HerbSpiceTopping?",
              "Which toppings are classified as subclasses of HerbSpiceTopping, including CajunSpiceTopping?",
              "What broader categories does CajunSpiceTopping inherit from within the ontology?"
            ]
          },
          {
            "axiom": "CajunSpiceTopping disjointWith RosemaryTopping",
            "CQ": [
              "How does the ontology specify the connection or distinction between CajunSpiceTopping and RosemaryTopping?",
              "Is there any instance that can be classified as both CajunSpiceTopping and RosemaryTopping?",
              "Which other topping classes are defined as mutually exclusive with RosemaryTopping?"
            ]
          },
          {
            "axiom": "CajunSpiceTopping propertyRestrictions [hasSpiciness some Hot]",
            "CQ": [
              "Is it required that every CajunSpiceTopping possesses the spiciness characteristic 'Hot'?",
              "Can a CajunSpiceTopping exist without having any level of 'Hot' spiciness?",
              "Does the inclusion of spiciness property 'Hot' define all instances of CajunSpiceTopping?"
            ]
          }
        ]
      },
      "FishTopping": {
        "axiom": {
          "subClassOf": [
            "PizzaTopping"
          ],
          "disjointWith": [
            "MeatTopping",
            "SauceTopping",
            "VegetableTopping",
            "CheeseTopping",
            "HerbSpiceTopping",
            "NutTopping",
            "FruitTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Mild]"
          ]
        },
        "description": "FishTopping is defined as a subclass of PizzaTopping and is explicitly disjoint with MeatTopping, SauceTopping, VegetableTopping, CheeseTopping, HerbSpiceTopping, NutTopping, and FruitTopping, ensuring that no topping instance can simultaneously belong to more than one of these classes. Members of the FishTopping class are characterized by the property that they possess at least some mild level of spiciness, as specified by the 'hasSpiciness some Mild' restriction. This formalization guarantees the uniqueness and specific mild spiciness characteristic of any pizza topping categorized as FishTopping.",
        "CQ": [
          {
            "axiom": "FishTopping subClassOf PizzaTopping",
            "CQ": [
              "Is FishTopping categorized as a specific kind of PizzaTopping?",
              "What types of toppings are included as subclasses of PizzaTopping such as FishTopping?",
              "Which higher-level categories include FishTopping?"
            ]
          },
          {
            "axiom": "FishTopping disjointWith MeatTopping",
            "CQ": [
              "Are there any shared elements allowed between FishTopping and MeatTopping classes in the ontology?",
              "Is an ingredient permitted to be classified under both FishTopping and MeatTopping?",
              "Which topping categories are specified as mutually exclusive with FishTopping?"
            ]
          },
          {
            "axiom": "FishTopping disjointWith SauceTopping",
            "CQ": [
              "How are FishTopping and SauceTopping conceptually separated within the ontology?",
              "Is there any instance that qualifies as both a FishTopping and a SauceTopping?",
              "Which classes are specified as disjoint with SauceTopping?"
            ]
          },
          {
            "axiom": "FishTopping disjointWith VegetableTopping",
            "CQ": [
              "How does the ontology represent the separation between FishTopping and VegetableTopping?",
              "Is there any instance that can belong to both the FishTopping and VegetableTopping classes simultaneously?",
              "Which topping categories are specifically stated to be incompatible with FishTopping?"
            ]
          },
          {
            "axiom": "FishTopping disjointWith CheeseTopping",
            "CQ": [
              "What is the ontological distinction between FishTopping and CheeseTopping?",
              "Can any pizza topping be classified as both a FishTopping and a CheeseTopping?",
              "Which topping categories are explicitly incompatible with FishTopping?"
            ]
          },
          {
            "axiom": "FishTopping disjointWith HerbSpiceTopping",
            "CQ": [
              "How does the ontology describe the incompatibility between FishTopping and HerbSpiceTopping?",
              "Is there any ingredient that can be classified as both FishTopping and HerbSpiceTopping?",
              "Which topping categories are declared as disjoint with FishTopping?"
            ]
          },
          {
            "axiom": "FishTopping disjointWith NutTopping",
            "CQ": [
              "What is the logical constraint specified between FishTopping and NutTopping in the ontology?",
              "Is there any instance that can belong to both FishTopping and NutTopping?",
              "Which classes are defined as disjoint with NutTopping?"
            ]
          },
          {
            "axiom": "FishTopping disjointWith FruitTopping",
            "CQ": [
              "What logical separation does the ontology enforce between FishTopping and FruitTopping?",
              "Is there any topping that can be classified as both FishTopping and FruitTopping?",
              "Which topping categories are defined as disjoint with FishTopping?"
            ]
          },
          {
            "axiom": "FishTopping propertyRestrictions [hasSpiciness some Mild]",
            "CQ": [
              "Must every FishTopping include at least one instance with hasSpiciness set to Mild?",
              "Is it required that FishTopping hasSpiciness relates to Mild in at least one case?",
              "Can a topping classified as FishTopping exist without being associated with any Mild spiciness level?"
            ]
          }
        ]
      },
      "HerbSpiceTopping": {
        "axiom": {
          "subClassOf": [
            "PizzaTopping"
          ],
          "disjointWith": [
            "MeatTopping",
            "SauceTopping",
            "VegetableTopping",
            "CheeseTopping",
            "FishTopping",
            "NutTopping",
            "FruitTopping"
          ]
        },
        "description": "HerbSpiceTopping is defined as a subclass of PizzaTopping, representing toppings made exclusively from herbs or spices that are suitable for use on pizzas. It is explicitly disjoint with MeatTopping, SauceTopping, VegetableTopping, CheeseTopping, FishTopping, NutTopping, and FruitTopping, ensuring that no individual topping can simultaneously belong to both HerbSpiceTopping and any of these other specified topping categories. This class formalizes the separation of herb and spice-based toppings from all other topping types within the ontology.",
        "CQ": [
          {
            "axiom": "HerbSpiceTopping subClassOf PizzaTopping",
            "CQ": [
              "Is HerbSpiceTopping classified as a specific kind of PizzaTopping?",
              "Which toppings are categorized under PizzaTopping, including HerbSpiceTopping?",
              "Which broader categories encompass HerbSpiceTopping?"
            ]
          },
          {
            "axiom": "HerbSpiceTopping disjointWith MeatTopping",
            "CQ": [
              "What ontological separation exists between HerbSpiceTopping and MeatTopping?",
              "Is there a scenario where a topping could be classified as both HerbSpiceTopping and MeatTopping?",
              "Which topping categories are defined as mutually exclusive with HerbSpiceTopping?"
            ]
          },
          {
            "axiom": "HerbSpiceTopping disjointWith SauceTopping",
            "CQ": [
              "What logical separation exists between HerbSpiceTopping and SauceTopping within the ontology?",
              "Is it possible for a topping to be classified as both HerbSpiceTopping and SauceTopping?",
              "Which other topping categories are defined as mutually exclusive with HerbSpiceTopping?"
            ]
          },
          {
            "axiom": "HerbSpiceTopping disjointWith VegetableTopping",
            "CQ": [
              "How are HerbSpiceTopping and VegetableTopping differentiated within the ontology?",
              "Is any topping allowed to be both a HerbSpiceTopping and a VegetableTopping?",
              "Which topping types are specified as mutually exclusive with VegetableTopping?"
            ]
          },
          {
            "axiom": "HerbSpiceTopping disjointWith CheeseTopping",
            "CQ": [
              "How does the ontology distinguish between HerbSpiceTopping and CheeseTopping?",
              "Is it allowable for a pizza topping to be both a HerbSpiceTopping and a CheeseTopping?",
              "Which topping categories are formally declared as incompatible with HerbSpiceTopping?"
            ]
          },
          {
            "axiom": "HerbSpiceTopping disjointWith FishTopping",
            "CQ": [
              "How does the ontology represent the incompatibility between HerbSpiceTopping and FishTopping?",
              "Is any topping classified as both HerbSpiceTopping and FishTopping within the ontology?",
              "Which topping classes are specified as mutually exclusive with HerbSpiceTopping?"
            ]
          },
          {
            "axiom": "HerbSpiceTopping disjointWith NutTopping",
            "CQ": [
              "What is the formal separation established between HerbSpiceTopping and NutTopping in the ontology?",
              "Is it allowed for a pizza topping to be classified as both a HerbSpiceTopping and a NutTopping?",
              "Which classes, besides NutTopping, are specified as disjoint with HerbSpiceTopping?"
            ]
          },
          {
            "axiom": "HerbSpiceTopping disjointWith FruitTopping",
            "CQ": [
              "What ontology constraint prevents HerbSpiceTopping and FruitTopping from sharing members?",
              "Is it allowed for a topping to be both classified as a HerbSpiceTopping and a FruitTopping?",
              "Which classes are explicitly stated as mutually exclusive with HerbSpiceTopping?"
            ]
          }
        ]
      },
      "SauceTopping": {
        "axiom": {
          "subClassOf": [
            "PizzaTopping"
          ],
          "disjointWith": [
            "MeatTopping",
            "VegetableTopping",
            "CheeseTopping",
            "FishTopping",
            "HerbSpiceTopping",
            "NutTopping",
            "FruitTopping"
          ]
        },
        "description": "SauceTopping is defined as a subclass of PizzaTopping and is explicitly disjoint with MeatTopping, VegetableTopping, CheeseTopping, FishTopping, HerbSpiceTopping, NutTopping, and FruitTopping. This means SauceTopping represents a distinct category of pizza topping, specifically for sauces, and no individual can simultaneously belong to SauceTopping and any of the aforementioned topping classes.",
        "CQ": [
          {
            "axiom": "SauceTopping subClassOf PizzaTopping",
            "CQ": [
              "Is SauceTopping classified as a form of PizzaTopping?",
              "Which specific toppings fall under the category of PizzaTopping, such as SauceTopping?",
              "What higher-level topping groups include SauceTopping?"
            ]
          },
          {
            "axiom": "SauceTopping disjointWith MeatTopping",
            "CQ": [
              "What logical separation is defined between SauceTopping and MeatTopping within the ontology?",
              "Are there any instances that can be considered both SauceTopping and MeatTopping?",
              "Which topping categories are asserted as mutually exclusive with MeatTopping?"
            ]
          },
          {
            "axiom": "SauceTopping disjointWith VegetableTopping",
            "CQ": [
              "How does the ontology specify the separation between SauceTopping and VegetableTopping?",
              "Is any topping classified as both a SauceTopping and a VegetableTopping?",
              "Which classes are explicitly disjoint with SauceTopping?"
            ]
          },
          {
            "axiom": "SauceTopping disjointWith CheeseTopping",
            "CQ": [
              "How does the ontology represent the separation between SauceTopping and CheeseTopping?",
              "Is any topping instance allowed to belong simultaneously to both SauceTopping and CheeseTopping classes?",
              "Which topping classes are declared as disjoint with CheeseTopping?"
            ]
          },
          {
            "axiom": "SauceTopping disjointWith FishTopping",
            "CQ": [
              "How does the ontology formally separate SauceTopping from FishTopping?",
              "Is there any topping that could simultaneously belong to both SauceTopping and FishTopping categories?",
              "Which topping classes are asserted as mutually exclusive with FishTopping?"
            ]
          },
          {
            "axiom": "SauceTopping disjointWith HerbSpiceTopping",
            "CQ": [
              "How does the ontology differentiate between SauceTopping and HerbSpiceTopping?",
              "Is it allowed for a topping to be both classified as SauceTopping and HerbSpiceTopping?",
              "Which classes are declared as mutually exclusive with HerbSpiceTopping?"
            ]
          },
          {
            "axiom": "SauceTopping disjointWith NutTopping",
            "CQ": [
              "How are SauceTopping and NutTopping differentiated within the ontology?",
              "Is there any instance that could belong to both SauceTopping and NutTopping categories?",
              "Which other topping types are explicitly specified as mutually exclusive with SauceTopping?"
            ]
          },
          {
            "axiom": "SauceTopping disjointWith FruitTopping",
            "CQ": [
              "What logical separation does the ontology assert between SauceTopping and FruitTopping?",
              "Is there any topping entity that can simultaneously be classified as both SauceTopping and FruitTopping?",
              "Which classes of toppings are formally identified as disjoint with SauceTopping?"
            ]
          }
        ]
      },
      "GorgonzolaTopping": {
        "axiom": {
          "subClassOf": [
            "CheeseTopping"
          ],
          "disjointWith": [
            "GoatsCheeseTopping",
            "MozzarellaTopping",
            "ParmesanTopping",
            "FourCheesesTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Mild]"
          ]
        },
        "description": "GorgonzolaTopping is defined as a subclass of CheeseTopping, representing a specific type of cheese-based topping. It is explicitly disjoint with GoatsCheeseTopping, MozzarellaTopping, ParmesanTopping, and FourCheesesTopping, ensuring that an individual cannot simultaneously belong to any of these classes. GorgonzolaTopping is characterized by having some level of mild spiciness, as specified by the property restriction (hasSpiciness some Mild).",
        "CQ": [
          {
            "axiom": "GorgonzolaTopping subClassOf CheeseTopping",
            "CQ": [
              "Is GorgonzolaTopping classified as a kind of CheeseTopping?",
              "What toppings are defined as subcategories of CheeseTopping, specifically including GorgonzolaTopping?",
              "Which parent categories encompass GorgonzolaTopping in the ontology?"
            ]
          },
          {
            "axiom": "GorgonzolaTopping disjointWith GoatsCheeseTopping",
            "CQ": [
              "How does the ontology differentiate between GorgonzolaTopping and GoatsCheeseTopping?",
              "Is there any instance that can simultaneously be classified as GorgonzolaTopping and GoatsCheeseTopping?",
              "Which topping categories are asserted to be mutually exclusive with GorgonzolaTopping?"
            ]
          },
          {
            "axiom": "GorgonzolaTopping disjointWith MozzarellaTopping",
            "CQ": [
              "What logical constraint separates GorgonzolaTopping and MozzarellaTopping in the ontology?",
              "Is there an instance that can simultaneously be classified as both GorgonzolaTopping and MozzarellaTopping?",
              "Which other toppings are specified as disjoint with GorgonzolaTopping?"
            ]
          },
          {
            "axiom": "GorgonzolaTopping disjointWith ParmesanTopping",
            "CQ": [
              "How does the ontology represent the incompatibility between GorgonzolaTopping and ParmesanTopping?",
              "Is there any instance that can be classified as both GorgonzolaTopping and ParmesanTopping?",
              "Which toppings are specified as disjoint from ParmesanTopping?"
            ]
          },
          {
            "axiom": "GorgonzolaTopping disjointWith FourCheesesTopping",
            "CQ": [
              "What is the ontological separation between GorgonzolaTopping and FourCheesesTopping?",
              "Is it allowed for a pizza topping to be classified as both GorgonzolaTopping and FourCheesesTopping?",
              "Which other topping classes are asserted as disjoint with GorgonzolaTopping?"
            ]
          },
          {
            "axiom": "GorgonzolaTopping propertyRestrictions [hasSpiciness some Mild]",
            "CQ": [
              "Is it required that every GorgonzolaTopping has at least one spiciness characteristic classified as Mild?",
              "Can a GorgonzolaTopping exist without being associated with the Mild level of spiciness?",
              "Does the definition of GorgonzolaTopping necessitate that it possesses the property 'hasSpiciness' with respect to Mild flavor?"
            ]
          }
        ]
      },
      "ChickenTopping": {
        "axiom": {
          "subClassOf": [
            "MeatTopping"
          ],
          "disjointWith": [
            "PeperoniSausageTopping",
            "HotSpicedBeefTopping",
            "HamTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Mild]"
          ]
        },
        "description": "ChickenTopping is defined as a subclass of MeatTopping and is explicitly disjoint with PeperoniSausageTopping, HotSpicedBeefTopping, and HamTopping, ensuring that no individual can simultaneously belong to both ChickenTopping and any of these other meat topping classes. Members of the ChickenTopping class are required to have at least some level of spiciness characterized as Mild. This formalization specifies that ChickenTopping represents mild, non-overlapping meat-based pizza toppings distinct from other specified meat varieties.",
        "CQ": [
          {
            "axiom": "ChickenTopping subClassOf MeatTopping",
            "CQ": [
              "Does ChickenTopping fall under the broader classification of MeatTopping?",
              "What more specific topping types are categorized beneath MeatTopping, including ChickenTopping?",
              "To which higher-level topping categories can ChickenTopping be linked?"
            ]
          },
          {
            "axiom": "ChickenTopping disjointWith PeperoniSausageTopping",
            "CQ": [
              "What logical separation is present between ChickenTopping and PeperoniSausageTopping within the ontology?",
              "Is it possible for a topping to be classified as both ChickenTopping and PeperoniSausageTopping?",
              "Which other topping classes are explicitly declared disjoint from PeperoniSausageTopping?"
            ]
          },
          {
            "axiom": "ChickenTopping disjointWith HotSpicedBeefTopping",
            "CQ": [
              "How are ChickenTopping and HotSpicedBeefTopping related within the ontology?",
              "Is it allowed for a pizza to simultaneously have both ChickenTopping and HotSpicedBeefTopping?",
              "Which pizza toppings are specified as disjoint with HotSpicedBeefTopping?"
            ]
          },
          {
            "axiom": "ChickenTopping disjointWith HamTopping",
            "CQ": [
              "What logical separation is represented between ChickenTopping and HamTopping within the ontology?",
              "Is there any scenario in which an ingredient could be both classified as ChickenTopping and HamTopping?",
              "Which topping types are formally specified as disjoint with HamTopping?"
            ]
          },
          {
            "axiom": "ChickenTopping propertyRestrictions [hasSpiciness some Mild]",
            "CQ": [
              "Does every ChickenTopping require at least one hasSpiciness property value of Mild?",
              "Is it necessary for a ChickenTopping to be associated with some level of spiciness classified as Mild?",
              "Can a ChickenTopping exist without having any hasSpiciness relationship to Mild?"
            ]
          }
        ]
      },
      "PeperoniSausageTopping": {
        "axiom": {
          "subClassOf": [
            "MeatTopping"
          ],
          "disjointWith": [
            "HotSpicedBeefTopping",
            "HamTopping",
            "ChickenTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Medium]"
          ]
        },
        "description": "PeperoniSausageTopping is defined as a subclass of MeatTopping, representing a specific type of meat-based pizza topping. It is explicitly disjoint with HotSpicedBeefTopping, HamTopping, and ChickenTopping, ensuring that no individual topping can be classified as more than one of these types simultaneously. Members of this class are characterized by possessing at least some medium level of spiciness, as specified by the property restriction [hasSpiciness some Medium]. This formalization ensures clear differentiation within meat toppings and enforces the requirement for moderate spiciness in PeperoniSausageTopping.",
        "CQ": [
          {
            "axiom": "PeperoniSausageTopping subClassOf MeatTopping",
            "CQ": [
              "Is PeperoniSausageTopping classified as a kind of MeatTopping?",
              "What toppings are categorized under MeatTopping, including PeperoniSausageTopping?",
              "To which broader categories does PeperoniSausageTopping relate within the topping hierarchy?"
            ]
          },
          {
            "axiom": "PeperoniSausageTopping disjointWith HotSpicedBeefTopping",
            "CQ": [
              "What separation is defined between PeperoniSausageTopping and HotSpicedBeefTopping in the ontology?",
              "Is it allowable for a single topping instance to belong to both PeperoniSausageTopping and HotSpicedBeefTopping?",
              "Which topping types are asserted as disjoint with PeperoniSausageTopping?"
            ]
          },
          {
            "axiom": "PeperoniSausageTopping disjointWith HamTopping",
            "CQ": [
              "What logical separation is defined between PeperoniSausageTopping and HamTopping within the ontology?",
              "Is it allowable for a single topping to be classified as both PeperoniSausageTopping and HamTopping?",
              "Which other topping types are specified as disjoint with HamTopping?"
            ]
          },
          {
            "axiom": "PeperoniSausageTopping disjointWith ChickenTopping",
            "CQ": [
              "What is the formal distinction between PeperoniSausageTopping and ChickenTopping in the ontology?",
              "Can any pizza topping be classified as both PeperoniSausageTopping and ChickenTopping?",
              "Which topping categories are specified as mutually exclusive with PeperoniSausageTopping?"
            ]
          },
          {
            "axiom": "PeperoniSausageTopping propertyRestrictions [hasSpiciness some Medium]",
            "CQ": [
              "Is it required that every PeperoniSausageTopping has at least one level of spiciness classified as Medium?",
              "Can a PeperoniSausageTopping exist without exhibiting Medium spiciness?",
              "Does the presence of medium spiciness distinguish PeperoniSausageTopping from other topping types?"
            ]
          }
        ]
      },
      "ThinAndCrispyBase": {
        "axiom": {
          "subClassOf": [
            "PizzaBase"
          ],
          "disjointWith": [
            "DeepPanBase"
          ]
        },
        "description": "ThinAndCrispyBase is a subclass of PizzaBase, representing a specific type of pizza base. It is explicitly declared as disjoint with DeepPanBase, ensuring that no individual pizza base can simultaneously be classified as both ThinAndCrispyBase and DeepPanBase. This formalization distinguishes thin and crispy bases from deep pan bases within the ontology.",
        "CQ": [
          {
            "axiom": "ThinAndCrispyBase subClassOf PizzaBase",
            "CQ": [
              "Is ThinAndCrispyBase classified among the specific types under PizzaBase?",
              "Which pizza bases are categorized as specializations of PizzaBase, particularly including ThinAndCrispyBase?",
              "What broader classifications encompass ThinAndCrispyBase?"
            ]
          },
          {
            "axiom": "ThinAndCrispyBase disjointWith DeepPanBase",
            "CQ": [
              "How does the ontology specify the difference between ThinAndCrispyBase and DeepPanBase?",
              "Is any pizza base classified under both ThinAndCrispyBase and DeepPanBase?",
              "What other base types are explicitly declared as disjoint with DeepPanBase?"
            ]
          }
        ]
      },
      "SweetPepperTopping": {
        "axiom": {
          "subClassOf": [
            "PepperTopping"
          ],
          "disjointWith": [
            "GreenPepperTopping",
            "JalapenoPepperTopping",
            "PeperonataTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Mild]"
          ]
        },
        "description": "SweetPepperTopping is defined as a subclass of PepperTopping, specifying that it represents a type of pepper-based topping. It is explicitly disjoint with GreenPepperTopping, JalapenoPepperTopping, and PeperonataTopping, so no individual can be both a SweetPepperTopping and any of these other pepper toppings. Additionally, SweetPepperTopping has a property restriction requiring that it exhibits at least some mild level of spiciness (hasSpiciness some Mild), distinguishing it from potentially hotter pepper toppings.",
        "CQ": [
          {
            "axiom": "SweetPepperTopping subClassOf PepperTopping",
            "CQ": [
              "Is SweetPepperTopping classified under the broader category of PepperTopping?",
              "Which toppings are defined as specializations of PepperTopping, including SweetPepperTopping?",
              "What higher-level categories encompass SweetPepperTopping?"
            ]
          },
          {
            "axiom": "SweetPepperTopping disjointWith GreenPepperTopping",
            "CQ": [
              "How is the class SweetPepperTopping differentiated from GreenPepperTopping in the ontology?",
              "Is any topping instance allowed to be both SweetPepperTopping and GreenPepperTopping simultaneously?",
              "Which topping categories are formally declared as disjoint with SweetPepperTopping?"
            ]
          },
          {
            "axiom": "SweetPepperTopping disjointWith JalapenoPepperTopping",
            "CQ": [
              "What logical constraint differentiates SweetPepperTopping and JalapenoPepperTopping within the ontology?",
              "Is any pizza topping classified simultaneously as both SweetPepperTopping and JalapenoPepperTopping?",
              "Which topping classes are explicitly incompatible with JalapenoPepperTopping according to the ontology?"
            ]
          },
          {
            "axiom": "SweetPepperTopping disjointWith PeperonataTopping",
            "CQ": [
              "What logical separation is present between SweetPepperTopping and PeperonataTopping within the ontology?",
              "Is an ingredient allowed to be both a SweetPepperTopping and a PeperonataTopping simultaneously?",
              "Which other topping classes are specified as being mutually exclusive with PeperonataTopping?"
            ]
          },
          {
            "axiom": "SweetPepperTopping propertyRestrictions [hasSpiciness some Mild]",
            "CQ": [
              "Is every SweetPepperTopping required to have a spiciness level that is at least Mild?",
              "Must there exist at least one instance where SweetPepperTopping has spiciness classified as Mild?",
              "Can a SweetPepperTopping exist without being associated with Mild spiciness?"
            ]
          }
        ]
      },
      "Medium": {
        "axiom": {
          "subClassOf": [
            "Spiciness"
          ],
          "disjointWith": [
            "Mild",
            "Hot"
          ]
        },
        "description": "Medium is a subclass of Spiciness, representing a specific level or category of spiciness. It is formally defined as disjoint with both Mild and Hot, meaning that no individual instance can belong to more than one of these classes simultaneously. This ensures that any item classified as Medium cannot be considered Mild or Hot in terms of spiciness.",
        "CQ": [
          {
            "axiom": "Medium subClassOf Spiciness",
            "CQ": [
              "Does Medium represent a specific level under the broader Spiciness classification?",
              "Which spiciness levels are categorized as subclasses of Spiciness, such as Medium?",
              "What broader classifications encompass Medium in the context of spiciness?"
            ]
          },
          {
            "axiom": "Medium disjointWith Mild",
            "CQ": [
              "How does the ontology differentiate between Medium and Mild?",
              "Is there any item that can simultaneously be classified as both Medium and Mild?",
              "Which classes are formally specified as disjoint with Medium?"
            ]
          },
          {
            "axiom": "Medium disjointWith Hot",
            "CQ": [
              "How are Medium and Hot classes differentiated within the ontology?",
              "Is there any instance that can belong to both the Medium and Hot categories?",
              "Which classes are defined as mutually exclusive with Medium?"
            ]
          }
        ]
      },
      "Pizza": {
        "axiom": {
          "subClassOf": [
            "Food"
          ],
          "disjointWith": [
            "IceCream",
            "PizzaTopping",
            "PizzaBase"
          ],
          "propertyRestrictions": [
            "[hasBase some PizzaBase]"
          ]
        },
        "description": "Pizza is defined as a subclass of Food and is explicitly disjoint with IceCream, PizzaTopping, and PizzaBase, ensuring that no individual can simultaneously be an instance of Pizza and any of these disjoint classes. Every Pizza must have at least one base, specified by the restriction that it must have some relationship via hasBase to an instance of PizzaBase. This formalization captures the essential structure of a pizza: a food item composed of a particular base and distinguished from toppings or other food types such as ice cream.",
        "CQ": [
          {
            "axiom": "Pizza subClassOf Food",
            "CQ": [
              "Is Pizza categorized under the broader class Food?",
              "Which food categories include Pizza as a member or subclass?",
              "What are the overarching classes that encompass Pizza?"
            ]
          },
          {
            "axiom": "Pizza disjointWith IceCream",
            "CQ": [
              "What is the disjointness relation between Pizza and IceCream in the ontology?",
              "Is there any scenario where an entity can be considered both a Pizza and an IceCream?",
              "Which classes are specified as disjoint with Pizza?"
            ]
          },
          {
            "axiom": "Pizza disjointWith PizzaTopping",
            "CQ": [
              "How does the ontology differentiate between Pizza and PizzaTopping?",
              "Is any entity allowed to be classified as both Pizza and PizzaTopping?",
              "Which classes are formally stated to be incompatible with Pizza?"
            ]
          },
          {
            "axiom": "Pizza disjointWith PizzaBase",
            "CQ": [
              "What formal separation is represented between Pizza and PizzaBase within the ontology?",
              "Is it feasible for an entity to be simultaneously classified as both Pizza and PizzaBase?",
              "Which classes, aside from Pizza, are specified as disjoint with PizzaBase?"
            ]
          },
          {
            "axiom": "Pizza propertyRestrictions [hasBase some PizzaBase]",
            "CQ": [
              "Must every Pizza have at least one 'hasBase' relationship with some PizzaBase?",
              "Is it required that a Pizza is associated with a PizzaBase via the 'hasBase' property?",
              "Can a Pizza exist without having a 'hasBase' connection to any instance of PizzaBase?"
            ]
          }
        ]
      },
      "PizzaTopping": {
        "axiom": {
          "subClassOf": [
            "Food"
          ],
          "disjointWith": [
            "IceCream",
            "Pizza",
            "PizzaBase"
          ]
        },
        "description": "PizzaTopping is defined as a subclass of Food, representing edible items that can be used to top a pizza. It is formally disjoint from the classes IceCream, Pizza, and PizzaBase, ensuring that no individual can simultaneously be a PizzaTopping and an instance of any of these other classes. This separation enforces a clear distinction between pizza toppings, the pizza base, the assembled pizza, and unrelated foods like ice cream.",
        "CQ": [
          {
            "axiom": "PizzaTopping subClassOf Food",
            "CQ": [
              "Does PizzaTopping fall under the general classification of Food?",
              "Which toppings are categorized as a type of Food, such as PizzaTopping?",
              "What broader classes is PizzaTopping considered a part of?"
            ]
          },
          {
            "axiom": "PizzaTopping disjointWith IceCream",
            "CQ": [
              "How does the ontology define the separation between PizzaTopping and IceCream?",
              "Is there any instance that can belong to both PizzaTopping and IceCream categories?",
              "Which classes are explicitly marked as mutually exclusive with IceCream?"
            ]
          },
          {
            "axiom": "PizzaTopping disjointWith Pizza",
            "CQ": [
              "What is the formal disjointness declared between PizzaTopping and Pizza in the ontology?",
              "Is there any instance that can be classified simultaneously as PizzaTopping and Pizza?",
              "Which classes are specified as disjoint with PizzaTopping?"
            ]
          },
          {
            "axiom": "PizzaTopping disjointWith PizzaBase",
            "CQ": [
              "Are PizzaTopping and PizzaBase categorized as mutually exclusive classes in the ontology?",
              "Does any individual in the ontology belong to both PizzaTopping and PizzaBase simultaneously?",
              "Which ontology classes are specified as disjoint with PizzaTopping?"
            ]
          }
        ]
      },
      "Spiciness": {
        "axiom": {
          "subClassOf": [
            "ValuePartition"
          ],
          "equivalentClass": [
            "(Hot or Medium or Mild)"
          ]
        },
        "description": "Spiciness is defined as a subclass of ValuePartition, representing a categorical partition for classifying spiciness levels. It is equivalent to the union of the classes Hot, Medium, or Mild—meaning any individual classified under Spiciness must be an instance of one of these three values. The class enables further division of its subclasses into additional value partitions, providing a structured way to represent varying degrees of spiciness in an ontology.",
        "CQ": [
          {
            "axiom": "Spiciness subClassOf ValuePartition",
            "CQ": [
              "Does Spiciness fall under the broader classification of ValuePartition?",
              "Which value partitions encompass Spiciness as a specialized form?",
              "What higher-level partitions is Spiciness categorized within?"
            ]
          },
          {
            "axiom": "Spiciness equivalentClass (Hot or Medium or Mild)",
            "CQ": [
              "Is Spiciness defined as exactly the union of Hot, Medium, and Mild?",
              "Are all instances of Hot, Medium, or Mild considered Spiciness?",
              "Does Spiciness include any categories apart from Hot, Medium, and Mild?"
            ]
          }
        ]
      },
      "VegetarianPizza": {
        "axiom": {
          "disjointWith": [
            "NonVegetarianPizza"
          ],
          "equivalentClass": [
            "(Pizza and not [hasTopping some MeatTopping] and not [hasTopping some FishTopping])"
          ]
        },
        "description": "VegetarianPizza is defined as a subclass of Pizza that is disjoint with NonVegetarianPizza, meaning no pizza can be both vegetarian and non-vegetarian. It is equivalent to pizzas that have neither meat toppings nor fish toppings—specifically, these pizzas do not have any topping that is an instance of MeatTopping or FishTopping. VegetarianPizza may have any combination of non-meat, non-fish toppings or no toppings at all, as specified in the current description. This ensures that only pizzas entirely free of meat and fish toppings are classified as VegetarianPizza.",
        "CQ": [
          {
            "axiom": "VegetarianPizza disjointWith NonVegetarianPizza",
            "CQ": [
              "Are VegetarianPizza and NonVegetarianPizza mutually exclusive in classification?",
              "Does the ontology allow an instance to be both VegetarianPizza and NonVegetarianPizza?",
              "Which pizza classes are asserted to be incompatible with NonVegetarianPizza?"
            ]
          },
          {
            "axiom": "VegetarianPizza equivalentClass (Pizza and not [hasTopping some MeatTopping] and not [hasTopping some FishTopping])",
            "CQ": [
              "Is every VegetarianPizza necessarily a Pizza that does not have any toppings which qualify as MeatTopping or FishTopping?",
              "Is VegetarianPizza equivalent to the intersection of Pizza and those lacking both meat and fish as toppings?",
              "Can VegetarianPizza be fully characterized as Pizzas for which there does not exist a MeatTopping or FishTopping among their toppings?"
            ]
          }
        ]
      }
    },
    "properties": {
      "hasSpiciness": {
        "axiom": {
          "characteristics": [
            "Functional"
          ],
          "domain": [
            "None"
          ],
          "range": [
            "Spiciness"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"hasSpiciness\" is a functional property, meaning each subject can have at most one value for this property. Its range is restricted to the class \"Spiciness,\" but no explicit domain is specified. It is designed to denote the spiciness level of an entity, particularly in the context of a ValuePartition. There are no super-properties or inverse properties defined.",
        "CQ": [
          {
            "axiom": "hasSpiciness characteristics Functional",
            "CQ": [
              "Is hasSpiciness a functional property, meaning that each Pizza can be related to at most one Spiciness level through hasSpiciness?",
              "Does the functional characteristic of hasSpiciness restrict any individual Pizza from having multiple values for hasSpiciness?",
              "Can an instance be associated with more than one Spiciness value via hasSpiciness, or does functionality prohibit this?"
            ]
          },
          {
            "axiom": "hasSpiciness domain None",
            "CQ": [
              "What entities can be the domain of the property 'hasSpiciness'?",
              "Is it correct that the property 'hasSpiciness' does not have a specified domain?",
              "Are there classes that should be associated as the domain of 'hasSpiciness'?"
            ]
          },
          {
            "axiom": "hasSpiciness range Spiciness",
            "CQ": [
              "Does the property 'hasSpiciness' accept any value that is not classified as Spiciness as its range?",
              "Are all possible values of 'hasSpiciness' instances of the class Spiciness?",
              "Which types of entities can serve as the range for the 'hasSpiciness' property?"
            ]
          }
        ]
      },
      "hasIngredient": {
        "axiom": {
          "characteristics": [
            "Transitive"
          ],
          "domain": [
            "Food"
          ],
          "range": [
            "Food"
          ],
          "subPropertyOf": [],
          "inverseOf": [
            "isIngredientOf"
          ]
        },
        "description": "The property \"hasIngredient\" is a transitive object property relating entities of type Food to other Food entities. Because of its transitivity, if Food A hasIngredient Food B and Food B hasIngredient Food C, then Food A also hasIngredient Food C. It has \"Food\" as both its domain and range, ensuring it only connects food items. The property is the inverse of \"isIngredientOf\" and carries no additional super-properties. Current comments note that due to transitivity, the ingredients of ingredients are considered ingredients of the whole.",
        "CQ": [
          {
            "axiom": "hasIngredient characteristics Transitive",
            "CQ": [
              "Does the property hasIngredient possess transitivity, so that if a food item hasIngredient another item, and that item hasIngredient a third, the food item also hasIngredient the third?",
              "Is the relation hasIngredient transitive, allowing direct inference of ingredient relations across multiple intermediate ingredients?",
              "Can hasIngredient be classified as a transitive object property within the ontology?"
            ]
          },
          {
            "axiom": "hasIngredient domain Food",
            "CQ": [
              "Can the property 'hasIngredient' be used with entities other than Food as its subject?",
              "Are all instances of Food required to have a value for the property 'hasIngredient'?",
              "What types of entities can serve as the domain for the property 'hasIngredient'?"
            ]
          },
          {
            "axiom": "hasIngredient range Food",
            "CQ": [
              "Can something that is not a Food be used as the object of the 'hasIngredient' property?",
              "What types of entities can serve as the range for the 'hasIngredient' property?",
              "Is every value associated with 'hasIngredient' necessarily a Food?"
            ]
          },
          {
            "axiom": "hasIngredient inverseOf isIngredientOf",
            "CQ": [
              "What is the inverse property of ‘hasIngredient’ in the ontology?",
              "If entity X has ingredient Y, does this entail that Y is an ingredient of X?",
              "How does the ontology define the connection between ‘hasIngredient’ and ‘isIngredientOf’?"
            ]
          }
        ]
      },
      "hasTopping": {
        "axiom": {
          "characteristics": [
            "InverseFunctional"
          ],
          "domain": [
            "Pizza"
          ],
          "range": [
            "PizzaTopping"
          ],
          "subPropertyOf": [
            "hasIngredient"
          ],
          "inverseOf": [
            "isToppingOf"
          ]
        },
        "description": "The property \"hasTopping\" is an inverse functional object property, meaning each pizza topping can be associated with at most one pizza via this property. Its domain is restricted to Pizza, and its range is PizzaTopping. \"hasTopping\" is a sub-property of \"hasIngredient\" and has \"isToppingOf\" as its inverse property. Note that \"hasTopping\" is inverse functional because \"isToppingOf\" is functional.",
        "CQ": [
          {
            "axiom": "hasTopping characteristics InverseFunctional",
            "CQ": [
              "Is hasTopping an inverse functional property, indicating that each Topping is associated with at most one Pizza?",
              "Can two distinct Pizzas share the same Topping through the hasTopping property?",
              "Does the hasTopping property ensure a unique Pizza corresponds to each Topping?"
            ]
          },
          {
            "axiom": "hasTopping domain Pizza",
            "CQ": [
              "Is it possible for something other than a Pizza to have a 'hasTopping' property?",
              "Are all instances of 'hasTopping' required to have a Pizza as their subject?",
              "What types of entities can serve as the domain of the 'hasTopping' property?"
            ]
          },
          {
            "axiom": "hasTopping range PizzaTopping",
            "CQ": [
              "Can values of 'hasTopping' be entities other than PizzaTopping?",
              "Is every entity used as a value for 'hasTopping' necessarily a PizzaTopping?",
              "What types of entities may appear as the range for the 'hasTopping' property?"
            ]
          },
          {
            "axiom": "hasTopping subPropertyOf hasIngredient",
            "CQ": [
              "Which properties are classified as subproperties under hasIngredient?",
              "Is hasTopping a direct or indirect subproperty of hasIngredient?",
              "Does the hasTopping property always satisfy the constraints of hasIngredient?"
            ]
          },
          {
            "axiom": "hasTopping inverseOf isToppingOf",
            "CQ": [
              "How are the properties ‘hasTopping’ and ‘isToppingOf’ related in terms of logical inverses in the ontology?",
              "If item A hasTopping item B, does the ontology entail that item B isToppingOf item A?",
              "Which property functions as the inverse of ‘hasTopping’ in this ontology?"
            ]
          }
        ]
      },
      "isIngredientOf": {
        "axiom": {
          "characteristics": [
            "Transitive"
          ],
          "domain": [
            "Food"
          ],
          "range": [
            "Food"
          ],
          "subPropertyOf": [],
          "inverseOf": [
            "hasIngredient"
          ]
        },
        "description": "The property \"isIngredientOf\" is a transitive property relating instances of Food to other instances of Food, designating that one food is an ingredient of another. Its domain and range are both restricted to the class Food. \"isIngredientOf\" is the inverse of \"hasIngredient\" and should mirror all subproperties and attributes associated with \"hasIngredient,\" as noted in its current description. No super-properties are specified.",
        "CQ": [
          {
            "axiom": "isIngredientOf characteristics Transitive",
            "CQ": [
              "Is isIngredientOf a transitive property, such that if ingredient A is an ingredient of B and B is an ingredient of C, then A is an ingredient of C?",
              "Does the transitive characteristic of isIngredientOf mean that ingredient membership propagates through multiple composition levels?",
              "Can a chain of isIngredientOf relations establish a direct isIngredientOf relationship from the first ingredient to the final composite item?"
            ]
          },
          {
            "axiom": "isIngredientOf domain Food",
            "CQ": [
              "Can the property 'isIngredientOf' be used with entities that are not of type Food as its subject?",
              "Is every subject using the 'isIngredientOf' property necessarily a Food item?",
              "What types of entities can serve as the domain for the 'isIngredientOf' property?"
            ]
          },
          {
            "axiom": "isIngredientOf range Food",
            "CQ": [
              "Does the property 'isIngredientOf' ever relate to something that is not a Food?",
              "What types of entities can be the range of 'isIngredientOf'?",
              "Is every object in the 'isIngredientOf' relationship required to be a Food?"
            ]
          },
          {
            "axiom": "isIngredientOf inverseOf hasIngredient",
            "CQ": [
              "What is the inverse relationship defined between 'isIngredientOf' and 'hasIngredient' in the ontology?",
              "If entity X is an ingredient of entity Y, does the ontology assert that Y has ingredient X?",
              "Which property functions as the inverse for 'isIngredientOf' within this ontology?"
            ]
          }
        ]
      }
    }
  },
  "time": {
    "classes": {
      "time:Instant": {
        "axiom": {
          "subClassOf": [
            "time:TemporalEntity"
          ],
          "disjointWith": [
            "time:ProperInterval"
          ]
        },
        "description": "time:Instant is a subclass of time:TemporalEntity, representing a specific point in time without duration. It is explicitly disjoint with time:ProperInterval, meaning no individual can be both a time:Instant and a time:ProperInterval. This enforces a clear ontological distinction between an instantaneous temporal entity and a temporal interval with measurable duration.",
        "CQ": [
          {
            "axiom": "time:Instant subClassOf time:TemporalEntity",
            "CQ": [
              "Is time:TemporalEntity a broader class that encompasses time:Instant?",
              "Which subclasses fall under time:TemporalEntity, and does this include time:Instant?",
              "To which parent categories does time:Instant belong in the class hierarchy?"
            ]
          },
          {
            "axiom": "time:Instant disjointWith time:ProperInterval",
            "CQ": [
              "How does the ontology specify the mutual exclusivity between time:Instant and time:ProperInterval?",
              "Is any entity allowed to be typed as both time:Instant and time:ProperInterval simultaneously?",
              "Which classes are declared as disjoint with time:Instant within the ontology?"
            ]
          }
        ]
      },
      "time:Year": {
        "axiom": {
          "subClassOf": [
            "time:DurationDescription"
          ],
          "propertyRestrictions": [
            "[time:years exactly 1]",
            "[time:months exactly 0]",
            "[time:hours exactly 0]",
            "[time:weeks exactly 0]",
            "[time:seconds exactly 0]",
            "[time:days exactly 0]",
            "[time:minutes exactly 0]"
          ]
        },
        "description": "time:Year is defined as a subclass of time:DurationDescription. It represents a duration that is exactly one year in length, characterized strictly by the presence of exactly 1 value for the time:years property, and exactly 0 values for all other duration components (months, weeks, days, hours, minutes, seconds). This ensures that any individual classified as time:Year denotes a precise and unambiguous period of one calendar year.",
        "CQ": [
          {
            "axiom": "time:Year subClassOf time:DurationDescription",
            "CQ": [
              "Is time:DurationDescription a more general category that includes time:Year?",
              "What are the subclasses characterized under time:DurationDescription, such as time:Year?",
              "Which broader classes does time:Year inherit properties from in the ontology?"
            ]
          },
          {
            "axiom": "time:Year propertyRestrictions [time:years exactly 1]",
            "CQ": [
              "Is each instance of time:Year required to have exactly one associated value for the time:years property?",
              "Can a time:Year have more or fewer than one time:years value?",
              "Does the ontology restrict time:Year to possess one and only one time:years property filler?"
            ]
          },
          {
            "axiom": "time:Year propertyRestrictions [time:months exactly 0]",
            "CQ": [
              "Is a time:Year instance defined such that it is related to exactly zero time:months entities?",
              "Can any instance of time:Year have a value for the time:months property?",
              "Would assigning any time:months property to a time:Year instance violate its class definition?"
            ]
          },
          {
            "axiom": "time:Year propertyRestrictions [time:hours exactly 0]",
            "CQ": [
              "Is a time:Year instance required to have exactly zero values for the time:hours property?",
              "Can a Year possess any value other than zero for the property time:hours?",
              "Is the property time:hours always absent or exactly equal to zero in a Year according to the ontology?"
            ]
          },
          {
            "axiom": "time:Year propertyRestrictions [time:weeks exactly 0]",
            "CQ": [
              "Is a Year in the ontology defined as having exactly zero weeks according to the time:weeks property?",
              "Can any instance classified as time:Year possess a nonzero value for the time:weeks property?",
              "Does the property restriction indicate that only time:Year entities with zero weeks are valid in the ontology?"
            ]
          },
          {
            "axiom": "time:Year propertyRestrictions [time:seconds exactly 0]",
            "CQ": [
              "Is it required that every instance of time:Year has exactly zero for the property time:seconds?",
              "Can time:Year include any value for the property time:seconds other than zero?",
              "Does the definition of time:Year ensure that time:seconds must always be zero for its instances?"
            ]
          },
          {
            "axiom": "time:Year propertyRestrictions [time:days exactly 0]",
            "CQ": [
              "Is an instance of time:Year characterized by having exactly zero values for the property time:days?",
              "Can any occurrence of time:Year possess any number of time:days other than zero?",
              "Does the property time:days necessarily have a cardinality of zero for every time:Year?"
            ]
          },
          {
            "axiom": "time:Year propertyRestrictions [time:minutes exactly 0]",
            "CQ": [
              "Is it required that an instance of time:Year must have exactly zero values for the property time:minutes?",
              "Can a time:Year ever include any value for time:minutes other than zero?",
              "Does the definition of time:Year restrict the property time:minutes to precisely zero and exclude any other value?"
            ]
          }
        ]
      },
      "time:DurationDescription": {
        "axiom": {
          "propertyRestrictions": [
            "[time:hours max 1]",
            "[time:months max 1]",
            "[time:seconds max 1]",
            "[time:weeks max 1]",
            "[time:days max 1]",
            "[time:years max 1]",
            "[time:minutes max 1]"
          ]
        },
        "description": "time:DurationDescription is a class characterized by property restrictions on its temporal components: each of the properties time:hours, time:minutes, time:seconds, time:days, time:weeks, time:months, and time:years may have at most one value associated with any instance of this class. This ensures that a duration description contains at most a single specified value for each temporal unit, allowing precise representation of time durations without ambiguity or redundancy across these components.",
        "CQ": [
          {
            "axiom": "time:DurationDescription propertyRestrictions [time:hours max 1]",
            "CQ": [
              "Is a time:DurationDescription instance allowed to have more than one value for the time:hours property?",
              "Does the restriction on time:hours ensure that at most one value can be assigned to time:DurationDescription?",
              "Can a time:DurationDescription have multiple distinct hour values according to the specified property restriction?"
            ]
          },
          {
            "axiom": "time:DurationDescription propertyRestrictions [time:months max 1]",
            "CQ": [
              "Is it required that a DurationDescription has at most one value for the 'months' property?",
              "Can a DurationDescription be associated with more than one 'months' property value?",
              "Does the ontology restrict DurationDescription entities to a single 'months' property assignment?"
            ]
          },
          {
            "axiom": "time:DurationDescription propertyRestrictions [time:seconds max 1]",
            "CQ": [
              "Is it required that a DurationDescription has at most one value for the 'seconds' property?",
              "Can a DurationDescription be associated with more than one 'seconds' value simultaneously?",
              "Does the 'seconds' property in DurationDescription allow multiple distinct values?"
            ]
          },
          {
            "axiom": "time:DurationDescription propertyRestrictions [time:weeks max 1]",
            "CQ": [
              "Is time:DurationDescription limited to having at most one value for the property time:weeks?",
              "Can an instance of time:DurationDescription be associated with more than one value through the property time:weeks?",
              "Does time:DurationDescription ever describe durations with multiple time:weeks values assigned?"
            ]
          },
          {
            "axiom": "time:DurationDescription propertyRestrictions [time:days max 1]",
            "CQ": [
              "Is it possible for a DurationDescription to have more than one value for the 'days' property?",
              "Does the definition of DurationDescription ensure that the 'days' property is restricted to at most one value?",
              "Can a DurationDescription instance provide multiple different 'days' values simultaneously?"
            ]
          },
          {
            "axiom": "time:DurationDescription propertyRestrictions [time:years max 1]",
            "CQ": [
              "Is a DurationDescription limited to having at most one value for the 'years' property?",
              "Can a DurationDescription specify more than one value for the 'years' attribute?",
              "Does the ontology enforce a restriction that a DurationDescription may not describe multiple 'years' values?"
            ]
          },
          {
            "axiom": "time:DurationDescription propertyRestrictions [time:minutes max 1]",
            "CQ": [
              "Can a DurationDescription have more than one value for the minutes property?",
              "Is it allowed for a DurationDescription to specify multiple different minutes values?",
              "Does the DurationDescription class restrict the time:minutes property to at most a single value?"
            ]
          }
        ]
      }
    },
    "properties": {
      "time:minutes": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "time:DurationDescription"
          ],
          "range": [
            "xsd:decimal"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"time:minutes\" has no explicitly declared characteristics and does not inherit from any super-property. Its domain is restricted to instances of \"time:DurationDescription,\" and its range is specified as \"xsd:decimal.\" This property is used to associate a duration description with a numeric value representing minutes. No inverse property is defined.",
        "CQ": [
          {
            "axiom": "time:minutes domain time:DurationDescription",
            "CQ": [
              "Is there any entity other than time:DurationDescription that can be the subject of time:minutes?",
              "What can be the domain of the property time:minutes?",
              "Does the property time:minutes have a domain different from time:DurationDescription?"
            ]
          },
          {
            "axiom": "time:minutes range xsd:decimal",
            "CQ": [
              "Can values for 'time:minutes' only be of type xsd:decimal?",
              "Is every range value for 'time:minutes' constrained exclusively to xsd:decimal?",
              "What possible datatypes can serve as the range for the property 'time:minutes'?"
            ]
          }
        ]
      },
      "time:xsdDateTime": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "time:DateTimeInterval"
          ],
          "range": [
            "xsd:dateTime"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"time:xsdDateTime\" has no explicitly defined characteristics or super-properties. Its domain is restricted to instances of \"time:DateTimeInterval,\" and its range is limited to values of type \"xsd:dateTime.\" This property is used to associate a DateTimeInterval with a specific XML Schema dateTime value. No inverse property is specified.",
        "CQ": [
          {
            "axiom": "time:xsdDateTime domain time:DateTimeInterval",
            "CQ": [
              "Can the property 'time:xsdDateTime' be applied to any subject that is not a time:DateTimeInterval?",
              "Are all subjects associated with 'time:xsdDateTime' necessarily instances of time:DateTimeInterval?",
              "What types of entities can appear as the domain of the property 'time:xsdDateTime'?"
            ]
          },
          {
            "axiom": "time:xsdDateTime range xsd:dateTime",
            "CQ": [
              "Is every value assigned via the property 'time:xsdDateTime' necessarily of type xsd:dateTime?",
              "Can 'time:xsdDateTime' have a range different from xsd:dateTime?",
              "What data types are permissible as the range for the property 'time:xsdDateTime'?"
            ]
          }
        ]
      },
      "time:unitType": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "time:DateTimeDescription"
          ],
          "range": [
            "time:TemporalUnit"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"time:unitType\" relates an instance of time:DateTimeDescription to a value of type time:TemporalUnit. It has no explicitly defined characteristics, super-properties, or inverse properties. Its domain is restricted to time:DateTimeDescription, and its range is limited to time:TemporalUnit, indicating that it specifies the unit of temporal measurement (such as second, minute, hour, etc.) for a given date-time description.",
        "CQ": [
          {
            "axiom": "time:unitType domain time:DateTimeDescription",
            "CQ": [
              "Can the property 'unitType' be used with subjects other than 'DateTimeDescription'?",
              "Must all objects of the 'unitType' property refer to a specific type or class?",
              "What are the possible domains for the property 'unitType'?"
            ]
          },
          {
            "axiom": "time:unitType range time:TemporalUnit",
            "CQ": [
              "Can the property 'unitType' be used with any value other than instances of 'TemporalUnit'?",
              "Is every object of the 'unitType' property required to be a 'TemporalUnit'?",
              "What classes can appear as the range for the 'unitType' property?"
            ]
          }
        ]
      },
      "time:month": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "time:DateTimeDescription"
          ],
          "range": [
            "xsd:gMonth"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"time:month\" links instances of time:DateTimeDescription to a value of type xsd:gMonth, representing a calendar month. It has no explicitly defined characteristics, super-properties, or inverse properties. The domain restriction ensures usage with DateTimeDescription, while the range specifies that the value is a valid month in XML Schema Datatype (gMonth) format.",
        "CQ": [
          {
            "axiom": "time:month domain time:DateTimeDescription",
            "CQ": [
              "Is there any entity other than time:DateTimeDescription that can be the subject of the property time:month?",
              "Are all objects used with the property time:month required to represent months?",
              "What types of entities can act as the domain for the property time:month?"
            ]
          },
          {
            "axiom": "time:month range xsd:gMonth",
            "CQ": [
              "Does the property 'time:month' have any range other than xsd:gMonth?",
              "Is it possible for a value associated with 'time:month' to not be an xsd:gMonth?",
              "What types of values are permitted as the range for the property 'time:month'?"
            ]
          }
        ]
      },
      "time:hour": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "time:DateTimeDescription"
          ],
          "range": [
            "xsd:nonNegativeInteger"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"time:hour\" has a domain of \"time:DateTimeDescription\" and a range of \"xsd:nonNegativeInteger\", indicating it is used to specify the hour component within a date-time description as a non-negative integer value. No property characteristics, super-properties, or inverse properties are defined.",
        "CQ": [
          {
            "axiom": "time:hour domain time:DateTimeDescription",
            "CQ": [
              "Can the property 'time:hour' be used with subjects other than time:DateTimeDescription?",
              "What entities are permitted as the domain for the property 'time:hour'?",
              "Is there any instance of time:DateTimeDescription that cannot be associated with the property 'time:hour'?"
            ]
          },
          {
            "axiom": "time:hour range xsd:nonNegativeInteger",
            "CQ": [
              "Is every value of the property 'time:hour' required to be a non-negative integer?",
              "Can 'time:hour' have a range other than xsd:nonNegativeInteger?",
              "What kinds of values are permitted as the range for the property 'time:hour'?"
            ]
          }
        ]
      },
      "time:intervalOverlaps": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "time:ProperInterval"
          ],
          "range": [
            "time:ProperInterval"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"time:intervalOverlaps\" relates two individuals, both of which must be instances of time:ProperInterval. It has no explicitly defined characteristics, no super-properties, and no specified inverse property. This property is used to indicate that two proper time intervals overlap with each other in time.",
        "CQ": [
          {
            "axiom": "time:intervalOverlaps domain time:ProperInterval",
            "CQ": [
              "Can 'intervalOverlaps' be used with subjects other than 'ProperInterval'?",
              "Are there any entities that cannot serve as the domain for the property 'intervalOverlaps'?",
              "What possible types can be assigned as the domain for 'intervalOverlaps'?"
            ]
          },
          {
            "axiom": "time:intervalOverlaps range time:ProperInterval",
            "CQ": [
              "Can the property 'intervalOverlaps' relate to anything other than a ProperInterval as its object?",
              "Is there any ProperInterval that cannot be used as the range for the property 'intervalOverlaps'?",
              "What types of entities can appear as the range for the property 'intervalOverlaps'?"
            ]
          }
        ]
      },
      "time:intervalFinishedBy": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [],
          "inverseOf": [
            "time:intervalFinishes"
          ]
        },
        "description": "The property \"time:intervalFinishedBy\" has no explicitly defined characteristics, domain, or range restrictions, and is not declared as a sub-property of any other property. It is specified as the inverse of \"time:intervalFinishes,\" indicating a reciprocal relationship between temporal intervals where one interval is finished by another. No additional description is currently provided.",
        "CQ": [
          {
            "axiom": "time:intervalFinishedBy domain None",
            "CQ": [
              "What types of entities can act as the subject for the property 'intervalFinishedBy'?",
              "Is it correct that the property 'intervalFinishedBy' does not have a specified domain?",
              "Are there any entities that cannot be the domain of 'intervalFinishedBy'?"
            ]
          },
          {
            "axiom": "time:intervalFinishedBy range None",
            "CQ": [
              "Is it correct that the property 'time:intervalFinishedBy' does not have a defined range?",
              "What types of entities, if any, can be the range of 'time:intervalFinishedBy'?",
              "Can 'time:intervalFinishedBy' be used with any value as its object due to the absence of a specified range?"
            ]
          },
          {
            "axiom": "time:intervalFinishedBy inverseOf time:intervalFinishes",
            "CQ": [
              "What is the logical connection between 'intervalFinishedBy' and 'intervalFinishes' in the ontology?",
              "If time interval A is related to interval B using 'intervalFinishedBy', does this entail that B is related to A via 'intervalFinishes'?",
              "Which property is defined as the inverse of 'intervalFinishedBy' in the time ontology?"
            ]
          }
        ]
      },
      "time:intervalContains": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [],
          "inverseOf": [
            "time:intervalDuring"
          ]
        },
        "description": "The property \"time:intervalContains\" has no explicitly defined domain, range, or characteristics. It specifies an inverse property relationship with \"time:intervalDuring,\" indicating that if one time interval contains another, the latter occurs within the bounds of the former. No super-properties are defined.",
        "CQ": [
          {
            "axiom": "time:intervalContains domain None",
            "CQ": [
              "What entities can serve as the domain of the property 'intervalContains'?",
              "Is it correct that the property 'intervalContains' does not have a specified domain?",
              "Are there any explicit domain constraints for the property 'intervalContains'?"
            ]
          },
          {
            "axiom": "time:intervalContains range None",
            "CQ": [
              "What can be the range of the property 'time:intervalContains'?",
              "Is it correct that 'time:intervalContains' has no specified range?",
              "Can 'time:intervalContains' relate to any type of object as its range?"
            ]
          },
          {
            "axiom": "time:intervalContains inverseOf time:intervalDuring",
            "CQ": [
              "How does the ontology represent the connection between 'intervalContains' and 'intervalDuring' properties?",
              "If a time interval A contains time interval B, does the ontology entail that B occurs during A?",
              "Which property is identified as the inverse of 'intervalContains' in this ontology?"
            ]
          }
        ]
      },
      "time:dayOfYear": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "time:DateTimeDescription"
          ],
          "range": [
            "xsd:nonNegativeInteger"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"time:dayOfYear\" links an instance of time:DateTimeDescription to a non-negative integer (xsd:nonNegativeInteger) representing the day number within the year. It has no explicitly defined characteristics, super-properties, or inverse properties. This property is used to specify which day of the year a particular date-time description refers to.",
        "CQ": [
          {
            "axiom": "time:dayOfYear domain time:DateTimeDescription",
            "CQ": [
              "Can the property 'dayOfYear' be used with subjects other than DateTimeDescription?",
              "Is every instance of DateTimeDescription required to have a value for the 'dayOfYear' property?",
              "What types of entities are permitted as the domain of the 'dayOfYear' property?"
            ]
          },
          {
            "axiom": "time:dayOfYear range xsd:nonNegativeInteger",
            "CQ": [
              "Can the property 'dayOfYear' have values that are not nonNegativeIntegers?",
              "What types of values are permitted as the range for 'dayOfYear'?",
              "Is every object associated with 'dayOfYear' required to be a nonNegativeInteger?"
            ]
          }
        ]
      },
      "time:hasBeginning": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "time:TemporalEntity"
          ],
          "range": [
            "time:Instant"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"time:hasBeginning\" links instances of time:TemporalEntity to a time:Instant that marks their starting point. It has no specified characteristics or super-properties, and it does not have an inverse property. The domain is time:TemporalEntity and the range is time:Instant, indicating its use for specifying the beginning instant of a temporal entity.",
        "CQ": [
          {
            "axiom": "time:hasBeginning domain time:TemporalEntity",
            "CQ": [
              "Can the property 'time:hasBeginning' be used with any subject other than a 'time:TemporalEntity'?",
              "Is it necessary that every subject of 'time:hasBeginning' is a 'time:TemporalEntity'?",
              "Which types of entities are permitted as the subject for the property 'time:hasBeginning'?"
            ]
          },
          {
            "axiom": "time:hasBeginning range time:Instant",
            "CQ": [
              "Can the property 'time:hasBeginning' have an object that is not a time:Instant?",
              "Is every entity used as the range of 'time:hasBeginning' required to be a time:Instant?",
              "What types of values are permitted as the object of the 'time:hasBeginning' property?"
            ]
          }
        ]
      },
      "time:dayOfWeek": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "time:DateTimeDescription"
          ],
          "range": [
            "time:DayOfWeek"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"time:dayOfWeek\" has no explicitly defined characteristics or super-properties. Its domain is \"time:DateTimeDescription,\" meaning it is used with instances describing date and time. Its range is \"time:DayOfWeek,\" indicating the value should be a day of the week. No inverse property is specified. This property associates a DateTime description with the specific day of the week it represents.",
        "CQ": [
          {
            "axiom": "time:dayOfWeek domain time:DateTimeDescription",
            "CQ": [
              "Is it possible for a property like 'dayOfWeek' to have a domain other than DateTimeDescription?",
              "Must all instances associated with 'dayOfWeek' be types of DateTimeDescription?",
              "Which kinds of entities are permitted as the domain for 'dayOfWeek'?"
            ]
          },
          {
            "axiom": "time:dayOfWeek range time:DayOfWeek",
            "CQ": [
              "Can the property 'time:dayOfWeek' have values that are not instances of 'time:DayOfWeek'?",
              "Is it possible for any entity other than 'time:DayOfWeek' to serve as the range of 'time:dayOfWeek'?",
              "What entities are permitted as the range for the property 'time:dayOfWeek'?"
            ]
          }
        ]
      },
      "time:year": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "time:DateTimeDescription"
          ],
          "range": [
            "xsd:gYear"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"time:year\" links instances of time:DateTimeDescription to values of type xsd:gYear, representing a specific year. It does not have additional property characteristics, super-properties, or an inverse property defined.",
        "CQ": [
          {
            "axiom": "time:year domain time:DateTimeDescription",
            "CQ": [
              "Is it possible for something other than a time:DateTimeDescription to have a value for time:year?",
              "Can all subjects of the property time:year be categorized as time:DateTimeDescription?",
              "Which classes are eligible to be the domain for the property time:year?"
            ]
          },
          {
            "axiom": "time:year range xsd:gYear",
            "CQ": [
              "Does the property 'time:year' accept values other than those of type xsd:gYear as its range?",
              "Are all values associated with 'time:year' required to be instances of xsd:gYear?",
              "What possible data types can be used as the range for the property 'time:year'?"
            ]
          }
        ]
      },
      "time:days": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "time:DurationDescription"
          ],
          "range": [
            "xsd:decimal"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"time:days\" has no declared characteristics or super-properties. Its domain is restricted to instances of \"time:DurationDescription,\" and its range is specified as \"xsd:decimal.\" This property is used to indicate the number of days, represented as a decimal value, associated with a given duration description. No inverse property is defined.",
        "CQ": [
          {
            "axiom": "time:days domain time:DurationDescription",
            "CQ": [
              "Can the property 'time:days' be applied to any subject other than an instance of time:DurationDescription?",
              "What entities are allowed as subjects when using the property 'time:days'?",
              "Is it possible for something that is not a time:DurationDescription to have a 'time:days' value?"
            ]
          },
          {
            "axiom": "time:days range xsd:decimal",
            "CQ": [
              "Can the property 'time:days' point to values other than xsd:decimal?",
              "Is every value assigned via 'time:days' required to be of type xsd:decimal?",
              "What types of values are valid as the range for the property 'time:days'?"
            ]
          }
        ]
      },
      "time:intervalMeets": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "time:ProperInterval"
          ],
          "range": [
            "time:ProperInterval"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"time:intervalMeets\" relates two individuals of type time:ProperInterval, indicating that one time interval immediately precedes another without overlapping. It has no defined characteristics, super-properties, or inverse property. Its domain and range are both restricted to time:ProperInterval.",
        "CQ": [
          {
            "axiom": "time:intervalMeets domain time:ProperInterval",
            "CQ": [
              "Can the property 'time:intervalMeets' relate any subject other than a time:ProperInterval?",
              "Are all instances using 'time:intervalMeets' as a subject required to be of type time:ProperInterval?",
              "Which classes are permitted as the domain for the 'time:intervalMeets' property?"
            ]
          },
          {
            "axiom": "time:intervalMeets range time:ProperInterval",
            "CQ": [
              "Can the property 'intervalMeets' be used with objects other than 'ProperInterval'?",
              "Is every object linked by the property 'intervalMeets' obliged to be a 'ProperInterval'?",
              "What types of entities are allowed as the range for the 'intervalMeets' property?"
            ]
          }
        ]
      },
      "time:week": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "time:DateTimeDescription"
          ],
          "range": [
            "xsd:nonNegativeInteger"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"time:week\" relates an instance of \"time:DateTimeDescription\" to a non-negative integer value, representing the week component of a date-time description. It has no defined characteristics, super-properties, or inverse properties. The property ensures that the week is expressed as a non-negative integer, but otherwise imposes no additional restrictions.",
        "CQ": [
          {
            "axiom": "time:week domain time:DateTimeDescription",
            "CQ": [
              "Can the property 'time:week' be used with any class besides 'time:DateTimeDescription' as its subject?",
              "Is it possible for an instance of 'time:DateTimeDescription' to lack a value for the property 'time:week'?",
              "What class or classes are allowed to be the domain of the property 'time:week'?"
            ]
          },
          {
            "axiom": "time:week range xsd:nonNegativeInteger",
            "CQ": [
              "Can the property 'week' be associated with any object other than a nonNegativeInteger as its value?",
              "Is it correct that the only possible range for 'week' is xsd:nonNegativeInteger, or can other datatypes be used?",
              "What types of values are permissible as the range of the property 'week'?"
            ]
          }
        ]
      },
      "time:intervalBefore": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "time:ProperInterval"
          ],
          "range": [
            "time:ProperInterval"
          ],
          "subPropertyOf": [
            "time:before"
          ],
          "inverseOf": []
        },
        "description": "The property \"time:intervalBefore\" links two individuals of type time:ProperInterval, indicating that one interval occurs entirely before another. It has no explicitly defined characteristics or inverse property. It is a subproperty of time:before, inheriting its temporal ordering semantics.",
        "CQ": [
          {
            "axiom": "time:intervalBefore domain time:ProperInterval",
            "CQ": [
              "Can the property 'time:intervalBefore' have a domain different from time:ProperInterval?",
              "Is there any instance of time:ProperInterval that cannot be used as the subject of 'time:intervalBefore'?",
              "What entities are permitted to serve as the domain of 'time:intervalBefore'?"
            ]
          },
          {
            "axiom": "time:intervalBefore range time:ProperInterval",
            "CQ": [
              "Is every value used with the property 'time:intervalBefore' required to be a time:ProperInterval?",
              "Does the property 'time:intervalBefore' allow for a range other than time:ProperInterval?",
              "What types of entities can be used as the range for the property 'time:intervalBefore'?"
            ]
          },
          {
            "axiom": "time:intervalBefore subPropertyOf time:before",
            "CQ": [
              "Which properties are defined as subproperties of time:before within the ontology?",
              "Is every occurrence of the time:intervalBefore property also valid as an occurrence of time:before?",
              "What is the hierarchical relationship between time:intervalBefore and time:before according to the ontology?"
            ]
          }
        ]
      },
      "time:before": {
        "axiom": {
          "characteristics": [
            "Transitive"
          ],
          "domain": [
            "time:TemporalEntity"
          ],
          "range": [
            "time:TemporalEntity"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"time:before\" is a transitive property used to relate two instances of time:TemporalEntity, indicating that one temporal entity occurs before another. It has both its domain and range restricted to time:TemporalEntity. No super-properties or inverse properties are specified.",
        "CQ": [
          {
            "axiom": "time:before characteristics Transitive",
            "CQ": [
              "Is the property time:before defined as a transitive property, where if event A occurs before event B and event B occurs before event C, then event A occurs before event C?",
              "Does the transitive nature of time:before entail that the relation passes through intermediate events?",
              "Can it be inferred that time:before connects two entities such that if the relation holds between the first and second, and second and third, it must also hold between the first and third?"
            ]
          },
          {
            "axiom": "time:before domain time:TemporalEntity",
            "CQ": [
              "Can the property 'time:before' be used with subjects that are not instances of 'time:TemporalEntity'?",
              "Are there any 'time:TemporalEntity' instances that cannot participate as domains in the 'time:before' relationship?",
              "What types of entities are permissible as the domain for the property 'time:before'?"
            ]
          },
          {
            "axiom": "time:before range time:TemporalEntity",
            "CQ": [
              "Can the property 'time:before' relate to entities other than time:TemporalEntity as its object?",
              "What types of individuals can serve as the range for the property 'time:before'?",
              "Is every object associated with 'time:before' necessarily a time:TemporalEntity?"
            ]
          }
        ]
      },
      "time:inside": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "time:Interval"
          ],
          "range": [
            "time:Instant"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"time:inside\" has a domain of time:Interval and a range of time:Instant, indicating it relates a time interval to an instant that occurs within it. There are no specified characteristics, super-properties, or inverse properties.",
        "CQ": [
          {
            "axiom": "time:inside domain time:Interval",
            "CQ": [
              "Can the property 'time:inside' have a subject that is not a time:Interval?",
              "Is it possible for an entity that is not a time:Interval to be associated via 'time:inside'?",
              "What are the possible domains for the 'time:inside' property?"
            ]
          },
          {
            "axiom": "time:inside range time:Instant",
            "CQ": [
              "Can the property 'inside' be used with values other than 'Instant'?",
              "Is every value used with the property 'inside' required to be a 'time:Instant'?",
              "What kinds of entities are allowed to appear as the range when using the 'inside' property?"
            ]
          }
        ]
      },
      "time:intervalFinishes": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "time:ProperInterval"
          ],
          "range": [
            "time:ProperInterval"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"time:intervalFinishes\" links two instances of time:ProperInterval, indicating that the subject interval finishes at the endpoint of the object interval but does not necessarily start at the same time. It has no additional characteristics, super-properties, or inverse properties defined. Both its domain and range are restricted to time:ProperInterval.",
        "CQ": [
          {
            "axiom": "time:intervalFinishes domain time:ProperInterval",
            "CQ": [
              "Can the property 'intervalFinishes' be used with a subject that is not a ProperInterval?",
              "Are all subjects of the 'intervalFinishes' property instances of ProperInterval?",
              "What entities are permitted as the domain for the 'intervalFinishes' property?"
            ]
          },
          {
            "axiom": "time:intervalFinishes range time:ProperInterval",
            "CQ": [
              "Is every value assigned to 'intervalFinishes' necessarily a ProperInterval?",
              "Can 'intervalFinishes' associate with any object that is not a ProperInterval as its value?",
              "What entities are permitted as the range of the property 'intervalFinishes'?"
            ]
          }
        ]
      },
      "time:day": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "time:DateTimeDescription"
          ],
          "range": [
            "xsd:gDay"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"time:day\" relates an instance of time:DateTimeDescription to a value of type xsd:gDay, representing the day component of a date. It has no specified characteristics, super-properties, or inverse properties.",
        "CQ": [
          {
            "axiom": "time:day domain time:DateTimeDescription",
            "CQ": [
              "Can the property 'day' be used with subjects other than 'DateTimeDescription'?",
              "Is every entity that uses the property 'day' necessarily a 'DateTimeDescription'?",
              "What types of entities are permitted as the domain of the property 'day'?"
            ]
          },
          {
            "axiom": "time:day range xsd:gDay",
            "CQ": [
              "Is every value assigned to the property 'time:day' necessarily of type xsd:gDay?",
              "Can 'time:day' ever be associated with an object outside the range xsd:gDay?",
              "What types of values are permitted as the range of the property 'time:day'?"
            ]
          }
        ]
      }
    }
  },
  "stuff": {
    "classes": {
      "PhysicalObject": {
        "axiom": {
          "subClassOf": [
            "PhysicalEndurant"
          ],
          "disjointWith": [
            "Stuff"
          ]
        },
        "description": "PhysicalObject is defined as a subclass of PhysicalEndurant, indicating that it inherits all characteristics of entities that persist through time while maintaining their identity. It is explicitly disjoint with Stuff, which means no individual can simultaneously be both a PhysicalObject and Stuff. This class represents discrete, countable entities as opposed to unstructured or undifferentiated substances.",
        "CQ": [
          {
            "axiom": "PhysicalObject subClassOf PhysicalEndurant",
            "CQ": [
              "Are all PhysicalObjects instances of the broader class PhysicalEndurant?",
              "Which subclasses are encompassed by PhysicalEndurant, such as PhysicalObject?",
              "Under which higher-level categories is PhysicalObject classified within the ontology?"
            ]
          },
          {
            "axiom": "PhysicalObject disjointWith Stuff",
            "CQ": [
              "How does the ontology characterize the distinction between PhysicalObject and Stuff?",
              "Is there any entity that can simultaneously be classified as both PhysicalObject and Stuff?",
              "Which classes are specified as mutually exclusive with Stuff within the ontology?"
            ]
          }
        ]
      },
      "Molecule": {
        "axiom": {
          "subClassOf": [
            "PhysicalObject"
          ],
          "propertyRestrictions": [
            "[hasPart some Atom]"
          ]
        },
        "description": "Molecule is defined as a subclass of PhysicalObject, with the restriction that every instance must have at least one part that is an Atom. In this ontology, molecule is modeled as a class representing types of chemically bonded structures rather than specific individual molecules. Molecules are characterized by being composed of two or more atoms held together by chemical bonds, although the axiom specifies only the presence of at least one atom as a part to maintain simplicity and logical properties such as transitivity. This modeling choice supports reasoning about molecular types while staying within the constraints of first-order logic.",
        "CQ": [
          {
            "axiom": "Molecule subClassOf PhysicalObject",
            "CQ": [
              "Does Molecule fall under the broader classification of PhysicalObject?",
              "Which entities are classified as more specific forms of PhysicalObject, such as Molecule?",
              "In which overarching categories can Molecule be placed within the ontology?"
            ]
          },
          {
            "axiom": "Molecule propertyRestrictions [hasPart some Atom]",
            "CQ": [
              "Is every molecule composed of at least one atom as a part?",
              "Must a molecule necessarily possess the 'hasPart' relationship with an atom?",
              "Can a molecule exist without having any atom as one of its parts?"
            ]
          }
        ]
      },
      "MixedStuff": {
        "axiom": {
          "subClassOf": [
            "Stuff",
            "(Stuff and [hasPartStuff min 2 Stuff])"
          ],
          "disjointWith": [
            "PureStuff"
          ]
        },
        "description": "MixedStuff is defined as a subclass of Stuff, with the additional restriction that any instance must have at least two component parts, each of which is itself an instance of Stuff (expressed as having at least two 'hasPartStuff' relations to Stuff). MixedStuff is explicitly disjoint with PureStuff, ensuring no overlap between mixtures and pure substances.\n\nConceptually, MixedStuff captures the essence of mixtures as materials composed of variable proportions of distinct, observable components that can be physically separated. The classification is based on the nature and roles of the components, explicitly excluding cases such as different phases of the same substance (e.g., ice in water), which remain PureStuff. Colloids are considered MixedStuff only when composed of different kinds of Stuff, maintaining the requirement for distinct observable constituents.",
        "CQ": [
          {
            "axiom": "MixedStuff subClassOf Stuff",
            "CQ": [
              "Is MixedStuff one of the more specific types classified under Stuff?",
              "Which categories does MixedStuff conceptually fall under, according to its hierarchical classification?",
              "What distinct subtypes are encompassed by the broader class Stuff, such as MixedStuff?"
            ]
          },
          {
            "axiom": "MixedStuff subClassOf (Stuff and [hasPartStuff min 2 Stuff])",
            "CQ": [
              "Is every MixedStuff an instance that has at least two Stuff components?",
              "What are the necessary conditions for something to be identified as MixedStuff in relation to Stuff and hasPartStuff?",
              "Which subclasses of Stuff require a minimum of two hasPartStuff relationships to other Stuff?"
            ]
          },
          {
            "axiom": "MixedStuff disjointWith PureStuff",
            "CQ": [
              "How does the ontology define the distinction between MixedStuff and PureStuff?",
              "Is there any instance that can belong to both MixedStuff and PureStuff?",
              "Which classes are logically incompatible with PureStuff according to the ontology?"
            ]
          }
        ]
      },
      "Colloid": {
        "axiom": {
          "subClassOf": [
            "HomogeneousMixture"
          ],
          "equivalentClass": [
            "(HomogeneousMixture and [hasPartStuff exactly 1 (Stuff and [hasState some StuffState] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some StuffState] and [inverseOf srInheresIn some DispersedPhase])] and [hasNrOfPhase some DatatypeRestriction(xsd:int minInclusive 2)])"
          ]
        },
        "description": "Colloid is defined as a subclass of HomogeneousMixture, characterized as a homogeneous mixture consisting of exactly one portion of 'dispersed phase' (stuff with a particular state inhering in the dispersed phase) microscopically and evenly dispersed throughout exactly one portion of 'continuous medium' (stuff with its own state inhering in the continuous phase). Colloids are distinguished from solutions by having more than one phase—while solutions have a single phase, colloids feature distinct continuous and dispersed phases. This composition is captured formally via equivalency axioms referencing specific part-whole and state relationships. Typical examples include milk, mayonnaise, agar, and fog. Colloids exhibit the Tyndall effect, making a light beam visible as it scatters off colloidal particles. Relationships between the dispersed and continuous substances are handled in the respective phase classes and are not inherent to the substances themselves.",
        "CQ": [
          {
            "axiom": "Colloid subClassOf HomogeneousMixture",
            "CQ": [
              "Is a Colloid classified under the broader group of HomogeneousMixture?",
              "Which specific mixtures are included as subclasses of HomogeneousMixture, such as Colloid?",
              "What are the parent categories that Colloid belongs to within the ontology?"
            ]
          },
          {
            "axiom": "Colloid equivalentClass (HomogeneousMixture and [hasPartStuff exactly 1 (Stuff and [hasState some StuffState] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some StuffState] and [inverseOf srInheresIn some DispersedPhase])] and [hasNrOfPhase some DatatypeRestriction(xsd:int minInclusive 2)])",
            "CQ": [
              "Is a Colloid equivalent to a homogeneous mixture that contains exactly one part of stuff in a continuous medium state and exactly one part of stuff in a dispersed phase state?",
              "Does every Colloid necessarily have at least two phases according to the number of phases property?",
              "Is a Colloid fully defined as the intersection of HomogeneousMixture and mixtures with specific parts characterized by their state and location in continuous medium and dispersed phase?"
            ]
          }
        ]
      },
      "ContinuousMedium": {
        "axiom": {
          "subClassOf": [
            "StuffRole"
          ],
          "disjointWith": [
            "DispersedPhase"
          ],
          "propertyRestrictions": [
            "[colloidFormingRelation some DispersedPhase]"
          ]
        },
        "description": "ContinuousMedium is defined as a subclass of StuffRole and is also known as dispersion medium. It is explicitly disjoint with DispersedPhase, ensuring that no individual can simultaneously belong to both classes. Members of ContinuousMedium are characterized by having a colloidFormingRelation to at least one DispersedPhase, reflecting their essential role in colloidal systems as the medium in which dispersed phases are distributed.",
        "CQ": [
          {
            "axiom": "ContinuousMedium subClassOf StuffRole",
            "CQ": [
              "Is ContinuousMedium classified under the broader grouping of StuffRole?",
              "Which entities are defined as more specific subclasses of StuffRole, such as ContinuousMedium?",
              "To which higher-order categories is ContinuousMedium formally assigned?"
            ]
          },
          {
            "axiom": "ContinuousMedium disjointWith DispersedPhase",
            "CQ": [
              "What logical separation is defined between ContinuousMedium and DispersedPhase within the ontology?",
              "Can an entity simultaneously be classified as both ContinuousMedium and DispersedPhase?",
              "Which classes are explicitly stated as mutually exclusive with DispersedPhase?"
            ]
          },
          {
            "axiom": "ContinuousMedium propertyRestrictions [colloidFormingRelation some DispersedPhase]",
            "CQ": [
              "Is it required that a ContinuousMedium participates in at least one colloidFormingRelation with a DispersedPhase?",
              "Must every instance of ContinuousMedium have a colloidFormingRelation to some DispersedPhase entity?",
              "Does the definition of ContinuousMedium necessitate a relationship via colloidFormingRelation with a DispersedPhase?"
            ]
          }
        ]
      },
      "Distribution": {
        "axiom": {
          "subClassOf": [
            "Quality"
          ],
          "propertyRestrictions": [
            "[hasQuale some (EvenDistribution or UnevenDistribution)]"
          ]
        },
        "description": "Distribution is defined as a subclass of Quality and is characterized by a property restriction specifying that it must have at least one quale that is either an EvenDistribution or an UnevenDistribution. This means that any instance of Distribution necessarily possesses a quality that can be further identified as representing either an even or uneven distribution pattern.",
        "CQ": [
          {
            "axiom": "Distribution subClassOf Quality",
            "CQ": [
              "Is Distribution classified under the broader group of Quality?",
              "What specific kinds of Quality include Distribution as a subclass?",
              "Which overarching categories encompass Distribution?"
            ]
          },
          {
            "axiom": "Distribution propertyRestrictions [hasQuale some (EvenDistribution or UnevenDistribution)]",
            "CQ": [
              "Does a Distribution necessarily require the presence of a quale that is either an EvenDistribution or an UnevenDistribution?",
              "Can a Distribution possess a quale that is not classified as EvenDistribution or UnevenDistribution?",
              "Is every quale associated with a Distribution restricted to the types EvenDistribution or UnevenDistribution?"
            ]
          }
        ]
      },
      "Foam": {
        "axiom": {
          "subClassOf": [
            "DispersionColloid"
          ],
          "equivalentClass": [
            "(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some DispersedPhase])] and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some ContinuousMedium])])"
          ]
        },
        "description": "Foam is defined as a subclass of DispersionColloid and is equivalent to a DispersionColloid composed of exactly one dispersed phase (gas) and exactly one continuous medium (liquid). Formally, a foam must have as part exactly one \"stuff\" that is a gas phase (dispersed) and one \"stuff\" that is a liquid phase (continuous medium). Examples include whipped cream and shaving cream. In summary, a foam is a type of colloidal system in which gas bubbles are dispersed in a continuous liquid medium.",
        "CQ": [
          {
            "axiom": "Foam subClassOf DispersionColloid",
            "CQ": [
              "Is Foam classified under the DispersionColloid category?",
              "Which types are more specific forms of DispersionColloid, such as Foam?",
              "What broader classes encompass Foam in the hierarchy?"
            ]
          },
          {
            "axiom": "Foam equivalentClass (DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some DispersedPhase])] and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some ContinuousMedium])])",
            "CQ": [
              "Does a Foam necessarily consist of exactly one part that is a Stuff with a gaseous state inhering in a DispersedPhase and exactly one part that is a Stuff with a liquid state inhering in a ContinuousMedium?",
              "Is Foam defined as the intersection of DispersionColloid and systems comprising precisely one gaseous phase as the dispersed part and one liquid phase as the continuous medium?",
              "Are all instances of Foam required to have both a single gas-phase dispersed component and a single liquid-phase continuous component as part stuffs?"
            ]
          }
        ]
      },
      "LiquidAerosol": {
        "axiom": {
          "subClassOf": [
            "DispersionColloid"
          ],
          "equivalentClass": [
            "(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some DispersedPhase])])"
          ]
        },
        "description": "LiquidAerosol is a subclass of DispersionColloid, formally defined as a system where the continuous medium is a gas and the dispersed phase is a liquid. It is equivalent to a DispersionColloid that contains exactly one part of a gaseous substance inhering in the continuous medium and exactly one part of a liquid substance inhering in the dispersed phase. Examples include fog, mist, and hair sprays.",
        "CQ": [
          {
            "axiom": "LiquidAerosol subClassOf DispersionColloid",
            "CQ": [
              "Is DispersionColloid a broader classification that encompasses LiquidAerosol?",
              "Which types of DispersionColloid specifically include LiquidAerosol as a subclass?",
              "Under what higher-level categories is LiquidAerosol formally organized?"
            ]
          },
          {
            "axiom": "LiquidAerosol equivalentClass (DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some DispersedPhase])])",
            "CQ": [
              "Is every LiquidAerosol necessarily composed of one part that is Stuff in a gaseous state inhering in a ContinuousMedium, and one part that is Stuff in a liquid state inhering in a DispersedPhase?",
              "Is LiquidAerosol logically defined as an intersection of DispersionColloid with those entities having exactly one gaseous part in a ContinuousMedium and exactly one liquid part in a DispersedPhase?",
              "Can a LiquidAerosol exist without meeting the precise conditions of having these two distinct parts each with the required state and inherence?"
            ]
          }
        ]
      },
      "SolidAerosol": {
        "axiom": {
          "subClassOf": [
            "DispersionColloid"
          ],
          "equivalentClass": [
            "(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])"
          ]
        },
        "description": "SolidAerosol is defined as a subclass of DispersionColloid, and is equivalent to a DispersionColloid that contains exactly one component of Stuff in the gas state, serving as the continuous medium, and exactly one component of Stuff in the solid state, serving as the dispersed phase. This class formalization describes systems where solid particles are dispersed throughout a gaseous medium. Typical examples include smoke, clouds with solid particulates, and other solid particulates suspended in gas.",
        "CQ": [
          {
            "axiom": "SolidAerosol subClassOf DispersionColloid",
            "CQ": [
              "Is SolidAerosol classified under the broader group of DispersionColloid?",
              "Which types fall under DispersionColloid, specifically including SolidAerosol?",
              "What parent classes does SolidAerosol belong to within the colloid hierarchy?"
            ]
          },
          {
            "axiom": "SolidAerosol equivalentClass (DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])",
            "CQ": [
              "Is SolidAerosol equivalent to entities that are DispersionColloid and contain exactly one part that is solid in a dispersed phase, and exactly one part that is gas in a continuous medium?",
              "Does every SolidAerosol necessarily have precisely one Gas component distributed in a continuous medium and one Solid component distributed in a dispersed phase?",
              "Is the class SolidAerosol fully captured by the intersection of DispersionColloid and those entities with exactly one solid part in a dispersed phase and exactly one gas part in a continuous medium?"
            ]
          }
        ]
      },
      "SolidSol": {
        "axiom": {
          "subClassOf": [
            "DispersionColloid"
          ],
          "equivalentClass": [
            "(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])"
          ]
        },
        "description": "SolidSol is defined as a subclass of DispersionColloid and is equivalent to a DispersionColloid that contains exactly one portion of solid-state stuff as the continuous medium and exactly one portion of solid-state stuff as the dispersed phase. In other words, both the dispersed phase and the continuous medium are solids. SolidSol colloids are exemplified by materials like cranberry glass, where solid particles are dispersed within a solid medium.",
        "CQ": [
          {
            "axiom": "SolidSol subClassOf DispersionColloid",
            "CQ": [
              "Does SolidSol fall within the classification of DispersionColloid?",
              "Which types are classified as subcategories under DispersionColloid, such as SolidSol?",
              "To what broader classes does SolidSol pertain within the ontology's structure?"
            ]
          },
          {
            "axiom": "SolidSol equivalentClass (DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])",
            "CQ": [
              "Does every SolidSol necessarily have exactly one part consisting of Stuff in a solid state inhering in a ContinuousMedium and exactly one part consisting of Stuff in a solid state inhering in a DispersedPhase?",
              "Is SolidSol equivalent to the intersection of DispersionColloid and those with exactly one solid Stuff part in the continuous medium and exactly one solid Stuff part in the dispersed phase?",
              "Can a SolidSol be fully defined as a DispersionColloid with two solid-state Stuff components, each uniquely inhering in either the continuous medium or the dispersed phase?"
            ]
          }
        ]
      },
      "HomogeneousMixture": {
        "axiom": {
          "subClassOf": [
            "MixedStuff"
          ],
          "propertyRestrictions": [
            "[hasGranuleType only (Atom or Ion or Molecule)]",
            "[hasStuffDistribution exactly 1 EvenDistribution]"
          ]
        },
        "description": "HomogeneousMixture is a subclass of MixedStuff, defined by two main characteristics: (1) it contains only atoms, ions, or molecules as its granule types, and (2) it requires exactly one EvenDistribution of its constituent substances, ensuring macroscopic sameness throughout. This means that the mixed substances are uniformly distributed in all parts of the matter. Unlike some stricter definitions that limit homogeneous mixtures to solutions, this class inclusively encompasses mixtures with uniform distribution (including some colloids), with further refinement distinguished in its subclasses.",
        "CQ": [
          {
            "axiom": "HomogeneousMixture subClassOf MixedStuff",
            "CQ": [
              "Is HomogeneousMixture categorized under the broader class of MixedStuff?",
              "Which specific types fall under MixedStuff, including HomogeneousMixture?",
              "What are the direct parent classes of HomogeneousMixture?"
            ]
          },
          {
            "axiom": "HomogeneousMixture propertyRestrictions [hasGranuleType only (Atom or Ion or Molecule)]",
            "CQ": [
              "Are all granule types present in a HomogeneousMixture necessarily restricted to atoms, ions, or molecules?",
              "Can a HomogeneousMixture have any granule type other than atom, ion, or molecule via the 'hasGranuleType' property?",
              "Does having a granule type outside of atom, ion, or molecule prevent a mixture from being classified as a HomogeneousMixture?"
            ]
          },
          {
            "axiom": "HomogeneousMixture propertyRestrictions [hasStuffDistribution exactly 1 EvenDistribution]",
            "CQ": [
              "Must every HomogeneousMixture have exactly one hasStuffDistribution property value that is an EvenDistribution?",
              "Is it required that a HomogeneousMixture cannot have more than one or fewer than one hasStuffDistribution, and that the distribution must be EvenDistribution?",
              "Does any instance of HomogeneousMixture necessarily possess a single hasStuffDistribution of type EvenDistribution?"
            ]
          }
        ]
      },
      "PhysicalEndurant": {
        "axiom": {
          "subClassOf": [
            "Endurant"
          ],
          "disjointWith": [
            "Role"
          ],
          "equivalentClass": [
            "om-1:Phenomenon"
          ]
        },
        "description": "PhysicalEndurant is a subclass of Endurant, representing entities that persist through time while maintaining their identity. It is explicitly disjoint with Role, meaning no instance can simultaneously be a PhysicalEndurant and a Role. Additionally, PhysicalEndurant is equivalent to om-1:Phenomenon, indicating that these two classes share the exact same set of individuals. This class is used to capture enduring phenomena in ontological modeling, distinct from roles that entities might play.",
        "CQ": [
          {
            "axiom": "PhysicalEndurant subClassOf Endurant",
            "CQ": [
              "Does PhysicalEndurant fall under the broader classification of Endurant?",
              "Which subclasses are recognized within Endurant, with PhysicalEndurant as an example?",
              "What higher-level categories is PhysicalEndurant associated with?"
            ]
          },
          {
            "axiom": "PhysicalEndurant disjointWith Role",
            "CQ": [
              "What ontological separation is established between PhysicalEndurant and Role?",
              "Is any entity allowed to be classified as both PhysicalEndurant and Role simultaneously?",
              "Which classes are defined as mutually exclusive with Role in the ontology?"
            ]
          },
          {
            "axiom": "PhysicalEndurant equivalentClass om-1:Phenomenon",
            "CQ": [
              "Is PhysicalEndurant identical to om-1:Phenomenon according to the ontology?",
              "Can every instance of PhysicalEndurant be classified as an om-1:Phenomenon and vice versa?",
              "Is the class PhysicalEndurant completely defined by and restricted to being om-1:Phenomenon?"
            ]
          }
        ]
      },
      "StructuredPureStuff": {
        "axiom": {
          "subClassOf": [
            "PureStuff"
          ],
          "disjointWith": [
            "UnstructuredPureStuff"
          ],
          "equivalentClass": [
            "(PureStuff and [hasGranuleType only Molecule] and [hasGranuleType exactly 1 Molecule])"
          ]
        },
        "description": "StructuredPureStuff is defined as a subclass of PureStuff and is disjoint with UnstructuredPureStuff, ensuring that no individual can be both StructuredPureStuff and UnstructuredPureStuff. Formally, StructuredPureStuff is equivalent to PureStuff that has granules exclusively of exactly one type of molecule. This class covers matter composed of a single molecular type (allowing for minor conformational variations or rare impurities), such as water (H₂O), table sugar, silica (SiO₂), or vitamin A. The synonym \"Compound\" applies here, reflecting the requirement that instances consist of precisely one molecular species, rather than just a single molecule.",
        "CQ": [
          {
            "axiom": "StructuredPureStuff subClassOf PureStuff",
            "CQ": [
              "Is StructuredPureStuff classified as a type of PureStuff?",
              "Which categories include StructuredPureStuff as a more specific member in relation to PureStuff?",
              "What broader classes encompass StructuredPureStuff, particularly regarding its relation to PureStuff?"
            ]
          },
          {
            "axiom": "StructuredPureStuff disjointWith UnstructuredPureStuff",
            "CQ": [
              "How does the ontology define the connection between StructuredPureStuff and UnstructuredPureStuff?",
              "Is there any instance classified under both StructuredPureStuff and UnstructuredPureStuff?",
              "Which classes are stated as mutually exclusive with UnstructuredPureStuff?"
            ]
          },
          {
            "axiom": "StructuredPureStuff equivalentClass (PureStuff and [hasGranuleType only Molecule] and [hasGranuleType exactly 1 Molecule])",
            "CQ": [
              "Is StructuredPureStuff equivalent to those PureStuff entities that have exactly one granule type, which must be a Molecule?",
              "Must every instance of StructuredPureStuff have only one granule type, and must that granule type be a Molecule?",
              "Is StructuredPureStuff defined as the intersection of PureStuff and entities restricted to exactly one granule type, which is solely a Molecule?"
            ]
          }
        ]
      },
      "Suspension": {
        "axiom": {
          "subClassOf": [
            "HeterogeneousMixture",
            "([hasGranuleType some Molecule] and [hasGranuleType some MultiMoleculeParticle])"
          ],
          "equivalentClass": [
            "(HeterogeneousMixture and [hasPartStuff some (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff some (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])"
          ]
        },
        "description": "Suspension is defined as a subclass of HeterogeneousMixture, further characterized by containing granules that are either Molecules or MultiMoleculeParticles. Formally, it is equivalent to those heterogeneous mixtures that contain both a liquid (which acts as the continuous medium) and solid particles (which form the dispersed phase) as their constituent parts. Suspensions are heterogeneous mixtures where larger solid particles (>1 micron) are dispersed in a liquid and tend to separate out naturally through processes such as sedimentation, creaming, flocculation, or coalescence unless stabilized or homogenized. Typical examples include tomato juice and mud.",
        "CQ": [
          {
            "axiom": "Suspension subClassOf HeterogeneousMixture",
            "CQ": [
              "Does Suspension fall within the broader group of HeterogeneousMixture?",
              "Which mixtures are classified as subtypes of HeterogeneousMixture, such as Suspension?",
              "What are the higher-level mixture categories that encompass Suspension?"
            ]
          },
          {
            "axiom": "Suspension subClassOf ([hasGranuleType some Molecule] and [hasGranuleType some MultiMoleculeParticle])",
            "CQ": [
              "Does Suspension necessarily possess both Molecule and MultiMoleculeParticle granule types?",
              "What types of granule composition are required for something to be classified as a Suspension?",
              "Which broader categories, defined by granule composition, include Suspension as a specific subcategory?"
            ]
          },
          {
            "axiom": "Suspension equivalentClass (HeterogeneousMixture and [hasPartStuff some (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff some (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])",
            "CQ": [
              "Is every Suspension necessarily a HeterogeneousMixture containing at least one part that is solid and inheres in a DispersedPhase, and at least one part that is liquid and inheres in a ContinuousMedium?",
              "Can Suspension be defined as the intersection of HeterogeneousMixture and mixtures that possess both a liquid phase in a continuous medium and a solid phase in a dispersed phase?",
              "Is Suspension equivalent to those mixtures that have both liquid and solid components, with each respective component inhering in ContinuousMedium and DispersedPhase?"
            ]
          }
        ]
      }
    },
    "properties": {
      "scatterPortion": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [
            "hasProperPart"
          ],
          "inverseOf": [
            "scatteredPortionOf"
          ]
        },
        "description": "The property \"scatterPortion\" represents a relationship between an original whole and a portion that was once a contiguous part of that whole but has become spatially or contextually separated over time. This property is a subproperty of \"hasProperPart\" and has \"scatteredPortionOf\" as its inverse. It has no explicitly defined domain or range restrictions. Typical examples include a slice of bread cut from a loaf or wine poured into a glass from a bottle. The property is useful for modeling portions that have been separated, with potential for further specialization according to whether the portion is associated with a container or not.",
        "CQ": [
          {
            "axiom": "scatterPortion domain None",
            "CQ": [
              "What entities can serve as the domain for the property 'scatterPortion'?",
              "Is it correct that 'scatterPortion' does not specify any domain?",
              "Can 'scatterPortion' relate to subjects other than those currently defined by the ontology?"
            ]
          },
          {
            "axiom": "scatterPortion range None",
            "CQ": [
              "Is it correct that the property 'scatterPortion' does not have a specified range?",
              "What entities can be the range of the property 'scatterPortion'?",
              "Can 'scatterPortion' be associated with objects of any type as its value?"
            ]
          },
          {
            "axiom": "scatterPortion subPropertyOf hasProperPart",
            "CQ": [
              "Is every use of the scatterPortion property implicitly covered by hasProperPart?",
              "Which properties are classified as subproperties of hasProperPart in the ontology?",
              "Does hasProperPart act as a superproperty for scatterPortion?"
            ]
          },
          {
            "axiom": "scatterPortion inverseOf scatteredPortionOf",
            "CQ": [
              "What is the ontological connection between the properties ‘scatterPortion’ and ‘scatteredPortionOf’?",
              "If entity A scatterPortion B, does ontology entail that B scatteredPortionOf A?",
              "Which property is defined as the inverse of ‘scatterPortion’ in the ontology?"
            ]
          }
        ]
      },
      "inheresIn": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "Role"
          ],
          "range": [
            "PhysicalEndurant"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"inheresIn\" has no specified characteristics or super-properties. Its domain is restricted to the class \"Role,\" and its range is restricted to \"PhysicalEndurant.\" This indicates that \"inheresIn\" relates a Role to a PhysicalEndurant entity. No inverse property is defined.",
        "CQ": [
          {
            "axiom": "inheresIn domain Role",
            "CQ": [
              "Can the property 'inheresIn' be asserted for subjects that are not instances of Role?",
              "Is there any instance of Role that cannot be the domain of the 'inheresIn' property?",
              "What types of entities are permitted as the domain for the 'inheresIn' relationship?"
            ]
          },
          {
            "axiom": "inheresIn range PhysicalEndurant",
            "CQ": [
              "Can the property 'inheresIn' relate to anything other than a PhysicalEndurant as its object?",
              "What types of entities are valid as the range for the property 'inheresIn'?",
              "Is it possible for a value of 'inheresIn' to not be a PhysicalEndurant?"
            ]
          }
        ]
      },
      "properContainedIn": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [
            "properPartOf"
          ],
          "inverseOf": []
        },
        "description": "The property \"properContainedIn\" has no explicitly defined characteristics, domain, or range restrictions. It is a sub-property of \"properPartOf,\" indicating that any relation expressed by \"properContainedIn\" also qualifies as a proper part relation. No inverse property is specified.",
        "CQ": [
          {
            "axiom": "properContainedIn domain None",
            "CQ": [
              "Is it correct that the property 'properContainedIn' does not specify a domain?",
              "What possible domains could be assigned to the property 'properContainedIn'?",
              "Can entities of any type be valid subjects for the property 'properContainedIn'?"
            ]
          },
          {
            "axiom": "properContainedIn range None",
            "CQ": [
              "Can the property 'properContainedIn' have any range, or is it intentionally left without a specific range?",
              "What types of entities could validly appear as the object of the 'properContainedIn' property?",
              "Is it correct that 'properContainedIn' is defined without any range restriction?"
            ]
          },
          {
            "axiom": "properContainedIn subPropertyOf properPartOf",
            "CQ": [
              "Is properPartOf a superproperty of properContainedIn?",
              "What are the subproperties encompassed by properPartOf?",
              "Which properties serve as superproperties for properContainedIn?"
            ]
          }
        ]
      },
      "hasNrOfPhase": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "Stuff"
          ],
          "range": [
            "xsd:integer"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"hasNrOfPhase\" links instances of the class \"Stuff\" to integer values representing a quantity. It has no defined characteristics, super-properties, or inverse properties. The property is used to specify the number of phases associated with a \"Stuff\" instance, with the value constrained to be an integer (xsd:integer).",
        "CQ": [
          {
            "axiom": "hasNrOfPhase domain Stuff",
            "CQ": [
              "Can the property 'hasNrOfPhase' be used with any subject other than 'Stuff'?",
              "Is it possible for an entity that is not classified as 'Stuff' to have a value for 'hasNrOfPhase'?",
              "What types of entities are permitted as the domain of the property 'hasNrOfPhase'?"
            ]
          },
          {
            "axiom": "hasNrOfPhase range xsd:integer",
            "CQ": [
              "Does the property 'hasNrOfPhase' accept a range other than xsd:integer?",
              "Is every value assigned via 'hasNrOfPhase' required to be an xsd:integer?",
              "What types of values can be used as the range for the property 'hasNrOfPhase'?"
            ]
          }
        ]
      },
      "srInheresIn": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "StuffRole"
          ],
          "range": [
            "Stuff"
          ],
          "subPropertyOf": [
            "inheresIn"
          ],
          "inverseOf": []
        },
        "description": "The property \"srInheresIn\" has no explicitly defined characteristics. Its domain is restricted to entities of type \"StuffRole\" and its range is \"Stuff,\" indicating it relates a \"StuffRole\" to a \"Stuff.\" It is a sub-property of \"inheresIn,\" inheriting its general semantics but providing more specific usage. No inverse property is defined.",
        "CQ": [
          {
            "axiom": "srInheresIn domain StuffRole",
            "CQ": [
              "Is there any entity other than StuffRole that can be the domain of the property srInheresIn?",
              "What can be the domain of the property srInheresIn?",
              "Is every subject of the property srInheresIn necessarily a StuffRole?"
            ]
          },
          {
            "axiom": "srInheresIn range Stuff",
            "CQ": [
              "Is anything other than Stuff allowed as the range of the property 'srInheresIn'?",
              "Can 'srInheresIn' relate to values that are not instances of Stuff?",
              "What types of entities can serve as the range for the property 'srInheresIn'?"
            ]
          },
          {
            "axiom": "srInheresIn subPropertyOf inheresIn",
            "CQ": [
              "Is every use of the srInheresIn property also captured by the inheresIn property?",
              "Which properties are subproperties of inheresIn within the ontology?",
              "Does inheresIn represent a broader relationship than srInheresIn?"
            ]
          }
        ]
      },
      "solutionFormingRelation": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "Solvent"
          ],
          "range": [
            "Solute"
          ],
          "subPropertyOf": [
            "stuffFormingRelation"
          ],
          "inverseOf": []
        },
        "description": "The property \"solutionFormingRelation\" relates a Solvent (domain) to a Solute (range) and is a sub-property of \"stuffFormingRelation.\" It has no additional property characteristics or specified inverse. This property is used to represent the chemical dissolution process, where one substance (the solute) is dissolved by another (the solvent).",
        "CQ": [
          {
            "axiom": "solutionFormingRelation domain Solvent",
            "CQ": [
              "Can the property 'solutionFormingRelation' have a subject that is not a Solvent?",
              "What entities are permitted as the domain for the property 'solutionFormingRelation'?",
              "Is it possible for entities other than Solvent to participate as the subject in the 'solutionFormingRelation' property?"
            ]
          },
          {
            "axiom": "solutionFormingRelation range Solute",
            "CQ": [
              "Does the property 'solutionFormingRelation' relate to anything other than a Solute as its object?",
              "Is every entity used as the object in 'solutionFormingRelation' required to be a Solute?",
              "What kinds of entities can appear as the range of the 'solutionFormingRelation' property?"
            ]
          },
          {
            "axiom": "solutionFormingRelation subPropertyOf stuffFormingRelation",
            "CQ": [
              "Is solutionFormingRelation considered a specific type of stuffFormingRelation within the ontology?",
              "Which properties are subproperties of stuffFormingRelation, and does solutionFormingRelation appear among them?",
              "What superproperties are associated with solutionFormingRelation?"
            ]
          }
        ]
      },
      "colloidFormingRelation": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "ContinuousMedium"
          ],
          "range": [
            "DispersedPhase"
          ],
          "subPropertyOf": [
            "stuffFormingRelation"
          ],
          "inverseOf": []
        },
        "description": "The property \"colloidFormingRelation\" relates instances of ContinuousMedium to instances of DispersedPhase, representing the association found in colloids. It is a sub-property of \"stuffFormingRelation\" and has no specified characteristics or inverse property. According to its description, this property addresses phenomena unique to colloids, such as surface tension, and does not necessarily imply a chemical reaction, distinguishing it from solution-related relations.",
        "CQ": [
          {
            "axiom": "colloidFormingRelation domain ContinuousMedium",
            "CQ": [
              "Is it possible for the property 'colloidFormingRelation' to have a subject that is not a ContinuousMedium?",
              "What types of entities can appear as the domain for the property 'colloidFormingRelation'?",
              "Are all subjects of 'colloidFormingRelation' instances of ContinuousMedium?"
            ]
          },
          {
            "axiom": "colloidFormingRelation range DispersedPhase",
            "CQ": [
              "Is every value assigned to 'colloidFormingRelation' necessarily a DispersedPhase?",
              "Can entities other than DispersedPhase be associated as the range of 'colloidFormingRelation'?",
              "What possible types of entities can serve as the range for the property 'colloidFormingRelation'?"
            ]
          },
          {
            "axiom": "colloidFormingRelation subPropertyOf stuffFormingRelation",
            "CQ": [
              "Is colloidFormingRelation considered a specific kind of stuffFormingRelation within the ontology?",
              "What properties are subproperties of stuffFormingRelation?",
              "Which superproperties does colloidFormingRelation have?"
            ]
          }
        ]
      },
      "instantiation": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "AmountOfStuff"
          ],
          "range": [
            "Stuff"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"instantiation\" is an object property with domain \"AmountOfStuff\" and range \"Stuff\", indicating that it relates particular amounts of matter to their corresponding type of stuff. This property is intentionally typed for exclusive use in scenarios where first- and second-order entities coexist in the ontology's TBox. For example, it connects a specific amount, such as \"1kg of gold\", to the general stuff \"Gold.\" It has no explicitly defined characteristics, super-properties, or inverse properties.",
        "CQ": [
          {
            "axiom": "instantiation domain AmountOfStuff",
            "CQ": [
              "Is the domain of the property 'instantiation' restricted solely to 'AmountOfStuff'?",
              "Are there any entities of type 'AmountOfStuff' that cannot be associated with the 'instantiation' property?",
              "What are the possible domains for the property 'instantiation'?"
            ]
          },
          {
            "axiom": "instantiation range Stuff",
            "CQ": [
              "Is it possible for the property 'instantiation' to have a range other than Stuff?",
              "Are all values assigned to the property 'instantiation' necessarily of type Stuff?",
              "What entities can appear as the range for the property 'instantiation'?"
            ]
          }
        ]
      },
      "hasDataValue": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "Abstract"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"hasDataValue\" relates instances of the class \"Abstract\" to data values. Although its intended conceptual range is any data type, no range is currently specified due to technical limitations in expressing unrestricted datatypes. The property has no explicitly defined characteristics, super-properties, or inverse properties.",
        "CQ": [
          {
            "axiom": "hasDataValue domain Abstract",
            "CQ": [
              "Is there any class other than Abstract that can be the subject of the 'hasDataValue' property?",
              "Can 'hasDataValue' be used with any entity that is not an instance of Abstract?",
              "What classes are permitted as the domain of the 'hasDataValue' property?"
            ]
          },
          {
            "axiom": "hasDataValue range None",
            "CQ": [
              "Is it correct that the property 'hasDataValue' does not have a specified range?",
              "What can be the range of the property 'hasDataValue'?",
              "Are any data types or classes explicitly associated with the range of 'hasDataValue'?"
            ]
          }
        ]
      },
      "hasPart": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [],
          "inverseOf": [
            "partOf"
          ]
        },
        "description": "The property \"hasPart\" does not have explicitly defined characteristics, domain, or range restrictions in its current axiom. It is specified as the inverse of the property \"partOf\" and has no super-properties. According to the existing description, \"hasPart\" may overlap with related notions like \"hasComponent\" and \"composedOf,\" with subtleties in the essentiality or accidental nature of parts in different contexts. Domain and range constraints, where relevant, are managed in the inverse property \"partOf.\" This property is intended for modeling part-whole relationships.",
        "CQ": [
          {
            "axiom": "hasPart domain None",
            "CQ": [
              "Can the property 'hasPart' be used with any subject, given that its domain is undefined?",
              "What kinds of entities are permitted as subjects for the 'hasPart' property?",
              "Is it accurate that the property 'hasPart' does not specify any domain?"
            ]
          },
          {
            "axiom": "hasPart range None",
            "CQ": [
              "What can be the range of the property 'hasPart'?",
              "Is it correct that the property 'hasPart' does not have a specified range?",
              "Can any type of value appear as the object of 'hasPart'?"
            ]
          },
          {
            "axiom": "hasPart inverseOf partOf",
            "CQ": [
              "How are the object properties ‘hasPart’ and ‘partOf’ connected as inverse properties within the ontology?",
              "If entity A ‘hasPart’ entity B, does the ontology state that B is ‘partOf’ A?",
              "Which property in the ontology is defined as the inverse of ‘hasPart’?"
            ]
          }
        ]
      },
      "hasScatterStuffPart": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [
            "hasProperPart"
          ],
          "inverseOf": [
            "scatteredStuffPartOf"
          ]
        },
        "description": "The property \"hasScatterStuffPart\" is defined as a sub-property of \"hasProperPart\" and has \"scatteredStuffPartOf\" as its inverse property. There are no explicitly specified characteristics, domain, or range restrictions for this property. It is intended to associate an entity with a scattered or distributed part of itself, aligning it with the mereological concept of proper parts but specifically for parts that are scattered.",
        "CQ": [
          {
            "axiom": "hasScatterStuffPart domain None",
            "CQ": [
              "What can be the domain of the property 'hasScatterStuffPart'?",
              "Is it accurate that 'hasScatterStuffPart' has no domain specified?",
              "Can any entity be the subject when using the property 'hasScatterStuffPart'?"
            ]
          },
          {
            "axiom": "hasScatterStuffPart range None",
            "CQ": [
              "Does the property 'hasScatterStuffPart' have any specified range?",
              "Is it correct that 'hasScatterStuffPart' does not restrict the type of object it can be associated with?",
              "What kinds of entities can appear as the object in statements using 'hasScatterStuffPart'?"
            ]
          },
          {
            "axiom": "hasScatterStuffPart subPropertyOf hasProperPart",
            "CQ": [
              "Is every use of the hasScatterStuffPart property also a use of hasProperPart?",
              "Which properties are defined as subproperties of hasProperPart, specifically including hasScatterStuffPart?",
              "Does hasProperPart act as a superproperty to hasScatterStuffPart within the ontology?"
            ]
          },
          {
            "axiom": "hasScatterStuffPart inverseOf scatteredStuffPartOf",
            "CQ": [
              "How are the properties ‘hasScatterStuffPart’ and ‘scatteredStuffPartOf’ connected in the ontology?",
              "If an entity X hasScatterStuffPart Y, does it follow that Y scatteredStuffPartOf X?",
              "Which property is considered the inverse of ‘hasScatterStuffPart’?"
            ]
          }
        ]
      },
      "hasQuale": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "Quality"
          ],
          "range": [
            "Abstract"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"hasQuale\" has no explicitly defined characteristics or super-properties. Its domain is restricted to instances of \"Quality\" and its range to instances of \"Abstract.\" This property is intended to link a quality to its associated abstract value or quale. No inverse property is specified.",
        "CQ": [
          {
            "axiom": "hasQuale domain Quality",
            "CQ": [
              "Can entities other than Quality appear as the subject of the property 'hasQuale'?",
              "What types of individuals can serve as the domain for the property 'hasQuale'?",
              "Is 'hasQuale' ever used where the subject is not a member of Quality?"
            ]
          },
          {
            "axiom": "hasQuale range Abstract",
            "CQ": [
              "Is there any class other than Abstract that can be the range of the property 'hasQuale'?",
              "Is every value linked with 'hasQuale' necessarily an instance of Abstract?",
              "What kinds of entities can serve as the value for the property 'hasQuale'?"
            ]
          }
        ]
      }
    }
  },
  "home": {
    "classes": {
      "MoodSummary": {
        "axiom": {
          "subClassOf": [
            "DaySummary"
          ],
          "propertyRestrictions": [
            "[stressLevel exactly 1]",
            "[physicalHygiene some owl:Thing]",
            "[numberOfSocialInteractions exactly 1 xsd:int]",
            "[numberOfSocialInteractions only xsd:int]",
            "[stressLevel only rdfs:Literal]",
            "[involvementInDiscussion some owl:Thing]"
          ]
        },
        "description": "MoodSummary is defined as a subclass of DaySummary, representing a summarized account of mood-related attributes for a specific day. Each instance of MoodSummary must have exactly one value for stressLevel, which is restricted to literals. It must also record exactly one numeric (integer) value for numberOfSocialInteractions, with the property only admitting integer values. Furthermore, an individual MoodSummary must be associated with at least one instance of physicalHygiene and involvementInDiscussion. These axioms ensure precise recording of stress, social activity, personal hygiene, and participatory engagement in daily mood summaries.",
        "CQ": [
          {
            "axiom": "MoodSummary subClassOf DaySummary",
            "CQ": [
              "Is MoodSummary classified as a specialized form of DaySummary?",
              "Which subcategories of DaySummary incorporate MoodSummary?",
              "What broader categories encompass MoodSummary within the ontology?"
            ]
          },
          {
            "axiom": "MoodSummary propertyRestrictions [stressLevel exactly 1]",
            "CQ": [
              "Is it required that each MoodSummary instance is associated with exactly one stressLevel?",
              "Can a MoodSummary have more or fewer than one value for the property stressLevel?",
              "Does the ontology restrict MoodSummary to have a single, unique stressLevel per instance?"
            ]
          },
          {
            "axiom": "MoodSummary propertyRestrictions [physicalHygiene some owl:Thing]",
            "CQ": [
              "Is it required that every MoodSummary is associated with at least one value for physicalHygiene?",
              "Can a MoodSummary exist without specifying any physicalHygiene?",
              "Does the MoodSummary class necessarily entail that there must be some physicalHygiene described for its instances?"
            ]
          },
          {
            "axiom": "MoodSummary propertyRestrictions [numberOfSocialInteractions exactly 1 xsd:int]",
            "CQ": [
              "Is a MoodSummary required to have exactly one numberOfSocialInteractions property value?",
              "Can a MoodSummary ever be associated with more or fewer than one value for numberOfSocialInteractions?",
              "Does the ontology restrict MoodSummary instances to link to precisely one integer via numberOfSocialInteractions?"
            ]
          },
          {
            "axiom": "MoodSummary propertyRestrictions [numberOfSocialInteractions only xsd:int]",
            "CQ": [
              "Does MoodSummary allow only integer values for the property numberOfSocialInteractions?",
              "Is it required that every numberOfSocialInteractions value associated with MoodSummary must be an integer?",
              "Can MoodSummary have numberOfSocialInteractions in any datatype other than integer?"
            ]
          },
          {
            "axiom": "MoodSummary propertyRestrictions [stressLevel only rdfs:Literal]",
            "CQ": [
              "Are all values of the 'stressLevel' property for MoodSummary instances required to be literals?",
              "Can a MoodSummary have a 'stressLevel' property pointing to anything other than an rdfs:Literal?",
              "Is it true that MoodSummary restricts the range of 'stressLevel' exclusively to rdfs:Literal values?"
            ]
          },
          {
            "axiom": "MoodSummary propertyRestrictions [involvementInDiscussion some owl:Thing]",
            "CQ": [
              "Is it required for every MoodSummary to have at least one involvementInDiscussion relationship with some entity?",
              "Can a MoodSummary exist without being linked to any involvementInDiscussion?",
              "Does MoodSummary necessarily involve participation in at least one discussion with any kind of entity?"
            ]
          }
        ]
      },
      "EatingSummary": {
        "axiom": {
          "subClassOf": [
            "ADLSummary"
          ],
          "propertyRestrictions": [
            "[eatingLocation only event:Place]",
            "[eatingLocation exactly 1 event:Place]",
            "[eatingDuration exactly 1 time:DurationDescription]",
            "[eatingDuration only time:DurationDescription]"
          ]
        },
        "description": "EatingSummary is defined as a subclass of ADLSummary, specializing in summarizing eating activities. Each EatingSummary must be associated with exactly one eatingLocation, which must be an instance of event:Place, and exactly one eatingDuration, which must be an instance of time:DurationDescription. This formalization ensures that every EatingSummary unambiguously specifies a single location and duration for the eating event.",
        "CQ": [
          {
            "axiom": "EatingSummary subClassOf ADLSummary",
            "CQ": [
              "Is EatingSummary classified as a more specific type within ADLSummary?",
              "Which summaries fall under the category of ADLSummary, including EatingSummary?",
              "To what higher-level summary categories does EatingSummary belong?"
            ]
          },
          {
            "axiom": "EatingSummary propertyRestrictions [eatingLocation only event:Place]",
            "CQ": [
              "Is an EatingSummary restricted to having eatingLocation only at places categorized as event:Place?",
              "Can an EatingSummary reference any eatingLocation that is not an event:Place?",
              "Must every eatingLocation described in an EatingSummary fall exclusively under event:Place?"
            ]
          },
          {
            "axiom": "EatingSummary propertyRestrictions [eatingLocation exactly 1 event:Place]",
            "CQ": [
              "Is it mandatory for every EatingSummary to reference exactly one eatingLocation of type event:Place?",
              "Can an EatingSummary ever refer to more than one or fewer than one eatingLocation?",
              "Does each EatingSummary necessarily associate with a single event:Place as its eating location?"
            ]
          },
          {
            "axiom": "EatingSummary propertyRestrictions [eatingDuration exactly 1 time:DurationDescription]",
            "CQ": [
              "Is it required that every EatingSummary specifies exactly one value for the property eatingDuration?",
              "Can there be more than one eatingDuration associated with an instance of EatingSummary?",
              "Does the EatingSummary class allow for missing or multiple eatingDuration descriptions, or must there be precisely one?"
            ]
          },
          {
            "axiom": "EatingSummary propertyRestrictions [eatingDuration only time:DurationDescription]",
            "CQ": [
              "Is every eatingDuration associated with an EatingSummary instance required to be of type time:DurationDescription?",
              "Does EatingSummary restrict the eatingDuration property exclusively to values classified as time:DurationDescription?",
              "Can an EatingSummary ever have an eatingDuration that is not a time:DurationDescription?"
            ]
          }
        ]
      }
    },
    "properties": {
      "exerciseStartTime": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [
            "time:hasBeginning"
          ],
          "inverseOf": []
        },
        "description": "The property \"exerciseStartTime\" does not have explicitly defined characteristics, domain, or range restrictions. It is specified as a sub-property of \"time:hasBeginning,\" indicating that it denotes the starting time of an exercise event within the broader context of temporal beginnings. No inverse property is defined.",
        "CQ": [
          {
            "axiom": "exerciseStartTime domain None",
            "CQ": [
              "What are the possible domains for the property 'exerciseStartTime'?",
              "Is it correct that 'exerciseStartTime' does not have a specified domain?",
              "Can 'exerciseStartTime' be associated with subjects of any type?"
            ]
          },
          {
            "axiom": "exerciseStartTime range None",
            "CQ": [
              "Is there any type of value that should serve as the range for the property 'exerciseStartTime'?",
              "What entities can appear as the object of the 'exerciseStartTime' property?",
              "Is it correct that the property 'exerciseStartTime' has no specified range?"
            ]
          },
          {
            "axiom": "exerciseStartTime subPropertyOf time:hasBeginning",
            "CQ": [
              "Is exerciseStartTime considered a more specific form of time:hasBeginning?",
              "Which properties are classified as subproperties of time:hasBeginning?",
              "Does exerciseStartTime always entail the use of time:hasBeginning when describing an event?"
            ]
          }
        ]
      },
      "eatingDuration": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "EatingSummary"
          ],
          "range": [
            "None"
          ],
          "subPropertyOf": [
            "time:hasDurationDescription"
          ],
          "inverseOf": []
        },
        "description": "The property \"eatingDuration\" has no explicitly defined characteristics or inverse property. Its domain is restricted to the class \"EatingSummary,\" indicating it describes aspects related to eating events. The property is a sub-property of \"time:hasDurationDescription,\" suggesting it inherits the semantics of specifying a duration. No explicit range is defined, leaving the range unspecific in this axiom.",
        "CQ": [
          {
            "axiom": "eatingDuration domain EatingSummary",
            "CQ": [
              "Is there any class other than EatingSummary that can be the domain of 'eatingDuration'?",
              "Can the property 'eatingDuration' be asserted for any entity that is not an EatingSummary?",
              "What are the possible classes that 'eatingDuration' can have as its subject?"
            ]
          },
          {
            "axiom": "eatingDuration range None",
            "CQ": [
              "What types of values can serve as the range of 'eatingDuration'?",
              "Is it correct that the property 'eatingDuration' has no range specified?",
              "Can 'eatingDuration' relate to values other than particular types, given its undefined range?"
            ]
          },
          {
            "axiom": "eatingDuration subPropertyOf time:hasDurationDescription",
            "CQ": [
              "Does using the eatingDuration property always imply the usage of time:hasDurationDescription?",
              "Which subproperties fall under time:hasDurationDescription according to the ontology?",
              "What superproperties are assigned to eatingDuration within the property hierarchy?"
            ]
          }
        ]
      }
    }
  }
}