{
  "AfricanWildlifeOntology1": {
    "classes": {
      "tasty-plant": {
        "axiom": {
          "subClassOf": [
            "plant",
            "([eaten-by some carnivore] and [eaten-by some herbivore])"
          ]
        },
        "description": "tasty-plant is defined as a subclass of plant whose members are characterized by being consumed by at least one herbivore and at least one carnivore. This class formalizes the notion of plants that are eaten by both trophic groups, as indicated by the axiom ([eaten-by some carnivore] and [eaten-by some herbivore]). Consequently, any instance of tasty-plant must be a plant that serves as food for both a carnivore and a herbivore.",
        "CQ": [
          {
            "axiom": "tasty-plant subClassOf plant",
            "CQ": [
              "Is tasty-plant classified as a kind of plant?",
              "Which subclasses fall under plant, and does this include tasty-plant?",
              "What broader categories encompass tasty-plant within the ontology?"
            ]
          },
          {
            "axiom": "tasty-plant subClassOf ([eaten-by some carnivore] and [eaten-by some herbivore])",
            "CQ": [
              "Which kinds of organisms eat tasty-plants, specifically distinguishing between carnivores and herbivores?",
              "Is tasty-plant classified under things that are consumed by both carnivores and herbivores?",
              "What plant subclasses are eaten by both members of carnivorous and herbivorous species?"
            ]
          }
        ]
      },
      "branch": {
        "axiom": {
          "subClassOf": [
            "PlantParts"
          ],
          "propertyRestrictions": [
            "[is-part-of some tree]"
          ]
        },
        "description": "branch is defined as a subclass of PlantParts and must be part of some tree, according to the property restriction. The class is described as representing branches, which are components of trees. This formalization ensures that any individual classified as a branch is recognized as a type of plant part specifically serving as a structural component of a tree.",
        "CQ": [
          {
            "axiom": "branch subClassOf PlantParts",
            "CQ": [
              "What entities are classified as more specific types of PlantParts, such as branch?",
              "To which higher-level categories does branch belong within the ontology?",
              "Is PlantParts a broader class that includes branch as a subclass?"
            ]
          },
          {
            "axiom": "branch propertyRestrictions [is-part-of some tree]",
            "CQ": [
              "Is it necessary for a branch to have the property 'is-part-of' with at least one tree?",
              "Does every branch participate in the 'is-part-of' relationship with a tree in the ontology?",
              "Must a branch always be included as part of a tree according to the property restriction?"
            ]
          }
        ]
      },
      "Warthog": {
        "axiom": {
          "subClassOf": [
            "animal",
            "([eats some FruitingBody] and [eats some Grass] and [eats some Root] and [eats some animal])"
          ]
        },
        "description": "Warthog is a subclass of animal, characterized by an omnivorous diet. Members of this class eat fruiting bodies (such as mushrooms), grass, roots, and other animals. This formalization reflects the warthogâ€™s dietary flexibility as described in biological sources.",
        "CQ": [
          {
            "axiom": "Warthog subClassOf animal",
            "CQ": [
              "Does Warthog fall under the classification of animal?",
              "Which entities are categorized as more specific instances within animal, such as Warthog?",
              "To which broader classes is Warthog hierarchically related?"
            ]
          },
          {
            "axiom": "Warthog subClassOf ([eats some FruitingBody] and [eats some Grass] and [eats some Root] and [eats some animal])",
            "CQ": [
              "Which kinds of food items are necessary to classify an animal as a Warthog in the ontology?",
              "Is an individual that eats fruiting bodies, grass, roots, and animals a type of Warthog?",
              "What dietary requirements define the Warthog subclass within the AfricanWildlifeOntology?"
            ]
          }
        ]
      },
      "herbivore": {
        "axiom": {
          "subClassOf": [
            "animal"
          ],
          "equivalentClass": [
            "([eats only plant] or [eats only [is-part-of some plant]])"
          ]
        },
        "description": "herbivore is defined as a subclass of animal, and is formally equivalent to those animals that eat only plants or only things that are part of plants. This class captures all animals whose diet consists exclusively of plants or plant parts, and explicitly excludes animals that consume any non-plant matter. This definition aligns with the description that herbivores are exactly those animals that eat only plants or parts of plants.",
        "CQ": [
          {
            "axiom": "herbivore subClassOf animal",
            "CQ": [
              "Is animal a direct superclass of herbivore?",
              "Which subclasses fall under animal, such as herbivore?",
              "What are the parent classes of herbivore within the ontology?"
            ]
          },
          {
            "axiom": "herbivore equivalentClass ([eats only plant] or [eats only [is-part-of some plant]])",
            "CQ": [
              "Is every herbivore in the ontology necessarily restricted to eating only plants or only entities that are part of a plant?",
              "Is a herbivore defined as a class whose diet consists exclusively of either plants or things that include some part of a plant?",
              "Is herbivore logically equivalent to the union of animals that eat only plants and those that eat only things with at least one part being a plant?"
            ]
          }
        ]
      }
    },
    "properties": {
      "eats": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "None"
          ],
          "range": [
            "(animal or plant or [is-part-of some animal] or [is-part-of some plant])"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"eats\" does not have explicitly defined characteristics, domain restrictions, super-properties, or an inverse property. Its range is restricted to individuals classified as animals, plants, or entities that are part of an animal or plant, indicating its use for relating an entity to what it consumes within these biological groups.",
        "CQ": [
          {
            "axiom": "eats domain None",
            "CQ": [
              "What is the domain of the property 'eats'?",
              "Can 'eats' be used with subjects from any class or entity?",
              "Is it accurate that the property 'eats' has no defined domain?"
            ]
          },
          {
            "axiom": "eats range (animal or plant or [is-part-of some animal] or [is-part-of some plant])",
            "CQ": [
              "Can the property 'eats' relate to objects that are not an animal, plant, or a part of either within the AfricanWildlifeOntology1 domain?",
              "Is there any entity within AfricanWildlifeOntology1 that is not allowed as the range of the property 'eats'?",
              "What types of entities can serve as the range for the 'eats' property in AfricanWildlifeOntology1?"
            ]
          }
        ]
      }
    }
  },
  "event": {
    "classes": {
      "Activity": {
        "axiom": {
          "subClassOf": [
            "Event"
          ],
          "propertyRestrictions": [
            "[hasAgent exactly 1 Person]",
            "[hasAgent some Person]"
          ]
        },
        "description": "Activity is defined as a subclass of Event, representing occurrences or happenings that necessarily involve agents. Every instance of Activity must have at least one agent that is a Person and, in particular, must have exactly one Person as an agent. This ensures that any Activity is specifically characterized by the participation of one and only one Person as its agent.",
        "CQ": [
          {
            "axiom": "Activity subClassOf Event",
            "CQ": [
              "Is every Activity classified as a kind of Event?",
              "What broader groups is Activity a subset of?",
              "Which specific types fall under the general category of Event, such as Activity?"
            ]
          },
          {
            "axiom": "Activity propertyRestrictions [hasAgent exactly 1 Person]",
            "CQ": [
              "Is every Activity required to have exactly one Person as its agent?",
              "Can an Activity involve more than one Person as its agent?",
              "Is it possible for an Activity to exist without any Person assigned as its agent?"
            ]
          },
          {
            "axiom": "Activity propertyRestrictions [hasAgent some Person]",
            "CQ": [
              "Must every Activity involve at least one Person as an agent?",
              "Is it required for an Activity to have the property 'hasAgent' assigned to a Person?",
              "Does the existence of an Activity necessarily imply the involvement of some Person through the 'hasAgent' relationship?"
            ]
          }
        ]
      },
      "AlarmClockRinging": {
        "axiom": {
          "subClassOf": [
            "Ringing"
          ],
          "propertyRestrictions": [
            "[hasAgent some AlarmClock]"
          ]
        },
        "description": "AlarmClockRinging is defined as a subclass of Ringing, representing a specific ringing event. Its defining characteristic is that the agent responsible for the ringing must be an instance of AlarmClock. This ensures that any event classified as AlarmClockRinging involves an alarm clock as the source of the ringing.",
        "CQ": [
          {
            "axiom": "AlarmClockRinging subClassOf Ringing",
            "CQ": [
              "Is AlarmClockRinging classified under the broader category of Ringing?",
              "Which specific types fall under Ringing, including AlarmClockRinging?",
              "In which higher-level categories can AlarmClockRinging be placed?"
            ]
          },
          {
            "axiom": "AlarmClockRinging propertyRestrictions [hasAgent some AlarmClock]",
            "CQ": [
              "Must every instance of AlarmClockRinging involve an agent that is an AlarmClock?",
              "Is it required that AlarmClockRinging occurs with at least one AlarmClock as its agent?",
              "Can there be an occurrence of AlarmClockRinging without the involvement of an AlarmClock as its agent?"
            ]
          }
        ]
      },
      "PhysiologicalMeasurement": {
        "axiom": {
          "subClassOf": [
            "Measurement"
          ],
          "propertyRestrictions": [
            "[refersTo only Patient]"
          ]
        },
        "description": "PhysiologicalMeasurement is defined as a subclass of Measurement, representing a specialized form of measurement that pertains exclusively to patients. Any instance of PhysiologicalMeasurement must refer only to a patient, ensuring that this class captures measurements that specifically describe physiological characteristics or parameters observed in patient individuals.",
        "CQ": [
          {
            "axiom": "PhysiologicalMeasurement subClassOf Measurement",
            "CQ": [
              "Is PhysiologicalMeasurement classified under Measurement in the ontology?",
              "Which measurement types are considered more specific forms of Measurement, such as PhysiologicalMeasurement?",
              "What encompassing categories does PhysiologicalMeasurement fall within?"
            ]
          },
          {
            "axiom": "PhysiologicalMeasurement propertyRestrictions [refersTo only Patient]",
            "CQ": [
              "Is every instance of PhysiologicalMeasurement required to refer exclusively to entities classified as Patient?",
              "Can a PhysiologicalMeasurement ever refer to an entity that is not a Patient?",
              "Does the property 'refersTo' on PhysiologicalMeasurement restrict its range to only those individuals categorized as Patient?"
            ]
          }
        ]
      },
      "DoorOpen": {
        "axiom": {
          "subClassOf": [
            "Open"
          ],
          "propertyRestrictions": [
            "[hasAgent some Door]"
          ]
        },
        "description": "DoorOpen is defined as a subclass of Open, representing a specific type of open state. It is further characterized by the property restriction that it must have some agent which is a Door. This means that instances of DoorOpen denote situations or events where the entity being open is specifically a Door.",
        "CQ": [
          {
            "axiom": "DoorOpen subClassOf Open",
            "CQ": [
              "Is DoorOpen classified as a more specific instance under the category of Open?",
              "Which subclasses constitute the set of Open, including DoorOpen?",
              "What broader categories does DoorOpen fall under within the hierarchy?"
            ]
          },
          {
            "axiom": "DoorOpen propertyRestrictions [hasAgent some Door]",
            "CQ": [
              "Must every instance of DoorOpen involve at least one Door as the agent?",
              "Is it possible for DoorOpen to occur without a Door being the agent?",
              "Does DoorOpen require that the property 'hasAgent' be associated with a Door?"
            ]
          }
        ]
      },
      "SkinTemperature": {
        "axiom": {
          "subClassOf": [
            "PhysiologicalMeasurement"
          ],
          "propertyRestrictions": [
            "[hasTemperature some rdfs:Literal]",
            "[hasTemperature exactly 1]"
          ]
        },
        "description": "SkinTemperature is defined as a subclass of PhysiologicalMeasurement, representing a specific type of physiological measurement. Members of this class are constrained by the property restriction that they must have exactly one hasTemperature property value, which must be a literal (e.g., a numerical value). This formalization ensures that any instance of SkinTemperature uniquely and quantifiably indicates the temperature measured on the skin.",
        "CQ": [
          {
            "axiom": "SkinTemperature subClassOf PhysiologicalMeasurement",
            "CQ": [
              "Does SkinTemperature fall under the category of PhysiologicalMeasurement?",
              "What measurements are considered subclasses of PhysiologicalMeasurement, including SkinTemperature?",
              "Which broader classes encompass SkinTemperature?"
            ]
          },
          {
            "axiom": "SkinTemperature propertyRestrictions [hasTemperature some rdfs:Literal]",
            "CQ": [
              "Is it necessary for SkinTemperature to have the property hasTemperature with a value of type Literal?",
              "Does every instance of SkinTemperature possess at least one value for the hasTemperature property?",
              "Can SkinTemperature exist without being linked to a value via the hasTemperature property?"
            ]
          },
          {
            "axiom": "SkinTemperature propertyRestrictions [hasTemperature exactly 1]",
            "CQ": [
              "Is it necessary for every SkinTemperature instance to have exactly one associated hasTemperature value?",
              "Can a SkinTemperature be characterized by more or less than one hasTemperature property?",
              "Does the ontology allow SkinTemperature individuals to have more than one or no hasTemperature assignments?"
            ]
          }
        ]
      },
      "KettleOff": {
        "axiom": {
          "subClassOf": [
            "Off"
          ],
          "propertyRestrictions": [
            "[hasAgent some Kettle]"
          ]
        },
        "description": "KettleOff is defined as a subclass of Off, representing situations or states where something is powered down or inactive. It is characterized by the additional property that its agent must be some instance of Kettle, indicating that only kettles can be agents in this context. This class ensures that any instance of KettleOff specifically refers to a kettle that is in the \"off\" state.",
        "CQ": [
          {
            "axiom": "KettleOff subClassOf Off",
            "CQ": [
              "Is KettleOff categorized as a more specific form of Off?",
              "Which Off states include KettleOff as a subclass?",
              "To which parent classes does KettleOff belong within the system?"
            ]
          },
          {
            "axiom": "KettleOff propertyRestrictions [hasAgent some Kettle]",
            "CQ": [
              "Must every instance of KettleOff involve at least one Kettle as the agent?",
              "Is it possible for KettleOff to occur without any Kettle participating as the agent?",
              "Does the occurrence of KettleOff require the presence of a Kettle playing the agent role?"
            ]
          }
        ]
      },
      "NoiseLevel": {
        "axiom": {
          "subClassOf": [
            "AmbientMeasurement"
          ],
          "propertyRestrictions": [
            "[hasNoiseLevel exactly 1]",
            "[hasNoiseLevel some rdfs:Literal]"
          ]
        },
        "description": "NoiseLevel is defined as a subclass of AmbientMeasurement, indicating that it represents a specific type of measurement related to environmental conditions. Every instance of NoiseLevel must have exactly one associated value via the hasNoiseLevel property, and this value must be a literal (e.g., a number or string representing the measured noise). This formalization ensures each NoiseLevel measurement uniquely records a single quantifiable noise value.",
        "CQ": [
          {
            "axiom": "NoiseLevel subClassOf AmbientMeasurement",
            "CQ": [
              "Does NoiseLevel fall under the broader category of AmbientMeasurement?",
              "Which measurement types are classified as more specific forms of AmbientMeasurement, including NoiseLevel?",
              "What are the more general classes that contain NoiseLevel?"
            ]
          },
          {
            "axiom": "NoiseLevel propertyRestrictions [hasNoiseLevel exactly 1]",
            "CQ": [
              "Is it required that each entity assigned a NoiseLevel must have exactly one value for the property 'hasNoiseLevel'?",
              "Can an instance of NoiseLevel possess multiple values for the hasNoiseLevel property?",
              "Is it possible for an entity representing NoiseLevel to exist without having any value assigned to the 'hasNoiseLevel' property?"
            ]
          },
          {
            "axiom": "NoiseLevel propertyRestrictions [hasNoiseLevel some rdfs:Literal]",
            "CQ": [
              "Is every instance of NoiseLevel required to have at least one associated value for the property hasNoiseLevel?",
              "Can a NoiseLevel exist without any hasNoiseLevel property value assigned to it?",
              "Does the definition of NoiseLevel necessitate the existence of at least one hasNoiseLevel relationship with a literal?"
            ]
          }
        ]
      },
      "Event": {
        "axiom": {
          "propertyRestrictions": [
            "[startTime only time:Instant]",
            "[duration only time:DurationDescription]",
            "[startTime exactly 1 time:Instant]",
            "[duration exactly 1 time:DurationDescription]"
          ]
        },
        "description": "Event is a class characterized by property restrictions that enforce temporal precision. Each instance of Event must have exactly one startTime, which must be of type time:Instant, and exactly one duration, which must be of type time:DurationDescription. These constraints ensure that every Event is uniquely defined by both a specific starting instant and a specific duration, providing an unambiguous temporal identity for each Event.",
        "CQ": [
          {
            "axiom": "Event propertyRestrictions [startTime only time:Instant]",
            "CQ": [
              "Is every startTime value associated with an Event necessarily of type time:Instant?",
              "Can an Event have a startTime that is not classified as time:Instant?",
              "Are all instances of startTime for an Event restricted exclusively to the time:Instant class?"
            ]
          },
          {
            "axiom": "Event propertyRestrictions [duration only time:DurationDescription]",
            "CQ": [
              "Is the duration property of every Event restricted exclusively to instances of time:DurationDescription?",
              "Can an Event have a duration value of a type other than time:DurationDescription?",
              "Does the Event class explicitly forbid duration values outside the time:DurationDescription specification?"
            ]
          },
          {
            "axiom": "Event propertyRestrictions [startTime exactly 1 time:Instant]",
            "CQ": [
              "Is every Event required to have exactly one startTime that is an instance of time:Instant?",
              "Can an Event have more or fewer than one associated startTime?",
              "Does the ontology prevent an Event from having multiple or no startTime values at all?"
            ]
          },
          {
            "axiom": "Event propertyRestrictions [duration exactly 1 time:DurationDescription]",
            "CQ": [
              "Is every Event characterized by having exactly one duration specified as a DurationDescription?",
              "Can an Event be associated with more than one duration according to the specified property restriction?",
              "Does the ontology require that each Event has a single, unique value for its duration, with no possibility of omission or multiplicity?"
            ]
          }
        ]
      }
    },
    "properties": {}
  },
  "OntoDT": {
    "classes": {
      "return-parameter specification": {
        "axiom": {
          "subClassOf": [
            "specification"
          ],
          "propertyRestrictions": [
            "[has_member some datatype]",
            "[has_identifier some parameter identifier]"
          ]
        },
        "description": "return-parameter specification is a subclass of specification, characterized by having at least one member that is a datatype and at least one associated identifier that qualifies as a parameter identifier. This formalization ensures that every return-parameter specification includes a datatype value and a means of uniquely identifying the parameter, which is essential for describing properties of parameters returned by functions or methods in structured data or APIs.",
        "CQ": [
          {
            "axiom": "return-parameter specification subClassOf specification",
            "CQ": [
              "Does return-parameter specification fall under the broader category of specification?",
              "What types are classified as specializations of specification, such as return-parameter specification?",
              "Which overarching categories include return-parameter specification as a member?"
            ]
          },
          {
            "axiom": "return-parameter specification propertyRestrictions [has_member some datatype]",
            "CQ": [
              "Is every return-parameter specification required to have at least one member of type datatype via the has_member property?",
              "Can a return-parameter specification exist without being associated with any datatype through the has_member relation?",
              "Does the ontology allow a return-parameter specification to have has_member only for datatype instances?"
            ]
          },
          {
            "axiom": "return-parameter specification propertyRestrictions [has_identifier some parameter identifier]",
            "CQ": [
              "Must every return-parameter specification have at least one identifier specified via the has_identifier property?",
              "Is it required for a return-parameter specification to possess a parameter identifier through the has_identifier relationship?",
              "Does a return-parameter specification entail the existence of some associated parameter identifier via has_identifier?"
            ]
          }
        ]
      },
      "excluding subtype generator": {
        "axiom": {
          "subClassOf": [
            "subtype generator"
          ],
          "propertyRestrictions": [
            "[has_member some select-list]"
          ]
        },
        "description": "excluding subtype generator is defined as a subclass of subtype generator, with the added restriction that it must have at least one member specified by the has_member property, where the member is of the type select-list. This means every instance of excluding subtype generator must be associated with at least one select-list through the has_member property, providing a mechanism for selecting or excluding specific subtypes via a list-based criteria.",
        "CQ": [
          {
            "axiom": "excluding subtype generator subClassOf subtype generator",
            "CQ": [
              "Does excluding subtype generator fall under the category of subtype generator?",
              "What specific subclasses are identified within subtype generator, apart from excluding subtype generator?",
              "Which broader types does excluding subtype generator pertain to?"
            ]
          },
          {
            "axiom": "excluding subtype generator propertyRestrictions [has_member some select-list]",
            "CQ": [
              "Does the concept 'excluding subtype generator' necessarily include at least one member from the 'select-list' via the 'has_member' property?",
              "Is it required that every 'excluding subtype generator' entity is related through 'has_member' to an instance belonging to the 'select-list'?",
              "Could an 'excluding subtype generator' exist without linking to at least one element of the 'select-list' through 'has_member'?"
            ]
          }
        ]
      },
      "selection subtype generator": {
        "axiom": {
          "subClassOf": [
            "subtype generator"
          ],
          "propertyRestrictions": [
            "[has_member some select-list]"
          ]
        },
        "description": "selection subtype generator is defined as a subclass of subtype generator. Any instance of this class must have at least one member that is a select-list, enforced by the property restriction [has_member some select-list]. This ensures that selection subtype generators are specifically characterized by their association with select-list members, distinguishing them from other subtype generators.",
        "CQ": [
          {
            "axiom": "selection subtype generator subClassOf subtype generator",
            "CQ": [
              "Does selection subtype generator fall under the broader category of subtype generator?",
              "What specific types are encompassed by subtype generator, including selection subtype generator?",
              "Which higher-level categories include selection subtype generator as a member?"
            ]
          },
          {
            "axiom": "selection subtype generator propertyRestrictions [has_member some select-list]",
            "CQ": [
              "Does every selection necessarily include at least one member from the select-list?",
              "Is it required for any selection to have a member that is part of the select-list?",
              "Can a selection exist without having any member drawn from the select-list?"
            ]
          }
        ]
      },
      "labeled graph datatype": {
        "axiom": {
          "subClassOf": [
            "defined datatype"
          ],
          "propertyRestrictions": [
            "[has_member some directed labeled graph datatype generator]"
          ]
        },
        "description": "labeled graph datatype is defined as a subclass of defined datatype, with the additional restriction that it must have at least one member produced by a directed labeled graph datatype generator. This means every labeled graph datatype is necessarily structured to include elements generated from a mechanism or process that produces directed labeled graph datatypes, distinguishing it from other defined datatypes that may lack this property.",
        "CQ": [
          {
            "axiom": "labeled graph datatype subClassOf defined datatype",
            "CQ": [
              "Is labeled graph datatype classified as a kind of defined datatype?",
              "What are the subtypes encompassed by defined datatype, such as labeled graph datatype?",
              "Which more general types include labeled graph datatype as a member?"
            ]
          },
          {
            "axiom": "labeled graph datatype propertyRestrictions [has_member some directed labeled graph datatype generator]",
            "CQ": [
              "Must every labeled graph with propertyRestrictions have at least one has_member relation to a directed labeled graph datatype generator?",
              "Is it required for any labeled graph with propertyRestrictions to be associated, via has_member, with a directed labeled graph datatype generator?",
              "Can a labeled graph with propertyRestrictions exist without having the has_member property relating it to a directed labeled graph datatype generator?"
            ]
          }
        ]
      },
      "bag generator": {
        "axiom": {
          "subClassOf": [
            "homogenous unordered aggregate generator with variable size"
          ],
          "disjointWith": [
            "set generator"
          ],
          "propertyRestrictions": [
            "[has_quality some non-unique values]",
            "[has_quality some implementation dependent access]"
          ]
        },
        "description": "bag generator is defined as a subclass of homogenous unordered aggregate generator with variable size and is explicitly disjoint with set generator, indicating that an individual cannot be both a bag generator and a set generator. Members of this class are characterized by generating collections where items may have non-unique values (duplicates are permitted) and the way elements are accessed is implementation dependent. This ensures that bag generators support variable-sized, unordered aggregates allowing repeated elements, with element access properties not universally specified.",
        "CQ": [
          {
            "axiom": "bag generator subClassOf homogenous unordered aggregate generator with variable size",
            "CQ": [
              "Is every bag generator classified under homogenous unordered aggregate generator with variable size?",
              "What aggregate generators are categorized as more specific forms of homogenous unordered aggregate generator with variable size?",
              "To which broader generator categories does bag generator belong?"
            ]
          },
          {
            "axiom": "bag generator disjointWith set generator",
            "CQ": [
              "How does the ontology differentiate between bag generators and set generators?",
              "Is there any instance that can simultaneously belong to both bag generator and set generator classes?",
              "Which classes are explicitly stated as disjoint with set generator?"
            ]
          },
          {
            "axiom": "bag generator propertyRestrictions [has_quality some non-unique values]",
            "CQ": [
              "Is it necessary for a bag generator to possess at least one quality that is classified as a non-unique value?",
              "Does every bag generator exhibit the property 'has_quality' with some value that is not unique?",
              "Can a bag generator exist without having any non-unique value as its quality?"
            ]
          },
          {
            "axiom": "bag generator propertyRestrictions [has_quality some implementation dependent access]",
            "CQ": [
              "Is every bag generator required to have at least one quality associated with implementation dependent access?",
              "Does a bag generator necessarily possess the quality of implementation dependent access through the has_quality property?",
              "Can a bag generator exist without having the has_quality property relating it to implementation dependent access?"
            ]
          }
        ]
      },
      "record generator": {
        "axiom": {
          "subClassOf": [
            "heterogenous aggregate generator"
          ],
          "disjointWith": [
            "table datatype"
          ],
          "propertyRestrictions": [
            "[has_quality some fixed size]",
            "[has_quality some one dimensional]",
            "[has_quality some unordered aggregate]",
            "[has_quality some key access]",
            "[has_quality some non-unique values]"
          ]
        },
        "description": "record generator is defined as a subclass of heterogenous aggregate generator and is explicitly disjoint with table datatype, ensuring that an individual cannot be both a record generator and a table datatype. Members of the record generator class must possess several qualities: they have a fixed size, are one-dimensional, form an unordered aggregate, support key access, and can contain non-unique values. This formalization captures the characteristic structure of a record generator, emphasizing its fixed, one-dimensional, unordered nature with keyed access and allowance for repeated values.",
        "CQ": [
          {
            "axiom": "record generator subClassOf heterogenous aggregate generator",
            "CQ": [
              "Is record generator categorized under heterogenous aggregate generator?",
              "Which entities are classified as specific types of heterogenous aggregate generator, including record generator?",
              "To which broader classifications does record generator belong?"
            ]
          },
          {
            "axiom": "record generator disjointWith table datatype",
            "CQ": [
              "What logical separation exists between the record generator and table datatype classes in the ontology?",
              "Can an entity simultaneously be classified as both a record generator and a table datatype?",
              "Which ontology classes are declared as disjoint with the table datatype class?"
            ]
          },
          {
            "axiom": "record generator propertyRestrictions [has_quality some fixed size]",
            "CQ": [
              "Is it required that every record generator has at least one quality characterized by a fixed size?",
              "Must a record generator possess the property 'has_quality' with a value of fixed size?",
              "Does the presence of the fixed size quality define the class of record generators with respect to the has_quality property?"
            ]
          },
          {
            "axiom": "record generator propertyRestrictions [has_quality some one dimensional]",
            "CQ": [
              "Is every record generator required to possess at least one quality that is classified as one dimensional?",
              "Can a record generator exist without having any one dimensional quality?",
              "Does the presence of a one dimensional quality suffice for an entity to be regarded as a record generator?"
            ]
          },
          {
            "axiom": "record generator propertyRestrictions [has_quality some unordered aggregate]",
            "CQ": [
              "Must every record generator have the property 'has_quality' associated with at least one unordered aggregate?",
              "Is there a requirement for a record generator to possess any quality that is classified as an unordered aggregate?",
              "Can a record generator exist without having a 'has_quality' relationship to an unordered aggregate?"
            ]
          },
          {
            "axiom": "record generator propertyRestrictions [has_quality some key access]",
            "CQ": [
              "Is it required for a record generator to have at least one 'has_quality' relationship with a key access instance?",
              "Can a record generator exist without possessing any key access quality via the 'has_quality' relation?",
              "Does every record generator necessarily exhibit some form of key access as a quality?"
            ]
          },
          {
            "axiom": "record generator propertyRestrictions [has_quality some non-unique values]",
            "CQ": [
              "Must every record generator possess at least one quality characterized as having non-unique values?",
              "Is it required that some quality associated with a record generator be of the type where values are not unique?",
              "Can a record generator exist without being linked to a quality with non-unique values?"
            ]
          }
        ]
      },
      "homogenous unordered aggregate generator with variable size": {
        "axiom": {
          "subClassOf": [
            "homogenous aggregate generator with variable size"
          ],
          "equivalentClass": [
            "(bag generator or set generator)"
          ],
          "propertyRestrictions": [
            "[has_quality some unordered aggregate]"
          ]
        },
        "description": "homogenous unordered aggregate generator with variable size is a subclass of homogenous aggregate generator with variable size and is defined as being equivalent to either a bag generator or a set generator. Members of this class are characterized by having the quality of generating unordered aggregates, reflecting that the elements produced do not have intrinsic order. This ontology definition ensures that any homogenous unordered aggregate generator with variable size behaves as a variable-sized aggregate generator whose items are homogeneous and unordered, aligning with the behaviors of both bag generators and set generators.",
        "CQ": [
          {
            "axiom": "homogenous unordered aggregate generator with variable size subClassOf homogenous aggregate generator with variable size",
            "CQ": [
              "Does a homogenous unordered aggregate generator with variable size constitute a specific kind of homogenous aggregate generator with variable size?",
              "Which aggregate generators with variable size fall under the category of homogenous aggregate generator with variable size, including homogenous unordered aggregate generator with variable size?",
              "What broader aggregate generator classes encompass homogenous unordered aggregate generator with variable size?"
            ]
          },
          {
            "axiom": "homogenous unordered aggregate generator with variable size equivalentClass (bag generator or set generator)",
            "CQ": [
              "Is a homogenous unordered aggregate generator with variable size equivalent to a bag generator or a set generator?",
              "Are all homogenous unordered aggregate generators with variable size instances of either bag generators or set generators?",
              "Can any generator outside the categories of bag generator or set generator be classified as a homogenous unordered aggregate generator with variable size?"
            ]
          },
          {
            "axiom": "homogenous unordered aggregate generator with variable size propertyRestrictions [has_quality some unordered aggregate]",
            "CQ": [
              "Does every homogenous unordered aggregate generator necessarily have at least one quality characterized as an unordered aggregate?",
              "Can a homogenous unordered aggregate generator possess the 'has_quality' property only if the quality is of type unordered aggregate?",
              "Is it possible for a homogenous unordered aggregate generator to lack any 'has_quality' relationship to unordered aggregate entities?"
            ]
          }
        ]
      },
      "table datatype": {
        "axiom": {
          "subClassOf": [
            "heterogenous aggregate datatype"
          ],
          "disjointWith": [
            "record (tuple) datatype"
          ],
          "propertyRestrictions": [
            "[has_member some table generator]",
            "[has_operation some IsEmpty:table]",
            "[has_operation some MapToBag:table]",
            "[has_operation some Insert:table]",
            "[has_operation some Select:table]",
            "[has_operation some MapToTable:table]",
            "[has_member some field-list]",
            "[has_quality some exact]",
            "[has_operation some Delete:table]",
            "[has_operation some Fetch:table]",
            "[has_operation some Serialize:table]",
            "[has_quality some non-numeric]"
          ]
        },
        "description": "table datatype is defined as a subclass of heterogenous aggregate datatype, and is explicitly disjoint with record (tuple) datatype, indicating that no instance can simultaneously belong to both classes. Members of the table datatype class are characterized by the following: they always have at least one table generator and a field-list as members; possess the qualities of being exact and non-numeric; and support several specific operations, including IsEmpty, MapToBag, Insert, Select, MapToTable, Delete, Fetch, and Serialize. This formalization distinguishes table datatype from other aggregate types, ensuring that it is uniquely identified by its supported operations, membership requirements, and data qualities.",
        "CQ": [
          {
            "axiom": "table datatype subClassOf heterogenous aggregate datatype",
            "CQ": [
              "Is table datatype classified as a subtype of heterogenous aggregate datatype?",
              "What specific datatypes fall under the category of heterogenous aggregate datatype, including table datatype?",
              "Which broader datatype classes does table datatype belong to?"
            ]
          },
          {
            "axiom": "table datatype disjointWith record (tuple) datatype",
            "CQ": [
              "How is the relationship between table datatype and record (tuple) datatype defined in the ontology?",
              "Is there any datatype that qualifies as both table datatype and record (tuple) datatype?",
              "Which datatypes are explicitly specified as incompatible with record (tuple) datatype?"
            ]
          },
          {
            "axiom": "table datatype propertyRestrictions [has_member some table generator]",
            "CQ": [
              "Is it required that every table has at least one member generated by a table generator?",
              "Does a table necessarily include some entity that originates from a table generator through the has_member property?",
              "Can any table be defined without having the has_member relationship to a table generator?"
            ]
          },
          {
            "axiom": "table datatype propertyRestrictions [has_operation some IsEmpty:table]",
            "CQ": [
              "Is every instance of the table required to have at least one 'has_operation' relationship with an instance of IsEmpty?",
              "Can a table exist without being associated through 'has_operation' to IsEmpty?",
              "Are all tables characterized by the presence of a 'has_operation' property linking them to IsEmpty?"
            ]
          },
          {
            "axiom": "table datatype propertyRestrictions [has_operation some MapToBag:table]",
            "CQ": [
              "Is every instance of 'table' required to have at least one 'has_operation' relationship with an entity of type 'MapToBag:table'?",
              "Can a 'table' exist without being linked through 'has_operation' to any 'MapToBag:table'?",
              "Does the presence of the 'has_operation' property linking 'table' to 'MapToBag:table' define all instances of the class 'table'?"
            ]
          },
          {
            "axiom": "table datatype propertyRestrictions [has_operation some Insert:table]",
            "CQ": [
              "Must every table participate in at least one 'Insert:table' operation?",
              "Does the presence of the 'has_operation' relationship with 'Insert:table' characterize all instances of table?",
              "Is it required that every table is associated with some insertion operation?"
            ]
          },
          {
            "axiom": "table datatype propertyRestrictions [has_operation some Select:table]",
            "CQ": [
              "Is every table required to have at least one 'has_operation' relationship to an entity of type Select?",
              "Are there tables that do not have any 'has_operation' property pointing to a Select instance?",
              "Must a table always be associated with a Select through the 'has_operation' property?"
            ]
          },
          {
            "axiom": "table datatype propertyRestrictions [has_operation some MapToTable:table]",
            "CQ": [
              "Is it required that a table always has at least one has_operation relationship to a MapToTable:table?",
              "Can a table exist without being associated via has_operation to any MapToTable:table?",
              "Does every instance of table necessarily participate in the has_operation property involving a MapToTable:table?"
            ]
          },
          {
            "axiom": "table datatype propertyRestrictions [has_member some field-list]",
            "CQ": [
              "Is it required that every table has at least one member from the field-list?",
              "Does the definition of a table ensure that it must be associated with some field-list member via the has_member property?",
              "Can a table exist without having any has_member link to a field-list individual?"
            ]
          },
          {
            "axiom": "table datatype propertyRestrictions [has_quality some exact]",
            "CQ": [
              "Is every table required to have at least one 'has_quality' property with the value 'exact'?",
              "Can a table exist without possessing the 'has_quality' property set to 'exact' in any instance?",
              "Does the definition of table permit 'has_quality' property values other than 'exact', or is 'exact' necessary for all tables?"
            ]
          },
          {
            "axiom": "table datatype propertyRestrictions [has_operation some Delete:table]",
            "CQ": [
              "Is it required for a table to participate in at least one 'Delete' operation?",
              "Can every table have an associated 'Delete' operation through the property 'has_operation'?",
              "Does the ontology entail that any table must have the 'has_operation' relationship to a 'Delete' process?"
            ]
          },
          {
            "axiom": "table datatype propertyRestrictions [has_operation some Fetch:table]",
            "CQ": [
              "Is every table in the scope required to have at least one 'has_operation' connection with a Fetch action?",
              "Can a table exist without being associated with any Fetch operation through the 'has_operation' property?",
              "Is it necessary for tables to participate in the 'has_operation' relationship with at least one Fetch instance?"
            ]
          },
          {
            "axiom": "table datatype propertyRestrictions [has_operation some Serialize:table]",
            "CQ": [
              "Is it required that a table have at least one has_operation relation to Serialize:table?",
              "Does every table necessarily perform a Serialize:table operation via the has_operation property?",
              "Can a table exist without being associated with Serialize:table through the has_operation property?"
            ]
          },
          {
            "axiom": "table datatype propertyRestrictions [has_quality some non-numeric]",
            "CQ": [
              "Are all tables required to possess at least one quality that is considered non-numeric?",
              "Is it essential for any instance of a table to have the 'has_quality' property relating to a value categorized as non-numeric?",
              "Can a table exist in the ontology without any non-numeric quality assigned through the 'has_quality' property?"
            ]
          }
        ]
      },
      "enumerated-value identifier": {
        "axiom": {
          "subClassOf": [
            "identifier"
          ],
          "propertyRestrictions": [
            "[has-value some rdfs:Literal]"
          ]
        },
        "description": "enumerated-value identifier is a subclass of identifier, characterized by the restriction that its values must be associated (through the has-value property) with at least one literal value (rdfs:Literal). This formalization ensures that every enumerated-value identifier refers explicitly to a concrete literal value, distinguishing it from other identifiers that may not be directly tied to literal data.",
        "CQ": [
          {
            "axiom": "enumerated-value identifier subClassOf identifier",
            "CQ": [
              "Is enumerated-value identifier a more specific type within the category of identifier?",
              "Which subclasses does identifier include, specifically is enumerated-value identifier among them?",
              "What are the broader categories encompassing enumerated-value identifier?"
            ]
          },
          {
            "axiom": "enumerated-value identifier propertyRestrictions [has-value some rdfs:Literal]",
            "CQ": [
              "Are all enumerated-value identifiers required to have at least one property restriction with a value of type rdfs:Literal?",
              "Is it necessary for every enumerated-value identifier to be associated with a property restriction whose value is a literal?",
              "Does the presence of a property restriction with an rdfs:Literal value characterize all enumerated-value identifiers?"
            ]
          }
        ]
      },
      "aggregate-imposed identifier uniqueness": {
        "axiom": {
          "subClassOf": [
            "aggregate generator property"
          ],
          "disjointWith": [
            "homogenity",
            "agregate size",
            "uniqueness",
            "component mandatoriness",
            "structurness",
            "recursiveness",
            "access type"
          ],
          "equivalentClass": [
            "(identifier not unique or identifier unique)"
          ]
        },
        "description": "aggregate-imposed identifier uniqueness is a subclass of aggregate generator property, and is explicitly disjoint with classes such as homogenity, aggregate size, uniqueness, component mandatoriness, structurness, recursiveness, and access type, ensuring mutual exclusivity with these notions. It is defined equivalently as a situation where an identifier may or may not be unique (identifier not unique or identifier unique), capturing precisely those cases where the uniqueness of identifiers is determined at the aggregate level rather than being strictly enforced or absent.",
        "CQ": [
          {
            "axiom": "aggregate-imposed identifier uniqueness subClassOf aggregate generator property",
            "CQ": [
              "Is aggregate-imposed identifier uniqueness categorized under aggregate generator property?",
              "Which concepts are direct specializations of aggregate generator property?",
              "What broader classes encompass aggregate-imposed identifier uniqueness?"
            ]
          },
          {
            "axiom": "aggregate-imposed identifier uniqueness disjointWith homogenity",
            "CQ": [
              "What logical separation is defined between aggregate-imposed identifier uniqueness and homogenity within the ontology?",
              "Is there any scenario in the ontology where an entity can exhibit both aggregate-imposed identifier uniqueness and homogenity?",
              "Which other concepts are declared as disjoint with homogenity?"
            ]
          },
          {
            "axiom": "aggregate-imposed identifier uniqueness disjointWith agregate size",
            "CQ": [
              "What is the formal distinction between aggregate-imposed identifier uniqueness and aggregate size within the ontology?",
              "Are there any entities that can simultaneously possess properties of both aggregate-imposed identifier uniqueness and aggregate size?",
              "Which ontology classes are established as disjoint with aggregate-imposed identifier uniqueness?"
            ]
          },
          {
            "axiom": "aggregate-imposed identifier uniqueness disjointWith uniqueness",
            "CQ": [
              "How does the ontology differentiate between aggregate-imposed identifier uniqueness and uniqueness?",
              "Is it allowed for an entity to possess both aggregate-imposed identifier uniqueness and uniqueness simultaneously?",
              "Which classes are defined as mutually exclusive with uniqueness?"
            ]
          },
          {
            "axiom": "aggregate-imposed identifier uniqueness disjointWith component mandatoriness",
            "CQ": [
              "What logical separation is asserted between aggregate-imposed identifier uniqueness and component mandatoriness within the ontology?",
              "Is there an instance that can satisfy both aggregate-imposed identifier uniqueness and component mandatoriness simultaneously?",
              "Which classes are explicitly defined as incompatible with component mandatoriness?"
            ]
          },
          {
            "axiom": "aggregate-imposed identifier uniqueness disjointWith structurness",
            "CQ": [
              "What is the logical distinction between aggregate-imposed identifier uniqueness and structurness within the ontology?",
              "Can any entity simultaneously fulfill both aggregate-imposed identifier uniqueness and structurness?",
              "Which other concepts are declared as mutually exclusive with structurness?"
            ]
          },
          {
            "axiom": "aggregate-imposed identifier uniqueness disjointWith recursiveness",
            "CQ": [
              "How does the ontology distinguish between aggregate-imposed identifier uniqueness and recursiveness?",
              "Is it valid for a construct to exhibit both aggregate-imposed identifier uniqueness and recursiveness simultaneously?",
              "Which entities or properties are explicitly set as incompatible with recursiveness?"
            ]
          },
          {
            "axiom": "aggregate-imposed identifier uniqueness disjointWith access type",
            "CQ": [
              "What is the formal differentiation between aggregate-imposed identifier uniqueness and access type in the ontology?",
              "Is it allowable for an entity to be classified as both aggregate-imposed identifier uniqueness and access type?",
              "Which other classes in the ontology are specified to be incompatible with access type?"
            ]
          },
          {
            "axiom": "aggregate-imposed identifier uniqueness equivalentClass (identifier not unique or identifier unique)",
            "CQ": [
              "Is aggregate-imposed identifier uniqueness equivalent to the union of identifier not unique and identifier unique?",
              "Can aggregate-imposed identifier uniqueness be completely described as either identifier not unique or identifier unique?",
              "Does aggregate-imposed identifier uniqueness include all instances with identifier unique or identifier not unique, and no others?"
            ]
          }
        ]
      },
      "uniqueness": {
        "axiom": {
          "subClassOf": [
            "aggregate generator property"
          ],
          "disjointWith": [
            "component mandatoriness",
            "structurness",
            "recursiveness",
            "access type"
          ],
          "equivalentClass": [
            "(non-unique values or unique values)"
          ]
        },
        "description": "uniqueness is defined as a subclass of aggregate generator property and is explicitly disjoint from component mandatoriness, structurness, recursiveness, and access type, meaning no entity can be an instance of both uniqueness and any of these disjoint classes simultaneously. It is equivalent to the presence of either unique values or non-unique values, capturing the property of whether values are distinct or may repeat within an aggregate context. This definition formalizes how uniqueness characterizes and distinguishes value patterns in aggregate generator properties.",
        "CQ": [
          {
            "axiom": "uniqueness subClassOf aggregate generator property",
            "CQ": [
              "Is aggregate generator property a direct or indirect superclass of uniqueness?",
              "What classes are subsumed under aggregate generator property, and does uniqueness appear among them?",
              "Which general class hierarchies does uniqueness pertain to within the ontology?"
            ]
          },
          {
            "axiom": "uniqueness disjointWith component mandatoriness",
            "CQ": [
              "What formal separation is specified between uniqueness and component mandatoriness in the ontology?",
              "Is there any entity that can simultaneously possess uniqueness and component mandatoriness characteristics?",
              "Which classes are defined as disjoint with component mandatoriness?"
            ]
          },
          {
            "axiom": "uniqueness disjointWith structurness",
            "CQ": [
              "What formal separation exists between uniqueness and structurness within the ontology?",
              "Is any entity permitted to possess both uniqueness and structurness properties simultaneously?",
              "Which classes or properties are specifically stated as being disjoint with structurness?"
            ]
          },
          {
            "axiom": "uniqueness disjointWith recursiveness",
            "CQ": [
              "How are uniqueness and recursiveness differentiated within the ontology?",
              "Is there any entity that can possess both uniqueness and recursiveness?",
              "Which classes are defined as incompatible with recursiveness?"
            ]
          },
          {
            "axiom": "uniqueness disjointWith access type",
            "CQ": [
              "What constraint does the ontology enforce between uniqueness and access type classes?",
              "Is any entity allowed to possess both the uniqueness and access type classifications simultaneously?",
              "Which classes within the ontology are specifically declared as incompatible with access type?"
            ]
          },
          {
            "axiom": "uniqueness equivalentClass (non-unique values or unique values)",
            "CQ": [
              "Is uniqueness equivalent to the class containing either only non-unique values or only unique values?",
              "Can all instances classified as uniqueness be described as those having non-unique values or unique values?",
              "Does the definition of uniqueness encompass exclusively the union of non-unique values and unique values?"
            ]
          }
        ]
      },
      "recursiveness": {
        "axiom": {
          "subClassOf": [
            "aggregate generator property"
          ],
          "disjointWith": [
            "access type"
          ],
          "equivalentClass": [
            "(recursive or non-recursive)"
          ]
        },
        "description": "recursiveness is defined as a subclass of aggregate generator property, indicating it is a specific kind of property related to aggregate generators. It is explicitly disjoint with access type, meaning no entity can simultaneously be both an access type and exhibit recursiveness. Additionally, recursiveness is formally equivalent to either recursive or non-recursive, fully covering both possibilities as mutually exclusive characteristics within this context.",
        "CQ": [
          {
            "axiom": "recursiveness subClassOf aggregate generator property",
            "CQ": [
              "Is recursiveness an instance of the aggregate generator property class?",
              "Which properties are considered more specific forms of aggregate generator property, such as recursiveness?",
              "What broader property categories encompasses recursiveness?"
            ]
          },
          {
            "axiom": "recursiveness disjointWith access type",
            "CQ": [
              "What differentiates recursiveness from access type according to the ontology?",
              "Is it permissible for an entity to be classified as both recursiveness and access type?",
              "Which ontology classes are shown as incompatible with access type?"
            ]
          },
          {
            "axiom": "recursiveness equivalentClass (recursive or non-recursive)",
            "CQ": [
              "Is recursiveness equivalent to the union of recursive and non-recursive concepts?",
              "Can recursiveness be entirely described as either recursive or non-recursive?",
              "Are all entities classified as recursiveness necessarily either recursive or non-recursive?"
            ]
          }
        ]
      },
      "primitive datatype": {
        "axiom": {
          "subClassOf": [
            "datatype"
          ],
          "disjointWith": [
            "generated datatype",
            "defined datatype"
          ],
          "propertyRestrictions": [
            "[has_quality some equality]"
          ]
        },
        "description": "primitive datatype is a subclass of datatype, and is explicitly disjoint from both generated datatype and defined datatype, ensuring that no individual can simultaneously belong to these classes. Members of primitive datatype are characterized by the requirement that they possess at least one quality related to equality (expressed as having some has_quality relationship to equality). This formalization captures the basic, irreducible nature of primitive datatypes, differentiating them from those that are constructed or defined based on other rules.",
        "CQ": [
          {
            "axiom": "primitive datatype subClassOf datatype",
            "CQ": [
              "Is primitive datatype categorized under the broader class of datatype?",
              "What are the more specific subclasses within datatype, including primitive datatype?",
              "To which higher-level classes does primitive datatype conceptually belong?"
            ]
          },
          {
            "axiom": "primitive datatype disjointWith generated datatype",
            "CQ": [
              "What differentiates primitive datatype from generated datatype in terms of ontology classification?",
              "Is it allowed for a datatype to belong to both primitive and generated categories simultaneously?",
              "Which datatype classes are asserted to be incompatible with primitive datatype?"
            ]
          },
          {
            "axiom": "primitive datatype disjointWith defined datatype",
            "CQ": [
              "What is the ontological separation between primitive datatype and defined datatype?",
              "Is any datatype allowed to belong to both the primitive and defined datatype categories?",
              "Which datatypes are specified as being mutually exclusive with defined datatype within the model?"
            ]
          },
          {
            "axiom": "primitive datatype propertyRestrictions [has_quality some equality]",
            "CQ": [
              "Is it required for every instance with a primitive datatype propertyRestriction to possess at least one has_quality relation to equality?",
              "Does the definition of primitive datatype propertyRestrictions ensure that the has_quality property always connects to equality for its instances?",
              "Must all primitive datatype propertyRestrictions have the property has_quality with the value equality?"
            ]
          }
        ]
      },
      "defined datatype parameter": {
        "axiom": {
          "subClassOf": [
            "datatype role"
          ],
          "propertyRestrictions": [
            "[has_identifier some parameter identifier]",
            "[is_member_of some defined datatype parameter-list]",
            "[role_of some datatype]"
          ]
        },
        "description": "defined datatype parameter is a subclass of datatype role, representing a parameter that is specifically associated with datatypes. Any member of this class must have an identifier (i.e., satisfy the has_identifier property with respect to some parameter identifier), must be a member of a defined datatype parameter-list, and must play the role_of some datatype. This formalization ensures that a defined datatype parameter is always linked to a datatype and properly identified within a parameter list structure.",
        "CQ": [
          {
            "axiom": "defined datatype parameter subClassOf datatype role",
            "CQ": [
              "Is defined datatype parameter classified under datatype role?",
              "Which roles encompass defined datatype parameter as a specific member?",
              "What more general concepts does defined datatype parameter fall under with respect to datatype role?"
            ]
          },
          {
            "axiom": "defined datatype parameter propertyRestrictions [has_identifier some parameter identifier]",
            "CQ": [
              "Is it necessary for a defined datatype parameter to have at least one 'has_identifier' relationship with a parameter identifier?",
              "Does every defined datatype parameter include some form of association via 'has_identifier' to a parameter identifier?",
              "Can a defined datatype parameter exist without possessing the 'has_identifier' property linking to any parameter identifier?"
            ]
          },
          {
            "axiom": "defined datatype parameter propertyRestrictions [is_member_of some defined datatype parameter-list]",
            "CQ": [
              "Is every defined datatype parameter required to be a member of at least one defined datatype parameter-list?",
              "Can a defined datatype parameter exist without belonging to any defined datatype parameter-list?",
              "Does associating a defined datatype parameter with the property 'is_member_of' ensure its inclusion in some defined datatype parameter-list?"
            ]
          },
          {
            "axiom": "defined datatype parameter propertyRestrictions [role_of some datatype]",
            "CQ": [
              "Is it required that propertyRestrictions always involves at least one role_of relation to a datatype?",
              "Can an entity with propertyRestrictions lack any role_of association to a datatype?",
              "Does the definition of propertyRestrictions entail that there must exist some role_of connection to a datatype for its instances?"
            ]
          }
        ]
      },
      "alternative-type": {
        "axiom": {
          "subClassOf": [
            "datatype role"
          ],
          "propertyRestrictions": [
            "[role_of some datatype]",
            "[is_member_of some alternative component]"
          ]
        },
        "description": "alternative-type is defined as a subclass of datatype role. Instances of this class must be the role of at least one datatype and must also be a member of some alternative component. This formalization ensures that alternative-type represents a specialized datatype role that is contextually linked both to specific datatypes and to alternative components.",
        "CQ": [
          {
            "axiom": "alternative-type subClassOf datatype role",
            "CQ": [
              "Does alternative-type fall under the broader class of datatype role?",
              "Which kinds of entities are recognized as subclasses of datatype role, and does that include alternative-type?",
              "What are all the general categories (superclasses) that alternative-type is grouped within?"
            ]
          },
          {
            "axiom": "alternative-type propertyRestrictions [role_of some datatype]",
            "CQ": [
              "Is it required that every alternative-type instance has at least one role_of relationship with a value from datatype?",
              "Can alternative-type exist without having any role_of association to a value belonging to datatype?",
              "Does every alternative-type entail the presence of a role_of property linked to some instance of datatype?"
            ]
          },
          {
            "axiom": "alternative-type propertyRestrictions [is_member_of some alternative component]",
            "CQ": [
              "Must every alternative-type entity be related via 'is_member_of' to at least one alternative component?",
              "Is it required that an alternative-type individual participate as a member in some alternative component?",
              "Can an alternative-type exist in the ontology without being a member of any alternative component through the 'is_member_of' property?"
            ]
          }
        ]
      },
      "parameter": {
        "axiom": {
          "subClassOf": [
            "datatype role"
          ],
          "propertyRestrictions": [
            "[role_of some datatype]",
            "[has_identifier some parameter identifier]"
          ]
        },
        "description": "parameter is defined as a subclass of datatype role, representing entities that serve a specific function within a datatype context. Each parameter must be associated with some datatype (via the role_of property) and must have an identifier that is a member of the parameter identifier class. This ensures that every parameter is explicitly linked to the datatype it qualifies and is uniquely identified within the system.",
        "CQ": [
          {
            "axiom": "parameter subClassOf datatype role",
            "CQ": [
              "Is parameter categorized under datatype role?",
              "Which subclasses fall beneath the class datatype role, such as parameter?",
              "What are the direct superclasses of parameter in the ontology?"
            ]
          },
          {
            "axiom": "parameter propertyRestrictions [role_of some datatype]",
            "CQ": [
              "Is it necessary for parameter to have the property propertyRestrictions with some value that plays the role_of a specified datatype?",
              "Can a parameter exist without propertyRestrictions relating to at least one instance of datatype through role_of?",
              "Does every valid parameter exhibit propertyRestrictions to at least one entity classified as datatype by role_of?"
            ]
          },
          {
            "axiom": "parameter propertyRestrictions [has_identifier some parameter identifier]",
            "CQ": [
              "Must every parameter have at least one identifier via the property 'has_identifier'?",
              "Is it possible for a parameter to exist without being related through 'has_identifier' to any identifier?",
              "Does there exist a requirement that each parameter be associated with some identifier using 'has_identifier'?"
            ]
          }
        ]
      },
      "attribute component": {
        "axiom": {
          "subClassOf": [
            "datatype role"
          ],
          "propertyRestrictions": [
            "[has_identifier some attribute identifier]"
          ]
        },
        "description": "attribute component is defined as a subclass of datatype role, meaning each attribute component is a specific kind of datatype role. Additionally, attribute component instances are required to be associated with at least one attribute identifier through the has_identifier property. This ensures that every attribute component is uniquely identified by an attribute identifier.",
        "CQ": [
          {
            "axiom": "attribute component subClassOf datatype role",
            "CQ": [
              "What broader categories encompass attribute component according to the ontology?",
              "Which entities are more general than attribute component, including datatype role?",
              "Are attribute component types always considered forms of datatype role?"
            ]
          },
          {
            "axiom": "attribute component propertyRestrictions [has_identifier some attribute identifier]",
            "CQ": [
              "Is it required for every attribute component to have at least one attribute identifier via the has_identifier property?",
              "Can an attribute component exist without being linked to an attribute identifier through has_identifier?",
              "Must each attribute component be associated with some attribute identifier?"
            ]
          }
        ]
      },
      "discrete field-list": {
        "axiom": {
          "subClassOf": [
            "field-list"
          ],
          "propertyRestrictions": [
            "[has_member some discrete field component]"
          ]
        },
        "description": "discrete field-list is a subclass of field-list, defined by the restriction that its members must include at least one discrete field component. This ensures that every instance of discrete field-list contains some element that is characterized as a discrete field component.",
        "CQ": [
          {
            "axiom": "discrete field-list subClassOf field-list",
            "CQ": [
              "Is discrete field-list categorized under field-list?",
              "What types are included within the field-list category?",
              "Which general groupings contain discrete field-list as a member?"
            ]
          },
          {
            "axiom": "discrete field-list propertyRestrictions [has_member some discrete field component]",
            "CQ": [
              "Must every discrete field-list include at least one member that is a discrete field component?",
              "Is it required for a discrete field-list to have the has_member property relating it to some discrete field component?",
              "Can a discrete field-list exist without having any discrete field component as a member?"
            ]
          }
        ]
      },
      "unlabeled dataset field-list": {
        "axiom": {
          "subClassOf": [
            "field-list"
          ],
          "propertyRestrictions": [
            "[has_member some labeled dataset descriptive field component]"
          ]
        },
        "description": "unlabeled dataset field-list is a subclass of field-list, characterized by the axiom that its members must include at least one labeled dataset descriptive field component through the has_member property. This means any instance of unlabeled dataset field-list is a field-list that necessarily contains some labeled dataset descriptive field components.",
        "CQ": [
          {
            "axiom": "unlabeled dataset field-list subClassOf field-list",
            "CQ": [
              "Is every unlabeled dataset field-list included under the general category of field-list?",
              "What specific types of field-list include unlabeled dataset field-list as a subclass?",
              "Which broader groupings encompass the unlabeled dataset field-list concept?"
            ]
          },
          {
            "axiom": "unlabeled dataset field-list propertyRestrictions [has_member some labeled dataset descriptive field component]",
            "CQ": [
              "Is it required for an unlabeled dataset to include at least one member that is a labeled dataset descriptive field component?",
              "Can an unlabeled dataset have members other than labeled dataset descriptive field components?",
              "Does every unlabeled dataset necessarily relate through 'has_member' to a labeled dataset descriptive field component?"
            ]
          }
        ]
      },
      "attribute-list": {
        "axiom": {
          "subClassOf": [
            "list specification"
          ],
          "propertyRestrictions": [
            "[has_member some attribute component]"
          ]
        },
        "description": "attribute-list is defined as a subclass of list specification, characterized by the requirement that every attribute-list must have at least one member that is an attribute component. This formalization specifies that the class comprises list specifications whose members necessarily include attribute components.",
        "CQ": [
          {
            "axiom": "attribute-list subClassOf list specification",
            "CQ": [
              "In what ways does attribute-list relate to list specification within the ontology?",
              "Which concepts are categorized under the broader class of list specification, including attribute-list?",
              "What are the direct superordinate classes for attribute-list?"
            ]
          },
          {
            "axiom": "attribute-list propertyRestrictions [has_member some attribute component]",
            "CQ": [
              "Is it required that every attribute-list includes at least one component as a member?",
              "Does the existence of a member with the attribute 'component' suffice for something to be classified under attribute-list?",
              "Can an attribute-list be identified solely by having the property 'has_member' with at least one component?"
            ]
          }
        ]
      },
      "alternative-list": {
        "axiom": {
          "subClassOf": [
            "list specification"
          ],
          "propertyRestrictions": [
            "[has_member some alternative component]"
          ]
        },
        "description": "alternative-list is defined as a subclass of list specification, incorporating a property restriction requiring that its members must include at least one alternative component. This ensures that any instance of alternative-list represents a list specification whose elements are specifically alternative components.",
        "CQ": [
          {
            "axiom": "alternative-list subClassOf list specification",
            "CQ": [
              "Is alternative-list classified under the broader category of list specification?",
              "Which specific types of list specification include alternative-list as a subclass?",
              "What are the more general categories encompassing alternative-list in the context of list specification?"
            ]
          },
          {
            "axiom": "alternative-list propertyRestrictions [has_member some alternative component]",
            "CQ": [
              "Must every alternative-list include at least one alternative component as a member?",
              "Is it required that alternative-list items possess a member that is classified as an alternative component?",
              "Does the structure of alternative-list entail having some association with an alternative component through the has_member property?"
            ]
          }
        ]
      },
      "select-list": {
        "axiom": {
          "subClassOf": [
            "list specification"
          ],
          "propertyRestrictions": [
            "[has_member some select-item specification]"
          ]
        },
        "description": "select-list is defined as a subclass of list specification, representing a specialized type of list that must include at least one member which is a select-item specification. Any instance of select-list is thus required to be a list specification containing one or more select-item specifications as its members.",
        "CQ": [
          {
            "axiom": "select-list subClassOf list specification",
            "CQ": [
              "Is select-list categorized under the broader class of list specification?",
              "Which list specifications include select-list as a more specific form?",
              "What are the direct superclasses of select-list within the ontology?"
            ]
          },
          {
            "axiom": "select-list propertyRestrictions [has_member some select-item specification]",
            "CQ": [
              "Are all individuals in select-list required to have at least one member specified by the property has_member from the select-item specification?",
              "Can an instance belonging to select-list exist without having a member that satisfies the select-item specification through has_member?",
              "Is it necessary for any member of select-list to be linked to some entity defined by the select-item specification via has_member?"
            ]
          }
        ]
      },
      "enumerated-value-list": {
        "axiom": {
          "subClassOf": [
            "list specification"
          ],
          "propertyRestrictions": [
            "[has_member some enumerated-value identifier]"
          ]
        },
        "description": "enumerated-value-list is defined as a subclass of list specification, with the defining property that it must have at least one member that is an enumerated-value identifier. This means any instance of enumerated-value-list is a list specification characterized by containing one or more explicitly enumerated values as its members.",
        "CQ": [
          {
            "axiom": "enumerated-value-list subClassOf list specification",
            "CQ": [
              "Is every enumerated-value-list classified as a type of list specification?",
              "Which list specifications have enumerated-value-list as a more specific form?",
              "What broader categories include enumerated-value-list as a subclass within list specifications?"
            ]
          },
          {
            "axiom": "enumerated-value-list propertyRestrictions [has_member some enumerated-value identifier]",
            "CQ": [
              "Is every member in an enumerated-value-list required to have at least one enumerated-value identified by the 'has_member' property?",
              "Can an enumerated-value-list contain an element that does not meet the identifier criteria via 'has_member'?",
              "Does the definition of enumerated-value-list ensure the inclusion of only those values that are explicitly connected through 'has_member' to a recognized enumerated-value identifier?"
            ]
          }
        ]
      },
      "array datatype": {
        "axiom": {
          "subClassOf": [
            "homogenous aggregate datatype"
          ],
          "disjointWith": [
            "homogenous aggregate datatype with variable size"
          ],
          "propertyRestrictions": [
            "[has_operation some Select:table]",
            "[has_member some index-type list]",
            "[has_quality some exact]",
            "[has_operation some Replace:array]",
            "[has_member some base type]",
            "[has_quality some non-ordered]",
            "[has_quality some non-numeric]",
            "[has_operation some Equal:array]",
            "[has_member some array generator]"
          ]
        },
        "description": "array datatype is defined as a subclass of homogenous aggregate datatype, and is explicitly disjoint from homogenous aggregate datatype with variable size, indicating arrays have a fixed size. Members of this class possess the following characteristics: they have members of a specific base type, members are indexed (by an index-type list), and an array can be generated by an array generator. Arrays are associated with qualities such as being exact, non-ordered, and non-numeric. They support operations including selection (Select:table), replacement (Replace:array), and testing for equality (Equal:array). These axioms provide a formal definition capturing the essential nature and operational behavior of array datatypes.",
        "CQ": [
          {
            "axiom": "array datatype subClassOf homogenous aggregate datatype",
            "CQ": [
              "Does array datatype qualify as a specialized form of homogenous aggregate datatype?",
              "Which datatypes are classified as narrower terms under homogenous aggregate datatype, specifically including array datatype?",
              "What are the broader datatype categories that array datatype falls under?"
            ]
          },
          {
            "axiom": "array datatype disjointWith homogenous aggregate datatype with variable size",
            "CQ": [
              "What logical separation is defined between array datatype and homogenous aggregate datatype with variable size within the ontology?",
              "Is there any datatype instance that can belong to both array datatype and homogenous aggregate datatype with variable size?",
              "Which datatypes, aside from array datatype, are specified as disjoint with homogenous aggregate datatype with variable size?"
            ]
          },
          {
            "axiom": "array datatype propertyRestrictions [has_operation some Select:table]",
            "CQ": [
              "Is it required that an array has at least one 'has_operation' relationship with a Select:table?",
              "Can an array exist without having any 'has_operation' connection to a Select:table?",
              "Does the definition of array entail the possibility of 'has_operation' only with instances of Select:table?"
            ]
          },
          {
            "axiom": "array datatype propertyRestrictions [has_member some index-type list]",
            "CQ": [
              "Is every instance of array required to have at least one has_member relationship with an index-type list?",
              "Does the array class necessarily include a member that belongs to the index-type list through the has_member property?",
              "Can an array exist without referencing any index-type list via the has_member property?"
            ]
          },
          {
            "axiom": "array datatype propertyRestrictions [has_quality some exact]",
            "CQ": [
              "Is it required that entities classified under 'array' always possess the 'has_quality' property with at least one value of 'exact'?",
              "Does every instance of an array have a 'has_quality' relation to some 'exact' value?",
              "Can something be an array if it lacks an association via 'has_quality' to exact?"
            ]
          },
          {
            "axiom": "array datatype propertyRestrictions [has_operation some Replace:array]",
            "CQ": [
              "Is it required for an array to have at least one 'has_operation' relationship with a Replace operation?",
              "Can an array exist without being associated with the 'Replace' operation via the 'has_operation' property?",
              "Does every instance of array necessarily participate in a 'has_operation' relation involving the Replace operation?"
            ]
          },
          {
            "axiom": "array datatype propertyRestrictions [has_member some base type]",
            "CQ": [
              "Must every array have at least one member of the base type?",
              "Does an array necessarily include some value identified by the base type through the property has_member?",
              "Is it required that any instance of array is associated via has_member with at least one instance of the base type?"
            ]
          },
          {
            "axiom": "array datatype propertyRestrictions [has_quality some non-ordered]",
            "CQ": [
              "Is every entity associated with 'array' required to have the property 'has_quality' with some instance of 'non-ordered'?",
              "Can an instance of 'array' exist without being linked to at least one 'non-ordered' quality through the 'has_quality' property?",
              "Does the definition of 'array' necessitate the presence of the 'has_quality' relation to at least one 'non-ordered' entity?"
            ]
          },
          {
            "axiom": "array datatype propertyRestrictions [has_quality some non-numeric]",
            "CQ": [
              "Is it necessary for an entity to have at least one has_quality relationship pointing to a non-numeric value?",
              "Can an entity possess a has_quality property that must reference a non-numeric characteristic?",
              "Does every instance require the existence of some non-numeric value for the has_quality property?"
            ]
          },
          {
            "axiom": "array datatype propertyRestrictions [has_operation some Equal:array]",
            "CQ": [
              "Is it necessary for an array to have at least one operation that is equal to array?",
              "Does the array class require the presence of the has_operation property with values of type Equal:array?",
              "Are all arrays in the ontology ensured to participate in some has_operation relationship involving Equal:array?"
            ]
          },
          {
            "axiom": "array datatype propertyRestrictions [has_member some array generator]",
            "CQ": [
              "Must every array necessarily have at least one member that is an array generator?",
              "Is it required for an array to include a member with the role of array generator?",
              "Can an entity be considered an array without possessing the has_member relationship to an array generator?"
            ]
          }
        ]
      },
      "real datatype": {
        "axiom": {
          "subClassOf": [
            "numeric ordered primitive datatype"
          ],
          "disjointWith": [
            "integer datatype",
            "rational datatype"
          ],
          "propertyRestrictions": [
            "[has_operation some Multiply:real]",
            "[has_quality some approximate]",
            "[has_operation some Negate:real]",
            "[has_member some real radix]",
            "[has_quality some unbounded]",
            "[has_operation some Reciprocal:real]",
            "[has_operation some InOrder:real]",
            "[has_operation some Add:real]",
            "[has_operation some Promote:real]",
            "[has_operation some Equal:real]",
            "[has_member some real factor]"
          ]
        },
        "description": "real datatype is defined as a subclass of numeric ordered primitive datatype and is explicitly disjoint with both integer datatype and rational datatype, ensuring that no individual can be simultaneously classified as a real datatype and either of those classes. Members of this class support a range of operations, including addition (Add), multiplication (Multiply), negation (Negate), reciprocals (Reciprocal), equality comparison (Equal), order comparison (InOrder), and type promotion (Promote), all among real values. Instances of real datatype possess qualities of being unbounded and approximate, distinguishing them from other numeric types. They also include members such as real radix and real factor, further characterizing the structure and application of real datatypes.",
        "CQ": [
          {
            "axiom": "real datatype subClassOf numeric ordered primitive datatype",
            "CQ": [
              "Is real datatype classified under the broader category of numeric ordered primitive datatype?",
              "Which datatypes fall within the scope of numeric ordered primitive datatype, specifically including real datatype?",
              "What more general datatype categories does real datatype belong to?"
            ]
          },
          {
            "axiom": "real datatype disjointWith integer datatype",
            "CQ": [
              "How does the ontology differentiate between real datatype and integer datatype?",
              "Is there any datatype that can belong to both real and integer datatypes concurrently?",
              "Which datatypes are explicitly marked as incompatible with integer datatype?"
            ]
          },
          {
            "axiom": "real datatype disjointWith rational datatype",
            "CQ": [
              "How does the ontology specify the separation between real and rational datatypes?",
              "Is there an entity in the ontology that can be classified as both a real and a rational datatype?",
              "Which datatypes are explicitly defined as incompatible with rational datatypes?"
            ]
          },
          {
            "axiom": "real datatype propertyRestrictions [has_operation some Multiply:real]",
            "CQ": [
              "Is it required for a real datatype property to participate in at least one 'has_operation' relation involving the Multiply operation?",
              "Can a real datatype property exist without being associated with the 'has_operation' property to a Multiply operation?",
              "Does the presence of a Multiply operation under the 'has_operation' property suffice to classify a real datatype property under this restriction?"
            ]
          },
          {
            "axiom": "real datatype propertyRestrictions [has_quality some approximate]",
            "CQ": [
              "Is it necessary for a real value to have the quality 'approximate'?",
              "Can a real value possess only the quality of being 'approximate'?",
              "Are all real values required to exhibit some form of the 'approximate' quality?"
            ]
          },
          {
            "axiom": "real datatype propertyRestrictions [has_operation some Negate:real]",
            "CQ": [
              "Is every instance of 'real' required to have at least one 'has_operation' relationship to a 'Negate:real'?",
              "Must all 'real' entities possess an associated 'has_operation' linking them to some instance of 'Negate:real'?",
              "Can a 'real' exist without being related to any 'Negate:real' via the 'has_operation' property?"
            ]
          },
          {
            "axiom": "real datatype propertyRestrictions [has_member some real radix]",
            "CQ": [
              "Is it required that every instance related by 'has_member' must include at least one real number of type 'real radix'?",
              "Does an individual with the property 'has_member' necessarily reference some entity classified under 'real radix'?",
              "Can an entity be considered valid if it lacks any 'has_member' relationship to a 'real radix' real number?"
            ]
          },
          {
            "axiom": "real datatype propertyRestrictions [has_quality some unbounded]",
            "CQ": [
              "Is every instance of real associated with at least one value for the property has_quality?",
              "Can any instance of real exist without possessing the has_quality relationship to some value?",
              "Does the real class require that there be at least one has_quality property present for its instances?"
            ]
          },
          {
            "axiom": "real datatype propertyRestrictions [has_operation some Reciprocal:real]",
            "CQ": [
              "Is it required that every instance with the 'has_operation' property must relate to at least one value from the Reciprocal:real class?",
              "Can an instance exist without having a 'has_operation' relationship to any Reciprocal:real value?",
              "Does the axiom allow an instance to have multiple 'has_operation' relationships with different Reciprocal:real values?"
            ]
          },
          {
            "axiom": "real datatype propertyRestrictions [has_operation some InOrder:real]",
            "CQ": [
              "Is every instance with the property 'has_operation' necessarily associated with at least one real-valued value in the InOrder:real datatype?",
              "Can an entity satisfying the property restriction 'has_operation some InOrder:real' lack a value of InOrder:real type for 'has_operation'?",
              "Does the use of 'has_operation some InOrder:real' require that any member must have a 'has_operation' property filled by some value from the InOrder:real range?"
            ]
          },
          {
            "axiom": "real datatype propertyRestrictions [has_operation some Add:real]",
            "CQ": [
              "Is it required for a real datatype property restriction to include at least one has_operation relation to an instance of Add:real?",
              "Can a real datatype property restriction exist without having any has_operation relationship to Add:real?",
              "Do all real datatype property restrictions necessarily involve some instance where has_operation points to Add:real?"
            ]
          },
          {
            "axiom": "real datatype propertyRestrictions [has_operation some Promote:real]",
            "CQ": [
              "Are all entities in the 'real datatype' class required to have at least one 'has_operation' relationship involving 'Promote:real'?",
              "Is it possible for a 'real datatype' instance to lack the 'has_operation' property with respect to 'Promote:real'?",
              "Does the specification of 'real datatype' entail that there exists at least one association via 'has_operation' to 'Promote:real'?"
            ]
          },
          {
            "axiom": "real datatype propertyRestrictions [has_operation some Equal:real]",
            "CQ": [
              "Is every instance with the property 'has_operation' necessarily associated with at least one real value equal to a specific real number?",
              "Must there exist a real value such that the property 'has_operation' relates an entity to a value exactly matching that real number?",
              "Can an entity be classified under this restriction if it does not possess a 'has_operation' relation to any real value equal to a particular real number?"
            ]
          },
          {
            "axiom": "real datatype propertyRestrictions [has_member some real factor]",
            "CQ": [
              "Is every instance defined by 'real datatype propertyRestrictions' required to have at least one 'has_member' relationship with a 'real factor'?",
              "Can an entity covered by 'real datatype propertyRestrictions' exist without associating to a 'real factor' via the 'has_member' property?",
              "Does the specification of 'real datatype propertyRestrictions' imply the involvement of at least one 'real factor' through the 'has_member' property?"
            ]
          }
        ]
      },
      "non-aggregate generator": {
        "axiom": {
          "subClassOf": [
            "generated datatype generator"
          ],
          "disjointWith": [
            "defined generator",
            "aggregate datatype",
            "aggregate generator"
          ],
          "equivalentClass": [
            "(choice generator or pointer generator or procedure generator)"
          ]
        },
        "description": "non-aggregate generator is defined as a subclass of generated datatype generator, and is explicitly disjoint from defined generator, aggregate datatype, and aggregate generator. Every non-aggregate generator is equivalent to being either a choice generator, pointer generator, or procedure generator. This class groups generator types that are not aggregate in nature, thereby excluding those that represent defined, aggregate, or aggregate-related generator functionalities.",
        "CQ": [
          {
            "axiom": "non-aggregate generator subClassOf generated datatype generator",
            "CQ": [
              "Is non-aggregate generator classified under the broader category of generated datatype generator?",
              "Which generator types are more specific than generated datatype generator, such as non-aggregate generator?",
              "To which higher-level categories does non-aggregate generator belong?"
            ]
          },
          {
            "axiom": "non-aggregate generator disjointWith defined generator",
            "CQ": [
              "What ontological separation is defined between non-aggregate generators and defined generators?",
              "Is there any instance that could simultaneously belong to both non-aggregate generator and defined generator classes?",
              "Which generator categories are specified as mutually exclusive with the defined generator class?"
            ]
          },
          {
            "axiom": "non-aggregate generator disjointWith aggregate datatype",
            "CQ": [
              "How does the ontology distinguish between non-aggregate generators and aggregate datatypes?",
              "Is there any instance that can be classified as both a non-aggregate generator and an aggregate datatype?",
              "Which ontology classes are specified as disjoint with aggregate datatype?"
            ]
          },
          {
            "axiom": "non-aggregate generator disjointWith aggregate generator",
            "CQ": [
              "What logical separation is formalized between non-aggregate generators and aggregate generators in the ontology?",
              "Is any device allowed to be classified as both a non-aggregate generator and an aggregate generator simultaneously?",
              "Which generator types, other than aggregate generators, are specified to be disjoint with non-aggregate generators?"
            ]
          },
          {
            "axiom": "non-aggregate generator equivalentClass (choice generator or pointer generator or procedure generator)",
            "CQ": [
              "Is a non-aggregate generator necessarily equivalent to either a choice generator, a pointer generator, or a procedure generator?",
              "Is every non-aggregate generator either a choice generator, a pointer generator, or a procedure generator, and vice versa?",
              "Are the classes choice generator, pointer generator, and procedure generator jointly exhaustive and mutually exclusive with respect to non-aggregate generator?"
            ]
          }
        ]
      },
      "numericalness": {
        "axiom": {
          "subClassOf": [
            "datatype property"
          ],
          "disjointWith": [
            "cardinality",
            "order",
            "boundedness",
            "equality"
          ],
          "equivalentClass": [
            "(numeric or non-numeric)"
          ]
        },
        "description": "numericalness is a subclass of datatype property that classifies properties as either numeric or non-numeric. It is formally specified to be equivalent to the union of numeric and non-numeric, meaning all members must belong to one of these two categories. Additionally, numericalness is explicitly disjoint with cardinality, order, boundedness, and equality, ensuring these property types are mutually exclusive and no property can simultaneously belong to both numericalness and any of these other classes. This class captures the essential distinction between properties based on their numerical character.",
        "CQ": [
          {
            "axiom": "numericalness subClassOf datatype property",
            "CQ": [
              "Is numericalness categorized under datatype property?",
              "Which datatype properties encompass numericalness as a more specific property?",
              "What broader property classification includes numericalness within its hierarchy?"
            ]
          },
          {
            "axiom": "numericalness disjointWith cardinality",
            "CQ": [
              "What logical separation is defined between numericalness and cardinality in the ontology?",
              "Is there any entity in the ontology that can be classified as both numericalness and cardinality?",
              "Which other classes are formally specified as incompatible with numericalness?"
            ]
          },
          {
            "axiom": "numericalness disjointWith order",
            "CQ": [
              "What logical separation is defined between numericalness and order in the ontology?",
              "Is there any entity that can simultaneously belong to both numericalness and order?",
              "Which classes are specified as disjoint with numericalness?"
            ]
          },
          {
            "axiom": "numericalness disjointWith boundedness",
            "CQ": [
              "How does the ontology differentiate between numericalness and boundedness?",
              "Is it allowed for an entity to possess both numericalness and boundedness simultaneously?",
              "Which classes are explicitly marked as disjoint with boundedness?"
            ]
          },
          {
            "axiom": "numericalness disjointWith equality",
            "CQ": [
              "How does the ontology differentiate between numericalness and equality?",
              "Is it permissible for an entity to possess both numericalness and equality attributes simultaneously?",
              "Which classes within the ontology are specified as being incompatible with numericalness?"
            ]
          },
          {
            "axiom": "numericalness equivalentClass (numeric or non-numeric)",
            "CQ": [
              "Is numericalness defined as the union of numeric and non-numeric entities?",
              "Are all instances of numericalness necessarily either numeric or non-numeric?",
              "Does numericalness encompass all and only those classes that are numeric or non-numeric?"
            ]
          }
        ]
      },
      "boundedness": {
        "axiom": {
          "subClassOf": [
            "datatype property"
          ],
          "disjointWith": [
            "equality"
          ],
          "equivalentClass": [
            "(bounded or unbounded)"
          ]
        },
        "description": "boundedness is defined as a subclass of datatype property and is explicitly disjoint with equality, indicating that no instance can simultaneously represent boundedness and equality. It is further specified as being equivalent to either bounded or unbounded, meaning every instance of boundedness must fall into one of these two categories. This class formally captures the notion of whether a datatype property exhibits bounds or not, distinguishing it from properties concerning equality.",
        "CQ": [
          {
            "axiom": "boundedness subClassOf datatype property",
            "CQ": [
              "Is boundedness classified as a kind of datatype property?",
              "Which datatype properties have more specific subclasses, such as boundedness?",
              "To which broader property categories does boundedness belong?"
            ]
          },
          {
            "axiom": "boundedness disjointWith equality",
            "CQ": [
              "What kind of logical constraint prevents boundedness and equality from overlapping within the ontology?",
              "Is it possible for an entity to simultaneously satisfy both boundedness and equality?",
              "Which classes, in addition to equality, are declared disjoint with boundedness?"
            ]
          },
          {
            "axiom": "boundedness equivalentClass (bounded or unbounded)",
            "CQ": [
              "Is boundedness defined as the union of bounded and unbounded classes?",
              "Are all instances of boundedness either bounded or unbounded?",
              "Does boundedness include any class other than bounded and unbounded?"
            ]
          }
        ]
      },
      "real field component": {
        "axiom": {
          "subClassOf": [
            "primitive field component"
          ],
          "disjointWith": [
            "boolean field component"
          ],
          "propertyRestrictions": [
            "[role_of some real datatype]"
          ]
        },
        "description": "real field component is defined as a subclass of primitive field component, disjoint with boolean field componentâ€”which ensures that no individual can be both a real field component and a boolean field component simultaneously. Members of this class are further constrained by a property restriction: each real field component must have a role with respect to some real datatype. This means that any real field component always relates in some way to a real (numeric, continuous) datatype, distinguishing it from other types of primitive field components.",
        "CQ": [
          {
            "axiom": "real field component subClassOf primitive field component",
            "CQ": [
              "Is real field component classified as a kind of primitive field component?",
              "Which components fall under the category of primitive field component, such as real field component?",
              "What are the broader classes that encompass real field component?"
            ]
          },
          {
            "axiom": "real field component disjointWith boolean field component",
            "CQ": [
              "Are real field components and boolean field components treated as mutually exclusive categories in the ontology?",
              "Does any field component belong to both the real field component and boolean field component classes?",
              "Which field component types are defined as disjoint with real field component?"
            ]
          },
          {
            "axiom": "real field component propertyRestrictions [role_of some real datatype]",
            "CQ": [
              "Does a real field component necessarily play the role of some real datatype?",
              "Is it required for every real field component to be associated, through 'role_of', with at least one instance of real datatype?",
              "Can a real field component exist without participating in the 'role_of' relationship with any real datatype?"
            ]
          }
        ]
      },
      "choice datatype": {
        "axiom": {
          "subClassOf": [
            "non-aggregate datatype"
          ],
          "propertyRestrictions": [
            "[has_quality some exact]",
            "[has_operation some Discriminant:choice]",
            "[has_quality some non-ordered]",
            "[has_operation some Tag:choice]",
            "[has_operation some Cast:choice]",
            "[has_operation some Equal:choice]",
            "[has_member some tag-type]",
            "[has_member some alternative-list]",
            "[has_member some choice generator]"
          ]
        },
        "description": "choice datatype is a subclass of non-aggregate datatype, characterized by having values that represent a single value selected from a set of alternative datatypes. These alternative datatypes are differentiated by their correspondence to values from a tag-type, known as the tag datatype. Formally, a choice datatype has members such as tag-type, alternative-list, and a choice generator; it is subject to property restrictions requiring qualities such as exactness and being non-ordered. It supports specific operations, including Discriminant:choice, Tag:choice, Cast:choice, and Equal:choice, which facilitate the selection and identification of alternatives by tag values.",
        "CQ": [
          {
            "axiom": "choice datatype subClassOf non-aggregate datatype",
            "CQ": [
              "Is every choice datatype classified under non-aggregate datatype?",
              "Which datatypes are encompassed by the broader category of non-aggregate datatype, specifically including choice datatype?",
              "What general datatype categories does choice datatype fall under?"
            ]
          },
          {
            "axiom": "choice datatype propertyRestrictions [has_quality some exact]",
            "CQ": [
              "Is it required that every choice possesses at least one quality described as exact?",
              "Can a choice exist without having the quality exact?",
              "Does the existence of the has_quality relation to exact sufficiently characterize the class choice?"
            ]
          },
          {
            "axiom": "choice datatype propertyRestrictions [has_operation some Discriminant:choice]",
            "CQ": [
              "Does every instance that has the 'has_operation' property necessarily relate to at least one 'Discriminant:choice'?",
              "Is it possible for an entity restricted by 'has_operation some Discriminant:choice' to lack the 'has_operation' property entirely?",
              "Can something classified under this restriction have 'has_operation' only with values outside 'Discriminant:choice'?"
            ]
          },
          {
            "axiom": "choice datatype propertyRestrictions [has_quality some non-ordered]",
            "CQ": [
              "Must every instance of 'choice' possess at least one 'has_quality' relation to a 'non-ordered' entity?",
              "Is it required that 'choice' entities have the 'has_quality' attribute assigned with at least one value categorized as 'non-ordered'?",
              "Can a 'choice' exist without exhibiting the 'has_quality' property with respect to a 'non-ordered' quality?"
            ]
          },
          {
            "axiom": "choice datatype propertyRestrictions [has_operation some Tag:choice]",
            "CQ": [
              "Is every instance of 'choice' required to have at least one 'has_operation' relation to an entity of type Tag:choice?",
              "Can a 'choice' exist without the 'has_operation' property relating it to Tag:choice?",
              "Do all 'choice' entities necessarily participate in some 'has_operation' association with Tag:choice?"
            ]
          },
          {
            "axiom": "choice datatype propertyRestrictions [has_operation some Cast:choice]",
            "CQ": [
              "Is it required that Choice always involves at least one has_operation relation with an instance of Cast?",
              "Can a Choice exist without having the has_operation property filled by Cast?",
              "Does every instance of Choice necessarily participate in a has_operation relationship with Cast?"
            ]
          },
          {
            "axiom": "choice datatype propertyRestrictions [has_operation some Equal:choice]",
            "CQ": [
              "Is it required for 'choice' to have at least one 'has_operation' property relating to 'Equal'?",
              "Can an instance of 'choice' exist without being associated via 'has_operation' to 'Equal'?",
              "Does every 'choice' necessarily involve the 'has_operation' property with the value 'Equal' at least once?"
            ]
          },
          {
            "axiom": "choice datatype propertyRestrictions [has_member some tag-type]",
            "CQ": [
              "Is every instance of 'choice' required to have at least one 'has_member' relationship to a 'tag-type'?",
              "Can a 'choice' exist without being associated with any 'tag-type' via 'has_member'?",
              "Does the ontology stipulate that 'choice' entities necessarily feature at least one 'has_member' link to a 'tag-type' entity?"
            ]
          },
          {
            "axiom": "choice datatype propertyRestrictions [has_member some alternative-list]",
            "CQ": [
              "Is it required that every 'choice' includes at least one member from the 'alternative-list' via the has_member property?",
              "Can a 'choice' exist without having any members linked through the has_member property to the alternative-list?",
              "Must an entity of type 'choice' always have at least one relationship to an instance classified under 'alternative-list' using has_member?"
            ]
          },
          {
            "axiom": "choice datatype propertyRestrictions [has_member some choice generator]",
            "CQ": [
              "Is it required that every choice must have at least one member that is a choice generator?",
              "Can a choice exist without having any member that is a choice generator?",
              "Does the definition of choice ensure the presence of at least one has_member relationship with a choice generator?"
            ]
          }
        ]
      },
      "DAG datatype": {
        "axiom": {
          "subClassOf": [
            "labeled graph datatype"
          ],
          "propertyRestrictions": [
            "[has_member some DAG datatype generator]"
          ]
        },
        "description": "DAG datatype is specified as a subclass of labeled graph datatype, meaning it inherits all characteristics of a labeled graph datatype. Additionally, every DAG datatype must have at least one member that is a DAG datatype generator, as indicated by the property restriction [has_member some DAG datatype generator]. This ensures each instance of DAG datatype is associated with a generator tailored for directed acyclic graph structures.",
        "CQ": [
          {
            "axiom": "DAG datatype subClassOf labeled graph datatype",
            "CQ": [
              "Does the category labeled graph datatype encompass DAG datatype as a more specific type?",
              "Which datatypes are directly categorized under labeled graph datatype, including DAG datatype?",
              "To what broader datatype classes does DAG datatype belong?"
            ]
          },
          {
            "axiom": "DAG datatype propertyRestrictions [has_member some DAG datatype generator]",
            "CQ": [
              "Must a DAG datatype always have at least one 'has_member' relationship with a DAG datatype generator?",
              "Can a DAG datatype exist without being associated to any DAG datatype generator through the 'has_member' property?",
              "Is the presence of a 'has_member' link to a DAG datatype generator necessary for every DAG datatype instance?"
            ]
          }
        ]
      },
      "character datatype": {
        "axiom": {
          "subClassOf": [
            "non-numeric unordered primitive datatype"
          ],
          "disjointWith": [
            "discrete datatype",
            "boolean datatype"
          ],
          "propertyRestrictions": [
            "[has_quality some exact]",
            "[has_operation some Equal:character]",
            "[has_identifier some character-set identifier]"
          ]
        },
        "description": "character datatype is defined as a subclass of non-numeric unordered primitive datatype. It is disjoint with discrete datatype and boolean datatype, ensuring that no datatype can be both a character datatype and either of those types. Members of the character datatype class are characterized by possessing at least one exact quality, supporting the Equal operation restricted to characters, and being associated with at least one character-set identifier. This formalization captures the essential properties of character datatypes, which are used to represent single text characters from specific character sets and are distinct from numeric or logical datatypes.",
        "CQ": [
          {
            "axiom": "character datatype subClassOf non-numeric unordered primitive datatype",
            "CQ": [
              "Does character datatype fall under the broader classification of non-numeric unordered primitive datatype?",
              "Which primitive datatypes are specified as subclasses of non-numeric unordered primitive datatype?",
              "What general datatype categories encompass character datatype?"
            ]
          },
          {
            "axiom": "character datatype disjointWith discrete datatype",
            "CQ": [
              "What classifies a datatype as either character or discrete within the ontology?",
              "Is it allowed for a datatype to be both categorized as character and discrete?",
              "Which datatype categories are specified as mutually exclusive with character datatype?"
            ]
          },
          {
            "axiom": "character datatype disjointWith boolean datatype",
            "CQ": [
              "How does the ontology differentiate between character datatype and boolean datatype?",
              "Is it allowed for a datatype to be both a character datatype and a boolean datatype?",
              "Which datatypes are defined as mutually exclusive with boolean datatype?"
            ]
          },
          {
            "axiom": "character datatype propertyRestrictions [has_quality some exact]",
            "CQ": [
              "Is it required that every character has at least one quality described as 'exact'?",
              "Must a character necessarily exhibit the property 'has_quality' with the value 'exact' at least once?",
              "Does the character class ensure that all of its instances possess some exact quality?"
            ]
          },
          {
            "axiom": "character datatype propertyRestrictions [has_operation some Equal:character]",
            "CQ": [
              "Is every character required to have at least one operation of type 'Equal'?",
              "Does the ontology define that there exists an 'Equal' operation associated with each character via the 'has_operation' property?",
              "Can a character exist without being linked to an 'Equal' operation through 'has_operation'?"
            ]
          },
          {
            "axiom": "character datatype propertyRestrictions [has_identifier some character-set identifier]",
            "CQ": [
              "Must every character have at least one identifier from some character-set?",
              "Is it required that a character is associated with an identifier belonging to a specific character-set?",
              "Can a character exist without possessing any identifier corresponding to a character-set?"
            ]
          }
        ]
      },
      "discrete datatype": {
        "axiom": {
          "subClassOf": [
            "non-numeric unordered primitive datatype"
          ],
          "disjointWith": [
            "boolean datatype"
          ],
          "propertyRestrictions": [
            "[has_member some discrete-value-list]",
            "[has_operation some Equal:discrete]",
            "[has_quality some exact]"
          ]
        },
        "description": "discrete datatype is a subclass of non-numeric unordered primitive datatype, and it is explicitly disjoint with boolean datatype, ensuring that no individual can be both a discrete datatype and a boolean datatype. Members of this class must have at least one member from a discrete-value-list, support at least the equality operation (Equal:discrete), and possess the quality of exactness. This formalization captures the distinct, non-numeric, unordered nature of discrete datatypes, characterized by well-defined, separate values and an emphasis on precise equality comparisons.",
        "CQ": [
          {
            "axiom": "discrete datatype subClassOf non-numeric unordered primitive datatype",
            "CQ": [
              "Is discrete datatype classified under non-numeric unordered primitive datatype?",
              "Which datatypes are categorized as subtypes of non-numeric unordered primitive datatype?",
              "What broader datatype classes include discrete datatype as a subtype?"
            ]
          },
          {
            "axiom": "discrete datatype disjointWith boolean datatype",
            "CQ": [
              "How does the ontology define the interaction between discrete datatypes and boolean datatypes?",
              "Is it allowed for a datatype to be both classified as discrete and as boolean?",
              "Which datatype groups, besides boolean datatype, are specified as disjoint with discrete datatype?"
            ]
          },
          {
            "axiom": "discrete datatype propertyRestrictions [has_member some discrete-value-list]",
            "CQ": [
              "Is it required for a discrete datatype property restriction to have at least one member from the discrete value list?",
              "Does every instance with a discrete datatype property restriction necessarily include some values from the discrete-value-list?",
              "Can an entity with a discrete datatype property restriction exist without having any values specified in the discrete-value-list?"
            ]
          },
          {
            "axiom": "discrete datatype propertyRestrictions [has_operation some Equal:discrete]",
            "CQ": [
              "Is it required that an entity with discrete datatype property restrictions must have at least one operation classified as 'Equal:discrete'?",
              "Can a discrete datatype property restriction exist without being related to an 'Equal:discrete' operation through the has_operation property?",
              "Does every instance with discrete datatype property restrictions necessarily possess some 'has_operation' relation to the 'Equal:discrete' operation?"
            ]
          },
          {
            "axiom": "discrete datatype propertyRestrictions [has_quality some exact]",
            "CQ": [
              "Is every instance with the discrete datatype required to possess at least one 'has_quality' relationship to 'exact'?",
              "Can an entity classified by the discrete datatype lack any association via 'has_quality' to 'exact'?",
              "Must the discrete datatype always be described by the property 'has_quality' with value 'exact'?"
            ]
          }
        ]
      },
      "generated datatype generator": {
        "axiom": {
          "subClassOf": [
            "datatype generator"
          ],
          "equivalentClass": [
            "(non-aggregate generator or aggregate generator)"
          ],
          "propertyRestrictions": [
            "[is_member_of some generated datatype]"
          ]
        },
        "description": "generated datatype generator is defined as a subclass of datatype generator and is considered equivalent to either a non-aggregate generator or an aggregate generator. Members of this class must be associated, via the is_member_of property, with some generated datatype. The class is also described by the synonym \"datatype constructor.\"",
        "CQ": [
          {
            "axiom": "generated datatype generator subClassOf datatype generator",
            "CQ": [
              "Is generated datatype generator an instance of the broader datatype generator category?",
              "What other specific kinds fall under the datatype generator category in addition to generated datatype generator?",
              "Which higher-level groups include generated datatype generator as a member?"
            ]
          },
          {
            "axiom": "generated datatype generator equivalentClass (non-aggregate generator or aggregate generator)",
            "CQ": [
              "Is a generated datatype generator defined as either a non-aggregate generator or an aggregate generator?",
              "Are all generated datatype generators necessarily instances of non-aggregate generator or aggregate generator, with no additional members?",
              "Is a generated datatype generator logically equivalent to the union of non-aggregate generator and aggregate generator?"
            ]
          },
          {
            "axiom": "generated datatype generator propertyRestrictions [is_member_of some generated datatype]",
            "CQ": [
              "Is it required that an entity classified under 'generated datatype' must be a member of at least one 'generated datatype' instance?",
              "Does every instance of 'generated datatype' participate in the 'is_member_of' relationship with some instance of 'generated datatype'?",
              "Can a 'generated datatype' exist without being linked via 'is_member_of' to any other 'generated datatype'?"
            ]
          }
        ]
      },
      "integer base datatype": {
        "axiom": {
          "subClassOf": [
            "base type"
          ],
          "propertyRestrictions": [
            "[role_of some integer datatype]"
          ]
        },
        "description": "integer base datatype is defined as a subclass of base type and is constrained by the axiom that it must play the role of some integer datatype. This means that every instance of integer base datatype is a specific kind of base type that is characterized by being related to at least one integer datatype through the role_of property.",
        "CQ": [
          {
            "axiom": "integer base datatype subClassOf base type",
            "CQ": [
              "Is integer base datatype categorized under the broader base type classification?",
              "Which datatypes are more specific than base type, such as integer base datatype?",
              "To which higher-level types does integer base datatype conceptually pertain?"
            ]
          },
          {
            "axiom": "integer base datatype propertyRestrictions [role_of some integer datatype]",
            "CQ": [
              "Is it required that the base datatype 'integer' has at least one role filled by an integer value?",
              "Does every instance of the base datatype 'integer' necessarily possess the property 'role_of' relating it to an integer value?",
              "Can an instance of the base datatype 'integer' exist without the property 'role_of' connecting it to an integer?"
            ]
          }
        ]
      },
      "record of primitives datatype": {
        "axiom": {
          "subClassOf": [
            "record (tuple) datatype"
          ],
          "propertyRestrictions": [
            "[has_member some primitive field-list]"
          ]
        },
        "description": "record of primitives datatype is defined as a subclass of record (tuple) datatype. Members of this class are characterized by the property restriction that they must have at least one member that is a primitive field-list. This formalization ensures that any instance of record of primitives datatype represents a structured record whose fields are all of primitive types.",
        "CQ": [
          {
            "axiom": "record of primitives datatype subClassOf record (tuple) datatype",
            "CQ": [
              "Is record of primitives datatype encompassed within the record (tuple) datatype category?",
              "Which datatypes are specialized forms of record (tuple) datatype, including record of primitives datatype?",
              "What broader datatype categories does record of primitives datatype fall under?"
            ]
          },
          {
            "axiom": "record of primitives datatype propertyRestrictions [has_member some primitive field-list]",
            "CQ": [
              "Is every record of primitives required to have at least one member that is a primitive listed in the field list?",
              "Does the definition of a record of primitives entail that it must possess a 'has_member' relationship with at least one entity in the primitive field-list?",
              "Can a record of primitives exist without having the 'has_member' property connecting it to an element from the primitive field-list?"
            ]
          }
        ]
      },
      "unlabeled dataset record datatype": {
        "axiom": {
          "subClassOf": [
            "record (tuple) datatype"
          ],
          "propertyRestrictions": [
            "[has_member some unlabeled dataset field-list]"
          ]
        },
        "description": "unlabeled dataset record datatype is defined as a subclass of record (tuple) datatype. Members of this class are characterized by the presence of at least one has_member relationship to an unlabeled dataset field-list, meaning each record contains a list of fields but without associated labels. This structure is suitable for representing data records in datasets where attribute names are absent.",
        "CQ": [
          {
            "axiom": "unlabeled dataset record datatype subClassOf record (tuple) datatype",
            "CQ": [
              "Does unlabeled dataset record datatype fall under the category of record (tuple) datatype?",
              "Which datatypes are classified as more specific types than record (tuple) datatype, such as unlabeled dataset record datatype?",
              "What are the general datatype categories that encompass unlabeled dataset record datatype?"
            ]
          },
          {
            "axiom": "unlabeled dataset record datatype propertyRestrictions [has_member some unlabeled dataset field-list]",
            "CQ": [
              "Does every unlabeled dataset record necessarily have at least one has_member relationship to an unlabeled dataset field-list?",
              "Is it required for unlabeled dataset records to include some member from the unlabeled dataset field-list?",
              "Can an unlabeled dataset record exist without being related via has_member to any unlabeled dataset field-list?"
            ]
          }
        ]
      },
      "set of integer datatype": {
        "axiom": {
          "subClassOf": [
            "set datatype"
          ],
          "propertyRestrictions": [
            "[has_member some integer base datatype]"
          ]
        },
        "description": "set of integer datatype is defined as a subclass of set datatype. Each instance of this class is constrained by the requirement that it has members, all of which are from the integer base datatype. This ensures that any individual classified as set of integer datatype can only contain integers as its elements.",
        "CQ": [
          {
            "axiom": "set of integer datatype subClassOf set datatype",
            "CQ": [
              "Is set datatype a broader category that encompasses set of integer datatype?",
              "Which datatypes are more specific than set datatype, such as set of integer datatype?",
              "What general datatype groupings include set of integer datatype?"
            ]
          },
          {
            "axiom": "set of integer datatype propertyRestrictions [has_member some integer base datatype]",
            "CQ": [
              "Is it required for a set to include at least one member with an integer base datatype?",
              "Must every instance of the set have the 'has_member' property assigned to some value of type integer?",
              "Can a set of integer datatype propertyRestrictions exist without containing an integer as a member?"
            ]
          }
        ]
      },
      "enumerated datatype": {
        "axiom": {
          "subClassOf": [
            "non-numeric ordered primitive datatype"
          ],
          "disjointWith": [
            "date and time datatype",
            "ordinal datatype"
          ],
          "propertyRestrictions": [
            "[has_operation some Equal:enumerated]",
            "[has_member some enumerated-value-list]",
            "[has_operation some Successor:enumerated]",
            "[has_quality some bounded]",
            "[has_operation some InOrder:enumerated]",
            "[has_quality some exact]"
          ]
        },
        "description": "enumerated datatype is defined as a subclass of non-numeric ordered primitive datatype, and is explicitly disjoint with both date and time datatype and ordinal datatype. As a discrete (synonymously, enumerated) datatype, it is characterized by having an explicit set of member values (enumerated-value-list) and supports specific operations such as equality checking (Equal:enumerated), successor determination (Successor:enumerated), and ordered comparison (InOrder:enumerated). Additionally, every enumerated datatype must possess qualities of being bounded (having finite limits) and exact (precisely defined), ensuring it only allows selection from a strictly defined, ordered set of non-numeric values.",
        "CQ": [
          {
            "axiom": "enumerated datatype subClassOf non-numeric ordered primitive datatype",
            "CQ": [
              "Does enumerated datatype fall under the category of non-numeric ordered primitive datatypes?",
              "Which specific datatypes are specialized forms of non-numeric ordered primitive datatype, such as enumerated datatype?",
              "What broader datatype classifications include enumerated datatype?"
            ]
          },
          {
            "axiom": "enumerated datatype disjointWith date and time datatype",
            "CQ": [
              "What is the formal distinction between the enumerated datatype and the date and time datatype within the ontology?",
              "Is it allowed for a datatype to be classified as both enumerated and date and time?",
              "Which datatypes are explicitly set as disjoint with the date and time datatype in this model?"
            ]
          },
          {
            "axiom": "enumerated datatype disjointWith ordinal datatype",
            "CQ": [
              "How does the ontology distinguish between enumerated datatypes and ordinal datatypes?",
              "Is there any datatype that can be classified as both enumerated and ordinal?",
              "Which datatypes are defined as mutually exclusive with ordinal datatypes?"
            ]
          },
          {
            "axiom": "enumerated datatype propertyRestrictions [has_operation some Equal:enumerated]",
            "CQ": [
              "Does the class propertyRestrictions require at least one 'has_operation' relation to an instance of Equal from the enumerated set?",
              "Is it necessary that propertyRestrictions has an operation that is specifically Equal, according to the enumerated values?",
              "Are instances of propertyRestrictions restricted to possessing only 'has_operation' relationships involving the Equal operation from the enumerated options?"
            ]
          },
          {
            "axiom": "enumerated datatype propertyRestrictions [has_member some enumerated-value-list]",
            "CQ": [
              "Are all members described by the enumerated-value-list necessarily present via the has_member property?",
              "Is it possible for an entity related by has_member to include values not specified in the enumerated-value-list?",
              "Does the restriction guarantee that has_member only relates to values included in the enumerated-value-list?"
            ]
          },
          {
            "axiom": "enumerated datatype propertyRestrictions [has_operation some Successor:enumerated]",
            "CQ": [
              "Is it required that any instance with a propertyRestriction on 'has_operation' must relate to at least one member of the 'Successor' enumeration?",
              "Does the presence of a propertyRestriction on 'has_operation' necessarily imply association with a value specifically from the enumerated set 'Successor'?",
              "Can propertyRestrictions specify the existence of a 'has_operation' relationship exclusively with members of the enumerated class 'Successor'?"
            ]
          },
          {
            "axiom": "enumerated datatype propertyRestrictions [has_quality some bounded]",
            "CQ": [
              "Does the enumerated datatype have at least one quality that is bounded?",
              "Must every enumerated datatype include some relationship to a bounded quality?",
              "Is it possible for an enumerated datatype not to possess any qualities unless one of them is bounded?"
            ]
          },
          {
            "axiom": "enumerated datatype propertyRestrictions [has_operation some InOrder:enumerated]",
            "CQ": [
              "Is it required that entities with propertyRestrictions have at least one has_operation value from the InOrder enumerated set?",
              "Can propertyRestrictions include has_operation values that are not part of the InOrder enumerated type?",
              "Does the presence of propertyRestrictions guarantee that the has_operation property is assigned to an individual in the InOrder enumeration?"
            ]
          },
          {
            "axiom": "enumerated datatype propertyRestrictions [has_quality some exact]",
            "CQ": [
              "Are entities in the enumerated datatype required to have at least one 'has_quality' relationship to 'exact'?",
              "Is it necessary that any instance of the enumerated datatype possesses the property 'has_quality' with the value 'exact'?",
              "Can an instance be part of the enumerated datatype if it lacks the 'has_quality' property relating to 'exact'?"
            ]
          }
        ]
      },
      "range": {
        "axiom": {
          "subClassOf": [
            "value expression"
          ],
          "propertyRestrictions": [
            "[has_member some lower bound]",
            "[has_member some upper bound]"
          ]
        },
        "description": "range is defined as a subclass of value expression. Members of this class are characterized by having at least one association, through the property has_member, to both a lower bound and an upper bound. This formalization ensures that each instance of range must specify some lower and some upper bound, thereby representing a bounded interval or extent within the context of value expressions.",
        "CQ": [
          {
            "axiom": "range subClassOf value expression",
            "CQ": [
              "Is value expression a broader category that encompasses range?",
              "Which specific subcategories fall under value expression, such as range?",
              "To which higher-level classes does range belong in the ontology?"
            ]
          },
          {
            "axiom": "range propertyRestrictions [has_member some lower bound]",
            "CQ": [
              "Is every value of the property 'has_member' required to include at least one instance from the class 'lower bound'?",
              "Does enforcing the property restriction 'has_member some lower bound' ensure that any entity linked by 'has_member' must have a member from the 'lower bound' class?",
              "Can an entity have the 'has_member' property without referencing at least one 'lower bound' individual?"
            ]
          },
          {
            "axiom": "range propertyRestrictions [has_member some upper bound]",
            "CQ": [
              "Does the property 'has_member' necessarily include at least one entity of type 'upper bound'?",
              "Is it required for all values of 'has_member' to be instances of 'upper bound'?",
              "Can 'has_member' ever link to an entity outside of the class 'upper bound'?"
            ]
          }
        ]
      },
      "extended datatype": {
        "axiom": {
          "subClassOf": [
            "data representational model"
          ],
          "propertyRestrictions": [
            "[has_quality some datatype property]",
            "[has_member some subtype generator]",
            "[has_attribute some value space]",
            "[has_member some base type]"
          ]
        },
        "description": "extended datatype is defined as a subclass of data representational model. It is characterized by possessing at least one datatype property (has_quality some datatype property), at least one subtype generator as a member (has_member some subtype generator), at least one value space attribute (has_attribute some value space), and at least one base type as a member (has_member some base type). The class is also associated with the synonym \"subtype\". This formalization ensures that any instance of extended datatype is richly described in terms of qualities, generative subtypes, value domains, and derived from fundamental base types.",
        "CQ": [
          {
            "axiom": "extended datatype subClassOf data representational model",
            "CQ": [
              "Is extended datatype categorized under data representational model?",
              "Which data representational model subclasses include extended datatype?",
              "What broader classes encompass extended datatype within the ontology?"
            ]
          },
          {
            "axiom": "extended datatype propertyRestrictions [has_quality some datatype property]",
            "CQ": [
              "Is it required that every instance of extended possesses at least one 'has_quality' property with a datatype value?",
              "Must each extended entity be associated with some value through the 'has_quality' property?",
              "Does the existence of an extended entity imply the presence of a datatype property assertion via 'has_quality'?"
            ]
          },
          {
            "axiom": "extended datatype propertyRestrictions [has_member some subtype generator]",
            "CQ": [
              "Does the extended datatype require that it must have at least one member that is an instance of a subtype generator?",
              "Is it necessary for every extended datatype to possess the has_member property relating to a subtype generator?",
              "Can an extended datatype exist without being associated with any subtype generator via the has_member property?"
            ]
          },
          {
            "axiom": "extended datatype propertyRestrictions [has_attribute some value space]",
            "CQ": [
              "Is every instance with the 'extended datatype propertyRestrictions' required to have at least one 'has_attribute' in the value space?",
              "Can something classified under 'extended datatype propertyRestrictions' exist without possessing the 'has_attribute' property associated with any value space?",
              "Does the existence of 'has_attribute' with any value from the specified space determine membership in 'extended datatype propertyRestrictions'?"
            ]
          },
          {
            "axiom": "extended datatype propertyRestrictions [has_member some base type]",
            "CQ": [
              "Is every instance with the property 'has_member' required to include at least one value of the base type?",
              "Can something be classified under extended datatype propertyRestrictions if it does not possess the 'has_member' property pointing to any base type?",
              "Does the existence of a 'has_member' property with a value from the base type suffice for an entity to meet the extended datatype propertyRestrictions criterion?"
            ]
          }
        ]
      },
      "sequence of discrete datatype": {
        "axiom": {
          "subClassOf": [
            "sequence datatype"
          ],
          "propertyRestrictions": [
            "[has_member some discrete base type]"
          ]
        },
        "description": "sequence of discrete datatype is defined as a subclass of sequence datatype, meaning it inherits all characteristics associated with sequence datatypes. Individuals of this class are further characterized by the property that each member of the sequence must be of a discrete base type. This restriction ensures that only elements classified as discrete base types are permitted as members in such sequences, differentiating this class from more general sequence datatypes that may include other types of elements.",
        "CQ": [
          {
            "axiom": "sequence of discrete datatype subClassOf sequence datatype",
            "CQ": [
              "Is sequence of discrete datatype classified as a kind of sequence datatype?",
              "Which datatypes are more specific instances under the category of sequence datatype?",
              "To which higher-level datatype categories does sequence of discrete datatype belong?"
            ]
          },
          {
            "axiom": "sequence of discrete datatype propertyRestrictions [has_member some discrete base type]",
            "CQ": [
              "Must every sequence contain at least one member drawn from the discrete base type?",
              "Is it required that a sequence always includes a value for the property 'has_member' sourced from a discrete base type?",
              "Do all instances of the sequence have at least one association via 'has_member' to an element of the discrete base type?"
            ]
          }
        ]
      },
      "homogenous  unordered aggregate datatype with variable size": {
        "axiom": {
          "subClassOf": [
            "homogenous aggregate datatype with variable size"
          ],
          "propertyRestrictions": [
            "[has_member some homogenous unordered aggregate generator with variable size]"
          ]
        },
        "description": "homogenous unordered aggregate datatype with variable size is a subclass of homogenous aggregate datatype with variable size. Each instance of this class must have at least one member that is an instance of homogenous unordered aggregate generator with variable size. This class groups together collections of elements that are all of the same type, where the order of elements is not significant, and the number of elements may vary.",
        "CQ": [
          {
            "axiom": "homogenous  unordered aggregate datatype with variable size subClassOf homogenous aggregate datatype with variable size",
            "CQ": [
              "Does every homogenous unordered aggregate datatype with variable size fall under the classification of homogenous aggregate datatype with variable size?",
              "Which aggregate datatypes with variable size encompass homogenous unordered variants as specific types?",
              "What are the more general datatype categories that include homogenous unordered aggregate datatype with variable size as a subclass?"
            ]
          },
          {
            "axiom": "homogenous  unordered aggregate datatype with variable size propertyRestrictions [has_member some homogenous unordered aggregate generator with variable size]",
            "CQ": [
              "Must a homogenous unordered aggregate datatype with variable size always include at least one homogenous unordered aggregate generator with variable size as a member?",
              "Is it required that every homogenous unordered aggregate datatype with variable size is composed of one or more members which are homogenous unordered aggregate generators with variable size?",
              "Does the presence of a homogenous unordered aggregate generator with variable size as a member determine the classification of a datatype as a homogenous unordered aggregate datatype with variable size?"
            ]
          }
        ]
      },
      "aggregate field component": {
        "axiom": {
          "subClassOf": [
            "field component"
          ],
          "disjointWith": [
            "primitive field component"
          ],
          "propertyRestrictions": [
            "[role_of some aggregate datatype]"
          ]
        },
        "description": "aggregate field component is defined as a subclass of field component and is explicitly disjoint with primitive field component, meaning no instance can belong to both classes simultaneously. Every aggregate field component must play the role of or be associated with some aggregate datatype, as specified by the property restriction (role_of some aggregate datatype). This formalization captures that aggregate field components are complex field components characterized by their association with aggregate datatypes, distinguishing them from primitive field components.",
        "CQ": [
          {
            "axiom": "aggregate field component subClassOf field component",
            "CQ": [
              "Is aggregate field component categorized under the broader class of field component?",
              "Which components are defined as specializations of field component, including aggregate field component?",
              "To what higher-level classifications does aggregate field component pertain?"
            ]
          },
          {
            "axiom": "aggregate field component disjointWith primitive field component",
            "CQ": [
              "How is the mutual exclusivity of aggregate field component and primitive field component represented in the ontology?",
              "Is there any field component classified simultaneously as both aggregate and primitive?",
              "Which field component types are formally specified as disjoint with aggregate field component?"
            ]
          },
          {
            "axiom": "aggregate field component propertyRestrictions [role_of some aggregate datatype]",
            "CQ": [
              "Does every aggregate field necessarily include at least one component that plays the role_of some aggregate datatype?",
              "Is it required for an aggregate field to have a component related through role_of to an aggregate datatype?",
              "Can an aggregate field exist without any component that fulfills the role_of some aggregate datatype?"
            ]
          }
        ]
      },
      "void datatype": {
        "axiom": {
          "subClassOf": [
            "primitive datatype"
          ],
          "disjointWith": [
            "non-numeric primitive datatype",
            "numeric primitive datatype",
            "non-numeric unordered primitive datatype"
          ],
          "propertyRestrictions": [
            "[has_operation some Equal:void]"
          ]
        },
        "description": "void datatype is a subclass of primitive datatype and is explicitly disjoint from non-numeric primitive datatype, numeric primitive datatype, and non-numeric unordered primitive datatypeâ€”no individual can belong to more than one of these categories. Members of the void datatype class are characterized by supporting at least the Equal:void operation, meaning comparison for equality is defined. This class formalizes the concept of a primitive datatype that does not represent numeric or non-numeric unordered values, distinguishing it within datatype hierarchies.",
        "CQ": [
          {
            "axiom": "void datatype subClassOf primitive datatype",
            "CQ": [
              "Is void datatype categorized as a type of primitive datatype?",
              "Which data types fall under the category of primitive datatype, specifically including void datatype?",
              "To which higher-level data type groupings does void datatype conceptually belong?"
            ]
          },
          {
            "axiom": "void datatype disjointWith non-numeric primitive datatype",
            "CQ": [
              "What is the formal separation defined between void datatype and non-numeric primitive datatype?",
              "Could an instance belong simultaneously to both void datatype and non-numeric primitive datatype?",
              "Which datatypes are specified as incompatible with non-numeric primitive datatype?"
            ]
          },
          {
            "axiom": "void datatype disjointWith numeric primitive datatype",
            "CQ": [
              "What logical difference is asserted between void datatypes and numeric primitive datatypes in the ontology?",
              "Is there any datatype that can simultaneously be classified as both a void datatype and a numeric primitive datatype?",
              "Which datatypes are specified as disjoint with numeric primitive datatypes?"
            ]
          },
          {
            "axiom": "void datatype disjointWith non-numeric unordered primitive datatype",
            "CQ": [
              "How does the ontology differentiate between void datatypes and non-numeric unordered primitive datatypes?",
              "Is there any datatype that can simultaneously be classified as both a void datatype and a non-numeric unordered primitive datatype?",
              "Which additional datatypes are defined as mutually exclusive with non-numeric unordered primitive datatypes?"
            ]
          },
          {
            "axiom": "void datatype propertyRestrictions [has_operation some Equal:void]",
            "CQ": [
              "Is it a requirement for any void entity to have at least one has_operation relationship with an instance of Equal:void?",
              "Does every void entity necessarily possess an operation of type Equal:void through the has_operation property?",
              "Can a void exist without the has_operation property relating it to Equal:void?"
            ]
          }
        ]
      },
      "homogenous aggregate generator": {
        "axiom": {
          "subClassOf": [
            "aggregate generator"
          ],
          "disjointWith": [
            "heterogenous aggregate generator"
          ],
          "equivalentClass": [
            "(array generator or bag generator or sequence generator or set generator)"
          ],
          "propertyRestrictions": [
            "[has_quality some homogenous]"
          ]
        },
        "description": "homogenous aggregate generator is defined as a subclass of aggregate generator and is equivalent to any generator that is an array generator, bag generator, sequence generator, or set generator. It is explicitly disjoint with heterogenous aggregate generator, meaning that no individual can belong to both classes simultaneously. Members of this class are further characterized by the property restriction that they must have at least one quality that is homogenous, indicating that the elements they generate are of a uniform type or nature.",
        "CQ": [
          {
            "axiom": "homogenous aggregate generator subClassOf aggregate generator",
            "CQ": [
              "Is homogenous aggregate generator classified under the category of aggregate generator?",
              "Which specific types fall under aggregate generator, such as homogenous aggregate generator?",
              "What upper-level groupings include homogenous aggregate generator?"
            ]
          },
          {
            "axiom": "homogenous aggregate generator disjointWith heterogenous aggregate generator",
            "CQ": [
              "What is the nature of the disjointness between homogenous aggregate generators and heterogenous aggregate generators?",
              "Is it permissible for an entity to be classified as both a homogenous aggregate generator and a heterogenous aggregate generator?",
              "Which types of generators are explicitly defined as disjoint with homogenous aggregate generators within the ontology?"
            ]
          },
          {
            "axiom": "homogenous aggregate generator equivalentClass (array generator or bag generator or sequence generator or set generator)",
            "CQ": [
              "Is every homogenous aggregate generator necessarily either an array generator, a bag generator, a sequence generator, or a set generator?",
              "Is a homogenous aggregate generator equivalent to the union of array generator, bag generator, sequence generator, and set generator?",
              "Are there any entities considered a homogenous aggregate generator that do not belong to array generator, bag generator, sequence generator, or set generator?"
            ]
          },
          {
            "axiom": "homogenous aggregate generator propertyRestrictions [has_quality some homogenous]",
            "CQ": [
              "Is it required that every aggregate generator possesses the quality of being homogenous?",
              "Does an aggregate generator necessarily exhibit some homogenous characteristic?",
              "Can an aggregate generator be classified as homogenous if it lacks the property 'has_quality' with homogenous?"
            ]
          }
        ]
      },
      "non-numeric ordered primitive datatype": {
        "axiom": {
          "subClassOf": [
            "non-numeric primitive datatype"
          ],
          "propertyRestrictions": [
            "[has_quality some ordered]"
          ]
        },
        "description": "non-numeric ordered primitive datatype is a subclass of non-numeric primitive datatype. Members of this class are characterized by possessing the quality of being ordered, meaning their values can be arranged in a specific sequence or order. This formalization specifies that any non-numeric primitive datatype classified here must inherently support order among its instances.",
        "CQ": [
          {
            "axiom": "non-numeric ordered primitive datatype subClassOf non-numeric primitive datatype",
            "CQ": [
              "Is every non-numeric ordered primitive datatype encompassed within the category of non-numeric primitive datatype?",
              "Which datatypes are classified as specializations under non-numeric primitive datatype, such as non-numeric ordered primitive datatype?",
              "To which broader datatype categories does non-numeric ordered primitive datatype belong?"
            ]
          },
          {
            "axiom": "non-numeric ordered primitive datatype propertyRestrictions [has_quality some ordered]",
            "CQ": [
              "Is it necessary for non-numeric ordered primitive datatype property restrictions to possess the 'has_quality' relationship with at least one instance of 'ordered'?",
              "Can non-numeric ordered primitive datatype property restrictions exist without exhibiting some type of 'ordered' quality?",
              "Does the presence of the 'has_quality' property with 'ordered' define all instances of non-numeric ordered primitive datatype property restrictions?"
            ]
          }
        ]
      },
      "direct access property": {
        "axiom": {
          "subClassOf": [
            "access type"
          ],
          "disjointWith": [
            "indirect acess property"
          ],
          "equivalentClass": [
            "(index access or key access)"
          ]
        },
        "description": "direct access property is a subclass of access type and is disjoint with indirect access property, meaning no property can be both a direct access property and an indirect access property. It is formally defined as being equivalent to either index access or key access, specifying that any direct access property allows retrieval via a direct key or index rather than through intermediary steps.",
        "CQ": [
          {
            "axiom": "direct access property subClassOf access type",
            "CQ": [
              "Is direct access property classified as a specific form of access type?",
              "Which access types have direct access property as a more specialized subtype?",
              "What broader access type categories encompass direct access property?"
            ]
          },
          {
            "axiom": "direct access property disjointWith indirect acess property",
            "CQ": [
              "Is any property classified as both a direct access property and an indirect access property within the ontology?",
              "Which properties are explicitly specified as disjoint with indirect access properties?",
              "What is the ontological distinction between direct access property and indirect access property?"
            ]
          },
          {
            "axiom": "direct access property equivalentClass (index access or key access)",
            "CQ": [
              "Is every instance with direct access property necessarily equivalent to either index access or key access?",
              "Is direct access property defined as the union of index access and key access in the ontology?",
              "Can something possessing direct access property be anything other than index access or key access?"
            ]
          }
        ]
      },
      "target primitive field component": {
        "axiom": {
          "subClassOf": [
            "labeled dataset target field component"
          ],
          "propertyRestrictions": [
            "[role_of some (real datatype or discrete datatype or boolean datatype)]"
          ]
        },
        "description": "target primitive field component is defined as a subclass of labeled dataset target field component, specializing the notion of dataset fields that serve as targets in labeled datasets. Individuals in this class must play the role of some real, discrete, or boolean datatype, meaning the value types associated with these components are restricted to basic primitive datatypes (real numbers, discrete values, or boolean values). This specification clarifies that target primitive field components are intended for use where target variables are representable by primitive datatypes.",
        "CQ": [
          {
            "axiom": "target primitive field component subClassOf labeled dataset target field component",
            "CQ": [
              "Is every target primitive field component also classified as a labeled dataset target field component?",
              "Which components are categorized as subclasses under labeled dataset target field component?",
              "What broader categories encompass target primitive field component?"
            ]
          },
          {
            "axiom": "target primitive field component propertyRestrictions [role_of some (real datatype or discrete datatype or boolean datatype)]",
            "CQ": [
              "Is every target primitive field component required to participate in the role_of relationship with a real, discrete, or boolean datatype?",
              "Can a target primitive field component have a role_of property with something that is not a real, discrete, or boolean datatype?",
              "Are real datatype, discrete datatype, and boolean datatype the only types permitted in the role_of property for target primitive field components?"
            ]
          }
        ]
      },
      "target boolean field component": {
        "axiom": {
          "subClassOf": [
            "labeled dataset target field component"
          ],
          "propertyRestrictions": [
            "[role_of some boolean datatype]"
          ]
        },
        "description": "target boolean field component is defined as a subclass of labeled dataset target field component. It is further characterized by the restriction that it must play the role of some boolean datatype, meaning instances of this class are components within a labeled dataset that represent target fields specifically associated with boolean data types. This ensures that the target values handled by this component are strictly boolean (i.e., true or false).",
        "CQ": [
          {
            "axiom": "target boolean field component subClassOf labeled dataset target field component",
            "CQ": [
              "Does every target boolean field component fall under the category of labeled dataset target field component?",
              "Which components are subclasses of labeled dataset target field component, such as target boolean field component?",
              "What broader classes is target boolean field component a member of?"
            ]
          },
          {
            "axiom": "target boolean field component propertyRestrictions [role_of some boolean datatype]",
            "CQ": [
              "Is every instance of 'target' required to have the 'component' property with at least one value linked to the role_of property associated with a boolean datatype?",
              "Can 'target' possess the 'component' property only if there is a related role_of property with values of boolean type?",
              "Does the definition of 'target' entail that the 'component' property must always reference some boolean value through the role_of property?"
            ]
          }
        ]
      },
      "target discrete field component": {
        "axiom": {
          "subClassOf": [
            "labeled dataset target field component"
          ],
          "propertyRestrictions": [
            "[role_of some discrete datatype]"
          ]
        },
        "description": "target discrete field component is defined as a subclass of labeled dataset target field component. It is characterized by having a role that is associated with some discrete datatype, meaning the data values it represents are distinct and separate (e.g., categories or integers) rather than continuous. This ensures that every target discrete field component specifically involves target fields where the underlying data type is discrete.",
        "CQ": [
          {
            "axiom": "target discrete field component subClassOf labeled dataset target field component",
            "CQ": [
              "Is every target discrete field component included within the category of labeled dataset target field components?",
              "Which component types are specialized forms of labeled dataset target field component, such as target discrete field component?",
              "To what higher-level component categories does target discrete field component belong?"
            ]
          },
          {
            "axiom": "target discrete field component propertyRestrictions [role_of some discrete datatype]",
            "CQ": [
              "Is it required that every target discrete field component is associated with some role_of discrete datatype?",
              "Can a target discrete field component exist without having the role_of property with a discrete datatype?",
              "Does having the role_of property with at least one discrete datatype qualify an entity as a target discrete field component?"
            ]
          }
        ]
      },
      "target real field component": {
        "axiom": {
          "subClassOf": [
            "labeled dataset target field component"
          ],
          "propertyRestrictions": [
            "[role_of some real datatype]"
          ]
        },
        "description": "target real field component is a subclass of labeled dataset target field component. Individuals of this class are characterized by the restriction that they must play the role of some real datatype. This means that any target real field component represents a field component used as a target in labeled datasets, specifically associated with or representing real-valued data.",
        "CQ": [
          {
            "axiom": "target real field component subClassOf labeled dataset target field component",
            "CQ": [
              "Is every target real field component included under the category of labeled dataset target field component?",
              "What components are specified as subclasses of labeled dataset target field component, such as target real field component?",
              "Which broader categories encompass the target real field component?"
            ]
          },
          {
            "axiom": "target real field component propertyRestrictions [role_of some real datatype]",
            "CQ": [
              "Is every target real field component required to play the role_of property with at least one real datatype?",
              "Can a target real field component exist without having a role_of relationship to any real datatype?",
              "Does the ontology restrict target real field components to only have role_of relationships with real datatypes?"
            ]
          }
        ]
      },
      "target sequence of real field component": {
        "axiom": {
          "subClassOf": [
            "labeled dataset target field component"
          ],
          "propertyRestrictions": [
            "[role_of some sequence of real datatype]"
          ]
        },
        "description": "target sequence of real field component is a subclass of labeled dataset target field component. Members of this class are characterized by having the role_of some sequence of real datatype, meaning that each instance serves as a target field in a labeled dataset and fills a role associated with a sequence of real numbers (e.g., real-valued vectors or time series). This formalization restricts class membership to those dataset components whose target data are structured as sequences of real numbers.",
        "CQ": [
          {
            "axiom": "target sequence of real field component subClassOf labeled dataset target field component",
            "CQ": [
              "Is every target sequence of real field component classified under labeled dataset target field component?",
              "Which components are specified as subclasses of labeled dataset target field component, such as target sequence of real field component?",
              "To which broader category does target sequence of real field component belong?"
            ]
          },
          {
            "axiom": "target sequence of real field component propertyRestrictions [role_of some sequence of real datatype]",
            "CQ": [
              "Is every target sequence of real field component required to be associated by the role_of property with at least one value of the real datatype?",
              "Can a target sequence of real field component exist without possessing the role_of relation to elements of the real type?",
              "Does the class target sequence of real field component necessarily have a role_of property restricted only to instances of the real datatype?"
            ]
          }
        ]
      },
      "target hierarchical field component": {
        "axiom": {
          "subClassOf": [
            "labeled dataset target field component"
          ],
          "propertyRestrictions": [
            "[role_of some (tree datatype or DAG datatype)]"
          ]
        },
        "description": "target hierarchical field component is defined as a subclass of labeled dataset target field component. Members of this class are further characterized by the axiom that they fulfill the role_of relationship with some instance of either a tree datatype or a directed acyclic graph (DAG) datatype. This indicates that such components specifically serve as target fields in labeled datasets, where the targets are drawn from hierarchical data structures represented as either trees or DAGs.",
        "CQ": [
          {
            "axiom": "target hierarchical field component subClassOf labeled dataset target field component",
            "CQ": [
              "Does target hierarchical field component fall under the category of labeled dataset target field component?",
              "Which components are defined as specializations of labeled dataset target field component, including target hierarchical field component?",
              "What broader categories encompass target hierarchical field component in the ontology?"
            ]
          },
          {
            "axiom": "target hierarchical field component propertyRestrictions [role_of some (tree datatype or DAG datatype)]",
            "CQ": [
              "Is every target hierarchical field component necessarily associated through the 'role_of' property with either a tree datatype or a DAG datatype?",
              "Can a target hierarchical field component have the 'role_of' property linked to both a tree datatype and a DAG datatype?",
              "Does the presence of a 'role_of' relationship to any datatype other than tree or DAG preclude the entity from being classified as a target hierarchical field component?"
            ]
          }
        ]
      },
      "target DAG field component": {
        "axiom": {
          "subClassOf": [
            "labeled dataset target field component"
          ],
          "propertyRestrictions": [
            "[role_of some DAG datatype]"
          ]
        },
        "description": "target DAG field component is defined as a subclass of labeled dataset target field component and is further characterized by the property restriction that it must serve in the role_of some DAG datatype. This means that any instance of target DAG field component is specifically related to Directed Acyclic Graph (DAG) datatypes, describing target fields in labeled datasets that are intended to represent or interact with DAG structures.",
        "CQ": [
          {
            "axiom": "target DAG field component subClassOf labeled dataset target field component",
            "CQ": [
              "Is every target DAG field component a specific instance of a labeled dataset target field component?",
              "Which types of components fall under the more general class of labeled dataset target field component?",
              "What broader component classifications include target DAG field component?"
            ]
          },
          {
            "axiom": "target DAG field component propertyRestrictions [role_of some DAG datatype]",
            "CQ": [
              "Is every target DAG field component required to have at least one property that fulfills the role_of some DAG datatype condition?",
              "Can a target DAG field component lack the role_of relationship to any DAG datatype?",
              "Does the existence of a role_of connection to a DAG datatype define the target DAG field component?"
            ]
          }
        ]
      },
      "target tree field component": {
        "axiom": {
          "subClassOf": [
            "labeled dataset target field component"
          ],
          "propertyRestrictions": [
            "[role_of some tree datatype]"
          ]
        },
        "description": "target tree field component is defined as a subclass of labeled dataset target field component. Members of this class are characterized by the restriction that they must play the role of some tree datatype. This formalization specifies that any target tree field component is associated with a structure fundamentally based on tree datatypes, differentiating it from other target field components by its reliance on hierarchical or tree-structured data.",
        "CQ": [
          {
            "axiom": "target tree field component subClassOf labeled dataset target field component",
            "CQ": [
              "Is target tree field component a specific type of labeled dataset target field component?",
              "Which field components are classified under labeled dataset target field component, including target tree field component?",
              "What broader classifications does target tree field component fall under in the dataset context?"
            ]
          },
          {
            "axiom": "target tree field component propertyRestrictions [role_of some tree datatype]",
            "CQ": [
              "Is every target tree field component required to have at least one property that serves the role of some tree datatype?",
              "Can a target tree field component exist without a property that plays the role of a tree datatype?",
              "Does the target tree field component necessarily involve a property that is in the role_of relationship with a tree datatype?"
            ]
          }
        ]
      },
      "target set of discrete field component": {
        "axiom": {
          "subClassOf": [
            "labeled dataset target field component"
          ],
          "propertyRestrictions": [
            "[role_of some set of discrete datatype]"
          ]
        },
        "description": "target set of discrete field component is defined as a subclass of labeled dataset target field component. Every individual in this class must play the role of some set of discrete datatype, meaning each component serves as a target field in a labeled dataset whose values are constrained to a discrete set. This ensures that the target values for this component are not continuous but instead belong to a well-defined set, aligning with tasks such as multi-class classification in machine learning.",
        "CQ": [
          {
            "axiom": "target set of discrete field component subClassOf labeled dataset target field component",
            "CQ": [
              "Is target set of discrete field component a specialized type of labeled dataset target field component?",
              "Which components are recognized as more specific instances under labeled dataset target field component, such as target set of discrete field component?",
              "What higher-level group encompasses target set of discrete field component within the ontology?"
            ]
          },
          {
            "axiom": "target set of discrete field component propertyRestrictions [role_of some set of discrete datatype]",
            "CQ": [
              "Must every target set of discrete field component have at least one role_of relation to a set of discrete datatype?",
              "Is it required for the target set of discrete field component to be connected, through the role_of property, to a set of discrete datatype?",
              "Does the existence of a target set of discrete field component imply that it plays the role_of with some set of discrete datatype?"
            ]
          }
        ]
      },
      "target record of primitives field component": {
        "axiom": {
          "subClassOf": [
            "labeled dataset target field component"
          ],
          "propertyRestrictions": [
            "[role_of some record of primitives datatype]"
          ]
        },
        "description": "target record of primitives field component is defined as a subclass of labeled dataset target field component. Every instance of this class has the property that it plays the role_of at least one record of primitives datatype. This formalization ensures that any target record of primitives field component is associated, through the role_of relationship, with data characterized as a record of primitives datatype, linking target fields within labeled datasets to primitive data representations.",
        "CQ": [
          {
            "axiom": "target record of primitives field component subClassOf labeled dataset target field component",
            "CQ": [
              "Is every target record of primitives field component categorized under labeled dataset target field component?",
              "Which specialized components fall under labeled dataset target field component, such as target record of primitives field component?",
              "What are the parent classes of target record of primitives field component within the dataset ontology?"
            ]
          },
          {
            "axiom": "target record of primitives field component propertyRestrictions [role_of some record of primitives datatype]",
            "CQ": [
              "Does the target record of primitives require the component property 'role_of' to be associated with at least one individual of type record of primitives datatype?",
              "Is it necessary for each target record of primitives to have the 'role_of' property filled by some record of primitives datatype?",
              "Can a target record of primitives exist without any 'role_of' relationship to a record of primitives datatype?"
            ]
          }
        ]
      },
      "target record of boolean field component": {
        "axiom": {
          "subClassOf": [
            "labeled dataset target field component"
          ],
          "propertyRestrictions": [
            "[role_of some record of boolean datatype]"
          ]
        },
        "description": "target record of boolean field component is defined as a subclass of labeled dataset target field component. Members of this class are characterized by the property that they play the role_of some record of boolean datatype, indicating that these components specifically serve as targets in datasets where the associated data is restricted to boolean (true/false) values. This formalization ensures that any instance of this class must be linked to records containing only boolean-typed data, supporting clear distinction in data modeling for boolean-labeled target fields.",
        "CQ": [
          {
            "axiom": "target record of boolean field component subClassOf labeled dataset target field component",
            "CQ": [
              "Is target record of boolean field component categorized under labeled dataset target field component?",
              "Which components fall under the category of labeled dataset target field component, such as target record of boolean field component?",
              "To which broader component types does target record of boolean field component belong?"
            ]
          },
          {
            "axiom": "target record of boolean field component propertyRestrictions [role_of some record of boolean datatype]",
            "CQ": [
              "Is every target record required to have at least one property restriction where the role_of property relates to a record with a boolean datatype?",
              "Can a target record exist without having any role_of property pointing to a record with a boolean value?",
              "Does the ontology allow a target record to have role_of relationships only with records of non-boolean datatypes?"
            ]
          }
        ]
      },
      "target record of discrete field component": {
        "axiom": {
          "subClassOf": [
            "labeled dataset target field component"
          ],
          "propertyRestrictions": [
            "[role_of some record of discrete datatype]"
          ]
        },
        "description": "target record of discrete field component is a subclass of labeled dataset target field component, and is characterized by a property restriction indicating it must play the role of some record of discrete datatype. This means that any instance of this class represents a target field component within a labeled dataset, specifically one that is associated with a record whose datatype is discrete.",
        "CQ": [
          {
            "axiom": "target record of discrete field component subClassOf labeled dataset target field component",
            "CQ": [
              "Is every target record of discrete field component classified under labeled dataset target field component?",
              "What are the more specific concepts included within labeled dataset target field component, such as target record of discrete field component?",
              "To which overarching categories does target record of discrete field component belong?"
            ]
          },
          {
            "axiom": "target record of discrete field component propertyRestrictions [role_of some record of discrete datatype]",
            "CQ": [
              "Does every target record of a discrete field component necessarily relate via 'propertyRestrictions' to at least one record of a discrete datatype through the role_of property?",
              "Is it required that for each target record of a discrete field component, there exists a property restriction involving role_of some record of a discrete datatype?",
              "Can a target record of a discrete field component exist without being associated, via propertyRestrictions, through role_of, to any record of a discrete datatype?"
            ]
          }
        ]
      },
      "target structured field component": {
        "axiom": {
          "subClassOf": [
            "labeled dataset target field component"
          ],
          "propertyRestrictions": [
            "[role_of some (table datatype or array datatype or class datatype or sequence datatype or bag datatype or set datatype)]"
          ]
        },
        "description": "target structured field component is a subclass of labeled dataset target field component. Members of this class are further characterized by the requirement that they play some role in relation to a structured data type; specifically, they must be associated with one or more of the following datatypes: table, array, class, sequence, bag, or set. This definition ensures that any target structured field component is a labeled field designated for structured or collection-type datatypes within the context of a dataset.",
        "CQ": [
          {
            "axiom": "target structured field component subClassOf labeled dataset target field component",
            "CQ": [
              "Is every target structured field component categorized under labeled dataset target field component?",
              "Which kinds of labeled dataset target field component encompass target structured field component as a specific type?",
              "To what broader field component categories does target structured field component belong?"
            ]
          },
          {
            "axiom": "target structured field component propertyRestrictions [role_of some (table datatype or array datatype or class datatype or sequence datatype or bag datatype or set datatype)]",
            "CQ": [
              "Is every target structured field component required to have a role_of relationship with at least one of the following datatypes: table, array, class, sequence, bag, or set?",
              "Does the definition of target structured field component necessitate that its role_of property is fulfilled by at least one datatype among table, array, class, sequence, bag, or set?",
              "Can a target structured field component possess a role_of relation to any datatype beyond table, array, class, sequence, bag, or set?"
            ]
          }
        ]
      },
      "descriptive record of boolean field component": {
        "axiom": {
          "subClassOf": [
            "labeled dataset descriptive field component"
          ],
          "propertyRestrictions": [
            "[role_of some record of boolean datatype]"
          ]
        },
        "description": "A descriptive record of boolean field component is defined as a subclass of labeled dataset descriptive field component. Any instance of this class must play the role of some record associated with a boolean datatype, signifying that its descriptive information pertains specifically to data fields that store boolean values.",
        "CQ": [
          {
            "axiom": "descriptive record of boolean field component subClassOf labeled dataset descriptive field component",
            "CQ": [
              "Is descriptive record of boolean field component classified as a type of labeled dataset descriptive field component?",
              "Which components are encompassed under labeled dataset descriptive field component, including descriptive record of boolean field component?",
              "To what broader field categories does descriptive record of boolean field component pertain?"
            ]
          },
          {
            "axiom": "descriptive record of boolean field component propertyRestrictions [role_of some record of boolean datatype]",
            "CQ": [
              "Must every descriptive record of a boolean field component have at least one 'role_of' relation to a record of boolean datatype?",
              "Is it required that any descriptive record of a boolean field component be linked by 'role_of' only to records of boolean datatype?",
              "Are there descriptive records of boolean field components that lack any 'role_of' connection with a record of boolean datatype?"
            ]
          }
        ]
      },
      "descriptive strucured field component": {
        "axiom": {
          "subClassOf": [
            "labeled dataset descriptive field component"
          ],
          "propertyRestrictions": [
            "[role_of some (array datatype or class datatype or sequence datatype or bag datatype or set datatype)]"
          ]
        },
        "description": "descriptive structured field component is defined as a subclass of labeled dataset descriptive field component. It is characterized by having a role that must be associated with at least one of the following datatypes: array datatype, class datatype, sequence datatype, bag datatype, or set datatype. This ensures that instances of descriptive structured field component function specifically in contexts involving structured data representations such as arrays, classes, sequences, bags, or sets.",
        "CQ": [
          {
            "axiom": "descriptive strucured field component subClassOf labeled dataset descriptive field component",
            "CQ": [
              "Is descriptive structured field component categorized as a subset of labeled dataset descriptive field component?",
              "Which field components are included under labeled dataset descriptive field component, such as descriptive structured field component?",
              "Into which more general component groups does descriptive structured field component fall?"
            ]
          },
          {
            "axiom": "descriptive strucured field component propertyRestrictions [role_of some (array datatype or class datatype or sequence datatype or bag datatype or set datatype)]",
            "CQ": [
              "Must every descriptive structured field component play a role in at least one array, class, sequence, bag, or set datatype?",
              "Is it required that a descriptive structured field component serves in a role involving only array, class, sequence, bag, or set datatypes?",
              "Can a descriptive structured field component have the role_of property with any datatype type other than array, class, sequence, bag, or set?"
            ]
          }
        ]
      }
    },
    "properties": {}
  },
  "lab": {
    "classes": {
      "GaitAssessment": {
        "axiom": {
          "subClassOf": [
            "ExperimentalAssessment"
          ],
          "propertyRestrictions": [
            "[hasMonoTaskScore exactly 1]",
            "[hasMonoTaskScore only rdfs:Literal]",
            "[hasDualTaskScore only rdfs:Literal]",
            "[hasDualTaskScore exactly 1]"
          ]
        },
        "description": "GaitAssessment is defined as a subclass of ExperimentalAssessment. Individuals in this class are required to have exactly one MonoTaskScore and exactly one DualTaskScore, both of which must be literals (i.e., data values such as numbers or strings). This formalization ensures that each GaitAssessment precisely records a single score for both mono-task and dual-task conditions using literal values.",
        "CQ": [
          {
            "axiom": "GaitAssessment subClassOf ExperimentalAssessment",
            "CQ": [
              "Does GaitAssessment fall under the category of ExperimentalAssessment?",
              "Which types are more specialized than ExperimentalAssessment and include GaitAssessment?",
              "What broader assessment classes encompass GaitAssessment?"
            ]
          },
          {
            "axiom": "GaitAssessment propertyRestrictions [hasMonoTaskScore exactly 1]",
            "CQ": [
              "Is every instance of GaitAssessment required to have exactly one value for hasMonoTaskScore?",
              "Can a GaitAssessment ever have more or less than one hasMonoTaskScore assigned?",
              "Does the definition of GaitAssessment restrict it to possessing one and only one hasMonoTaskScore property?"
            ]
          },
          {
            "axiom": "GaitAssessment propertyRestrictions [hasMonoTaskScore only rdfs:Literal]",
            "CQ": [
              "Is every value associated with 'hasMonoTaskScore' for a GaitAssessment required to be a literal?",
              "Can a GaitAssessment record only accept rdfs:Literal values for the hasMonoTaskScore property?",
              "Does the hasMonoTaskScore property in GaitAssessment exclude any value types other than rdfs:Literal?"
            ]
          },
          {
            "axiom": "GaitAssessment propertyRestrictions [hasDualTaskScore only rdfs:Literal]",
            "CQ": [
              "Is it mandatory that a GaitAssessmentâ€™s hasDualTaskScore property can only relate to rdfs:Literal values?",
              "Can a GaitAssessment ever have a hasDualTaskScore value that is not an rdfs:Literal?",
              "Are the hasDualTaskScore values for GaitAssessment instances exclusively constrained to rdfs:Literal types?"
            ]
          },
          {
            "axiom": "GaitAssessment propertyRestrictions [hasDualTaskScore exactly 1]",
            "CQ": [
              "Must every GaitAssessment have one and only one value for its hasDualTaskScore property?",
              "Is it possible for a GaitAssessment to have either no hasDualTaskScore or more than one hasDualTaskScore recorded?",
              "Does the definition of GaitAssessment require exactly one associated hasDualTaskScore?"
            ]
          }
        ]
      },
      "AutonomyAssessment": {
        "axiom": {
          "subClassOf": [
            "ClinicalAssessment"
          ],
          "propertyRestrictions": [
            "[iadl_e only xsd:int]",
            "[iadl_e exactly 1 xsd:int]"
          ]
        },
        "description": "AutonomyAssessment is a subclass of ClinicalAssessment designed specifically to evaluate an individual's level of autonomy. Every instance of AutonomyAssessment is required to have exactly one value for the property iadl_e, which must be of type xsd:int. This ensures that each AutonomyAssessment provides a singular, integer-based measurement relevant to the assessed individual's instrumental activities of daily living.",
        "CQ": [
          {
            "axiom": "AutonomyAssessment subClassOf ClinicalAssessment",
            "CQ": [
              "Is AutonomyAssessment a narrower type compared to ClinicalAssessment?",
              "Which forms of assessment fall under the category of ClinicalAssessment, including AutonomyAssessment?",
              "What broader assessment categories does AutonomyAssessment fall under?"
            ]
          },
          {
            "axiom": "AutonomyAssessment propertyRestrictions [iadl_e only xsd:int]",
            "CQ": [
              "Is it required that AutonomyAssessment instances only have the 'iadl_e' property with values of type integer?",
              "Must every 'iadl_e' property associated with AutonomyAssessment be restricted to integer values?",
              "Are there any properties other than 'iadl_e' with integer values permitted for AutonomyAssessment?"
            ]
          },
          {
            "axiom": "AutonomyAssessment propertyRestrictions [iadl_e exactly 1 xsd:int]",
            "CQ": [
              "Is it required for an AutonomyAssessment to have exactly one value for the property iadl_e?",
              "Can an AutonomyAssessment include more than one or fewer than one iadl_e property value?",
              "Does every AutonomyAssessment instance restrict the iid_e property to be associated with a single integer value?"
            ]
          }
        ]
      },
      "CognitiveAbilitiesAssessment": {
        "axiom": {
          "subClassOf": [
            "ClinicalAssessment"
          ],
          "propertyRestrictions": [
            "[fabScore exactly 1 xsd:int]",
            "[freeAndCuedRemindingAssessment exactly 1 xsd:string]",
            "[hasMMSEScore exactly 1 xsd:int]",
            "[trailMakingTest only xsd:string]",
            "[trailMakingTest exactly 1 xsd:string]",
            "[shortCognitiveBatteryAssessment only xsd:string]",
            "[freeAndCuedRemindingAssessment only xsd:string]",
            "[hasMMSEScore only xsd:int]",
            "[shortCognitiveBatteryAssessment exactly 1 xsd:string]",
            "[fabScore only xsd:int]"
          ]
        },
        "description": "CognitiveAbilitiesAssessment is defined as a subclass of ClinicalAssessment, representing evaluations specifically focused on measuring cognitive functions. Instances of this class must have exactly one FAB score (an integer), one MMSE score (an integer), one Trail Making Test result (a string), one Free and Cued Reminding Assessment result (a string), and one Short Cognitive Battery Assessment result (a string). Property restrictions further specify that each of these assessments and scores must be unique and of the stated data type, ensuring a comprehensive and structured representation of cognitive assessment results for each individual.",
        "CQ": [
          {
            "axiom": "CognitiveAbilitiesAssessment subClassOf ClinicalAssessment",
            "CQ": [
              "Does CognitiveAbilitiesAssessment fall under the broader class of ClinicalAssessment?",
              "Which specific assessments are categorized as subclasses of ClinicalAssessment, including CognitiveAbilitiesAssessment?",
              "What more general categories is CognitiveAbilitiesAssessment associated with in the ontology?"
            ]
          },
          {
            "axiom": "CognitiveAbilitiesAssessment propertyRestrictions [fabScore exactly 1 xsd:int]",
            "CQ": [
              "Is it required that every CognitiveAbilitiesAssessment has exactly one fabScore value assigned?",
              "Can a CognitiveAbilitiesAssessment have multiple fabScore values, or is it strictly limited to one?",
              "Does a CognitiveAbilitiesAssessment instance necessarily possess one and only one fabScore property of type integer?"
            ]
          },
          {
            "axiom": "CognitiveAbilitiesAssessment propertyRestrictions [freeAndCuedRemindingAssessment exactly 1 xsd:string]",
            "CQ": [
              "Does a CognitiveAbilitiesAssessment always include exactly one freeAndCuedRemindingAssessment?",
              "Is it required for every CognitiveAbilitiesAssessment to specify one and only one value for freeAndCuedRemindingAssessment?",
              "Can a CognitiveAbilitiesAssessment have more than one or fewer than one freeAndCuedRemindingAssessment assigned to it?"
            ]
          },
          {
            "axiom": "CognitiveAbilitiesAssessment propertyRestrictions [hasMMSEScore exactly 1 xsd:int]",
            "CQ": [
              "Is every CognitiveAbilitiesAssessment required to have exactly one MMSE score value assigned?",
              "Can a CognitiveAbilitiesAssessment record include more than one MMSE score?",
              "Does the assessment of cognitive abilities always specify a single MMSE score per evaluation?"
            ]
          },
          {
            "axiom": "CognitiveAbilitiesAssessment propertyRestrictions [trailMakingTest only xsd:string]",
            "CQ": [
              "Is it required that CognitiveAbilitiesAssessment has the property 'trailMakingTest' only with values of type string?",
              "Can a CognitiveAbilitiesAssessment use any data type besides string for the 'trailMakingTest' property?",
              "Does 'trailMakingTest' in CognitiveAbilitiesAssessment exclude all value types except for string?"
            ]
          },
          {
            "axiom": "CognitiveAbilitiesAssessment propertyRestrictions [trailMakingTest exactly 1 xsd:string]",
            "CQ": [
              "Is it required that a CognitiveAbilitiesAssessment has exactly one value assigned to the property 'trailMakingTest'?",
              "Can a CognitiveAbilitiesAssessment include more than one or fewer than one value for the 'trailMakingTest' property?",
              "Does every instance of CognitiveAbilitiesAssessment always possess exactly one 'trailMakingTest' entry, with no exceptions?"
            ]
          },
          {
            "axiom": "CognitiveAbilitiesAssessment propertyRestrictions [shortCognitiveBatteryAssessment only xsd:string]",
            "CQ": [
              "Is it required that a CognitiveAbilitiesAssessment only have the shortCognitiveBatteryAssessment property with values of type xsd:string?",
              "Are all shortCognitiveBatteryAssessment values associated with CognitiveAbilitiesAssessment instances strings?",
              "Can a CognitiveAbilitiesAssessment have a shortCognitiveBatteryAssessment property with any value other than a string?"
            ]
          },
          {
            "axiom": "CognitiveAbilitiesAssessment propertyRestrictions [freeAndCuedRemindingAssessment only xsd:string]",
            "CQ": [
              "Is a CognitiveAbilitiesAssessment restricted to having the property 'freeAndCuedRemindingAssessment' only with values of type string?",
              "Does every instance of 'freeAndCuedRemindingAssessment' associated with a CognitiveAbilitiesAssessment require a string as its value?",
              "Are values for 'freeAndCuedRemindingAssessment' in a CognitiveAbilitiesAssessment limited exclusively to data typed as xsd:string?"
            ]
          },
          {
            "axiom": "CognitiveAbilitiesAssessment propertyRestrictions [hasMMSEScore only xsd:int]",
            "CQ": [
              "Are all MMSE scores associated with CognitiveAbilitiesAssessment instances required to be integers?",
              "Is it possible for a CognitiveAbilitiesAssessment to have a hasMMSEScore value that is not of type xsd:int?",
              "Must every hasMMSEScore property for CognitiveAbilitiesAssessment conform exclusively to the integer data type?"
            ]
          },
          {
            "axiom": "CognitiveAbilitiesAssessment propertyRestrictions [shortCognitiveBatteryAssessment exactly 1 xsd:string]",
            "CQ": [
              "Is it required that a CognitiveAbilitiesAssessment must include exactly one short cognitive battery assessment represented as a string?",
              "Can a CognitiveAbilitiesAssessment have more than one or less than one shortCognitiveBatteryAssessment assigned?",
              "Does every CognitiveAbilitiesAssessment necessarily associate with a single and only one value for the shortCognitiveBatteryAssessment property?"
            ]
          },
          {
            "axiom": "CognitiveAbilitiesAssessment propertyRestrictions [fabScore only xsd:int]",
            "CQ": [
              "Is the fabScore property for CognitiveAbilitiesAssessment always restricted to integer values?",
              "Can CognitiveAbilitiesAssessment have a fabScore value outside the integer datatype?",
              "Does CognitiveAbilitiesAssessment exclusively use integer values for the fabScore property?"
            ]
          }
        ]
      },
      "MotricityAbilitiesAssessment": {
        "axiom": {
          "subClassOf": [
            "ClinicalAssessment"
          ],
          "propertyRestrictions": [
            "[hasUPDRSScore exactly 1 xsd:int]",
            "[hasUPDRSScore only xsd:int]"
          ]
        },
        "description": "MotricityAbilitiesAssessment is defined as a subclass of ClinicalAssessment, representing assessments that evaluate motor abilities. Every instance of this class is required to have exactly one UPDRS score, and this score must be an integer value (xsd:int). This ensures that each motricity abilities assessment is uniquely and quantitatively characterized by a single UPDRS score, aligning with the clinical need for standardized motor evaluation.",
        "CQ": [
          {
            "axiom": "MotricityAbilitiesAssessment subClassOf ClinicalAssessment",
            "CQ": [
              "Is MotricityAbilitiesAssessment categorized under the broader class of ClinicalAssessment?",
              "What specific assessments are recognized as subclasses of ClinicalAssessment, such as MotricityAbilitiesAssessment?",
              "Which general assessment categories encompass MotricityAbilitiesAssessment?"
            ]
          },
          {
            "axiom": "MotricityAbilitiesAssessment propertyRestrictions [hasUPDRSScore exactly 1 xsd:int]",
            "CQ": [
              "Does every MotricityAbilitiesAssessment necessarily have exactly one value for the property 'hasUPDRSScore'?",
              "Is it possible for a MotricityAbilitiesAssessment to be associated with more than one UPDRS Score?",
              "Can a MotricityAbilitiesAssessment exist without any value assigned to 'hasUPDRSScore'?"
            ]
          },
          {
            "axiom": "MotricityAbilitiesAssessment propertyRestrictions [hasUPDRSScore only xsd:int]",
            "CQ": [
              "Are UPDRS scores for MotricityAbilitiesAssessment always restricted to integer values?",
              "Can MotricityAbilitiesAssessment have any hasUPDRSScore value other than an integer?",
              "Is it required that MotricityAbilitiesAssessment only uses hasUPDRSScore with values of type integer?"
            ]
          }
        ]
      },
      "DiscussionInvolvementData": {
        "axiom": {
          "subClassOf": [
            "MeasuredData"
          ],
          "propertyRestrictions": [
            "[verbalReactionSpontaneity exactly 1]",
            "[verbalReactionSpontaneity only rdfs:Literal]"
          ]
        },
        "description": "DiscussionInvolvementData is defined as a subclass of MeasuredData. Every instance of this class is required to have exactly one value for the property verbalReactionSpontaneity, and this property must take a value of type rdfs:Literal. This formalizes that each DiscussionInvolvementData entry captures a single, literal-valued measure of verbal reaction spontaneity as part of its involvement data.",
        "CQ": [
          {
            "axiom": "DiscussionInvolvementData subClassOf MeasuredData",
            "CQ": [
              "Does DiscussionInvolvementData represent a more specific form of MeasuredData?",
              "Which subclasses are encompassed by MeasuredData, and does this include DiscussionInvolvementData?",
              "What broader data classifications include DiscussionInvolvementData as an instance?"
            ]
          },
          {
            "axiom": "DiscussionInvolvementData propertyRestrictions [verbalReactionSpontaneity exactly 1]",
            "CQ": [
              "Must each DiscussionInvolvementData instance have exactly one value for the property verbalReactionSpontaneity?",
              "Is it required that a DiscussionInvolvementData cannot have more or fewer than one verbalReactionSpontaneity assigned?",
              "Can a DiscussionInvolvementData ever possess either zero or more than one verbalReactionSpontaneity property?"
            ]
          },
          {
            "axiom": "DiscussionInvolvementData propertyRestrictions [verbalReactionSpontaneity only rdfs:Literal]",
            "CQ": [
              "Are all values of the 'verbalReactionSpontaneity' property in DiscussionInvolvementData instances restricted exclusively to literals?",
              "Is it possible for 'verbalReactionSpontaneity' in DiscussionInvolvementData to take any value type other than rdfs:Literal?",
              "Does DiscussionInvolvementData ensure that only rdfs:Literal values are used for the 'verbalReactionSpontaneity' property for every instance?"
            ]
          }
        ]
      },
      "LatencyData": {
        "axiom": {
          "subClassOf": [
            "MeasuredData"
          ],
          "propertyRestrictions": [
            "[latency exactly 1]",
            "[latency only rdfs:Literal]"
          ]
        },
        "description": "LatencyData is a subclass of MeasuredData. Each instance of LatencyData must have exactly one latency value, and this value must be a literal (rdfs:Literal). This class formally represents measured data where the primary attribute is a singular latency value stored as a literal, ensuring uniformity and precision in latency representation.",
        "CQ": [
          {
            "axiom": "LatencyData subClassOf MeasuredData",
            "CQ": [
              "Is LatencyData classified under the broader category of MeasuredData?",
              "Which types of MeasuredData include LatencyData as a more specific instance?",
              "What overarching categories does LatencyData fall into within the ontology?"
            ]
          },
          {
            "axiom": "LatencyData propertyRestrictions [latency exactly 1]",
            "CQ": [
              "Must every LatencyData instance have exactly one value for the latency property?",
              "Is it possible for LatencyData to be associated with either no latency or more than one latency value?",
              "Are LatencyData individuals restricted to a single latency property assertion?"
            ]
          },
          {
            "axiom": "LatencyData propertyRestrictions [latency only rdfs:Literal]",
            "CQ": [
              "Are all latency values associated with LatencyData instances required to be of type rdfs:Literal?",
              "Does LatencyData exclude any latency property values that are not rdfs:Literal?",
              "Is it necessary that every latency property of LatencyData is expressed solely as an rdfs:Literal?"
            ]
          }
        ]
      },
      "DiscussionTask": {
        "axiom": {
          "subClassOf": [
            "Task"
          ],
          "propertyRestrictions": [
            "[measuredData some StressData]",
            "[measuredData some MoodVoiceData]",
            "[measuredData only (MoodVoiceData or StressData)]"
          ]
        },
        "description": "DiscussionTask is defined as a subclass of Task. Every instance of DiscussionTask is required to have at least some measured data of type StressData and some measured data of type MoodVoiceData. Additionally, all measured data associated with DiscussionTask must be exclusively of type StressData or MoodVoiceData, meaning no other types of measured data are permitted. This ensures that the assessment of a DiscussionTask is strictly based on stress and mood-related voice data.",
        "CQ": [
          {
            "axiom": "DiscussionTask subClassOf Task",
            "CQ": [
              "Is DiscussionTask classified under the broader category of Task?",
              "Which specific types fall under the category of Task, including DiscussionTask?",
              "What are the higher-level categories encompassing DiscussionTask?"
            ]
          },
          {
            "axiom": "DiscussionTask propertyRestrictions [measuredData some StressData]",
            "CQ": [
              "Must every DiscussionTask include at least one instance of measuredData linking to StressData?",
              "Is it required that a DiscussionTask is associated with measuredData that captures StressData?",
              "Can a DiscussionTask exist without being connected to any measuredData of type StressData?"
            ]
          },
          {
            "axiom": "DiscussionTask propertyRestrictions [measuredData some MoodVoiceData]",
            "CQ": [
              "Does every DiscussionTask necessarily involve measuredData related to MoodVoiceData?",
              "Is it required that a DiscussionTask has at least one measuredData instance corresponding to MoodVoiceData?",
              "Can a DiscussionTask exist without possessing measuredData of the type MoodVoiceData?"
            ]
          },
          {
            "axiom": "DiscussionTask propertyRestrictions [measuredData only (MoodVoiceData or StressData)]",
            "CQ": [
              "Is DiscussionTask restricted to having measuredData properties only of type MoodVoiceData or StressData?",
              "Can any measuredData associated with a DiscussionTask be a type other than MoodVoiceData or StressData?",
              "Does the ontology prohibit DiscussionTask from being linked via measuredData to data types outside of MoodVoiceData and StressData?"
            ]
          }
        ]
      },
      "PersonWithDementia": {
        "axiom": {
          "subClassOf": [
            "Person"
          ],
          "equivalentClass": [
            "[hasRecord some (ClinicalRecord and [containsAssessment some (DiagnosisAssessment and [hasClinicalDiagnosis some {dementia}])])]"
          ]
        },
        "description": "PersonWithDementia is defined as a subclass of Person, and is equivalent to any person who has an associated clinical record that contains at least one assessment in which a clinical diagnosis of dementia is present. This formalization ensures that all individuals in the PersonWithDementia class are explicitly linked to the confirmed clinical diagnosis of dementia via assessment records.",
        "CQ": [
          {
            "axiom": "PersonWithDementia subClassOf Person",
            "CQ": [
              "Does PersonWithDementia represent a specific category nested under Person?",
              "Which subclasses fall under the broader classification of Person, such as PersonWithDementia?",
              "What are the general classes that encompass PersonWithDementia?"
            ]
          },
          {
            "axiom": "PersonWithDementia equivalentClass [hasRecord some (ClinicalRecord and [containsAssessment some (DiagnosisAssessment and [hasClinicalDiagnosis some {dementia}])])]",
            "CQ": [
              "Must every PersonWithDementia have at least one record containing a diagnosis assessment indicating dementia?",
              "Is a PersonWithDementia equivalent to someone with a clinical record that includes an assessment with a clinical diagnosis of dementia?",
              "Does the definition of PersonWithDementia require the intersection of having a clinical record and an assessment diagnosing dementia?"
            ]
          }
        ]
      },
      "S1_DirectedActivitiesStep": {
        "axiom": {
          "subClassOf": [
            "ProtocolStep"
          ],
          "propertyRestrictions": [
            "[involvesTask exactly 1 S1_P11_WalkingTask]",
            "[involvesTask exactly 1 S1_P13_WalkingCountingBackwardsTask]",
            "[involvesTask exactly 1 S1_P21_SentenceRepeatingTask]",
            "[involvesTask only (S1_P11_WalkingTask or S1_P12_CountingBackwardsTask or S1_P13_WalkingCountingBackwardsTask or S1_P21_SentenceRepeatingTask or S1_P22_ArticulationControlTask or Task)]",
            "[involvesTask exactly 1 S1_P22_ArticulationControlTask]",
            "[involvesTask exactly 1 S1_P12_CountingBackwardsTask]"
          ]
        },
        "description": "S1_DirectedActivitiesStep is defined as a subclass of ProtocolStep. Each instance of this class is required to involve exactly one S1_P11_WalkingTask, one S1_P12_CountingBackwardsTask, one S1_P13_WalkingCountingBackwardsTask, one S1_P21_SentenceRepeatingTask, and one S1_P22_ArticulationControlTask. Additionally, the only tasks permitted to be involved are S1_P11_WalkingTask, S1_P12_CountingBackwardsTask, S1_P13_WalkingCountingBackwardsTask, S1_P21_SentenceRepeatingTask, S1_P22_ArticulationControlTask, or other general Task instances. This formalization ensures that each S1_DirectedActivitiesStep is composed of these five specific tasks, and does not include any other types of tasks.",
        "CQ": [
          {
            "axiom": "S1_DirectedActivitiesStep subClassOf ProtocolStep",
            "CQ": [
              "Is S1_DirectedActivitiesStep an instance within the broader classification of ProtocolStep?",
              "Which steps are categorized more specifically under ProtocolStep, including S1_DirectedActivitiesStep?",
              "What are the immediate parent categories to which S1_DirectedActivitiesStep belongs?"
            ]
          },
          {
            "axiom": "S1_DirectedActivitiesStep propertyRestrictions [involvesTask exactly 1 S1_P11_WalkingTask]",
            "CQ": [
              "Is every instance of S1_DirectedActivitiesStep required to involve exactly one S1_P11_WalkingTask through the involvesTask property?",
              "Can an S1_DirectedActivitiesStep be valid if it involves more or fewer than one S1_P11_WalkingTask?",
              "Does the ontology ensure that S1_DirectedActivitiesStep cannot involve multiple or zero S1_P11_WalkingTasks via the involvesTask relation?"
            ]
          },
          {
            "axiom": "S1_DirectedActivitiesStep propertyRestrictions [involvesTask exactly 1 S1_P13_WalkingCountingBackwardsTask]",
            "CQ": [
              "Is every S1_DirectedActivitiesStep required to involve exactly one occurrence of the S1_P13_WalkingCountingBackwardsTask as its task?",
              "Can there be more than one or less than one S1_P13_WalkingCountingBackwardsTask involved in a single S1_DirectedActivitiesStep?",
              "Does the property restriction entail that S1_DirectedActivitiesStep cannot involve any other type of task besides one instance of S1_P13_WalkingCountingBackwardsTask?"
            ]
          },
          {
            "axiom": "S1_DirectedActivitiesStep propertyRestrictions [involvesTask exactly 1 S1_P21_SentenceRepeatingTask]",
            "CQ": [
              "Is each S1_DirectedActivitiesStep required to involve exactly one S1_P21_SentenceRepeatingTask as its task?",
              "Can an S1_DirectedActivitiesStep include more than one or fewer than one S1_P21_SentenceRepeatingTask through the involvesTask property?",
              "Does an S1_DirectedActivitiesStep necessarily have the involvesTask property filled by precisely one S1_P21_SentenceRepeatingTask and not by any other number or type of task?"
            ]
          },
          {
            "axiom": "S1_DirectedActivitiesStep propertyRestrictions [involvesTask only (S1_P11_WalkingTask or S1_P12_CountingBackwardsTask or S1_P13_WalkingCountingBackwardsTask or S1_P21_SentenceRepeatingTask or S1_P22_ArticulationControlTask or Task)]",
            "CQ": [
              "Must every S1_DirectedActivitiesStep solely involve tasks that are either S1_P11_WalkingTask, S1_P12_CountingBackwardsTask, S1_P13_WalkingCountingBackwardsTask, S1_P21_SentenceRepeatingTask, S1_P22_ArticulationControlTask, or Task?",
              "Is it possible for an S1_DirectedActivitiesStep to involve a task that is not among S1_P11_WalkingTask, S1_P12_CountingBackwardsTask, S1_P13_WalkingCountingBackwardsTask, S1_P21_SentenceRepeatingTask, S1_P22_ArticulationControlTask, or Task?",
              "Are activities classified as S1_DirectedActivitiesStep permitted to involve only tasks from the specified set of six task categories?"
            ]
          },
          {
            "axiom": "S1_DirectedActivitiesStep propertyRestrictions [involvesTask exactly 1 S1_P22_ArticulationControlTask]",
            "CQ": [
              "Is every instance of S1_DirectedActivitiesStep required to involve exactly one S1_P22_ArticulationControlTask as its task?",
              "Can an S1_DirectedActivitiesStep have more or fewer than one involvesTask relation to S1_P22_ArticulationControlTask?",
              "Does S1_DirectedActivitiesStep allow for multiple or no S1_P22_ArticulationControlTask tasks to be involved?"
            ]
          },
          {
            "axiom": "S1_DirectedActivitiesStep propertyRestrictions [involvesTask exactly 1 S1_P12_CountingBackwardsTask]",
            "CQ": [
              "Is every S1_DirectedActivitiesStep required to involve exactly one S1_P12_CountingBackwardsTask as a task?",
              "Can an S1_DirectedActivitiesStep include more than one S1_P12_CountingBackwardsTask?",
              "Is it permitted for an S1_DirectedActivitiesStep to exclude the S1_P12_CountingBackwardsTask from its tasks?"
            ]
          }
        ]
      },
      "S1_P11_WalkingTask": {
        "axiom": {
          "subClassOf": [
            "DirectedTask"
          ],
          "propertyRestrictions": [
            "[measuredData some LatencyData]",
            "[measuredData only (GaitData or LatencyData or StressData)]",
            "[measuredData some GaitData]"
          ]
        },
        "description": "S1_P11_WalkingTask is a subclass of DirectedTask, representing a specific type of directed task that involves walking. Every instance of this class is required to have at least some measuredData of type GaitData as well as some LatencyData, and the measuredData associated with any instance may only be of types GaitData, LatencyData, or StressData. This ensures that S1_P11_WalkingTask is characterized by the collection and analysis of gait and latency information, with the potential inclusion of stress-related data during walking activities.",
        "CQ": [
          {
            "axiom": "S1_P11_WalkingTask subClassOf DirectedTask",
            "CQ": [
              "Is every S1_P11_WalkingTask instance a specific form of DirectedTask?",
              "Which task types are classified under DirectedTask along with S1_P11_WalkingTask?",
              "To which overarching task categories does S1_P11_WalkingTask pertain?"
            ]
          },
          {
            "axiom": "S1_P11_WalkingTask propertyRestrictions [measuredData some LatencyData]",
            "CQ": [
              "Is it required that every S1_P11_WalkingTask instance has at least one measuredData property linking to LatencyData?",
              "Can an S1_P11_WalkingTask exist without having any measuredData related to LatencyData?",
              "Does the presence of LatencyData as measuredData define S1_P11_WalkingTask instances in the ontology?"
            ]
          },
          {
            "axiom": "S1_P11_WalkingTask propertyRestrictions [measuredData only (GaitData or LatencyData or StressData)]",
            "CQ": [
              "Is it required that S1_P11_WalkingTask has measuredData exclusively of type GaitData, LatencyData, or StressData?",
              "May S1_P11_WalkingTask ever have measuredData relating to any data type aside from GaitData, LatencyData, or StressData?",
              "Does the ontology prohibit S1_P11_WalkingTask from being associated with measuredData outside the categories of GaitData, LatencyData, or StressData?"
            ]
          },
          {
            "axiom": "S1_P11_WalkingTask propertyRestrictions [measuredData some GaitData]",
            "CQ": [
              "Does every instance of S1_P11_WalkingTask require the existence of at least one measuredData property linked to GaitData?",
              "Is it necessary that S1_P11_WalkingTask is associated with measuredData that includes GaitData?",
              "Can an S1_P11_WalkingTask exist without any measuredData of the type GaitData?"
            ]
          }
        ]
      },
      "S1_P21_SentenceRepeatingTask": {
        "axiom": {
          "subClassOf": [
            "DirectedTask"
          ],
          "propertyRestrictions": [
            "[measuredData some MoodVoiceData]",
            "[measuredData only (LatencyData or MoodVoiceData or StressData)]",
            "[measuredData some LatencyData]"
          ]
        },
        "description": "S1_P21_SentenceRepeatingTask is a subclass of DirectedTask characterized by measuredData properties. Every instance must have at least one measuredData value of type MoodVoiceData and at least one of type LatencyData. The measuredData property for this class can only be filled with LatencyData, MoodVoiceData, or StressData, and no other types. This structure ensures the task consistently collects both mood/voice and latency data, restricting measured data types to those specifically listed.",
        "CQ": [
          {
            "axiom": "S1_P21_SentenceRepeatingTask subClassOf DirectedTask",
            "CQ": [
              "Is S1_P21_SentenceRepeatingTask categorized as a kind of DirectedTask?",
              "Which specialized tasks fall under the category of DirectedTask, such as S1_P21_SentenceRepeatingTask?",
              "What broader task categories encompass S1_P21_SentenceRepeatingTask?"
            ]
          },
          {
            "axiom": "S1_P21_SentenceRepeatingTask propertyRestrictions [measuredData some MoodVoiceData]",
            "CQ": [
              "Does every S1_P21_SentenceRepeatingTask require the presence of measuredData that relates to MoodVoiceData?",
              "Is MoodVoiceData a necessary component of measuredData for an S1_P21_SentenceRepeatingTask?",
              "Does the execution of S1_P21_SentenceRepeatingTask entail at least one measuredData instance that is classified as MoodVoiceData?"
            ]
          },
          {
            "axiom": "S1_P21_SentenceRepeatingTask propertyRestrictions [measuredData only (LatencyData or MoodVoiceData or StressData)]",
            "CQ": [
              "Is S1_P21_SentenceRepeatingTask allowed to have measuredData that belongs only to LatencyData, MoodVoiceData, or StressData categories?",
              "Can any measuredData associated with S1_P21_SentenceRepeatingTask be something other than LatencyData, MoodVoiceData, or StressData?",
              "Does S1_P21_SentenceRepeatingTask necessarily exclude measuredData types outside of LatencyData, MoodVoiceData, and StressData?"
            ]
          },
          {
            "axiom": "S1_P21_SentenceRepeatingTask propertyRestrictions [measuredData some LatencyData]",
            "CQ": [
              "Does every S1_P21_SentenceRepeatingTask require at least one measuredData relating to LatencyData?",
              "Is the presence of LatencyData under the measuredData property necessary for all S1_P21_SentenceRepeatingTask instances?",
              "Can an S1_P21_SentenceRepeatingTask exist without any measuredData that is of type LatencyData?"
            ]
          }
        ]
      },
      "ClinicalRecord": {
        "axiom": {
          "propertyRestrictions": [
            "[containsAssessment exactly 1 AutonomyAssessment]",
            "[containsAssessment exactly 1 MotricityAbilitiesAssessment]",
            "[containsAssessment exactly 1 CognitiveAbilitiesAssessment]",
            "[containsAssessment only (AutonomyAssessment or CognitiveAbilitiesAssessment or DiagnosisAssessment or MotricityAbilitiesAssessment or NeuropsychiatricAndMoodAssessment)]",
            "[containsAssessment exactly 1 DiagnosisAssessment]"
          ]
        },
        "description": "ClinicalRecord is defined as a class that must contain exactly one instance each of AutonomyAssessment, MotricityAbilitiesAssessment, CognitiveAbilitiesAssessment, and DiagnosisAssessment. Furthermore, the containsAssessment property for any ClinicalRecord instance is restricted to only those assessments that are of type AutonomyAssessment, CognitiveAbilitiesAssessment, DiagnosisAssessment, MotricityAbilitiesAssessment, or NeuropsychiatricAndMoodAssessment. This ensures that every ClinicalRecord is a structured record of clinical assessments, each holding exactly one specific assessment of autonomy, motricity abilities, cognitive abilities, and diagnosis, with assessments strictly limited to the defined set.",
        "CQ": [
          {
            "axiom": "ClinicalRecord propertyRestrictions [containsAssessment exactly 1 AutonomyAssessment]",
            "CQ": [
              "Must every ClinicalRecord contain exactly one AutonomyAssessment as an assessment?",
              "Is it permissible for a ClinicalRecord to include more than one AutonomyAssessment via the containsAssessment property?",
              "Does a ClinicalRecord that lacks an AutonomyAssessment, or that contains multiple AutonomyAssessments, violate the defined property restriction?"
            ]
          },
          {
            "axiom": "ClinicalRecord propertyRestrictions [containsAssessment exactly 1 MotricityAbilitiesAssessment]",
            "CQ": [
              "Is a ClinicalRecord required to have exactly one MotricityAbilitiesAssessment via the containsAssessment property?",
              "Can a ClinicalRecord include more than one MotricityAbilitiesAssessment through containsAssessment?",
              "Does the presence of zero or multiple MotricityAbilitiesAssessments in a ClinicalRecord violate its property restriction on containsAssessment?"
            ]
          },
          {
            "axiom": "ClinicalRecord propertyRestrictions [containsAssessment exactly 1 CognitiveAbilitiesAssessment]",
            "CQ": [
              "Must every ClinicalRecord contain exactly one CognitiveAbilitiesAssessment as an assessment component?",
              "Is it possible for a ClinicalRecord to include more or fewer than one CognitiveAbilitiesAssessment via the containsAssessment property?",
              "Does the ClinicalRecord definition require that containsAssessment is present and refers only to a single CognitiveAbilitiesAssessment?"
            ]
          },
          {
            "axiom": "ClinicalRecord propertyRestrictions [containsAssessment only (AutonomyAssessment or CognitiveAbilitiesAssessment or DiagnosisAssessment or MotricityAbilitiesAssessment or NeuropsychiatricAndMoodAssessment)]",
            "CQ": [
              "Is a ClinicalRecord permitted to contain any assessment type apart from AutonomyAssessment, CognitiveAbilitiesAssessment, DiagnosisAssessment, MotricityAbilitiesAssessment, or NeuropsychiatricAndMoodAssessment?",
              "Must every assessment included in a ClinicalRecord be either an AutonomyAssessment, CognitiveAbilitiesAssessment, DiagnosisAssessment, MotricityAbilitiesAssessment, or NeuropsychiatricAndMoodAssessment?",
              "Does the ontology prevent ClinicalRecord from containing assessments outside the set of AutonomyAssessment, CognitiveAbilitiesAssessment, DiagnosisAssessment, MotricityAbilitiesAssessment, or NeuropsychiatricAndMoodAssessment?"
            ]
          },
          {
            "axiom": "ClinicalRecord propertyRestrictions [containsAssessment exactly 1 DiagnosisAssessment]",
            "CQ": [
              "Is every ClinicalRecord required to contain exactly one DiagnosisAssessment via the containsAssessment property?",
              "Can a ClinicalRecord have more or fewer than one DiagnosisAssessment linked through containsAssessment?",
              "Does the ontology prohibit a ClinicalRecord from containing multiple or zero DiagnosisAssessments through containsAssessment?"
            ]
          }
        ]
      },
      "ExperimentalRecord": {
        "axiom": {
          "propertyRestrictions": [
            "[containsAssessment exactly 1 ExperimentalDiagnosisAssessment]",
            "[containsAssessment exactly 1 CognitiveLoadAssessment]",
            "[containsAssessment only (AbilityToOrganiseAssessment or ApathyAssessment or CognitiveLoadAssessment or ExperimentalDiagnosisAssessment or FunctionalAbilityAssessment or GaitAssessment or MemorySelfAppraisalAssessment or StressAssessment)]",
            "[containsAssessment exactly 1 AbilityToOrganiseAssessment]",
            "[containsAssessment exactly 1 FunctionalAbilityAssessment]",
            "[containsAssessment exactly 1 MemorySelfAppraisalAssessment]",
            "[containsAssessment exactly 1 GaitAssessment]",
            "[containsAssessment exactly 1 ApathyAssessment]",
            "[containsAssessment exactly 1 StressAssessment]"
          ]
        },
        "description": "ExperimentalRecord represents a record comprised of exactly one assessment of each of the following types: ExperimentalDiagnosisAssessment, CognitiveLoadAssessment, AbilityToOrganiseAssessment, FunctionalAbilityAssessment, MemorySelfAppraisalAssessment, GaitAssessment, ApathyAssessment, and StressAssessment. The class restricts its containsAssessment property so that only these eight specific assessment types are includedâ€”no additional or alternative types are permitted. Each ExperimentalRecord must contain exactly one instance of each assessment type, ensuring comprehensive and standardized coverage within each record.",
        "CQ": [
          {
            "axiom": "ExperimentalRecord propertyRestrictions [containsAssessment exactly 1 ExperimentalDiagnosisAssessment]",
            "CQ": [
              "Must every ExperimentalRecord contain exactly one ExperimentalDiagnosisAssessment as its assessment?",
              "Can an ExperimentalRecord have more or fewer than one containsAssessment relationship to ExperimentalDiagnosisAssessment?",
              "Is it required that the containsAssessment property of ExperimentalRecord is limited to a single ExperimentalDiagnosisAssessment instance?"
            ]
          },
          {
            "axiom": "ExperimentalRecord propertyRestrictions [containsAssessment exactly 1 CognitiveLoadAssessment]",
            "CQ": [
              "Is it required that an ExperimentalRecord contains exactly one CognitiveLoadAssessment as an assessment?",
              "Can an ExperimentalRecord have either no CognitiveLoadAssessment or more than one CognitiveLoadAssessment through the containsAssessment property?",
              "Does the definition of ExperimentalRecord enforce that the containsAssessment property is limited to a single CognitiveLoadAssessment instance?"
            ]
          },
          {
            "axiom": "ExperimentalRecord propertyRestrictions [containsAssessment only (AbilityToOrganiseAssessment or ApathyAssessment or CognitiveLoadAssessment or ExperimentalDiagnosisAssessment or FunctionalAbilityAssessment or GaitAssessment or MemorySelfAppraisalAssessment or StressAssessment)]",
            "CQ": [
              "Is every assessment contained in an ExperimentalRecord restricted to AbilityToOrganiseAssessment, ApathyAssessment, CognitiveLoadAssessment, ExperimentalDiagnosisAssessment, FunctionalAbilityAssessment, GaitAssessment, MemorySelfAppraisalAssessment, or StressAssessment?",
              "Can an ExperimentalRecord include any assessment type outside the specified set of eight assessment categories?",
              "Does an ExperimentalRecord necessarily exclude all assessments other than the listed types under containsAssessment?"
            ]
          },
          {
            "axiom": "ExperimentalRecord propertyRestrictions [containsAssessment exactly 1 AbilityToOrganiseAssessment]",
            "CQ": [
              "Is every ExperimentalRecord required to include exactly one containsAssessment that is an AbilityToOrganiseAssessment?",
              "Can an ExperimentalRecord be valid if it has more or fewer than one containsAssessment of type AbilityToOrganiseAssessment?",
              "Does the specification prevent an ExperimentalRecord from having multiple or no containsAssessment relationships with AbilityToOrganiseAssessment?"
            ]
          },
          {
            "axiom": "ExperimentalRecord propertyRestrictions [containsAssessment exactly 1 FunctionalAbilityAssessment]",
            "CQ": [
              "Is every ExperimentalRecord required to contain exactly one FunctionalAbilityAssessment as an assessment?",
              "Can an ExperimentalRecord include more than one FunctionalAbilityAssessment?",
              "Is it possible for an ExperimentalRecord to be valid without containing a FunctionalAbilityAssessment?"
            ]
          },
          {
            "axiom": "ExperimentalRecord propertyRestrictions [containsAssessment exactly 1 MemorySelfAppraisalAssessment]",
            "CQ": [
              "Is every ExperimentalRecord required to contain exactly one MemorySelfAppraisalAssessment as an assessment?",
              "Can an ExperimentalRecord have more than one or no MemorySelfAppraisalAssessment in its assessment content?",
              "Are there any circumstances in which an ExperimentalRecord contains a different number of MemorySelfAppraisalAssessment assessments than one?"
            ]
          },
          {
            "axiom": "ExperimentalRecord propertyRestrictions [containsAssessment exactly 1 GaitAssessment]",
            "CQ": [
              "Is every ExperimentalRecord required to contain exactly one GaitAssessment as its assessment component?",
              "Can an ExperimentalRecord have more than one GaitAssessment associated through the containsAssessment property?",
              "Does the presence of exactly one GaitAssessment via containsAssessment fully satisfy the property restriction for ExperimentalRecord?"
            ]
          },
          {
            "axiom": "ExperimentalRecord propertyRestrictions [containsAssessment exactly 1 ApathyAssessment]",
            "CQ": [
              "Is every ExperimentalRecord required to include exactly one ApathyAssessment as its containsAssessment?",
              "Can an ExperimentalRecord have more than one or none containsAssessment relations with ApathyAssessment?",
              "Does the property restriction on ExperimentalRecord exclude the possibility of containsAssessment linking to assessments other than one ApathyAssessment?"
            ]
          },
          {
            "axiom": "ExperimentalRecord propertyRestrictions [containsAssessment exactly 1 StressAssessment]",
            "CQ": [
              "Is every ExperimentalRecord required to contain exactly one StressAssessment as its assessment?",
              "Can an ExperimentalRecord contain more than one StressAssessment in its assessments?",
              "If an ExperimentalRecord does not have any StressAssessment, can it still satisfy the property restrictions?"
            ]
          }
        ]
      },
      "Task": {
        "axiom": {
          "propertyRestrictions": [
            "[startTime exactly 1 time:Instant]",
            "[measuredData some StressData]",
            "[startTime only time:Instant]",
            "[endTime exactly 1 time:Instant]",
            "[endTime only time:Instant]",
            "[measuredData only StressData]"
          ]
        },
        "description": "Task is defined as a class whose members are associated with exactly one start time and exactly one end time, each of which must be an instance of time:Instant. Additionally, every Task must have some measuredData, and all such measuredData must be of type StressData. These property restrictions ensure that every Task is temporally bounded and is characterized by stress-related measurements.",
        "CQ": [
          {
            "axiom": "Task propertyRestrictions [startTime exactly 1 time:Instant]",
            "CQ": [
              "Is every Task required to have exactly one startTime that is an instance of time:Instant?",
              "Can a Task possess multiple startTime values associated with time:Instant, or is it limited to just one?",
              "Does the ontology restrict each Task to a single occurrence of the startTime property with time:Instant as its value?"
            ]
          },
          {
            "axiom": "Task propertyRestrictions [measuredData some StressData]",
            "CQ": [
              "Is it required that every Task has at least one measuredData relationship to StressData?",
              "Does the presence of measuredData linking to StressData define a Task instance?",
              "Can a Task exist in the ontology without being associated through measuredData to StressData?"
            ]
          },
          {
            "axiom": "Task propertyRestrictions [startTime only time:Instant]",
            "CQ": [
              "Is every startTime associated with a Task necessarily an instance of time:Instant?",
              "Can a Task have a startTime that is not categorized as time:Instant?",
              "Are all values for the startTime property of Task limited exclusively to the type time:Instant?"
            ]
          },
          {
            "axiom": "Task propertyRestrictions [endTime exactly 1 time:Instant]",
            "CQ": [
              "Is every Task required to have exactly one endTime specified as a time:Instant?",
              "Can a Task have more than one endTime assigned?",
              "Is it permissible for a Task to not have any endTime at all?"
            ]
          },
          {
            "axiom": "Task propertyRestrictions [endTime only time:Instant]",
            "CQ": [
              "Is it required that every endTime associated with a Task is an instance of time:Instant?",
              "Does the Task entity permit only time:Instant values for its endTime property?",
              "Is the endTime of a Task restricted to be solely of type time:Instant without exceptions?"
            ]
          },
          {
            "axiom": "Task propertyRestrictions [measuredData only StressData]",
            "CQ": [
              "Is it necessary for every measuredData of a Task to be of type StressData?",
              "Can a Task have measuredData that is not classified as StressData?",
              "Does the property measuredData for Task restrict data types strictly to StressData and no other types?"
            ]
          }
        ]
      }
    },
    "properties": {}
  },
  "swo": {
    "classes": {
      "Preclinical and clinical studies": {
        "axiom": {
          "subClassOf": [
            "Medicine research and development"
          ]
        },
        "description": "Preclinical and clinical studies is a subclass of Medicine research and development. This class includes activities focused on testing new medicines, vaccines, or medical procedures first on animals (preclinical studies) and then on humans (clinical studies), all conducted prior to regulatory approval. The formalization aligns with the definition, emphasizing the sequential and comprehensive process integral to medical research and development.",
        "CQ": [
          {
            "axiom": "Preclinical and clinical studies subClassOf Medicine research and development",
            "CQ": [
              "Are preclinical and clinical studies classified under the broader category of medicine research and development?",
              "Which research and development activities are more specific subdivisions of medicine research and development, such as preclinical and clinical studies?",
              "What general domains of research and development encompass preclinical and clinical studies?"
            ]
          }
        ]
      },
      "Protein dipole moment calculation": {
        "axiom": {
          "subClassOf": [
            "Protein property calculation (from sequence)"
          ],
          "propertyRestrictions": [
            "[has output some Protein dipole moment]"
          ]
        },
        "description": "Protein dipole moment calculation is a subclass of Protein property calculation (from sequence) and is characterized by producing at least one Protein dipole moment as output. This class represents computational methods or procedures used to determine whether a protein structure exhibits an unusually large net charge, specifically by calculating its dipole moment.",
        "CQ": [
          {
            "axiom": "Protein dipole moment calculation subClassOf Protein property calculation (from sequence)",
            "CQ": [
              "Does Protein dipole moment calculation represent a specific instance of Protein property calculation (from sequence)?",
              "Which calculation types are classified under Protein property calculation (from sequence), such as Protein dipole moment calculation?",
              "What broader categories include Protein dipole moment calculation as a member?"
            ]
          },
          {
            "axiom": "Protein dipole moment calculation propertyRestrictions [has output some Protein dipole moment]",
            "CQ": [
              "Does every instance of Protein dipole moment calculation necessarily produce at least one output of Protein dipole moment?",
              "Is it required that the output of a Protein dipole moment calculation always includes a Protein dipole moment?",
              "Can a Protein dipole moment calculation exist without yielding a Protein dipole moment as its output?"
            ]
          }
        ]
      },
      "GeneR": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[has specified data input some (data and [has format specification some R data frame])]",
            "[has specified data input some (Gene list and [has format specification some data format specification])]",
            "[is encoded in some R language]",
            "[has specified data input some (data and [has format specification some FASTA])]"
          ]
        },
        "description": "GeneR is defined as a subclass of software that is implemented in the R programming language. Members of this class are characterized by accepting multiple specified data input types: general data formatted as R data frames, gene lists with specific data format specifications, and data in FASTA format. These input constraints ensure that any instance of GeneR-typed software is capable of handling commonly used biological data formats, particularly those relevant for bioinformatics applications in R.",
        "CQ": [
          {
            "axiom": "GeneR subClassOf software",
            "CQ": [
              "Is GeneR categorized under the broader class of software?",
              "What are the specific subclasses defined within the class of software, including GeneR?",
              "To which upper-level classes does GeneR belong according to the hierarchy?"
            ]
          },
          {
            "axiom": "GeneR propertyRestrictions [has specified data input some (data and [has format specification some R data frame])]",
            "CQ": [
              "Is every GeneR instance required to have at least one specified data input that includes data with a format specified as an R data frame?",
              "Can a GeneR be correctly modeled if it does not have any specified data input that is a data formatted as an R data frame?",
              "Does the use of the property 'has specified data input' for GeneR instances necessarily involve data that has a format specification including an R data frame?"
            ]
          },
          {
            "axiom": "GeneR propertyRestrictions [has specified data input some (Gene list and [has format specification some data format specification])]",
            "CQ": [
              "Does GeneR require at least one specified data input that is both a Gene list and has some data format specification?",
              "Must all specified data inputs of GeneR meet the criteria of being Gene lists with an associated data format specification?",
              "Can GeneR have a specified data input that is not a Gene list or lacks a data format specification?"
            ]
          },
          {
            "axiom": "GeneR propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is every GeneR necessarily encoded in at least one R language?",
              "Does the definition of GeneR require that it must be encoded in an R language?",
              "Can a GeneR exist that is not encoded in any R language?"
            ]
          },
          {
            "axiom": "GeneR propertyRestrictions [has specified data input some (data and [has format specification some FASTA])]",
            "CQ": [
              "Is it necessary for a GeneR to have at least one specified data input that includes both data and a format specification such as FASTA?",
              "Must all specified data inputs associated with GeneR include a data component that is linked to a FASTA format specification?",
              "Can a GeneR exist without any specified data input that has both the data and a format specification of FASTA?"
            ]
          }
        ]
      },
      "maCorrPlot": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[has specified data output some Graph plot]",
            "[is encoded in some R language]",
            "[has specified data input some [has format specification only (mas5 format or .rma format)]]",
            "[is published by hasValue Bioconductor]",
            "[is executed in some (data visualization and background correction and data normalization)]"
          ]
        },
        "description": "maCorrPlot is a subclass of software designed for use in data visualization, background correction, and data normalization workflows. It requires data inputs specifically in mas5 or .rma formats, and its outputs include at least one Graph plot. maCorrPlot is implemented in the R language, and the authoritative source for this software is Bioconductor. This class formalizes the functional characteristics and technical restrictions of maCorrPlot, ensuring its application in specialized bioinformatic data analysis pipelines.",
        "CQ": [
          {
            "axiom": "maCorrPlot subClassOf software",
            "CQ": [
              "Is maCorrPlot categorized under the broader class of software?",
              "Which specific instances or subclasses fall under the category of software, such as maCorrPlot?",
              "What higher-level categories does maCorrPlot belong to within the ontology?"
            ]
          },
          {
            "axiom": "maCorrPlot propertyRestrictions [has specified data output some Graph plot]",
            "CQ": [
              "Must every maCorrPlot have at least one specified data output that is a Graph plot?",
              "Is it possible for a maCorrPlot to exist without producing a Graph plot as a specified data output?",
              "Does the specification of data output for maCorrPlot necessarily include some type of Graph plot?"
            ]
          },
          {
            "axiom": "maCorrPlot propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is it required for every instance of maCorrPlot to be encoded in at least one R language?",
              "Does maCorrPlot necessarily involve an encoding implemented using R language?",
              "Can a maCorrPlot exist without being associated with the R language for its encoding?"
            ]
          },
          {
            "axiom": "maCorrPlot propertyRestrictions [has specified data input some [has format specification only (mas5 format or .rma format)]]",
            "CQ": [
              "Is it required that any specified data input for maCorrPlot has a format specification restricted exclusively to mas5 format or .rma format?",
              "Can maCorrPlot accept a specified data input if its format specification is neither mas5 format nor .rma format?",
              "Does the property restriction ensure that all specified data inputs for maCorrPlot must have a format specification only among mas5 format or .rma format?"
            ]
          },
          {
            "axiom": "maCorrPlot propertyRestrictions [is published by hasValue Bioconductor]",
            "CQ": [
              "Is every maCorrPlot necessarily published by Bioconductor?",
              "Can a maCorrPlot be associated with a publisher other than Bioconductor?",
              "Does the property restriction for maCorrPlot enforce exclusive publication by Bioconductor?"
            ]
          },
          {
            "axiom": "maCorrPlot propertyRestrictions [is executed in some (data visualization and background correction and data normalization)]",
            "CQ": [
              "Is it required that maCorrPlot is executed in a context that involves data visualization, background correction, and data normalization?",
              "Can maCorrPlot be executed only in situations where all three processesâ€”data visualization, background correction, and data normalizationâ€”are present?",
              "Does the execution of maCorrPlot necessarily entail the simultaneous involvement of data visualization, background correction, and data normalization?"
            ]
          }
        ]
      },
      "CRG Expresso Web Tool": {
        "axiom": {
          "subClassOf": [
            "TCoffee"
          ],
          "propertyRestrictions": [
            "[has documentation hasValue ns6:gkl092]",
            "[has interface some web user interface]",
            "[uses software some CRG TCoffee 9.02.r1228]",
            "[output of some (software publishing process and [has participant hasValue Centre for Genomic Regulation (CRG) of Barcelona])]"
          ]
        },
        "description": "CRG Expresso Web Tool is defined as a subclass of TCoffee, with several specific characteristics. Individuals of this class are required to have documentation identified as ns6:gkl092 and provide at least one web user interface. They must utilize some version of the CRG TCoffee 9.02.r1228 software. Additionally, their outputs must result from a software publishing process in which the Centre for Genomic Regulation (CRG) of Barcelona is a participant. This class models web-based tools for TCoffee developed and documented by CRG, with online accessibility and provenance traceable to the institution.",
        "CQ": [
          {
            "axiom": "CRG Expresso Web Tool subClassOf TCoffee",
            "CQ": [
              "Does CRG Expresso Web Tool fall under the category of TCoffee tools?",
              "Which variants or tools are categorized as more specific forms of TCoffee, including CRG Expresso Web Tool?",
              "What higher-level classifications include CRG Expresso Web Tool as a member?"
            ]
          },
          {
            "axiom": "CRG Expresso Web Tool propertyRestrictions [has documentation hasValue ns6:gkl092]",
            "CQ": [
              "Is it necessary that the CRG Expresso Web Tool has documentation with the value ns6:gkl092?",
              "Does the CRG Expresso Web Toolâ€™s documentation property exclusively include the value ns6:gkl092?",
              "Can the CRG Expresso Web Tool be considered compliant if it lacks documentation with the value ns6:gkl092?"
            ]
          },
          {
            "axiom": "CRG Expresso Web Tool propertyRestrictions [has interface some web user interface]",
            "CQ": [
              "Does every instance of CRG Expresso Web Tool necessarily have at least one web user interface as its interface?",
              "Is it required for CRG Expresso Web Tool to be connected via the 'has interface' property to an entity classified as a web user interface?",
              "Can a CRG Expresso Web Tool exist without having any web user interface associated through the 'has interface' property?"
            ]
          },
          {
            "axiom": "CRG Expresso Web Tool propertyRestrictions [uses software some CRG TCoffee 9.02.r1228]",
            "CQ": [
              "Is it required for the CRG Expresso Web Tool to utilize at least one instance of the CRG TCoffee 9.02.r1228 software?",
              "Does every use of the CRG Expresso Web Tool involve employing the CRG TCoffee 9.02.r1228 as software?",
              "Can the CRG Expresso Web Tool use software other than CRG TCoffee 9.02.r1228, or is use restricted to this version only?"
            ]
          },
          {
            "axiom": "CRG Expresso Web Tool propertyRestrictions [output of some (software publishing process and [has participant hasValue Centre for Genomic Regulation (CRG) of Barcelona])]",
            "CQ": [
              "Does the CRG Expresso Web Tool require its output to result from at least one software publishing process involving the Centre for Genomic Regulation (CRG) of Barcelona as a participant?",
              "Is it necessary that any output produced by the CRG Expresso Web Tool is associated with a software publishing process in which the Centre for Genomic Regulation (CRG) of Barcelona participates?",
              "Can the output of the CRG Expresso Web Tool ever originate from a process that is not a software publishing process involving the Centre for Genomic Regulation (CRG) of Barcelona?"
            ]
          }
        ]
      },
      "BioPAX": {
        "axiom": {
          "subClassOf": [
            "Biological pathway or network format"
          ]
        },
        "description": "BioPAX is defined as a subclass of biological pathway or network format, meaning it is a specific type of data format for representing biological pathways or networks. According to its current definition, BioPAX is intended for the exchange of pathway data, and its data model is defined using OWL (Web Ontology Language), ensuring structured and semantically rich data representation. This places BioPAX within the context of standardized formats facilitating pathway data sharing and interoperability in the life sciences.",
        "CQ": [
          {
            "axiom": "BioPAX subClassOf Biological pathway or network format",
            "CQ": [
              "Is BioPAX classified under the general category of Biological pathway or network format?",
              "Which specific formats fall under the category of Biological pathway or network format, such as BioPAX?",
              "What broader categories is BioPAX directly associated with in terms of data formats for biological pathways or networks?"
            ]
          }
        ]
      },
      "qpgraph": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[is executed in some descriptive statistical calculation]",
            "[has specified data output some (Graph plot and [has format specification only R data frame])]",
            "[has specified data input some Gene expression data]",
            "[implements some (Pearson correlation estimator and AvgNRRs)]",
            "[is encoded in some R language]",
            "[is published by hasValue Bioconductor]"
          ]
        },
        "description": "qpgraph is a subclass of software that is specifically designed for use in descriptive statistical calculations, particularly those involving gene expression data as input. It outputs graph plots, with data formats specified as R data frames. qpgraph implements Pearson correlation estimators and AvgNRRs, and is encoded in the R programming language. This software is published by Bioconductor, ensuring its integration within the bioinformatics community.",
        "CQ": [
          {
            "axiom": "qpgraph subClassOf software",
            "CQ": [
              "Is qpgraph classified as a type of software?",
              "What are the specific subclasses of software, such as qpgraph?",
              "Which higher-level categories include qpgraph?"
            ]
          },
          {
            "axiom": "qpgraph propertyRestrictions [is executed in some descriptive statistical calculation]",
            "CQ": [
              "Is every instance of qpgraph required to be associated with at least one descriptive statistical calculation through the 'is executed in' property?",
              "Can a qpgraph exist if it is not executed in any descriptive statistical calculation?",
              "Does the execution of a qpgraph necessarily involve participation in a descriptive statistical calculation?"
            ]
          },
          {
            "axiom": "qpgraph propertyRestrictions [has specified data output some (Graph plot and [has format specification only R data frame])]",
            "CQ": [
              "Is it necessary for a qpgraph to have at least one specified data output that is both a Graph plot and has format specification restricted to R data frame?",
              "Does every specified data output related to a qpgraph in this context always correspond to a Graph plot whose format specification is only an R data frame?",
              "Can a qpgraph possess a specified data output that is not a Graph plot or whose format specification is not exclusively an R data frame?"
            ]
          },
          {
            "axiom": "qpgraph propertyRestrictions [has specified data input some Gene expression data]",
            "CQ": [
              "Is it required that qpgraph has at least one specified data input related to gene expression data?",
              "Can qpgraph be associated with specified data input other than gene expression data?",
              "Must each qpgraph instance include gene expression data among its specified data inputs?"
            ]
          },
          {
            "axiom": "qpgraph propertyRestrictions [implements some (Pearson correlation estimator and AvgNRRs)]",
            "CQ": [
              "Does every qpgraph have to implement at least one functionality that is both a Pearson correlation estimator and an AvgNRRs?",
              "Is it required for qpgraph to employ methods that satisfy the criteria of both Pearson correlation estimator and AvgNRRs?",
              "Can an entity be classified as qpgraph if it lacks an implementation comprising both Pearson correlation estimator and AvgNRRs?"
            ]
          },
          {
            "axiom": "qpgraph propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is every QPGraph necessarily encoded in at least one R language?",
              "Can a QPGraph exist without being encoded in any R language?",
              "Does the definition of QPGraph require that there is some encoding in an R language?"
            ]
          },
          {
            "axiom": "qpgraph propertyRestrictions [is published by hasValue Bioconductor]",
            "CQ": [
              "Is every qpgraph necessarily published by Bioconductor?",
              "Can any instance of qpgraph be published by a source other than Bioconductor?",
              "Are qpgraphs restricted to having their publisher as only Bioconductor?"
            ]
          }
        ]
      },
      "AtlasImage": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[output of some (software publishing process and [has participant hasValue Clontech Laboratories, Inc])]"
          ]
        },
        "description": "AtlasImage is defined as a subclass of software, specifically distinguished by being the output of at least one software publishing process in which Clontech Laboratories, Inc is a participant. This ensures that any instance of AtlasImage is software generated or published through such a process involving Clontech Laboratories, Inc.",
        "CQ": [
          {
            "axiom": "AtlasImage subClassOf software",
            "CQ": [
              "Is AtlasImage classified under the broader category of software?",
              "Which specific entities are categorized as subclasses of software, such as AtlasImage?",
              "To what higher-level categories does AtlasImage pertain within the ontology?"
            ]
          },
          {
            "axiom": "AtlasImage propertyRestrictions [output of some (software publishing process and [has participant hasValue Clontech Laboratories, Inc])]",
            "CQ": [
              "Is every AtlasImage necessarily the output of a software publishing process involving Clontech Laboratories, Inc. as a participant?",
              "Can an AtlasImage be produced without the involvement of Clontech Laboratories, Inc. in the software publishing process?",
              "Are AtlasImages limited to being outputs only from software publishing processes that have Clontech Laboratories, Inc. as a participant?"
            ]
          }
        ]
      },
      "affypdnn": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[has specified data input some (Text data set and [has format specification some R data frame])]",
            "[is encoded in some R language]",
            "[has specified data output some Graph plot]",
            "[is published by hasValue Bioconductor]"
          ]
        },
        "description": "affypdnn is defined as a subclass of software, with several specific characteristics. It operates on input that must be a text data set in the format of an R data frame, and it is encoded in the R programming language. The software produces output in the form of graph plots. Additionally, it is explicitly published by Bioconductor. These axioms collectively specify affypdnn as R-based software for producing graphical representations from structured text data sets, distributed via Bioconductor.",
        "CQ": [
          {
            "axiom": "affypdnn subClassOf software",
            "CQ": [
              "Is affypdnn categorized as a type of software?",
              "What other subclasses fall under software alongside affypdnn?",
              "Which higher-level classes encompass affypdnn?"
            ]
          },
          {
            "axiom": "affypdnn propertyRestrictions [has specified data input some (Text data set and [has format specification some R data frame])]",
            "CQ": [
              "Does affypdnn require at least one specified data input that is both a Text data set and has a format specification of R data frame?",
              "Is it necessary for affypdnn to accept as specified data input only those datasets that are text-based and formatted as R data frames?",
              "Can affypdnn have a specified data input unless it meets the criteria of being a Text data set with a format specification of R data frame?"
            ]
          },
          {
            "axiom": "affypdnn propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is every instance of affypdnn required to be encoded in at least one R language?",
              "Can affypdnn exist without being encoded in any R language?",
              "Does affypdnn necessarily imply the use of R language for its encoding property?"
            ]
          },
          {
            "axiom": "affypdnn propertyRestrictions [has specified data output some Graph plot]",
            "CQ": [
              "Is it necessary for affypdnn to have the property 'has specified data output' with a Graph plot?",
              "Can affypdnn have a data output other than a Graph plot specified by the property 'has specified data output'?",
              "Does affypdnn always produce at least one Graph plot as a specified data output?"
            ]
          },
          {
            "axiom": "affypdnn propertyRestrictions [is published by hasValue Bioconductor]",
            "CQ": [
              "Is every instance of affypdnn necessarily published by Bioconductor?",
              "Can affypdnn exist without being published by Bioconductor?",
              "Are there any publishers other than Bioconductor associated with affypdnn?"
            ]
          }
        ]
      },
      "rsbml": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[is executed in some (parse and cross validation)]",
            "[is encoded in some R language]",
            "[is published by hasValue Bioconductor]",
            "[has specified data input some [has format specification only SBML]]",
            "[has specified data output some [has format specification only XML]]"
          ]
        },
        "description": "rsbml is defined as a subclass of software, specifically characterized by several axioms. It must be executed through at least one of the following processes: parse or cross validation. The software is encoded in the R programming language and is published by Bioconductor. Regarding data interaction, rsbml takes as input data that is strictly formatted according to the SBML specification and produces output data formatted exclusively according to the XML specification. These axioms collectively ensure that any instance of rsbml adheres to these strict requirements concerning its function, implementation language, publisher, and I/O data format.",
        "CQ": [
          {
            "axiom": "rsbml subClassOf software",
            "CQ": [
              "Is rsbml categorized under the broader class of software?",
              "Which subclasses fall under software, with rsbml as an example?",
              "What higher-level classifications encompass rsbml?"
            ]
          },
          {
            "axiom": "rsbml propertyRestrictions [is executed in some (parse and cross validation)]",
            "CQ": [
              "Is it required that rsbml propertyRestrictions is executed in at least one context involving parse or cross validation?",
              "Can rsbml propertyRestrictions execution occur outside the processes of parse or cross validation?",
              "Does every instance of rsbml propertyRestrictions need to be executed in either a parse or cross validation scenario?"
            ]
          },
          {
            "axiom": "rsbml propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is it required that every rsbml property restriction be encoded in at least one R language?",
              "Can an rsbml property restriction exist without being encoded in any R language?",
              "Does the ontology allow for multiple R languages to encode a single rsbml property restriction?"
            ]
          },
          {
            "axiom": "rsbml propertyRestrictions [is published by hasValue Bioconductor]",
            "CQ": [
              "Is every rsbml resource necessarily published by Bioconductor according to the property restriction?",
              "Can an rsbml entity have a publisher other than Bioconductor under this axiom?",
              "Does the restriction on rsbml enforce that Bioconductor must always be the value for its publisher property?"
            ]
          },
          {
            "axiom": "rsbml propertyRestrictions [has specified data input some [has format specification only SBML]]",
            "CQ": [
              "Is it required that an rsbml propertyRestrictions entity with a specified data input must ensure all such inputs follow only the SBML format specification?",
              "Does an rsbml propertyRestrictions entity necessarily allow at least one specified data input, with all inputs conforming exclusively to the SBML format specification?",
              "If a specified data input associated with rsbml propertyRestrictions uses a format specification other than SBML, does this violate the defined restriction?"
            ]
          },
          {
            "axiom": "rsbml propertyRestrictions [has specified data output some [has format specification only XML]]",
            "CQ": [
              "Does every specified data output of an rsbml necessarily have a format specification limited to XML?",
              "Is it possible for an rsbml to have a specified data output whose format specification is not XML?",
              "Are all values of the format specification for data outputs specified by rsbml instances restricted to XML only?"
            ]
          }
        ]
      },
      "Data retrieval": {
        "axiom": {
          "subClassOf": [
            "Query and retrieval"
          ],
          "propertyRestrictions": [
            "[has input some Identifier]"
          ]
        },
        "description": "Data retrieval is defined as a subclass of Query and retrieval, specifically focusing on retrieving an entry or part of an entry from a data resource that matches a supplied query. Every instance of Data retrieval requires an input that is an Identifier, such as an accession number or an indexed term. This process may involve obtaining primary data and annotations associated with the query. The class formalizes retrieval activities where a unique identifier or an indexed keyword is used to locate and access relevant data entries within a resource.",
        "CQ": [
          {
            "axiom": "Data retrieval subClassOf Query and retrieval",
            "CQ": [
              "Is Data retrieval categorized under the broader class of Query and retrieval?",
              "Which types are recognized as specific forms of Query and retrieval, including Data retrieval?",
              "What higher-level groups does Data retrieval belong to in this ontology?"
            ]
          },
          {
            "axiom": "Data retrieval propertyRestrictions [has input some Identifier]",
            "CQ": [
              "Is it required that a Data retrieval instance has at least one 'has input' relationship to an Identifier?",
              "Can a Data retrieval process exist without being associated with any Identifier through the 'has input' property?",
              "Does Data retrieval necessarily involve input that is classified as an Identifier?"
            ]
          }
        ]
      },
      "Phylogenetic tree generation (from gene frequencies)": {
        "axiom": {
          "subClassOf": [
            "Phylogenetic tree generation (data centric)"
          ],
          "propertyRestrictions": [
            "[has topic some Gene expression]",
            "[has input some Phylogenetic gene frequencies data]"
          ]
        },
        "description": "Phylogenetic tree generation (from gene frequencies) is a subclass of Phylogenetic tree generation (data centric), specifically focusing on constructing phylogenetic trees using gene frequency data as input. This class is characterized by its association with the topic of gene expression and requires phylogenetic gene frequencies data as input. The formal definition emphasizes that the process involves phylogenetic tree construction derived from gene frequency data.",
        "CQ": [
          {
            "axiom": "Phylogenetic tree generation (from gene frequencies) subClassOf Phylogenetic tree generation (data centric)",
            "CQ": [
              "Is Phylogenetic tree generation (data centric) a generalization of Phylogenetic tree generation (from gene frequencies)?",
              "Which methods fall under the broader class of Phylogenetic tree generation (data centric)?",
              "What are the more specific types of Phylogenetic tree generation (data centric) that include Phylogenetic tree generation (from gene frequencies)?"
            ]
          },
          {
            "axiom": "Phylogenetic tree generation (from gene frequencies) propertyRestrictions [has topic some Gene expression]",
            "CQ": [
              "Must phylogenetic tree generation (from gene frequencies) always involve at least one topic related to gene expression?",
              "Is it necessary for the process of phylogenetic tree generation (from gene frequencies) to be associated with gene expression as a topic?",
              "Can phylogenetic tree generation (from gene frequencies) occur without referencing gene expression in its topic property?"
            ]
          },
          {
            "axiom": "Phylogenetic tree generation (from gene frequencies) propertyRestrictions [has input some Phylogenetic gene frequencies data]",
            "CQ": [
              "Does phylogenetic tree generation necessarily require at least one input of phylogenetic gene frequencies data?",
              "Is it possible to perform phylogenetic tree generation without providing any phylogenetic gene frequencies data as input?",
              "Must all instances of phylogenetic tree generation use some phylogenetic gene frequencies data as input?"
            ]
          }
        ]
      },
      "Dotplot plotting": {
        "axiom": {
          "subClassOf": [
            "Plotting",
            "Sequence word comparison",
            "Sequence alignment visualisation"
          ],
          "propertyRestrictions": [
            "[has output some Dotplot]"
          ]
        },
        "description": "Dotplot plotting is a subclass of Plotting, Sequence word comparison, and Sequence alignment visualisation, indicating its role in both visual representation and comparative analysis of biological sequences. Any Dotplot plotting process is characterized by producing some Dotplot as output. It specifically involves drawing a dotplot to visualize sequence similarities, which are identified through word-matching or character comparison techniques. This class formalizes visualization methods for interpreting sequence alignments using dotplots.",
        "CQ": [
          {
            "axiom": "Dotplot plotting subClassOf Plotting",
            "CQ": [
              "Is Dotplot plotting categorized as a specific type of Plotting?",
              "Which subcategories are encompassed by Plotting, including Dotplot plotting?",
              "To which broader classes does Dotplot plotting belong within the ontology?"
            ]
          },
          {
            "axiom": "Dotplot plotting subClassOf Sequence word comparison",
            "CQ": [
              "Does Dotplot plotting fall under the category of Sequence word comparison?",
              "Which methods are classified under Sequence word comparison, such as Dotplot plotting?",
              "What broader methodological class does Dotplot plotting belong to?"
            ]
          },
          {
            "axiom": "Dotplot plotting subClassOf Sequence alignment visualisation",
            "CQ": [
              "Does Dotplot plotting fall within the broader category of Sequence alignment visualisation?",
              "What specific visualisation techniques are classified as subtypes of Sequence alignment visualisation, including Dotplot plotting?",
              "Which upper-level visualisation categories encompass Dotplot plotting?"
            ]
          },
          {
            "axiom": "Dotplot plotting propertyRestrictions [has output some Dotplot]",
            "CQ": [
              "Is it required that every Dotplot plotting entity produces at least one output of type Dotplot?",
              "Can a plotting process classified as Dotplot plotting have an output other than Dotplot?",
              "Does the Dotplot plotting process necessarily generate a Dotplot as an output?"
            ]
          }
        ]
      },
      "Sequence signature recognition": {
        "axiom": {
          "subClassOf": [
            "Sequence feature detection"
          ],
          "propertyRestrictions": [
            "[has output some Sequence signature matches]",
            "[has topic some Sequence sites, features and motifs]"
          ]
        },
        "description": "Sequence signature recognition is a subclass of Sequence feature detection concerned with identifying (scanning for) known motifs, patterns, and regular expressions in molecular sequence(s). It is characterized by generating outputs that include Sequence signature matches and is associated with topics such as Sequence sites, features, and motifs. This class formally captures analyses that detect established sequence elements within biological sequences.",
        "CQ": [
          {
            "axiom": "Sequence signature recognition subClassOf Sequence feature detection",
            "CQ": [
              "Is Sequence feature detection a generalization of Sequence signature recognition?",
              "Which detection methods are more specific than Sequence feature detection, such as Sequence signature recognition?",
              "What broader detection categories include Sequence signature recognition?"
            ]
          },
          {
            "axiom": "Sequence signature recognition propertyRestrictions [has output some Sequence signature matches]",
            "CQ": [
              "Does sequence signature recognition always produce at least one output that is a sequence signature match?",
              "Is it required that the output of sequence signature recognition includes some sequence signature matches?",
              "Can sequence signature recognition result in an output that does not involve any sequence signature matches?"
            ]
          },
          {
            "axiom": "Sequence signature recognition propertyRestrictions [has topic some Sequence sites, features and motifs]",
            "CQ": [
              "Does a sequence signature recognition necessarily involve at least one topic concerning sequence sites, features, or motifs?",
              "Is it required for a sequence signature recognition to be associated with sequence sites, features, or motifs by the 'has topic' property?",
              "Can a sequence signature recognition exist without having 'has topic' linking it to sequence sites, features, or motifs?"
            ]
          }
        ]
      },
      "Protein family report": {
        "axiom": {
          "subClassOf": [
            "Protein report"
          ],
          "propertyRestrictions": [
            "[has topic some Protein families]"
          ]
        },
        "description": "Protein family report is defined as a subclass of Protein report, focusing specifically on content whose topic concerns one or more protein families. It is formally characterized by the requirement that it pertains to, or discusses, some protein families. According to its current definition, it provides informative content on a specific protein family or related classification, encompassing groups of protein sequences or structures.",
        "CQ": [
          {
            "axiom": "Protein family report subClassOf Protein report",
            "CQ": [
              "Is Protein report a broader category that encompasses Protein family report?",
              "Which types of reports are classified under Protein report, including Protein family report?",
              "To what higher-level categories does Protein family report belong?"
            ]
          },
          {
            "axiom": "Protein family report propertyRestrictions [has topic some Protein families]",
            "CQ": [
              "Is it required that a protein family report has at least one topic related to protein families?",
              "Does every protein family report necessarily cover a topic concerning protein families?",
              "Can a protein family report exist without having a topic associated with any protein family?"
            ]
          }
        ]
      },
      "BAI": {
        "axiom": {
          "subClassOf": [
            "Data index format"
          ],
          "propertyRestrictions": [
            "[is format of some Data index]"
          ]
        },
        "description": "BAI is defined as a subclass of Data index format, specifically described as the BAM indexing format. It is characterized by the property that every BAI instance is a format for at least one Data index. This axiomatization ensures that BAI represents formats used for indexing BAM data, supporting efficient data retrieval and access.",
        "CQ": [
          {
            "axiom": "BAI subClassOf Data index format",
            "CQ": [
              "Is BAI categorized under Data index format?",
              "Which data index formats include BAI as a specialization?",
              "What hierarchical classification does BAI have in relation to Data index format?"
            ]
          },
          {
            "axiom": "BAI propertyRestrictions [is format of some Data index]",
            "CQ": [
              "Is it required that every BAI is the format of at least one Data index?",
              "Can a BAI exist without being the format of any Data index?",
              "Does the definition of BAI permit it to be the format for multiple Data indices?"
            ]
          }
        ]
      },
      "Protein sequence alignment analysis": {
        "axiom": {
          "subClassOf": [
            "Protein analysis",
            "Prediction and recognition (protein)",
            "Sequence alignment analysis"
          ],
          "propertyRestrictions": [
            "[has input some Sequence alignment (protein)]"
          ]
        },
        "description": "Protein sequence alignment analysis is a subclass of Protein analysis, Prediction and recognition (protein), and Sequence alignment analysis. It is characterized by requiring at least one input of type Sequence alignment (protein). This class encompasses analyses performed on protein sequence alignments, typically to detect features or make predictions about the aligned sequences. The formal definition ensures that instances of this class specifically involve input data consisting of protein sequence alignments within the broader context of protein and sequence analysis.",
        "CQ": [
          {
            "axiom": "Protein sequence alignment analysis subClassOf Protein analysis",
            "CQ": [
              "Is Protein analysis a broader category that encompasses Protein sequence alignment analysis?",
              "Which analysis techniques are considered more specific types under Protein analysis, such as Protein sequence alignment analysis?",
              "To which higher-level analysis categories does Protein sequence alignment analysis belong?"
            ]
          },
          {
            "axiom": "Protein sequence alignment analysis subClassOf Prediction and recognition (protein)",
            "CQ": [
              "Is Protein sequence alignment analysis a specialized form of Prediction and recognition (protein)?",
              "Which analysis types are classified under Prediction and recognition (protein), including Protein sequence alignment analysis?",
              "What higher-level categories encompass Protein sequence alignment analysis?"
            ]
          },
          {
            "axiom": "Protein sequence alignment analysis subClassOf Sequence alignment analysis",
            "CQ": [
              "Is Sequence alignment analysis a broader category that encompasses Protein sequence alignment analysis?",
              "Which types of analyses are classified as more specific forms under Sequence alignment analysis, such as Protein sequence alignment analysis?",
              "To what general analysis categories can Protein sequence alignment analysis be conceptually assigned?"
            ]
          },
          {
            "axiom": "Protein sequence alignment analysis propertyRestrictions [has input some Sequence alignment (protein)]",
            "CQ": [
              "Is it required that protein sequence alignment analysis always has at least one input that is a protein sequence alignment?",
              "Can a protein sequence alignment analysis exist without taking any protein sequence alignment as input?",
              "Must every input to a protein sequence alignment analysis be a protein sequence alignment?"
            ]
          }
        ]
      },
      "Sequence Alignment and Modeling System": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[is executed in some multiple sequence alignment]"
          ]
        },
        "description": "Sequence Alignment and Modeling System is a subclass of software, characterized by its role in the context of multiple sequence alignment. Any instance of this class must be executed within at least one multiple sequence alignment process, reflecting its functional application in computational biology for aligning and modeling biological sequences.",
        "CQ": [
          {
            "axiom": "Sequence Alignment and Modeling System subClassOf software",
            "CQ": [
              "Is Sequence Alignment and Modeling System classified as a type of software?",
              "What are the specialized systems categorized under software, such as Sequence Alignment and Modeling System?",
              "Which broader classes include Sequence Alignment and Modeling System?"
            ]
          },
          {
            "axiom": "Sequence Alignment and Modeling System propertyRestrictions [is executed in some multiple sequence alignment]",
            "CQ": [
              "Is the execution of a Sequence Alignment and Modeling System necessarily associated with at least one multiple sequence alignment?",
              "Can a Sequence Alignment and Modeling System exist without being executed within any multiple sequence alignment?",
              "Does every instance where a Sequence Alignment and Modeling System is executed involve a multiple sequence alignment as the context?"
            ]
          }
        ]
      },
      "Protein-protein interaction prediction": {
        "axiom": {
          "subClassOf": [
            "Protein interaction prediction"
          ],
          "propertyRestrictions": [
            "[has output some Protein interaction report]",
            "[has topic some Protein interactions]"
          ]
        },
        "description": "Protein-protein interaction prediction is defined as a subclass of protein interaction prediction, focused specifically on the identification or prediction of interactions between proteins, including interfaces and binding sites. Members of this class are characterized by having outputs that are protein interaction reports and are concerned with topics relating to protein interactions. This ensures that any instance of this class is involved in generating reports about protein interactions and is centered on protein interaction phenomena.",
        "CQ": [
          {
            "axiom": "Protein-protein interaction prediction subClassOf Protein interaction prediction",
            "CQ": [
              "Does Protein-protein interaction prediction fall under the broader category of Protein interaction prediction?",
              "Which interaction prediction tasks are classified as specializations of Protein interaction prediction?",
              "To which upper-level categories does Protein-protein interaction prediction belong?"
            ]
          },
          {
            "axiom": "Protein-protein interaction prediction propertyRestrictions [has output some Protein interaction report]",
            "CQ": [
              "Must every protein-protein interaction prediction produce at least one protein interaction report as output?",
              "Is the existence of a protein interaction report output required for an activity to be classified as a protein-protein interaction prediction?",
              "Can a protein-protein interaction prediction be identified by the presence of a protein interaction report as its output?"
            ]
          },
          {
            "axiom": "Protein-protein interaction prediction propertyRestrictions [has topic some Protein interactions]",
            "CQ": [
              "Must every protein-protein interaction prediction have at least one topic related to protein interactions?",
              "Is it possible for a protein-protein interaction prediction to lack any association with protein interactions as its topic?",
              "Are all topics associated with protein-protein interaction prediction necessarily about protein interactions?"
            ]
          }
        ]
      },
      "MPL": {
        "axiom": {
          "subClassOf": [
            "software license"
          ],
          "propertyRestrictions": [
            "[has clause some Source code available]",
            "[has clause some Distribution with notices]"
          ]
        },
        "description": "MPL is defined as a subclass of software license, characterized by the requirement that any license in this class must include at least some clause ensuring that source code is available and at least some clause stipulating distribution must include notices. This formalization captures the core obligations commonly associated with the Mozilla Public License: making source code accessible and ensuring proper attribution upon distribution.",
        "CQ": [
          {
            "axiom": "MPL subClassOf software license",
            "CQ": [
              "Is MPL an instance of the more general category of software license?",
              "What types of software license include MPL as a more specific subclass?",
              "To which broader classifications does MPL, as a kind of license, belong?"
            ]
          },
          {
            "axiom": "MPL propertyRestrictions [has clause some Source code available]",
            "CQ": [
              "Is it required that every MPL instance includes at least one clause where source code is available?",
              "Can an MPL be considered valid if it lacks any clause with available source code?",
              "Does the existence of a clause with source code availability suffice for an MPL to meet its property restrictions?"
            ]
          },
          {
            "axiom": "MPL propertyRestrictions [has clause some Distribution with notices]",
            "CQ": [
              "Must every MPL include at least one clause associated with a Distribution notice?",
              "Is it required for an MPL to possess a 'has clause' relationship with some Distribution that includes notices?",
              "Does the presence of any clause in an MPL always correspond to Distribution with notices?"
            ]
          }
        ]
      },
      "Structural (3D) profile ID": {
        "axiom": {
          "subClassOf": [
            "Identifier (typed)",
            "Accession"
          ],
          "propertyRestrictions": [
            "[is identifier of some Structural profile]"
          ]
        },
        "description": "Structural (3D) profile ID is a subclass of both Identifier (typed) and Accession, representing identifiers or names specifically assigned to structural (3D) profiles or templates. Members of this class serve as identifiers for some Structural profile, such as those representing structures or structure alignments, ensuring unambiguous referencing within structural data repositories.",
        "CQ": [
          {
            "axiom": "Structural (3D) profile ID subClassOf Identifier (typed)",
            "CQ": [
              "Is Structural (3D) profile ID categorized under the broader class of Identifier (typed)?",
              "Which specific subclasses fall under Identifier (typed), including Structural (3D) profile ID?",
              "What higher-level categories encompass Structural (3D) profile ID?"
            ]
          },
          {
            "axiom": "Structural (3D) profile ID subClassOf Accession",
            "CQ": [
              "Is Structural (3D) profile ID classified under the broader concept of Accession?",
              "Which identifiers are more specific forms of Accession, such as Structural (3D) profile ID?",
              "To what overarching categories does Structural (3D) profile ID belong?"
            ]
          },
          {
            "axiom": "Structural (3D) profile ID propertyRestrictions [is identifier of some Structural profile]",
            "CQ": [
              "Is every Structural (3D) profile ID necessarily associated only with a Structural profile through the 'is identifier of' property?",
              "Must a Structural (3D) profile ID serve as an identifier for at least one Structural profile?",
              "Can a Structural (3D) profile ID exist without being linked to any Structural profile via the 'is identifier of' property?"
            ]
          }
        ]
      },
      "Cysteine bridge detection": {
        "axiom": {
          "subClassOf": [
            "Protein cysteine and disulfide bond assignment"
          ]
        },
        "description": "Cysteine bridge detection is defined as a subclass of protein cysteine and disulfide bond assignment. This class focuses on the identification of cysteine bridges, specifically by detecting disulfide bonds formed between cysteine residues within a protein structure using coordinate data. Individuals of this class perform or represent methods for recognizing these covalent linkages, which are important for protein stability and function.",
        "CQ": [
          {
            "axiom": "Cysteine bridge detection subClassOf Protein cysteine and disulfide bond assignment",
            "CQ": [
              "Does cysteine bridge detection fall under the broader category of protein cysteine and disulfide bond assignment?",
              "Which processes are recognized as specialized forms of protein cysteine and disulfide bond assignment, such as cysteine bridge detection?",
              "To which overarching categories is cysteine bridge detection formally related in the ontology?"
            ]
          }
        ]
      },
      "Secondary structure comparison": {
        "axiom": {
          "subClassOf": [
            "Comparison"
          ],
          "propertyRestrictions": [
            "[has topic some Structure comparison]"
          ]
        },
        "description": "Secondary structure comparison is a subclass of Comparison, specifically focused on evaluating or comparing molecular secondary structures. It is defined by the property restriction that its topic involves some form of structure comparison. Members of this class are concerned with the comparative analysis of two or more molecular secondary structures, as indicated by its definition.",
        "CQ": [
          {
            "axiom": "Secondary structure comparison subClassOf Comparison",
            "CQ": [
              "Is Secondary structure comparison classified under the broader category of Comparison?",
              "What are the specific types of Comparison that include Secondary structure comparison?",
              "Which parent categories encompass Secondary structure comparison?"
            ]
          },
          {
            "axiom": "Secondary structure comparison propertyRestrictions [has topic some Structure comparison]",
            "CQ": [
              "Must every instance of the secondary structure comparison propertyRestrictions involve the topic of structure comparison?",
              "Is it necessary for secondary structure comparison propertyRestrictions to relate to at least one structure comparison topic?",
              "Can a secondary structure comparison propertyRestriction exist without referencing the structure comparison topic?"
            ]
          }
        ]
      },
      "Sequence trace format": {
        "axiom": {
          "subClassOf": [
            "Sequence record format"
          ],
          "propertyRestrictions": [
            "[is format of some Sequence trace]"
          ]
        },
        "description": "Sequence trace format is a subclass of Sequence record format that serves specifically as a format for sequence trace data, including information such as base calls. According to its axioms, every Sequence trace format is associated with at least one Sequence trace, meaning it is designed to represent or encode the data generated during DNA sequencing processes. This class formalizes the relationship between sequence trace data and the file formats used to store such data.",
        "CQ": [
          {
            "axiom": "Sequence trace format subClassOf Sequence record format",
            "CQ": [
              "Is Sequence trace format included as a subclass within Sequence record format?",
              "Which formats fall under the broader classification of Sequence record format?",
              "What are the more general categories that Sequence trace format is classified under?"
            ]
          },
          {
            "axiom": "Sequence trace format propertyRestrictions [is format of some Sequence trace]",
            "CQ": [
              "Is every instance described by the sequence trace format propertyRestrictions required to be the format of at least one Sequence trace?",
              "Can a sequence trace format propertyRestriction exist without being associated as the format of a Sequence trace?",
              "Does the ontology permit a sequence trace format propertyRestriction that is not related to any Sequence trace through the 'is format of' property?"
            ]
          }
        ]
      },
      "Protein residue surface calculation": {
        "axiom": {
          "subClassOf": [
            "Protein surface and interior calculation"
          ]
        },
        "description": "Protein residue surface calculation is a subclass of Protein surface and interior calculation. This class refers to the process of calculating the solvent accessibility for each residue within a protein structure, determining how much of each residue's surface is exposed to the surrounding solvent.",
        "CQ": [
          {
            "axiom": "Protein residue surface calculation subClassOf Protein surface and interior calculation",
            "CQ": [
              "Is Protein surface and interior calculation a broader classification encompassing Protein residue surface calculation?",
              "Which calculation methods are classified under Protein surface and interior calculation, specifically including Protein residue surface calculation?",
              "To which higher-level calculation categories does Protein residue surface calculation pertain?"
            ]
          }
        ]
      },
      "LBE": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[is encoded in some R language]",
            "[has specified data output some (Graph plot and [has format specification some image format])]",
            "[implements some 'FDR']",
            "[has specified data output some (data and [has format specification some R data frame])]",
            "[is executed in some differential expression analysis]",
            "[has specified data input some (Gene expression dataset and [has format specification some data format specification])]"
          ]
        },
        "description": "LBE is defined as a subclass of software specifically designed for execution within differential expression analysis workflows. LBE must be encoded in some R language and is required to implement the FDR (False Discovery Rate) method. It accepts as input gene expression datasets, which must conform to a specified data format. The outputs of LBE include (1) graphical plots, which are constrained to possess image format specifications, and (2) data outputs provided as R data frames. This class formalization highlights LBE's role as a specialized analytical software tool in genomics, with rigorous specifications for input formats, output formats, and methodological implementation.",
        "CQ": [
          {
            "axiom": "LBE subClassOf software",
            "CQ": [
              "Is LBE categorized as a type of software?",
              "What specific subcategories fall under software, such as LBE?",
              "Which broader classes does LBE belong to within the ontology?"
            ]
          },
          {
            "axiom": "LBE propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is it necessary for an LBE to be encoded in at least one R language?",
              "Does every LBE instance have to satisfy the property 'is encoded in' with some R language?",
              "Can an LBE exist without being encoded in any R language?"
            ]
          },
          {
            "axiom": "LBE propertyRestrictions [has specified data output some (Graph plot and [has format specification some image format])]",
            "CQ": [
              "Is it required that an LBE propertyRestriction's specified data output includes both a Graph plot and at least one image format?",
              "Must the specified data output produced by an LBE propertyRestriction combine a Graph plot with an output that conforms to some image format?",
              "Does every LBE propertyRestriction ensure that its specified data output is composed of a Graph plot which is provided in some image format?"
            ]
          },
          {
            "axiom": "LBE propertyRestrictions [implements some 'FDR']",
            "CQ": [
              "Is it required that every LBE implements at least one FDR?",
              "Does the definition of LBE ensure that it has an implementation relationship with an FDR?",
              "Can an instance of LBE exist without implementing any FDR?"
            ]
          },
          {
            "axiom": "LBE propertyRestrictions [has specified data output some (data and [has format specification some R data frame])]",
            "CQ": [
              "Is every LBE required to produce at least one data output that is a data formatted according to an R data frame specification?",
              "Can LBE generate data outputs only if the output includes a format specification for R data frames?",
              "Does the property restriction on LBE ensure that there exists some data output with a format specified as an R data frame?"
            ]
          },
          {
            "axiom": "LBE propertyRestrictions [is executed in some differential expression analysis]",
            "CQ": [
              "Is it required for LBE to be executed in at least one differential expression analysis?",
              "Can any instance of LBE exist without being executed in some differential expression analysis?",
              "Does the ontology allow for LBE usage only when it is associated with a differential expression analysis?"
            ]
          },
          {
            "axiom": "LBE propertyRestrictions [has specified data input some (Gene expression dataset and [has format specification some data format specification])]",
            "CQ": [
              "Is it required for LBE propertyRestrictions to include at least one specified data input that is both a gene expression dataset and has some format specification?",
              "Can an LBE propertyRestriction exist without referring to a gene expression dataset with an associated data format specification?",
              "Are all specified data inputs within LBE propertyRestrictions constrained to be gene expression datasets that have some data format specification?"
            ]
          }
        ]
      },
      "Sequence redundancy removal": {
        "axiom": {
          "subClassOf": [
            "Sequence comparison"
          ],
          "propertyRestrictions": [
            "[has output some Sequence]"
          ]
        },
        "description": "Sequence redundancy removal is defined as a subclass of Sequence comparison. This class includes processes that take two or more molecular sequences as input, compare them, and identify and remove redundant sequences based on specific criteria. According to its axioms, any instance of Sequence redundancy removal must have at least one output that is a Sequence.",
        "CQ": [
          {
            "axiom": "Sequence redundancy removal subClassOf Sequence comparison",
            "CQ": [
              "Does sequence redundancy removal fall under the broader category of sequence comparison?",
              "What are the specific subclasses encompassed by sequence comparison, including sequence redundancy removal?",
              "Which parent categories include sequence redundancy removal within their hierarchy?"
            ]
          },
          {
            "axiom": "Sequence redundancy removal propertyRestrictions [has output some Sequence]",
            "CQ": [
              "Is every output generated by the sequence redundancy removal process required to be a Sequence?",
              "Can there exist a sequence redundancy removal result that is not categorized as a Sequence in the ontology?",
              "Does the sequence redundancy removal process necessarily produce at least one output that qualifies as a Sequence?"
            ]
          }
        ]
      },
      "Free cysteine detection": {
        "axiom": {
          "subClassOf": [
            "Protein cysteine and disulfide bond assignment"
          ]
        },
        "description": "Free cysteine detection is a subclass of Protein cysteine and disulfide bond assignment, concerned with identifying cysteine residues in a protein structure that are not engaged in disulfide bonds (cysteine bridges) and do not serve as ligands to metals. This class ensures the detection and annotation of cysteine residues that are chemically free within protein structures.",
        "CQ": [
          {
            "axiom": "Free cysteine detection subClassOf Protein cysteine and disulfide bond assignment",
            "CQ": [
              "Is Free cysteine detection classified under Protein cysteine and disulfide bond assignment?",
              "What are the more specific processes that fall under Protein cysteine and disulfide bond assignment, such as Free cysteine detection?",
              "Which broader categories encompass Free cysteine detection?"
            ]
          }
        ]
      },
      "Map": {
        "axiom": {
          "subClassOf": [
            "data"
          ],
          "propertyRestrictions": [
            "[has topic some Mapping]"
          ]
        },
        "description": "Map is defined as a subclass of data, with the restriction that it must be associated with at least one instance of Mapping via the has topic property. It is described as a map of (typically one) DNA sequence annotated with positional or non-positional features, indicating that instances of this class function as representations of sequence data linked to mapping information.",
        "CQ": [
          {
            "axiom": "Map subClassOf data",
            "CQ": [
              "Is Map categorized under the more general class of data?",
              "Which specific instances or types fall under the subclass Map within data?",
              "To which higher-level categories does Map belong in the data hierarchy?"
            ]
          },
          {
            "axiom": "Map propertyRestrictions [has topic some Mapping]",
            "CQ": [
              "Is it required that every Map has at least one topic associated via the has topic property that is an instance of Mapping?",
              "Can a Map exist that does not have the has topic property relating it to any Mapping?",
              "Does the presence of a Mapping as a value for the has topic property qualify an entity as a Map?"
            ]
          }
        ]
      },
      "Sequence feature detection": {
        "axiom": {
          "subClassOf": [
            "Obsolete concept (EDAM)",
            "Sequence analysis",
            "Prediction and recognition"
          ],
          "propertyRestrictions": [
            "[has topic some Sequence sites, features and motifs]",
            "[has output some Sequence features]"
          ]
        },
        "description": "Sequence feature detection is a subclass of the obsolete concept in EDAM, as well as sequence analysis and prediction and recognition. It specifically concerns the detection of positional sequence features, such as functional and other key sites, within molecular sequences. Formally, this class includes topics related to sequence sites, features, and motifs (via the 'has topic' property), and is characterized by producing sequence features as output (via the 'has output' property). This ensures the class encompasses analysis methods that predict or recognize annotated features within sequences.",
        "CQ": [
          {
            "axiom": "Sequence feature detection subClassOf Obsolete concept (EDAM)",
            "CQ": [
              "Is Sequence feature detection categorized as a type of Obsolete concept (EDAM)?",
              "Which specific concepts fall under Obsolete concept (EDAM), with Sequence feature detection as an example?",
              "What higher-level categories include Sequence feature detection?"
            ]
          },
          {
            "axiom": "Sequence feature detection subClassOf Sequence analysis",
            "CQ": [
              "Is Sequence analysis a general category that encompasses Sequence feature detection?",
              "What specific types of analyses fall under the umbrella of Sequence analysis, such as Sequence feature detection?",
              "To which broader analytical categories does Sequence feature detection belong?"
            ]
          },
          {
            "axiom": "Sequence feature detection subClassOf Prediction and recognition",
            "CQ": [
              "Does Sequence feature detection fall under the broader category of Prediction and recognition?",
              "What are all the more specific types classified under Prediction and recognition, including Sequence feature detection?",
              "Which higher-level categories does Sequence feature detection pertain to?"
            ]
          },
          {
            "axiom": "Sequence feature detection propertyRestrictions [has topic some Sequence sites, features and motifs]",
            "CQ": [
              "Is it required that a sequence feature detection property must involve at least one topic classified as a sequence site, feature, or motif?",
              "Does every instance of sequence feature detection property have a topic that belongs to sequence sites, features, or motifs?",
              "Can a sequence feature detection property exist without being associated with any sequence site, feature, or motif as a topic?"
            ]
          },
          {
            "axiom": "Sequence feature detection propertyRestrictions [has output some Sequence features]",
            "CQ": [
              "Is it necessary for a sequence feature detection to have at least one output that is a type of sequence feature?",
              "Does sequence feature detection always produce some output classified as a sequence feature?",
              "Can any instance of sequence feature detection exist without producing a sequence feature as output?"
            ]
          }
        ]
      },
      "MUSCLE 3.8.31": {
        "axiom": {
          "subClassOf": [
            "Drive5 MUSCLE"
          ],
          "propertyRestrictions": [
            "[has download location hasValue ns5:downloads.htm]",
            "[has interface some command-line interface]",
            "[has documentation hasValue ns5:muscle_userguide3.8.html]",
            "[has version hasValue MUSCLE version 3.8.31]",
            "[has documentation hasValue ns6:gkh340]"
          ]
        },
        "description": "MUSCLE 3.8.31 is a subclass of Drive5 MUSCLE and represents a specific release of the MUSCLE software (version 3.8.31). Instances of this class are characterized by having a defined download location (ns5:downloads.htm), access to at least one command-line interface, and are associated with documentation resources (ns5:muscle_userguide3.8.html and ns6:gkh340). This formalization ensures that any individual classified as MUSCLE 3.8.31 is identifiable by these version-specific properties and documentation links.",
        "CQ": [
          {
            "axiom": "MUSCLE 3.8.31 subClassOf Drive5 MUSCLE",
            "CQ": [
              "Is MUSCLE 3.8.31 categorized under Drive5 MUSCLE?",
              "Which specific versions are classified as subclasses of Drive5 MUSCLE?",
              "What higher-level classes encompass MUSCLE 3.8.31?"
            ]
          },
          {
            "axiom": "MUSCLE 3.8.31 propertyRestrictions [has download location hasValue ns5:downloads.htm]",
            "CQ": [
              "Does MUSCLE 3.8.31 have the download location property value set specifically to ns5:downloads.htm?",
              "Is it required that the download location for MUSCLE 3.8.31 must be ns5:downloads.htm?",
              "Can MUSCLE 3.8.31 be associated with any download location other than ns5:downloads.htm?"
            ]
          },
          {
            "axiom": "MUSCLE 3.8.31 propertyRestrictions [has interface some command-line interface]",
            "CQ": [
              "Is it required that MUSCLE 3.8.31 has an interface with at least one command-line interface?",
              "Can MUSCLE 3.8.31 possess any interface that is not a command-line interface?",
              "Does MUSCLE 3.8.31 necessarily support a command-line interface among its interfaces?"
            ]
          },
          {
            "axiom": "MUSCLE 3.8.31 propertyRestrictions [has documentation hasValue ns5:muscle_userguide3.8.html]",
            "CQ": [
              "Must every instance of MUSCLE 3.8.31 have the 'has documentation' property with the value 'ns5:muscle_userguide3.8.html'?",
              "Is it required that MUSCLE 3.8.31 is only documented by 'ns5:muscle_userguide3.8.html'?",
              "Does the ontology restrict MUSCLE 3.8.31 to have 'has documentation' pointing exclusively to 'ns5:muscle_userguide3.8.html'?"
            ]
          },
          {
            "axiom": "MUSCLE 3.8.31 propertyRestrictions [has version hasValue MUSCLE version 3.8.31]",
            "CQ": [
              "Does MUSCLE 3.8.31 have the property 'has version' with the specific value 'MUSCLE version 3.8.31'?",
              "Is it required that MUSCLE 3.8.31 is associated with the exact version 'MUSCLE version 3.8.31' through the 'has version' property?",
              "Can MUSCLE 3.8.31 possess a 'has version' property value other than 'MUSCLE version 3.8.31'?"
            ]
          },
          {
            "axiom": "MUSCLE 3.8.31 propertyRestrictions [has documentation hasValue ns6:gkh340]",
            "CQ": [
              "Is MUSCLE 3.8.31 documented by the value ns6:gkh340 through the property 'has documentation'?",
              "Does MUSCLE 3.8.31 necessarily have the property 'has documentation' with the specific value ns6:gkh340?",
              "Can any value other than ns6:gkh340 fulfill the 'has documentation' property for MUSCLE 3.8.31?"
            ]
          }
        ]
      },
      "GenomeGraphs": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[has specified data input some (Gene expression dataset and [has format specification some data format specification])]",
            "[is encoded in some R language]",
            "[has specified data output some (Graph plot and [has format specification some image format])]"
          ]
        },
        "description": "GenomeGraphs is defined as a subclass of software, specifically designed to handle gene expression datasets with explicit format specifications. It requires specified data inputs that must include a gene expression dataset accompanied by a data format specification. The software is encoded in the R programming language. Its data output consists of graph plots with format specifications that conform to an image format. These axioms formalize GenomeGraphs as an R-based software tool aimed at generating graphical representations of gene expression data, ensuring both input and output data comply with defined formats.",
        "CQ": [
          {
            "axiom": "GenomeGraphs subClassOf software",
            "CQ": [
              "Is GenomeGraphs classified as a type of software?",
              "Which software subclasses encompass GenomeGraphs?",
              "What broader categories does GenomeGraphs fall under within the software domain?"
            ]
          },
          {
            "axiom": "GenomeGraphs propertyRestrictions [has specified data input some (Gene expression dataset and [has format specification some data format specification])]",
            "CQ": [
              "Does a GenomeGraph necessarily require at least one specified data input that is a Gene expression dataset conforming to a data format specification?",
              "Is it possible for a GenomeGraph to exist without having an input that is both a Gene expression dataset and meets a data format specification?",
              "Are all specified data inputs for GenomeGraphs limited to those that are Gene expression datasets with some data format specification?"
            ]
          },
          {
            "axiom": "GenomeGraphs propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is it required that every GenomeGraph is encoded in at least one instance of R language?",
              "Can a GenomeGraph exist without being encoded in any R language?",
              "Does the encoding of a GenomeGraph necessarily involve an R language?"
            ]
          },
          {
            "axiom": "GenomeGraphs propertyRestrictions [has specified data output some (Graph plot and [has format specification some image format])]",
            "CQ": [
              "Is every data output specified by GenomeGraphs required to be a graph plot that also has at least one format specification in an image format?",
              "Can GenomeGraphs generate a data output if it is not a graph plot or if it lacks a format specification defined as an image format?",
              "Does the specification for GenomeGraphs ensure that all outputs with the designated property will include both a graph plot and an associated image format?"
            ]
          }
        ]
      },
      "Phylogenetic tree reconstruction": {
        "axiom": {
          "subClassOf": [
            "Phylogenetic tree generation"
          ],
          "propertyRestrictions": [
            "[has topic some Phylogeny]"
          ]
        },
        "description": "Phylogenetic tree reconstruction is a subclass of phylogenetic tree generation and is specifically concerned with topics pertaining to phylogeny. It involves reconstructing the inner node labels of a phylogenetic tree based on information from its leaves, distinguishing this process from merely analyzing an existing tree or constructing an entirely new tree. This class encapsulates methods and concepts relative to inferring ancestral relationships and internal features from observed leaf data in evolutionary trees.",
        "CQ": [
          {
            "axiom": "Phylogenetic tree reconstruction subClassOf Phylogenetic tree generation",
            "CQ": [
              "Does phylogenetic tree reconstruction fall under the category of phylogenetic tree generation?",
              "Which specific processes are classified as types of phylogenetic tree generation, including phylogenetic tree reconstruction?",
              "What broader classification does phylogenetic tree reconstruction conceptually fit within?"
            ]
          },
          {
            "axiom": "Phylogenetic tree reconstruction propertyRestrictions [has topic some Phylogeny]",
            "CQ": [
              "Is it required that phylogenetic tree reconstruction addresses at least one topic related to phylogeny?",
              "Can a phylogenetic tree reconstruction process have the 'has topic' property only if the topic is phylogeny?",
              "Must every instance of phylogenetic tree reconstruction involve a topic that is classified as phylogeny?"
            ]
          }
        ]
      },
      "Pathway or network identifier": {
        "axiom": {
          "subClassOf": [
            "Identifier (typed)"
          ],
          "propertyRestrictions": [
            "[is identifier of some Pathway or network]"
          ]
        },
        "description": "Pathway or network identifier is a subclass of Identifier (typed) and is characterized by the property that it serves as an identifier for some Pathway or network. This class represents identifiers assigned to entries within databases cataloging biological pathways or networks. Any instance of this class functions specifically to uniquely reference a pathway or network entity.",
        "CQ": [
          {
            "axiom": "Pathway or network identifier subClassOf Identifier (typed)",
            "CQ": [
              "Is every Pathway or network identifier categorized under Identifier (typed)?",
              "What identifiers exist as more specific types beneath Identifier (typed), including Pathway or network identifier?",
              "To which higher-level identifier categories does Pathway or network identifier belong?"
            ]
          },
          {
            "axiom": "Pathway or network identifier propertyRestrictions [is identifier of some Pathway or network]",
            "CQ": [
              "Does every instance of 'Pathway or network identifier' necessarily identify at least one 'Pathway or network'?",
              "Can a 'Pathway or network identifier' exist without being associated with any 'Pathway or network'?",
              "Is it mandatory for an entity to be classified as a 'Pathway or network identifier' only when it is the identifier for some 'Pathway or network'?"
            ]
          }
        ]
      },
      "Database search": {
        "axiom": {
          "subClassOf": [
            "Query and retrieval"
          ],
          "propertyRestrictions": [
            "[has output some Database search results]"
          ]
        },
        "description": "Database search is a subclass of Query and retrieval, constrained such that it produces at least some Database search results as output. This class represents processes where a supplied query is compared against each entry in a database or data resource, returning those entriesâ€”or parts thereofâ€”that are similar to the query. Typically, this involves identifying high-scoring matches, as exemplified by tasks like a BLAST search of a sequence database.",
        "CQ": [
          {
            "axiom": "Database search subClassOf Query and retrieval",
            "CQ": [
              "Is Database search classified under Query and retrieval?",
              "What specific types fall under Query and retrieval, including Database search?",
              "Which broader categories encompass Database search?"
            ]
          },
          {
            "axiom": "Database search propertyRestrictions [has output some Database search results]",
            "CQ": [
              "Is it required that a database search yields at least one output of type Database search results?",
              "Can a database search exist without producing any database search results as output?",
              "Does the presence of output classified as database search results indicate that an activity qualifies as a database search?"
            ]
          }
        ]
      },
      "Pathway or network processing": {
        "axiom": {
          "subClassOf": [
            "Operation (typed)"
          ],
          "propertyRestrictions": [
            "[has topic some Molecular interactions, pathways and networks]"
          ]
        },
        "description": "Pathway or network processing is defined as a subclass of Operation (typed), encompassing activities that generate, analyze, or handle biological pathways or networks. Members of this class are characterized by the property restriction that they must have a topic involving molecular interactions, pathways, and networks. This ensures that all pathway or network processing operations are specifically concerned with the management or investigation of biological molecular interaction systems.",
        "CQ": [
          {
            "axiom": "Pathway or network processing subClassOf Operation (typed)",
            "CQ": [
              "Is Pathway or network processing classified as a type of Operation (typed)?",
              "Which specific operations are encompassed by Operation (typed), such as Pathway or network processing?",
              "What broader operational categories does Pathway or network processing fall under?"
            ]
          },
          {
            "axiom": "Pathway or network processing propertyRestrictions [has topic some Molecular interactions, pathways and networks]",
            "CQ": [
              "Is it required that Pathway or network processing has topic that involves Molecular interactions, pathways, and networks?",
              "Can any instance of Pathway or network processing be described without referencing Molecular interactions, pathways, and networks as a topic?",
              "Must all Pathway or network processing activities relate to at least one topic of Molecular interactions, pathways, and networks?"
            ]
          }
        ]
      },
      "Affymetrix-compliant data": {
        "axiom": {
          "subClassOf": [
            "data"
          ],
          "equivalentClass": [
            "[has format specification some (data format specification and [is published by hasValue Affymetrix])]"
          ]
        },
        "description": "Affymetrix-compliant data is defined as a subclass of data, and is equivalent to data that has some format specification which itself is a data format specification published by Affymetrix. This means any instance of Affymetrix-compliant data must be associated with at least one data format specification that is officially published by Affymetrix, ensuring adherence to the standards set by the organization.",
        "CQ": [
          {
            "axiom": "Affymetrix-compliant data subClassOf data",
            "CQ": [
              "What broader categories encompass Affymetrix-compliant data?",
              "Is data a direct superclass of Affymetrix-compliant data?",
              "Which specific types of data fall under the classification of data, including Affymetrix-compliant data?"
            ]
          },
          {
            "axiom": "Affymetrix-compliant data equivalentClass [has format specification some (data format specification and [is published by hasValue Affymetrix])]",
            "CQ": [
              "Is Affymetrix-compliant data defined as data that has a format specification which is published by Affymetrix?",
              "Does Affymetrix-compliant data require at least one format specification that is both a data format specification and has Affymetrix as its publisher?",
              "Is being Affymetrix-compliant equivalent to having a format specification that is simultaneously a data format specification and published by Affymetrix?"
            ]
          }
        ]
      },
      "Protein disordered structure": {
        "axiom": {
          "subClassOf": [
            "Protein sites, features and motifs"
          ]
        },
        "description": "Protein disordered structure is defined as a subclass of Protein sites, features and motifs. It refers to regions within a protein that lack a fixed or ordered three-dimensional structure. This class captures concepts related to structural disorder in proteins, distinguishing such regions as important features within the broader context of protein sites, features, and motifs.",
        "CQ": [
          {
            "axiom": "Protein disordered structure subClassOf Protein sites, features and motifs",
            "CQ": [
              "Is Protein disordered structure classified under the category of Protein sites, features and motifs?",
              "Which specific types are encompassed by Protein sites, features and motifs, including Protein disordered structure?",
              "What are the broader ontological categories to which Protein disordered structure belongs?"
            ]
          }
        ]
      },
      "GeneData Expressionist Analyst v4.0.5": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[output of some (software publishing process and [has participant hasValue Genedata])]"
          ]
        },
        "description": "GeneData Expressionist Analyst v4.0.5 is a subclass of software. It is specifically characterized as the output of a software publishing process in which Genedata participates. This definition ensures that any instance of this class is a software artifact resulting from such a process involving Genedata.",
        "CQ": [
          {
            "axiom": "GeneData Expressionist Analyst v4.0.5 subClassOf software",
            "CQ": [
              "Is GeneData Expressionist Analyst v4.0.5 categorized under software?",
              "What software subclasses include GeneData Expressionist Analyst v4.0.5?",
              "Which broader classes encompass GeneData Expressionist Analyst v4.0.5?"
            ]
          },
          {
            "axiom": "GeneData Expressionist Analyst v4.0.5 propertyRestrictions [output of some (software publishing process and [has participant hasValue Genedata])]",
            "CQ": [
              "Is it required that the output of GeneData Expressionist Analyst v4.0.5 results from a software publishing process involving Genedata as a participant?",
              "Does every output generated by GeneData Expressionist Analyst v4.0.5 have to originate from a software publishing process with Genedata as a participant?",
              "Can an output of GeneData Expressionist Analyst v4.0.5 be produced without Genedata being a participant in the relevant software publishing process?"
            ]
          }
        ]
      },
      "Protein property calculation": {
        "axiom": {
          "subClassOf": [
            "Calculation",
            "Protein analysis",
            "Prediction and recognition (protein)"
          ],
          "propertyRestrictions": [
            "[has output some Protein property]",
            "[has topic some Protein properties]"
          ]
        },
        "description": "Protein property calculation is defined as a subclass of Calculation, Protein analysis, and Prediction and recognition (protein), and is characterized by producing outputs related to Protein properties and being focused on topics concerning Protein properties. This class includes methods for rendering and visualizing properties of protein sequences, and is concerned with calculating or predicting physical or chemical properties of a protein, including any non-positional properties derived from processing the molecular sequence.",
        "CQ": [
          {
            "axiom": "Protein property calculation subClassOf Calculation",
            "CQ": [
              "Is Protein property calculation a specific variation under the general class of Calculation?",
              "What types of calculations exist that are more specialized than Calculation, such as Protein property calculation?",
              "To which overarching categories does Protein property calculation fall within?"
            ]
          },
          {
            "axiom": "Protein property calculation subClassOf Protein analysis",
            "CQ": [
              "Is Protein property calculation categorized as a type of Protein analysis?",
              "Which analytical tasks are considered more specific than Protein analysis, including Protein property calculation?",
              "What broader analytical domains encompass Protein property calculation?"
            ]
          },
          {
            "axiom": "Protein property calculation subClassOf Prediction and recognition (protein)",
            "CQ": [
              "Is Protein property calculation classified as a specialization of Prediction and recognition (protein)?",
              "Which specific activities fall under the broader category of Prediction and recognition (protein), such as Protein property calculation?",
              "What broader categories encompass Protein property calculation in the ontology?"
            ]
          },
          {
            "axiom": "Protein property calculation propertyRestrictions [has output some Protein property]",
            "CQ": [
              "Is it necessary for a protein property calculation to always produce at least one output of type Protein property?",
              "Can a protein property calculation yield an output that does not belong to the class of Protein property?",
              "Does every output of a protein property calculation correspond to a Protein property as defined in the ontology?"
            ]
          },
          {
            "axiom": "Protein property calculation propertyRestrictions [has topic some Protein properties]",
            "CQ": [
              "Is it required that protein property calculations always involve at least one topic related to protein properties?",
              "Can a protein property calculation be associated with topics other than protein properties?",
              "Does every protein property calculation explicitly reference at least one specific protein property through its topic?"
            ]
          }
        ]
      },
      "Disease ID": {
        "axiom": {
          "subClassOf": [
            "Identifier (typed)",
            "Accession"
          ],
          "propertyRestrictions": [
            "[is identifier of some Disease report]"
          ]
        },
        "description": "Disease ID is defined as a subclass of both Identifier (typed) and Accession. It serves specifically as an identifier for entries in disease databases and is constrained by the property that it must be an identifier of some Disease report. This formalization ensures that any Disease ID is associated uniquely with disease records.",
        "CQ": [
          {
            "axiom": "Disease ID subClassOf Identifier (typed)",
            "CQ": [
              "Is Disease ID classified as a subtype of Identifier?",
              "Which forms of Identifier include Disease ID as a more specific type?",
              "What higher-level types encompass Disease ID?"
            ]
          },
          {
            "axiom": "Disease ID subClassOf Accession",
            "CQ": [
              "Does Disease ID fall under the general category of Accession?",
              "Which specific entities are classified as subclasses of Accession, such as Disease ID?",
              "What broader classes encompass Disease ID, considering its subclass relationship to Accession?"
            ]
          },
          {
            "axiom": "Disease ID propertyRestrictions [is identifier of some Disease report]",
            "CQ": [
              "Is every Disease ID required to serve as the identifier for at least one Disease report?",
              "Can a Disease report exist without being associated with a Disease ID as its identifier?",
              "Does a Disease ID function exclusively as an identifier for Disease reports?"
            ]
          }
        ]
      },
      "LMGene": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[is encoded in some R language]",
            "[has specified data input some (Gene expression dataset and [has format specification some data format specification])]",
            "[is executed in some data normalization]",
            "[implements some Linear modelling]",
            "[is executed in some Linear modelling]",
            "[has specified data output some (data and [has format specification some R data frame])]"
          ]
        },
        "description": "LMGene is defined as a subclass of software, specifically characterized by its association with gene expression analysis. Every LMGene instance must be encoded in the R programming language and requires a specified data input that is both a gene expression dataset and accompanied by a data format specification. LMGene must execute data normalization and linear modeling procedures, and it implements linear modeling methods. The resulting data output is required to be a data object, specifically structured as an R data frame, and specified with an appropriate data format specification. This formalization captures the core purpose and constraints of LMGene as software dedicated to linear modeling of gene expression data in R.",
        "CQ": [
          {
            "axiom": "LMGene subClassOf software",
            "CQ": [
              "Is LMGene classified as a specific kind of software?",
              "Which software subclasses include LMGene as an example?",
              "What higher-level classes encompass LMGene according to the ontology?"
            ]
          },
          {
            "axiom": "LMGene propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is it required that an LMGene is encoded in at least one R language?",
              "Can an LMGene exist without being encoded in any R language?",
              "Does having an encoding in an R language satisfy the property restriction for LMGene?"
            ]
          },
          {
            "axiom": "LMGene propertyRestrictions [has specified data input some (Gene expression dataset and [has format specification some data format specification])]",
            "CQ": [
              "Does every LMGene necessarily have a specified data input that is both a gene expression dataset and follows some data format specification?",
              "Can an LMGene exist without having any specified data input that qualifies as a gene expression dataset with an associated data format specification?",
              "Is it possible for an LMGene to have a specified data input that is not both a gene expression dataset and formatted according to a data format specification?"
            ]
          },
          {
            "axiom": "LMGene propertyRestrictions [is executed in some data normalization]",
            "CQ": [
              "Is it necessary for every LMGene to be executed in some form of data normalization?",
              "Does the definition of LMGene require that it is associated with at least one execution within data normalization?",
              "Can an LMGene exist without participating in any data normalization process?"
            ]
          },
          {
            "axiom": "LMGene propertyRestrictions [implements some Linear modelling]",
            "CQ": [
              "Is it required that every LMGene implements at least one form of linear modelling?",
              "Are there any instances of LMGene that do not implement linear modelling?",
              "Can an LMGene be asserted without fulfilling the property 'implements' with respect to linear modelling?"
            ]
          },
          {
            "axiom": "LMGene propertyRestrictions [is executed in some Linear modelling]",
            "CQ": [
              "Does every LM Gene require execution in at least one Linear Modelling context?",
              "Is it necessary for an LM Gene to be associated with the 'is executed in' property referencing a Linear Modelling process?",
              "Can an LM Gene exist without being executed in any Linear Modelling scenario?"
            ]
          },
          {
            "axiom": "LMGene propertyRestrictions [has specified data output some (data and [has format specification some R data frame])]",
            "CQ": [
              "Does every LMGene have at least one specified data output that is a data object with at least one format specification of R data frame?",
              "Is it required that LMGene produces a data output in the form of a data object specified as an R data frame?",
              "Can any data output of LMGene lack the format specification of an R data frame?"
            ]
          }
        ]
      },
      "GPCR coupling selectivity prediction": {
        "axiom": {
          "subClassOf": [
            "Protein interaction prediction",
            "Protein property calculation (from sequence)",
            "GPCR analysis"
          ],
          "propertyRestrictions": [
            "[has output some Protein report]"
          ]
        },
        "description": "GPCR coupling selectivity prediction is a class defined as a subclass of Protein interaction prediction, Protein property calculation (from sequence), and GPCR analysis. It is characterized by producing at least one Protein report as output. This class focuses on the prediction of G-protein coupled receptor (GPCR) coupling selectivity, identifying which types of G-proteins a GPCR preferentially interacts with, based on sequence-derived properties and protein interaction analysis.",
        "CQ": [
          {
            "axiom": "GPCR coupling selectivity prediction subClassOf Protein interaction prediction",
            "CQ": [
              "Is GPCR coupling selectivity prediction categorized under Protein interaction prediction?",
              "Which prediction types are encompassed by Protein interaction prediction, including GPCR coupling selectivity prediction?",
              "What higher-level prediction categories does GPCR coupling selectivity prediction fall into?"
            ]
          },
          {
            "axiom": "GPCR coupling selectivity prediction subClassOf Protein property calculation (from sequence)",
            "CQ": [
              "Does GPCR coupling selectivity prediction fall under the category of Protein property calculation (from sequence)?",
              "Which concepts are classified as subclasses of Protein property calculation (from sequence), including GPCR coupling selectivity prediction?",
              "What are the broader categories that encompass GPCR coupling selectivity prediction?"
            ]
          },
          {
            "axiom": "GPCR coupling selectivity prediction subClassOf GPCR analysis",
            "CQ": [
              "Is GPCR analysis the immediate superclass of GPCR coupling selectivity prediction?",
              "Which specific approaches are classified under GPCR analysis, such as GPCR coupling selectivity prediction?",
              "What are the broader conceptual categories that encompass GPCR coupling selectivity prediction?"
            ]
          },
          {
            "axiom": "GPCR coupling selectivity prediction propertyRestrictions [has output some Protein report]",
            "CQ": [
              "Does every instance of GPCR coupling selectivity prediction necessarily produce at least one output that is a Protein report?",
              "Is it required that GPCR coupling selectivity prediction has an output related to a Protein report?",
              "Can a GPCR coupling selectivity prediction exist without producing a Protein report as output?"
            ]
          }
        ]
      },
      "metahdep": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[implements some Bayesian Model]",
            "[is encoded in some R language]",
            "[is published by hasValue Bioconductor]",
            "[has specified data output some (Graph plot and [has format specification only R data frame])]",
            "[has specified data input some Gene expression dataset]"
          ]
        },
        "description": "metahdep is a subclass of software, characterized by several specific property restrictions. It implements at least one Bayesian Model and must be encoded in the R programming language. Additionally, metahdep is published exclusively by Bioconductor. In terms of data handling, it requires a gene expression dataset as input and produces graph plots as outputs, with these outputs specifically formatted as R data frames. This formalization ensures that any software classified as metahdep aligns with these ontological and technical specifications.",
        "CQ": [
          {
            "axiom": "metahdep subClassOf software",
            "CQ": [
              "Is metahdep classified under the broader category of software?",
              "What are the subclasses encompassed by software, including metahdep?",
              "Which superordinate categories does metahdep fall under?"
            ]
          },
          {
            "axiom": "metahdep propertyRestrictions [implements some Bayesian Model]",
            "CQ": [
              "Is every instance of metahdep required to implement at least one Bayesian Model?",
              "Does metahdep necessarily have an implementation that is a Bayesian Model?",
              "Can metahdep exist without implementing a Bayesian Model?"
            ]
          },
          {
            "axiom": "metahdep propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is it required that every metahdep is encoded in at least one R language?",
              "Can a metahdep exist without being encoded in any R language?",
              "Does metahdep necessarily involve having an encoding relation to some R language?"
            ]
          },
          {
            "axiom": "metahdep propertyRestrictions [is published by hasValue Bioconductor]",
            "CQ": [
              "Is it necessary for a metahdep to be published exclusively by Bioconductor?",
              "Does the property restriction on metahdep imply that Bioconductor must always be its publisher?",
              "Can a metahdep be considered valid if it is published by any entity other than Bioconductor?"
            ]
          },
          {
            "axiom": "metahdep propertyRestrictions [has specified data output some (Graph plot and [has format specification only R data frame])]",
            "CQ": [
              "Is every data output of metahdep required to be a graph plot that is formatted exclusively as an R data frame?",
              "Can metahdep produce any specified data output other than a graph plot with a format restriction of only R data frames?",
              "Does metahdep necessarily restrict its specified data outputs to items that are both graph plots and have format specification limited to R data frames?"
            ]
          },
          {
            "axiom": "metahdep propertyRestrictions [has specified data input some Gene expression dataset]",
            "CQ": [
              "Does metahdep necessarily require at least one specified data input that is a gene expression dataset?",
              "Can metahdep exist without having any specified data input of type gene expression dataset?",
              "Is it possible for metahdep to have specified data inputs that are not gene expression datasets?"
            ]
          }
        ]
      },
      "Sequence alignment ID": {
        "axiom": {
          "subClassOf": [
            "Identifier (typed)",
            "Accession"
          ],
          "propertyRestrictions": [
            "[is identifier of some Sequence alignment]"
          ]
        },
        "description": "Sequence alignment ID is defined as a subclass of both Identifier (typed) and Accession, and is restricted such that it serves as an identifier for some Sequence alignment instance. It is used as the identifier of a molecular sequence alignment, for example a record from an alignment database. This formalization ensures that any instance of Sequence alignment ID uniquely identifies a sequence alignment, and maintains compatibility with identifier and accession structures in related ontologies.",
        "CQ": [
          {
            "axiom": "Sequence alignment ID subClassOf Identifier (typed)",
            "CQ": [
              "Is Sequence alignment ID classified as a specific kind of Identifier?",
              "What identifiers encompass Sequence alignment ID as a more specialized form?",
              "Which broader categories include Sequence alignment ID within the Identifier hierarchy?"
            ]
          },
          {
            "axiom": "Sequence alignment ID subClassOf Accession",
            "CQ": [
              "Is Sequence alignment ID categorized as a type of Accession?",
              "Which specific identifiers are subclasses of Accession, including Sequence alignment ID?",
              "To which broader ontological group does Sequence alignment ID belong?"
            ]
          },
          {
            "axiom": "Sequence alignment ID propertyRestrictions [is identifier of some Sequence alignment]",
            "CQ": [
              "Is it required for an identifier to always refer to at least one sequence alignment?",
              "Does every value of the sequence alignment ID property correspond to a sequence alignment instance?",
              "Can a sequence alignment ID exist without being the identifier of any sequence alignment?"
            ]
          }
        ]
      },
      "genomeIntervals": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[is executed in some descriptive statistical calculation]",
            "[is published by hasValue Bioconductor]",
            "[has specified data output some [has format specification only R data frame]]",
            "[is encoded in some R language]",
            "[has specified data input some [has format specification only (GFF and R data frame)]]"
          ]
        },
        "description": "genomeIntervals is defined as a subclass of software, specifically designed for execution in descriptive statistical calculations within genomics contexts. Instances of this class are published exclusively by Bioconductor, and are encoded in the R programming language. They accept input data strictly in GFF or R data frame formats, and produce output data solely as R data frames. This formalization ensures that any genomeIntervals resource adheres to Bioconductor's publication standards, operates within the R ecosystem, and supports defined data interoperability via precise input/output format restrictions.",
        "CQ": [
          {
            "axiom": "genomeIntervals subClassOf software",
            "CQ": [
              "Are genomeIntervals categorized under the broader class of software?",
              "What software subclasses include genomeIntervals as a type?",
              "Which general classifications encompass genomeIntervals besides software?"
            ]
          },
          {
            "axiom": "genomeIntervals propertyRestrictions [is executed in some descriptive statistical calculation]",
            "CQ": [
              "Is it required that genome intervals participate in at least one descriptive statistical calculation?",
              "Does every instance of genome intervals engage in a descriptive statistical calculation through the 'is executed in' property?",
              "Can a genome interval exist without being executed in any descriptive statistical calculation?"
            ]
          },
          {
            "axiom": "genomeIntervals propertyRestrictions [is published by hasValue Bioconductor]",
            "CQ": [
              "Must every genome interval be published exclusively by Bioconductor?",
              "Is it required that genome intervals have the publishing source set only to Bioconductor?",
              "Are genome intervals allowed to be published by any entity other than Bioconductor according to this restriction?"
            ]
          },
          {
            "axiom": "genomeIntervals propertyRestrictions [has specified data output some [has format specification only R data frame]]",
            "CQ": [
              "Must every data output specified by genomeIntervals be in the format of an R data frame?",
              "Is it required that the specified data output for genomeIntervals includes at least one output which only takes the format of an R data frame?",
              "Can genomeIntervals have specified data outputs that are not restricted solely to the R data frame format?"
            ]
          },
          {
            "axiom": "genomeIntervals propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Must every genome interval be encoded in at least one entity of type R language?",
              "Is it a requirement for genome intervals to possess an encoding relationship with something classified as R language?",
              "Can a genome interval exist without being associated through 'is encoded in' to any instance of R language?"
            ]
          },
          {
            "axiom": "genomeIntervals propertyRestrictions [has specified data input some [has format specification only (GFF and R data frame)]]",
            "CQ": [
              "Is it required that genomeIntervals has at least one specified data input whose format specification includes both GFF and R data frame?",
              "Can a genomeIntervals entity have a specified data input with a format specification that is not restricted to both GFF and R data frame?",
              "Does the property restriction mean that all specified data inputs for genomeIntervals must satisfy the condition of having both GFF and R data frame as their format specification?"
            ]
          }
        ]
      },
      "Quadruplex formation site detection": {
        "axiom": {
          "subClassOf": [
            "Nucleic acid sequence feature detection"
          ],
          "propertyRestrictions": [
            "[has topic some Nucleic acid structure prediction]",
            "[has output some Nucleic acid structure report]"
          ]
        },
        "description": "Quadruplex formation site detection is a subclass of nucleic acid sequence feature detection, specifically focused on identifying regions within nucleotide sequences capable of forming quadruplex (4-stranded) structures. These quadruplexes, typically arising from guanine-rich regions, play important roles in biological processes and are potential therapeutic targets. The class is characterized by its association with nucleic acid structure prediction as a topic and the output of nucleic acid structure reports, ensuring that any instance of this class involves the detection and reporting of quadruplex-forming motifs.",
        "CQ": [
          {
            "axiom": "Quadruplex formation site detection subClassOf Nucleic acid sequence feature detection",
            "CQ": [
              "Is Nucleic acid sequence feature detection a broader class that encompasses Quadruplex formation site detection?",
              "Which types of Nucleic acid sequence feature detection include subclasses such as Quadruplex formation site detection?",
              "What higher-level detection categories does Quadruplex formation site detection fall under?"
            ]
          },
          {
            "axiom": "Quadruplex formation site detection propertyRestrictions [has topic some Nucleic acid structure prediction]",
            "CQ": [
              "Is it required that a quadruplex formation site detection involves a topic related to nucleic acid structure prediction?",
              "Can a quadruplex formation site detection be associated with topics outside of nucleic acid structure prediction?",
              "Does every quadruplex formation site detection reference at least one nucleic acid structure prediction topic?"
            ]
          },
          {
            "axiom": "Quadruplex formation site detection propertyRestrictions [has output some Nucleic acid structure report]",
            "CQ": [
              "Does the detection of a quadruplex formation site require producing at least one nucleic acid structure report as output?",
              "Is it necessary that any output generated by quadruplex formation site detection includes a nucleic acid structure report?",
              "Can the output of quadruplex formation site detection be something other than a nucleic acid structure report?"
            ]
          }
        ]
      },
      "MIRIAM data type name": {
        "axiom": {
          "subClassOf": [
            "Data resource definition name"
          ],
          "propertyRestrictions": [
            "[is identifier of some Database metadata]"
          ]
        },
        "description": "MIRIAM data type name is a subclass of Data resource definition name, representing the name of a data type sourced from the MIRIAM database. Additionally, each instance serves as an identifier for some Database metadata. This ensures that every MIRIAM data type name uniquely references metadata within a database context, as per the definition from MIRIAM.",
        "CQ": [
          {
            "axiom": "MIRIAM data type name subClassOf Data resource definition name",
            "CQ": [
              "Does MIRIAM data type name fall under the category of Data resource definition name?",
              "Which data type names are included as subtypes of Data resource definition name?",
              "What higher-level classifications include the MIRIAM data type name?"
            ]
          },
          {
            "axiom": "MIRIAM data type name propertyRestrictions [is identifier of some Database metadata]",
            "CQ": [
              "Does every MIRIAM data type name have the property 'is identifier of' with at least one Database metadata?",
              "Is it necessary for a MIRIAM data type name to serve as an identifier for some Database metadata?",
              "Can a MIRIAM data type name exist without being an identifier for any Database metadata?"
            ]
          }
        ]
      },
      "DNDC": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[has interface some graphical user interface]",
            "[has website homepage hasValue ns15:dndc.html]",
            "[has specified data input some (data and [has format specification some tab delimited file format])]",
            "[output of some (software development process and [has participant hasValue University of New Hampshire])]",
            "[has interface some command-line interface]",
            "[is executed in some modelling]",
            "[has website homepage hasValue http://www.dndc.sr.unh.edu/]"
          ]
        },
        "description": "DNDC is a subclass of software, specifically described as a Soil Chemistry Model. It is characterized by having both graphical user interface (GUI) and command-line interface (CLI) options for user interaction. The software is accessible online, with its homepage given as both ns15:dndc.html and http://www.dndc.sr.unh.edu/. DNDC requires as input data that conforms to a tab-delimited file format. The output of DNDC results from a software development process involving the University of New Hampshire as a participant. Furthermore, DNDC is used within the context of modelling.",
        "CQ": [
          {
            "axiom": "DNDC subClassOf software",
            "CQ": [
              "Is DNDC classified under the broader category of software?",
              "Which entities are specific instances within the software class, such as DNDC?",
              "What higher-level categories encompass DNDC in the ontology?"
            ]
          },
          {
            "axiom": "DNDC propertyRestrictions [has interface some graphical user interface]",
            "CQ": [
              "Is every DNDC instance required to have at least one graphical user interface as an interface?",
              "Can DNDC possess an interface type that is not a graphical user interface?",
              "Is the existence of a graphical user interface mandatory for every DNDC interface relationship?"
            ]
          },
          {
            "axiom": "DNDC propertyRestrictions [has website homepage hasValue ns15:dndc.html]",
            "CQ": [
              "Must every instance of DNDC have the website homepage property set specifically to ns15:dndc.html?",
              "Can the website homepage of a DNDC instance be assigned any value other than ns15:dndc.html?",
              "Is ns15:dndc.html the exclusive value permitted for the website homepage property of DNDC?"
            ]
          },
          {
            "axiom": "DNDC propertyRestrictions [has specified data input some (data and [has format specification some tab delimited file format])]",
            "CQ": [
              "Is every DNDC required to have at least one specified data input that is a data entity with a format specification of tab delimited file format?",
              "Does DNDC necessitate that its specified data input includes a data object whose format specification involves tab delimited file format?",
              "Can DNDC have a specified data input which is not a data entity formatted as a tab delimited file format?"
            ]
          },
          {
            "axiom": "DNDC propertyRestrictions [output of some (software development process and [has participant hasValue University of New Hampshire])]",
            "CQ": [
              "Does DNDC necessarily output something that is a software development process involving the University of New Hampshire as a participant?",
              "Is every output of DNDC required to be both a software development process and to have the University of New Hampshire as a participant?",
              "Can DNDC produce any output that does not correspond to a software development process with the University of New Hampshire as a participant?"
            ]
          },
          {
            "axiom": "DNDC propertyRestrictions [has interface some command-line interface]",
            "CQ": [
              "Is it required that every DNDC has at least one command-line interface?",
              "Can a DNDC exist without being associated with any command-line interface?",
              "Does the DNDC entity necessarily provide access through a command-line interface?"
            ]
          },
          {
            "axiom": "DNDC propertyRestrictions [is executed in some modelling]",
            "CQ": [
              "Must every instance of DNDC be executed in at least one modelling process?",
              "Is it required that DNDC is associated with execution in some form of modelling?",
              "Does the ontology entail that DNDC cannot exist without being executed in a modelling activity?"
            ]
          },
          {
            "axiom": "DNDC propertyRestrictions [has website homepage hasValue http://www.dndc.sr.unh.edu/]",
            "CQ": [
              "Must every instance of DNDC have its website homepage set to http://www.dndc.sr.unh.edu/?",
              "Is it required that DNDC's website homepage is exclusively http://www.dndc.sr.unh.edu/?",
              "Can DNDC reference any other website homepage value besides http://www.dndc.sr.unh.edu/?"
            ]
          }
        ]
      },
      "Proteolytic digest": {
        "axiom": {
          "subClassOf": [
            "Sequence set (protein)"
          ],
          "propertyRestrictions": [
            "[has topic some Proteomics]"
          ]
        },
        "description": "Proteolytic digest is defined as a subclass of Sequence set (protein), where each instance is characterized by having some association with the topic of Proteomics. According to its description, a proteolytic digest consists of a protein sequence that has been cleaved into peptide fragmentsâ€”either enzymatically or chemicallyâ€”with known fragment masses. This class formalization ensures that any proteolytic digest is a specialized set of protein sequences relevant to studies or analyses in proteomics.",
        "CQ": [
          {
            "axiom": "Proteolytic digest subClassOf Sequence set (protein)",
            "CQ": [
              "Is Proteolytic digest classified under the broader category of Sequence set (protein)?",
              "Which subclasses are encompassed by Sequence set (protein), including Proteolytic digest?",
              "What general categories does Proteolytic digest fall under within the ontology?"
            ]
          },
          {
            "axiom": "Proteolytic digest propertyRestrictions [has topic some Proteomics]",
            "CQ": [
              "Is every proteolytic digest associated with at least one topic in proteomics?",
              "Must a proteolytic digest necessarily have a topic that relates to proteomics?",
              "Can a proteolytic digest exist without being linked to proteomics as a topic?"
            ]
          }
        ]
      },
      "DNA translation": {
        "axiom": {
          "subClassOf": [
            "Sequence conversion"
          ],
          "propertyRestrictions": [
            "[has topic some Protein expression]"
          ]
        },
        "description": "DNA translation is defined as a subclass of Sequence conversion, where the process involves converting one type of biological sequence into another. It is further characterized by having the topic of Protein expression, indicating its role in the generation of proteins. The class is described as the process that translates a DNA sequence into a protein, formalizing its biological role in interpreting genetic information to produce functional proteins.",
        "CQ": [
          {
            "axiom": "DNA translation subClassOf Sequence conversion",
            "CQ": [
              "Is DNA translation classified under the broader category of Sequence conversion?",
              "Which specific types of Sequence conversion include DNA translation?",
              "What are the general categories that encompass DNA translation?"
            ]
          },
          {
            "axiom": "DNA translation propertyRestrictions [has topic some Protein expression]",
            "CQ": [
              "Does DNA translation always have the topic of protein expression?",
              "Is it necessary for DNA translation to be associated with some aspect of protein expression?",
              "Can an instance of DNA translation exist without being linked to protein expression through the 'has topic' property?"
            ]
          }
        ]
      },
      "GeneticsDesign": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[has specified data output some (Text data set and [has format specification some Textual format])]",
            "[has specified data input some (data and [has format specification some R data frame])]",
            "[is encoded in some R language]"
          ]
        },
        "description": "GeneticsDesign is a subclass of software, characterized by its input and output specifications and its implementation language. Specifically, any instance of GeneticsDesign must accept as input data that is in the form of an R data frame (with an associated format specification), produce as output a text data set (constrained to specified textual formats), and be encoded in the R programming language. This formalization ensures standardized interoperability and data handling within the class's defined domain.",
        "CQ": [
          {
            "axiom": "GeneticsDesign subClassOf software",
            "CQ": [
              "Is GeneticsDesign classified as a type of software?",
              "What general categories does GeneticsDesign belong to within the ontology?",
              "Which specific kinds of software include GeneticsDesign as a subclass?"
            ]
          },
          {
            "axiom": "GeneticsDesign propertyRestrictions [has specified data output some (Text data set and [has format specification some Textual format])]",
            "CQ": [
              "Does every GeneticsDesign require at least one specified data output that is both a Text data set and has some format specification of Textual format?",
              "Is it necessary for a GeneticsDesign to have a data output linked by the specified data output property, and must this output be a Text data set with an associated Textual format specification?",
              "Can a GeneticsDesign have specified data outputs that do not include both a Text data set and a corresponding format specification of Textual format?"
            ]
          },
          {
            "axiom": "GeneticsDesign propertyRestrictions [has specified data input some (data and [has format specification some R data frame])]",
            "CQ": [
              "Does a GeneticsDesign require at least one specified data input that is both a data entity and has a format specification of R data frame?",
              "Is it necessary that every specified data input for a GeneticsDesign be a data object with R data frame as its format specification?",
              "Can a GeneticsDesign include a specified data input that does not meet the criteria of being both data and having an R data frame format specification?"
            ]
          },
          {
            "axiom": "GeneticsDesign propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is every GeneticsDesign necessarily encoded in at least one instance of R language?",
              "Can a GeneticsDesign exist without being encoded in R language?",
              "Does the ontology require that each GeneticsDesign is linked to some R language?"
            ]
          }
        ]
      },
      "Prediction and recognition (protein)": {
        "axiom": {
          "subClassOf": [
            "Prediction and recognition"
          ]
        },
        "description": "Prediction and recognition (protein) is a subclass of Prediction and recognition, defined by its role in predicting, recognising, detecting, or identifying properties specific to proteins. This class encompasses processes, methods, or functions aimed at analyzing and determining various attributes or characteristics of proteins, such as structure, function, or presence.",
        "CQ": [
          {
            "axiom": "Prediction and recognition (protein) subClassOf Prediction and recognition",
            "CQ": [
              "Is Prediction and recognition (protein) classified under Prediction and recognition?",
              "Which specific classes are included within Prediction and recognition, such as Prediction and recognition (protein)?",
              "What broader categories does Prediction and recognition (protein) fall under?"
            ]
          }
        ]
      },
      "Ramachandran plot validation": {
        "axiom": {
          "subClassOf": [
            "Dihedral angle validation"
          ],
          "propertyRestrictions": [
            "[has input some Ramachandran plot]",
            "[has output some Protein structural quality report]"
          ]
        },
        "description": "Ramachandran plot validation is a subclass of Dihedral angle validation, defined as the process of validating a Ramachandran plot for a protein structure. Instances of this class take a Ramachandran plot as input and produce a Protein structural quality report as output. This validation assesses the conformational quality of protein structures based on their dihedral angles, supporting rigorous structural bioinformatics analyses.",
        "CQ": [
          {
            "axiom": "Ramachandran plot validation subClassOf Dihedral angle validation",
            "CQ": [
              "Is Ramachandran plot validation classified under the broader category of Dihedral angle validation?",
              "What are the specific types of Dihedral angle validation that include Ramachandran plot validation?",
              "Which higher-level validation methods does Ramachandran plot validation fall under?"
            ]
          },
          {
            "axiom": "Ramachandran plot validation propertyRestrictions [has input some Ramachandran plot]",
            "CQ": [
              "Is it required that Ramachandran plot validation always has at least one input which is a Ramachandran plot?",
              "Can a Ramachandran plot validation exist without any associated Ramachandran plot as input?",
              "Must every instance of Ramachandran plot validation utilize some Ramachandran plot as its input?"
            ]
          },
          {
            "axiom": "Ramachandran plot validation propertyRestrictions [has output some Protein structural quality report]",
            "CQ": [
              "Is it required that a Ramachandran plot validation always produces at least one Protein structural quality report as output?",
              "Can every output generated by a Ramachandran plot validation be classified as a Protein structural quality report?",
              "Does a Ramachandran plot validation ever produce an output that is not a Protein structural quality report?"
            ]
          }
        ]
      },
      "BasReader 3.01": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[output of some (software publishing process and [has participant hasValue Raytest])]"
          ]
        },
        "description": "BasReader 3.01 is defined as a subclass of software. Members of this class are exclusively characterized as outputs produced by a software publishing process in which the participant Raytest is involved. This formalization ensures that BasReader 3.01 instances are software entities resulting from processes that specifically include Raytest as a participant.",
        "CQ": [
          {
            "axiom": "BasReader 3.01 subClassOf software",
            "CQ": [
              "Does BasReader 3.01 fall under the general classification of software?",
              "Which specialized types of software include BasReader 3.01?",
              "What broader categories encompass BasReader 3.01 besides software?"
            ]
          },
          {
            "axiom": "BasReader 3.01 propertyRestrictions [output of some (software publishing process and [has participant hasValue Raytest])]",
            "CQ": [
              "Must any output of the BasReader 3.01 propertyRestrictions include results from a software publishing process that involves Raytest as a participant?",
              "Is it necessary that BasReader 3.01 propertyRestrictions only produce outputs related to a software publishing process where Raytest is involved?",
              "Can an output of BasReader 3.01 propertyRestrictions exist without stemming from a software publishing process in which Raytest is a participant?"
            ]
          }
        ]
      },
      "globaltest": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[is encoded in some R language]",
            "[is published by hasValue Bioconductor]",
            "[is executed in some descriptive statistical calculation]",
            "[has specified data output some (Graph plot and [has format specification only R data frame])]",
            "[implements some globaltest]",
            "[has specified data input some Gene expression dataset]"
          ]
        },
        "description": "globaltest is defined as a subclass of software with several specific characteristics. It is encoded in the R programming language and is published by Bioconductor. Instances of this class are designed to be executed within the context of descriptive statistical calculations. A globaltest implementation must have specified data input in the form of a gene expression dataset and produces specified data output, which can be either a graph plot or an R data frame (and only in the R data frame format). The class also includes a restriction that it implements the globaltest method. This formalization captures the essential features and functional requirements of the globaltest software component within a bioinformatics or statistical analysis context.",
        "CQ": [
          {
            "axiom": "globaltest subClassOf software",
            "CQ": [
              "Is globaltest classified under the broader category of software?",
              "Which entities are more specific than software, such as globaltest?",
              "What higher-level categories encompass globaltest within the ontology?"
            ]
          },
          {
            "axiom": "globaltest propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is it required that every globaltest instance is encoded in at least one R language?",
              "Are all encodings of globaltest necessarily restricted to R language only?",
              "Can a globaltest be encoded in a language other than R?"
            ]
          },
          {
            "axiom": "globaltest propertyRestrictions [is published by hasValue Bioconductor]",
            "CQ": [
              "Is every instance of globaltest necessarily published by Bioconductor?",
              "Can globaltest ever be published by an organization other than Bioconductor?",
              "Must the publishing entity for globaltest always be restricted to Bioconductor?"
            ]
          },
          {
            "axiom": "globaltest propertyRestrictions [is executed in some descriptive statistical calculation]",
            "CQ": [
              "Is every instance of 'globaltest' required to be executed in at least one descriptive statistical calculation?",
              "Does the definition of 'globaltest' allow it to be associated exclusively with descriptive statistical calculations through the 'is executed in' property?",
              "Can 'globaltest' exist without being linked to any descriptive statistical calculation via the 'is executed in' relationship?"
            ]
          },
          {
            "axiom": "globaltest propertyRestrictions [has specified data output some (Graph plot and [has format specification only R data frame])]",
            "CQ": [
              "Must every globaltest propertyRestriction include at least one specified data output that is a Graph plot and exclusively has a format specification of R data frame?",
              "Is it required for a globaltest propertyRestriction to have a specified data output that is both a Graph plot and formatted solely as an R data frame?",
              "Can a globaltest propertyRestrictionâ€™s specified data output be a Graph plot if its format specification is not restricted only to R data frame?"
            ]
          },
          {
            "axiom": "globaltest propertyRestrictions [implements some globaltest]",
            "CQ": [
              "Is it required that all entities with 'propertyRestrictions' implement at least one 'globaltest'?",
              "Can an entity with 'propertyRestrictions' exist without implementing any 'globaltest'?",
              "Does every instance of 'propertyRestrictions' have an implementation relationship with some 'globaltest'?"
            ]
          },
          {
            "axiom": "globaltest propertyRestrictions [has specified data input some Gene expression dataset]",
            "CQ": [
              "Is it required for a globaltest propertyRestrictions instance to have at least one specified data input that is a Gene expression dataset?",
              "Can a globaltest propertyRestrictions entity exist without a specified data input of the Gene expression dataset type?",
              "Does globaltest propertyRestrictions necessarily involve having a specified data input related to Gene expression datasets?"
            ]
          }
        ]
      },
      "Gene expression QTL analysis": {
        "axiom": {
          "subClassOf": [
            "Gene expression data analysis"
          ],
          "propertyRestrictions": [
            "[has output some Pathway or network report]"
          ]
        },
        "description": "Gene expression QTL analysis is defined as a subclass of Gene expression data analysis, characterized by combining classical quantitative trait loci (QTL) analysis with gene expression profiling to identify cis- and trans-regulatory elements influencing the expression of phenotype-associated genes. Members of this class are further defined by the requirement that their analysis outputs include either a Pathway or network report, reflecting the integrative nature of the results produced.",
        "CQ": [
          {
            "axiom": "Gene expression QTL analysis subClassOf Gene expression data analysis",
            "CQ": [
              "Is Gene expression QTL analysis classified as a type of Gene expression data analysis?",
              "Which types of analyses are considered subclasses of Gene expression data analysis, including Gene expression QTL analysis?",
              "What higher-level analysis categories does Gene expression QTL analysis fall under?"
            ]
          },
          {
            "axiom": "Gene expression QTL analysis propertyRestrictions [has output some Pathway or network report]",
            "CQ": [
              "Does every Gene expression QTL analysis necessarily produce at least one output that is either a Pathway report or a Network report?",
              "Is it possible for the output of a Gene expression QTL analysis to be something other than a Pathway report or Network report?",
              "Are Pathway and Network reports the only required types of outputs generated by Gene expression QTL analysis?"
            ]
          }
        ]
      },
      "Taxonomy": {
        "axiom": {
          "subClassOf": [
            "data",
            "Evolutionary biology"
          ],
          "propertyRestrictions": [
            "[has topic some Phylogeny]"
          ]
        },
        "description": "Taxonomy is defined as a subclass of data and evolutionary biology, focusing specifically on topics related to phylogeny. Members of this class involve the classification, identification, and naming of organisms, ensuring a systematic approach to understanding biological diversity and evolutionary relationships. The class is formally restricted to instances that are concerned with at least some aspect of phylogeny, aligning with its central role in evolutionary studies.",
        "CQ": [
          {
            "axiom": "Taxonomy subClassOf data",
            "CQ": [
              "Does Taxonomy fall under the broader classification of data?",
              "Which categories within data include Taxonomy as a specialized concept?",
              "What are the immediate superclasses of Taxonomy according to the ontology?"
            ]
          },
          {
            "axiom": "Taxonomy subClassOf Evolutionary biology",
            "CQ": [
              "Is Taxonomy considered a specific area within Evolutionary biology?",
              "What broader scientific domains encompass Taxonomy?",
              "Which specialized fields fall under the category of Evolutionary biology?"
            ]
          },
          {
            "axiom": "Taxonomy propertyRestrictions [has topic some Phylogeny]",
            "CQ": [
              "Is it required that any Taxonomy has at least one topic related to Phylogeny?",
              "Does every instance of Taxonomy necessarily include a topic concerning Phylogeny?",
              "Can a Taxonomy exist without having any topic involving Phylogeny?"
            ]
          }
        ]
      },
      "pcaMethods": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[is encoded in some R language]",
            "[implements some (Bayesian Model and Expectation-Maximization(EM) algorithm and Nonlinear Estimation by Iterative Partial Least Squares and SVDimpute algorithm)]",
            "[is published by hasValue Bioconductor]",
            "[has specified data output some Graph plot]",
            "[is executed in some (data visualization and cross validation)]",
            "[has specified data input some [has format specification only R data frame]]"
          ]
        },
        "description": "pcaMethods is a subclass of software designed for data analysis. It is encoded in the R language and published by Bioconductor. This class implements several algorithms, including Bayesian Model, Expectation-Maximization (EM) algorithm, Nonlinear Estimation by Iterative Partial Least Squares, and the SVDimpute algorithm. It operates within contexts of data visualization and cross-validation. The software requires data inputs strictly in R data frame format, and its outputs specifically include graphical plots.",
        "CQ": [
          {
            "axiom": "pcaMethods subClassOf software",
            "CQ": [
              "Are pcaMethods classified under the general category of software?",
              "Which specific methods are subclasses of software, such as pcaMethods?",
              "What broader classes does pcaMethods fall under within the ontology?"
            ]
          },
          {
            "axiom": "pcaMethods propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is it required that every PCA method implementation is encoded using the R language?",
              "Can a PCA method exist without being encoded in the R language?",
              "Does the ontology restrict PCA methods to only those that are encoded in the R language?"
            ]
          },
          {
            "axiom": "pcaMethods propertyRestrictions [implements some (Bayesian Model and Expectation-Maximization(EM) algorithm and Nonlinear Estimation by Iterative Partial Least Squares and SVDimpute algorithm)]",
            "CQ": [
              "Does every pcaMethods instance necessarily implement at least one method that belongs to the intersection of Bayesian Model, Expectation-Maximization (EM) algorithm, Nonlinear Estimation by Iterative Partial Least Squares, and SVDimpute algorithm?",
              "Is it required for pcaMethods to implement a technique that simultaneously satisfies the criteria of Bayesian Model, EM algorithm, Nonlinear Estimation by Iterative Partial Least Squares, and SVDimpute algorithm?",
              "Can a pcaMethods instance exist without implementing a method that is characterized by all of Bayesian Model, EM algorithm, Nonlinear Estimation by Iterative Partial Least Squares, and SVDimpute algorithm?"
            ]
          },
          {
            "axiom": "pcaMethods propertyRestrictions [is published by hasValue Bioconductor]",
            "CQ": [
              "Are all PCA methods required to be published by Bioconductor?",
              "Is it necessary that every PCA method is associated with a publication from Bioconductor?",
              "Can a PCA method be considered valid if it is published by an entity other than Bioconductor?"
            ]
          },
          {
            "axiom": "pcaMethods propertyRestrictions [has specified data output some Graph plot]",
            "CQ": [
              "Is it required that PCA methods have at least one specified data output that is a graph plot?",
              "Are there cases where PCA methods must produce a graph plot as a data output?",
              "Does every PCA method necessarily specify a data output of the type graph plot?"
            ]
          },
          {
            "axiom": "pcaMethods propertyRestrictions [is executed in some (data visualization and cross validation)]",
            "CQ": [
              "Is it required that pcaMethods always execute in either data visualization or cross validation contexts?",
              "Must every instance of pcaMethods be associated with execution in at least one of data visualization or cross validation?",
              "Can pcaMethods be executed only in cases involving data visualization, cross validation, or both, but not outside these scenarios?"
            ]
          },
          {
            "axiom": "pcaMethods propertyRestrictions [has specified data input some [has format specification only R data frame]]",
            "CQ": [
              "Does every data input specified for pcaMethods necessarily have a format specification restricted only to R data frames?",
              "Can a data input provided to pcaMethods have any format specification other than R data frame?",
              "Is the format specification of data inputs for pcaMethods limited exclusively to R data frames for all relevant cases?"
            ]
          }
        ]
      },
      "TCoffee": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[is executed in some multiple sequence alignment]"
          ]
        },
        "description": "TCoffee is defined as a subclass of software and is characterized by its essential role in executing at least one multiple sequence alignment. This means that any instance of TCoffee is a software application specifically involved in performing multiple sequence alignment tasks.",
        "CQ": [
          {
            "axiom": "TCoffee subClassOf software",
            "CQ": [
              "Is TCoffee categorized as a type of software?",
              "Which software subclasses include TCoffee?",
              "What are the parent classes of TCoffee?"
            ]
          },
          {
            "axiom": "TCoffee propertyRestrictions [is executed in some multiple sequence alignment]",
            "CQ": [
              "Is it necessary for TCoffee to be executed in a multiple sequence alignment?",
              "Does TCoffee always participate in at least one multiple sequence alignment process?",
              "Can TCoffee exist without being executed in a multiple sequence alignment?"
            ]
          }
        ]
      },
      "Protein chemical modifications": {
        "axiom": {
          "subClassOf": [
            "Protein sites, features and motifs"
          ]
        },
        "description": "Protein chemical modifications is defined as a subclass of Protein sites, features and motifs. It refers to the topic concerning the chemical modification of a protein, encompassing alterations that affect specific protein sites or motifs. This class formalizes the grouping of all concepts related to protein chemical modifications within the broader context of protein features.",
        "CQ": [
          {
            "axiom": "Protein chemical modifications subClassOf Protein sites, features and motifs",
            "CQ": [
              "Are protein chemical modifications classified under the broader category of protein sites, features and motifs?",
              "What specific subclasses exist within protein sites, features and motifs, including protein chemical modifications?",
              "Which higher-level classes encompass protein chemical modifications?"
            ]
          }
        ]
      },
      "OrderedList": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[has specified data input some (Gene expression dataset and [has format specification some data format specification])]",
            "[implements some Similarity score]",
            "[is encoded in some R language]",
            "[is executed in some differential expression analysis]",
            "[has specified data output some (Gene list and [has format specification some data format specification])]"
          ]
        },
        "description": "OrderedList is a subclass of software designed for differential expression analysis. It requires as input a gene expression dataset with an associated data format specification, and outputs a gene list, also accompanied by a format specification. OrderedList is implemented in the R programming language, executes within a differential expression analysis context, and provides similarity scoring functionality. These axioms define OrderedList as specialized analysis software with well-defined input/output standards and analytical capabilities, constrained to the context of gene expression data.",
        "CQ": [
          {
            "axiom": "OrderedList subClassOf software",
            "CQ": [
              "Does OrderedList fall under the broader category of software?",
              "What categories encompass OrderedList as a subclass?",
              "Which types of software include OrderedList as a more specific instance?"
            ]
          },
          {
            "axiom": "OrderedList propertyRestrictions [has specified data input some (Gene expression dataset and [has format specification some data format specification])]",
            "CQ": [
              "Is every OrderedList required to have at least one specified data input that is both a Gene expression dataset and has a format specification?",
              "Can an OrderedList possess a specified data input only if it qualifies as a Gene expression dataset with an associated data format specification?",
              "Does the property restriction enforce that OrderedLists reference data inputs that are both categorized as Gene expression datasets and constrained by a format specification?"
            ]
          },
          {
            "axiom": "OrderedList propertyRestrictions [implements some Similarity score]",
            "CQ": [
              "Is every OrderedList required to have at least one implementation with a Similarity score?",
              "Can an OrderedList exist without implementing any Similarity score?",
              "Does the ontology permit OrderedList to implement properties other than Similarity score?"
            ]
          },
          {
            "axiom": "OrderedList propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Must every OrderedList be encoded in at least one R language?",
              "Is it possible for an OrderedList to exist without being encoded in any R language?",
              "Does the encoding property of OrderedList necessarily involve some relationship with an R language?"
            ]
          },
          {
            "axiom": "OrderedList propertyRestrictions [is executed in some differential expression analysis]",
            "CQ": [
              "Is every OrderedList instance required to participate in at least one differential expression analysis through the is executed in property?",
              "Can an OrderedList be present without being associated with any differential expression analysis via is executed in?",
              "Which analyses must an OrderedList be involved in through the is executed in relationship?"
            ]
          },
          {
            "axiom": "OrderedList propertyRestrictions [has specified data output some (Gene list and [has format specification some data format specification])]",
            "CQ": [
              "Is it required that an OrderedList always has at least one specified data output that consists of a Gene list with some data format specification?",
              "Can an OrderedList possess a specified data output only if it is both a Gene list and has a data format specification?",
              "Does the property restriction enforce that any specified data output from an OrderedList is restricted to entities that qualify as both Gene list and conform to a data format specification?"
            ]
          }
        ]
      },
      "Codon usage table": {
        "axiom": {
          "subClassOf": [
            "data"
          ],
          "propertyRestrictions": [
            "[has topic some Gene expression]"
          ]
        },
        "description": "Codon usage table is a subclass of data that specifically pertains to gene expression. It represents a structured table containing codon usage data calculated from one or more nucleic acid sequences. Such a table typically includes its name, optional comments, and columns listing codons alongside their corresponding usage data. Additionally, a codon usage table can be used to extract or represent a genetic code, providing valuable insights into the patterns of codon utilization associated with gene expression.",
        "CQ": [
          {
            "axiom": "Codon usage table subClassOf data",
            "CQ": [
              "Is Codon usage table classified as a type of data?",
              "Which entities are more specific forms under data, such as Codon usage table?",
              "What broader categories encompass Codon usage table within the ontology?"
            ]
          },
          {
            "axiom": "Codon usage table propertyRestrictions [has topic some Gene expression]",
            "CQ": [
              "Is it required that every Codon usage table is associated with some aspect of Gene expression through the has topic property?",
              "Can a Codon usage table exist without referencing Gene expression as a topic?",
              "Does the presence of a 'has topic' relationship to Gene expression define Codon usage tables?"
            ]
          }
        ]
      },
      "CRAM": {
        "axiom": {
          "subClassOf": [
            "Binary format",
            "Alignment format (pair only)"
          ]
        },
        "description": "CRAM is a subclass of both Binary format and Alignment format (pair only), representing a file format used for storing pairwise alignments in a compressed binary representation. It is defined by its use of reference-based compression to efficiently encode alignment data, distinguishing it from other binary or alignment formats.",
        "CQ": [
          {
            "axiom": "CRAM subClassOf Binary format",
            "CQ": [
              "Is CRAM classified under the general category of Binary format?",
              "What are the specific subtypes encompassed by Binary format, such as CRAM?",
              "Which broader categories does CRAM fall into within the ontology?"
            ]
          },
          {
            "axiom": "CRAM subClassOf Alignment format (pair only)",
            "CQ": [
              "Is CRAM classified as a type of Alignment format (pair only)?",
              "Which specific formats are categorized under Alignment format (pair only), and does this include CRAM?",
              "What are the broader categories encompassing CRAM within alignment format classification?"
            ]
          }
        ]
      },
      "Protein cleavage sites": {
        "axiom": {
          "subClassOf": [
            "Protein sites, features and motifs"
          ]
        },
        "description": "Protein cleavage sites is a subclass of Protein sites, features and motifs, representing locations within a protein sequence where cleavage by a proteolytic enzyme or agent occurs. This class specifically captures the sites of proteolytic processing, which are essential for understanding post-translational modifications and protein maturation.",
        "CQ": [
          {
            "axiom": "Protein cleavage sites subClassOf Protein sites, features and motifs",
            "CQ": [
              "Are protein cleavage sites included as a specific type within protein sites, features and motifs?",
              "What specialized categories exist under protein sites, features and motifs, such as protein cleavage sites?",
              "Which broader classes encompass the concept of protein cleavage sites?"
            ]
          }
        ]
      },
      "Protein structural motifs and surfaces": {
        "axiom": {
          "subClassOf": [
            "Obsolete concept (EDAM)",
            "Protein structure analysis",
            "Protein sites, features and motifs"
          ]
        },
        "description": "Protein structural motifs and surfaces is a subclass of Obsolete concept (EDAM), Protein structure analysis, and Protein sites, features and motifs. This class encompasses conserved substructures, geometry of secondary structure elements, and spatial arrangements within protein backbones. It also includes aspects related to solvent-exposed surfaces and internal cavities, addressing analyses of shape, hydropathy, electrostatic patches, and related roles and functions. The class captures topics concerning three-dimensional structural features or common 3D motifs in proteins, as well as functional surface regions such as biological interfaces with other molecules.",
        "CQ": [
          {
            "axiom": "Protein structural motifs and surfaces subClassOf Obsolete concept (EDAM)",
            "CQ": [
              "Are Protein structural motifs and surfaces categorized as a type of Obsolete concept (EDAM)?",
              "Which concepts fall under the broader classification of Obsolete concept (EDAM), including Protein structural motifs and surfaces?",
              "What higher-level categories encompass Protein structural motifs and surfaces within the ontology?"
            ]
          },
          {
            "axiom": "Protein structural motifs and surfaces subClassOf Protein structure analysis",
            "CQ": [
              "Are protein structural motifs and surfaces encompassed within the scope of protein structure analysis?",
              "Which analysis types are hierarchically subordinate to protein structure analysis, such as protein structural motifs and surfaces?",
              "Under which umbrella categories is protein structural motifs and surfaces classified?"
            ]
          },
          {
            "axiom": "Protein structural motifs and surfaces subClassOf Protein sites, features and motifs",
            "CQ": [
              "Is \"Protein structural motifs and surfaces\" classified under the broader group \"Protein sites, features and motifs\"?",
              "Which entities are defined as more specific components within \"Protein sites, features and motifs\"?",
              "What broader categories encompass \"Protein structural motifs and surfaces\"?"
            ]
          }
        ]
      },
      "IRanges": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[is executed in some data normalization]",
            "[has specified data input some (data and [has format specification some R data frame])]",
            "[is executed in some decision tree induction]",
            "[is encoded in some R language]",
            "[has specified data output some (data and [has format specification some R data frame])]"
          ]
        },
        "description": "IRanges is defined as a subclass of software characterized by several key properties. It is encoded in the R language and operates in the context of data normalization and decision tree induction processes. IRanges requires input data in the form of an R data frame and produces output data also formatted as an R data frame. These property restrictions specify the technical environment and data formats integral to IRanges, emphasizing its role in R-based data workflows and its utility in data preprocessing and machine learning tasks.",
        "CQ": [
          {
            "axiom": "IRanges subClassOf software",
            "CQ": [
              "Can IRanges be classified as a type of software?",
              "What instances are included within the subclasses of software, such as IRanges?",
              "Which broader classes encompass IRanges?"
            ]
          },
          {
            "axiom": "IRanges propertyRestrictions [is executed in some data normalization]",
            "CQ": [
              "Does every IRanges entity participate in at least one execution within a data normalization process?",
              "Is it mandatory for IRanges to have the property 'is executed in' linked to some instance of data normalization?",
              "Can any IRanges exist without being associated, via 'is executed in', to a data normalization activity?"
            ]
          },
          {
            "axiom": "IRanges propertyRestrictions [has specified data input some (data and [has format specification some R data frame])]",
            "CQ": [
              "Does every IRanges entity have at least one specified data input that is a data entity with a format specification as an R data frame?",
              "Is it necessary for the specified data input of an IRanges object to include a data element formatted as an R data frame?",
              "Are IRanges instances required to be linked via specified data input to data that has a format specification of R data frame?"
            ]
          },
          {
            "axiom": "IRanges propertyRestrictions [is executed in some decision tree induction]",
            "CQ": [
              "Is it required that IRanges instances are executed in at least one decision tree induction?",
              "Can any IRanges exist without being executed in a decision tree induction process?",
              "Do all IRanges have an association to some decision tree induction through the execution property?"
            ]
          },
          {
            "axiom": "IRanges propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is every instance of IRanges required to be encoded in at least one R language?",
              "Can IRanges exist without being associated with any R language encoding?",
              "Does the definition of IRanges demand that it must have an encoding exclusively in an R language?"
            ]
          },
          {
            "axiom": "IRanges propertyRestrictions [has specified data output some (data and [has format specification some R data frame])]",
            "CQ": [
              "Does every IRanges entity necessarily produce at least one data output that is both 'data' and has the format specified as an R data frame?",
              "Is it required that each data output from IRanges includes a format specification designating it as an R data frame?",
              "Can an IRanges object have a specified data output that lacks either the attribute 'data' or the format specification of an R data frame?"
            ]
          }
        ]
      },
      "spikeLI": {
        "axiom": {
          "subClassOf": [
            "software"
          ],
          "propertyRestrictions": [
            "[implements some Langmuir Isotherm]",
            "[is executed in some (descriptive statistical calculation and differential expression analysis)]",
            "[is encoded in some R language]",
            "[has specified data input some Gene expression dataset]",
            "[has specified data output some Graph plot]"
          ]
        },
        "description": "spikeLI is defined as a subclass of software characterized by its implementation of some version of the Langmuir Isotherm. It is executed as part of both descriptive statistical calculation and differential expression analysis workflows. spikeLI is specifically encoded in the R language, accepts as input a gene expression dataset, and produces a graph plot as its specified output. This formalization captures spikeLIâ€™s role as a specialized software tool for processing gene expression data and visualizing results through graphical plots.",
        "CQ": [
          {
            "axiom": "spikeLI subClassOf software",
            "CQ": [
              "Is spikeLI categorized as a type of software?",
              "Which entities are classified as subclasses of software, including spikeLI?",
              "What broader categories encompass spikeLI within the ontology?"
            ]
          },
          {
            "axiom": "spikeLI propertyRestrictions [implements some Langmuir Isotherm]",
            "CQ": [
              "Must every spikeLI implement at least one Langmuir Isotherm?",
              "Is the presence of a Langmuir Isotherm implementation required for an entity to be classified as spikeLI?",
              "Does spikeLI necessarily implement a Langmuir Isotherm as part of its definition?"
            ]
          },
          {
            "axiom": "spikeLI propertyRestrictions [is executed in some (descriptive statistical calculation and differential expression analysis)]",
            "CQ": [
              "Is it required that spikeLI is executed in at least one process that is both a descriptive statistical calculation and a differential expression analysis?",
              "Does spikeLI need to be associated with an instance where both descriptive statistical calculation and differential expression analysis are performed together?",
              "Must every execution context of spikeLI involve the intersection of descriptive statistical calculation and differential expression analysis activities?"
            ]
          },
          {
            "axiom": "spikeLI propertyRestrictions [is encoded in some R language]",
            "CQ": [
              "Is it required that SpikeLI must be represented using at least one encoding in the R language?",
              "Can SpikeLI exist without being encoded in any R language?",
              "Does the representation of SpikeLI necessarily involve an association with an R language encoding?"
            ]
          },
          {
            "axiom": "spikeLI propertyRestrictions [has specified data input some Gene expression dataset]",
            "CQ": [
              "Does a spikeLI require at least one specified data input that is a Gene expression dataset?",
              "Is it necessary for every spikeLI to have a specified data input drawn from Gene expression datasets?",
              "Can an instance of spikeLI lack a specified data input of the type Gene expression dataset?"
            ]
          },
          {
            "axiom": "spikeLI propertyRestrictions [has specified data output some Graph plot]",
            "CQ": [
              "Is it required that a spikeLI instance produces at least one data output that is a Graph plot?",
              "Can a spikeLI ever have a specified data output that is not a Graph plot?",
              "Are all specified data outputs of spikeLI necessarily instances of Graph plot?"
            ]
          }
        ]
      },
      "Representative sequence identification": {
        "axiom": {
          "subClassOf": [
            "Sequence comparison"
          ],
          "propertyRestrictions": [
            "[has topic some Sequence comparison]"
          ]
        },
        "description": "Representative sequence identification is defined as a subclass of Sequence comparison. Individuals in this class are related to at least one topic involving sequence comparison (as specified by the property restriction: has topic some Sequence comparison). This class is concerned with the process of identifying a representative sequence from a set of sequences, generally utilizing pair-wise alignment scores or other sequence comparison methods.",
        "CQ": [
          {
            "axiom": "Representative sequence identification subClassOf Sequence comparison",
            "CQ": [
              "Does Representative sequence identification fall under the category of Sequence comparison?",
              "Which specific methods are classified as subtypes of Sequence comparison, such as Representative sequence identification?",
              "What higher-level categories encompass Representative sequence identification?"
            ]
          },
          {
            "axiom": "Representative sequence identification propertyRestrictions [has topic some Sequence comparison]",
            "CQ": [
              "Is it necessary for a Representative sequence identification to have the property 'has topic' associated with Sequence comparison?",
              "Does every Representative sequence identification instance relate to at least one Sequence comparison through the 'has topic' property?",
              "Can a Representative sequence identification exist without having 'has topic' connected to a Sequence comparison?"
            ]
          }
        ]
      }
    },
    "properties": {
      "is topic of": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "Topic"
          ],
          "range": [
            "(data or information processing)"
          ],
          "subPropertyOf": [],
          "inverseOf": [
            "has topic"
          ]
        },
        "description": "The property \"is topic of\" relates an instance of 'Topic' (the subject) to an instance of 'data or information processing' (the object), indicating that the topic is the subject or scope of the referenced data or process. The domain is restricted to 'Topic', while the range includes data or information processing entities. There are no declared property characteristics, super-properties, or sub-properties. The inverse property is 'has topic'. In EDAM, this property is not used directly between EDAM concepts; instead, the inverse 'has topic' is applied. The property asserts that a topic A is the topic of object B, establishing a scope relationship.",
        "CQ": [
          {
            "axiom": "is topic of domain Topic",
            "CQ": [
              "Can the property 'is topic of' be used with subjects other than a Topic?",
              "Is every subject for the property 'is topic of' necessarily a Topic?",
              "What types of entities can serve as the domain for the property 'is topic of'?"
            ]
          },
          {
            "axiom": "is topic of range (data or information processing)",
            "CQ": [
              "Can the property 'is topic of' have a range other than 'data or information processing'?",
              "Is every entity in the range of 'is topic of' required to be a 'data or information processing' item?",
              "What types of entities can serve as the range for the property 'is topic of'?"
            ]
          },
          {
            "axiom": "is topic of inverseOf has topic",
            "CQ": [
              "What is the inverse property of â€˜is topic ofâ€™ in this ontology?",
              "If an entity A is the topic of entity B, does this entail that B has topic A?",
              "How are the properties â€˜is topic ofâ€™ and â€˜has topicâ€™ related in terms of logical inverse within the ontology?"
            ]
          }
        ]
      },
      "is published by": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "(data format specification or software)"
          ],
          "range": [
            "organization"
          ],
          "subPropertyOf": [
            "owl:topObjectProperty"
          ],
          "inverseOf": []
        },
        "description": "The property \"is published by\" relates data format specifications or software to organizations, indicating the publishing organization responsible for these entities. It has no explicitly defined characteristics or inverse properties. The property is a sub-property of owl:topObjectProperty, making it a general object property. Its domain includes data format specifications or software, and its range is restricted to organizations.",
        "CQ": [
          {
            "axiom": "is published by domain (data format specification or software)",
            "CQ": [
              "Can the property 'is published by' have a subject other than a data format specification or software?",
              "What types of entities can be the domain for the 'is published by' property?",
              "Are all instances used with the 'is published by' property required to be either data format specifications or software as subjects?"
            ]
          },
          {
            "axiom": "is published by range organization",
            "CQ": [
              "Is every value used with the property 'is published by' required to be an organization?",
              "Can the property 'is published by' have a range other than organization?",
              "What types of entities can serve as the range for the property 'is published by'?"
            ]
          },
          {
            "axiom": "is published by subPropertyOf owl:topObjectProperty",
            "CQ": [
              "Is \"is published by\" considered a subproperty of the top object property in the ontology?",
              "What superproperties does \"is published by\" have within the property hierarchy?",
              "Which properties are directly more general than \"is published by\"?"
            ]
          }
        ]
      }
    }
  },
  "exchangemodel": {
    "classes": {
      "Detection": {
        "axiom": {
          "subClassOf": [
            "Observation"
          ],
          "propertyRestrictions": [
            "[describes only (event:AtomicActivity or event:ObjectEvent)]",
            "[providedBy only ProcessingComponent]"
          ]
        },
        "description": "Detection is defined as a subclass of Observation. Individuals classified as Detection must only describe either an event of type AtomicActivity or ObjectEvent, and are restricted to being provided exclusively by a ProcessingComponent. This ensures that each Detection instance is specifically tied to these event types, and clearly attributed to a particular processing component within the system.",
        "CQ": [
          {
            "axiom": "Detection subClassOf Observation",
            "CQ": [
              "Is Detection encompassed by the broader category of Observation?",
              "Which Observation subclasses are present in the ontology, such as Detection?",
              "What more general categories is Detection a part of within the ontology?"
            ]
          },
          {
            "axiom": "Detection propertyRestrictions [describes only (event:AtomicActivity or event:ObjectEvent)]",
            "CQ": [
              "Is the Detection propertyRestriction limited to describing only AtomicActivity or ObjectEvent types of events?",
              "Can Detection propertyRestrictions ever describe something that is not categorized as AtomicActivity or ObjectEvent?",
              "Are all descriptions provided by Detection propertyRestrictions necessarily about AtomicActivity, ObjectEvent, or both?"
            ]
          },
          {
            "axiom": "Detection propertyRestrictions [providedBy only ProcessingComponent]",
            "CQ": [
              "Is it required that the provider of Detection is always a ProcessingComponent?",
              "Can Detection have any provider other than a ProcessingComponent?",
              "Are all sources supplying Detection instances necessarily classified as ProcessingComponent?"
            ]
          }
        ]
      },
      "Observation": {
        "axiom": {
          "propertyRestrictions": [
            "[describes only event:Event]",
            "[providedBy only (event:Person or ProcessingComponent or Sensor)]",
            "[providedBy exactly 1 (event:Person or ProcessingComponent or Sensor)]",
            "[describes exactly 1 event:Event]",
            "[hasPlausibilityMetric only xsd:double]",
            "[hasReportingTime only time:Instant]",
            "[hasReportingTime exactly 1 time:Instant]",
            "[hasPlausibilityMetric exactly 1 xsd:double]"
          ]
        },
        "description": "Observation is a class characterized by its formal linkage to a single event, as indicated by the restriction that each Observation describes exactly one event:Event. Each Observation is provided by exactly one provider, restricted to being either a event:Person, a ProcessingComponent, or a Sensor. Observations are further annotated with precisely one plausibility metric (hasPlausibilityMetric exactly 1 xsd:double) and exactly one reporting time (hasReportingTime exactly 1 time:Instant). These formal restrictions ensure that an Observation instance unambiguously refers to a specific event, has a single well-defined provider, includes a quantitative plausibility assessment, and records the precise time at which the observation was reported.",
        "CQ": [
          {
            "axiom": "Observation propertyRestrictions [describes only event:Event]",
            "CQ": [
              "Is it required that every Observation describes only instances of event:Event?",
              "Can an Observation describe anything other than an event:Event according to the property restriction?",
              "Do the property restrictions on Observation ensure exclusivity to the event:Event class for the 'describes' property?"
            ]
          },
          {
            "axiom": "Observation propertyRestrictions [providedBy only (event:Person or ProcessingComponent or Sensor)]",
            "CQ": [
              "Is an observation allowed to be provided by any entity other than a person, a processing component, or a sensor?",
              "Does every observation require its provider to be either a person, processing component, or sensor?",
              "Are the possible providers of observations strictly limited to the set comprising person, processing component, and sensor?"
            ]
          },
          {
            "axiom": "Observation propertyRestrictions [providedBy exactly 1 (event:Person or ProcessingComponent or Sensor)]",
            "CQ": [
              "Is each Observation required to have exactly one provider, which must be either an event:Person, a ProcessingComponent, or a Sensor?",
              "Can an Observation ever have its providedBy property assigned to more than one instance among event:Person, ProcessingComponent, or Sensor?",
              "Does the property restriction for providedBy on Observation exclude all providers except event:Person, ProcessingComponent, or Sensor?"
            ]
          },
          {
            "axiom": "Observation propertyRestrictions [describes exactly 1 event:Event]",
            "CQ": [
              "Is each Observation restricted to describing exactly one Event?",
              "Can an Observation be valid if it describes more than one Event or none at all?",
              "Must every instance of Observation have one and only one Event that it describes?"
            ]
          },
          {
            "axiom": "Observation propertyRestrictions [hasPlausibilityMetric only xsd:double]",
            "CQ": [
              "Are the plausibility metrics associated with an Observation exclusively of datatype xsd:double?",
              "Can an Observation have a plausibility metric that is not represented as an xsd:double value?",
              "Is it only permissible for an Observationâ€™s hasPlausibilityMetric property to reference values of type xsd:double?"
            ]
          },
          {
            "axiom": "Observation propertyRestrictions [hasReportingTime only time:Instant]",
            "CQ": [
              "Is every reporting time associated with an observation necessarily of type time:Instant?",
              "Can an observation be linked to a reporting time that is not an instance of time:Instant?",
              "Are observations restricted exclusively to having reporting times that are time:Instant rather than other temporal types?"
            ]
          },
          {
            "axiom": "Observation propertyRestrictions [hasReportingTime exactly 1 time:Instant]",
            "CQ": [
              "Does every Observation have exactly one value for the property 'hasReportingTime' associated with a time instant?",
              "Can there be more than one 'hasReportingTime' for a single Observation instance?",
              "Is it possible for an Observation to exist without a specified 'hasReportingTime'?"
            ]
          },
          {
            "axiom": "Observation propertyRestrictions [hasPlausibilityMetric exactly 1 xsd:double]",
            "CQ": [
              "Does every Observation require exactly one value for the property hasPlausibilityMetric of type xsd:double?",
              "Can an Observation have more than one hasPlausibilityMetric value assigned to it?",
              "Is it possible for an Observation to exist without a specified hasPlausibilityMetric value?"
            ]
          }
        ]
      },
      "Sensor": {
        "axiom": {
          "propertyRestrictions": [
            "[attachedTo exactly 1 event:Entity]",
            "[attachedTo only event:Entity]"
          ]
        },
        "description": "Sensor is a class characterized by the restriction that every instance must be attached to exactly one entity from the event:Entity class; no sensor can be attached to more than one, nor to any entity outside of event:Entity. This ensures a one-to-one association between each sensor and an event entity.",
        "CQ": [
          {
            "axiom": "Sensor propertyRestrictions [attachedTo exactly 1 event:Entity]",
            "CQ": [
              "Is every Sensor required to be attached to exactly one Entity?",
              "Can a Sensor ever be attached to more than one Entity at the same time?",
              "Is it possible for a Sensor to exist without being attached to any Entity?"
            ]
          },
          {
            "axiom": "Sensor propertyRestrictions [attachedTo only event:Entity]",
            "CQ": [
              "Is it required that every Sensor be attached only to instances of event:Entity?",
              "Can a Sensor ever be attached to something other than an event:Entity?",
              "Does the ontology restrict a Sensorâ€™s attachedTo property exclusively to event:Entity instances?"
            ]
          }
        ]
      }
    },
    "properties": {}
  },
  "pizza": {
    "classes": {
      "Cajun": {
        "axiom": {
          "subClassOf": [
            "NamedPizza"
          ],
          "disjointWith": [
            "Mushroom",
            "LaReine",
            "Napoletana",
            "Veneziana",
            "AmericanHot",
            "UnclosedPizza",
            "PrinceCarlo",
            "Capricciosa",
            "FruttiDiMare",
            "Siciliana",
            "Margherita",
            "American",
            "SloppyGiuseppe",
            "Caprina",
            "Soho",
            "Parmense",
            "PolloAdAstra",
            "Fiorentina",
            "Rosa",
            "QuattroFormaggi",
            "Giardiniera",
            "FourSeasons"
          ],
          "propertyRestrictions": [
            "[hasTopping some TomatoTopping]",
            "[hasTopping some TobascoPepperSauce]",
            "[hasTopping only (PrawnsTopping or TobascoPepperSauce or MozzarellaTopping or TomatoTopping or OnionTopping or PeperonataTopping)]",
            "[hasTopping some MozzarellaTopping]",
            "[hasTopping some OnionTopping]",
            "[hasTopping some PeperonataTopping]",
            "[hasTopping some PrawnsTopping]"
          ]
        },
        "description": "Cajun is defined as a subclass of NamedPizza and is explicitly disjoint with a variety of other pizza types, ensuring that no pizza can belong to Cajun and any of the disjoint classes simultaneously. Each Cajun pizza must have, as toppings, tomato, Tobasco pepper sauce, mozzarella, onion, peperonata, and prawns. Furthermore, the only allowed toppings on a Cajun pizza are prawn, Tobasco pepper sauce, mozzarella, tomato, onion, and peperonata. This formalization strictly characterizes Cajun pizzas by both required and exclusive toppings, distinguishing them from other named pizzas.",
        "CQ": [
          {
            "axiom": "Cajun subClassOf NamedPizza",
            "CQ": [
              "Does Cajun fall under the classification of NamedPizza?",
              "What are the specialized types categorized within NamedPizza, including Cajun?",
              "Which broader groups does Cajun belong to in the ontology hierarchy?"
            ]
          },
          {
            "axiom": "Cajun disjointWith Mushroom",
            "CQ": [
              "How does the ontology distinguish between Cajun and Mushroom classes?",
              "Is an entity allowed to belong to both Cajun and Mushroom categories simultaneously?",
              "Which classes are explicitly stated as disjoint with Cajun in the ontology?"
            ]
          },
          {
            "axiom": "Cajun disjointWith LaReine",
            "CQ": [
              "How does the ontology represent the exclusivity between Cajun and LaReine?",
              "Is it permitted for a pizza to belong to both Cajun and LaReine categories?",
              "Which pizza types are specified as incompatible with LaReine?"
            ]
          },
          {
            "axiom": "Cajun disjointWith Napoletana",
            "CQ": [
              "Are Cajun and Napoletana considered mutually exclusive pizza types in the ontology?",
              "Is there any pizza instance that can belong to both Cajun and Napoletana categories?",
              "What other pizza classes are specified as disjoint with Cajun?"
            ]
          },
          {
            "axiom": "Cajun disjointWith Veneziana",
            "CQ": [
              "What is the formal separation defined between Cajun and Veneziana in the ontology?",
              "Is it allowed for an individual to be classified as both Cajun and Veneziana?",
              "Which classes are declared incompatible with Veneziana?"
            ]
          },
          {
            "axiom": "Cajun disjointWith AmericanHot",
            "CQ": [
              "What is the ontological separation between Cajun and AmericanHot?",
              "Can any entity be classified as both Cajun and AmericanHot?",
              "Which classes are declared as disjoint with Cajun in the ontology?"
            ]
          },
          {
            "axiom": "Cajun disjointWith UnclosedPizza",
            "CQ": [
              "How does the ontology differentiate Cajun pizzas from UnclosedPizzas?",
              "Is there any overlap permitted between the classes Cajun and UnclosedPizza?",
              "Which pizza varieties are formally incompatible with being classified as an UnclosedPizza?"
            ]
          },
          {
            "axiom": "Cajun disjointWith PrinceCarlo",
            "CQ": [
              "What type of differentiation is specified between Cajun and PrinceCarlo classes?",
              "Is there an instance that can belong to both Cajun and PrinceCarlo simultaneously according to the ontology?",
              "Which classes are formally asserted as disjoint from PrinceCarlo?"
            ]
          },
          {
            "axiom": "Cajun disjointWith Capricciosa",
            "CQ": [
              "How are the classes Cajun and Capricciosa related in terms of disjointness within the ontology?",
              "Is it possible for a pizza to belong to both the Cajun and Capricciosa categories simultaneously?",
              "Which other pizza classes, besides Capricciosa, are specified as disjoint with Cajun?"
            ]
          },
          {
            "axiom": "Cajun disjointWith FruttiDiMare",
            "CQ": [
              "What formal separation exists between Cajun and FruttiDiMare in the ontology?",
              "Is any item classified as both Cajun and FruttiDiMare simultaneously?",
              "Which classes are specified as mutually exclusive with FruttiDiMare?"
            ]
          },
          {
            "axiom": "Cajun disjointWith Siciliana",
            "CQ": [
              "How are Cajun and Siciliana defined in terms of class exclusivity within the ontology?",
              "Is it permitted for an individual to belong to both Cajun and Siciliana classes simultaneously?",
              "Which classes are formally stated as disjoint with Cajun?"
            ]
          },
          {
            "axiom": "Cajun disjointWith Margherita",
            "CQ": [
              "What logical separation is established between Cajun and Margherita in the ontology?",
              "Is there any individual that can be classified as both Cajun and Margherita?",
              "Which classes are defined as disjoint with Margherita?"
            ]
          },
          {
            "axiom": "Cajun disjointWith American",
            "CQ": [
              "What logical separation exists between Cajun and American in the ontology?",
              "Is there any entity that can simultaneously belong to both Cajun and American categories?",
              "Which classes are formally disjoint from Cajun according to the ontology?"
            ]
          },
          {
            "axiom": "Cajun disjointWith SloppyGiuseppe",
            "CQ": [
              "What formal separation exists between Cajun and SloppyGiuseppe within the ontology?",
              "Can a pizza instance belong to both Cajun and SloppyGiuseppe classes?",
              "Which classes are explicitly stated as disjoint with Cajun?"
            ]
          },
          {
            "axiom": "Cajun disjointWith Caprina",
            "CQ": [
              "What logical separation is established between Cajun and Caprina in the ontology?",
              "Is any entity allowed to be classified simultaneously as both Cajun and Caprina?",
              "Which classes are formally stated as mutually exclusive with Caprina?"
            ]
          },
          {
            "axiom": "Cajun disjointWith Soho",
            "CQ": [
              "How does the ontology specify the incompatibility between Cajun and Soho?",
              "Is any individual allowed to belong to both the Cajun and Soho categories simultaneously?",
              "Which classes are defined as disjoint with Soho?"
            ]
          },
          {
            "axiom": "Cajun disjointWith Parmense",
            "CQ": [
              "How does the ontology define the separation between Cajun and Parmense?",
              "Is there any entity that can be classified as both Cajun and Parmense?",
              "Which ontology classes are specified as mutually exclusive with Parmense?"
            ]
          },
          {
            "axiom": "Cajun disjointWith PolloAdAstra",
            "CQ": [
              "What is the formal distinction between Cajun and PolloAdAstra classes in the ontology?",
              "Can an instance belong to both Cajun and PolloAdAstra simultaneously?",
              "Which classes are declared disjoint with PolloAdAstra?"
            ]
          },
          {
            "axiom": "Cajun disjointWith Fiorentina",
            "CQ": [
              "What is the formal relationship specified between Cajun and Fiorentina in the ontology?",
              "Is it allowed for an individual to be classified as both Cajun and Fiorentina simultaneously?",
              "Which classes are explicitly defined as incompatible with Fiorentina?"
            ]
          },
          {
            "axiom": "Cajun disjointWith Rosa",
            "CQ": [
              "What logical separation is asserted between Cajun and Rosa within the ontology?",
              "Is it feasible for an instance to belong simultaneously to both Cajun and Rosa?",
              "Which classes are formally incompatible with Rosa according to the ontology?"
            ]
          },
          {
            "axiom": "Cajun disjointWith QuattroFormaggi",
            "CQ": [
              "How are the classes Cajun and QuattroFormaggi distinguished in the ontology?",
              "Is an individual allowed to be classified under both Cajun and QuattroFormaggi simultaneously?",
              "Which classes are specified as disjoint with QuattroFormaggi?"
            ]
          },
          {
            "axiom": "Cajun disjointWith Giardiniera",
            "CQ": [
              "How does the ontology specify the separation between Cajun and Giardiniera?",
              "Is any individual allowed to be classified as both Cajun and Giardiniera?",
              "What are the classes that are stated as mutually exclusive with Giardiniera?"
            ]
          },
          {
            "axiom": "Cajun disjointWith FourSeasons",
            "CQ": [
              "How does the ontology express the relationship between Cajun and FourSeasons pizza types?",
              "Is an individual pizza allowed to belong to both the Cajun and FourSeasons categories simultaneously?",
              "Which classes are specified as disjoint with FourSeasons in the ontology?"
            ]
          },
          {
            "axiom": "Cajun propertyRestrictions [hasTopping some TomatoTopping]",
            "CQ": [
              "Is it required for a Cajun pizza to have at least one topping that is a TomatoTopping?",
              "Does the definition of Cajun ensure the existence of some TomatoTopping among its toppings?",
              "Can a pizza be classified as Cajun if it does not have any TomatoTopping?"
            ]
          },
          {
            "axiom": "Cajun propertyRestrictions [hasTopping some TobascoPepperSauce]",
            "CQ": [
              "Is it necessary for a Cajun pizza to have at least one topping of Tobasco Pepper Sauce?",
              "Does every Cajun pizza include the hasTopping relation with Tobasco Pepper Sauce in at least one instance?",
              "Can a pizza qualify as Cajun if it does not have Tobasco Pepper Sauce as a topping?"
            ]
          },
          {
            "axiom": "Cajun propertyRestrictions [hasTopping only (PrawnsTopping or TobascoPepperSauce or MozzarellaTopping or TomatoTopping or OnionTopping or PeperonataTopping)]",
            "CQ": [
              "Is a Cajun pizza restricted to having only Prawns, Tobasco Pepper Sauce, Mozzarella, Tomato, Onion, or Peperonata as its toppings?",
              "Can any topping other than Prawns, Tobasco Pepper Sauce, Mozzarella, Tomato, Onion, or Peperonata be present on a Cajun pizza?",
              "Does every instance of hasTopping for a Cajun pizza necessarily relate to either Prawns, Tobasco Pepper Sauce, Mozzarella, Tomato, Onion, or Peperonata toppings only?"
            ]
          },
          {
            "axiom": "Cajun propertyRestrictions [hasTopping some MozzarellaTopping]",
            "CQ": [
              "Is it required for Cajun to have at least one MozzarellaTopping as a topping?",
              "Can a pizza be classified as Cajun without having any MozzarellaTopping?",
              "Does every Cajun necessarily include some MozzarellaTopping among its toppings?"
            ]
          },
          {
            "axiom": "Cajun propertyRestrictions [hasTopping some OnionTopping]",
            "CQ": [
              "Is it required that a Cajun pizza has at least one OnionTopping as a topping?",
              "Can a pizza be classified as Cajun if it does not have any OnionTopping among its toppings?",
              "Does the definition of Cajun pizza specify the presence of OnionTopping in its list of toppings?"
            ]
          },
          {
            "axiom": "Cajun propertyRestrictions [hasTopping some PeperonataTopping]",
            "CQ": [
              "Is it required for a Cajun pizza to have at least one topping that is PeperonataTopping?",
              "Can a Cajun pizza exist without containing any PeperonataTopping among its toppings?",
              "Does every instance of Cajun pizza necessarily include PeperonataTopping as one of its toppings?"
            ]
          },
          {
            "axiom": "Cajun propertyRestrictions [hasTopping some PrawnsTopping]",
            "CQ": [
              "Is it required that a Cajun pizza has at least one topping of Prawns?",
              "Can a pizza be classified as Cajun without having any PrawnsTopping?",
              "Does every Cajun pizza necessarily include the hasTopping property linked to PrawnsTopping?"
            ]
          }
        ]
      },
      "Fiorentina": {
        "axiom": {
          "subClassOf": [
            "NamedPizza"
          ],
          "disjointWith": [
            "Mushroom",
            "LaReine",
            "Napoletana",
            "Veneziana",
            "AmericanHot",
            "UnclosedPizza",
            "PrinceCarlo",
            "Capricciosa",
            "FruttiDiMare",
            "Siciliana",
            "Cajun",
            "Margherita",
            "American",
            "SloppyGiuseppe",
            "Caprina",
            "Soho",
            "Parmense",
            "PolloAdAstra",
            "Rosa",
            "QuattroFormaggi",
            "Giardiniera",
            "FourSeasons"
          ],
          "propertyRestrictions": [
            "[hasTopping some TomatoTopping]",
            "[hasTopping only (MozzarellaTopping or GarlicTopping or TomatoTopping or SpinachTopping or OliveTopping or ParmesanTopping)]",
            "[hasTopping some GarlicTopping]",
            "[hasTopping some OliveTopping]",
            "[hasTopping some MozzarellaTopping]",
            "[hasTopping some ParmesanTopping]",
            "[hasTopping some SpinachTopping]"
          ]
        },
        "description": "Fiorentina is defined as a subclass of NamedPizza and is explicitly disjoint with a variety of other specific pizza types, ensuring that no individual pizza can simultaneously be classified as both Fiorentina and any of those listed (e.g., Mushroom, Margherita, FourSeasons). Members of the Fiorentina class are characterized by the following topping constraints: they must include at least one of each of the following toppingsâ€”TomatoTopping, GarlicTopping, OliveTopping, MozzarellaTopping, ParmesanTopping, and SpinachTopping. Additionally, Fiorentina pizzas are restricted to having only the following toppings: MozzarellaTopping, GarlicTopping, TomatoTopping, SpinachTopping, OliveTopping, or ParmesanTopping. This axiomatisation precisely defines Fiorentina pizzas in terms of both required ingredients and clear differentiation from other pizzas.",
        "CQ": [
          {
            "axiom": "Fiorentina subClassOf NamedPizza",
            "CQ": [
              "Is Fiorentina classified as a kind of NamedPizza?",
              "Which pizzas are categorized under NamedPizza, including Fiorentina?",
              "What broader pizza classifications encompass Fiorentina?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith Mushroom",
            "CQ": [
              "What type of logical separation is defined between Fiorentina and Mushroom in the ontology?",
              "Is it allowed for an individual to be classified simultaneously as Fiorentina and Mushroom?",
              "Which classes are specified as mutually exclusive with Mushroom?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith LaReine",
            "CQ": [
              "What is the ontological separation between Fiorentina and LaReine?",
              "Is there an instance that can simultaneously belong to both Fiorentina and LaReine categories?",
              "Which classes are explicitly set as disjoint with Fiorentina in the ontology?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith Napoletana",
            "CQ": [
              "How does the ontology distinguish between Fiorentina and Napoletana pizza classes?",
              "Is there any possibility for an individual to be classified as both Fiorentina and Napoletana?",
              "Which pizza classes are formally specified as disjoint with Napoletana in the ontology?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith Veneziana",
            "CQ": [
              "What is the ontological separation between Fiorentina and Veneziana pizza types?",
              "Can a pizza be classified simultaneously as Fiorentina and Veneziana?",
              "Which classes are logically incompatible with Fiorentina?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith AmericanHot",
            "CQ": [
              "What is the asserted logical relationship between Fiorentina and AmericanHot pizzas in the ontology?",
              "Is there any instance that can simultaneously belong to both the Fiorentina and AmericanHot pizza categories?",
              "Which classes are explicitly defined as disjoint with Fiorentina in this ontology?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith UnclosedPizza",
            "CQ": [
              "How are Fiorentina and UnclosedPizza differentiated in the ontology?",
              "Could a single pizza instance simultaneously belong to both Fiorentina and UnclosedPizza categories?",
              "Which pizza types are formally specified as disjoint from UnclosedPizza?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith PrinceCarlo",
            "CQ": [
              "What explicit ontological difference separates Fiorentina and PrinceCarlo?",
              "Is there any instance that could belong to both Fiorentina and PrinceCarlo classes simultaneously?",
              "Which other classes are formally disjoint with PrinceCarlo according to the ontology?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith Capricciosa",
            "CQ": [
              "How are Fiorentina and Capricciosa distinguished within the ontology?",
              "Is any pizza instance allowed to belong to both Fiorentina and Capricciosa classes?",
              "Which pizza types are explicitly set as incompatible with Capricciosa?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith FruttiDiMare",
            "CQ": [
              "How does the ontology delineate the separation between Fiorentina and FruttiDiMare?",
              "Is membership in both Fiorentina and FruttiDiMare classes allowed for a single pizza instance?",
              "Which classes are defined as mutually exclusive with Fiorentina in the ontology structure?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith Siciliana",
            "CQ": [
              "How is the class Fiorentina characterized in relation to Siciliana within the ontology?",
              "Is it allowed for a pizza to be classified as both Fiorentina and Siciliana simultaneously?",
              "Which pizza types are specified as mutually exclusive with Siciliana?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith Cajun",
            "CQ": [
              "How does the ontology specify the separation between Fiorentina and Cajun?",
              "Is any individual allowed to be an instance of both Fiorentina and Cajun simultaneously?",
              "Which classes are defined as mutually exclusive with Cajun in the ontology?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith Margherita",
            "CQ": [
              "What kind of separation is defined between Fiorentina and Margherita in the ontology?",
              "Is there any instance that can simultaneously belong to both Fiorentina and Margherita pizza classes?",
              "Which pizza types are specified as disjoint with Margherita?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith American",
            "CQ": [
              "Are there any circumstances where something can be both Fiorentina and American according to the ontology?",
              "Which classes are explicitly specified as disjoint with Fiorentina?",
              "What is the ontological distinction established between Fiorentina and American?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith SloppyGiuseppe",
            "CQ": [
              "What kind of formal separation is defined between Fiorentina and SloppyGiuseppe?",
              "Is there any way an entity can be classified as both Fiorentina and SloppyGiuseppe?",
              "Which pizza types, apart from SloppyGiuseppe, are set as disjoint with Fiorentina?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith Caprina",
            "CQ": [
              "How does the ontology represent the exclusivity between Fiorentina and Caprina pizzas?",
              "Is any pizza instance allowed to be classified as both Fiorentina and Caprina?",
              "What pizza types are formally stated as incompatible with Fiorentina in the ontology?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith Soho",
            "CQ": [
              "Are Fiorentina and Soho defined as mutually exclusive pizza types in the ontology?",
              "Can an individual pizza be classified as both Fiorentina and Soho?",
              "Which pizza categories are stated to be disjoint with Soho?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith Parmense",
            "CQ": [
              "What is the defined separation between Fiorentina and Parmense within the ontology?",
              "Is there any scenario where an individual can be classified as both Fiorentina and Parmense?",
              "Which classes are asserted to be disjoint with Fiorentina?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith PolloAdAstra",
            "CQ": [
              "What logical separation is established between Fiorentina and PolloAdAstra within the ontology?",
              "Is any pizza instance allowed to belong to both the Fiorentina and PolloAdAstra categories?",
              "Which other pizza types are explicitly specified as being disjoint with PolloAdAstra?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith Rosa",
            "CQ": [
              "How does the ontology specify the difference between Fiorentina and Rosa?",
              "Is there an instance that can be both Fiorentina and Rosa?",
              "What classes are explicitly stated as disjoint with Rosa?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith QuattroFormaggi",
            "CQ": [
              "How does the ontology specify the connection or separation between Fiorentina and QuattroFormaggi pizzas?",
              "Is an individual pizza instance allowed to be classified as both Fiorentina and QuattroFormaggi?",
              "Which pizza types in the ontology are declared to be mutually exclusive with Fiorentina?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith Giardiniera",
            "CQ": [
              "What is the formal connection specified between Fiorentina and Giardiniera in the ontology?",
              "Can a pizza instance be classified as both Fiorentina and Giardiniera simultaneously?",
              "Which classes are defined as mutually exclusive with Fiorentina?"
            ]
          },
          {
            "axiom": "Fiorentina disjointWith FourSeasons",
            "CQ": [
              "What is the logical separation between Fiorentina and FourSeasons within the ontology?",
              "Can a pizza be classified as both Fiorentina and FourSeasons simultaneously?",
              "Which pizza types are defined as disjoint with FourSeasons?"
            ]
          },
          {
            "axiom": "Fiorentina propertyRestrictions [hasTopping some TomatoTopping]",
            "CQ": [
              "Is it necessary for a Fiorentina to have at least one topping that is a TomatoTopping?",
              "Can a Fiorentina exist without any TomatoTopping among its toppings?",
              "Does the definition of Fiorentina require the presence of TomatoTopping as one of its toppings?"
            ]
          },
          {
            "axiom": "Fiorentina propertyRestrictions [hasTopping only (MozzarellaTopping or GarlicTopping or TomatoTopping or SpinachTopping or OliveTopping or ParmesanTopping)]",
            "CQ": [
              "Is every topping on a Fiorentina pizza required to be either Mozzarella, Garlic, Tomato, Spinach, Olive, or Parmesan?",
              "Can a Fiorentina pizza include a topping that is not among Mozzarella, Garlic, Tomato, Spinach, Olive, or Parmesan?",
              "Does the ontology restrict Fiorentina to have toppings exclusively from the set: Mozzarella, Garlic, Tomato, Spinach, Olive, and Parmesan?"
            ]
          },
          {
            "axiom": "Fiorentina propertyRestrictions [hasTopping some GarlicTopping]",
            "CQ": [
              "Is it required that every Fiorentina pizza includes at least one GarlicTopping as a topping?",
              "Can a Fiorentina pizza be classified as such without having any GarlicTopping?",
              "Must the property 'hasTopping' for Fiorentina relate to GarlicTopping in all instances?"
            ]
          },
          {
            "axiom": "Fiorentina propertyRestrictions [hasTopping some OliveTopping]",
            "CQ": [
              "Must every Fiorentina pizza have at least one OliveTopping as a topping?",
              "Is it required for Fiorentina pizzas to include OliveTopping among their toppings?",
              "Can a pizza be classified as Fiorentina if it lacks OliveTopping entirely?"
            ]
          },
          {
            "axiom": "Fiorentina propertyRestrictions [hasTopping some MozzarellaTopping]",
            "CQ": [
              "Is it required that a Fiorentina pizza has at least one Mozzarella topping?",
              "Must every instance of Fiorentina include Mozzarella as a topping?",
              "Is the presence of MozzarellaTopping a necessary condition for a pizza to be classified as Fiorentina?"
            ]
          },
          {
            "axiom": "Fiorentina propertyRestrictions [hasTopping some ParmesanTopping]",
            "CQ": [
              "Is it required for Fiorentina to have at least one topping that is Parmesan?",
              "Can there be a Fiorentina without any ParmesanTopping applied as a topping?",
              "Does every Fiorentina possess the property 'hasTopping' that references at least one instance of ParmesanTopping?"
            ]
          },
          {
            "axiom": "Fiorentina propertyRestrictions [hasTopping some SpinachTopping]",
            "CQ": [
              "Must every Fiorentina pizza contain at least one SpinachTopping?",
              "Is SpinachTopping a required topping for every Fiorentina pizza?",
              "Can a pizza be classified as Fiorentina if it does not have any SpinachTopping?"
            ]
          }
        ]
      },
      "Giardiniera": {
        "axiom": {
          "subClassOf": [
            "NamedPizza"
          ],
          "disjointWith": [
            "Mushroom",
            "LaReine",
            "Napoletana",
            "Veneziana",
            "AmericanHot",
            "UnclosedPizza",
            "PrinceCarlo",
            "Capricciosa",
            "FruttiDiMare",
            "Siciliana",
            "Cajun",
            "Margherita",
            "American",
            "SloppyGiuseppe",
            "Caprina",
            "Soho",
            "Parmense",
            "PolloAdAstra",
            "Fiorentina",
            "Rosa",
            "QuattroFormaggi",
            "FourSeasons"
          ],
          "propertyRestrictions": [
            "[hasTopping some MushroomTopping]",
            "[hasTopping some TomatoTopping]",
            "[hasTopping only (LeekTopping or MozzarellaTopping or TomatoTopping or PetitPoisTopping or PeperonataTopping or OliveTopping or MushroomTopping or SlicedTomatoTopping)]",
            "[hasTopping some OliveTopping]",
            "[hasTopping some MozzarellaTopping]",
            "[hasTopping some SlicedTomatoTopping]",
            "[hasTopping some PeperonataTopping]",
            "[hasTopping some PetitPoisTopping]",
            "[hasTopping some LeekTopping]"
          ]
        },
        "description": "Giardiniera is defined as a subclass of NamedPizza, and is explicitly disjoint from several other pizza classes such as Mushroom, LaReine, Napoletana, and othersâ€”ensuring that no pizza can simultaneously be classified as Giardiniera and any of these classes. Members of Giardiniera are characterized by a combination of specific toppings: they must contain at least some MushroomTopping, TomatoTopping, OliveTopping, MozzarellaTopping, SlicedTomatoTopping, PeperonataTopping, PetitPoisTopping, and LeekTopping. Furthermore, Giardiniera pizzas are strictly limited to having toppings only from the set: LeekTopping, MozzarellaTopping, TomatoTopping, PetitPoisTopping, PeperonataTopping, OliveTopping, MushroomTopping, and SlicedTomatoTopping. This formalization ensures that any pizza classified as Giardiniera has an exclusive and characteristic combination of the specified toppings and no others.",
        "CQ": [
          {
            "axiom": "Giardiniera subClassOf NamedPizza",
            "CQ": [
              "Is Giardiniera categorized as a specific kind under NamedPizza?",
              "What pizza varieties are considered subclasses of NamedPizza such as Giardiniera?",
              "Which more general categories include Giardiniera within their classification?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith Mushroom",
            "CQ": [
              "What formal separation exists between Giardiniera and Mushroom in the ontology?",
              "Is there any instance that can simultaneously belong to both Giardiniera and Mushroom classes?",
              "Which classes are specified as mutually exclusive with Mushroom?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith LaReine",
            "CQ": [
              "How does the ontology represent the distinction between Giardiniera and LaReine?",
              "Is any pizza classified as both Giardiniera and LaReine?",
              "Which pizza types are marked as disjoint with Giardiniera?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith Napoletana",
            "CQ": [
              "How does the ontology define the separation between Giardiniera and Napoletana?",
              "Is it allowed for a pizza to be classified as both Giardiniera and Napoletana?",
              "What other classes are assigned as disjoint with Napoletana in the ontology?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith Veneziana",
            "CQ": [
              "How are Giardiniera and Veneziana classified with respect to each other in the ontology?",
              "Is it allowed for a pizza to be both Giardiniera and Veneziana?",
              "Which pizza types are explicitly stated as incompatible with Veneziana?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith AmericanHot",
            "CQ": [
              "How are Giardiniera and AmericanHot represented in terms of mutual exclusivity within the ontology?",
              "Can a pizza instance be classified as both Giardiniera and AmericanHot?",
              "Which pizza types are declared as disjoint with Giardiniera?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith UnclosedPizza",
            "CQ": [
              "How does the ontology represent the distinction between Giardiniera and UnclosedPizza?",
              "Is there any instance that can be classified as both Giardiniera and UnclosedPizza?",
              "Which classes are formally specified as disjoint with Giardiniera?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith PrinceCarlo",
            "CQ": [
              "What is the ontological separation between Giardiniera and PrinceCarlo?",
              "Can an individual instance simultaneously be classified as both Giardiniera and PrinceCarlo?",
              "Which classes are formally specified as disjoint with PrinceCarlo in the ontology?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith Capricciosa",
            "CQ": [
              "What is the ontological relationship between Giardiniera and Capricciosa?",
              "Could an individual pizza instance be classified as both Giardiniera and Capricciosa?",
              "Which pizza types are formally defined as disjoint with Capricciosa in the ontology?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith FruttiDiMare",
            "CQ": [
              "What logical separation is defined between Giardiniera and FruttiDiMare?",
              "Is any pizza instance allowed to be classified as both Giardiniera and FruttiDiMare?",
              "Which classes are stated to be disjoint with FruttiDiMare in the ontology?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith Siciliana",
            "CQ": [
              "What is the nature of the disjointness between Giardiniera and Siciliana?",
              "Is there any individual that can simultaneously be classified as both Giardiniera and Siciliana?",
              "Which classes are defined as mutually exclusive with Siciliana in the ontology?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith Cajun",
            "CQ": [
              "How does the ontology represent the exclusiveness between Giardiniera and Cajun?",
              "Is there any instance that can simultaneously belong to both Giardiniera and Cajun categories?",
              "Which classes are formally specified as disjoint with Cajun?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith Margherita",
            "CQ": [
              "What is the formal distinction between Giardiniera and Margherita within the ontology?",
              "Could any individual instance be classified as both Giardiniera and Margherita simultaneously?",
              "Which classes are specified as disjoint with Margherita according to the ontology?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith American",
            "CQ": [
              "How does the ontology formally distinguish between Giardiniera and American pizzas?",
              "Is any pizza instance allowed to belong to both Giardiniera and American categories?",
              "Which classes are identified as disjoint with Giardiniera in the ontology?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith SloppyGiuseppe",
            "CQ": [
              "How does the ontology formally distinguish between Giardiniera and SloppyGiuseppe?",
              "Is it allowable for a pizza to be classified as both Giardiniera and SloppyGiuseppe?",
              "Which pizza types are defined as mutually exclusive with Giardiniera?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith Caprina",
            "CQ": [
              "How does the ontology distinguish between Giardiniera and Caprina?",
              "Is there any circumstance under which a pizza could be classified as both Giardiniera and Caprina?",
              "Which classes are specified as disjoint with Caprina within the ontology?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith Soho",
            "CQ": [
              "How is Giardiniera classically separated from Soho within the ontology?",
              "Is there any instance that belongs to both Giardiniera and Soho categories?",
              "Which classes are specified as mutually exclusive with Soho?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith Parmense",
            "CQ": [
              "How does the ontology represent the connection between Giardiniera and Parmense?",
              "Is there any scenario where a pizza can be classified as both Giardiniera and Parmense?",
              "Which pizza types are specifically defined as disjoint with Parmense?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith PolloAdAstra",
            "CQ": [
              "What is the logical relationship specified between Giardiniera and PolloAdAstra in the ontology?",
              "Is it allowed for a pizza to belong to both the Giardiniera and PolloAdAstra categories?",
              "Which classes are declared as disjoint with PolloAdAstra?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith Fiorentina",
            "CQ": [
              "How does the ontology differentiate between Giardiniera and Fiorentina?",
              "Is there any instance that can be classified as both Giardiniera and Fiorentina?",
              "Which pizza types are declared as mutually exclusive with Fiorentina?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith Rosa",
            "CQ": [
              "What logical separation is specified between Giardiniera and Rosa within the ontology?",
              "Is there any instance that could belong to both Giardiniera and Rosa simultaneously?",
              "Which classes are explicitly stated as disjoint with Giardiniera?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith QuattroFormaggi",
            "CQ": [
              "What is the ontological separation defined between Giardiniera and QuattroFormaggi?",
              "Is there any individual that can simultaneously belong to both Giardiniera and QuattroFormaggi classes?",
              "Which classes are specified as being incompatible with Giardiniera in the ontology?"
            ]
          },
          {
            "axiom": "Giardiniera disjointWith FourSeasons",
            "CQ": [
              "What is the ontological separation between Giardiniera and FourSeasons pizza varieties?",
              "Can a pizza instance be classified as both Giardiniera and FourSeasons?",
              "Which classes are defined as disjoint with Giardiniera apart from FourSeasons?"
            ]
          },
          {
            "axiom": "Giardiniera propertyRestrictions [hasTopping some MushroomTopping]",
            "CQ": [
              "Is every Giardiniera required to have at least one topping that is a MushroomTopping?",
              "Does the presence of MushroomTopping on a pizza qualify it as a Giardiniera according to the topping restriction?",
              "Can a Giardiniera exist without any MushroomTopping?"
            ]
          },
          {
            "axiom": "Giardiniera propertyRestrictions [hasTopping some TomatoTopping]",
            "CQ": [
              "Is it required for a Giardiniera to have at least one topping that is a TomatoTopping?",
              "Can an instance of Giardiniera exist without possessing the hasTopping relation to a TomatoTopping?",
              "Does every Giardiniera necessarily include TomatoTopping among its toppings?"
            ]
          },
          {
            "axiom": "Giardiniera propertyRestrictions [hasTopping only (LeekTopping or MozzarellaTopping or TomatoTopping or PetitPoisTopping or PeperonataTopping or OliveTopping or MushroomTopping or SlicedTomatoTopping)]",
            "CQ": [
              "Are Giardiniera pizzas permitted to have any toppings besides Leek, Mozzarella, Tomato, Petit Pois, Peperonata, Olive, Mushroom, or Sliced Tomato?",
              "Must every topping present on a Giardiniera pizza be included among Leek, Mozzarella, Tomato, Petit Pois, Peperonata, Olive, Mushroom, or Sliced Tomato?",
              "If a Giardiniera pizza contains a topping not listed among these eight, does it still satisfy the definition of Giardiniera?"
            ]
          },
          {
            "axiom": "Giardiniera propertyRestrictions [hasTopping some OliveTopping]",
            "CQ": [
              "Must a Giardiniera have at least one topping that is an OliveTopping?",
              "Is it possible for a Giardiniera to be classified as such without having any OliveTopping?",
              "Does the presence of OliveTopping qualify a pizza as Giardiniera, regardless of its other toppings?"
            ]
          },
          {
            "axiom": "Giardiniera propertyRestrictions [hasTopping some MozzarellaTopping]",
            "CQ": [
              "Is it required that a Giardiniera pizza has at least one topping of Mozzarella?",
              "Can a Giardiniera exist without any MozzarellaTopping present?",
              "Must a Giardiniera pizza always include MozzarellaTopping as one of its toppings?"
            ]
          },
          {
            "axiom": "Giardiniera propertyRestrictions [hasTopping some SlicedTomatoTopping]",
            "CQ": [
              "Is it required that a Giardiniera pizza includes at least one Sliced Tomato topping?",
              "Can a pizza be classified as Giardiniera if it does not have any Sliced Tomato topping?",
              "Does the presence of a Sliced Tomato topping suffice for a pizza to fulfill the Giardiniera topping requirement?"
            ]
          },
          {
            "axiom": "Giardiniera propertyRestrictions [hasTopping some PeperonataTopping]",
            "CQ": [
              "Is it required for a Giardiniera to have at least one topping that is of type PeperonataTopping?",
              "Does Giardiniera necessarily include the property 'hasTopping' with PeperonataTopping in its definition?",
              "Can an individual classified as Giardiniera exist without the 'hasTopping' relation to PeperonataTopping?"
            ]
          },
          {
            "axiom": "Giardiniera propertyRestrictions [hasTopping some PetitPoisTopping]",
            "CQ": [
              "Is it necessary for a Giardiniera to have at least one topping of Petit Pois?",
              "Does every instance of Giardiniera include the 'hasTopping' relationship with Petit Pois Topping?",
              "Can a Giardiniera pizza exist without any Petit Pois Topping as one of its toppings?"
            ]
          },
          {
            "axiom": "Giardiniera propertyRestrictions [hasTopping some LeekTopping]",
            "CQ": [
              "Is it necessary for Giardiniera to have at least one topping that is a LeekTopping?",
              "Can a pizza be classified as Giardiniera if it lacks LeekTopping as one of its toppings?",
              "Does the existence of LeekTopping as a topping play a required role in identifying a pizza as Giardiniera?"
            ]
          }
        ]
      },
      "Mushroom": {
        "axiom": {
          "subClassOf": [
            "NamedPizza"
          ],
          "disjointWith": [
            "LaReine",
            "Napoletana",
            "Veneziana",
            "AmericanHot",
            "UnclosedPizza",
            "PrinceCarlo",
            "Capricciosa",
            "FruttiDiMare",
            "Siciliana",
            "Cajun",
            "Margherita",
            "American",
            "SloppyGiuseppe",
            "Caprina",
            "Soho",
            "Parmense",
            "PolloAdAstra",
            "Fiorentina",
            "Rosa",
            "QuattroFormaggi",
            "Giardiniera",
            "FourSeasons"
          ],
          "propertyRestrictions": [
            "[hasTopping some MushroomTopping]",
            "[hasTopping only (MozzarellaTopping or TomatoTopping or MushroomTopping)]",
            "[hasTopping some TomatoTopping]",
            "[hasTopping some MozzarellaTopping]"
          ]
        },
        "description": "Mushroom is defined as a subclass of NamedPizza, and it is disjoint from a wide range of other specific pizza types, ensuring that an individual cannot simultaneously belong to the Mushroom class and any of those listed classes. Members of the Mushroom class are required to have MushroomTopping, TomatoTopping, and MozzarellaTopping among their toppings. Additionally, they may only have MozzarellaTopping, TomatoTopping, or MushroomTopping as toppings, and no others. This formalization ensures that Mushroom pizzas are uniquely characterized by the exclusive combination of these three toppings.",
        "CQ": [
          {
            "axiom": "Mushroom subClassOf NamedPizza",
            "CQ": [
              "Is Mushroom classified as a more specific type of NamedPizza?",
              "Which specific varieties fall under the class NamedPizza, such as Mushroom?",
              "What higher-level categories does Mushroom belong to within the pizza ontology?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith LaReine",
            "CQ": [
              "What logical separation is present between Mushroom and LaReine classes in the ontology?",
              "Is it valid for a pizza to belong to both Mushroom and LaReine categories simultaneously?",
              "Which other pizza classes are stated to be disjoint with LaReine?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith Napoletana",
            "CQ": [
              "What type of logical separation is defined between Mushroom and Napoletana in the ontology?",
              "Is an item permitted to be an instance of both Mushroom and Napoletana classes?",
              "Which other classes are specified as mutually exclusive with Napoletana?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith Veneziana",
            "CQ": [
              "How does the ontology specify the exclusivity between Mushroom and Veneziana pizzas?",
              "Is any pizza instance allowed to belong to both the Mushroom and Veneziana categories?",
              "Which pizza types are formally defined as disjoint with Mushroom according to the ontology?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith AmericanHot",
            "CQ": [
              "What ontological constraint separates Mushroom and AmericanHot pizzas?",
              "Is there any instance that can belong to both Mushroom and AmericanHot classes simultaneously?",
              "Which classes are specified to be incompatible with AmericanHot in the ontology?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith UnclosedPizza",
            "CQ": [
              "How does the ontology represent the mutual exclusivity between Mushroom and UnclosedPizza?",
              "Is any item allowed to be classified as both Mushroom and UnclosedPizza?",
              "Which classes, besides UnclosedPizza, are formally declared to be incompatible with Mushroom?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith PrinceCarlo",
            "CQ": [
              "What is the ontological separation between Mushroom and PrinceCarlo?",
              "Is it allowed for an individual to be classified as both Mushroom and PrinceCarlo simultaneously?",
              "Which other classes in the ontology are declared as disjoint with PrinceCarlo?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith Capricciosa",
            "CQ": [
              "How does the ontology differentiate between Mushroom and Capricciosa pizzas?",
              "Is any pizza classified as both Mushroom and Capricciosa according to the ontology?",
              "Which classes are specified as being mutually exclusive with Capricciosa?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith FruttiDiMare",
            "CQ": [
              "How does the ontology represent the incompatibility between Mushroom and FruttiDiMare?",
              "Is any pizza allowed to be classified as both Mushroom and FruttiDiMare?",
              "Which pizza categories are declared as disjoint with Mushroom?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith Siciliana",
            "CQ": [
              "How are Mushroom and Siciliana represented as mutually exclusive in the ontology?",
              "Is there an instance that can simultaneously belong to both Mushroom and Siciliana classes?",
              "Which classes are specified as disjoint with Siciliana?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith Cajun",
            "CQ": [
              "What formal separation is asserted between Mushroom and Cajun in the ontology?",
              "Is it allowed for an entity to belong to both the Mushroom and Cajun categories simultaneously?",
              "Which classes are explicitly specified as being disjoint with Cajun?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith Margherita",
            "CQ": [
              "How is the separation between Mushroom and Margherita pizzas represented in the ontology?",
              "Is any pizza instance allowed to be both Mushroom and Margherita according to the ontology?",
              "Which classes are declared disjoint with Margherita within the pizza ontology?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith American",
            "CQ": [
              "What logical constraint separates Mushroom from American in the ontology?",
              "Is it allowed for an entity to belong to both Mushroom and American categories?",
              "Which other classes are specified as disjoint with Mushroom?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith SloppyGiuseppe",
            "CQ": [
              "What formal separation exists between Mushroom and SloppyGiuseppe in the ontology?",
              "Is there any instance that can simultaneously belong to both Mushroom and SloppyGiuseppe?",
              "Which classes are explicitly marked as incompatible with Mushroom?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith Caprina",
            "CQ": [
              "What logical separation is asserted between Mushroom and Caprina within the ontology?",
              "Is it allowable for an entity to be classified as both Mushroom and Caprina simultaneously?",
              "Which classes are defined as mutually exclusive with Caprina?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith Soho",
            "CQ": [
              "Is there a logical constraint preventing anything from being both Mushroom and Soho?",
              "Which classes are explicitly specified as disjoint with Mushroom?",
              "Does the ontology prohibit overlap between the classes Mushroom and Soho?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith Parmense",
            "CQ": [
              "How does the ontology define the separation between Mushroom and Parmense?",
              "Is it allowed for an entity to be classified as both Mushroom and Parmense?",
              "What classes are stated as explicitly non-overlapping with Parmense?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith PolloAdAstra",
            "CQ": [
              "What logical exclusion exists between Mushroom and PolloAdAstra in the ontology?",
              "Is there any instance that can be classified as both Mushroom and PolloAdAstra?",
              "Which classes are explicitly asserted to be disjoint with Mushroom?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith Fiorentina",
            "CQ": [
              "What logical separation is defined between Mushroom and Fiorentina in the ontology?",
              "Is it allowable for an entity to be classified as both Mushroom and Fiorentina?",
              "Which classes are formally declared as disjoint with Fiorentina?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith Rosa",
            "CQ": [
              "What logical separation is asserted between Mushroom and Rosa within the ontology?",
              "Is there any instance classified simultaneously as Mushroom and Rosa?",
              "Which classes does the ontology specify as disjoint with Rosa?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith QuattroFormaggi",
            "CQ": [
              "What ontological separation is asserted between Mushroom and QuattroFormaggi classes?",
              "Is any entity permitted to belong to both the Mushroom and QuattroFormaggi categories simultaneously?",
              "Which other classes are defined as disjoint with QuattroFormaggi within the ontology?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith Giardiniera",
            "CQ": [
              "What logical separation is modeled between Mushroom and Giardiniera classes?",
              "Is there any entity that can simultaneously belong to both Mushroom and Giardiniera categories?",
              "Which classes are specifically defined as disjoint with Giardiniera in the ontology?"
            ]
          },
          {
            "axiom": "Mushroom disjointWith FourSeasons",
            "CQ": [
              "How does the ontology specify the incompatibility between Mushroom and FourSeasons?",
              "Is there any instance that can simultaneously belong to both Mushroom and FourSeasons categories?",
              "What other pizza types are identified as disjoint from Mushroom within the ontology?"
            ]
          },
          {
            "axiom": "Mushroom propertyRestrictions [hasTopping some MushroomTopping]",
            "CQ": [
              "Is it required that a Mushroom pizza has at least one topping of type MushroomTopping?",
              "Can a Mushroom pizza exist without having any MushroomTopping as a topping?",
              "Does every Mushroom pizza have the hasTopping property relating it to some MushroomTopping?"
            ]
          },
          {
            "axiom": "Mushroom propertyRestrictions [hasTopping only (MozzarellaTopping or TomatoTopping or MushroomTopping)]",
            "CQ": [
              "Are mushrooms allowed to have toppings other than Mozzarella, Tomato, or Mushroom?",
              "Is it required that every topping on a Mushroom item must be Mozzarella, Tomato, or Mushroom?",
              "Does the definition of Mushroom exclude any toppings not listed as Mozzarella, Tomato, or Mushroom?"
            ]
          },
          {
            "axiom": "Mushroom propertyRestrictions [hasTopping some TomatoTopping]",
            "CQ": [
              "Is it required for Mushroom to have at least one TomatoTopping as a topping?",
              "Can a Mushroom exist without any TomatoTopping among its toppings?",
              "Does the definition of Mushroom always imply the presence of TomatoTopping as a topping?"
            ]
          },
          {
            "axiom": "Mushroom propertyRestrictions [hasTopping some MozzarellaTopping]",
            "CQ": [
              "Is it necessary for a Mushroom pizza to have at least one Mozzarella topping?",
              "Must every Mushroom pizza include the 'hasTopping' property with MozzarellaTopping as a value?",
              "Can a Mushroom pizza exist without any Mozzarella topping?"
            ]
          }
        ]
      },
      "PolloAdAstra": {
        "axiom": {
          "subClassOf": [
            "NamedPizza"
          ],
          "disjointWith": [
            "Mushroom",
            "LaReine",
            "Napoletana",
            "Veneziana",
            "AmericanHot",
            "UnclosedPizza",
            "PrinceCarlo",
            "Capricciosa",
            "FruttiDiMare",
            "Siciliana",
            "Cajun",
            "Margherita",
            "American",
            "SloppyGiuseppe",
            "Caprina",
            "Soho",
            "Parmense",
            "Fiorentina",
            "Rosa",
            "QuattroFormaggi",
            "Giardiniera",
            "FourSeasons"
          ],
          "propertyRestrictions": [
            "[hasTopping some RedOnionTopping]",
            "[hasTopping some CajunSpiceTopping]",
            "[hasTopping some TomatoTopping]",
            "[hasTopping some GarlicTopping]",
            "[hasTopping some SweetPepperTopping]",
            "[hasTopping only (ChickenTopping or MozzarellaTopping or GarlicTopping or TomatoTopping or RedOnionTopping or CajunSpiceTopping or SweetPepperTopping)]",
            "[hasTopping some MozzarellaTopping]",
            "[hasTopping some ChickenTopping]"
          ]
        },
        "description": "PolloAdAstra is defined as a subclass of NamedPizza and is explicitly disjoint with other specified pizzas, ensuring that no individual pizza can simultaneously be an instance of PolloAdAstra and any of the listed alternative named pizzas. Members of this class must have at least one of each of the following toppings: Red Onion, Cajun Spice, Tomato, Garlic, Sweet Pepper, Mozzarella, and Chicken. Furthermore, the only permissible toppings are Chicken, Mozzarella, Garlic, Tomato, Red Onion, Cajun Spice, and Sweet Pepper; no other toppings are allowed. This formalization provides a precise specification of PolloAdAstra as a distinct pizza type characterized by its unique and restricted combination of toppings.",
        "CQ": [
          {
            "axiom": "PolloAdAstra subClassOf NamedPizza",
            "CQ": [
              "Does PolloAdAstra fall under the general category of NamedPizza?",
              "Which specific kinds of pizzas are recognized as subclasses of NamedPizza, such as PolloAdAstra?",
              "What broader classifications include PolloAdAstra as a member?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith Mushroom",
            "CQ": [
              "What logical separation is defined between PolloAdAstra and Mushroom in the ontology?",
              "Is it allowed for an entity to be classified as both PolloAdAstra and Mushroom?",
              "Which classes are formally stated to be disjoint with Mushroom?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith LaReine",
            "CQ": [
              "What is the explicit ontological separation between PolloAdAstra and LaReine?",
              "Is any pizza instance permitted to belong to both the PolloAdAstra and LaReine categories?",
              "Which pizza types are formally specified as disjoint with LaReine within the ontology?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith Napoletana",
            "CQ": [
              "What logical separation exists between PolloAdAstra and Napoletana within the ontology?",
              "Is any entity allowed to be classified as both PolloAdAstra and Napoletana?",
              "Which classes are explicitly marked as disjoint with PolloAdAstra?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith Veneziana",
            "CQ": [
              "How does the ontology characterize the separation between PolloAdAstra and Veneziana?",
              "Is there any scenario where a pizza can be classified as both PolloAdAstra and Veneziana?",
              "Which classes are explicitly modeled as disjoint with PolloAdAstra?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith AmericanHot",
            "CQ": [
              "How does the ontology differentiate between PolloAdAstra and AmericanHot as distinct pizza types?",
              "Is any pizza instance allowed to belong to both PolloAdAstra and AmericanHot classes simultaneously?",
              "Which classes are declared as disjoint with AmericanHot in the ontology?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith UnclosedPizza",
            "CQ": [
              "How does the ontology represent the mutual exclusivity between PolloAdAstra and UnclosedPizza?",
              "Is there any instance that can be classified as both PolloAdAstra and UnclosedPizza?",
              "What other pizza categories are specified as disjoint with UnclosedPizza?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith PrinceCarlo",
            "CQ": [
              "What logical separation is defined between PolloAdAstra and PrinceCarlo in the ontology?",
              "Is there any instance that can belong to both PolloAdAstra and PrinceCarlo classes simultaneously?",
              "Which classes are explicitly stated as disjoint with PrinceCarlo within the ontology?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith Capricciosa",
            "CQ": [
              "What ontology restriction is imposed between PolloAdAstra and Capricciosa?",
              "Is any pizza instance permitted to belong to both PolloAdAstra and Capricciosa categories?",
              "Which classes are asserted as disjoint with Capricciosa in the ontology?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith FruttiDiMare",
            "CQ": [
              "What is the formal disjointness assertion defined between PolloAdAstra and FruttiDiMare in the ontology?",
              "Is it allowed for a single pizza to belong to both PolloAdAstra and FruttiDiMare categories simultaneously?",
              "Which pizza classes are established as incompatible with FruttiDiMare?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith Siciliana",
            "CQ": [
              "What is the ontological separation between PolloAdAstra and Siciliana?",
              "Can any pizza instance simultaneously belong to both PolloAdAstra and Siciliana classes?",
              "Which pizza types are defined as disjoint from Siciliana within the ontology?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith Cajun",
            "CQ": [
              "How is the incompatibility between PolloAdAstra and Cajun pizzas represented in the ontology?",
              "Can any instance be classified simultaneously as both PolloAdAstra and Cajun?",
              "What other pizza types, besides Cajun, are formally declared as disjoint with PolloAdAstra?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith Margherita",
            "CQ": [
              "What is the explicit logical separation between PolloAdAstra and Margherita?",
              "Can any pizza be classified as both PolloAdAstra and Margherita?",
              "Which pizza types are formally stated as disjoint with Margherita?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith American",
            "CQ": [
              "How does the ontology specify the separation between PolloAdAstra and American?",
              "Is there any pizza classified as both PolloAdAstra and American?",
              "Which pizza types are defined as mutually exclusive with American?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith SloppyGiuseppe",
            "CQ": [
              "How does the ontology distinguish PolloAdAstra from SloppyGiuseppe?",
              "Is any entity permitted to belong to both PolloAdAstra and SloppyGiuseppe classes?",
              "Which classes are defined as disjoint with SloppyGiuseppe?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith Caprina",
            "CQ": [
              "How are PolloAdAstra and Caprina characterized with respect to each other in the ontology?",
              "Is there any pizza that can belong to both PolloAdAstra and Caprina classes simultaneously?",
              "Which classes are specified as being disjoint with PolloAdAstra?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith Soho",
            "CQ": [
              "What ontological separation is defined between PolloAdAstra and Soho?",
              "Is there any scenario where a pizza can be classified as both PolloAdAstra and Soho?",
              "Which other named pizzas are formally declared as disjoint with Soho?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith Parmense",
            "CQ": [
              "Are PolloAdAstra and Parmense defined as mutually exclusive pizza types in the ontology?",
              "Is there any instance that can be classified under both PolloAdAstra and Parmense?",
              "Which classes are specified to be disjoint with Parmense?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith Fiorentina",
            "CQ": [
              "What ontological differentiation is asserted between PolloAdAstra and Fiorentina?",
              "Is there any pizza that can simultaneously belong to both PolloAdAstra and Fiorentina categories?",
              "Which pizza types are formally specified as disjoint with Fiorentina?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith Rosa",
            "CQ": [
              "What is the logical separation between PolloAdAstra and Rosa in the ontology?",
              "Can any individual be classified as both PolloAdAstra and Rosa?",
              "Which classes are formally defined as disjoint with PolloAdAstra?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith QuattroFormaggi",
            "CQ": [
              "What distinguishes PolloAdAstra from QuattroFormaggi according to the ontology?",
              "Can an instance belong to both PolloAdAstra and QuattroFormaggi classes?",
              "Which classes are asserted as disjoint with QuattroFormaggi in the ontology?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith Giardiniera",
            "CQ": [
              "What ontological constraint separates PolloAdAstra from Giardiniera?",
              "Is there any instance that can simultaneously be classified as both PolloAdAstra and Giardiniera?",
              "Which classes are defined as mutually exclusive with PolloAdAstra in the ontology?"
            ]
          },
          {
            "axiom": "PolloAdAstra disjointWith FourSeasons",
            "CQ": [
              "How are PolloAdAstra and FourSeasons categorized in relation to each other within the ontology?",
              "Can an individual pizza instance be classified as both PolloAdAstra and FourSeasons simultaneously?",
              "Which pizza types are defined as disjoint from PolloAdAstra in the ontology?"
            ]
          },
          {
            "axiom": "PolloAdAstra propertyRestrictions [hasTopping some RedOnionTopping]",
            "CQ": [
              "Must every PolloAdAstra pizza have at least one RedOnionTopping as a topping?",
              "Is the presence of RedOnionTopping a necessary condition for a pizza to be classified as PolloAdAstra?",
              "Can a pizza be considered PolloAdAstra if it lacks RedOnionTopping among its toppings?"
            ]
          },
          {
            "axiom": "PolloAdAstra propertyRestrictions [hasTopping some CajunSpiceTopping]",
            "CQ": [
              "Is it required for every PolloAdAstra pizza to include at least one CajunSpiceTopping as a topping?",
              "Can a PolloAdAstra pizza be considered as such without having any CajunSpiceTopping?",
              "Does the presence of CajunSpiceTopping on a pizza guarantee its classification as PolloAdAstra?"
            ]
          },
          {
            "axiom": "PolloAdAstra propertyRestrictions [hasTopping some TomatoTopping]",
            "CQ": [
              "Is it required for a PolloAdAstra pizza to have at least one TomatoTopping?",
              "Can a PolloAdAstra pizza exist without having any TomatoTopping as one of its toppings?",
              "Does every instance of PolloAdAstra use TomatoTopping among its toppings?"
            ]
          },
          {
            "axiom": "PolloAdAstra propertyRestrictions [hasTopping some GarlicTopping]",
            "CQ": [
              "Must every PolloAdAstra pizza have at least one GarlicTopping as a topping?",
              "Is it required for a pizza to include a GarlicTopping in order to be classified as PolloAdAstra?",
              "Can a PolloAdAstra pizza exist without the hasTopping property relating to a GarlicTopping?"
            ]
          },
          {
            "axiom": "PolloAdAstra propertyRestrictions [hasTopping some SweetPepperTopping]",
            "CQ": [
              "Is it necessary for a PolloAdAstra pizza to include SweetPepperTopping among its toppings?",
              "Can a pizza be classified as PolloAdAstra if it does not have any SweetPepperTopping?",
              "Does the presence of SweetPepperTopping determine whether a pizza is identified as PolloAdAstra?"
            ]
          },
          {
            "axiom": "PolloAdAstra propertyRestrictions [hasTopping only (ChickenTopping or MozzarellaTopping or GarlicTopping or TomatoTopping or RedOnionTopping or CajunSpiceTopping or SweetPepperTopping)]",
            "CQ": [
              "Is every topping on a PolloAdAstra pizza restricted to only Chicken, Mozzarella, Garlic, Tomato, Red Onion, Cajun Spice, or Sweet Pepper toppings?",
              "Could a PolloAdAstra pizza include any topping outside the set of Chicken, Mozzarella, Garlic, Tomato, Red Onion, Cajun Spice, or Sweet Pepper?",
              "Does the presence of a topping not listed among Chicken, Mozzarella, Garlic, Tomato, Red Onion, Cajun Spice, or Sweet Pepper disqualify a pizza from being classified as PolloAdAstra?"
            ]
          },
          {
            "axiom": "PolloAdAstra propertyRestrictions [hasTopping some MozzarellaTopping]",
            "CQ": [
              "Is it required for a PolloAdAstra pizza to have at least one MozzarellaTopping as a topping?",
              "Must every PolloAdAstra pizza include the hasTopping relationship with some MozzarellaTopping?",
              "Can a pizza be classified as PolloAdAstra if it does not contain any MozzarellaTopping?"
            ]
          },
          {
            "axiom": "PolloAdAstra propertyRestrictions [hasTopping some ChickenTopping]",
            "CQ": [
              "Is it required for a PolloAdAstra pizza to have at least one ChickenTopping as a topping?",
              "Can a PolloAdAstra pizza exist without any ChickenTopping among its toppings?",
              "Does every PolloAdAstra pizza include the property hasTopping with a value of ChickenTopping?"
            ]
          }
        ]
      },
      "Rosa": {
        "axiom": {
          "subClassOf": [
            "NamedPizza"
          ],
          "disjointWith": [
            "Mushroom",
            "LaReine",
            "Napoletana",
            "Veneziana",
            "AmericanHot",
            "UnclosedPizza",
            "PrinceCarlo",
            "Capricciosa",
            "FruttiDiMare",
            "Siciliana",
            "Cajun",
            "Margherita",
            "American",
            "SloppyGiuseppe",
            "Caprina",
            "Soho",
            "Parmense",
            "PolloAdAstra",
            "Fiorentina",
            "QuattroFormaggi",
            "Giardiniera",
            "FourSeasons"
          ],
          "propertyRestrictions": [
            "[hasTopping some TomatoTopping]",
            "[hasTopping some GorgonzolaTopping]",
            "[hasTopping only (MozzarellaTopping or TomatoTopping or GorgonzolaTopping)]",
            "[hasTopping some MozzarellaTopping]"
          ]
        },
        "description": "Rosa is defined as a subclass of NamedPizza, explicitly disjoint with a range of other specific pizza types (such as Mushroom, Margherita, AmericanHot, and others), ensuring an individual pizza cannot simultaneously belong to Rosa and any of those disjoint classes. Members of the Rosa class are characterized by their toppings: every Rosa pizza must have at least one TomatoTopping, one GorgonzolaTopping, and one MozzarellaTopping, and it may only contain these three toppings (no other toppings are permitted). This formalization strictly captures the unique identity and allowed ingredients of the Rosa pizza type.",
        "CQ": [
          {
            "axiom": "Rosa subClassOf NamedPizza",
            "CQ": [
              "Is Rosa classified as a type of NamedPizza?",
              "Which pizza varieties are more specific instances under NamedPizza, including Rosa?",
              "What are the higher-level categories that encompass Rosa?"
            ]
          },
          {
            "axiom": "Rosa disjointWith Mushroom",
            "CQ": [
              "What formal constraint prevents an instance from being both a Rosa and a Mushroom?",
              "Is there any overlap in ontology classification between Rosa and Mushroom?",
              "Which entities are asserted as mutually exclusive with Mushroom?"
            ]
          },
          {
            "axiom": "Rosa disjointWith LaReine",
            "CQ": [
              "What is the ontological separation between Rosa and LaReine?",
              "Can a single entity be classified as both Rosa and LaReine in the ontology?",
              "Which classes are formally specified as disjoint with LaReine?"
            ]
          },
          {
            "axiom": "Rosa disjointWith Napoletana",
            "CQ": [
              "What is the ontological separation between Rosa and Napoletana?",
              "Can any entity simultaneously belong to both Rosa and Napoletana categories?",
              "Which classes are declared as disjoint with Napoletana in the ontology?"
            ]
          },
          {
            "axiom": "Rosa disjointWith Veneziana",
            "CQ": [
              "What differentiates Rosa from Veneziana as mutually exclusive pizza types in the ontology?",
              "Is there any pizza that can be classified as both Rosa and Veneziana?",
              "Which pizza classes are formally specified as disjoint with Veneziana?"
            ]
          },
          {
            "axiom": "Rosa disjointWith AmericanHot",
            "CQ": [
              "How is the concept of Rosa differentiated from AmericanHot in the ontology?",
              "Is it feasible for a pizza to belong to both Rosa and AmericanHot categories simultaneously?",
              "Which classes are defined as disjoint with Rosa?"
            ]
          },
          {
            "axiom": "Rosa disjointWith UnclosedPizza",
            "CQ": [
              "What ontological separation is specified between Rosa and UnclosedPizza?",
              "Is any individual allowed to belong to both Rosa and UnclosedPizza classes simultaneously?",
              "Which classes are formally asserted as mutually exclusive with Rosa?"
            ]
          },
          {
            "axiom": "Rosa disjointWith PrinceCarlo",
            "CQ": [
              "What logical separation is asserted between Rosa and PrinceCarlo in the ontology?",
              "Is there any individual that can belong to both Rosa and PrinceCarlo?",
              "Which classes are declared as disjoint with PrinceCarlo?"
            ]
          },
          {
            "axiom": "Rosa disjointWith Capricciosa",
            "CQ": [
              "How does the ontology represent the incompatibility between Rosa and Capricciosa?",
              "Is there any instance that can be classified as both Rosa and Capricciosa?",
              "Which classes are axiomatized as disjoint with Capricciosa?"
            ]
          },
          {
            "axiom": "Rosa disjointWith FruttiDiMare",
            "CQ": [
              "What formal separation exists between Rosa and FruttiDiMare within the ontology?",
              "Is it permissible for an entity to be classified as both Rosa and FruttiDiMare?",
              "Which classes are explicitly specified as disjoint with Rosa?"
            ]
          },
          {
            "axiom": "Rosa disjointWith Siciliana",
            "CQ": [
              "How does the ontology specify the incompatibility between Rosa and Siciliana?",
              "Is there any instance that can belong to both Rosa and Siciliana categories?",
              "Which classes are defined as mutually exclusive with Siciliana?"
            ]
          },
          {
            "axiom": "Rosa disjointWith Cajun",
            "CQ": [
              "What explicit separation exists between the classes Rosa and Cajun within the ontology?",
              "Is there an instance that could simultaneously belong to both Rosa and Cajun categories?",
              "Which ontology classes are formally specified as disjoint with Rosa?"
            ]
          },
          {
            "axiom": "Rosa disjointWith Margherita",
            "CQ": [
              "What logical separation is defined between Rosa and Margherita in the ontology?",
              "Is any entity allowed to be classified as both Rosa and Margherita simultaneously?",
              "Which classes are stated to be mutually incompatible with Margherita?"
            ]
          },
          {
            "axiom": "Rosa disjointWith American",
            "CQ": [
              "How does the ontology distinguish between Rosa and American categories?",
              "Can an entity belong simultaneously to both Rosa and American classes?",
              "Which classes are specified as disjoint with American?"
            ]
          },
          {
            "axiom": "Rosa disjointWith SloppyGiuseppe",
            "CQ": [
              "Are Rosa and SloppyGiuseppe defined as mutually exclusive pizza types in the ontology?",
              "Is there any pizza that can belong to both Rosa and SloppyGiuseppe categories?",
              "Which pizza classes are declared to be incompatible with SloppyGiuseppe?"
            ]
          },
          {
            "axiom": "Rosa disjointWith Caprina",
            "CQ": [
              "What is the ontological distinction between Rosa and Caprina?",
              "Can an entity simultaneously belong to both Rosa and Caprina classes?",
              "Which classes are specified as disjoint with Rosa in the ontology?"
            ]
          },
          {
            "axiom": "Rosa disjointWith Soho",
            "CQ": [
              "How does the ontology specify the separation between Rosa and Soho?",
              "Is there any instance that can be classified under both Rosa and Soho?",
              "Which classes are formally stated as disjoint with Rosa?"
            ]
          },
          {
            "axiom": "Rosa disjointWith Parmense",
            "CQ": [
              "What ontological separation is specified between Rosa and Parmense?",
              "Is there an instance that can simultaneously belong to both Rosa and Parmense categories?",
              "Which classes within the ontology are explicitly stated as mutually exclusive with Parmense?"
            ]
          },
          {
            "axiom": "Rosa disjointWith PolloAdAstra",
            "CQ": [
              "What kind of logical separation exists between Rosa and PolloAdAstra within the ontology?",
              "Is there any entity that can simultaneously be classified as both Rosa and PolloAdAstra?",
              "Which classes are identified as disjoint with PolloAdAstra?"
            ]
          },
          {
            "axiom": "Rosa disjointWith Fiorentina",
            "CQ": [
              "What is the formal ontological relation between Rosa and Fiorentina?",
              "Can an instance be both classified as Rosa and Fiorentina simultaneously?",
              "Which classes are stated to be disjoint with Fiorentina in the ontology?"
            ]
          },
          {
            "axiom": "Rosa disjointWith QuattroFormaggi",
            "CQ": [
              "What is the logical separation between Rosa and QuattroFormaggi within the ontology?",
              "Is there any instance that can belong to both Rosa and QuattroFormaggi classes?",
              "Which classes are specified as disjoint with Rosa?"
            ]
          },
          {
            "axiom": "Rosa disjointWith Giardiniera",
            "CQ": [
              "How does the ontology formally distinguish between Rosa and Giardiniera?",
              "Is there any instance that can simultaneously belong to both Rosa and Giardiniera classes?",
              "Which classes within the ontology are explicitly incompatible with Giardiniera?"
            ]
          },
          {
            "axiom": "Rosa disjointWith FourSeasons",
            "CQ": [
              "How are the classes Rosa and FourSeasons differentiated in the ontology?",
              "Is it permitted for an individual to belong to both Rosa and FourSeasons classes?",
              "What other classes are declared as disjoint with Rosa?"
            ]
          },
          {
            "axiom": "Rosa propertyRestrictions [hasTopping some TomatoTopping]",
            "CQ": [
              "Is it required for Rosa to have at least one topping that is a TomatoTopping?",
              "Can Rosa exist without having any TomatoTopping as a topping?",
              "Does the definition of Rosa stipulate that TomatoTopping must be present among its toppings?"
            ]
          },
          {
            "axiom": "Rosa propertyRestrictions [hasTopping some GorgonzolaTopping]",
            "CQ": [
              "Must every Rosa pizza have at least one topping that is Gorgonzola?",
              "Is inclusion of Gorgonzola as a topping a necessary requirement for a pizza to be considered a Rosa?",
              "Can a pizza be classified as Rosa if it does not have any Gorgonzola topping?"
            ]
          },
          {
            "axiom": "Rosa propertyRestrictions [hasTopping only (MozzarellaTopping or TomatoTopping or GorgonzolaTopping)]",
            "CQ": [
              "Are all toppings on a Rosa pizza limited exclusively to Mozzarella, Tomato, or Gorgonzola toppings?",
              "Is it prohibited for a Rosa pizza to have any topping other than Mozzarella, Tomato, or Gorgonzola?",
              "Must every topping found on a Rosa pizza always belong to the set consisting solely of Mozzarella, Tomato, or Gorgonzola toppings?"
            ]
          },
          {
            "axiom": "Rosa propertyRestrictions [hasTopping some MozzarellaTopping]",
            "CQ": [
              "Is it required that a Rosa pizza has at least one topping of Mozzarella?",
              "Can a pizza be considered Rosa if it does not have any MozzarellaTopping?",
              "Does every Rosa pizza necessarily include MozzarellaTopping among its toppings?"
            ]
          }
        ]
      },
      "Soho": {
        "axiom": {
          "subClassOf": [
            "NamedPizza"
          ],
          "disjointWith": [
            "Mushroom",
            "LaReine",
            "Napoletana",
            "Veneziana",
            "AmericanHot",
            "UnclosedPizza",
            "PrinceCarlo",
            "Capricciosa",
            "FruttiDiMare",
            "Siciliana",
            "Cajun",
            "Margherita",
            "American",
            "SloppyGiuseppe",
            "Caprina",
            "Parmense",
            "PolloAdAstra",
            "Fiorentina",
            "Rosa",
            "QuattroFormaggi",
            "Giardiniera",
            "FourSeasons"
          ],
          "propertyRestrictions": [
            "[hasTopping some TomatoTopping]",
            "[hasTopping only (MozzarellaTopping or GarlicTopping or TomatoTopping or RocketTopping or OliveTopping or ParmesanTopping)]",
            "[hasTopping some GarlicTopping]",
            "[hasTopping some OliveTopping]",
            "[hasTopping some MozzarellaTopping]",
            "[hasTopping some ParmesanTopping]",
            "[hasTopping some RocketTopping]"
          ]
        },
        "description": "Soho is defined as a subclass of NamedPizza and is explicitly disjoint with a range of other specific pizza types, ensuring that no instance can simultaneously belong to both Soho and these other classes. Members of the Soho class are characterized by their required toppings: each Soho pizza must include tomato, garlic, olive, mozzarella, parmesan, and rocket toppings. Additionally, the only permitted toppings for Soho pizzas are mozzarella, garlic, tomato, rocket, olive, or parmesan, meaning no other toppings are allowed on this type of pizza. This formalization strictly specifies both the mandatory inclusion and the exclusivity of particular toppings for Soho pizzas.",
        "CQ": [
          {
            "axiom": "Soho subClassOf NamedPizza",
            "CQ": [
              "Is Soho classified under the broader category of NamedPizza?",
              "Which specific pizzas are categorized as subclasses of NamedPizza, including Soho?",
              "What are the higher-level pizza categories that encompass Soho?"
            ]
          },
          {
            "axiom": "Soho disjointWith Mushroom",
            "CQ": [
              "What logical distinction separates Soho and Mushroom within the ontology?",
              "Is it permitted for an entity to be both Soho and Mushroom simultaneously?",
              "Which classes are defined as incompatible with Mushroom?"
            ]
          },
          {
            "axiom": "Soho disjointWith LaReine",
            "CQ": [
              "What is the logical relationship established between Soho and LaReine in the ontology?",
              "Is it permissible for an individual pizza to be classified as both Soho and LaReine?",
              "Which classes are asserted as mutually exclusive with LaReine in the ontology?"
            ]
          },
          {
            "axiom": "Soho disjointWith Napoletana",
            "CQ": [
              "How are Soho and Napoletana defined with respect to mutual exclusivity in the ontology?",
              "Is any entity permitted to be simultaneously categorized as both Soho and Napoletana?",
              "Which classes are formally specified as disjoint with Soho?"
            ]
          },
          {
            "axiom": "Soho disjointWith Veneziana",
            "CQ": [
              "What type of separation is defined between Soho and Veneziana in the ontology?",
              "Is there any individual that can simultaneously be classified as both Soho and Veneziana?",
              "Which classes are formally specified as disjoint with Soho?"
            ]
          },
          {
            "axiom": "Soho disjointWith AmericanHot",
            "CQ": [
              "What logical separation exists between Soho and AmericanHot in the ontology?",
              "Can a single pizza entity be classified simultaneously as Soho and AmericanHot?",
              "Which classes are formally incompatible with AmericanHot according to the ontology?"
            ]
          },
          {
            "axiom": "Soho disjointWith UnclosedPizza",
            "CQ": [
              "What logical separation exists between Soho and UnclosedPizza within the ontology?",
              "Is any individual instance allowed to be both Soho and UnclosedPizza concurrently?",
              "Which classes are specified as mutually exclusive with Soho?"
            ]
          },
          {
            "axiom": "Soho disjointWith PrinceCarlo",
            "CQ": [
              "What logical separation is enforced between Soho and PrinceCarlo in the ontology?",
              "Is there any circumstance where an individual could belong to both Soho and PrinceCarlo?",
              "Which entities are defined as mutually exclusive with PrinceCarlo?"
            ]
          },
          {
            "axiom": "Soho disjointWith Capricciosa",
            "CQ": [
              "What formal separation exists between Soho and Capricciosa in the ontology?",
              "Is an entity permitted to be classified simultaneously as Soho and Capricciosa?",
              "Which classes in the ontology are explicitly stated as disjoint with Soho?"
            ]
          },
          {
            "axiom": "Soho disjointWith FruttiDiMare",
            "CQ": [
              "What logical separation exists between Soho and FruttiDiMare in the ontology?",
              "Is there any circumstance where an entity can be both Soho and FruttiDiMare?",
              "Which classes are specified as disjoint with Soho?"
            ]
          },
          {
            "axiom": "Soho disjointWith Siciliana",
            "CQ": [
              "What logical distinction is represented between Soho and Siciliana in the ontology?",
              "Is it permissible for a single entity to be classified as both Soho and Siciliana?",
              "Which other pizza types are defined as disjoint with Siciliana?"
            ]
          },
          {
            "axiom": "Soho disjointWith Cajun",
            "CQ": [
              "What logical separation is asserted between Soho and Cajun in the ontology?",
              "Is there an instance that can be classified as both Soho and Cajun simultaneously?",
              "Which classes are defined as mutually exclusive with Cajun?"
            ]
          },
          {
            "axiom": "Soho disjointWith Margherita",
            "CQ": [
              "What formal separation is defined between Soho and Margherita pizzas within the ontology?",
              "Is there any scenario where an instance could qualify as both Soho and Margherita simultaneously?",
              "Which pizza types are specified as mutually exclusive with Soho?"
            ]
          },
          {
            "axiom": "Soho disjointWith American",
            "CQ": [
              "What type of logical separation is defined between Soho and American in the ontology?",
              "Is there an entity that can simultaneously belong to both Soho and American categories?",
              "Which other classes are specified as disjoint with American?"
            ]
          },
          {
            "axiom": "Soho disjointWith SloppyGiuseppe",
            "CQ": [
              "What is the ontological separation between Soho and SloppyGiuseppe?",
              "Is it allowed for a pizza to belong to both the Soho and SloppyGiuseppe categories?",
              "Which classes are formally asserted to be mutually exclusive with SloppyGiuseppe?"
            ]
          },
          {
            "axiom": "Soho disjointWith Caprina",
            "CQ": [
              "How are Soho and Caprina represented as mutually exclusive classes in the ontology?",
              "Is there any instance that can simultaneously belong to Soho and Caprina categories?",
              "Which classes are specified as disjoint with Caprina?"
            ]
          },
          {
            "axiom": "Soho disjointWith Parmense",
            "CQ": [
              "What distinguishes Soho from Parmense within the ontology?",
              "Is there any possibility for an entity to be both Soho and Parmense?",
              "Which classes are specified as disjoint with Parmense?"
            ]
          },
          {
            "axiom": "Soho disjointWith PolloAdAstra",
            "CQ": [
              "What is the ontological distinction between Soho and PolloAdAstra?",
              "Can a single pizza instance be classified as both Soho and PolloAdAstra?",
              "Which pizza types are defined as mutually exclusive with PolloAdAstra?"
            ]
          },
          {
            "axiom": "Soho disjointWith Fiorentina",
            "CQ": [
              "What logical separation is asserted between Soho and Fiorentina in the ontology?",
              "Is any instance allowed to belong to both Soho and Fiorentina categories?",
              "Which classes are defined as mutually exclusive with Fiorentina?"
            ]
          },
          {
            "axiom": "Soho disjointWith Rosa",
            "CQ": [
              "What ontological boundary is established between Soho and Rosa?",
              "Is any entity permitted to belong to both Soho and Rosa subclasses?",
              "Which other classes, aside from Soho, are defined as mutually exclusive with Rosa?"
            ]
          },
          {
            "axiom": "Soho disjointWith QuattroFormaggi",
            "CQ": [
              "How are Soho and QuattroFormaggi classified in relation to each other within the ontology?",
              "Is it permissible for a single pizza to be both Soho and QuattroFormaggi?",
              "Which pizza types are specified as mutually exclusive with Soho?"
            ]
          },
          {
            "axiom": "Soho disjointWith Giardiniera",
            "CQ": [
              "How does the ontology distinguish between Soho and Giardiniera?",
              "Is there any instance that can belong to both Soho and Giardiniera categories?",
              "Which classes are defined as incompatible with Giardiniera according to the ontology?"
            ]
          },
          {
            "axiom": "Soho disjointWith FourSeasons",
            "CQ": [
              "How does the ontology represent the connection or separation between Soho and FourSeasons?",
              "Is it feasible for a single entity to be classified as both Soho and FourSeasons simultaneously?",
              "Which classes are declared to be mutually exclusive with Soho within the ontology?"
            ]
          },
          {
            "axiom": "Soho propertyRestrictions [hasTopping some TomatoTopping]",
            "CQ": [
              "Must a Soho pizza always include at least one TomatoTopping?",
              "Is it required for every Soho pizza to have the property 'hasTopping' associated with TomatoTopping?",
              "Can a pizza be identified as Soho if it does not have any TomatoTopping?"
            ]
          },
          {
            "axiom": "Soho propertyRestrictions [hasTopping only (MozzarellaTopping or GarlicTopping or TomatoTopping or RocketTopping or OliveTopping or ParmesanTopping)]",
            "CQ": [
              "Is every topping on a Soho pizza limited exclusively to Mozzarella, Garlic, Tomato, Rocket, Olive, or Parmesan?",
              "Would the presence of any topping other than Mozzarella, Garlic, Tomato, Rocket, Olive, or Parmesan disqualify a pizza from being classified as Soho?",
              "Must all toppings on a Soho pizza belong to the set comprising Mozzarella, Garlic, Tomato, Rocket, Olive, or Parmesan?"
            ]
          },
          {
            "axiom": "Soho propertyRestrictions [hasTopping some GarlicTopping]",
            "CQ": [
              "Is it required for a Soho pizza to have at least one topping of Garlic?",
              "Must every Soho pizza include Garlic as one of its toppings?",
              "Can a pizza be classified as Soho if it does not contain any Garlic topping?"
            ]
          },
          {
            "axiom": "Soho propertyRestrictions [hasTopping some OliveTopping]",
            "CQ": [
              "Is it required for every instance of Soho to have at least one OliveTopping as a topping?",
              "Does the presence of an OliveTopping as a topping define a Soho pizza?",
              "Can a Soho exist without having the hasTopping property with OliveTopping?"
            ]
          },
          {
            "axiom": "Soho propertyRestrictions [hasTopping some MozzarellaTopping]",
            "CQ": [
              "Is it required for a Soho pizza to have at least one Mozzarella topping?",
              "Can a Soho pizza be classified as such if it does not contain any Mozzarella topping?",
              "Does every Soho pizza necessarily include Mozzarella as one of its toppings?"
            ]
          },
          {
            "axiom": "Soho propertyRestrictions [hasTopping some ParmesanTopping]",
            "CQ": [
              "Is it required for a Soho pizza to have at least one topping of Parmesan?",
              "Can a Soho pizza exist without including ParmesanTopping among its toppings?",
              "Does the presence of ParmesanTopping as a topping qualify a pizza as Soho?"
            ]
          },
          {
            "axiom": "Soho propertyRestrictions [hasTopping some RocketTopping]",
            "CQ": [
              "Is it required for a Soho pizza to have at least one topping of RocketTopping?",
              "Does every Soho pizza include RocketTopping as one of its toppings?",
              "Can a Soho pizza exist without having any RocketTopping among its toppings?"
            ]
          }
        ]
      },
      "ArtichokeTopping": {
        "axiom": {
          "subClassOf": [
            "VegetableTopping"
          ],
          "disjointWith": [
            "RocketTopping",
            "LeekTopping",
            "OnionTopping",
            "SpinachTopping",
            "GarlicTopping",
            "PepperTopping",
            "AsparagusTopping",
            "OliveTopping",
            "CaperTopping",
            "MushroomTopping",
            "PetitPoisTopping",
            "TomatoTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Mild]"
          ]
        },
        "description": "ArtichokeTopping is defined as a subclass of VegetableTopping and is explicitly disjoint with a range of other vegetable toppings, including RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, ensuring that no individual can be classified as an ArtichokeTopping and any of these other types simultaneously. Furthermore, every member of the ArtichokeTopping class is constrained to have at least some level of mild spiciness (hasSpiciness some Mild), distinguishing it by its gentle flavor profile within the broader category of vegetable toppings.",
        "CQ": [
          {
            "axiom": "ArtichokeTopping subClassOf VegetableTopping",
            "CQ": [
              "Does ArtichokeTopping fall under the broader group of VegetableTopping?",
              "What toppings are included as subclasses of VegetableTopping, and does this list feature ArtichokeTopping?",
              "Which general topping types encompass ArtichokeTopping?"
            ]
          },
          {
            "axiom": "ArtichokeTopping disjointWith RocketTopping",
            "CQ": [
              "What formal separation is defined between ArtichokeTopping and RocketTopping in the ontology?",
              "Is there any instance that can simultaneously be classified as both ArtichokeTopping and RocketTopping?",
              "Which toppings are explicitly specified as disjoint with RocketTopping?"
            ]
          },
          {
            "axiom": "ArtichokeTopping disjointWith LeekTopping",
            "CQ": [
              "Are there any ontological constraints preventing an entity from being both an ArtichokeTopping and a LeekTopping?",
              "Which classes are defined as mutually exclusive with ArtichokeTopping?",
              "Is it permissible for a topping to simultaneously belong to both ArtichokeTopping and LeekTopping categories?"
            ]
          },
          {
            "axiom": "ArtichokeTopping disjointWith OnionTopping",
            "CQ": [
              "What is the formal distinction between ArtichokeTopping and OnionTopping in the ontology?",
              "Is it allowed for a pizza topping to be classified as both ArtichokeTopping and OnionTopping?",
              "Which topping types are specified as disjoint with OnionTopping?"
            ]
          },
          {
            "axiom": "ArtichokeTopping disjointWith SpinachTopping",
            "CQ": [
              "How is the exclusiveness between ArtichokeTopping and SpinachTopping represented in the ontology?",
              "Is it allowed for a pizza topping to be classified as both ArtichokeTopping and SpinachTopping?",
              "Which topping classes are formally specified as disjoint with ArtichokeTopping?"
            ]
          },
          {
            "axiom": "ArtichokeTopping disjointWith GarlicTopping",
            "CQ": [
              "Are there any declared incompatibilities between ArtichokeTopping and GarlicTopping in the ontology?",
              "Is it allowable for a pizza topping to be classified as both ArtichokeTopping and GarlicTopping?",
              "Which other topping types are defined as disjoint with ArtichokeTopping?"
            ]
          },
          {
            "axiom": "ArtichokeTopping disjointWith PepperTopping",
            "CQ": [
              "How does the ontology define the separation between ArtichokeTopping and PepperTopping?",
              "Is an ingredient allowed to be classified simultaneously as ArtichokeTopping and PepperTopping?",
              "Which topping categories are stated as mutually exclusive with PepperTopping?"
            ]
          },
          {
            "axiom": "ArtichokeTopping disjointWith AsparagusTopping",
            "CQ": [
              "What is the formal relationship specified between ArtichokeTopping and AsparagusTopping within the ontology?",
              "Does the ontology permit any instance to be both ArtichokeTopping and AsparagusTopping?",
              "Which topping classes are declared as incompatible with ArtichokeTopping?"
            ]
          },
          {
            "axiom": "ArtichokeTopping disjointWith OliveTopping",
            "CQ": [
              "How does the ontology differentiate between ArtichokeTopping and OliveTopping?",
              "Is it allowed for a pizza topping to be classified as both ArtichokeTopping and OliveTopping?",
              "Which toppings are defined as mutually exclusive with OliveTopping?"
            ]
          },
          {
            "axiom": "ArtichokeTopping disjointWith CaperTopping",
            "CQ": [
              "How does the ontology represent the exclusivity between ArtichokeTopping and CaperTopping?",
              "Is any pizza topping classified as both ArtichokeTopping and CaperTopping within the ontology?",
              "Which topping types are specified as being disjoint with CaperTopping?"
            ]
          },
          {
            "axiom": "ArtichokeTopping disjointWith MushroomTopping",
            "CQ": [
              "What logical separation is established between ArtichokeTopping and MushroomTopping within the ontology?",
              "Is it allowed for a topping to be classified as both ArtichokeTopping and MushroomTopping?",
              "Which toppings are formally specified as incompatible with ArtichokeTopping?"
            ]
          },
          {
            "axiom": "ArtichokeTopping disjointWith PetitPoisTopping",
            "CQ": [
              "How are ArtichokeTopping and PetitPoisTopping formally differentiated in the ontology?",
              "Is it allowed for a pizza topping to be classified as both ArtichokeTopping and PetitPoisTopping?",
              "Which toppings are specified as mutually exclusive with ArtichokeTopping?"
            ]
          },
          {
            "axiom": "ArtichokeTopping disjointWith TomatoTopping",
            "CQ": [
              "What are the logical consequences of ArtichokeTopping and TomatoTopping being disjoint in the ontology?",
              "Is it allowable for a single pizza to include both ArtichokeTopping and TomatoTopping?",
              "Which toppings are explicitly stated to be incompatible with TomatoTopping?"
            ]
          },
          {
            "axiom": "ArtichokeTopping propertyRestrictions [hasSpiciness some Mild]",
            "CQ": [
              "Is every ArtichokeTopping required to have at least one spiciness level classified as Mild?",
              "Can an ArtichokeTopping exist without possessing any degree of spiciness identified as Mild?",
              "Does the definition of ArtichokeTopping permit toppings with only Mild spiciness, or could additional spiciness levels also be present?"
            ]
          }
        ]
      },
      "AsparagusTopping": {
        "axiom": {
          "subClassOf": [
            "VegetableTopping"
          ],
          "disjointWith": [
            "RocketTopping",
            "LeekTopping",
            "OnionTopping",
            "SpinachTopping",
            "GarlicTopping",
            "ArtichokeTopping",
            "PepperTopping",
            "OliveTopping",
            "CaperTopping",
            "MushroomTopping",
            "PetitPoisTopping",
            "TomatoTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Mild]"
          ]
        },
        "description": "AsparagusTopping is defined as a subclass of VegetableTopping, meaning it represents a specific type of vegetable-based topping. It is disjoint with several other vegetable toppings, including RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, ensuring that an individual cannot simultaneously belong to any of these classes. Additionally, every instance of AsparagusTopping must have some level of mild spiciness, as specified by the hasSpiciness property restriction.",
        "CQ": [
          {
            "axiom": "AsparagusTopping subClassOf VegetableTopping",
            "CQ": [
              "Does AsparagusTopping fall under the category of VegetableTopping?",
              "What types of toppings are classified as subclasses of VegetableTopping?",
              "Which broader topping categories does AsparagusTopping belong to?"
            ]
          },
          {
            "axiom": "AsparagusTopping disjointWith RocketTopping",
            "CQ": [
              "How does the ontology differentiate between AsparagusTopping and RocketTopping?",
              "Is there any instance that can be classified under both AsparagusTopping and RocketTopping categories?",
              "Which toppings are designated as mutually exclusive with RocketTopping?"
            ]
          },
          {
            "axiom": "AsparagusTopping disjointWith LeekTopping",
            "CQ": [
              "What logical separation exists between AsparagusTopping and LeekTopping in the ontology?",
              "Can a pizza contain both AsparagusTopping and LeekTopping simultaneously?",
              "Which topping classes are defined as disjoint with LeekTopping?"
            ]
          },
          {
            "axiom": "AsparagusTopping disjointWith OnionTopping",
            "CQ": [
              "What formal separation exists between AsparagusTopping and OnionTopping in the ontology?",
              "Is there any instance that can be classified as both AsparagusTopping and OnionTopping?",
              "Which topping types are explicitly set as disjoint with OnionTopping?"
            ]
          },
          {
            "axiom": "AsparagusTopping disjointWith SpinachTopping",
            "CQ": [
              "How does the ontology specify the separation between AsparagusTopping and SpinachTopping?",
              "Is there any instance that could simultaneously be classified as both AsparagusTopping and SpinachTopping?",
              "Which topping classes are identified as mutually exclusive with AsparagusTopping?"
            ]
          },
          {
            "axiom": "AsparagusTopping disjointWith GarlicTopping",
            "CQ": [
              "How does the ontology define the interaction between AsparagusTopping and GarlicTopping?",
              "Is there any entity that can be classified simultaneously as AsparagusTopping and GarlicTopping?",
              "Which classes are specified as incompatible with AsparagusTopping in the ontology?"
            ]
          },
          {
            "axiom": "AsparagusTopping disjointWith ArtichokeTopping",
            "CQ": [
              "What distinguishes AsparagusTopping from ArtichokeTopping according to the ontology?",
              "Is there any topping that can be classified as both AsparagusTopping and ArtichokeTopping?",
              "Which toppings are defined as disjoint with AsparagusTopping?"
            ]
          },
          {
            "axiom": "AsparagusTopping disjointWith PepperTopping",
            "CQ": [
              "What is the ontological separation between AsparagusTopping and PepperTopping?",
              "Is any pizza topping instance allowed to have both AsparagusTopping and PepperTopping classifications?",
              "Which topping classes are formally specified as disjoint with PepperTopping?"
            ]
          },
          {
            "axiom": "AsparagusTopping disjointWith OliveTopping",
            "CQ": [
              "What is the ontological distinction between AsparagusTopping and OliveTopping?",
              "Can a single pizza simultaneously include AsparagusTopping and OliveTopping according to the ontology?",
              "Which toppings are specified as disjoint with AsparagusTopping?"
            ]
          },
          {
            "axiom": "AsparagusTopping disjointWith CaperTopping",
            "CQ": [
              "How does the ontology differentiate between AsparagusTopping and CaperTopping?",
              "Is there any topping instance that can be both AsparagusTopping and CaperTopping?",
              "Which classes of toppings are defined as disjoint with AsparagusTopping?"
            ]
          },
          {
            "axiom": "AsparagusTopping disjointWith MushroomTopping",
            "CQ": [
              "What is the ontological separation between AsparagusTopping and MushroomTopping?",
              "Can an individual topping instance simultaneously be classified as both AsparagusTopping and MushroomTopping?",
              "Which topping categories are formally defined as incompatible with MushroomTopping in the ontology?"
            ]
          },
          {
            "axiom": "AsparagusTopping disjointWith PetitPoisTopping",
            "CQ": [
              "What formal distinction does the ontology make between AsparagusTopping and PetitPoisTopping?",
              "Is any topping instance permitted to be classified as both AsparagusTopping and PetitPoisTopping?",
              "Which classes are formally specified as disjoint with PetitPoisTopping?"
            ]
          },
          {
            "axiom": "AsparagusTopping disjointWith TomatoTopping",
            "CQ": [
              "How does the ontology distinguish between AsparagusTopping and TomatoTopping?",
              "Is any topping classified under both AsparagusTopping and TomatoTopping categories?",
              "What toppings are specified as mutually exclusive with TomatoTopping?"
            ]
          },
          {
            "axiom": "AsparagusTopping propertyRestrictions [hasSpiciness some Mild]",
            "CQ": [
              "Is every AsparagusTopping required to have at least one 'hasSpiciness' property with a Mild value?",
              "Must AsparagusTopping always be associated with some level of Mild spiciness through the hasSpiciness property?",
              "Can there exist an instance of AsparagusTopping without having any Mild spiciness via the hasSpiciness relationship?"
            ]
          }
        ]
      },
      "GarlicTopping": {
        "axiom": {
          "subClassOf": [
            "VegetableTopping"
          ],
          "disjointWith": [
            "RocketTopping",
            "LeekTopping",
            "OnionTopping",
            "SpinachTopping",
            "ArtichokeTopping",
            "PepperTopping",
            "AsparagusTopping",
            "OliveTopping",
            "CaperTopping",
            "MushroomTopping",
            "PetitPoisTopping",
            "TomatoTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Medium]"
          ]
        },
        "description": "GarlicTopping is defined as a subclass of VegetableTopping, meaning it is a type of vegetable-based topping. It is explicitly disjoint with several other specific vegetable toppings, such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, ensuring that an individual cannot belong to both GarlicTopping and any of these other topping classes. Additionally, GarlicTopping is characterized by the property that its members must have at least some medium level of spiciness (hasSpiciness some Medium).",
        "CQ": [
          {
            "axiom": "GarlicTopping subClassOf VegetableTopping",
            "CQ": [
              "Is GarlicTopping categorized under the broader class of VegetableTopping?",
              "Which toppings are classified as subclasses of VegetableTopping, including GarlicTopping?",
              "What are the immediate parent classes associated with GarlicTopping?"
            ]
          },
          {
            "axiom": "GarlicTopping disjointWith RocketTopping",
            "CQ": [
              "What is the ontological separation between GarlicTopping and RocketTopping?",
              "Is there any instance that can be classified simultaneously as GarlicTopping and RocketTopping?",
              "Which toppings are declared to be incompatible with GarlicTopping?"
            ]
          },
          {
            "axiom": "GarlicTopping disjointWith LeekTopping",
            "CQ": [
              "How are GarlicTopping and LeekTopping modeled with respect to mutual exclusivity in the ontology?",
              "Is any topping allowed to be classified as both GarlicTopping and LeekTopping simultaneously?",
              "Which topping classes are identified as disjoint with GarlicTopping within the ontology?"
            ]
          },
          {
            "axiom": "GarlicTopping disjointWith OnionTopping",
            "CQ": [
              "How does the ontology specify the relationship between GarlicTopping and OnionTopping?",
              "Is there any instance that can simultaneously be classified as both GarlicTopping and OnionTopping?",
              "Which classes are defined as disjoint with OnionTopping within the ontology?"
            ]
          },
          {
            "axiom": "GarlicTopping disjointWith SpinachTopping",
            "CQ": [
              "What logical separation is defined between GarlicTopping and SpinachTopping?",
              "Is there any topping that could simultaneously be classified as GarlicTopping and SpinachTopping?",
              "Which other topping classes are declared as mutually exclusive with SpinachTopping?"
            ]
          },
          {
            "axiom": "GarlicTopping disjointWith ArtichokeTopping",
            "CQ": [
              "How does the ontology represent the exclusivity between GarlicTopping and ArtichokeTopping?",
              "Is there any instance that can be classified as both GarlicTopping and ArtichokeTopping?",
              "Which toppings are defined as mutually exclusive with ArtichokeTopping?"
            ]
          },
          {
            "axiom": "GarlicTopping disjointWith PepperTopping",
            "CQ": [
              "How are GarlicTopping and PepperTopping related in terms of compatibility?",
              "Is it permissible for a pizza topping to be classified as both GarlicTopping and PepperTopping?",
              "Which toppings have been defined as mutually exclusive with GarlicTopping?"
            ]
          },
          {
            "axiom": "GarlicTopping disjointWith AsparagusTopping",
            "CQ": [
              "What ontological separation is specified between GarlicTopping and AsparagusTopping?",
              "Is it allowed for a pizza topping to be classified as both GarlicTopping and AsparagusTopping concurrently?",
              "Which topping classes are formally specified as mutually exclusive with AsparagusTopping within the ontology?"
            ]
          },
          {
            "axiom": "GarlicTopping disjointWith OliveTopping",
            "CQ": [
              "How does the ontology represent the mutual exclusivity of GarlicTopping and OliveTopping?",
              "Is it allowable for a single pizza to have both GarlicTopping and OliveTopping in the ontology?",
              "Which other topping classes are formally disjoint with GarlicTopping?"
            ]
          },
          {
            "axiom": "GarlicTopping disjointWith CaperTopping",
            "CQ": [
              "How does the ontology represent the incompatibility between GarlicTopping and CaperTopping?",
              "Is any pizza topping allowed to be both GarlicTopping and CaperTopping simultaneously according to the ontology?",
              "Which toppings are specified as disjoint with CaperTopping in the knowledge base?"
            ]
          },
          {
            "axiom": "GarlicTopping disjointWith MushroomTopping",
            "CQ": [
              "What is the ontological separation defined between GarlicTopping and MushroomTopping?",
              "Does the ontology allow any topping to simultaneously be a GarlicTopping and a MushroomTopping?",
              "Which toppings are specified as mutually exclusive with GarlicTopping?"
            ]
          },
          {
            "axiom": "GarlicTopping disjointWith PetitPoisTopping",
            "CQ": [
              "What logical separation is defined between GarlicTopping and PetitPoisTopping in the ontology?",
              "Is there any instance that can be classified as both GarlicTopping and PetitPoisTopping?",
              "Which topping classes are specified as disjoint with PetitPoisTopping?"
            ]
          },
          {
            "axiom": "GarlicTopping disjointWith TomatoTopping",
            "CQ": [
              "What is the ontological separation defined between GarlicTopping and TomatoTopping?",
              "Can a single pizza topping instance belong to both GarlicTopping and TomatoTopping categories simultaneously?",
              "Which toppings are formally specified as disjoint from GarlicTopping in the ontology?"
            ]
          },
          {
            "axiom": "GarlicTopping propertyRestrictions [hasSpiciness some Medium]",
            "CQ": [
              "Is it required that every GarlicTopping has at least one spiciness classified as Medium?",
              "Can a GarlicTopping exist without exhibiting any Medium level of spiciness?",
              "Does the definition of GarlicTopping entail the presence of Medium spiciness in at least one instance?"
            ]
          }
        ]
      },
      "MushroomTopping": {
        "axiom": {
          "subClassOf": [
            "VegetableTopping"
          ],
          "disjointWith": [
            "RocketTopping",
            "LeekTopping",
            "OnionTopping",
            "SpinachTopping",
            "GarlicTopping",
            "ArtichokeTopping",
            "PepperTopping",
            "AsparagusTopping",
            "OliveTopping",
            "CaperTopping",
            "PetitPoisTopping",
            "TomatoTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Mild]"
          ]
        },
        "description": "MushroomTopping is a subclass of VegetableTopping and is explicitly disjoint from other specific vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, and othersâ€”ensuring that no individual can simultaneously belong to more than one of these topping types. Furthermore, MushroomTopping is characterized by the property that it must have some level of mild spiciness (hasSpiciness some Mild). This formalization defines MushroomTopping as a mild-flavored vegetable topping that is distinct from other named vegetable toppings in the ontology.",
        "CQ": [
          {
            "axiom": "MushroomTopping subClassOf VegetableTopping",
            "CQ": [
              "Is MushroomTopping classified as a specific type of VegetableTopping?",
              "What general classes is MushroomTopping a specialization of?",
              "Which toppings fall under the category of VegetableTopping, with MushroomTopping as an example?"
            ]
          },
          {
            "axiom": "MushroomTopping disjointWith RocketTopping",
            "CQ": [
              "What is the formal distinction between MushroomTopping and RocketTopping within the ontology?",
              "Is it allowable for a single pizza topping to be classified as both MushroomTopping and RocketTopping?",
              "Which topping classes are asserted as disjoint with RocketTopping?"
            ]
          },
          {
            "axiom": "MushroomTopping disjointWith LeekTopping",
            "CQ": [
              "What logical separation is present between MushroomTopping and LeekTopping in the ontology?",
              "Can any pizza topping instance simultaneously be classified as both MushroomTopping and LeekTopping?",
              "Which topping categories are formally specified as disjoint with LeekTopping?"
            ]
          },
          {
            "axiom": "MushroomTopping disjointWith OnionTopping",
            "CQ": [
              "How does the ontology represent the separation between MushroomTopping and OnionTopping?",
              "Is there any instance that can simultaneously be classified as both MushroomTopping and OnionTopping?",
              "Which topping classes are formally defined as mutually exclusive with OnionTopping?"
            ]
          },
          {
            "axiom": "MushroomTopping disjointWith SpinachTopping",
            "CQ": [
              "How does the ontology represent the differentiation between MushroomTopping and SpinachTopping?",
              "Is there any possibility for a pizza topping to be classified as both MushroomTopping and SpinachTopping?",
              "Which toppings are specified as mutually exclusive with MushroomTopping?"
            ]
          },
          {
            "axiom": "MushroomTopping disjointWith GarlicTopping",
            "CQ": [
              "How does the ontology differentiate between MushroomTopping and GarlicTopping?",
              "Is it allowed for a single topping to be classified as both MushroomTopping and GarlicTopping?",
              "Which toppings are specified as mutually exclusive with GarlicTopping?"
            ]
          },
          {
            "axiom": "MushroomTopping disjointWith ArtichokeTopping",
            "CQ": [
              "How are MushroomTopping and ArtichokeTopping logically related within the ontology?",
              "Is there any instance that can simultaneously be MushroomTopping and ArtichokeTopping?",
              "Which topping classes are specified as disjoint with MushroomTopping?"
            ]
          },
          {
            "axiom": "MushroomTopping disjointWith PepperTopping",
            "CQ": [
              "How is the incompatibility between MushroomTopping and PepperTopping represented in the ontology?",
              "Is there an instance that can be both a MushroomTopping and a PepperTopping?",
              "Which topping types are explicitly defined as disjoint with MushroomTopping?"
            ]
          },
          {
            "axiom": "MushroomTopping disjointWith AsparagusTopping",
            "CQ": [
              "What is the asserted incompatibility between MushroomTopping and AsparagusTopping in the ontology?",
              "Can a single pizza have both MushroomTopping and AsparagusTopping simultaneously?",
              "Which toppings are defined as mutually exclusive with MushroomTopping?"
            ]
          },
          {
            "axiom": "MushroomTopping disjointWith OliveTopping",
            "CQ": [
              "What logical separation is present between MushroomTopping and OliveTopping in the ontology?",
              "Is any pizza topping classified simultaneously as both MushroomTopping and OliveTopping?",
              "Which topping classes are explicitly stated to be incompatible with OliveTopping?"
            ]
          },
          {
            "axiom": "MushroomTopping disjointWith CaperTopping",
            "CQ": [
              "How does the ontology specify the separation between MushroomTopping and CaperTopping?",
              "Is it allowable for a pizza to have both MushroomTopping and CaperTopping simultaneously?",
              "What toppings are formally disjoint with MushroomTopping in the ontology?"
            ]
          },
          {
            "axiom": "MushroomTopping disjointWith PetitPoisTopping",
            "CQ": [
              "What type of distinction is asserted between MushroomTopping and PetitPoisTopping in the ontology?",
              "Could an individual topping be classified as both MushroomTopping and PetitPoisTopping?",
              "Which topping classes are defined as incompatible with PetitPoisTopping?"
            ]
          },
          {
            "axiom": "MushroomTopping disjointWith TomatoTopping",
            "CQ": [
              "What ontological separation is asserted between MushroomTopping and TomatoTopping?",
              "Is there an instance that can simultaneously be classified as both MushroomTopping and TomatoTopping?",
              "Which topping types are formally specified as disjoint from TomatoTopping?"
            ]
          },
          {
            "axiom": "MushroomTopping propertyRestrictions [hasSpiciness some Mild]",
            "CQ": [
              "Must every MushroomTopping possess at least one spiciness classified as Mild?",
              "Is it required that MushroomTopping is associated with some instance of hasSpiciness equal to Mild?",
              "Can a MushroomTopping exist without having any Mild spiciness?"
            ]
          }
        ]
      },
      "PetitPoisTopping": {
        "axiom": {
          "subClassOf": [
            "VegetableTopping"
          ],
          "disjointWith": [
            "RocketTopping",
            "LeekTopping",
            "OnionTopping",
            "SpinachTopping",
            "GarlicTopping",
            "ArtichokeTopping",
            "PepperTopping",
            "AsparagusTopping",
            "OliveTopping",
            "CaperTopping",
            "MushroomTopping",
            "TomatoTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Mild]"
          ]
        },
        "description": "PetitPoisTopping is defined as a subclass of VegetableTopping and is explicitly disjoint with other vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, and TomatoToppingâ€”meaning no individual can simultaneously belong to PetitPoisTopping and any of these other topping classes. Additionally, PetitPoisTopping is characterized by the property restriction that it has some level of spiciness classified as Mild. This formalization ensures that PetitPoisTopping represents a unique, mildly spicy vegetable topping distinct from all other specified vegetable toppings.",
        "CQ": [
          {
            "axiom": "PetitPoisTopping subClassOf VegetableTopping",
            "CQ": [
              "Is PetitPoisTopping included as a more specific type within VegetableTopping?",
              "Which toppings fall under VegetableTopping, and does this include PetitPoisTopping?",
              "What higher-level categories encompass PetitPoisTopping?"
            ]
          },
          {
            "axiom": "PetitPoisTopping disjointWith RocketTopping",
            "CQ": [
              "How does the ontology specify the relationship between PetitPoisTopping and RocketTopping?",
              "Is there any entity that can be an instance of both PetitPoisTopping and RocketTopping?",
              "What toppings are formally declared as disjoint with RocketTopping within the ontology?"
            ]
          },
          {
            "axiom": "PetitPoisTopping disjointWith LeekTopping",
            "CQ": [
              "What formal constraint exists between PetitPoisTopping and LeekTopping in the ontology?",
              "Is it allowable for a single pizza to have both PetitPoisTopping and LeekTopping as toppings?",
              "Which classes are specified as disjoint with PetitPoisTopping?"
            ]
          },
          {
            "axiom": "PetitPoisTopping disjointWith OnionTopping",
            "CQ": [
              "How does the ontology represent the distinction between PetitPoisTopping and OnionTopping?",
              "Is it allowed for a pizza topping to be classified as both PetitPoisTopping and OnionTopping?",
              "Which topping classes are formally disjoint with OnionTopping?"
            ]
          },
          {
            "axiom": "PetitPoisTopping disjointWith SpinachTopping",
            "CQ": [
              "What formal distinction is made between PetitPoisTopping and SpinachTopping within the ontology?",
              "Is there any circumstance where a topping can be classified as both PetitPoisTopping and SpinachTopping?",
              "Which topping classes are declared to be mutually exclusive with SpinachTopping?"
            ]
          },
          {
            "axiom": "PetitPoisTopping disjointWith GarlicTopping",
            "CQ": [
              "What is the formal separation between PetitPoisTopping and GarlicTopping in the ontology?",
              "Can a topping instance belong to both PetitPoisTopping and GarlicTopping categories simultaneously?",
              "Which other topping types are defined as mutually exclusive with PetitPoisTopping?"
            ]
          },
          {
            "axiom": "PetitPoisTopping disjointWith ArtichokeTopping",
            "CQ": [
              "How does the ontology formally distinguish between PetitPoisTopping and ArtichokeTopping?",
              "Is there any topping that can be both PetitPoisTopping and ArtichokeTopping simultaneously?",
              "Which other topping classes are explicitly specified as disjoint with ArtichokeTopping?"
            ]
          },
          {
            "axiom": "PetitPoisTopping disjointWith PepperTopping",
            "CQ": [
              "What kind of separation is enforced between PetitPoisTopping and PepperTopping within the ontology?",
              "Is there any instance that may be classified as both PetitPoisTopping and PepperTopping?",
              "Which topping classes are explicitly specified as mutually exclusive with PepperTopping?"
            ]
          },
          {
            "axiom": "PetitPoisTopping disjointWith AsparagusTopping",
            "CQ": [
              "What logical constraint is defined between PetitPoisTopping and AsparagusTopping within the ontology?",
              "Is it permitted for an entity to be classified as both PetitPoisTopping and AsparagusTopping?",
              "Which topping classes are identified as mutually exclusive with AsparagusTopping?"
            ]
          },
          {
            "axiom": "PetitPoisTopping disjointWith OliveTopping",
            "CQ": [
              "How is the separation between PetitPoisTopping and OliveTopping represented within the ontology?",
              "Is there any instance that can simultaneously be classified as both PetitPoisTopping and OliveTopping?",
              "Which topping categories are modelled as mutually exclusive with PetitPoisTopping?"
            ]
          },
          {
            "axiom": "PetitPoisTopping disjointWith CaperTopping",
            "CQ": [
              "What differentiates PetitPoisTopping and CaperTopping in terms of class membership within the ontology?",
              "Is there any individual that can be classified as both PetitPoisTopping and CaperTopping simultaneously?",
              "Which toppings are explicitly specified as being disjoint with PetitPoisTopping?"
            ]
          },
          {
            "axiom": "PetitPoisTopping disjointWith MushroomTopping",
            "CQ": [
              "What logical separation is established between PetitPoisTopping and MushroomTopping in the ontology?",
              "Can a single pizza feature both PetitPoisTopping and MushroomTopping simultaneously?",
              "Which topping classes are declared as mutually exclusive with MushroomTopping?"
            ]
          },
          {
            "axiom": "PetitPoisTopping disjointWith TomatoTopping",
            "CQ": [
              "Are PetitPoisTopping and TomatoTopping mutually exclusive within the ontology?",
              "Does any topping instance belong to both PetitPoisTopping and TomatoTopping categories?",
              "Which topping classes are specified as disjoint with PetitPoisTopping?"
            ]
          },
          {
            "axiom": "PetitPoisTopping propertyRestrictions [hasSpiciness some Mild]",
            "CQ": [
              "Is it required that a PetitPoisTopping ingredient has at least one spiciness level classified as Mild?",
              "Does every PetitPoisTopping possess the property 'hasSpiciness' relating it to Mild spiciness?",
              "Can a PetitPoisTopping exist without any association to Mild spiciness?"
            ]
          }
        ]
      },
      "SpinachTopping": {
        "axiom": {
          "subClassOf": [
            "VegetableTopping"
          ],
          "disjointWith": [
            "RocketTopping",
            "LeekTopping",
            "OnionTopping",
            "GarlicTopping",
            "ArtichokeTopping",
            "PepperTopping",
            "AsparagusTopping",
            "OliveTopping",
            "CaperTopping",
            "MushroomTopping",
            "PetitPoisTopping",
            "TomatoTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Mild]"
          ]
        },
        "description": "SpinachTopping is defined as a subclass of VegetableTopping and is explicitly disjoint from a variety of other vegetable-based toppings, including RocketTopping, LeekTopping, OnionTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping. Individuals of this class must have at least one hasSpiciness property value that is Mild. This ensures that SpinachTopping exclusively refers to mild, spinach-based toppings that do not overlap with other vegetable toppings in the ontology.",
        "CQ": [
          {
            "axiom": "SpinachTopping subClassOf VegetableTopping",
            "CQ": [
              "Does SpinachTopping fall under the classification of VegetableTopping?",
              "What are the specific kinds of VegetableTopping, including SpinachTopping?",
              "Which higher-level categories include SpinachTopping as a member?"
            ]
          },
          {
            "axiom": "SpinachTopping disjointWith RocketTopping",
            "CQ": [
              "What is the formal distinction between SpinachTopping and RocketTopping within the ontology?",
              "Is it allowed for a pizza to have both SpinachTopping and RocketTopping simultaneously?",
              "Which classes are asserted to be disjoint with SpinachTopping?"
            ]
          },
          {
            "axiom": "SpinachTopping disjointWith LeekTopping",
            "CQ": [
              "How does the ontology define the incompatibility between SpinachTopping and LeekTopping?",
              "Is there any instance that can simultaneously be classified as SpinachTopping and LeekTopping?",
              "Which toppings are specified as mutually exclusive with LeekTopping?"
            ]
          },
          {
            "axiom": "SpinachTopping disjointWith OnionTopping",
            "CQ": [
              "How is SpinachTopping conceptually separated from OnionTopping according to the ontology?",
              "Is there any scenario in which a pizza can possess both SpinachTopping and OnionTopping?",
              "Which topping categories are stated to be mutually exclusive with SpinachTopping?"
            ]
          },
          {
            "axiom": "SpinachTopping disjointWith GarlicTopping",
            "CQ": [
              "How does the ontology represent the exclusivity between SpinachTopping and GarlicTopping?",
              "Is there any instance that can simultaneously qualify as both SpinachTopping and GarlicTopping?",
              "Which toppings are defined as mutually disjoint with SpinachTopping?"
            ]
          },
          {
            "axiom": "SpinachTopping disjointWith ArtichokeTopping",
            "CQ": [
              "How are SpinachTopping and ArtichokeTopping differentiated within the ontology?",
              "Is any topping instance allowed to belong to both SpinachTopping and ArtichokeTopping categories simultaneously?",
              "Which topping types are designated as disjoint with SpinachTopping?"
            ]
          },
          {
            "axiom": "SpinachTopping disjointWith PepperTopping",
            "CQ": [
              "What is the ontological separation between SpinachTopping and PepperTopping?",
              "Is it allowed for a single pizza topping to be classified as both SpinachTopping and PepperTopping?",
              "Which topping categories are explicitly modeled as mutually exclusive with SpinachTopping?"
            ]
          },
          {
            "axiom": "SpinachTopping disjointWith AsparagusTopping",
            "CQ": [
              "How does the ontology represent the exclusivity between SpinachTopping and AsparagusTopping?",
              "Is there any instance that can be classified as both SpinachTopping and AsparagusTopping?",
              "Which toppings are declared as disjoint with SpinachTopping?"
            ]
          },
          {
            "axiom": "SpinachTopping disjointWith OliveTopping",
            "CQ": [
              "What logical restriction separates SpinachTopping from OliveTopping in the ontology?",
              "Is it permitted for a pizza to have both SpinachTopping and OliveTopping at once?",
              "Which toppings are explicitly set as disjoint with OliveTopping?"
            ]
          },
          {
            "axiom": "SpinachTopping disjointWith CaperTopping",
            "CQ": [
              "How is the incompatibility between SpinachTopping and CaperTopping represented in the ontology?",
              "Is it allowed for a pizza to have both SpinachTopping and CaperTopping simultaneously?",
              "Which other toppings, in addition to CaperTopping, are specified as disjoint with SpinachTopping?"
            ]
          },
          {
            "axiom": "SpinachTopping disjointWith MushroomTopping",
            "CQ": [
              "How does the ontology specify the separation between SpinachTopping and MushroomTopping?",
              "Is any topping instance allowed to be classified as both SpinachTopping and MushroomTopping?",
              "Which toppings in the ontology are defined as mutually exclusive with MushroomTopping?"
            ]
          },
          {
            "axiom": "SpinachTopping disjointWith PetitPoisTopping",
            "CQ": [
              "How does the ontology formally differentiate between SpinachTopping and PetitPoisTopping?",
              "Is it permissible for a pizza to include both SpinachTopping and PetitPoisTopping simultaneously?",
              "Which toppings are declared as mutually exclusive with SpinachTopping?"
            ]
          },
          {
            "axiom": "SpinachTopping disjointWith TomatoTopping",
            "CQ": [
              "How does the ontology represent the incompatibility between SpinachTopping and TomatoTopping?",
              "Is it allowed for a pizza topping to be classified as both SpinachTopping and TomatoTopping simultaneously?",
              "Which toppings are explicitly specified as disjoint with TomatoTopping in the ontology?"
            ]
          },
          {
            "axiom": "SpinachTopping propertyRestrictions [hasSpiciness some Mild]",
            "CQ": [
              "Is it required that every SpinachTopping has some degree of spiciness classified as Mild?",
              "Can a SpinachTopping exist without having the property hasSpiciness with at least one Mild value?",
              "Does the definition of SpinachTopping imply the presence of at least one hasSpiciness relation to Mild?"
            ]
          }
        ]
      },
      "RosemaryTopping": {
        "axiom": {
          "subClassOf": [
            "HerbSpiceTopping"
          ],
          "disjointWith": [
            "CajunSpiceTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Mild]"
          ]
        },
        "description": "RosemaryTopping is defined as a subclass of HerbSpiceTopping, representing toppings that are both herbal and spicy in nature. This class is explicitly disjoint with CajunSpiceTopping, ensuring that no topping can be classified simultaneously as RosemaryTopping and CajunSpiceTopping. RosemaryTopping is further characterized by the property restriction that it must have at least some mild spiciness, distinguishing it from toppings with no or higher levels of spiciness.",
        "CQ": [
          {
            "axiom": "RosemaryTopping subClassOf HerbSpiceTopping",
            "CQ": [
              "Does RosemaryTopping fall under the broader classification of HerbSpiceTopping?",
              "Which toppings are more specialized than HerbSpiceTopping, such as RosemaryTopping?",
              "What general class does RosemaryTopping directly originate from?"
            ]
          },
          {
            "axiom": "RosemaryTopping disjointWith CajunSpiceTopping",
            "CQ": [
              "How does the ontology distinguish between RosemaryTopping and CajunSpiceTopping?",
              "Is it permitted for a single topping to be both RosemaryTopping and CajunSpiceTopping according to the ontology?",
              "What other topping categories are asserted as mutually exclusive with RosemaryTopping?"
            ]
          },
          {
            "axiom": "RosemaryTopping propertyRestrictions [hasSpiciness some Mild]",
            "CQ": [
              "Is every RosemaryTopping required to have a spiciness level that is Mild?",
              "Can a RosemaryTopping exist without any mild spiciness property?",
              "Must all instances of RosemaryTopping possess at least one spiciness classified as Mild?"
            ]
          }
        ]
      },
      "NutTopping": {
        "axiom": {
          "subClassOf": [
            "PizzaTopping"
          ],
          "disjointWith": [
            "MeatTopping",
            "SauceTopping",
            "VegetableTopping",
            "CheeseTopping",
            "FishTopping",
            "HerbSpiceTopping",
            "FruitTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Mild]"
          ]
        },
        "description": "NutTopping is defined as a subclass of PizzaTopping, representing pizza toppings that consist specifically of nuts. It is explicitly disjoint with MeatTopping, SauceTopping, VegetableTopping, CheeseTopping, FishTopping, HerbSpiceTopping, and FruitTopping, ensuring that no topping instance can simultaneously belong to these other topping categories. Additionally, every NutTopping must have at least some level of mild spiciness, as constrained by the property restriction (hasSpiciness some Mild).",
        "CQ": [
          {
            "axiom": "NutTopping subClassOf PizzaTopping",
            "CQ": [
              "Is NutTopping classified under the broader group of PizzaTopping?",
              "What types of toppings fall under PizzaTopping, specifically including NutTopping?",
              "Which higher-level topping categories encompass NutTopping?"
            ]
          },
          {
            "axiom": "NutTopping disjointWith MeatTopping",
            "CQ": [
              "What ontological separation is defined between NutTopping and MeatTopping?",
              "Is there any topping that qualifies as both NutTopping and MeatTopping?",
              "Which topping categories are formally disjoint with NutTopping?"
            ]
          },
          {
            "axiom": "NutTopping disjointWith SauceTopping",
            "CQ": [
              "How does the ontology differentiate between NutTopping and SauceTopping?",
              "Is it permissible for a topping to be classified as both NutTopping and SauceTopping?",
              "What topping categories are defined as mutually exclusive with NutTopping?"
            ]
          },
          {
            "axiom": "NutTopping disjointWith VegetableTopping",
            "CQ": [
              "What logical separation is defined between NutTopping and VegetableTopping within the ontology?",
              "Is there any topping that can simultaneously be classified as both NutTopping and VegetableTopping?",
              "Which topping classes, apart from VegetableTopping, are formally incompatible with NutTopping?"
            ]
          },
          {
            "axiom": "NutTopping disjointWith CheeseTopping",
            "CQ": [
              "Are NutTopping and CheeseTopping considered mutually exclusive in the ontology?",
              "Is it permitted for a pizza topping to be classified as both a NutTopping and a CheeseTopping?",
              "Which topping classes are defined as disjoint with CheeseTopping?"
            ]
          },
          {
            "axiom": "NutTopping disjointWith FishTopping",
            "CQ": [
              "How does the ontology represent the incompatibility between NutTopping and FishTopping?",
              "Is it allowed for a pizza topping to be classified simultaneously as both NutTopping and FishTopping?",
              "Which topping classes are stated as disjoint from FishTopping in the ontology?"
            ]
          },
          {
            "axiom": "NutTopping disjointWith HerbSpiceTopping",
            "CQ": [
              "What ontological constraint separates NutTopping and HerbSpiceTopping?",
              "Is there any topping that can simultaneously be a NutTopping and a HerbSpiceTopping?",
              "Which topping classes have been defined as disjoint with HerbSpiceTopping?"
            ]
          },
          {
            "axiom": "NutTopping disjointWith FruitTopping",
            "CQ": [
              "How does the ontology formally separate NutTopping and FruitTopping?",
              "Is any topping permitted to be classified as both a NutTopping and a FruitTopping?",
              "What other topping categories are stated to be mutually exclusive with NutTopping?"
            ]
          },
          {
            "axiom": "NutTopping propertyRestrictions [hasSpiciness some Mild]",
            "CQ": [
              "Is it necessary for a NutTopping to have at least one hasSpiciness property value that is Mild?",
              "Must every instance of NutTopping be associated with some mild level of spiciness through the hasSpiciness property?",
              "Does the presence of a NutTopping imply the existence of a hasSpiciness relationship to Mild?"
            ]
          }
        ]
      },
      "FourCheesesTopping": {
        "axiom": {
          "subClassOf": [
            "CheeseTopping"
          ],
          "disjointWith": [
            "GoatsCheeseTopping",
            "MozzarellaTopping",
            "GorgonzolaTopping",
            "ParmesanTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Mild]"
          ]
        },
        "description": "FourCheesesTopping is defined as a subclass of CheeseTopping, representing a specific type of cheese topping distinguished by its composition of four cheeses. It is declared disjoint with GoatsCheeseTopping, MozzarellaTopping, GorgonzolaTopping, and ParmesanTopping, meaning an individual topping cannot simultaneously be classified as FourCheesesTopping and any of these other specific cheese toppings. Additionally, FourCheesesTopping must have a spiciness level that is at least mildly spicy, as specified by the restriction that it has some Mild spiciness.",
        "CQ": [
          {
            "axiom": "FourCheesesTopping subClassOf CheeseTopping",
            "CQ": [
              "Is FourCheesesTopping categorized as a type of CheeseTopping?",
              "Which subclasses are specified under CheeseTopping, such as FourCheesesTopping?",
              "What are the broader categories that include FourCheesesTopping?"
            ]
          },
          {
            "axiom": "FourCheesesTopping disjointWith GoatsCheeseTopping",
            "CQ": [
              "What is the logical distinction defined between FourCheesesTopping and GoatsCheeseTopping?",
              "Is there any topping that can simultaneously be classified as both FourCheesesTopping and GoatsCheeseTopping?",
              "Which other topping types are declared as disjoint with GoatsCheeseTopping in the ontology?"
            ]
          },
          {
            "axiom": "FourCheesesTopping disjointWith MozzarellaTopping",
            "CQ": [
              "How does the ontology represent the exclusivity between FourCheesesTopping and MozzarellaTopping?",
              "Is there any instance that can be both a FourCheesesTopping and a MozzarellaTopping?",
              "Which other topping classes are formally stated as incompatible with FourCheesesTopping?"
            ]
          },
          {
            "axiom": "FourCheesesTopping disjointWith GorgonzolaTopping",
            "CQ": [
              "What logical separation is defined between FourCheesesTopping and GorgonzolaTopping in the ontology?",
              "Is there any topping that can simultaneously be classified as FourCheesesTopping and GorgonzolaTopping?",
              "Which toppings are asserted as disjoint with GorgonzolaTopping?"
            ]
          },
          {
            "axiom": "FourCheesesTopping disjointWith ParmesanTopping",
            "CQ": [
              "What logical separation is defined between FourCheesesTopping and ParmesanTopping in the ontology?",
              "Can a pizza feature both FourCheesesTopping and ParmesanTopping as toppings?",
              "Which topping classes are stated to be incompatible with ParmesanTopping?"
            ]
          },
          {
            "axiom": "FourCheesesTopping propertyRestrictions [hasSpiciness some Mild]",
            "CQ": [
              "Must every FourCheesesTopping have at least one hasSpiciness relationship to Mild?",
              "Is it required for a FourCheesesTopping to exhibit some level of spiciness classified as Mild?",
              "Does the existence of a Mild spiciness property suffice for an instance to be considered a FourCheesesTopping?"
            ]
          }
        ]
      },
      "GoatsCheeseTopping": {
        "axiom": {
          "subClassOf": [
            "CheeseTopping"
          ],
          "disjointWith": [
            "MozzarellaTopping",
            "GorgonzolaTopping",
            "ParmesanTopping",
            "FourCheesesTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Mild]"
          ]
        },
        "description": "GoatsCheeseTopping is defined as a subclass of CheeseTopping and is explicitly disjoint with MozzarellaTopping, GorgonzolaTopping, ParmesanTopping, and FourCheesesTopping, meaning an individual topping cannot simultaneously belong to any of these classes. GoatsCheeseTopping is characterized by the property that it has some degree of mild spiciness (hasSpiciness some Mild), indicating that any topping of this class is mildly spicy.",
        "CQ": [
          {
            "axiom": "GoatsCheeseTopping subClassOf CheeseTopping",
            "CQ": [
              "Is GoatsCheeseTopping included under the category of CheeseTopping?",
              "Which varieties fall under the classification of CheeseTopping?",
              "What higher-level categories encompass GoatsCheeseTopping?"
            ]
          },
          {
            "axiom": "GoatsCheeseTopping disjointWith MozzarellaTopping",
            "CQ": [
              "What ontological separation exists between GoatsCheeseTopping and MozzarellaTopping?",
              "Is any pizza topping permitted to be both GoatsCheeseTopping and MozzarellaTopping?",
              "Which topping classes are explicitly specified as incompatible with MozzarellaTopping?"
            ]
          },
          {
            "axiom": "GoatsCheeseTopping disjointWith GorgonzolaTopping",
            "CQ": [
              "How does the ontology differentiate between GoatsCheeseTopping and GorgonzolaTopping?",
              "Can a pizza ingredient be classified as both GoatsCheeseTopping and GorgonzolaTopping?",
              "Which cheese topping classes are explicitly defined as disjoint with GorgonzolaTopping?"
            ]
          },
          {
            "axiom": "GoatsCheeseTopping disjointWith ParmesanTopping",
            "CQ": [
              "How does the ontology specify the separation between GoatsCheeseTopping and ParmesanTopping?",
              "Is it allowable within the ontology for a topping to be classified as both GoatsCheeseTopping and ParmesanTopping?",
              "Which topping categories are asserted to be disjoint with ParmesanTopping?"
            ]
          },
          {
            "axiom": "GoatsCheeseTopping disjointWith FourCheesesTopping",
            "CQ": [
              "What ontological separation exists between GoatsCheeseTopping and FourCheesesTopping?",
              "Can an individual topping instance be classified as both GoatsCheeseTopping and FourCheesesTopping?",
              "Which toppings are defined as mutually exclusive with GoatsCheeseTopping within the ontology?"
            ]
          },
          {
            "axiom": "GoatsCheeseTopping propertyRestrictions [hasSpiciness some Mild]",
            "CQ": [
              "Is it required that any GoatsCheeseTopping must exhibit at least one instance of the hasSpiciness property with value Mild?",
              "Does every GoatsCheeseTopping have an associated spiciness level that includes Mild?",
              "Can a GoatsCheeseTopping exist without being characterized by the hasSpiciness property set to Mild?"
            ]
          }
        ]
      },
      "MozzarellaTopping": {
        "axiom": {
          "subClassOf": [
            "CheeseTopping"
          ],
          "disjointWith": [
            "GoatsCheeseTopping",
            "GorgonzolaTopping",
            "ParmesanTopping",
            "FourCheesesTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Mild]",
            "[hasCountryOfOrigin hasValue Italy]"
          ]
        },
        "description": "MozzarellaTopping is a subclass of CheeseTopping, representing a cheese-based topping specifically characterized by its mild spiciness and Italian origin. It is explicitly disjoint from GoatsCheeseTopping, GorgonzolaTopping, ParmesanTopping, and FourCheesesTopping, ensuring that no individual can simultaneously be an instance of MozzarellaTopping and any of these other cheese topping classes. All individuals of MozzarellaTopping are associated with a mild level of spiciness and must originate from Italy.",
        "CQ": [
          {
            "axiom": "MozzarellaTopping subClassOf CheeseTopping",
            "CQ": [
              "Is MozzarellaTopping categorized under the group of CheeseTopping?",
              "Which particular toppings fall under CheeseTopping, such as MozzarellaTopping?",
              "What higher-level classes encompass MozzarellaTopping?"
            ]
          },
          {
            "axiom": "MozzarellaTopping disjointWith GoatsCheeseTopping",
            "CQ": [
              "What is the logical relationship specified between MozzarellaTopping and GoatsCheeseTopping in the ontology?",
              "Is it allowed for a pizza topping to be classified simultaneously as MozzarellaTopping and GoatsCheeseTopping?",
              "Which topping classes are explicitly defined as disjoint with MozzarellaTopping?"
            ]
          },
          {
            "axiom": "MozzarellaTopping disjointWith GorgonzolaTopping",
            "CQ": [
              "What is the defined separation between MozzarellaTopping and GorgonzolaTopping within the ontology?",
              "Is there any instance that could simultaneously be considered both a MozzarellaTopping and a GorgonzolaTopping?",
              "Which toppings, besides MozzarellaTopping, are specified as incompatible with GorgonzolaTopping?"
            ]
          },
          {
            "axiom": "MozzarellaTopping disjointWith ParmesanTopping",
            "CQ": [
              "Are MozzarellaTopping and ParmesanTopping defined as mutually exclusive classes in the ontology?",
              "Is it permissible for a pizza to include both MozzarellaTopping and ParmesanTopping simultaneously?",
              "Which topping categories are specified as disjoint with ParmesanTopping?"
            ]
          },
          {
            "axiom": "MozzarellaTopping disjointWith FourCheesesTopping",
            "CQ": [
              "How does the ontology differentiate between MozzarellaTopping and FourCheesesTopping?",
              "Is there any scenario where a topping is both MozzarellaTopping and FourCheesesTopping?",
              "Which topping types are asserted as mutually exclusive with FourCheesesTopping?"
            ]
          },
          {
            "axiom": "MozzarellaTopping propertyRestrictions [hasSpiciness some Mild]",
            "CQ": [
              "Is it required that every MozzarellaTopping has at least some level of spiciness categorized as Mild?",
              "Can a MozzarellaTopping exist without having the hasSpiciness property set to Mild?",
              "Does the presence of MozzarellaTopping entail that it must be associated with a Mild spiciness?"
            ]
          },
          {
            "axiom": "MozzarellaTopping propertyRestrictions [hasCountryOfOrigin hasValue Italy]",
            "CQ": [
              "Is it required that MozzarellaTopping has the country of origin property set to Italy?",
              "Can MozzarellaTopping have a country of origin value other than Italy?",
              "Does the ontology allow MozzarellaTopping to originate from any country besides Italy?"
            ]
          }
        ]
      },
      "HotSpicedBeefTopping": {
        "axiom": {
          "subClassOf": [
            "MeatTopping"
          ],
          "disjointWith": [
            "PeperoniSausageTopping",
            "HamTopping",
            "ChickenTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Hot]"
          ]
        },
        "description": "HotSpicedBeefTopping is defined as a subclass of MeatTopping, representing a specific type of meat-based pizza topping. It is disjoint with PeperoniSausageTopping, HamTopping, and ChickenTopping, meaning no individual topping can simultaneously belong to any of these classes and HotSpicedBeefTopping. Members of this class are characterized by having at least some degree of spiciness classified as Hot, distinguishing them from other meat toppings in the ontology.",
        "CQ": [
          {
            "axiom": "HotSpicedBeefTopping subClassOf MeatTopping",
            "CQ": [
              "Is HotSpicedBeefTopping classified as a type of MeatTopping?",
              "What toppings are specialized forms under MeatTopping, such as HotSpicedBeefTopping?",
              "Which broader topping categories include HotSpicedBeefTopping as a member?"
            ]
          },
          {
            "axiom": "HotSpicedBeefTopping disjointWith PeperoniSausageTopping",
            "CQ": [
              "How does the ontology specify the mutual exclusivity of HotSpicedBeefTopping and PeperoniSausageTopping?",
              "Is there any topping that can simultaneously be classified as HotSpicedBeefTopping and PeperoniSausageTopping?",
              "Which other topping classes are declared to be disjoint with HotSpicedBeefTopping?"
            ]
          },
          {
            "axiom": "HotSpicedBeefTopping disjointWith HamTopping",
            "CQ": [
              "How does the ontology formally separate HotSpicedBeefTopping from HamTopping?",
              "Is there any topping instance that can simultaneously be classified as both HotSpicedBeefTopping and HamTopping?",
              "Which classes are explicitly stated as mutually exclusive with HamTopping?"
            ]
          },
          {
            "axiom": "HotSpicedBeefTopping disjointWith ChickenTopping",
            "CQ": [
              "What logical separation is defined between HotSpicedBeefTopping and ChickenTopping in the ontology?",
              "Is there any instance that can be both a HotSpicedBeefTopping and a ChickenTopping?",
              "Which topping classes, aside from ChickenTopping, are declared as mutually exclusive with HotSpicedBeefTopping?"
            ]
          },
          {
            "axiom": "HotSpicedBeefTopping propertyRestrictions [hasSpiciness some Hot]",
            "CQ": [
              "Must every HotSpicedBeefTopping have at least one hasSpiciness property value that is Hot?",
              "Is it necessary for HotSpicedBeefTopping to be associated with some level of hot spiciness via the hasSpiciness property?",
              "Can a HotSpicedBeefTopping exist without having the hasSpiciness property filled with a Hot value?"
            ]
          }
        ]
      },
      "JalapenoPepperTopping": {
        "axiom": {
          "subClassOf": [
            "PepperTopping"
          ],
          "disjointWith": [
            "SweetPepperTopping",
            "GreenPepperTopping",
            "PeperonataTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Hot]"
          ]
        },
        "description": "JalapenoPepperTopping is formally defined as a subclass of PepperTopping, indicating that it inherits all general characteristics of pepper-based toppings. It is explicitly disjoint with SweetPepperTopping, GreenPepperTopping, and PeperonataTopping, meaning that no individual can simultaneously be an instance of JalapenoPepperTopping and any of these other topping types. Additionally, this class is characterized by the property restriction that every JalapenoPepperTopping must exhibit some level of hot spiciness, ensuring that all members are differentiated by their distinctly hot flavor profile.",
        "CQ": [
          {
            "axiom": "JalapenoPepperTopping subClassOf PepperTopping",
            "CQ": [
              "Does JalapenoPepperTopping belong to the class of PepperTopping?",
              "Which toppings fall under the classification of PepperTopping, such as JalapenoPepperTopping?",
              "Under which higher-level classes would you categorize JalapenoPepperTopping?"
            ]
          },
          {
            "axiom": "JalapenoPepperTopping disjointWith SweetPepperTopping",
            "CQ": [
              "How does the ontology differentiate between JalapenoPepperTopping and SweetPepperTopping?",
              "Is there an instance that can be both JalapenoPepperTopping and SweetPepperTopping?",
              "What other topping classes are declared as disjoint with SweetPepperTopping?"
            ]
          },
          {
            "axiom": "JalapenoPepperTopping disjointWith GreenPepperTopping",
            "CQ": [
              "How does the ontology specify the separation between JalapenoPepperTopping and GreenPepperTopping?",
              "Is there any scenario where a topping can be classified as both JalapenoPepperTopping and GreenPepperTopping?",
              "Which topping classes are defined as mutually exclusive with GreenPepperTopping?"
            ]
          },
          {
            "axiom": "JalapenoPepperTopping disjointWith PeperonataTopping",
            "CQ": [
              "How does the ontology differentiate between JalapenoPepperTopping and PeperonataTopping?",
              "Is it allowed for a pizza to simultaneously include both JalapenoPepperTopping and PeperonataTopping?",
              "Which topping categories are specified as mutually exclusive with PeperonataTopping?"
            ]
          },
          {
            "axiom": "JalapenoPepperTopping propertyRestrictions [hasSpiciness some Hot]",
            "CQ": [
              "Must every JalapenoPepperTopping have at least one instance of spiciness classified as Hot?",
              "Is it required for JalapenoPepperTopping to possess the hasSpiciness property associated with Hot?",
              "Can JalapenoPepperTopping exist without being connected to Hot via the hasSpiciness property?"
            ]
          }
        ]
      },
      "PeperonataTopping": {
        "axiom": {
          "subClassOf": [
            "PepperTopping"
          ],
          "disjointWith": [
            "SweetPepperTopping",
            "GreenPepperTopping",
            "JalapenoPepperTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Medium]"
          ]
        },
        "description": "PeperonataTopping is defined as a subclass of PepperTopping, meaning it inherits all characteristics typical of pepper-based pizza toppings. It is explicitly disjoint with SweetPepperTopping, GreenPepperTopping, and JalapenoPepperTopping, so no individual can simultaneously belong to any of those classes and PeperonataTopping. Every instance of PeperonataTopping is required to have at least some medium level of spiciness, as specified by its property restriction on hasSpiciness. This ensures that PeperonataTopping is uniquely distinguished by both its type within pepper toppings and its characteristic spiciness.",
        "CQ": [
          {
            "axiom": "PeperonataTopping subClassOf PepperTopping",
            "CQ": [
              "Is PeperonataTopping classified under the broader category of PepperTopping?",
              "Which toppings are specified as subclasses of PepperTopping, such as PeperonataTopping?",
              "What broader topping categories encompass PeperonataTopping?"
            ]
          },
          {
            "axiom": "PeperonataTopping disjointWith SweetPepperTopping",
            "CQ": [
              "What ontological differentiation is made between PeperonataTopping and SweetPepperTopping?",
              "Is it permitted for a topping to be classified as both PeperonataTopping and SweetPepperTopping?",
              "Which toppings are specifically stated to be disjoint with PeperonataTopping?"
            ]
          },
          {
            "axiom": "PeperonataTopping disjointWith GreenPepperTopping",
            "CQ": [
              "How does the ontology represent the distinction between PeperonataTopping and GreenPepperTopping?",
              "Can a single pizza have both PeperonataTopping and GreenPepperTopping according to the ontology?",
              "Which toppings are specified as disjoint with PeperonataTopping?"
            ]
          },
          {
            "axiom": "PeperonataTopping disjointWith JalapenoPepperTopping",
            "CQ": [
              "How does the ontology define the separation between PeperonataTopping and JalapenoPepperTopping?",
              "Is it permissible for a single topping instance to be classified as both PeperonataTopping and JalapenoPepperTopping?",
              "Which topping classes are specified as disjoint with PeperonataTopping?"
            ]
          },
          {
            "axiom": "PeperonataTopping propertyRestrictions [hasSpiciness some Medium]",
            "CQ": [
              "Must every PeperonataTopping have at least one hasSpiciness property with Medium as its value?",
              "Can a PeperonataTopping exist without being associated with Medium spiciness through the hasSpiciness property?",
              "Is it a requirement that PeperonataTopping be linked to Medium spiciness by means of the hasSpiciness property?"
            ]
          }
        ]
      },
      "HotGreenPepperTopping": {
        "axiom": {
          "subClassOf": [
            "GreenPepperTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Hot]"
          ]
        },
        "description": "HotGreenPepperTopping is a subclass of GreenPepperTopping, defined by the property that it has some level of spiciness classified as Hot. This means that all individuals of this class are green pepper toppings that possess hot spiciness, distinguishing them from milder varieties of green pepper toppings.",
        "CQ": [
          {
            "axiom": "HotGreenPepperTopping subClassOf GreenPepperTopping",
            "CQ": [
              "Does HotGreenPepperTopping fall within the category defined by GreenPepperTopping?",
              "Which toppings are classified as more specific than GreenPepperTopping, such as HotGreenPepperTopping?",
              "Under which general topping categories does HotGreenPepperTopping reside?"
            ]
          },
          {
            "axiom": "HotGreenPepperTopping propertyRestrictions [hasSpiciness some Hot]",
            "CQ": [
              "Is every HotGreenPepperTopping required to have a spiciness level that includes some instance of Hot?",
              "Can a HotGreenPepperTopping exist that does not possess the hasSpiciness property with a value classified as Hot?",
              "Does the presence of the hasSpiciness property with Hot necessarily characterize all instances of HotGreenPepperTopping?"
            ]
          }
        ]
      },
      "IceCream": {
        "axiom": {
          "subClassOf": [
            "Food"
          ],
          "disjointWith": [
            "Pizza",
            "PizzaTopping",
            "PizzaBase"
          ],
          "propertyRestrictions": [
            "[hasTopping some FruitTopping]"
          ]
        },
        "description": "IceCream is defined as a subclass of Food, and is explicitly disjoint with Pizza, PizzaTopping, and PizzaBase, ensuring that no individual can simultaneously belong to any of these classes. All members of the IceCream class must have at least one topping from FruitTopping, as specified by the property restriction (hasTopping some FruitTopping). The current modeling highlights a domain constraint issue: since the hasTopping property has Pizza as its domain, any use of hasTopping causes the reasoner to infer membership in Pizza. Combined with the disjointness between Pizza and IceCream, this results in a logical inconsistency, illustrating the importance of carefully aligning property domains with intended class usage.",
        "CQ": [
          {
            "axiom": "IceCream subClassOf Food",
            "CQ": [
              "Is IceCream classified under the broader category of Food?",
              "Which categories within Food encompass IceCream as a specific type?",
              "What are the more specific types that fall under Food, including IceCream?"
            ]
          },
          {
            "axiom": "IceCream disjointWith Pizza",
            "CQ": [
              "How is the concept of IceCream related to the concept of Pizza within the ontology?",
              "Is there any instance that could be simultaneously classified as both IceCream and Pizza?",
              "Which classes are specified as disjoint with IceCream in the ontology?"
            ]
          },
          {
            "axiom": "IceCream disjointWith PizzaTopping",
            "CQ": [
              "What logical separation is defined between IceCream and PizzaTopping within the ontology?",
              "Is an entity allowed to belong simultaneously to the classes IceCream and PizzaTopping?",
              "Which classes, aside from PizzaTopping, are specified as mutually exclusive with IceCream?"
            ]
          },
          {
            "axiom": "IceCream disjointWith PizzaBase",
            "CQ": [
              "How does the ontology differentiate between IceCream and PizzaBase?",
              "Is any individual allowed to be classified as both IceCream and PizzaBase within the ontology?",
              "What are the classes specified as disjoint with PizzaBase?"
            ]
          },
          {
            "axiom": "IceCream propertyRestrictions [hasTopping some FruitTopping]",
            "CQ": [
              "Is it required for every IceCream to include at least one topping that is a FruitTopping?",
              "Can an IceCream exist without having any FruitTopping as a topping?",
              "Does the presence of a FruitTopping as a topping suffice for something to be classified as IceCream?"
            ]
          }
        ]
      },
      "ParmaHamTopping": {
        "axiom": {
          "subClassOf": [
            "HamTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Mild]"
          ]
        },
        "description": "ParmaHamTopping is defined as a subclass of HamTopping. It is further characterized by the restriction that it must have at least some level of spiciness classified as Mild. This ensures that any individual belonging to the ParmaHamTopping class represents a type of ham topping distinguished by mild spiciness.",
        "CQ": [
          {
            "axiom": "ParmaHamTopping subClassOf HamTopping",
            "CQ": [
              "Is ParmaHamTopping categorized as a specialized form of HamTopping?",
              "What toppings are subclasses of HamTopping, including ParmaHamTopping?",
              "Which broader categories encompass ParmaHamTopping?"
            ]
          },
          {
            "axiom": "ParmaHamTopping propertyRestrictions [hasSpiciness some Mild]",
            "CQ": [
              "Is every ParmaHamTopping required to have at least one level of spiciness classified as Mild?",
              "Can a ParmaHamTopping exist without any Mild spiciness level?",
              "Does the definition of ParmaHamTopping allow for spiciness levels other than Mild, provided that at least one is Mild?"
            ]
          }
        ]
      },
      "SlicedTomatoTopping": {
        "axiom": {
          "subClassOf": [
            "TomatoTopping"
          ],
          "disjointWith": [
            "SundriedTomatoTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Mild]"
          ]
        },
        "description": "SlicedTomatoTopping is defined as a subclass of TomatoTopping and is explicitly disjoint with SundriedTomatoTopping, ensuring that no individual can be both a SlicedTomatoTopping and a SundriedTomatoTopping. Members of this class are characterized by the property that they must have at least some level of mild spiciness, as specified by the hasSpiciness restriction.",
        "CQ": [
          {
            "axiom": "SlicedTomatoTopping subClassOf TomatoTopping",
            "CQ": [
              "Is SlicedTomatoTopping classified under the category of TomatoTopping?",
              "Which topping types fall under TomatoTopping, such as SlicedTomatoTopping?",
              "What are the broader categories that encompass SlicedTomatoTopping?"
            ]
          },
          {
            "axiom": "SlicedTomatoTopping disjointWith SundriedTomatoTopping",
            "CQ": [
              "How does the ontology formally distinguish between SlicedTomatoTopping and SundriedTomatoTopping?",
              "Is there any topping that can simultaneously be classified as both SlicedTomatoTopping and SundriedTomatoTopping?",
              "Which topping classes are defined as mutually exclusive with SlicedTomatoTopping?"
            ]
          },
          {
            "axiom": "SlicedTomatoTopping propertyRestrictions [hasSpiciness some Mild]",
            "CQ": [
              "Must a SlicedTomatoTopping possess the property hasSpiciness with at least some value classified as Mild?",
              "Does every instance of SlicedTomatoTopping necessarily have some form of spiciness level that is Mild?",
              "Can a SlicedTomatoTopping exist without being associated to Mild via the hasSpiciness property?"
            ]
          }
        ]
      },
      "SultanaTopping": {
        "axiom": {
          "subClassOf": [
            "FruitTopping"
          ],
          "propertyRestrictions": [
            "[hasSpiciness some Medium]"
          ]
        },
        "description": "SultanaTopping is defined as a subclass of FruitTopping. Members of this class are characterized by having a spiciness property that must include at least some medium spiciness. This ensures that any SultanaTopping instance is a type of fruit topping specifically associated with a medium level of spiciness.",
        "CQ": [
          {
            "axiom": "SultanaTopping subClassOf FruitTopping",
            "CQ": [
              "Is SultanaTopping classified as a kind of FruitTopping?",
              "What toppings are considered subtypes of FruitTopping, including SultanaTopping?",
              "Which higher-level topping categories encompass SultanaTopping?"
            ]
          },
          {
            "axiom": "SultanaTopping propertyRestrictions [hasSpiciness some Medium]",
            "CQ": [
              "Must every SultanaTopping have at least one spiciness value classified as Medium?",
              "Is it required for a SultanaTopping to possess the property hasSpiciness with an instance of Medium?",
              "Can a SultanaTopping exist without being associated with Medium spiciness through hasSpiciness?"
            ]
          }
        ]
      },
      "NonVegetarianPizza": {
        "axiom": {
          "disjointWith": [
            "VegetarianPizza"
          ],
          "equivalentClass": [
            "(Pizza and not VegetarianPizza)"
          ]
        },
        "description": "NonVegetarianPizza is formally defined as any Pizza that is not a VegetarianPizza. It is explicitly disjoint with VegetarianPizza, ensuring that no individual pizza can be both a NonVegetarianPizza and a VegetarianPizza. The equivalence axiom specifies that NonVegetarianPizza includes all and only those pizzas that are instances of Pizza but not classified as VegetarianPizza.",
        "CQ": [
          {
            "axiom": "NonVegetarianPizza disjointWith VegetarianPizza",
            "CQ": [
              "Is any overlap permitted between the classifications of NonVegetarianPizza and VegetarianPizza?",
              "Which pizza types are defined as mutually exclusive with NonVegetarianPizza in the ontology?",
              "Does the ontology allow for an individual pizza to belong to both the NonVegetarianPizza and VegetarianPizza classes?"
            ]
          },
          {
            "axiom": "NonVegetarianPizza equivalentClass (Pizza and not VegetarianPizza)",
            "CQ": [
              "Is every NonVegetarianPizza necessarily a Pizza that is not a VegetarianPizza?",
              "Is NonVegetarianPizza logically defined as the intersection of Pizza and the complement of VegetarianPizza?",
              "Does the class NonVegetarianPizza exclude any Pizza that is a VegetarianPizza?"
            ]
          }
        ]
      },
      "CheeseyPizza": {
        "axiom": {
          "equivalentClass": [
            "(Pizza and [hasTopping some CheeseTopping])"
          ]
        },
        "description": "CheeseyPizza is formally defined as any Pizza that has at least one cheese topping, expressed by the equivalence axiom: CheeseyPizza â‰¡ Pizza and (hasTopping some CheeseTopping). This means that every instance of CheeseyPizza must be a pizza with one or more cheese toppings, aligning with the description: any pizza that has at least one cheese topping.",
        "CQ": [
          {
            "axiom": "CheeseyPizza equivalentClass (Pizza and [hasTopping some CheeseTopping])",
            "CQ": [
              "Is a CheeseyPizza necessarily a Pizza that has at least one CheeseTopping as a topping?",
              "Is the set of CheeseyPizza identical to the intersection of all Pizzas and those having some CheeseTopping?",
              "Can an individual be classified as CheeseyPizza only if it is both a Pizza and possesses at least one hasTopping relationship to CheeseTopping?"
            ]
          }
        ]
      },
      "Country": {
        "axiom": {
          "equivalentClass": [
            "({America, Italy, Germany, France, England} and DomainConcept)"
          ]
        },
        "description": "Country is an enumerated class, defined as exactly the set containing America, England, France, Germany, and Italy. It is equivalent to the intersection of this set and DomainConcept, meaning each Country instance must be one of these individuals and also a DomainConcept. By axiom, no other individuals can be classified as Country; all specified countries are explicitly different from each other.",
        "CQ": [
          {
            "axiom": "Country equivalentClass ({America, Italy, Germany, France, England} and DomainConcept)",
            "CQ": [
              "Is Country defined as the intersection of the individuals America, Italy, Germany, France, England and the class DomainConcept?",
              "Does every instance of Country correspond to one of America, Italy, Germany, France, or England and also to DomainConcept?",
              "Are there any individuals that are America, Italy, Germany, France, or England and DomainConcept but not classified as Country?"
            ]
          }
        ]
      },
      "InterestingPizza": {
        "axiom": {
          "equivalentClass": [
            "([hasTopping min 3] and Pizza)"
          ]
        },
        "description": "InterestingPizza is defined as a subclass of Pizza that has at least three toppings, as specified by a minimum cardinality restriction (hasTopping min 3). This class is equivalent to pizzas possessing at least three values for the hasTopping property, regardless of the type of topping. It is important to note that this restriction is not a qualified cardinality constraint (QCR); it does not require that the toppings belong to a specific class such as PizzaTopping. This formalization captures any pizza with three or more toppings without specifying their types.",
        "CQ": [
          {
            "axiom": "InterestingPizza equivalentClass ([hasTopping min 3] and Pizza)",
            "CQ": [
              "Does every InterestingPizza necessarily have at least three toppings and be a Pizza?",
              "Can InterestingPizza be considered identical to the intersection of Pizzas with a minimum of three toppings?",
              "Is having at least three toppings a necessary and sufficient condition for a Pizza to be an InterestingPizza?"
            ]
          }
        ]
      },
      "MeatyPizza": {
        "axiom": {
          "equivalentClass": [
            "([hasTopping some MeatTopping] and Pizza)"
          ]
        },
        "description": "MeatyPizza is defined as any pizza (Pizza) that has at least one meat topping, formalized through an existential restriction stating that members of this class must bear at least one hasTopping relationship to an individual of class MeatTopping. This class is equivalent to the intersection of Pizza and those entities with some MeatTopping as a topping, ensuring all MeatyPizza instances feature at least one meat-based topping.",
        "CQ": [
          {
            "axiom": "MeatyPizza equivalentClass ([hasTopping some MeatTopping] and Pizza)",
            "CQ": [
              "Is MeatyPizza defined as the intersection of Pizza and entities having at least one meat topping?",
              "Does every MeatyPizza necessarily include some topping categorized as MeatTopping?",
              "Can MeatyPizza be fully characterized as a Pizza that has at least one MeatTopping?"
            ]
          }
        ]
      },
      "SpicyPizza": {
        "axiom": {
          "equivalentClass": [
            "(Pizza and [hasTopping some SpicyTopping])"
          ]
        },
        "description": "SpicyPizza is defined as any pizza (i.e., an instance of the class Pizza) that has at least one topping which is a SpicyTopping. This equivalence axiom ensures that all and only those pizzas with some spicy topping are classified under SpicyPizza. Thus, membership in the SpicyPizza class is determined precisely by the presence of at least one spicy topping.",
        "CQ": [
          {
            "axiom": "SpicyPizza equivalentClass (Pizza and [hasTopping some SpicyTopping])",
            "CQ": [
              "Is every SpicyPizza necessarily a Pizza that has at least one topping classified as a SpicyTopping?",
              "Can SpicyPizza be precisely defined as the intersection of the class Pizza and those with some SpicyTopping?",
              "Is SpicyPizza equivalent to pizzas that are distinguished by having at least one spicy topping?"
            ]
          }
        ]
      },
      "SpicyPizzaEquivalent": {
        "axiom": {
          "equivalentClass": [
            "(Pizza and [hasTopping some ([hasSpiciness some Hot] and PizzaTopping)])"
          ]
        },
        "description": "SpicyPizzaEquivalent is defined as any Pizza that has at least one topping which is both a PizzaTopping and has a spiciness level of Hot. This equivalence axiom provides an alternative to approaches relying on a predefined SpicyTopping class, specifying instead that membership in SpicyPizzaEquivalent requires the existence of a topping meeting both conditions. This ensures precise classification of spicy pizzas based on their actual toppings' spiciness attributes.",
        "CQ": [
          {
            "axiom": "SpicyPizzaEquivalent equivalentClass (Pizza and [hasTopping some ([hasSpiciness some Hot] and PizzaTopping)])",
            "CQ": [
              "Is every SpicyPizzaEquivalent necessarily a Pizza with at least one topping that is both a PizzaTopping and possesses some degree of Hot spiciness?",
              "Is SpicyPizzaEquivalent logically defined as the intersection of Pizza and those with a topping that is both a PizzaTopping and includes some Hot spiciness?",
              "Can SpicyPizzaEquivalent be fully characterized as a Pizza that has a topping which is a PizzaTopping and has some Hot as its spiciness?"
            ]
          }
        ]
      },
      "SpicyTopping": {
        "axiom": {
          "equivalentClass": [
            "([hasSpiciness some Hot] and PizzaTopping)"
          ]
        },
        "description": "SpicyTopping is defined as an equivalent class to pizza toppings that possess a spiciness level of Hot. This means every SpicyTopping is a PizzaTopping and must have at least one instance of hot spiciness. Formally, individuals in this class are restricted to those pizza toppings that are characterized by having a hot spiciness attribute.",
        "CQ": [
          {
            "axiom": "SpicyTopping equivalentClass ([hasSpiciness some Hot] and PizzaTopping)",
            "CQ": [
              "Is every SpicyTopping necessarily both a PizzaTopping and something that has spiciness characterized as Hot?",
              "Can SpicyTopping be defined as the intersection of PizzaTopping and entities with the property hasSpiciness some Hot?",
              "Is SpicyTopping equivalent to all PizzaTopping instances that have at least one Hot spiciness attribute?"
            ]
          }
        ]
      },
      "ThinAndCrispyPizza": {
        "axiom": {
          "equivalentClass": [
            "(Pizza and [hasBase only ThinAndCrispyBase])"
          ]
        },
        "description": "ThinAndCrispyPizza is formally defined as a subclass of Pizza whose base is exclusively of type ThinAndCrispyBase. This means any individual classified as a ThinAndCrispyPizza must be a Pizza and can only have ThinAndCrispyBase as its base, with no other base types permitted. This equivalence axiom precisely characterizes ThinAndCrispyPizza by its unique crust style.",
        "CQ": [
          {
            "axiom": "ThinAndCrispyPizza equivalentClass (Pizza and [hasBase only ThinAndCrispyBase])",
            "CQ": [
              "Is every ThinAndCrispyPizza required to have only ThinAndCrispyBase as its base?",
              "Is ThinAndCrispyPizza equivalent to pizzas that exclusively use ThinAndCrispyBase?",
              "Can ThinAndCrispyPizza be fully defined as the intersection of Pizza and things with base restricted solely to ThinAndCrispyBase?"
            ]
          }
        ]
      },
      "VegetarianPizzaEquivalent1": {
        "axiom": {
          "equivalentClass": [
            "(Pizza and [hasTopping only VegetarianTopping])"
          ]
        },
        "description": "VegetarianPizzaEquivalent1 is defined as any pizza (member of the Pizza class) whose toppings, if present, are exclusively vegetarian; that is, it only has toppings that are instances of VegetarianTopping, or it has no toppings at all. Formally, it is equivalent to the intersection of Pizza and those that satisfy the restriction 'hasTopping only VegetarianTopping'. According to the description, this class should be inferred to be equivalent to VegetarianPizzaEquiv2 but is not equivalent to the broader VegetarianPizza class, as the latter does not assume that PizzaTopping encompasses all possible toppings.",
        "CQ": [
          {
            "axiom": "VegetarianPizzaEquivalent1 equivalentClass (Pizza and [hasTopping only VegetarianTopping])",
            "CQ": [
              "Does VegetarianPizzaEquivalent1 include only those Pizzas where all toppings are VegetarianTopping?",
              "Is VegetarianPizzaEquivalent1 equivalent to the intersection of Pizza and items whose toppings are restricted to VegetarianTopping?",
              "Can VegetarianPizzaEquivalent1 be defined as a Pizza that necessarily has only VegetarianTopping as its topping?"
            ]
          }
        ]
      },
      "VegetarianPizzaEquivalent2": {
        "axiom": {
          "equivalentClass": [
            "(Pizza and [hasTopping only (SauceTopping or CheeseTopping or VegetableTopping or FruitTopping or NutTopping or HerbSpiceTopping)])"
          ]
        },
        "description": "VegetarianPizzaEquivalent2 is defined as a class equivalent to pizzas that have only sauce, cheese, vegetable, fruit, nut, or herb & spice toppingsâ€”no other topping types are permitted. This definition provides an alternative to VegetarianPizzaEquiv1 by specifying allowed toppings directly, avoiding dependency on a pre-defined VegetarianTopping class. However, it is noted that this approach may be less maintainable and is not equivalent to the original VegetarianPizza class.",
        "CQ": [
          {
            "axiom": "VegetarianPizzaEquivalent2 equivalentClass (Pizza and [hasTopping only (SauceTopping or CheeseTopping or VegetableTopping or FruitTopping or NutTopping or HerbSpiceTopping)])",
            "CQ": [
              "Is VegetarianPizzaEquivalent2 defined as a Pizza that can only have toppings that are either SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping?",
              "Can a VegetarianPizzaEquivalent2 ever have a topping outside the categories of SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping?",
              "Is being a Pizza with toppings restricted exclusively to SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping sufficient for classification as a VegetarianPizzaEquivalent2?"
            ]
          }
        ]
      },
      "VegetarianTopping": {
        "axiom": {
          "equivalentClass": [
            "(PizzaTopping and (SauceTopping or CheeseTopping or VegetableTopping or FruitTopping or NutTopping or HerbSpiceTopping))"
          ]
        },
        "description": "VegetarianTopping is formally defined as a pizza topping that must be one of the following: SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping. This equivalence axiom ensures that every VegetarianTopping is a subclass of PizzaTopping and cannot be any topping outside this specified set. In practice, this means only toppings within these categories are considered vegetarian according to the ontology.",
        "CQ": [
          {
            "axiom": "VegetarianTopping equivalentClass (PizzaTopping and (SauceTopping or CheeseTopping or VegetableTopping or FruitTopping or NutTopping or HerbSpiceTopping))",
            "CQ": [
              "Is every VegetarianTopping necessarily classified as a PizzaTopping and also as one of: SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping?",
              "Is VegetarianTopping equivalent to the intersection of PizzaTopping with the union of SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, and HerbSpiceTopping?",
              "Does VegetarianTopping include any toppings apart from SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping within the category of PizzaTopping?"
            ]
          }
        ]
      }
    },
    "properties": {}
  },
  "time": {
    "classes": {
      "time:TemporalEntity": {
        "axiom": {
          "equivalentClass": [
            "(time:Instant or time:Interval)"
          ]
        },
        "description": "time:TemporalEntity is defined as a class equivalent to either time:Instant or time:Interval. This means any instance of time:TemporalEntity must be either an instant (representing a single point in time) or an interval (representing a duration between two points in time). This equivalence captures the generality of temporal entities, encompassing both points and periods within a temporal framework.",
        "CQ": [
          {
            "axiom": "time:TemporalEntity equivalentClass (time:Instant or time:Interval)",
            "CQ": [
              "Is time:TemporalEntity defined as the union of time:Instant and time:Interval?",
              "Are all instances of time:TemporalEntity necessarily either a time:Instant or a time:Interval?",
              "Does time:TemporalEntity include any instance that is not a time:Instant or a time:Interval?"
            ]
          }
        ]
      }
    },
    "properties": {}
  },
  "stuff": {
    "classes": {
      "NumberOfPhases": {
        "axiom": {
          "subClassOf": [
            "AbstractRegion"
          ],
          "propertyRestrictions": [
            "[hasDataValue some xsd:nonNegativeInteger]"
          ]
        },
        "description": "NumberOfPhases is defined as a subclass of AbstractRegion, where each instance must have at least one associated data value of type xsd:nonNegativeInteger (i.e., a non-negative integer). This class provides an alternative way of modeling the number of phases, as opposed to direct datatype usage. The formalization requires that every NumberOfPhases individual be characterized by a non-negative integer value indicating the number of phases.",
        "CQ": [
          {
            "axiom": "NumberOfPhases subClassOf AbstractRegion",
            "CQ": [
              "Is NumberOfPhases categorized under the broader class of AbstractRegion?",
              "Which entities are subclasses of AbstractRegion, such as NumberOfPhases?",
              "What general classes does NumberOfPhases fall under within the ontology?"
            ]
          },
          {
            "axiom": "NumberOfPhases propertyRestrictions [hasDataValue some xsd:nonNegativeInteger]",
            "CQ": [
              "Must every instance of NumberOfPhases possess a hasDataValue property with a non-negative integer value?",
              "Is it required that NumberOfPhases is associated with at least one hasDataValue that is a non-negative integer?",
              "Does the class NumberOfPhases necessarily include only those entities that have a hasDataValue of some non-negative integer type?"
            ]
          }
        ]
      },
      "LeastPortion": {
        "axiom": {
          "subClassOf": [
            "Portion",
            "not [hasPortion some Portion]"
          ]
        },
        "description": "LeastPortion is defined as a subclass of Portion that does not contain any further Portion as a part (i.e., it cannot be subdivided into smaller portions). It represents the smallest possible portion that still exhibits all macroscopic properties characteristic of its kind, analogous to the concept of an atom in mereology, but specifically applied to \"stuffs\" or material substances. This ensures that individuals of LeastPortion are indivisible relative to the kind of material or substance under consideration.",
        "CQ": [
          {
            "axiom": "LeastPortion subClassOf Portion",
            "CQ": [
              "Does LeastPortion fall under the general classification of Portion?",
              "Which specific types are included as subdivisions of Portion, such as LeastPortion?",
              "What broader classes encompass LeastPortion in their hierarchy?"
            ]
          },
          {
            "axiom": "LeastPortion subClassOf not [hasPortion some Portion]",
            "CQ": [
              "Which entities are classified as LeastPortion under the restriction of not having any associated Portion via hasPortion?",
              "Does being a member of LeastPortion imply the absence of any hasPortion relationship to Portion?",
              "What classes are included in the category of entities that do not possess any Portion through the hasPortion property, such as LeastPortion?"
            ]
          }
        ]
      },
      "Portion": {
        "axiom": {
          "subClassOf": [
            "AmountOfStuff"
          ],
          "propertyRestrictions": [
            "[portionOf some AmountOfStuff]"
          ]
        },
        "description": "Portion is defined as a subclass of AmountOfStuff, representing a specific part or segment derived from a larger whole. Every Portion is characterized by the property restriction that it must be a portion of some AmountOfStuff, ensuring a relational dependency with another instance of AmountOfStuff. This formalization encapsulates the idea that a Portion cannot exist independently, but always as a part related to a greater quantity or whole.",
        "CQ": [
          {
            "axiom": "Portion subClassOf AmountOfStuff",
            "CQ": [
              "Does Portion fall under the general classification of AmountOfStuff?",
              "Which concepts are more specific than AmountOfStuff, such as Portion?",
              "What broader categories encompass Portion within the ontology?"
            ]
          },
          {
            "axiom": "Portion propertyRestrictions [portionOf some AmountOfStuff]",
            "CQ": [
              "Is every Portion necessarily a portion of some AmountOfStuff?",
              "Is it required for a Portion to be linked via 'portionOf' to at least one AmountOfStuff instance?",
              "Can a Portion exist without being associated with an AmountOfStuff through the 'portionOf' property?"
            ]
          }
        ]
      },
      "UnstructuredPureStuff": {
        "axiom": {
          "subClassOf": [
            "PureStuff"
          ],
          "equivalentClass": [
            "(PureStuff and [hasGranuleType only Atom] and [hasGranuleType exactly 1 Atom])"
          ]
        },
        "description": "UnstructuredPureStuff is a subclass of PureStuff, formally defined as material that contains exactly one type of atom as its granular component (i.e., it satisfies the restriction [hasGranuleType only Atom] and [hasGranuleType exactly 1 Atom]). This means all constituent atoms are of the same atomic type, corresponding to the ontological equivalent of a chemical element (e.g., a quantity of helium or gold). This class is synonymous with the notion of an \"Element\" and disregards the presence of undetectable impurities. The definition intends that the \"one atom\" restriction refers to a single atomic type, not a single individual atom.",
        "CQ": [
          {
            "axiom": "UnstructuredPureStuff subClassOf PureStuff",
            "CQ": [
              "Is UnstructuredPureStuff included as a specific type within PureStuff?",
              "Which subclasses fall under the category of PureStuff, such as UnstructuredPureStuff?",
              "To what higher-level groups does UnstructuredPureStuff pertain?"
            ]
          },
          {
            "axiom": "UnstructuredPureStuff equivalentClass (PureStuff and [hasGranuleType only Atom] and [hasGranuleType exactly 1 Atom])",
            "CQ": [
              "Is UnstructuredPureStuff logically equivalent to the intersection of PureStuff and those with exactly one granule type, which must be Atom?",
              "Does every instance of UnstructuredPureStuff have only one granule type, and that granule type is Atom?",
              "Is UnstructuredPureStuff fully defined as a subclass of PureStuff that can have no granule types other than a single Atom?"
            ]
          }
        ]
      },
      "StuffRole": {
        "axiom": {
          "subClassOf": [
            "Role"
          ],
          "propertyRestrictions": [
            "[srInheresIn some Stuff]"
          ]
        },
        "description": "StuffRole is a subclass of Role, defined by the axiom that it inheres in some instance of Stuff. This class represents the specific role that a 'stuff' (material substance) assumes within a mixture, indicating its functional participation or relevance in the context of that mixture.",
        "CQ": [
          {
            "axiom": "StuffRole subClassOf Role",
            "CQ": [
              "Is StuffRole categorized as a more specific type within the broader concept of Role?",
              "Which subtypes fall under the umbrella of Role, specifically including StuffRole?",
              "What are the overarching classes to which StuffRole belongs?"
            ]
          },
          {
            "axiom": "StuffRole propertyRestrictions [srInheresIn some Stuff]",
            "CQ": [
              "Is every StuffRole necessarily associated with at least one Stuff through the srInheresIn property?",
              "Must a StuffRole have the srInheresIn relation to some instance of Stuff?",
              "Does the existence of a StuffRole imply that it inheres in one or more Stuff via srInheresIn?"
            ]
          }
        ]
      }
    },
    "properties": {
      "stuffFormingRelation": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "(ContinuousMedium or DispersedPhase or Solute or Solvent)"
          ],
          "range": [
            "(ContinuousMedium or DispersedPhase or Solute or Solvent)"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"stuffFormingRelation\" relates individuals that are either ContinuousMedium, DispersedPhase, Solute, or Solvent. It has no explicit property characteristics, super-properties, or inverses. This property is used to represent relationships that characterize the formation or interactions among substances within a mixture, such as surface tension effects, molecular interactions (e.g., hydrogen bonding), or compositional ratios (e.g., the proportional amounts required to form a mixture like lemonade). Both the domain and range are restricted to the aforementioned substance types.",
        "CQ": [
          {
            "axiom": "stuffFormingRelation domain (ContinuousMedium or DispersedPhase or Solute or Solvent)",
            "CQ": [
              "Can the property 'stuffFormingRelation' have subjects other than ContinuousMedium, DispersedPhase, Solute, or Solvent?",
              "Are there any entities that cannot serve as a subject for the 'stuffFormingRelation' property?",
              "What types of things can be the domain for the property 'stuffFormingRelation'?"
            ]
          },
          {
            "axiom": "stuffFormingRelation range (ContinuousMedium or DispersedPhase or Solute or Solvent)",
            "CQ": [
              "Is it possible for 'stuffFormingRelation' to relate to an entity that is not a ContinuousMedium, DispersedPhase, Solute, or Solvent?",
              "Are all possible ranges for 'stuffFormingRelation' restricted to ContinuousMedium, DispersedPhase, Solute, or Solvent?",
              "Which types of entities can serve as the range for the property 'stuffFormingRelation'?"
            ]
          }
        ]
      },
      "portionOf": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "(AmountOfStuff or Stuff)"
          ],
          "range": [
            "(AmountOfStuff or Stuff)"
          ],
          "subPropertyOf": [
            "properPartOf"
          ],
          "inverseOf": []
        },
        "description": "The property \"portionOf\" relates an entity of type AmountOfStuff or Stuff to another entity of the same type, representing a portion or part of the same kind of matter (e.g., a slice of cake to the cake, a glass of wine to the bottle of wine). The domain and range are both restricted to AmountOfStuff or Stuff. It is a sub-property of \"properPartOf\" and has no specified characteristics or inverse property. This property is intended for use with mass nouns or non-countable substances.",
        "CQ": [
          {
            "axiom": "portionOf domain (AmountOfStuff or Stuff)",
            "CQ": [
              "Does the property 'portionOf' have a domain different from 'AmountOfStuff' or 'Stuff'?",
              "Are there any entities that can be the subject of 'portionOf' aside from 'AmountOfStuff' or 'Stuff'?",
              "What types of entities are permitted as subjects of the 'portionOf' property?"
            ]
          },
          {
            "axiom": "portionOf range (AmountOfStuff or Stuff)",
            "CQ": [
              "Is every value used with the property 'portionOf' required to be either an AmountOfStuff or Stuff?",
              "Can 'portionOf' have a range that is not AmountOfStuff or Stuff?",
              "What entities are permitted as the range of the property 'portionOf'?"
            ]
          },
          {
            "axiom": "portionOf subPropertyOf properPartOf",
            "CQ": [
              "Is portionOf considered a subproperty of properPartOf?",
              "What superproperties are associated with the portionOf property?",
              "Which subproperties are defined under the properPartOf property?"
            ]
          }
        ]
      },
      "isContainedScatteredPortionOf": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "(AmountOfStuff or Stuff)"
          ],
          "range": [
            "(AmountOfStuff or Stuff)"
          ],
          "subPropertyOf": [
            "scatteredPortionOf"
          ],
          "inverseOf": []
        },
        "description": "The property \"isContainedScatteredPortionOf\" relates instances of AmountOfStuff or Stuff to other instances of the same types, indicating that the subject is a portion that originated from a larger whole and currently requires a container. As a subproperty of \"scatteredPortionOf,\" it specifically captures the context where a portion, such as 'wine in a wine glass,' was part of a bulk amount, now separated and needing containment. No explicit property characteristics, inverse, or additional hierarchical relations are defined.",
        "CQ": [
          {
            "axiom": "isContainedScatteredPortionOf domain (AmountOfStuff or Stuff)",
            "CQ": [
              "Can the property 'isContainedScatteredPortionOf' apply to subjects other than AmountOfStuff or Stuff?",
              "What are the possible domain classes for the property 'isContainedScatteredPortionOf'?",
              "Are all entities categorized as AmountOfStuff or Stuff valid subjects for the property 'isContainedScatteredPortionOf'?"
            ]
          },
          {
            "axiom": "isContainedScatteredPortionOf range (AmountOfStuff or Stuff)",
            "CQ": [
              "Does 'isContainedScatteredPortionOf' have a range other than AmountOfStuff or Stuff?",
              "Can the property 'isContainedScatteredPortionOf' be used with values that are not instances of AmountOfStuff or Stuff?",
              "What types of entities are permitted as the range for 'isContainedScatteredPortionOf'?"
            ]
          },
          {
            "axiom": "isContainedScatteredPortionOf subPropertyOf scatteredPortionOf",
            "CQ": [
              "Is isContainedScatteredPortionOf categorized as a subproperty of scatteredPortionOf?",
              "Which subproperties are included under scatteredPortionOf in the ontology?",
              "What are the direct superproperties of isContainedScatteredPortionOf?"
            ]
          }
        ]
      },
      "scatteredStuffPartOf": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "(AmountOfStuff or Stuff)"
          ],
          "range": [
            "(AmountOfStuff or Stuff)"
          ],
          "subPropertyOf": [
            "properPartOf"
          ],
          "inverseOf": []
        },
        "description": "The property \"scatteredStuffPartOf\" is a subproperty of \"properPartOf\" and relates instances of \"AmountOfStuff\" or \"Stuff\" to other instances within the same classes. It is intended to connect quantities or types of matterâ€”typically those denoted by mass nouns in natural language (e.g., gold, milk, mayonnaise)â€”with their constituent ingredients that are of a different type (e.g., alcohol in wine, oil in mayonnaise, sugar in cake). The property does not specify domain or range characteristics beyond these classes and has no defined inverse. It also suggests a temporal dimension, where the part was once a contiguous proper part of the whole, but is now scattered or integrated.",
        "CQ": [
          {
            "axiom": "scatteredStuffPartOf domain (AmountOfStuff or Stuff)",
            "CQ": [
              "Does the property 'scatteredStuffPartOf' apply to subjects other than AmountOfStuff or Stuff?",
              "What classes are permitted as the domain for the property 'scatteredStuffPartOf'?",
              "Is it possible for an instance that is not an AmountOfStuff or Stuff to use the 'scatteredStuffPartOf' property as its subject?"
            ]
          },
          {
            "axiom": "scatteredStuffPartOf range (AmountOfStuff or Stuff)",
            "CQ": [
              "Does 'scatteredStuffPartOf' have a range beyond 'AmountOfStuff' or 'Stuff'?",
              "Is every object associated with the property 'scatteredStuffPartOf' necessarily an instance of 'AmountOfStuff' or 'Stuff'?",
              "Which types of entities can serve as the range for the property 'scatteredStuffPartOf'?"
            ]
          },
          {
            "axiom": "scatteredStuffPartOf subPropertyOf properPartOf",
            "CQ": [
              "Is every instance of scatteredStuffPartOf also recognized as an instance of properPartOf?",
              "Which subproperties does properPartOf encompass within the ontology?",
              "What are the direct superproperties for scatteredStuffPartOf?"
            ]
          }
        ]
      },
      "scatteredPortionOf": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "(AmountOfStuff or Stuff)"
          ],
          "range": [
            "(AmountOfStuff or Stuff)"
          ],
          "subPropertyOf": [
            "properPartOf"
          ],
          "inverseOf": []
        },
        "description": "The property \"scatteredPortionOf\" has a domain and range restricted to either AmountOfStuff or Stuff. It is defined as a subproperty of \"properPartOf\" and has no explicitly specified characteristics or inverse. This property is intended to represent a specific kind of portion relationship but is not made a subproperty of \"portionOf\" to avoid reasoning cycles and undecidability in Description Logics. The distinction between this property and related properties is primarily temporal, which is not expressible in OWL; therefore, \"scatteredPortionOf\" and \"portionOf\" are modeled as sibling properties to enable practical property chaining in reasoning.",
        "CQ": [
          {
            "axiom": "scatteredPortionOf domain (AmountOfStuff or Stuff)",
            "CQ": [
              "Can the property 'scatteredPortionOf' have a subject that is not an AmountOfStuff or Stuff?",
              "Is there any AmountOfStuff or Stuff that is not associated with 'scatteredPortionOf'?",
              "What are the possible classes that can serve as the domain for the property 'scatteredPortionOf'?"
            ]
          },
          {
            "axiom": "scatteredPortionOf range (AmountOfStuff or Stuff)",
            "CQ": [
              "Is every value assigned via 'scatteredPortionOf' restricted to being an AmountOfStuff or Stuff?",
              "What types of entities can be the object of the 'scatteredPortionOf' property?",
              "Are there any entities other than AmountOfStuff or Stuff that can be in the range of 'scatteredPortionOf'?"
            ]
          },
          {
            "axiom": "scatteredPortionOf subPropertyOf properPartOf",
            "CQ": [
              "Is every scatteredPortionOf relationship necessarily a type of properPartOf relationship?",
              "Which properties are classified as subproperties under properPartOf in the ontology?",
              "What superproperties does scatteredPortionOf have within the property hierarchy?"
            ]
          }
        ]
      },
      "hasQuality": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "(Endurant or Perdurant)"
          ],
          "range": [
            "Quality"
          ],
          "subPropertyOf": [],
          "inverseOf": []
        },
        "description": "The property \"hasQuality\" has no explicitly defined characteristics or super-properties. Its domain includes entities classified as Endurant or Perdurant, and its range is restricted to instances of Quality. This property is used to relate an Endurant or Perdurant to a Quality. No inverse property is specified.",
        "CQ": [
          {
            "axiom": "hasQuality domain (Endurant or Perdurant)",
            "CQ": [
              "Can 'hasQuality' be used with subjects other than Endurant or Perdurant?",
              "Are all instances associated with 'hasQuality' required to be either Endurant or Perdurant as the subject?",
              "What entities are permitted to serve as the domain for the property 'hasQuality'?"
            ]
          },
          {
            "axiom": "hasQuality range Quality",
            "CQ": [
              "Does the property 'hasQuality' only accept individuals of type 'Quality' as its range?",
              "Are there any entities that must not be used as the value for 'hasQuality'?",
              "What types of individuals may appear as the range of the 'hasQuality' property?"
            ]
          }
        ]
      },
      "isSelfContainedScatteredPortionOf": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "(AmountOfStuff or Stuff)"
          ],
          "range": [
            "(AmountOfStuff or Stuff)"
          ],
          "subPropertyOf": [
            "scatteredPortionOf"
          ],
          "inverseOf": []
        },
        "description": "The property \"isSelfContainedScatteredPortionOf\" relates an entity classified as \"AmountOfStuff\" or \"Stuff\" to another entity of the same types, indicating that the former is a self-standing, scattered portion of the latter (such as a lump, drop, or slice). It is a sub-property of \"scatteredPortionOf\" and does not specify any particular characteristics or inverse properties. This property is typically used to denote portions that were once part of a larger whole but now exist as distinct, stand-alone pieces.",
        "CQ": [
          {
            "axiom": "isSelfContainedScatteredPortionOf domain (AmountOfStuff or Stuff)",
            "CQ": [
              "Is it possible for 'isSelfContainedScatteredPortionOf' to have a domain other than AmountOfStuff or Stuff?",
              "Can entities outside of AmountOfStuff or Stuff be involved as the subject of the property 'isSelfContainedScatteredPortionOf'?",
              "What kinds of entities are permitted as the domain for 'isSelfContainedScatteredPortionOf'?"
            ]
          },
          {
            "axiom": "isSelfContainedScatteredPortionOf range (AmountOfStuff or Stuff)",
            "CQ": [
              "Can the property 'isSelfContainedScatteredPortionOf' relate entities to anything other than 'AmountOfStuff' or 'Stuff'?",
              "Is every value associated with the property 'isSelfContainedScatteredPortionOf' restricted to instances of 'AmountOfStuff' or 'Stuff'?",
              "What kinds of entities are permitted as the range for the property 'isSelfContainedScatteredPortionOf'?"
            ]
          },
          {
            "axiom": "isSelfContainedScatteredPortionOf subPropertyOf scatteredPortionOf",
            "CQ": [
              "Is isSelfContainedScatteredPortionOf a subproperty of scatteredPortionOf?",
              "Which subproperties are encompassed by scatteredPortionOf?",
              "What are the direct superproperties of isSelfContainedScatteredPortionOf?"
            ]
          }
        ]
      },
      "stuffPartOf": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "(AmountOfStuff or Stuff)"
          ],
          "range": [
            "(AmountOfStuff or Stuff)"
          ],
          "subPropertyOf": [
            "properPartOf"
          ],
          "inverseOf": []
        },
        "description": "The property \"stuffPartOf\" relates entities classified as AmountOfStuff or Stuff to other entities of the same categories, indicating a part-whole relationship specifically among mass nouns or substances that are not typically countable. It is a subproperty of \"properPartOf,\" emphasizing that the 'part' is a distinct type of stuff or ingredient within another. No additional property characteristics or inverse are specified. Examples include alcohol as a stuff-part of wine, oil in mayonnaise, or sugar in cake.",
        "CQ": [
          {
            "axiom": "stuffPartOf domain (AmountOfStuff or Stuff)",
            "CQ": [
              "Is there any subject using 'stuffPartOf' that is not an AmountOfStuff or Stuff?",
              "Can entities outside AmountOfStuff or Stuff have the 'stuffPartOf' property?",
              "What classes can serve as the domain for the property 'stuffPartOf'?"
            ]
          },
          {
            "axiom": "stuffPartOf range (AmountOfStuff or Stuff)",
            "CQ": [
              "Can the property 'stuffPartOf' refer to objects other than AmountOfStuff or Stuff as its value?",
              "Is every value associated with the property 'stuffPartOf' required to be of type AmountOfStuff or Stuff?",
              "What types of resources are permitted as the range of the 'stuffPartOf' property?"
            ]
          },
          {
            "axiom": "stuffPartOf subPropertyOf properPartOf",
            "CQ": [
              "Is stuffPartOf always interpreted as a type of properPartOf within the ontology?",
              "Which properties are direct subproperties of properPartOf?",
              "What superproperties are associated with stuffPartOf?"
            ]
          }
        ]
      },
      "isContiguousPortionOf": {
        "axiom": {
          "characteristics": [],
          "domain": [
            "(AmountOfStuff or Stuff)"
          ],
          "range": [
            "(AmountOfStuff or Stuff)"
          ],
          "subPropertyOf": [
            "properPartOf"
          ],
          "inverseOf": []
        },
        "description": "The property \"isContiguousPortionOf\" relates an instance of AmountOfStuff or Stuff to another of the same types, indicating that the subject is a contiguous portion of the object. It is defined as a sub-property of \"properPartOf\" and has no specified inverse or additional property characteristics. Although originally intended as a super-property of \"portionOf\", it is classified as a sibling to avoid logical cycles and maintain decidability within OWL reasoning. This distinction primarily addresses semantic differences involving temporality not representable in OWL.",
        "CQ": [
          {
            "axiom": "isContiguousPortionOf domain (AmountOfStuff or Stuff)",
            "CQ": [
              "Is the domain of the property 'isContiguousPortionOf' limited to AmountOfStuff or Stuff, or can it include other classes?",
              "Are there any instances of AmountOfStuff or Stuff that cannot be subjects of 'isContiguousPortionOf'?",
              "What entity types are eligible to serve as the domain for the property 'isContiguousPortionOf'?"
            ]
          },
          {
            "axiom": "isContiguousPortionOf range (AmountOfStuff or Stuff)",
            "CQ": [
              "Is every value associated with 'isContiguousPortionOf' necessarily of type 'AmountOfStuff' or 'Stuff'?",
              "Can entities other than 'AmountOfStuff' or 'Stuff' serve as the object for the property 'isContiguousPortionOf'?",
              "What types are permitted as the range of the 'isContiguousPortionOf' property?"
            ]
          },
          {
            "axiom": "isContiguousPortionOf subPropertyOf properPartOf",
            "CQ": [
              "Which property is the direct superproperty of isContiguousPortionOf?",
              "Does the use of isContiguousPortionOf always entail the use of properPartOf?",
              "What properties are classified as subproperties under properPartOf?"
            ]
          }
        ]
      }
    }
  },
  "home": {
    "classes": {
      "SleepSummary": {
        "axiom": {
          "subClassOf": [
            "DaySummary"
          ],
          "propertyRestrictions": [
            "[totalDurationOfNaps exactly 1 xsd:int]",
            "[sleepBedTime exactly 1 xsd:dateTime]",
            "[duration only xsd:int]",
            "[sleepEfficiency exactly 1 xsd:double]",
            "[sleepMovementIndex only xsd:double]",
            "[duration exactly 1 xsd:int]",
            "[sleepMovementIndex exactly 1 xsd:double]",
            "[numberOfNaps only xsd:int]",
            "[totalDurationOfNaps only xsd:int]",
            "[numberOfNaps exactly 1 xsd:int]",
            "[numberOfArousals only xsd:int]",
            "[numberOfAwakenings exactly 1 xsd:int]",
            "[wakeUpTime only xsd:dateTime]",
            "[numberOfBedExits only xsd:int]",
            "[lightLevel only xsd:string]",
            "[sleepTime exactly 1 xsd:dateTime]",
            "[sleepBedTime only xsd:dateTime]",
            "[numberOfAwakenings only xsd:int]",
            "[lightLevel exactly 1 xsd:string]",
            "[numberOfBedExits exactly 1 xsd:int]",
            "[sleepLatency exactly 1 xsd:int]",
            "[sleepEfficiency only xsd:double]",
            "[sleepLatency only xsd:int]",
            "[numberOfArousals exactly 1 xsd:int]",
            "[sleepTime only xsd:dateTime]",
            "[wakeUpTime exactly 1 xsd:dateTime]"
          ]
        },
        "description": "SleepSummary is defined as a subclass of DaySummary that captures a comprehensive summary of an individual's sleep for a given day. Each SleepSummary instance is characterized by exactly one value for sleepBedTime, sleepTime, wakeUpTime (all xsd:dateTime), duration, totalDurationOfNaps, numberOfNaps, numberOfArousals, numberOfAwakenings, numberOfBedExits, sleepLatency (all xsd:int), sleepEfficiency and sleepMovementIndex (all xsd:double), and lightLevel (xsd:string). These properties ensure that each SleepSummary provides detailed and quantitative metrics for sleep episodes, including timings, efficiency, nap statistics, nocturnal movements, arousals, awakenings, light levels, and related quantitative indicators, supporting precise day-by-day rest analysis.",
        "CQ": [
          {
            "axiom": "SleepSummary subClassOf DaySummary",
            "CQ": [
              "Does SleepSummary represent a more specific form of DaySummary?",
              "Which summaries are subtypes of DaySummary, such as SleepSummary?",
              "What broader summary types include SleepSummary as a specialized subclass?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [totalDurationOfNaps exactly 1 xsd:int]",
            "CQ": [
              "Does every SleepSummary instance record exactly one value for the total duration of naps?",
              "Is it permissible for a SleepSummary to have multiple or zero entries for the totalDurationOfNaps property?",
              "Is the totalDurationOfNaps property for each SleepSummary restricted to holding a single integer value?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [sleepBedTime exactly 1 xsd:dateTime]",
            "CQ": [
              "Is every instance of SleepSummary required to have exactly one value for the sleepBedTime property?",
              "Can a SleepSummary have more than one or fewer than one sleepBedTime specified?",
              "Is the sleepBedTime attribute of SleepSummary restricted to a single xsd:dateTime value for each record?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [duration only xsd:int]",
            "CQ": [
              "Does every SleepSummary only have the duration property with values of type xsd:int?",
              "Is it required that all duration properties associated with a SleepSummary are integers?",
              "Can a SleepSummary have a duration property whose value is not an integer?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [sleepEfficiency exactly 1 xsd:double]",
            "CQ": [
              "Is every instance of SleepSummary required to have exactly one value for the property sleepEfficiency of type double?",
              "Can a SleepSummary have more than one or no values assigned to the sleepEfficiency property?",
              "Is it possible for the sleepEfficiency property of SleepSummary to be of a datatype other than double?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [sleepMovementIndex only xsd:double]",
            "CQ": [
              "Does SleepSummary restrict the property 'sleepMovementIndex' to only have values of type xsd:double?",
              "Is it required that all instances of 'sleepMovementIndex' associated with SleepSummary must be xsd:double values?",
              "Can SleepSummary have any 'sleepMovementIndex' values that are not xsd:double?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [duration exactly 1 xsd:int]",
            "CQ": [
              "Is each SleepSummary instance required to have exactly one duration value specified as an integer?",
              "Can a SleepSummary entity possess more than one or less than one duration property assigned?",
              "Does the ontology restrict SleepSummary to associate with only a single integer value for duration?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [sleepMovementIndex exactly 1 xsd:double]",
            "CQ": [
              "Is it required that each SleepSummary has exactly one value for the property sleepMovementIndex of type xsd:double?",
              "Can a SleepSummary be valid if it is associated with more than one sleepMovementIndex value?",
              "Does the SleepSummary class ensure that the property sleepMovementIndex occurs exactly once and only as a double datatype?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [numberOfNaps only xsd:int]",
            "CQ": [
              "Does a SleepSummary record only allow the property 'numberOfNaps' to have values of type xsd:int?",
              "Is it required that every value for 'numberOfNaps' in SleepSummary be an integer?",
              "Can 'numberOfNaps' in a SleepSummary ever have a value that is not an xsd:int?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [totalDurationOfNaps only xsd:int]",
            "CQ": [
              "Are values for totalDurationOfNaps in SleepSummary restricted exclusively to integers?",
              "Can SleepSummary record totalDurationOfNaps using any datatype besides xsd:int?",
              "Is it possible for totalDurationOfNaps in SleepSummary to be anything other than an integer value?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [numberOfNaps exactly 1 xsd:int]",
            "CQ": [
              "Is it required that a SleepSummary instance always records exactly one value for the property numberOfNaps?",
              "Can a SleepSummary ever have more or fewer than one numberOfNaps specified?",
              "Does the property numberOfNaps in SleepSummary strictly permit only a single integer value?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [numberOfArousals only xsd:int]",
            "CQ": [
              "Are the values assigned to 'numberOfArousals' for SleepSummary instances limited exclusively to integer types?",
              "Can a SleepSummary have a 'numberOfArousals' value that is not an integer?",
              "Does every 'numberOfArousals' property recorded in SleepSummary comply with the xsd:int datatype?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [numberOfAwakenings exactly 1 xsd:int]",
            "CQ": [
              "Is it required that each SleepSummary records exactly one value for numberOfAwakenings?",
              "Can a SleepSummary exist with more or fewer than one numberOfAwakenings value?",
              "Does the SleepSummary permit multiple values for the numberOfAwakenings property, or is it restricted to just one?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [wakeUpTime only xsd:dateTime]",
            "CQ": [
              "Is wakeUpTime for any SleepSummary instance necessarily restricted to values of type xsd:dateTime?",
              "Can a SleepSummary object have the wakeUpTime property referring exclusively to xsd:dateTime values?",
              "Does every wakeUpTime associated with SleepSummary require it to be of type xsd:dateTime and no other datatype?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [numberOfBedExits only xsd:int]",
            "CQ": [
              "Is it necessary that the 'numberOfBedExits' property for 'SleepSummary' instances must exclusively be integer values?",
              "Can a 'SleepSummary' have the 'numberOfBedExits' property assigned any datatype other than integer?",
              "Does the ontology restrict the 'numberOfBedExits' associated with a 'SleepSummary' solely to integers?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [lightLevel only xsd:string]",
            "CQ": [
              "Is it required that the 'lightLevel' property of a SleepSummary be filled exclusively with values of type xsd:string?",
              "Can the 'lightLevel' attribute in a SleepSummary ever take a non-string value?",
              "Does SleepSummary restrict 'lightLevel' entries to only accept xsd:string data types, excluding all others?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [sleepTime exactly 1 xsd:dateTime]",
            "CQ": [
              "Does a SleepSummary always record exactly one value for sleepTime?",
              "Is it possible for a SleepSummary to be associated with more than one sleepTime?",
              "Can a valid SleepSummary exist without specifying a sleepTime?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [sleepBedTime only xsd:dateTime]",
            "CQ": [
              "Is the sleepBedTime property for a SleepSummary necessarily restricted to values of type xsd:dateTime only?",
              "Can a SleepSummary have any sleepBedTime value that is not an xsd:dateTime?",
              "Does the ontology definition of SleepSummary prevent using non-xsd:dateTime values for the sleepBedTime property?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [numberOfAwakenings only xsd:int]",
            "CQ": [
              "Is it required that the property 'numberOfAwakenings' in a SleepSummary refers exclusively to values of type xsd:int?",
              "Can a SleepSummary have the 'numberOfAwakenings' property with any datatype other than xsd:int?",
              "Does SleepSummary necessarily exclude any value for 'numberOfAwakenings' that is not an integer?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [lightLevel exactly 1 xsd:string]",
            "CQ": [
              "Must every SleepSummary instance have exactly one value for the 'lightLevel' property?",
              "Is it possible for a SleepSummary to have more than one 'lightLevel' specified?",
              "Does the ontology enforce that each SleepSummary is associated with a single string-typed 'lightLevel' value?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [numberOfBedExits exactly 1 xsd:int]",
            "CQ": [
              "Is it required that a SleepSummary must have exactly one value for the property numberOfBedExits?",
              "Can a SleepSummary record more or fewer than one numberOfBedExits, or must it always be exactly one?",
              "Does every instance of SleepSummary necessarily include a single numberOfBedExits value?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [sleepLatency exactly 1 xsd:int]",
            "CQ": [
              "Is a SleepSummary required to have exactly one value for the property sleepLatency of type integer?",
              "Can a SleepSummary reference more than one sleepLatency value within its definition?",
              "Does the SleepSummary class allow for omission or multiple assignments of the sleepLatency property?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [sleepEfficiency only xsd:double]",
            "CQ": [
              "Is the sleepEfficiency property for SleepSummary instances restricted exclusively to values of type xsd:double?",
              "Can a SleepSummary have the sleepEfficiency property with any datatype other than xsd:double?",
              "Are all possible values for sleepEfficiency in a SleepSummary necessarily defined as xsd:double?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [sleepLatency only xsd:int]",
            "CQ": [
              "Is the sleepLatency property for SleepSummary restricted exclusively to integer values?",
              "Can SleepSummary have the sleepLatency property with any datatype other than xsd:int?",
              "Does every instance of SleepSummary possess only integer values for its sleepLatency attribute?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [numberOfArousals exactly 1 xsd:int]",
            "CQ": [
              "Is it mandatory for a SleepSummary to record exactly one value for the number of arousals?",
              "Can a SleepSummary have more or less than one indication for the number of arousals?",
              "Does SleepSummary allow multiple or zero values for the number of arousals property?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [sleepTime only xsd:dateTime]",
            "CQ": [
              "Are all values for the 'sleepTime' property of SleepSummary instances restricted exclusively to the datatype xsd:dateTime?",
              "Is it necessary that each SleepSummary has sleepTime expressed only with values of type xsd:dateTime?",
              "Does the ontology prevent SleepSummary from having a sleepTime value that is not of the xsd:dateTime datatype?"
            ]
          },
          {
            "axiom": "SleepSummary propertyRestrictions [wakeUpTime exactly 1 xsd:dateTime]",
            "CQ": [
              "Is every SleepSummary associated with exactly one wakeUpTime value?",
              "Can a SleepSummary have more than one or no wakeUpTime assigned?",
              "Does the property restriction require that each SleepSummary instance records only one wakeUpTime of type xsd:dateTime?"
            ]
          }
        ]
      },
      "DaySummary": {
        "axiom": {
          "propertyRestrictions": [
            "[date exactly 1 xsd:dateTime]",
            "[forPatient exactly 1 event:Patient]",
            "[date some xsd:dateTime]",
            "[forPatient some event:Patient]"
          ]
        },
        "description": "DaySummary is a class characterized by the presence of exactly one associated date (of type xsd:dateTime) and exactly one related patient (of class event:Patient). Additionally, every instance must have at least one date and be linked to at least one patient. This ensures that each DaySummary uniquely corresponds to a specific date and patient, representing summaries that are strictly tied to individual patient-days.",
        "CQ": [
          {
            "axiom": "DaySummary propertyRestrictions [date exactly 1 xsd:dateTime]",
            "CQ": [
              "Must every DaySummary be associated with exactly one date value?",
              "Is it valid for a DaySummary to have more than one date assigned?",
              "Can a DaySummary exist without a specified date value?"
            ]
          },
          {
            "axiom": "DaySummary propertyRestrictions [forPatient exactly 1 event:Patient]",
            "CQ": [
              "Must every DaySummary reference exactly one Patient through the 'forPatient' property?",
              "Can a DaySummary be associated with more than one Patient using the 'forPatient' relationship?",
              "Is it possible for a DaySummary to lack an association to a Patient via the 'forPatient' property?"
            ]
          },
          {
            "axiom": "DaySummary propertyRestrictions [date some xsd:dateTime]",
            "CQ": [
              "Is it required that every DaySummary is associated with at least one date value?",
              "Does a DaySummary necessarily reference a date using the 'date' property?",
              "Can a DaySummary exist without having any 'date' property assigned to a dateTime value?"
            ]
          },
          {
            "axiom": "DaySummary propertyRestrictions [forPatient some event:Patient]",
            "CQ": [
              "Does every DaySummary necessarily reference at least one Patient via the forPatient property?",
              "Is it required that any DaySummary instance be linked to a Patient through forPatient?",
              "Can a DaySummary exist without being associated with a Patient by the forPatient relationship?"
            ]
          }
        ]
      },
      "Problem": {
        "axiom": {
          "propertyRestrictions": [
            "[possibleContributingFactor some event:Event]"
          ]
        },
        "description": "Problem is a class characterized by the existence of at least one possible contributing factor, which must be an instance of event:Event. This means that any individual classified as a Problem is associated with one or more events identified as potential factors contributing to the occurrence of the problem.",
        "CQ": [
          {
            "axiom": "Problem propertyRestrictions [possibleContributingFactor some event:Event]",
            "CQ": [
              "Does a problem necessarily have at least one possible contributing factor that is an event?",
              "Is it required for every instance of Problem to be associated with some event as a possible contributing factor?",
              "Can a problem exist without having any event identified as a possible contributing factor?"
            ]
          }
        ]
      }
    },
    "properties": {}
  }
}